!function(t){"use strict";function e(t){if(!w(t))return Jr;b(t.objectMaxDepth)&&(Jr.objectMaxDepth=n(t.objectMaxDepth)?t.objectMaxDepth:NaN)}function n(t){return E(t)&&t>0}function r(t,e){return e=e||Error,function(){var n,r,i=arguments[0],o=arguments[1],a="["+(t?t+":":"")+i+"] ",s=G(arguments,2).map(function(t){return Ct(t,Jr.objectMaxDepth)});for(a+=o.replace(/\{\d+\}/g,function(t){var e=+t.slice(1,-1);return e<s.length?s[e]:t}),a+="\nhttp://errors.angularjs.org/1.6.6/"+(t?t+"/":"")+i,r=0,n="?";r<s.length;r++,n="&")a+=n+"p"+r+"="+encodeURIComponent(s[r]);return new e(a)}}function i(t){if(null==t||M(t))return!1;if(vi(t)||C(t)||ii&&t instanceof ii)return!0;var e="length"in Object(t)&&t.length;return E(e)&&(e>=0&&(e-1 in t||t instanceof Array)||"function"==typeof t.item)}function o(t,e,n){var r,a;if(t)if(A(t))for(r in t)"prototype"!==r&&"length"!==r&&"name"!==r&&t.hasOwnProperty(r)&&e.call(n,t[r],r,t);else if(vi(t)||i(t)){var s="object"!=typeof t;for(r=0,a=t.length;r<a;r++)(s||r in t)&&e.call(n,t[r],r,t)}else if(t.forEach&&t.forEach!==o)t.forEach(e,n,t);else if(x(t))for(r in t)e.call(n,t[r],r,t);else if("function"==typeof t.hasOwnProperty)for(r in t)t.hasOwnProperty(r)&&e.call(n,t[r],r,t);else for(r in t)Qr.call(t,r)&&e.call(n,t[r],r,t);return t}function a(t,e,n){for(var r=Object.keys(t).sort(),i=0;i<r.length;i++)e.call(n,t[r[i]],r[i]);return r}function s(t){return function(e,n){t(n,e)}}function u(){return++di}function c(t,e){e?t.$$hashKey=e:delete t.$$hashKey}function l(t,e,n){for(var r=t.$$hashKey,i=0,o=e.length;i<o;++i){var a=e[i];if(w(a)||A(a))for(var s=Object.keys(a),u=0,f=s.length;u<f;u++){var h=s[u],p=a[h];n&&w(p)?S(p)?t[h]=new Date(p.valueOf()):O(p)?t[h]=new RegExp(p):p.nodeName?t[h]=p.cloneNode(!0):R(p)?t[h]=p.clone():(w(t[h])||(t[h]=vi(p)?[]:{}),l(t[h],[p],!0)):t[h]=p}}return c(t,r),t}function f(t){return l(t,si.call(arguments,1),!1)}function h(t){return l(t,si.call(arguments,1),!0)}function p(t){return parseInt(t,10)}function d(t,e){return f(Object.create(t),e)}function $(){}function v(t){return t}function m(t){return function(){return t}}function g(t){return A(t.toString)&&t.toString!==li}function y(t){return void 0===t}function b(t){return void 0!==t}function w(t){return null!==t&&"object"==typeof t}function x(t){return null!==t&&"object"==typeof t&&!fi(t)}function C(t){return"string"==typeof t}function E(t){return"number"==typeof t}function S(t){return"[object Date]"===li.call(t)}function k(t){switch(li.call(t)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return t instanceof Error}}function A(t){return"function"==typeof t}function O(t){return"[object RegExp]"===li.call(t)}function M(t){return t&&t.window===t}function V(t){return t&&t.$evalAsync&&t.$watch}function T(t){return"[object File]"===li.call(t)}function N(t){return"[object FormData]"===li.call(t)}function I(t){return"[object Blob]"===li.call(t)}function j(t){return"boolean"==typeof t}function D(t){return t&&A(t.then)}function P(t){return t&&E(t.length)&&mi.test(li.call(t))}function _(t){return"[object ArrayBuffer]"===li.call(t)}function R(t){return!(!t||!(t.nodeName||t.prop&&t.attr&&t.find))}function U(t){var e,n={},r=t.split(",");for(e=0;e<r.length;e++)n[r[e]]=!0;return n}function L(t){return Xr(t.nodeName||t[0]&&t[0].nodeName)}function q(t,e){return-1!==Array.prototype.indexOf.call(t,e)}function F(t,e){var n=t.indexOf(e);return n>=0&&t.splice(n,1),n}function B(t,e,r){function i(t,e,n){if(--n<0)return"...";var r,i=e.$$hashKey;if(vi(t))for(var o=0,s=t.length;o<s;o++)e.push(a(t[o],n));else if(x(t))for(r in t)e[r]=a(t[r],n);else if(t&&"function"==typeof t.hasOwnProperty)for(r in t)t.hasOwnProperty(r)&&(e[r]=a(t[r],n));else for(r in t)Qr.call(t,r)&&(e[r]=a(t[r],n));return c(e,i),e}function a(t,e){if(!w(t))return t;var n=u.indexOf(t);if(-1!==n)return l[n];if(M(t)||V(t))throw hi("cpws","Can't copy! Making copies of Window or Scope instances is not supported.");var r=!1,o=s(t);return void 0===o&&(o=vi(t)?[]:Object.create(fi(t)),r=!0),u.push(t),l.push(o),r?i(t,o,e):o}function s(t){switch(li.call(t)){case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Float32Array]":case"[object Float64Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return new t.constructor(a(t.buffer),t.byteOffset,t.length);case"[object ArrayBuffer]":if(!t.slice){var e=new ArrayBuffer(t.byteLength);return new Uint8Array(e).set(new Uint8Array(t)),e}return t.slice(0);case"[object Boolean]":case"[object Number]":case"[object String]":case"[object Date]":return new t.constructor(t.valueOf());case"[object RegExp]":var n=new RegExp(t.source,t.toString().match(/[^\/]*$/)[0]);return n.lastIndex=t.lastIndex,n;case"[object Blob]":return new t.constructor([t],{type:t.type})}if(A(t.cloneNode))return t.cloneNode(!0)}var u=[],l=[];if(r=n(r)?r:NaN,e){if(P(e)||_(e))throw hi("cpta","Can't copy! TypedArray destination cannot be mutated.");if(t===e)throw hi("cpi","Can't copy! Source and destination are identical.");return vi(e)?e.length=0:o(e,function(t,n){"$$hashKey"!==n&&delete e[n]}),u.push(t),l.push(e),i(t,e,r)}return a(t,r)}function H(t,e){return t===e||t!==t&&e!==e}function z(t,e){if(t===e)return!0;if(null===t||null===e)return!1;if(t!==t&&e!==e)return!0;var n,r,i,o=typeof t,a=typeof e;if(o===a&&"object"===o){if(!vi(t)){if(S(t))return!!S(e)&&H(t.getTime(),e.getTime());if(O(t))return!!O(e)&&t.toString()===e.toString();if(V(t)||V(e)||M(t)||M(e)||vi(e)||S(e)||O(e))return!1;i=gt();for(r in t)if("$"!==r.charAt(0)&&!A(t[r])){if(!z(t[r],e[r]))return!1;i[r]=!0}for(r in e)if(!(r in i)&&"$"!==r.charAt(0)&&b(e[r])&&!A(e[r]))return!1;return!0}if(!vi(e))return!1;if((n=t.length)===e.length){for(r=0;r<n;r++)if(!z(t[r],e[r]))return!1;return!0}}return!1}function W(t,e,n){return t.concat(si.call(e,n))}function G(t,e){return si.call(t,e||0)}function K(t,e){var n=arguments.length>2?G(arguments,2):[];return!A(e)||e instanceof RegExp?e:n.length?function(){return arguments.length?e.apply(t,W(n,arguments,0)):e.apply(t,n)}:function(){return arguments.length?e.apply(t,arguments):e.call(t)}}function J(e,n){var r=n;return"string"==typeof e&&"$"===e.charAt(0)&&"$"===e.charAt(1)?r=void 0:M(n)?r="$WINDOW":n&&t.document===n?r="$DOCUMENT":V(n)&&(r="$SCOPE"),r}function Z(t,e){if(!y(t))return E(e)||(e=e?2:null),JSON.stringify(t,J,e)}function Y(t){return C(t)?JSON.parse(t):t}function Q(t,e){t=t.replace(xi,"");var n=Date.parse("Jan 01, 1970 00:00:00 "+t)/6e4;return $i(n)?e:n}function X(t,e){return t=new Date(t.getTime()),t.setMinutes(t.getMinutes()+e),t}function tt(t,e,n){n=n?-1:1;var r=t.getTimezoneOffset();return X(t,n*(Q(e,r)-r))}function et(t){t=ii(t).clone().empty();var e=ii("<div>").append(t).html();try{return t[0].nodeType===Oi?Xr(e):e.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/,function(t,e){return"<"+Xr(e)})}catch(t){return Xr(e)}}function nt(t){try{return decodeURIComponent(t)}catch(t){}}function rt(t){var e={};return o((t||"").split("&"),function(t){var n,r,i;t&&(r=t=t.replace(/\+/g,"%20"),n=t.indexOf("="),-1!==n&&(r=t.substring(0,n),i=t.substring(n+1)),r=nt(r),b(r)&&(i=!b(i)||nt(i),Qr.call(e,r)?vi(e[r])?e[r].push(i):e[r]=[e[r],i]:e[r]=i))}),e}function it(t){var e=[];return o(t,function(t,n){vi(t)?o(t,function(t){e.push(at(n,!0)+(!0===t?"":"="+at(t,!0)))}):e.push(at(n,!0)+(!0===t?"":"="+at(t,!0)))}),e.length?e.join("&"):""}function ot(t){return at(t,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function at(t,e){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,e?"%20":"+")}function st(t,e){var n,r,i=Ci.length;for(r=0;r<i;++r)if(n=Ci[r]+e,C(n=t.getAttribute(n)))return n;return null}function ut(e,n){var r,i,a={};if(o(Ci,function(t){var n=t+"app";!r&&e.hasAttribute&&e.hasAttribute(n)&&(r=e,i=e.getAttribute(n))}),o(Ci,function(t){var n,o=t+"app";!r&&(n=e.querySelector("["+o.replace(":","\\:")+"]"))&&(r=n,i=n.getAttribute(o))}),r){if(!Ei)return void t.console.error("Angular: disabling automatic bootstrap. <script> protocol indicates an extension, document.location.href does not match.");a.strictDi=null!==st(r,"strict-di"),n(r,i?[i]:[],a)}}function ct(e,n,r){w(r)||(r={}),r=f({strictDi:!1},r);var i=function(){if(e=ii(e),e.injector()){var i=e[0]===t.document?"document":et(e);throw hi("btstrpd","App already bootstrapped with this element '{0}'",i.replace(/</,"&lt;").replace(/>/,"&gt;"))}n=n||[],n.unshift(["$provide",function(t){t.value("$rootElement",e)}]),r.debugInfoEnabled&&n.push(["$compileProvider",function(t){t.debugInfoEnabled(!0)}]),n.unshift("ng");var o=ce(n,r.strictDi);return o.invoke(["$rootScope","$rootElement","$compile","$injector",function(t,e,n,r){t.$apply(function(){e.data("$injector",r),n(e)(t)})}]),o},a=/^NG_ENABLE_DEBUG_INFO!/,s=/^NG_DEFER_BOOTSTRAP!/;if(t&&a.test(t.name)&&(r.debugInfoEnabled=!0,t.name=t.name.replace(a,"")),t&&!s.test(t.name))return i();t.name=t.name.replace(s,""),pi.resumeBootstrap=function(t){return o(t,function(t){n.push(t)}),i()},A(pi.resumeDeferredBootstrap)&&pi.resumeDeferredBootstrap()}function lt(){t.name="NG_ENABLE_DEBUG_INFO!"+t.name,t.location.reload()}function ft(t){var e=pi.element(t).injector();if(!e)throw hi("test","no injector found for element argument to getTestability");return e.get("$$testability")}function ht(t,e){return e=e||"_",t.replace(Si,function(t,n){return(n?e:"")+t.toLowerCase()})}function pt(t,e,n){if(!t)throw hi("areq","Argument '{0}' is {1}",e||"?",n||"required");return t}function dt(t,e,n){return n&&vi(t)&&(t=t[t.length-1]),pt(A(t),e,"not a function, got "+(t&&"object"==typeof t?t.constructor.name||"Object":typeof t)),t}function $t(t,e){if("hasOwnProperty"===t)throw hi("badname","hasOwnProperty is not a valid {0} name",e)}function vt(t,e,n){if(!e)return t;for(var r,i=e.split("."),o=t,a=i.length,s=0;s<a;s++)r=i[s],t&&(t=(o=t)[r]);return!n&&A(t)?K(o,t):t}function mt(t){for(var e,n=t[0],r=t[t.length-1],i=1;n!==r&&(n=n.nextSibling);i++)(e||t[i]!==n)&&(e||(e=ii(si.call(t,0,i))),e.push(n));return e||t}function gt(){return Object.create(null)}function yt(t){if(null==t)return"";switch(typeof t){case"string":break;case"number":t=""+t;break;default:t=!g(t)||vi(t)||S(t)?Z(t):t.toString()}return t}function bt(t){function e(t,e,n){return t[e]||(t[e]=n())}var n=r("$injector"),i=r("ng"),o=e(t,"angular",Object);return o.$$minErr=o.$$minErr||r,e(o,"module",function(){var t={};return function(r,o,a){var s={};return function(t,e){if("hasOwnProperty"===t)throw i("badname","hasOwnProperty is not a valid {0} name",e)}(r,"module"),o&&t.hasOwnProperty(r)&&(t[r]=null),e(t,r,function(){function t(t,e,n,r){return r||(r=u),function(){return r[n||"push"]([t,e,arguments]),h}}function e(t,e,n){return n||(n=u),function(i,o){return o&&A(o)&&(o.$$moduleName=r),n.push([t,e,arguments]),h}}if(!o)throw n("nomod","Module '{0}' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.",r);var u=[],c=[],l=[],f=t("$injector","invoke","push",c),h={_invokeQueue:u,_configBlocks:c,_runBlocks:l,info:function(t){if(b(t)){if(!w(t))throw i("aobj","Argument '{0}' must be an object","value");return s=t,this}return s},requires:o,name:r,provider:e("$provide","provider"),factory:e("$provide","factory"),service:e("$provide","service"),value:t("$provide","value"),constant:t("$provide","constant","unshift"),decorator:e("$provide","decorator",c),animation:e("$animateProvider","register"),filter:e("$filterProvider","register"),controller:e("$controllerProvider","register"),directive:e("$compileProvider","directive"),component:e("$compileProvider","component"),config:f,run:function(t){return l.push(t),this}};return a&&f(a),h})}})}function wt(t,e){if(vi(t)){e=e||[];for(var n=0,r=t.length;n<r;n++)e[n]=t[n]}else if(w(t)){e=e||{};for(var i in t)"$"===i.charAt(0)&&"$"===i.charAt(1)||(e[i]=t[i])}return e||t}function xt(t,e){var r=[];return n(e)&&(t=pi.copy(t,null,e)),JSON.stringify(t,function(t,e){if(e=J(t,e),w(e)){if(r.indexOf(e)>=0)return"...";r.push(e)}return e})}function Ct(t,e){return"function"==typeof t?t.toString().replace(/ \{[\s\S]*$/,""):y(t)?"undefined":"string"!=typeof t?xt(t,e):t}function Et(){return++ji}function St(t){return At(t.replace(Pi,"ms-"))}function kt(t,e){return e.toUpperCase()}function At(t){return t.replace(Di,kt)}function Ot(t){return!Li.test(t)}function Mt(t){var e=t.nodeType;return e===Ai||!e||e===Vi}function Vt(t){for(var e in Ii[t.ng339])return!0;return!1}function Tt(t,e){var n,r,i,a,s=e.createDocumentFragment(),u=[];if(Ot(t))u.push(e.createTextNode(t));else{for(n=s.appendChild(e.createElement("div")),r=(qi.exec(t)||["",""])[1].toLowerCase(),i=Bi[r]||Bi._default,n.innerHTML=i[1]+t.replace(Fi,"<$1></$2>")+i[2],a=i[0];a--;)n=n.lastChild;u=W(u,n.childNodes),n=s.firstChild,n.textContent=""}return s.textContent="",s.innerHTML="",o(u,function(t){s.appendChild(t)}),s}function Nt(e,n){n=n||t.document;var r;return(r=Ui.exec(e))?[n.createElement(r[1])]:(r=Tt(e,n))?r.childNodes:[]}function It(t,e){var n=t.parentNode;n&&n.replaceChild(e,t),e.appendChild(t)}function jt(t){if(t instanceof jt)return t;var e;if(C(t)&&(t=gi(t),e=!0),!(this instanceof jt)){if(e&&"<"!==t.charAt(0))throw Ri("nosel","Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element");return new jt(t)}e?Ht(this,Nt(t)):A(t)?Zt(t):Ht(this,t)}function Dt(t){return t.cloneNode(!0)}function Pt(t,e){!e&&Mt(t)&&ii.cleanData([t]),t.querySelectorAll&&ii.cleanData(t.querySelectorAll("*"))}function _t(t,e,n,r){if(b(r))throw Ri("offargs","jqLite#off() does not support the `selector` argument");var i=Ut(t),a=i&&i.events,s=i&&i.handle;if(s)if(e){var u=function(e){var r=a[e];b(n)&&F(r||[],n),b(n)&&r&&r.length>0||(t.removeEventListener(e,s),delete a[e])};o(e.split(" "),function(t){u(t),_i[t]&&u(_i[t])})}else for(e in a)"$destroy"!==e&&t.removeEventListener(e,s),delete a[e]}function Rt(t,e){var n=t.ng339,r=n&&Ii[n];if(r){if(e)return void delete r.data[e];r.handle&&(r.events.$destroy&&r.handle({},"$destroy"),_t(t)),delete Ii[n],t.ng339=void 0}}function Ut(t,e){var n=t.ng339,r=n&&Ii[n];return e&&!r&&(t.ng339=n=Et(),r=Ii[n]={events:{},data:{},handle:void 0}),r}function Lt(t,e,n){if(Mt(t)){var r,i=b(n),o=!i&&e&&!w(e),a=!e,s=Ut(t,!o),u=s&&s.data;if(i)u[At(e)]=n;else{if(a)return u;if(o)return u&&u[At(e)];for(r in e)u[At(r)]=e[r]}}}function qt(t,e){return!!t.getAttribute&&(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+e+" ")>-1}function Ft(t,e){e&&t.setAttribute&&o(e.split(" "),function(e){t.setAttribute("class",gi((" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").replace(" "+gi(e)+" "," ")))})}function Bt(t,e){if(e&&t.setAttribute){var n=(" "+(t.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ");o(e.split(" "),function(t){t=gi(t),-1===n.indexOf(" "+t+" ")&&(n+=t+" ")}),t.setAttribute("class",gi(n))}}function Ht(t,e){if(e)if(e.nodeType)t[t.length++]=e;else{var n=e.length;if("number"==typeof n&&e.window!==e){if(n)for(var r=0;r<n;r++)t[t.length++]=e[r]}else t[t.length++]=e}}function zt(t,e){return Wt(t,"$"+(e||"ngController")+"Controller")}function Wt(t,e,n){t.nodeType===Vi&&(t=t.documentElement);for(var r=vi(e)?e:[e];t;){for(var i=0,o=r.length;i<o;i++)if(b(n=ii.data(t,r[i])))return n;t=t.parentNode||t.nodeType===Ti&&t.host}}function Gt(t){for(Pt(t,!0);t.firstChild;)t.removeChild(t.firstChild)}function Kt(t,e){e||Pt(t);var n=t.parentNode;n&&n.removeChild(t)}function Jt(e,n){n=n||t,"complete"===n.document.readyState?n.setTimeout(e):ii(n).on("load",e)}function Zt(e){function n(){t.document.removeEventListener("DOMContentLoaded",n),t.removeEventListener("load",n),e()}"complete"===t.document.readyState?t.setTimeout(e):(t.document.addEventListener("DOMContentLoaded",n),t.addEventListener("load",n))}function Yt(t,e){var n=Wi[e.toLowerCase()];return n&&Gi[L(t)]&&n}function Qt(t){return Ki[t]}function Xt(t,e){var n=function(n,r){n.isDefaultPrevented=function(){return n.defaultPrevented};var i=e[r||n.type],o=i?i.length:0;if(o){if(y(n.immediatePropagationStopped)){var a=n.stopImmediatePropagation;n.stopImmediatePropagation=function(){n.immediatePropagationStopped=!0,n.stopPropagation&&n.stopPropagation(),a&&a.call(n)}}n.isImmediatePropagationStopped=function(){return!0===n.immediatePropagationStopped};var s=i.specialHandlerWrapper||te;o>1&&(i=wt(i));for(var u=0;u<o;u++)n.isImmediatePropagationStopped()||s(t,n,i[u])}};return n.elem=t,n}function te(t,e,n){n.call(t,e)}function ee(t,e,n){var r=e.relatedTarget;r&&(r===t||Hi.call(t,r))||n.call(t,e)}function ne(){this.$get=function(){return f(jt,{hasClass:function(t,e){return t.attr&&(t=t[0]),qt(t,e)},addClass:function(t,e){return t.attr&&(t=t[0]),Bt(t,e)},removeClass:function(t,e){return t.attr&&(t=t[0]),Ft(t,e)}})}}function re(t,e){var n=t&&t.$$hashKey;if(n)return"function"==typeof n&&(n=t.$$hashKey()),n;var r=typeof t;return n="function"===r||"object"===r&&null!==t?t.$$hashKey=r+":"+(e||u)():r+":"+t}function ie(){this._keys=[],this._values=[],this._lastKey=NaN,this._lastIndex=-1}function oe(t){return Function.prototype.toString.call(t)}function ae(t){var e=oe(t).replace(no,"");return e.match(Qi)||e.match(Xi)}function se(t){var e=ae(t);return e?"function("+(e[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function ue(t,e,n){var r,i,a;if("function"==typeof t){if(!(r=t.$inject)){if(r=[],t.length){if(e)throw C(n)&&n||(n=t.name||se(t)),ro("strictdi","{0} is not using explicit annotation and cannot be invoked in strict mode",n);i=ae(t),o(i[1].split(to),function(t){t.replace(eo,function(t,e,n){r.push(n)})})}t.$inject=r}}else vi(t)?(a=t.length-1,dt(t[a],"fn"),r=t.slice(0,a)):dt(t,"fn",!0);return r}function ce(t,e){function n(t){return function(e,n){if(!w(e))return t(e,n);o(e,s(t))}}function r(t,e){if($t(t,"service"),(A(e)||vi(e))&&(e=x.instantiate(e)),!e.$get)throw ro("pget","Provider '{0}' must define $get factory method.",t);return b[t+$]=e}function i(t,e){return function(){var n=k.invoke(e,this);if(y(n))throw ro("undef","Provider '{0}' must return a value from $get factory method.",t);return n}}function a(t,e,n){return r(t,{$get:!1!==n?i(t,e):e})}function u(t,e){return a(t,["$injector",function(t){return t.instantiate(e)}])}function c(t,e){return a(t,m(e),!1)}function l(t,e){$t(t,"constant"),b[t]=e,E[t]=e}function f(t,e){var n=x.get(t+$),r=n.$get;n.$get=function(){var t=k.invoke(r,n);return k.invoke(e,null,{$delegate:t})}}function h(t){pt(y(t)||vi(t),"modulesToLoad","not an array");var e,n=[];return o(t,function(t){function r(t){var e,n;for(e=0,n=t.length;e<n;e++){var r=t[e],i=x.get(r[0]);i[r[1]].apply(i,r[2])}}if(!g.get(t)){g.set(t,!0);try{C(t)?(e=ai(t),k.modules[t]=e,n=n.concat(h(e.requires)).concat(e._runBlocks),r(e._invokeQueue),r(e._configBlocks)):A(t)?n.push(x.invoke(t)):vi(t)?n.push(x.invoke(t)):dt(t,"module")}catch(e){throw vi(t)&&(t=t[t.length-1]),e.message&&e.stack&&-1===e.stack.indexOf(e.message)&&(e=e.message+"\n"+e.stack),ro("modulerr","Failed to instantiate module {0} due to:\n{1}",t,e.stack||e.message||e)}}}),n}function p(t,n){function r(e,r){if(t.hasOwnProperty(e)){if(t[e]===d)throw ro("cdep","Circular dependency found: {0}",e+" <- "+v.join(" <- "));return t[e]}try{return v.unshift(e),t[e]=d,t[e]=n(e,r),t[e]}catch(n){throw t[e]===d&&delete t[e],n}finally{v.shift()}}function i(t,n,i){for(var o=[],a=ce.$$annotate(t,e,i),s=0,u=a.length;s<u;s++){var c=a[s];if("string"!=typeof c)throw ro("itkn","Incorrect injection token! Expected service name as string, got {0}",c);o.push(n&&n.hasOwnProperty(c)?n[c]:r(c,i))}return o}function o(t){if(ri||"function"!=typeof t)return!1;var e=t.$$ngIsClass;return j(e)||(e=t.$$ngIsClass=/^(?:class\b|constructor\()/.test(oe(t))),e}function a(t,e,n,r){"string"==typeof n&&(r=n,n=null);var a=i(t,n,r);return vi(t)&&(t=t[t.length-1]),o(t)?(a.unshift(null),new(Function.prototype.bind.apply(t,a))):t.apply(e,a)}function s(t,e,n){var r=vi(t)?t[t.length-1]:t,o=i(t,e,n);return o.unshift(null),new(Function.prototype.bind.apply(r,o))}return{invoke:a,instantiate:s,get:r,annotate:ce.$$annotate,has:function(e){return b.hasOwnProperty(e+$)||t.hasOwnProperty(e)}}}e=!0===e;var d={},$="Provider",v=[],g=new Zi,b={$provide:{provider:n(r),factory:n(a),service:n(u),value:n(c),constant:n(l),decorator:f}},x=b.$injector=p(b,function(t,e){throw pi.isString(e)&&v.push(e),ro("unpr","Unknown provider: {0}",v.join(" <- "))}),E={},S=p(E,function(t,e){var n=x.get(t+$,e);return k.invoke(n.$get,n,void 0,t)}),k=S;b["$injector"+$]={$get:m(S)},k.modules=x.modules=gt();var O=h(t);return k=S.get("$injector"),k.strictDi=e,o(O,function(t){t&&k.invoke(t)}),k}function le(){var t=!0;this.disableAutoScrolling=function(){t=!1},this.$get=["$window","$location","$rootScope",function(e,n,r){function i(t){var e=null;return Array.prototype.some.call(t,function(t){if("a"===L(t))return e=t,!0}),e}function o(){var t=s.yOffset;if(A(t))t=t();else if(R(t)){var n=t[0],r=e.getComputedStyle(n);t="fixed"!==r.position?0:n.getBoundingClientRect().bottom}else E(t)||(t=0);return t}function a(t){if(t){t.scrollIntoView();var n=o();if(n){var r=t.getBoundingClientRect().top;e.scrollBy(0,r-n)}}else e.scrollTo(0,0)}function s(t){t=C(t)?t:E(t)?t.toString():n.hash();var e;t?(e=u.getElementById(t))?a(e):(e=i(u.getElementsByName(t)))?a(e):"top"===t&&a(null):a(null)}var u=e.document;return t&&r.$watch(function(){return n.hash()},function(t,e){t===e&&""===t||Jt(function(){r.$evalAsync(s)})}),s}]}function fe(t,e){return t||e?t?e?(vi(t)&&(t=t.join(" ")),vi(e)&&(e=e.join(" ")),t+" "+e):t:e:""}function he(t){for(var e=0;e<t.length;e++){var n=t[e];if(n.nodeType===oo)return n}}function pe(t){C(t)&&(t=t.split(" "));var e=gt();return o(t,function(t){t.length&&(e[t]=!0)}),e}function de(t){return w(t)?t:{}}function $e(t,e,n,r){function i(t){try{t.apply(null,G(arguments,1))}finally{if(0===--m)for(;g.length;)try{g.pop()()}catch(t){n.error(t)}}}function a(t){var e=t.indexOf("#");return-1===e?"":t.substr(e)}function s(){E=null,c()}function u(){b=S(),b=y(b)?null:b,z(b,O)&&(b=O),O=b,w=b}function c(){var t=w;u(),x===l.url()&&t===b||(x=l.url(),w=b,o(k,function(t){t(l.url(),b)}))}var l=this,f=t.location,h=t.history,p=t.setTimeout,d=t.clearTimeout,v={};l.isMock=!1;var m=0,g=[];l.$$completeOutstandingRequest=i,l.$$incOutstandingRequestCount=function(){m++},l.notifyWhenNoOutstandingRequests=function(t){0===m?t():g.push(t)};var b,w,x=f.href,C=e.find("base"),E=null,S=r.history?function(){try{return h.state}catch(t){}}:$;u(),l.url=function(e,n,i){if(y(i)&&(i=null),f!==t.location&&(f=t.location),h!==t.history&&(h=t.history),e){var o=w===i;if(x===e&&(!r.history||o))return l;var s=x&&Ze(x)===Ze(e);return x=e,w=i,!r.history||s&&o?(s||(E=e),n?f.replace(e):s?f.hash=a(e):f.href=e,f.href!==e&&(E=e)):(h[n?"replaceState":"pushState"](i,"",e),u()),E&&(E=e),l}return E||f.href.replace(/%27/g,"'")},l.state=function(){return b};var k=[],A=!1,O=null;l.onUrlChange=function(e){return A||(r.history&&ii(t).on("popstate",s),ii(t).on("hashchange",s),A=!0),k.push(e),e},l.$$applicationDestroyed=function(){ii(t).off("hashchange popstate",s)},l.$$checkUrlChange=c,l.baseHref=function(){var t=C.attr("href");return t?t.replace(/^(https?:)?\/\/[^\/]*/,""):""},l.defer=function(t,e){var n;return m++,n=p(function(){delete v[n],i(t)},e||0),v[n]=!0,n},l.defer.cancel=function(t){return!!v[t]&&(delete v[t],d(t),i($),!0)}}function ve(){this.$get=["$window","$log","$sniffer","$document",function(t,e,n,r){return new $e(t,r,e,n)}]}function me(){this.$get=function(){function t(t,n){function i(t){t!==h&&(p?p===t&&(p=t.n):p=t,o(t.n,t.p),o(t,h),h=t,h.n=null)}function o(t,e){t!==e&&(t&&(t.p=e),e&&(e.n=t))}if(t in e)throw r("$cacheFactory")("iid","CacheId '{0}' is already taken!",t);var a=0,s=f({},n,{id:t}),u=gt(),c=n&&n.capacity||Number.MAX_VALUE,l=gt(),h=null,p=null;return e[t]={put:function(t,e){if(!y(e)){if(c<Number.MAX_VALUE){i(l[t]||(l[t]={key:t}))}return t in u||a++,u[t]=e,a>c&&this.remove(p.key),e}},get:function(t){if(c<Number.MAX_VALUE){var e=l[t];if(!e)return;i(e)}return u[t]},remove:function(t){if(c<Number.MAX_VALUE){var e=l[t];if(!e)return;e===h&&(h=e.p),e===p&&(p=e.n),o(e.n,e.p),delete l[t]}t in u&&(delete u[t],a--)},removeAll:function(){u=gt(),a=0,l=gt(),h=p=null},destroy:function(){u=null,s=null,l=null,delete e[t]},info:function(){return f({},s,{size:a})}}}var e={};return t.info=function(){var t={};return o(e,function(e,n){t[n]=e.info()}),t},t.get=function(t){return e[t]},t}}function ge(){this.$get=["$cacheFactory",function(t){return t("templates")}]}function ye(){}function be(e,n){function r(t,e,n){var r=/^\s*([@&<]|=(\*?))(\??)\s*([\w$]*)\s*$/,i=gt();return o(t,function(t,o){if(t in O)return void(i[o]=O[t]);var a=t.match(r);if(!a)throw ho("iscp","Invalid {3} for directive '{0}'. Definition: {... {1}: '{2}' ...}",e,o,t,n?"controller bindings definition":"isolate scope definition");i[o]={mode:a[1][0],collection:"*"===a[2],optional:"?"===a[3],attrName:a[4]||o},a[4]&&(O[t]=i[o])}),i}function i(t,e){var n={isolateScope:null,bindToController:null};if(w(t.scope)&&(!0===t.bindToController?(n.bindToController=r(t.scope,e,!0),n.isolateScope={}):n.isolateScope=r(t.scope,e,!1)),w(t.bindToController)&&(n.bindToController=r(t.bindToController,e,!0)),n.bindToController&&!t.controller)throw ho("noctrl","Cannot bind to controller without directive '{0}'s controller.",e);return n}function a(t){var e=t.charAt(0);if(!e||e!==Xr(e))throw ho("baddir","Directive/Component name '{0}' is invalid. The first character must be a lowercase letter",t);if(t!==t.trim())throw ho("baddir","Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces",t)}function u(t){var e=t.require||t.controller&&t.name;return!vi(e)&&w(e)&&o(e,function(t,n){var r=t.match(E);t.substring(r[0].length)||(e[n]=r[0]+n)}),e}function c(t,e){if(t&&(!C(t)||!/[EACM]/.test(t)))throw ho("badrestrict","Restrict property '{0}' of directive '{1}' is invalid",t,e);return t||"EA"}var l={},h="Directive",p=/^\s*directive:\s*([\w-]+)\s+(.*)$/,g=/(([\w-]+)(?::([^;]+))?;?)/,x=U("ngSrc,ngSrcset,src,srcset"),E=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,S=/^(on[a-z]+|formaction)$/,O=gt();this.directive=function t(n,r){return pt(n,"name"),$t(n,"directive"),C(n)?(a(n),pt(r,"directiveFactory"),l.hasOwnProperty(n)||(l[n]=[],e.factory(n+h,["$injector","$exceptionHandler",function(t,e){var r=[];return o(l[n],function(i,o){try{var a=t.invoke(i);A(a)?a={compile:m(a)}:!a.compile&&a.link&&(a.compile=m(a.link)),a.priority=a.priority||0,a.index=o,a.name=a.name||n,a.require=u(a),a.restrict=c(a.restrict,n),a.$$moduleName=i.$$moduleName,r.push(a)}catch(t){e(t)}}),r}])),l[n].push(r)):o(n,s(t)),this},this.component=function t(e,n){function r(t){function e(e){return A(e)||vi(e)?function(n,r){return t.invoke(e,this,{$element:n,$attrs:r})}:e}var r=n.template||n.templateUrl?n.template:"",a={controller:i,controllerAs:Se(n.controller)||n.controllerAs||"$ctrl",template:e(r),templateUrl:e(n.templateUrl),transclude:n.transclude,scope:{},bindToController:n.bindings||{},restrict:"E",require:n.require};return o(n,function(t,e){"$"===e.charAt(0)&&(a[e]=t)}),a}if(!C(e))return o(e,s(K(this,t))),this;var i=n.controller||function(){};return o(n,function(t,e){"$"===e.charAt(0)&&(r[e]=t,A(i)&&(i[e]=t))}),r.$inject=["$injector"],this.directive(e,r)},this.aHrefSanitizationWhitelist=function(t){return b(t)?(n.aHrefSanitizationWhitelist(t),this):n.aHrefSanitizationWhitelist()},this.imgSrcSanitizationWhitelist=function(t){return b(t)?(n.imgSrcSanitizationWhitelist(t),this):n.imgSrcSanitizationWhitelist()};var M=!0;this.debugInfoEnabled=function(t){return b(t)?(M=t,this):M};var T=!1;this.preAssignBindingsEnabled=function(t){return b(t)?(T=t,this):T};var N=!1;this.strictComponentBindingsEnabled=function(t){return b(t)?(N=t,this):N};var I=10;this.onChangesTtl=function(t){return arguments.length?(I=t,this):I};var D=!0;this.commentDirectivesEnabled=function(t){return arguments.length?(D=t,this):D};var P=!0;this.cssClassDirectivesEnabled=function(t){return arguments.length?(P=t,this):P},this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate","$$sanitizeUri",function(e,n,r,a,s,u,c,m,O,_){function R(){try{if(!--It)throw At=void 0,ho("infchng","{0} $onChanges() iterations reached. Aborting!\n",I);c.$apply(function(){for(var t=[],e=0,n=At.length;e<n;++e)try{At[e]()}catch(e){t.push(e)}if(At=void 0,t.length)throw t})}finally{It++}}function U(t,e){if(e){var n,r,i,o=Object.keys(e);for(n=0,r=o.length;n<r;n++)i=o[n],this[i]=e[i]}else this.$attr={};this.$$element=t}function q(t,e,n){Vt.innerHTML="<span "+e+">";var r=Vt.firstChild.attributes,i=r[0];r.removeNamedItem(i.name),i.value=n,t.attributes.setNamedItem(i)}function B(t,e){try{t.addClass(e)}catch(t){}}function W(t,e,n,r,i){t instanceof ii||(t=ii(t));var o=Z(t,e,t,n,r,i);W.$$addScopeClass(t);var a=null;return function(e,n,r){if(!t)throw ho("multilink","This element has already been linked.");pt(e,"scope"),i&&i.needsNewScope&&(e=e.$parent.$new()),r=r||{};var s=r.parentBoundTranscludeFn,u=r.transcludeControllers,c=r.futureParentElement;s&&s.$$boundTransclude&&(s=s.$$boundTransclude),a||(a=J(c));var l;if(l="html"!==a?ii(yt(a,ii("<div>").append(t).html())):n?zi.clone.call(t):t,u)for(var f in u)l.data("$"+f+"Controller",u[f].instance);return W.$$addScopeInfo(l,e),n&&n(l,e),o&&o(e,l,l,s),n||(t=o=null),l}}function J(t){var e=t&&t[0];return e&&"foreignobject"!==L(e)&&li.call(e).match(/SVG/)?"svg":"html"}function Z(t,e,n,r,i,o){function a(t,n,r,i){var o,a,s,u,c,l,f,h,$;if(p){var v=n.length;for($=new Array(v),c=0;c<d.length;c+=3)f=d[c],$[f]=n[f]}else $=n;for(c=0,l=d.length;c<l;)s=$[d[c++]],o=d[c++],a=d[c++],o?(o.scope?(u=t.$new(),W.$$addScopeInfo(ii(s),u)):u=t,h=o.transcludeOnThisElement?Q(t,o.transclude,i):!o.templateOnThisElement&&i?i:!i&&e?Q(t,e):null,o(a,u,s,r,h)):a&&a(t,s.childNodes,void 0,i)}for(var s,u,c,l,f,h,p,d=[],$=vi(t)||t instanceof ii,v=0;v<t.length;v++)s=new U,11===ri&&Y(t,v,$),u=X(t[v],[],s,0===v?r:void 0,i),c=u.length?ot(u,t[v],s,e,n,null,[],[],o):null,c&&c.scope&&W.$$addScopeClass(s.$$element),f=c&&c.terminal||!(l=t[v].childNodes)||!l.length?null:Z(l,c?(c.transcludeOnThisElement||!c.templateOnThisElement)&&c.transclude:e),(c||f)&&(d.push(v,c,f),h=!0,p=p||c),o=null;return h?a:null}function Y(t,e,n){var r,i=t[e],o=i.parentNode;if(i.nodeType===Oi)for(;;){if(!(r=o?i.nextSibling:t[e+1])||r.nodeType!==Oi)break;i.nodeValue=i.nodeValue+r.nodeValue,r.parentNode&&r.parentNode.removeChild(r),n&&r===t[e+1]&&t.splice(e+1,1)}}function Q(t,e,n){function r(r,i,o,a,s){return r||(r=t.$new(!1,s),r.$$transcluded=!0),e(r,i,{parentBoundTranscludeFn:n,transcludeControllers:o,futureParentElement:a})}var i=r.$$slots=gt();for(var o in e.$$slots)e.$$slots[o]?i[o]=Q(t,e.$$slots[o],n):i[o]=null;return r}function X(t,e,n,r,i){var o,a,s,u=t.nodeType,c=n.$attr;switch(u){case Ai:a=L(t),ct(e,xe(a),"E",r,i);for(var l,f,h,p,d,$,v=t.attributes,m=0,y=v&&v.length;m<y;m++){var b=!1,x=!1;l=v[m],f=l.name,d=l.value,p=xe(f),$=Rt.test(p),$&&(f=f.replace($o,"").substr(8).replace(/_(.)/g,function(t,e){return e.toUpperCase()}));var E=p.match(Ut);E&&lt(E[1])&&(b=f,x=f.substr(0,f.length-5)+"end",f=f.substr(0,f.length-6)),h=xe(f.toLowerCase()),c[h]=f,!$&&n.hasOwnProperty(h)||(n[h]=d,Yt(t,h)&&(n[h]=!0)),wt(t,e,d,h,$),ct(e,h,"A",r,i,b,x)}if("input"===a&&"hidden"===t.getAttribute("type")&&t.setAttribute("autocomplete","off"),!Nt)break;if(s=t.className,w(s)&&(s=s.animVal),C(s)&&""!==s)for(;o=g.exec(s);)h=xe(o[2]),ct(e,h,"C",r,i)&&(n[h]=gi(o[3])),s=s.substr(o.index+o[0].length);break;case Oi:mt(e,t.nodeValue);break;case Mi:if(!Tt)break;tt(t,e,n,r,i)}return e.sort($t),e}function tt(t,e,n,r,i){try{var o=p.exec(t.nodeValue);if(o){var a=xe(o[1]);ct(e,a,"M",r,i)&&(n[a]=gi(o[2]))}}catch(t){}}function nt(t,e,n){var r=[],i=0;if(e&&t.hasAttribute&&t.hasAttribute(e))do{
if(!t)throw ho("uterdir","Unterminated attribute, found '{0}' but no matching '{1}' found.",e,n);t.nodeType===Ai&&(t.hasAttribute(e)&&i++,t.hasAttribute(n)&&i--),r.push(t),t=t.nextSibling}while(i>0);else r.push(t);return ii(r)}function rt(t,e,n){return function(r,i,o,a,s){return i=nt(i[0],e,n),t(r,i,o,a,s)}}function it(t,e,n,r,i,o){var a;return t?W(e,n,r,i,o):function(){return a||(a=W(e,n,r,i,o),e=n=o=null),a.apply(this,arguments)}}function ot(t,e,n,i,a,s,u,c,l){function h(t,e,n,r){t&&(n&&(t=rt(t,n,r)),t.require=d.require,t.directiveName=$,(E===d||d.$$isolateScope)&&(t=Ct(t,{isolateScope:!0})),u.push(t)),e&&(n&&(e=rt(e,n,r)),e.require=d.require,e.directiveName=$,(E===d||d.$$isolateScope)&&(e=Ct(e,{isolateScope:!0})),c.push(e))}function p(t,i,a,s,l){function h(t,e,n,r){var i;if(V(t)||(r=n,n=e,e=t,t=void 0),N&&(i=g),n||(n=N?k.parent():k),!r)return l(t,e,i,n,R);var o=l.$$slots[r];if(o)return o(t,e,i,n,R);if(y(o))throw ho("noslot",'No parent directive that requires a transclusion with slot name "{0}". Element: {1}',r,et(k))}var p,d,$,v,m,g,b,k,O,M;e===a?(O=n,k=n.$$element):(k=ii(a),O=new U(k,n)),m=i,E?v=i.$new(!0):x&&(m=i.$parent),l&&(b=h,b.$$boundTransclude=l,b.isSlotFilled=function(t){return!!l.$$slots[t]}),C&&(g=st(k,O,b,C,v,i,E)),E&&(W.$$addScopeInfo(k,v,!0,!(S&&(S===E||S===E.$$originalDirective))),W.$$addScopeClass(k,!0),v.$$isolateBindings=E.$$isolateBindings,M=kt(i,O,v,v.$$isolateBindings,E),M.removeWatches&&v.$on("$destroy",M.removeWatches));for(var I in g){var j=C[I],D=g[I],P=j.$$bindings.bindToController;if(T){D.bindingInfo=P?kt(m,O,D.instance,P,j):{};var _=D();_!==D.instance&&(D.instance=_,k.data("$"+j.name+"Controller",_),D.bindingInfo.removeWatches&&D.bindingInfo.removeWatches(),D.bindingInfo=kt(m,O,D.instance,P,j))}else D.instance=D(),k.data("$"+j.name+"Controller",D.instance),D.bindingInfo=kt(m,O,D.instance,P,j)}for(o(C,function(t,e){var n=t.require;t.bindToController&&!vi(n)&&w(n)&&f(g[e].instance,at(e,n,k,g))}),o(g,function(t){var e=t.instance;if(A(e.$onChanges))try{e.$onChanges(t.bindingInfo.initialChanges)}catch(t){r(t)}if(A(e.$onInit))try{e.$onInit()}catch(t){r(t)}A(e.$doCheck)&&(m.$watch(function(){e.$doCheck()}),e.$doCheck()),A(e.$onDestroy)&&m.$on("$destroy",function(){e.$onDestroy()})}),p=0,d=u.length;p<d;p++)$=u[p],Et($,$.isolateScope?v:i,k,O,$.require&&at($.directiveName,$.require,k,g),b);var R=i;for(E&&(E.template||null===E.templateUrl)&&(R=v),t&&t(R,a.childNodes,void 0,l),p=c.length-1;p>=0;p--)$=c[p],Et($,$.isolateScope?v:i,k,O,$.require&&at($.directiveName,$.require,k,g),b);o(g,function(t){var e=t.instance;A(e.$postLink)&&e.$postLink()})}l=l||{};for(var d,$,v,m,g,b=-Number.MAX_VALUE,x=l.newScopeDirective,C=l.controllerDirectives,E=l.newIsolateScopeDirective,S=l.templateDirective,k=l.nonTlbTranscludeDirective,O=!1,M=!1,N=l.hasElementTranscludeDirective,I=n.$$element=ii(e),j=s,D=i,P=!1,_=!1,R=0,q=t.length;R<q;R++){d=t[R];var F=d.$$start,B=d.$$end;if(F&&(I=nt(e,F,B)),v=void 0,b>d.priority)break;if(g=d.scope,g&&(d.templateUrl||(w(g)?(vt("new/isolated scope",E||x,d,I),E=d):vt("new/isolated scope",E,d,I)),x=x||d),$=d.name,!P&&(d.replace&&(d.templateUrl||d.template)||d.transclude&&!d.$$tlb)){for(var H,z=R+1;H=t[z++];)if(H.transclude&&!H.$$tlb||H.replace&&(H.templateUrl||H.template)){_=!0;break}P=!0}if(!d.templateUrl&&d.controller&&(C=C||gt(),vt("'"+$+"' controller",C[$],d,I),C[$]=d),g=d.transclude)if(O=!0,d.$$tlb||(vt("transclusion",k,d,I),k=d),"element"===g)N=!0,b=d.priority,v=I,I=n.$$element=ii(W.$$createComment($,n[$])),e=I[0],xt(a,G(v),e),v[0].$$parentNode=v[0].parentNode,D=it(_,v,i,b,j&&j.name,{nonTlbTranscludeDirective:k});else{var J=gt();if(w(g)){v=[];var Z=gt(),Y=gt();o(g,function(t,e){var n="?"===t.charAt(0);t=n?t.substring(1):t,Z[t]=e,J[e]=null,Y[e]=n}),o(I.contents(),function(t){var e=Z[xe(L(t))];e?(Y[e]=!0,J[e]=J[e]||[],J[e].push(t)):v.push(t)}),o(Y,function(t,e){if(!t)throw ho("reqslot","Required transclusion slot `{0}` was not filled.",e)});for(var Q in J)J[Q]&&(J[Q]=it(_,J[Q],i))}else v=ii(Dt(e)).contents();I.empty(),D=it(_,v,i,void 0,void 0,{needsNewScope:d.$$isolateScope||d.$$newScope}),D.$$slots=J}if(d.template)if(M=!0,vt("template",S,d,I),S=d,g=A(d.template)?d.template(I,n):d.template,g=_t(g),d.replace){if(j=d,v=Ot(g)?[]:Ee(yt(d.templateNamespace,gi(g))),e=v[0],1!==v.length||e.nodeType!==Ai)throw ho("tplrt","Template for directive '{0}' must have exactly one root element. {1}",$,"");xt(a,I,e);var tt={$attr:{}},ot=X(e,[],tt),ct=t.splice(R+1,t.length-(R+1));(E||x)&&ut(ot,E,x),t=t.concat(ot).concat(ct),ft(n,tt),q=t.length}else I.html(g);if(d.templateUrl)M=!0,vt("template",S,d,I),S=d,d.replace&&(j=d),p=dt(t.splice(R,t.length-R),I,n,a,O&&D,u,c,{controllerDirectives:C,newScopeDirective:x!==d&&x,newIsolateScopeDirective:E,templateDirective:S,nonTlbTranscludeDirective:k}),q=t.length;else if(d.compile)try{m=d.compile(I,n,D);var lt=d.$$originalDirective||d;A(m)?h(null,K(lt,m),F,B):m&&h(K(lt,m.pre),K(lt,m.post),F,B)}catch(t){r(t,et(I))}d.terminal&&(p.terminal=!0,b=Math.max(b,d.priority))}return p.scope=x&&!0===x.scope,p.transcludeOnThisElement=O,p.templateOnThisElement=M,p.transclude=D,l.hasElementTranscludeDirective=N,p}function at(t,e,n,r){var i;if(C(e)){var a=e.match(E),s=e.substring(a[0].length),u=a[1]||a[3],c="?"===a[2];if("^^"===u?n=n.parent():(i=r&&r[s],i=i&&i.instance),!i){var l="$"+s+"Controller";i=u?n.inheritedData(l):n.data(l)}if(!i&&!c)throw ho("ctreq","Controller '{0}', required by directive '{1}', can't be found!",s,t)}else if(vi(e)){i=[];for(var f=0,h=e.length;f<h;f++)i[f]=at(t,e[f],n,r)}else w(e)&&(i={},o(e,function(e,o){i[o]=at(t,e,n,r)}));return i||null}function st(t,e,n,r,i,o,a){var s=gt();for(var c in r){var l=r[c],f={$scope:l===a||l.$$isolateScope?i:o,$element:t,$attrs:e,$transclude:n},h=l.controller;"@"===h&&(h=e[l.name]);var p=u(h,f,!0,l.controllerAs);s[l.name]=p,t.data("$"+l.name+"Controller",p.instance)}return s}function ut(t,e,n){for(var r=0,i=t.length;r<i;r++)t[r]=d(t[r],{$$isolateScope:e,$$newScope:n})}function ct(t,n,r,o,a,s,u){if(n===a)return null;var c=null;if(l.hasOwnProperty(n))for(var f,p=e.get(n+h),$=0,v=p.length;$<v;$++)if(f=p[$],(y(o)||o>f.priority)&&-1!==f.restrict.indexOf(r)){if(s&&(f=d(f,{$$start:s,$$end:u})),!f.$$bindings){var m=f.$$bindings=i(f,f.name);w(m.isolateScope)&&(f.$$isolateBindings=m.isolateScope)}t.push(f),c=f}return c}function lt(t){if(l.hasOwnProperty(t))for(var n,r=e.get(t+h),i=0,o=r.length;i<o;i++)if(n=r[i],n.multiElement)return!0;return!1}function ft(t,e){var n=e.$attr,r=t.$attr;o(t,function(r,i){"$"!==i.charAt(0)&&(e[i]&&e[i]!==r&&(r.length?r+=("style"===i?";":" ")+e[i]:r=e[i]),t.$set(i,r,!0,n[i]))}),o(e,function(e,i){t.hasOwnProperty(i)||"$"===i.charAt(0)||(t[i]=e,"class"!==i&&"style"!==i&&(r[i]=n[i]))})}function dt(t,e,n,i,s,u,c,l){var f,h,p=[],$=e[0],v=t.shift(),m=d(v,{templateUrl:null,transclude:null,replace:null,$$originalDirective:v}),g=A(v.templateUrl)?v.templateUrl(e,n):v.templateUrl,y=v.templateNamespace;return e.empty(),a(g).then(function(r){var a,d,b,x;if(r=_t(r),v.replace){if(b=Ot(r)?[]:Ee(yt(y,gi(r))),a=b[0],1!==b.length||a.nodeType!==Ai)throw ho("tplrt","Template for directive '{0}' must have exactly one root element. {1}",v.name,g);d={$attr:{}},xt(i,e,a);var C=X(a,[],d);w(v.scope)&&ut(C,!0),t=C.concat(t),ft(n,d)}else a=$,e.html(r);for(t.unshift(m),f=ot(t,a,n,s,e,v,u,c,l),o(i,function(t,n){t===a&&(i[n]=e[0])}),h=Z(e[0].childNodes,s);p.length;){var E=p.shift(),S=p.shift(),k=p.shift(),A=p.shift(),O=e[0];if(!E.$$destroyed){if(S!==$){var M=S.className;l.hasElementTranscludeDirective&&v.replace||(O=Dt(a)),xt(k,ii(S),O),B(ii(O),M)}x=f.transcludeOnThisElement?Q(E,f.transclude,A):A,f(h,E,O,i,x)}}p=null}).catch(function(t){k(t)&&r(t)}),function(t,e,n,r,i){var o=i;e.$$destroyed||(p?p.push(e,n,r,o):(f.transcludeOnThisElement&&(o=Q(e,f.transclude,i)),f(h,e,n,r,o)))}}function $t(t,e){var n=e.priority-t.priority;return 0!==n?n:t.name!==e.name?t.name<e.name?-1:1:t.index-e.index}function vt(t,e,n,r){function i(t){return t?" (module: "+t+")":""}if(e)throw ho("multidir","Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}",e.name,i(e.$$moduleName),n.name,i(n.$$moduleName),t,et(r))}function mt(t,e){var r=n(e,!0);r&&t.push({priority:0,compile:function(t){var e=t.parent(),n=!!e.length;return n&&W.$$addBindingClass(e),function(t,e){var i=e.parent();n||W.$$addBindingClass(i),W.$$addBindingInfo(i,r.expressions),t.$watch(r,function(t){e[0].nodeValue=t})}}})}function yt(e,n){switch(e=Xr(e||"html")){case"svg":case"math":var r=t.document.createElement("div");return r.innerHTML="<"+e+">"+n+"</"+e+">",r.childNodes[0].childNodes;default:return n}}function bt(t,e){if("srcdoc"===e)return m.HTML;var n=L(t);if("src"===e||"ngSrc"===e){if(-1===["img","video","audio","source","track"].indexOf(n))return m.RESOURCE_URL}else if("xlinkHref"===e||"form"===n&&"action"===e||"link"===n&&"href"===e)return m.RESOURCE_URL}function wt(t,e,r,i,o){var a=bt(t,i),s=!o,u=x[i]||o,c=n(r,s,a,u);if(c){if("multiple"===i&&"select"===L(t))throw ho("selmulti","Binding to the 'multiple' attribute is not supported. Element: {0}",et(t));if(S.test(i))throw ho("nodomevents","Interpolations for HTML DOM event attributes are disallowed.  Please use the ng- versions (such as ng-click instead of onclick) instead.");e.push({priority:100,compile:function(){return{pre:function(t,e,o){var s=o.$$observers||(o.$$observers=gt()),l=o[i];l!==r&&(c=l&&n(l,!0,a,u),r=l),c&&(o[i]=c(t),(s[i]||(s[i]=[])).$$inter=!0,(o.$$observers&&o.$$observers[i].$$scope||t).$watch(c,function(t,e){"class"===i&&t!==e?o.$updateClass(t,e):o.$set(i,t)}))}}}})}}function xt(e,n,r){var i,o,a=n[0],s=n.length,u=a.parentNode;if(e)for(i=0,o=e.length;i<o;i++)if(e[i]===a){e[i++]=r;for(var c=i,l=c+s-1,f=e.length;c<f;c++,l++)l<f?e[c]=e[l]:delete e[c];e.length-=s-1,e.context===a&&(e.context=r);break}u&&u.replaceChild(r,a);var h=t.document.createDocumentFragment();for(i=0;i<s;i++)h.appendChild(n[i]);for(ii.hasData(a)&&(ii.data(r,ii.data(a)),ii(a).off("$destroy")),ii.cleanData(h.querySelectorAll("*")),i=1;i<s;i++)delete n[i];n[0]=r,n.length=1}function Ct(t,e){return f(function(){return t.apply(null,arguments)},t,e)}function Et(t,e,n,i,o,a){try{t(e,n,i,o,a)}catch(t){r(t,et(n))}}function St(t,e){if(N)throw ho("missingattr","Attribute '{0}' of '{1}' is non-optional and must be set!",t,e)}function kt(t,e,r,i,a){function u(e,n,i){A(r.$onChanges)&&!H(n,i)&&(At||(t.$$postDigest(R),At=[]),l||(l={},At.push(c)),l[e]&&(i=l[e].previousValue),l[e]=new we(i,n))}function c(){r.$onChanges(l),l=void 0}var l,f=[],h={};return o(i,function(i,o){var c,l,p,d,v,m=i.attrName,g=i.optional,y=i.mode;switch(y){case"@":g||Qr.call(e,m)||(St(m,a.name),r[o]=e[m]=void 0),v=e.$observe(m,function(t){if(C(t)||j(t)){var e=r[o];u(o,t,e),r[o]=t}}),e.$$observers[m].$$scope=t,c=e[m],C(c)?r[o]=n(c)(t):j(c)&&(r[o]=c),h[o]=new we(po,r[o]),f.push(v);break;case"=":if(!Qr.call(e,m)){if(g)break;St(m,a.name),e[m]=void 0}if(g&&!e[m])break;l=s(e[m]),d=l.literal?z:H,p=l.assign||function(){throw c=r[o]=l(t),ho("nonassign","Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!",e[m],m,a.name)},c=r[o]=l(t);var b=function(e){return d(e,r[o])||(d(e,c)?p(t,e=r[o]):r[o]=e),c=e};b.$stateful=!0,v=i.collection?t.$watchCollection(e[m],b):t.$watch(s(e[m],b),null,l.literal),f.push(v);break;case"<":if(!Qr.call(e,m)){if(g)break;St(m,a.name),e[m]=void 0}if(g&&!e[m])break;l=s(e[m]);var w=l.literal,x=r[o]=l(t);h[o]=new we(po,r[o]),v=t.$watch(l,function(t,e){if(e===t){if(e===x||w&&z(e,x))return;e=x}u(o,t,e),r[o]=t},w),f.push(v);break;case"&":if(g||Qr.call(e,m)||St(m,a.name),(l=e.hasOwnProperty(m)?s(e[m]):$)===$&&g)break;r[o]=function(e){return l(t,e)}}}),{initialChanges:h,removeWatches:f.length&&function(){for(var t=0,e=f.length;t<e;++t)f[t]()}}}var At,Mt=/^\w/,Vt=t.document.createElement("div"),Tt=D,Nt=P,It=I;U.prototype={$normalize:xe,$addClass:function(t){t&&t.length>0&&O.addClass(this.$$element,t)},$removeClass:function(t){t&&t.length>0&&O.removeClass(this.$$element,t)},$updateClass:function(t,e){var n=Ce(t,e);n&&n.length&&O.addClass(this.$$element,n);var r=Ce(e,t);r&&r.length&&O.removeClass(this.$$element,r)},$set:function(t,e,n,i){var a,s=this.$$element[0],u=Yt(s,t),c=Qt(t),l=t;if(u?(this.$$element.prop(t,e),i=u):c&&(this[c]=e,l=c),this[t]=e,i?this.$attr[t]=i:(i=this.$attr[t])||(this.$attr[t]=i=ht(t,"-")),"a"===(a=L(this.$$element))&&("href"===t||"xlinkHref"===t)||"img"===a&&"src"===t)this[t]=e=_(e,"src"===t);else if("img"===a&&"srcset"===t&&b(e)){for(var f="",h=gi(e),p=/(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/,d=/\s/.test(h)?p:/(,)/,$=h.split(d),v=Math.floor($.length/2),m=0;m<v;m++){var g=2*m;f+=_(gi($[g]),!0),f+=" "+gi($[g+1])}var w=gi($[2*m]).split(/\s/);f+=_(gi(w[0]),!0),2===w.length&&(f+=" "+gi(w[1])),this[t]=e=f}!1!==n&&(null===e||y(e)?this.$$element.removeAttr(i):Mt.test(i)?this.$$element.attr(i,e):q(this.$$element[0],i,e));var x=this.$$observers;x&&o(x[l],function(t){try{t(e)}catch(t){r(t)}})},$observe:function(t,e){var n=this,r=n.$$observers||(n.$$observers=gt()),i=r[t]||(r[t]=[]);return i.push(e),c.$evalAsync(function(){i.$$inter||!n.hasOwnProperty(t)||y(n[t])||e(n[t])}),function(){F(i,e)}}};var jt=n.startSymbol(),Pt=n.endSymbol(),_t="{{"===jt&&"}}"===Pt?v:function(t){return t.replace(/\{\{/g,jt).replace(/}}/g,Pt)},Rt=/^ngAttr[A-Z]/,Ut=/^(.+)Start$/;return W.$$addBindingInfo=M?function(t,e){var n=t.data("$binding")||[];vi(e)?n=n.concat(e):n.push(e),t.data("$binding",n)}:$,W.$$addBindingClass=M?function(t){B(t,"ng-binding")}:$,W.$$addScopeInfo=M?function(t,e,n,r){var i=n?r?"$isolateScopeNoTemplate":"$isolateScope":"$scope";t.data(i,e)}:$,W.$$addScopeClass=M?function(t,e){B(t,e?"ng-isolate-scope":"ng-scope")}:$,W.$$createComment=function(e,n){var r="";return M&&(r=" "+(e||"")+": ",n&&(r+=n+" ")),t.document.createComment(r)},W}]}function we(t,e){this.previousValue=t,this.currentValue=e}function xe(t){return t.replace($o,"").replace(vo,kt)}function Ce(t,e){var n="",r=t.split(/\s+/),i=e.split(/\s+/);t:for(var o=0;o<r.length;o++){for(var a=r[o],s=0;s<i.length;s++)if(a===i[s])continue t;n+=(n.length>0?" ":"")+a}return n}function Ee(t){t=ii(t);var e=t.length;if(e<=1)return t;for(;e--;){var n=t[e];(n.nodeType===Mi||n.nodeType===Oi&&""===n.nodeValue.trim())&&ui.call(t,e,1)}return t}function Se(t,e){if(e&&C(e))return e;if(C(t)){var n=go.exec(t);if(n)return n[3]}}function ke(){var t={},e=!1;this.has=function(e){return t.hasOwnProperty(e)},this.register=function(e,n){$t(e,"controller"),w(e)?f(t,e):t[e]=n},this.allowGlobals=function(){e=!0},this.$get=["$injector","$window",function(n,i){function o(t,e,n,i){if(!t||!w(t.$scope))throw r("$controller")("noscp","Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",i,e);t.$scope[e]=n}return function(r,a,s,u){var c,l,h,p;if(s=!0===s,u&&C(u)&&(p=u),C(r)){if(!(l=r.match(go)))throw mo("ctrlfmt","Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.",r);if(h=l[1],p=p||l[3],!(r=t.hasOwnProperty(h)?t[h]:vt(a.$scope,h,!0)||(e?vt(i,h,!0):void 0)))throw mo("ctrlreg","The controller with the name '{0}' is not registered.",h);dt(r,h,!0)}if(s){var d=(vi(r)?r[r.length-1]:r).prototype;return c=Object.create(d||null),p&&o(a,p,c,h||r.name),f(function(){var t=n.invoke(r,c,a,h);return t!==c&&(w(t)||A(t))&&(c=t,p&&o(a,p,c,h||r.name)),c},{instance:c,identifier:p})}return c=n.instantiate(r,a,h),p&&o(a,p,c,h||r.name),c}}]}function Ae(){this.$get=["$window",function(t){return ii(t.document)}]}function Oe(){this.$get=["$document","$rootScope",function(t,e){function n(){i=r.hidden}var r=t[0],i=r&&r.hidden;return t.on("visibilitychange",n),e.$on("$destroy",function(){t.off("visibilitychange",n)}),function(){return i}}]}function Me(){this.$get=["$log",function(t){return function(e,n){t.error.apply(t,arguments)}}]}function Ve(t){return w(t)?S(t)?t.toISOString():Z(t):t}function Te(){this.$get=function(){return function(t){if(!t)return"";var e=[];return a(t,function(t,n){null===t||y(t)||A(t)||(vi(t)?o(t,function(t){e.push(at(n)+"="+at(Ve(t)))}):e.push(at(n)+"="+at(Ve(t))))}),e.join("&")}}}function Ne(){this.$get=function(){return function(t){function e(t,r,i){null===t||y(t)||(vi(t)?o(t,function(t,n){e(t,r+"["+(w(t)?n:"")+"]")}):w(t)&&!S(t)?a(t,function(t,n){e(t,r+(i?"":"[")+n+(i?"":"]"))}):n.push(at(r)+"="+at(Ve(t))))}if(!t)return"";var n=[];return e(t,"",!0),n.join("&")}}}function Ie(t,e){if(C(t)){var n=t.replace(Eo,"").trim();if(n){var r=e("Content-Type"),i=r&&0===r.indexOf(bo);if(i||je(n))try{t=Y(n)}catch(e){if(!i)return t;throw So("baddata",'Data must be a valid JSON object. Received: "{0}". Parse error: "{1}"',t,e)}}}return t}function je(t){var e=t.match(xo);return e&&Co[e[0]].test(t)}function De(t){function e(t,e){t&&(r[t]=r[t]?r[t]+", "+e:e)}var n,r=gt();return C(t)?o(t.split("\n"),function(t){n=t.indexOf(":"),e(Xr(gi(t.substr(0,n))),gi(t.substr(n+1)))}):w(t)&&o(t,function(t,n){e(Xr(n),gi(t))}),r}function Pe(t){var e;return function(n){if(e||(e=De(t)),n){var r=e[Xr(n)];return void 0===r&&(r=null),r}return e}}function _e(t,e,n,r){return A(r)?r(t,e,n):(o(r,function(r){t=r(t,e,n)}),t)}function Re(t){return 200<=t&&t<300}function Ue(){var t=this.defaults={transformResponse:[Ie],transformRequest:[function(t){return!w(t)||T(t)||I(t)||N(t)?t:Z(t)}],headers:{common:{Accept:"application/json, text/plain, */*"},post:wt(wo),put:wt(wo),patch:wt(wo)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer",jsonpCallbackParam:"callback"},e=!1;this.useApplyAsync=function(t){return b(t)?(e=!!t,this):e};var n=this.interceptors=[];this.$get=["$browser","$httpBackend","$$cookieReader","$cacheFactory","$rootScope","$q","$injector","$sce",function(i,a,s,u,c,l,h,p){function d(e){function n(t,e){for(var n=0,r=e.length;n<r;){var i=e[n++],o=e[n++];t=t.then(i,o)}return e.length=0,t}function a(){i.$$completeOutstandingRequest($)}function s(t,e){var n,r={};return o(t,function(t,i){A(t)?null!=(n=t(e))&&(r[i]=n):r[i]=t}),r}function u(e){var n=e.headers,r=_e(e.data,Pe(n),void 0,e.transformRequest);return y(r)&&o(n,function(t,e){"content-type"===Xr(e)&&delete n[e]}),y(e.withCredentials)&&!y(t.withCredentials)&&(e.withCredentials=t.withCredentials),v(e,r).then(c,c)}function c(t){var e=f({},t);return e.data=_e(t.data,t.headers,t.status,d.transformResponse),Re(t.status)?e:l.reject(e)}if(!w(e))throw r("$http")("badreq","Http request configuration must be an object.  Received: {0}",e);if(!C(p.valueOf(e.url)))throw r("$http")("badreq","Http request configuration url must be a string or a $sce trusted object.  Received: {0}",e.url);var d=f({method:"get",transformRequest:t.transformRequest,transformResponse:t.transformResponse,paramSerializer:t.paramSerializer,jsonpCallbackParam:t.jsonpCallbackParam},e);d.headers=function(e){var n,r,i,o=t.headers,a=f({},e.headers);o=f({},o.common,o[Xr(e.method)]);t:for(n in o){r=Xr(n);for(i in a)if(Xr(i)===r)continue t;a[n]=o[n]}return s(a,wt(e))}(e),d.method=ti(d.method),d.paramSerializer=C(d.paramSerializer)?h.get(d.paramSerializer):d.paramSerializer,i.$$incOutstandingRequestCount();var m=[],g=[],b=l.resolve(d);return o(E,function(t){(t.request||t.requestError)&&m.unshift(t.request,t.requestError),(t.response||t.responseError)&&g.push(t.response,t.responseError)}),b=n(b,m),b=b.then(u),b=n(b,g),b=b.finally(a)}function v(n,r){function i(t){if(t){var n={};return o(t,function(t,r){n[r]=function(n){function r(){t(n)}e?c.$applyAsync(r):c.$$phase?r():c.$apply(r)}}),n}}function u(t,n,r,i,o){function a(){f(n,t,r,i,o)}v&&(Re(t)?v.put(M,[t,n,De(r),i,o]):v.remove(M)),e?c.$applyAsync(a):(a(),c.$$phase||c.$apply())}function f(t,e,r,i,o){e=e>=-1?e:0,(Re(e)?S.resolve:S.reject)({data:t,status:e,headers:Pe(r),config:n,statusText:i,xhrStatus:o})}function h(t){f(t.data,t.status,wt(t.headers()),t.statusText,t.xhrStatus)}function $(){var t=d.pendingRequests.indexOf(n);-1!==t&&d.pendingRequests.splice(t,1)}var v,E,S=l.defer(),k=S.promise,A=n.headers,O="jsonp"===Xr(n.method),M=n.url;if(O?M=p.getTrustedResourceUrl(M):C(M)||(M=p.valueOf(M)),M=m(M,n.paramSerializer(n.params)),O&&(M=g(M,n.jsonpCallbackParam)),d.pendingRequests.push(n),k.then($,$),!n.cache&&!t.cache||!1===n.cache||"GET"!==n.method&&"JSONP"!==n.method||(v=w(n.cache)?n.cache:w(t.cache)?t.cache:x),v&&(E=v.get(M),b(E)?D(E)?E.then(h,h):vi(E)?f(E[1],E[0],wt(E[2]),E[3],E[4]):f(E,200,{},"OK","complete"):v.put(M,k)),y(E)){var V=Bn(n.url)?s()[n.xsrfCookieName||t.xsrfCookieName]:void 0;V&&(A[n.xsrfHeaderName||t.xsrfHeaderName]=V),a(n.method,M,r,u,A,n.timeout,n.withCredentials,n.responseType,i(n.eventHandlers),i(n.uploadEventHandlers))}return k}function m(t,e){return e.length>0&&(t+=(-1===t.indexOf("?")?"?":"&")+e),t}function g(t,e){if(/[&?][^=]+=JSON_CALLBACK/.test(t))throw So("badjsonp",'Illegal use of JSON_CALLBACK in url, "{0}"',t);if(new RegExp("[&?]"+e+"=").test(t))throw So("badjsonp",'Illegal use of callback param, "{0}", in url, "{1}"',e,t);return t+=(-1===t.indexOf("?")?"?":"&")+e+"=JSON_CALLBACK"}var x=u("$http");t.paramSerializer=C(t.paramSerializer)?h.get(t.paramSerializer):t.paramSerializer;var E=[];return o(n,function(t){E.unshift(C(t)?h.get(t):h.invoke(t))}),d.pendingRequests=[],function(t){o(arguments,function(t){d[t]=function(e,n){return d(f({},n||{},{method:t,url:e}))}})}("get","delete","head","jsonp"),function(t){o(arguments,function(t){d[t]=function(e,n,r){return d(f({},r||{},{method:t,url:e,data:n}))}})}("post","put","patch"),d.defaults=t,d}]}function Le(){this.$get=function(){return function(){return new t.XMLHttpRequest}}}function qe(){this.$get=["$browser","$jsonpCallbacks","$document","$xhrFactory",function(t,e,n,r){return Fe(t,r,t.defer,e,n[0])}]}function Fe(t,e,n,r,i){function a(t,e,n){t=t.replace("JSON_CALLBACK",e);var o=i.createElement("script"),a=null;return o.type="text/javascript",o.src=t,o.async=!0,a=function(t){o.removeEventListener("load",a),o.removeEventListener("error",a),i.body.removeChild(o),o=null;var s=-1,u="unknown";t&&("load"!==t.type||r.wasCalled(e)||(t={type:"error"}),u=t.type,s="error"===t.type?404:200),n&&n(s,u)},o.addEventListener("load",a),o.addEventListener("error",a),i.body.appendChild(o),a}return function(i,s,u,c,l,f,h,p,d,$){function v(){w&&w(),x&&x.abort()}function m(t,e,r,i,o,a){b(k)&&n.cancel(k),w=x=null,t(e,r,i,o,a)}if(s=s||t.url(),"jsonp"===Xr(i))var g=r.createCallback(s),w=a(s,g,function(t,e){var n=200===t&&r.getResponse(g);m(c,t,n,"",e,"complete"),r.removeCallback(g)});else{var x=e(i,s);x.open(i,s,!0),o(l,function(t,e){b(t)&&x.setRequestHeader(e,t)}),x.onload=function(){var t=x.statusText||"",e="response"in x?x.response:x.responseText,n=1223===x.status?204:x.status;0===n&&(n=e?200:"file"===Fn(s).protocol?404:0),m(c,n,e,x.getAllResponseHeaders(),t,"complete")};var C=function(){m(c,-1,null,null,"","error")},E=function(){m(c,-1,null,null,"","abort")},S=function(){m(c,-1,null,null,"","timeout")};if(x.onerror=C,x.onabort=E,x.ontimeout=S,o(d,function(t,e){x.addEventListener(e,t)}),o($,function(t,e){x.upload.addEventListener(e,t)}),h&&(x.withCredentials=!0),p)try{x.responseType=p}catch(t){if("json"!==p)throw t}x.send(y(u)?null:u)}if(f>0)var k=n(v,f);else D(f)&&f.then(v)}}function Be(){var t="{{",e="}}";this.startSymbol=function(e){return e?(t=e,this):t},this.endSymbol=function(t){return t?(e=t,this):e},this.$get=["$parse","$exceptionHandler","$sce",function(n,r,i){function o(t){return"\\\\\\"+t}function a(n){return n.replace(h,t).replace(p,e)}function s(t,e,n,r){var i=t.$watch(function(t){return i(),r(t)},e,n);return i}function u(o,u,h,p){function d(t){try{return t=V(t),p&&!b(t)?t:yt(t)}catch(t){r(ko.interr(o,t))}}if(!o.length||-1===o.indexOf(t)){var $;if(!u){$=m(a(o)),$.exp=o,$.expressions=[],$.$$watchDelegate=s}return $}p=!!p;for(var v,g,w,x=0,C=[],E=[],S=o.length,k=[],O=[];x<S;){if(-1===(v=o.indexOf(t,x))||-1===(g=o.indexOf(e,v+c))){x!==S&&k.push(a(o.substring(x)));break}x!==v&&k.push(a(o.substring(x,v))),w=o.substring(v+c,g),C.push(w),E.push(n(w,d)),x=g+l,O.push(k.length),k.push("")}if(h&&k.length>1&&ko.throwNoconcat(o),!u||C.length){var M=function(t){for(var e=0,n=C.length;e<n;e++){if(p&&y(t[e]))return;k[O[e]]=t[e]}return k.join("")},V=function(t){return h?i.getTrusted(h,t):i.valueOf(t)};return f(function(t){var e=0,n=C.length,i=new Array(n);try{for(;e<n;e++)i[e]=E[e](t);return M(i)}catch(t){r(ko.interr(o,t))}},{exp:o,expressions:C,$$watchDelegate:function(t,e){var n;return t.$watchGroup(E,function(r,i){var o=M(r);A(e)&&e.call(this,o,r!==i?n:o,t),n=o})}})}}var c=t.length,l=e.length,h=new RegExp(t.replace(/./g,o),"g"),p=new RegExp(e.replace(/./g,o),"g");return u.startSymbol=function(){return t},u.endSymbol=function(){return e},u}]}function He(){this.$get=["$rootScope","$window","$q","$$q","$browser",function(t,e,n,r,i){function o(o,s,u,c){function l(){f?o.apply(null,h):o($)}var f=arguments.length>4,h=f?G(arguments,4):[],p=e.setInterval,d=e.clearInterval,$=0,v=b(c)&&!c,m=(v?r:n).defer(),g=m.promise;return u=b(u)?u:0,g.$$intervalId=p(function(){v?i.defer(l):t.$evalAsync(l),m.notify($++),u>0&&$>=u&&(m.resolve($),d(g.$$intervalId),delete a[g.$$intervalId]),v||t.$apply()},s),a[g.$$intervalId]=m,g}var a={};return o.cancel=function(t){return!!(t&&t.$$intervalId in a)&&(Mn(a[t.$$intervalId].promise),a[t.$$intervalId].reject("canceled"),e.clearInterval(t.$$intervalId),delete a[t.$$intervalId],!0)},o}]}function ze(t){for(var e=t.split("/"),n=e.length;n--;)e[n]=ot(e[n]);return e.join("/")}function We(t,e){var n=Fn(t);e.$$protocol=n.protocol,e.$$host=n.hostname,e.$$port=p(n.port)||Mo[n.protocol]||null}function Ge(t,e){if(To.test(t))throw Vo("badpath",'Invalid url "{0}".',t);var n="/"!==t.charAt(0);n&&(t="/"+t);var r=Fn(t);e.$$path=decodeURIComponent(n&&"/"===r.pathname.charAt(0)?r.pathname.substring(1):r.pathname),e.$$search=rt(r.search),e.$$hash=decodeURIComponent(r.hash),e.$$path&&"/"!==e.$$path.charAt(0)&&(e.$$path="/"+e.$$path)}function Ke(t,e){return t.slice(0,e.length)===e}function Je(t,e){if(Ke(e,t))return e.substr(t.length)}function Ze(t){var e=t.indexOf("#");return-1===e?t:t.substr(0,e)}function Ye(t){return t.replace(/(#.+)|#$/,"$1")}function Qe(t){return t.substr(0,Ze(t).lastIndexOf("/")+1)}function Xe(t){return t.substring(0,t.indexOf("/",t.indexOf("//")+2))}function tn(t,e,n){this.$$html5=!0,n=n||"",We(t,this),this.$$parse=function(t){var n=Je(e,t);if(!C(n))throw Vo("ipthprfx",'Invalid url "{0}", missing path prefix "{1}".',t,e);Ge(n,this),this.$$path||(this.$$path="/"),this.$$compose()},this.$$compose=function(){var t=it(this.$$search),n=this.$$hash?"#"+ot(this.$$hash):"";this.$$url=ze(this.$$path)+(t?"?"+t:"")+n,this.$$absUrl=e+this.$$url.substr(1),this.$$urlUpdatedByLocation=!0},this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a,s;return b(o=Je(t,r))?(a=o,s=n&&b(o=Je(n,o))?e+(Je("/",o)||o):t+a):b(o=Je(e,r))?s=e+o:e===r+"/"&&(s=e),s&&this.$$parse(s),!!s}}function en(t,e,n){We(t,this),this.$$parse=function(r){var i,o=Je(t,r)||Je(e,r);y(o)||"#"!==o.charAt(0)?this.$$html5?i=o:(i="",y(o)&&(t=r,this.replace())):(i=Je(n,o),y(i)&&(i=o)),Ge(i,this),this.$$path=function(t,e,n){var r,i=/^\/[A-Z]:(\/.*)/;return Ke(e,n)&&(e=e.replace(n,"")),i.exec(e)?t:(r=i.exec(t),r?r[1]:t)}(this.$$path,i,t),this.$$compose()},this.$$compose=function(){var e=it(this.$$search),r=this.$$hash?"#"+ot(this.$$hash):"";this.$$url=ze(this.$$path)+(e?"?"+e:"")+r,this.$$absUrl=t+(this.$$url?n+this.$$url:""),this.$$urlUpdatedByLocation=!0},this.$$parseLinkUrl=function(e,n){return Ze(t)===Ze(e)&&(this.$$parse(e),!0)}}function nn(t,e,n){this.$$html5=!0,en.apply(this,arguments),this.$$parseLinkUrl=function(r,i){if(i&&"#"===i[0])return this.hash(i.slice(1)),!0;var o,a;return t===Ze(r)?o=r:(a=Je(e,r))?o=t+n+a:e===r+"/"&&(o=e),o&&this.$$parse(o),!!o},this.$$compose=function(){var e=it(this.$$search),r=this.$$hash?"#"+ot(this.$$hash):"";this.$$url=ze(this.$$path)+(e?"?"+e:"")+r,this.$$absUrl=t+n+this.$$url,this.$$urlUpdatedByLocation=!0}}function rn(t){return function(){return this[t]}}function on(t,e){return function(n){return y(n)?this[t]:(this[t]=e(n),this.$$compose(),this)}}function an(){var t="!",e={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(e){return b(e)?(t=e,this):t},this.html5Mode=function(t){return j(t)?(e.enabled=t,this):w(t)?(j(t.enabled)&&(e.enabled=t.enabled),j(t.requireBase)&&(e.requireBase=t.requireBase),(j(t.rewriteLinks)||C(t.rewriteLinks))&&(e.rewriteLinks=t.rewriteLinks),this):e},this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(n,r,i,o,a){function s(t,e,n){var i=c.url(),o=c.$$state;try{r.url(t,e,n),c.$$state=r.state()}catch(t){throw c.url(i),c.$$state=o,t}}function u(t,e){n.$broadcast("$locationChangeSuccess",c.absUrl(),t,c.$$state,e)}var c,l,f,h=r.baseHref(),p=r.url();if(e.enabled){if(!h&&e.requireBase)throw Vo("nobase","$location in HTML5 mode requires a <base> tag to be present!");f=Xe(p)+(h||"/"),l=i.history?tn:nn}else f=Ze(p),l=en;var d=Qe(f);c=new l(f,d,"#"+t),c.$$parseLinkUrl(p,p),c.$$state=r.state();var $=/^\s*(javascript|mailto):/i;o.on("click",function(t){var i=e.rewriteLinks;if(i&&!t.ctrlKey&&!t.metaKey&&!t.shiftKey&&2!==t.which&&2!==t.button){for(var s=ii(t.target);"a"!==L(s[0]);)if(s[0]===o[0]||!(s=s.parent())[0])return;if(!C(i)||!y(s.attr(i))){var u=s.prop("href"),l=s.attr("href")||s.attr("xlink:href");w(u)&&"[object SVGAnimatedString]"===u.toString()&&(u=Fn(u.animVal).href),$.test(u)||!u||s.attr("target")||t.isDefaultPrevented()||c.$$parseLinkUrl(u,l)&&(t.preventDefault(),c.absUrl()!==r.url()&&(n.$apply(),a.angular["ff-684208-preventDefault"]=!0))}}}),Ye(c.absUrl())!==Ye(p)&&r.url(c.absUrl(),!0);var v=!0;return r.onUrlChange(function(t,e){if(!Ke(t,d))return void(a.location.href=t);n.$evalAsync(function(){var r,i=c.absUrl(),o=c.$$state;t=Ye(t),c.$$parse(t),c.$$state=e,r=n.$broadcast("$locationChangeStart",t,i,e,o).defaultPrevented,c.absUrl()===t&&(r?(c.$$parse(i),c.$$state=o,s(i,!1,o)):(v=!1,u(i,o)))}),n.$$phase||n.$digest()}),n.$watch(function(){if(v||c.$$urlUpdatedByLocation){c.$$urlUpdatedByLocation=!1;var t=Ye(r.url()),e=Ye(c.absUrl()),o=r.state(),a=c.$$replace,l=t!==e||c.$$html5&&i.history&&o!==c.$$state;(v||l)&&(v=!1,n.$evalAsync(function(){var e=c.absUrl(),r=n.$broadcast("$locationChangeStart",e,t,c.$$state,o).defaultPrevented;c.absUrl()===e&&(r?(c.$$parse(t),c.$$state=o):(l&&s(e,a,o===c.$$state?null:c.$$state),u(t,o)))}))}c.$$replace=!1}),c}]}function sn(){var t=!0,e=this;this.debugEnabled=function(e){return b(e)?(t=e,this):t},this.$get=["$window",function(n){function r(t){return k(t)&&(t.stack&&a?t=t.message&&-1===t.stack.indexOf(t.message)?"Error: "+t.message+"\n"+t.stack:t.stack:t.sourceURL&&(t=t.message+"\n"+t.sourceURL+":"+t.line)),t}function i(t){var e=n.console||{},i=e[t]||e.log||$;return function(){var t=[];return o(arguments,function(e){t.push(r(e))}),Function.prototype.apply.call(i,e,t)}}var a=ri||/\bEdge\//.test(n.navigator&&n.navigator.userAgent);return{log:i("log"),info:i("info"),warn:i("warn"),error:i("error"),debug:function(){var n=i("debug");return function(){t&&n.apply(e,arguments)}}()}}]}function un(t){return t+""}function cn(t,e){return void 0!==t?t:e}function ln(t,e){return void 0===t?e:void 0===e?t:t+e}function fn(t,e){return!t(e).$stateful}function hn(t,e){switch(t.type){case Ro.MemberExpression:if(t.computed)return!1;break;case Ro.UnaryExpression:return Uo;case Ro.BinaryExpression:return"+"!==t.operator&&Uo;case Ro.CallExpression:return!1}return void 0===e?Lo:e}function pn(t,e,n){var r,i,a,s=t.isPure=hn(t,n);switch(t.type){case Ro.Program:r=!0,o(t.body,function(t){pn(t.expression,e,s),r=r&&t.expression.constant}),t.constant=r;break;case Ro.Literal:t.constant=!0,t.toWatch=[];break;case Ro.UnaryExpression:pn(t.argument,e,s),t.constant=t.argument.constant,t.toWatch=t.argument.toWatch;break;case Ro.BinaryExpression:pn(t.left,e,s),pn(t.right,e,s),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.left.toWatch.concat(t.right.toWatch);break;case Ro.LogicalExpression:pn(t.left,e,s),pn(t.right,e,s),t.constant=t.left.constant&&t.right.constant,t.toWatch=t.constant?[]:[t];break;case Ro.ConditionalExpression:pn(t.test,e,s),
pn(t.alternate,e,s),pn(t.consequent,e,s),t.constant=t.test.constant&&t.alternate.constant&&t.consequent.constant,t.toWatch=t.constant?[]:[t];break;case Ro.Identifier:t.constant=!1,t.toWatch=[t];break;case Ro.MemberExpression:pn(t.object,e,s),t.computed&&pn(t.property,e,s),t.constant=t.object.constant&&(!t.computed||t.property.constant),t.toWatch=t.constant?[]:[t];break;case Ro.CallExpression:a=!!t.filter&&fn(e,t.callee.name),r=a,i=[],o(t.arguments,function(t){pn(t,e,s),r=r&&t.constant,i.push.apply(i,t.toWatch)}),t.constant=r,t.toWatch=a?i:[t];break;case Ro.AssignmentExpression:pn(t.left,e,s),pn(t.right,e,s),t.constant=t.left.constant&&t.right.constant,t.toWatch=[t];break;case Ro.ArrayExpression:r=!0,i=[],o(t.elements,function(t){pn(t,e,s),r=r&&t.constant,i.push.apply(i,t.toWatch)}),t.constant=r,t.toWatch=i;break;case Ro.ObjectExpression:r=!0,i=[],o(t.properties,function(t){pn(t.value,e,s),r=r&&t.value.constant,i.push.apply(i,t.value.toWatch),t.computed&&(pn(t.key,e,!1),r=r&&t.key.constant,i.push.apply(i,t.key.toWatch))}),t.constant=r,t.toWatch=i;break;case Ro.ThisExpression:case Ro.LocalsExpression:t.constant=!1,t.toWatch=[]}}function dn(t){if(1===t.length){var e=t[0].expression,n=e.toWatch;return 1!==n.length?n:n[0]!==e?n:void 0}}function $n(t){return t.type===Ro.Identifier||t.type===Ro.MemberExpression}function vn(t){if(1===t.body.length&&$n(t.body[0].expression))return{type:Ro.AssignmentExpression,left:t.body[0].expression,right:{type:Ro.NGValueParameter},operator:"="}}function mn(t){return 0===t.body.length||1===t.body.length&&(t.body[0].expression.type===Ro.Literal||t.body[0].expression.type===Ro.ArrayExpression||t.body[0].expression.type===Ro.ObjectExpression)}function gn(t){return t.constant}function yn(t){this.$filter=t}function bn(t){this.$filter=t}function wn(t,e,n){this.ast=new Ro(t,n),this.astCompiler=n.csp?new bn(e):new yn(e)}function xn(t){return A(t.valueOf)?t.valueOf():jo.call(t)}function Cn(){var t,e,n=gt(),r={true:!0,false:!1,null:null,undefined:void 0};this.addLiteral=function(t,e){r[t]=e},this.setIdentifierFns=function(n,r){return t=n,e=r,this},this.$get=["$filter",function(i){function a(t,e){var r,o,a;switch(typeof t){case"string":if(t=t.trim(),a=t,!(r=n[a])){":"===t.charAt(0)&&":"===t.charAt(1)&&(o=!0,t=t.substring(2));r=new wn(new _o(d),i,d).parse(t),r.constant?r.$$watchDelegate=f:o?r.$$watchDelegate=r.literal?l:c:r.inputs&&(r.$$watchDelegate=u),n[a]=r}return h(r,e);case"function":return h(t,e);default:return h($,e)}}function s(t,e,n){return null==t||null==e?t===e:!("object"==typeof t&&"object"==typeof(t=xn(t))&&!n)&&(t===e||t!==t&&e!==e)}function u(t,e,n,r,i){var o,a=r.inputs;if(1===a.length){var u=s;return a=a[0],t.$watch(function(t){var e=a(t);return s(e,u,a.isPure)||(o=r(t,void 0,void 0,[e]),u=e&&xn(e)),o},e,n,i)}for(var c=[],l=[],f=0,h=a.length;f<h;f++)c[f]=s,l[f]=null;return t.$watch(function(t){for(var e=!1,n=0,i=a.length;n<i;n++){var u=a[n](t);(e||(e=!s(u,c[n],a[n].isPure)))&&(l[n]=u,c[n]=u&&xn(u))}return e&&(o=r(t,void 0,void 0,l)),o},e,n,i)}function c(t,e,n,r,i){function o(t){return r(t)}function a(t,n,r){c=t,A(e)&&e(t,n,r),b(t)&&r.$$postDigest(function(){b(c)&&s()})}var s,c;return s=r.inputs?u(t,a,n,r,i):t.$watch(o,a,n)}function l(t,e,n,r){function i(t){var e=!0;return o(t,function(t){b(t)||(e=!1)}),e}var a,s;return a=t.$watch(function(t){return r(t)},function(t,n,r){s=t,A(e)&&e(t,n,r),i(t)&&r.$$postDigest(function(){i(s)&&a()})},n)}function f(t,e,n,r){var i=t.$watch(function(t){return i(),r(t)},e,n);return i}function h(t,e){if(!e)return t;var n=t.$$watchDelegate,r=!1,i=n!==l&&n!==c,o=i?function(n,i,o,a){var s=r&&a?a[0]:t(n,i,o,a);return e(s,n,i)}:function(n,r,i,o){var a=t(n,r,i,o),s=e(a,n,r);return b(a)?s:a};return r=!t.inputs,n&&n!==u?(o.$$watchDelegate=n,o.inputs=t.inputs):e.$stateful||(o.$$watchDelegate=u,o.inputs=t.inputs?t.inputs:[t]),o.inputs&&(o.inputs=o.inputs.map(function(t){return t.isPure===Lo?function(e){return t(e)}:t})),o}var p=bi().noUnsafeEval,d={csp:p,literals:B(r),isIdentifierStart:A(t)&&t,isIdentifierContinue:A(e)&&e};return a}]}function En(){var t=!0;this.$get=["$rootScope","$exceptionHandler",function(e,n){return kn(function(t){e.$evalAsync(t)},n,t)}],this.errorOnUnhandledRejections=function(e){return b(e)?(t=e,this):t}}function Sn(){var t=!0;this.$get=["$browser","$exceptionHandler",function(e,n){return kn(function(t){e.defer(t)},n,t)}],this.errorOnUnhandledRejections=function(e){return b(e)?(t=e,this):t}}function kn(t,e,n){function i(){return new a}function a(){var t=this.promise=new s;this.resolve=function(e){h(t,e)},this.reject=function(e){d(t,e)},this.notify=function(e){v(t,e)}}function s(){this.$$state={status:0}}function u(e){var r,i,o;o=e.pending,e.processScheduled=!1,e.pending=void 0;try{for(var a=0,s=o.length;a<s;++a){On(e),i=o[a][0],r=o[a][e.status];try{A(r)?h(i,r(e.value)):1===e.status?h(i,e.value):d(i,e.value)}catch(t){d(i,t)}}}finally{--O,n&&0===O&&t(c)}}function c(){for(;!O&&M.length;){var t=M.shift();if(!An(t)){On(t);var n="Possibly unhandled rejection: "+Ct(t.value);k(t.value)?e(t.value,n):e(n)}}}function l(e){!n||e.pending||2!==e.status||An(e)||(0===O&&0===M.length&&t(c),M.push(e)),!e.processScheduled&&e.pending&&(e.processScheduled=!0,++O,t(function(){u(e)}))}function h(t,e){t.$$state.status||(e===t?$(t,S("qcycle","Expected promise to be resolved with value other than itself '{0}'",e)):p(t,e))}function p(t,e){function n(e){a||(a=!0,p(t,e))}function r(e){a||(a=!0,$(t,e))}function i(e){v(t,e)}var o,a=!1;try{(w(e)||A(e))&&(o=e.then),A(o)?(t.$$state.status=-1,o.call(e,n,r,i)):(t.$$state.value=e,t.$$state.status=1,l(t.$$state))}catch(t){r(t)}}function d(t,e){t.$$state.status||$(t,e)}function $(t,e){t.$$state.value=e,t.$$state.status=2,l(t.$$state)}function v(n,r){var i=n.$$state.pending;n.$$state.status<=0&&i&&i.length&&t(function(){for(var t,n,o=0,a=i.length;o<a;o++){n=i[o][0],t=i[o][3];try{v(n,A(t)?t(r):r)}catch(t){e(t)}}})}function m(t){var e=new s;return d(e,t),e}function g(t,e,n){var r=null;try{A(n)&&(r=n())}catch(t){return m(t)}return D(r)?r.then(function(){return e(t)},m):e(t)}function b(t,e,n,r){var i=new s;return h(i,t),i.then(e,n,r)}function x(t){var e=new s,n=0,r=vi(t)?[]:{};return o(t,function(t,i){n++,b(t).then(function(t){r[i]=t,--n||h(e,r)},function(t){d(e,t)})}),0===n&&h(e,r),e}function C(t){var e=i();return o(t,function(t){b(t).then(e.resolve,e.reject)}),e.promise}function E(t){function e(t){h(r,t)}function n(t){d(r,t)}if(!A(t))throw S("norslvr","Expected resolverFn, got '{0}'",t);var r=new s;return t(e,n),r}var S=r("$q",TypeError),O=0,M=[];f(s.prototype,{then:function(t,e,n){if(y(t)&&y(e)&&y(n))return this;var r=new s;return this.$$state.pending=this.$$state.pending||[],this.$$state.pending.push([r,t,e,n]),this.$$state.status>0&&l(this.$$state),r},catch:function(t){return this.then(null,t)},finally:function(t,e){return this.then(function(e){return g(e,V,t)},function(e){return g(e,m,t)},e)}});var V=b;return E.prototype=s.prototype,E.defer=i,E.reject=m,E.when=b,E.resolve=V,E.all=x,E.race=C,E}function An(t){return!!t.pur}function On(t){t.pur=!0}function Mn(t){On(t.$$state)}function Vn(){this.$get=["$window","$timeout",function(t,e){var n=t.requestAnimationFrame||t.webkitRequestAnimationFrame,r=t.cancelAnimationFrame||t.webkitCancelAnimationFrame||t.webkitCancelRequestAnimationFrame,i=!!n,o=i?function(t){var e=n(t);return function(){r(e)}}:function(t){var n=e(t,16.66,!1);return function(){e.cancel(n)}};return o.supported=i,o}]}function Tn(){function t(t){function e(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$id=u(),this.$$ChildScope=null}return e.prototype=t,e}var e=10,n=r("$rootScope"),a=null,s=null;this.digestTtl=function(t){return arguments.length&&(e=t),e},this.$get=["$exceptionHandler","$parse","$browser",function(r,c,l){function f(t){t.currentScope.$$destroyed=!0}function h(t){9===ri&&(t.$$childHead&&h(t.$$childHead),t.$$nextSibling&&h(t.$$nextSibling)),t.$parent=t.$$nextSibling=t.$$prevSibling=t.$$childHead=t.$$childTail=t.$root=t.$$watchers=null}function p(){this.$id=u(),this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null,this.$root=this,this.$$destroyed=!1,this.$$listeners={},this.$$listenerCount={},this.$$watchersCount=0,this.$$isolateBindings=null}function d(t){if(E.$$phase)throw n("inprog","{0} already in progress",E.$$phase);E.$$phase=t}function v(){E.$$phase=null}function m(t,e){do{t.$$watchersCount+=e}while(t=t.$parent)}function g(t,e,n){do{t.$$listenerCount[n]-=e,0===t.$$listenerCount[n]&&delete t.$$listenerCount[n]}while(t=t.$parent)}function b(){}function x(){for(;O.length;)try{O.shift()()}catch(t){r(t)}s=null}function C(){null===s&&(s=l.defer(function(){E.$apply(x)}))}p.prototype={constructor:p,$new:function(e,n){var r;return n=n||this,e?(r=new p,r.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=t(this)),r=new this.$$ChildScope),r.$parent=n,r.$$prevSibling=n.$$childTail,n.$$childHead?(n.$$childTail.$$nextSibling=r,n.$$childTail=r):n.$$childHead=n.$$childTail=r,(e||n!==this)&&r.$on("$destroy",f),r},$watch:function(t,e,n,r){var i=c(t);if(i.$$watchDelegate)return i.$$watchDelegate(this,e,n,i,t);var o=this,s=o.$$watchers,u={fn:e,last:b,get:i,exp:r||t,eq:!!n};return a=null,A(e)||(u.fn=$),s||(s=o.$$watchers=[],s.$$digestWatchIndex=-1),s.unshift(u),s.$$digestWatchIndex++,m(this,1),function(){var t=F(s,u);t>=0&&(m(o,-1),t<s.$$digestWatchIndex&&s.$$digestWatchIndex--),a=null}},$watchGroup:function(t,e){function n(){u=!1,c?(c=!1,e(i,i,s)):e(i,r,s)}var r=new Array(t.length),i=new Array(t.length),a=[],s=this,u=!1,c=!0;if(!t.length){var l=!0;return s.$evalAsync(function(){l&&e(i,i,s)}),function(){l=!1}}return 1===t.length?this.$watch(t[0],function(t,n,o){i[0]=t,r[0]=n,e(i,t===n?i:r,o)}):(o(t,function(t,e){var o=s.$watch(t,function(t,o){i[e]=t,r[e]=o,u||(u=!0,s.$evalAsync(n))});a.push(o)}),function(){for(;a.length;)a.shift()()})},$watchCollection:function(t,e){function n(t){o=t;var e,n,r,s;if(!y(o)){if(w(o))if(i(o)){a!==p&&(a=p,v=a.length=0,f++),e=o.length,v!==e&&(f++,a.length=v=e);for(var u=0;u<e;u++)s=a[u],r=o[u],s!==s&&r!==r||s===r||(f++,a[u]=r)}else{a!==d&&(a=d={},v=0,f++),e=0;for(n in o)Qr.call(o,n)&&(e++,r=o[n],s=a[n],n in a?s!==s&&r!==r||s===r||(f++,a[n]=r):(v++,a[n]=r,f++));if(v>e){f++;for(n in a)Qr.call(o,n)||(v--,delete a[n])}}else a!==o&&(a=o,f++);return f}}function r(){if($?($=!1,e(o,o,u)):e(o,s,u),l)if(w(o))if(i(o)){s=new Array(o.length);for(var t=0;t<o.length;t++)s[t]=o[t]}else{s={};for(var n in o)Qr.call(o,n)&&(s[n]=o[n])}else s=o}n.$stateful=!0;var o,a,s,u=this,l=e.length>1,f=0,h=c(t,n),p=[],d={},$=!0,v=0;return this.$watch(h,r)},$digest:function(){var t,i,o,u,c,f,h,p,$,m,g,y=e,w=this,C=[];d("$digest"),l.$$checkUrlChange(),this===E&&null!==s&&(l.defer.cancel(s),x()),a=null;do{h=!1,$=w;for(var O=0;O<S.length;O++){try{g=S[O],u=g.fn,u(g.scope,g.locals)}catch(t){r(t)}a=null}S.length=0;t:do{if(f=$.$$watchers)for(f.$$digestWatchIndex=f.length;f.$$digestWatchIndex--;)try{if(t=f[f.$$digestWatchIndex])if(c=t.get,(i=c($))===(o=t.last)||(t.eq?z(i,o):$i(i)&&$i(o))){if(t===a){h=!1;break t}}else h=!0,a=t,t.last=t.eq?B(i,null):i,u=t.fn,u(i,o===b?i:o,$),y<5&&(m=4-y,C[m]||(C[m]=[]),C[m].push({msg:A(t.exp)?"fn: "+(t.exp.name||t.exp.toString()):t.exp,newVal:i,oldVal:o}))}catch(t){r(t)}if(!(p=$.$$watchersCount&&$.$$childHead||$!==w&&$.$$nextSibling))for(;$!==w&&!(p=$.$$nextSibling);)$=$.$parent}while($=p);if((h||S.length)&&!y--)throw v(),n("infdig","{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}",e,C)}while(h||S.length);for(v();M<k.length;)try{k[M++]()}catch(t){r(t)}k.length=M=0,l.$$checkUrlChange()},$destroy:function(){if(!this.$$destroyed){var t=this.$parent;this.$broadcast("$destroy"),this.$$destroyed=!0,this===E&&l.$$applicationDestroyed(),m(this,-this.$$watchersCount);for(var e in this.$$listenerCount)g(this,this.$$listenerCount[e],e);t&&t.$$childHead===this&&(t.$$childHead=this.$$nextSibling),t&&t.$$childTail===this&&(t.$$childTail=this.$$prevSibling),this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling),this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling),this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=$,this.$on=this.$watch=this.$watchGroup=function(){return $},this.$$listeners={},this.$$nextSibling=null,h(this)}},$eval:function(t,e){return c(t)(this,e)},$evalAsync:function(t,e){E.$$phase||S.length||l.defer(function(){S.length&&E.$digest()}),S.push({scope:this,fn:c(t),locals:e})},$$postDigest:function(t){k.push(t)},$apply:function(t){try{d("$apply");try{return this.$eval(t)}finally{v()}}catch(t){r(t)}finally{try{E.$digest()}catch(t){throw r(t),t}}},$applyAsync:function(t){function e(){n.$eval(t)}var n=this;t&&O.push(e),t=c(t),C()},$on:function(t,e){var n=this.$$listeners[t];n||(this.$$listeners[t]=n=[]),n.push(e);var r=this;do{r.$$listenerCount[t]||(r.$$listenerCount[t]=0),r.$$listenerCount[t]++}while(r=r.$parent);var i=this;return function(){var r=n.indexOf(e);-1!==r&&(n[r]=null,g(i,1,t))}},$emit:function(t,e){var n,i,o,a=[],s=this,u=!1,c={name:t,targetScope:s,stopPropagation:function(){u=!0},preventDefault:function(){c.defaultPrevented=!0},defaultPrevented:!1},l=W([c],arguments,1);do{for(n=s.$$listeners[t]||a,c.currentScope=s,i=0,o=n.length;i<o;i++)if(n[i])try{n[i].apply(null,l)}catch(t){r(t)}else n.splice(i,1),i--,o--;if(u)return c.currentScope=null,c;s=s.$parent}while(s);return c.currentScope=null,c},$broadcast:function(t,e){var n=this,i=n,o=n,a={name:t,targetScope:n,preventDefault:function(){a.defaultPrevented=!0},defaultPrevented:!1};if(!n.$$listenerCount[t])return a;for(var s,u,c,l=W([a],arguments,1);i=o;){for(a.currentScope=i,s=i.$$listeners[t]||[],u=0,c=s.length;u<c;u++)if(s[u])try{s[u].apply(null,l)}catch(t){r(t)}else s.splice(u,1),u--,c--;if(!(o=i.$$listenerCount[t]&&i.$$childHead||i!==n&&i.$$nextSibling))for(;i!==n&&!(o=i.$$nextSibling);)i=i.$parent}return a.currentScope=null,a}};var E=new p,S=E.$$asyncQueue=[],k=E.$$postDigestQueue=[],O=E.$$applyAsyncQueue=[],M=0;return E}]}function Nn(){var t=/^\s*(https?|ftp|mailto|tel|file):/,e=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationWhitelist=function(e){return b(e)?(t=e,this):t},this.imgSrcSanitizationWhitelist=function(t){return b(t)?(e=t,this):e},this.$get=function(){return function(n,r){var i,o=r?e:t;return i=Fn(n).href,""===i||i.match(o)?n:"unsafe:"+i}}}function In(t){return t.replace(Bo,kt)}function jn(t){if("self"===t)return t;if(C(t)){if(t.indexOf("***")>-1)throw qo("iwcard","Illegal sequence *** in string matcher.  String: {0}",t);return t=yi(t).replace(/\\\*\\\*/g,".*").replace(/\\\*/g,"[^:/.?&;]*"),new RegExp("^"+t+"$")}if(O(t))return new RegExp("^"+t.source+"$");throw qo("imatcher",'Matchers may only be "self", string patterns or RegExp objects')}function Dn(t){var e=[];return b(t)&&o(t,function(t){e.push(jn(t))}),e}function Pn(){this.SCE_CONTEXTS=Fo;var t=["self"],e=[];this.resourceUrlWhitelist=function(e){return arguments.length&&(t=Dn(e)),t},this.resourceUrlBlacklist=function(t){return arguments.length&&(e=Dn(t)),e},this.$get=["$injector",function(n){function r(t,e){return"self"===t?Bn(e):!!t.exec(e.href)}function i(n){var i,o,a=Fn(n.toString()),s=!1;for(i=0,o=t.length;i<o;i++)if(r(t[i],a)){s=!0;break}if(s)for(i=0,o=e.length;i<o;i++)if(r(e[i],a)){s=!1;break}return s}function o(t){var e=function(t){this.$$unwrapTrustedValue=function(){return t}};return t&&(e.prototype=new t),e.prototype.valueOf=function(){return this.$$unwrapTrustedValue()},e.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()},e}function a(t,e){var n=f.hasOwnProperty(t)?f[t]:null;if(!n)throw qo("icontext","Attempted to trust a value in invalid context. Context: {0}; Value: {1}",t,e);if(null===e||y(e)||""===e)return e;if("string"!=typeof e)throw qo("itype","Attempted to trust a non-string value in a content requiring a string: Context: {0}",t);return new n(e)}function s(t){return t instanceof l?t.$$unwrapTrustedValue():t}function u(t,e){if(null===e||y(e)||""===e)return e;var n=f.hasOwnProperty(t)?f[t]:null;if(n&&e instanceof n)return e.$$unwrapTrustedValue();if(t===Fo.RESOURCE_URL){if(i(e))return e;throw qo("insecurl","Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}",e.toString())}if(t===Fo.HTML)return c(e);throw qo("unsafe","Attempting to use an unsafe value in a safe context.")}var c=function(t){throw qo("unsafe","Attempting to use an unsafe value in a safe context.")};n.has("$sanitize")&&(c=n.get("$sanitize"));var l=o(),f={};return f[Fo.HTML]=o(l),f[Fo.CSS]=o(l),f[Fo.URL]=o(l),f[Fo.JS]=o(l),f[Fo.RESOURCE_URL]=o(f[Fo.URL]),{trustAs:a,getTrusted:u,valueOf:s}}]}function _n(){var t=!0;this.enabled=function(e){return arguments.length&&(t=!!e),t},this.$get=["$parse","$sceDelegate",function(e,n){if(t&&ri<8)throw qo("iequirks","Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks mode.  You can fix this by adding the text <!doctype html> to the top of your HTML document.  See http://docs.angularjs.org/api/ng.$sce for more information.");var r=wt(Fo);r.isEnabled=function(){return t},r.trustAs=n.trustAs,r.getTrusted=n.getTrusted,r.valueOf=n.valueOf,t||(r.trustAs=r.getTrusted=function(t,e){return e},r.valueOf=v),r.parseAs=function(t,n){var i=e(n);return i.literal&&i.constant?i:e(n,function(e){return r.getTrusted(t,e)})};var i=r.parseAs,a=r.getTrusted,s=r.trustAs;return o(Fo,function(t,e){var n=Xr(e);r[In("parse_as_"+n)]=function(e){return i(t,e)},r[In("get_trusted_"+n)]=function(e){return a(t,e)},r[In("trust_as_"+n)]=function(e){return s(t,e)}}),r}]}function Rn(){this.$get=["$window","$document",function(t,e){var n={},r=t.nw&&t.nw.process,i=!r&&t.chrome&&(t.chrome.app&&t.chrome.app.runtime||!t.chrome.app&&t.chrome.runtime&&t.chrome.runtime.id),o=!i&&t.history&&t.history.pushState,a=p((/android (\d+)/.exec(Xr((t.navigator||{}).userAgent))||[])[1]),s=/Boxee/i.test((t.navigator||{}).userAgent),u=e[0]||{},c=u.body&&u.body.style,l=!1,f=!1;return c&&(l=!!("transition"in c||"webkitTransition"in c),f=!!("animation"in c||"webkitAnimation"in c)),{history:!(!o||a<4||s),hasEvent:function(t){if("input"===t&&ri)return!1;if(y(n[t])){var e=u.createElement("div");n[t]="on"+t in e}return n[t]},csp:bi(),transitions:l,animations:f,android:a}}]}function Un(){var t;this.httpOptions=function(e){return e?(t=e,this):t},this.$get=["$exceptionHandler","$templateCache","$http","$q","$sce",function(e,n,r,i,o){function a(s,u){function c(t){return u||(t=Ho("tpload","Failed to load template: {0} (HTTP status: {1} {2})",s,t.status,t.statusText),e(t)),i.reject(t)}a.totalPendingRequests++,C(s)&&!y(n.get(s))||(s=o.getTrustedResourceUrl(s));var l=r.defaults&&r.defaults.transformResponse;return vi(l)?l=l.filter(function(t){return t!==Ie}):l===Ie&&(l=null),r.get(s,f({cache:n,transformResponse:l},t)).finally(function(){a.totalPendingRequests--}).then(function(t){return n.put(s,t.data),t.data},c)}return a.totalPendingRequests=0,a}]}function Ln(){this.$get=["$rootScope","$browser","$location",function(t,e,n){var r={};return r.findBindings=function(t,e,n){var r=t.getElementsByClassName("ng-binding"),i=[];return o(r,function(t){var r=pi.element(t).data("$binding");r&&o(r,function(r){if(n){new RegExp("(^|\\s)"+yi(e)+"(\\s|\\||$)").test(r)&&i.push(t)}else-1!==r.indexOf(e)&&i.push(t)})}),i},r.findModels=function(t,e,n){for(var r=["ng-","data-ng-","ng\\:"],i=0;i<r.length;++i){var o=n?"=":"*=",a="["+r[i]+"model"+o+'"'+e+'"]',s=t.querySelectorAll(a);if(s.length)return s}},r.getLocation=function(){return n.url()},r.setLocation=function(e){e!==n.url()&&(n.url(e),t.$digest())},r.whenStable=function(t){e.notifyWhenNoOutstandingRequests(t)},r}]}function qn(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(t,e,n,r,i){function o(o,s,u){A(o)||(u=s,s=o,o=$);var c,l=G(arguments,3),f=b(u)&&!u,h=(f?r:n).defer(),p=h.promise;return c=e.defer(function(){try{h.resolve(o.apply(null,l))}catch(t){h.reject(t),i(t)}finally{delete a[p.$$timeoutId]}f||t.$apply()},s),p.$$timeoutId=c,a[c]=h,p}var a={};return o.cancel=function(t){return!!(t&&t.$$timeoutId in a)&&(Mn(a[t.$$timeoutId].promise),a[t.$$timeoutId].reject("canceled"),delete a[t.$$timeoutId],e.defer.cancel(t.$$timeoutId))},o}]}function Fn(t){var e=t;return ri&&(zo.setAttribute("href",e),e=zo.href),zo.setAttribute("href",e),{href:zo.href,protocol:zo.protocol?zo.protocol.replace(/:$/,""):"",host:zo.host,search:zo.search?zo.search.replace(/^\?/,""):"",hash:zo.hash?zo.hash.replace(/^#/,""):"",hostname:zo.hostname,port:zo.port,pathname:"/"===zo.pathname.charAt(0)?zo.pathname:"/"+zo.pathname}}function Bn(t){var e=C(t)?Fn(t):t;return e.protocol===Wo.protocol&&e.host===Wo.host}function Hn(){this.$get=m(t)}function zn(t){function e(t){try{return t.cookie||""}catch(t){return""}}function n(t){try{return decodeURIComponent(t)}catch(e){return t}}var r=t[0]||{},i={},o="";return function(){var t,a,s,u,c,l=e(r);if(l!==o)for(o=l,t=o.split("; "),i={},s=0;s<t.length;s++)a=t[s],(u=a.indexOf("="))>0&&(c=n(a.substring(0,u)),y(i[c])&&(i[c]=n(a.substring(u+1))));return i}}function Wn(){this.$get=zn}function Gn(t){function e(r,i){if(w(r)){var a={};return o(r,function(t,n){a[n]=e(n,t)}),a}return t.factory(r+n,i)}var n="Filter";this.register=e,this.$get=["$injector",function(t){return function(e){return t.get(e+n)}}],e("currency",Qn),e("date",pr),e("filter",Kn),e("json",dr),e("limitTo",$r),e("lowercase",Xo),e("number",Xn),e("orderBy",mr),e("uppercase",ta)}function Kn(){return function(t,e,n,o){if(!i(t)){if(null==t)return t;throw r("filter")("notarray","Expected array but received: {0}",t)}o=o||"$";var a,s,u=Yn(e);switch(u){case"function":a=e;break;case"boolean":case"null":case"number":case"string":s=!0;case"object":a=Jn(e,n,o,s);break;default:return t}return Array.prototype.filter.call(t,a)}}function Jn(t,e,n,r){var i=w(t)&&n in t;return!0===e?e=z:A(e)||(e=function(t,e){return!y(t)&&(null===t||null===e?t===e:!(w(e)||w(t)&&!g(t))&&(t=Xr(""+t),e=Xr(""+e),-1!==t.indexOf(e)))}),function(o){return i&&!w(o)?Zn(o,t[n],e,n,!1):Zn(o,t,e,n,r)}}function Zn(t,e,n,r,i,o){var a=Yn(t),s=Yn(e);if("string"===s&&"!"===e.charAt(0))return!Zn(t,e.substring(1),n,r,i);if(vi(t))return t.some(function(t){return Zn(t,e,n,r,i)});switch(a){case"object":var u;if(i){for(u in t)if(u.charAt&&"$"!==u.charAt(0)&&Zn(t[u],e,n,r,!0))return!0;return!o&&Zn(t,e,n,r,!1)}if("object"===s){for(u in e){var c=e[u];if(!A(c)&&!y(c)){var l=u===r;if(!Zn(l?t:t[u],c,n,r,l,l))return!1}}return!0}return n(t,e);case"function":return!1;default:return n(t,e)}}function Yn(t){return null===t?"null":typeof t}function Qn(t){var e=t.NUMBER_FORMATS;return function(t,n,r){return y(n)&&(n=e.CURRENCY_SYM),y(r)&&(r=e.PATTERNS[1].maxFrac),null==t?t:nr(t,e.PATTERNS[1],e.GROUP_SEP,e.DECIMAL_SEP,r).replace(/\u00A4/g,n)}}function Xn(t){var e=t.NUMBER_FORMATS;return function(t,n){return null==t?t:nr(t,e.PATTERNS[0],e.GROUP_SEP,e.DECIMAL_SEP,n)}}function tr(t){var e,n,r,i,o,a=0;for((n=t.indexOf(Ko))>-1&&(t=t.replace(Ko,"")),(r=t.search(/e/i))>0?(n<0&&(n=r),n+=+t.slice(r+1),t=t.substring(0,r)):n<0&&(n=t.length),r=0;t.charAt(r)===Jo;r++);if(r===(o=t.length))e=[0],n=1;else{for(o--;t.charAt(o)===Jo;)o--;for(n-=r,e=[],i=0;r<=o;r++,i++)e[i]=+t.charAt(r)}return n>Go&&(e=e.splice(0,Go-1),a=n-1,n=1),{d:e,e:a,i:n}}function er(t,e,n,r){var i=t.d,o=i.length-t.i;e=y(e)?Math.min(Math.max(n,o),r):+e;var a=e+t.i,s=i[a];if(a>0){i.splice(Math.max(t.i,a));for(var u=a;u<i.length;u++)i[u]=0}else{o=Math.max(0,o),t.i=1,i.length=Math.max(1,a=e+1),i[0]=0;for(var c=1;c<a;c++)i[c]=0}if(s>=5)if(a-1<0){for(var l=0;l>a;l--)i.unshift(0),t.i++;i.unshift(1),t.i++}else i[a-1]++;for(;o<Math.max(0,e);o++)i.push(0);var f=i.reduceRight(function(t,e,n,r){return e+=t,r[n]=e%10,Math.floor(e/10)},0);f&&(i.unshift(f),t.i++)}function nr(t,e,n,r,i){if(!C(t)&&!E(t)||isNaN(t))return"";var o,a=!isFinite(t),s=!1,u=Math.abs(t)+"",c="";if(a)c="∞";else{o=tr(u),er(o,i,e.minFrac,e.maxFrac);var l=o.d,f=o.i,h=o.e,p=[];for(s=l.reduce(function(t,e){return t&&!e},!0);f<0;)l.unshift(0),f++;f>0?p=l.splice(f,l.length):(p=l,l=[0]);var d=[];for(l.length>=e.lgSize&&d.unshift(l.splice(-e.lgSize,l.length).join(""));l.length>e.gSize;)d.unshift(l.splice(-e.gSize,l.length).join(""));l.length&&d.unshift(l.join("")),c=d.join(n),p.length&&(c+=r+p.join("")),h&&(c+="e+"+h)}return t<0&&!s?e.negPre+c+e.negSuf:e.posPre+c+e.posSuf}function rr(t,e,n,r){var i="";for((t<0||r&&t<=0)&&(r?t=1-t:(t=-t,i="-")),t=""+t;t.length<e;)t=Jo+t;return n&&(t=t.substr(t.length-e)),i+t}function ir(t,e,n,r,i){return n=n||0,function(o){var a=o["get"+t]();return(n>0||a>-n)&&(a+=n),0===a&&-12===n&&(a=12),rr(a,e,r,i)}}function or(t,e,n){return function(r,i){var o=r["get"+t]();return i[ti((n?"STANDALONE":"")+(e?"SHORT":"")+t)][o]}}function ar(t,e,n){var r=-1*n,i=r>=0?"+":"";return i+=rr(Math[r>0?"floor":"ceil"](r/60),2)+rr(Math.abs(r%60),2)}function sr(t){var e=new Date(t,0,1).getDay();return new Date(t,0,(e<=4?5:12)-e)}function ur(t){return new Date(t.getFullYear(),t.getMonth(),t.getDate()+(4-t.getDay()))}function cr(t){return function(e){var n=sr(e.getFullYear()),r=ur(e),i=+r-+n;return rr(1+Math.round(i/6048e5),t)}}function lr(t,e){return t.getHours()<12?e.AMPMS[0]:e.AMPMS[1]}function fr(t,e){return t.getFullYear()<=0?e.ERAS[0]:e.ERAS[1]}function hr(t,e){return t.getFullYear()<=0?e.ERANAMES[0]:e.ERANAMES[1]}function pr(t){function e(t){var e;if(e=t.match(n)){var r=new Date(0),i=0,o=0,a=e[8]?r.setUTCFullYear:r.setFullYear,s=e[8]?r.setUTCHours:r.setHours;e[9]&&(i=p(e[9]+e[10]),o=p(e[9]+e[11])),a.call(r,p(e[1]),p(e[2])-1,p(e[3]));var u=p(e[4]||0)-i,c=p(e[5]||0)-o,l=p(e[6]||0),f=Math.round(1e3*parseFloat("0."+(e[7]||0)));return s.call(r,u,c,l,f),r}return t}var n=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;return function(n,r,i){var a,s,u="",c=[];if(r=r||"mediumDate",r=t.DATETIME_FORMATS[r]||r,C(n)&&(n=Qo.test(n)?p(n):e(n)),E(n)&&(n=new Date(n)),!S(n)||!isFinite(n.getTime()))return n;for(;r;)s=Yo.exec(r),s?(c=W(c,s,1),r=c.pop()):(c.push(r),r=null);var l=n.getTimezoneOffset();return i&&(l=Q(i,l),n=tt(n,i,!0)),o(c,function(e){a=Zo[e],u+=a?a(n,t.DATETIME_FORMATS,l):"''"===e?"'":e.replace(/(^'|'$)/g,"").replace(/''/g,"'")}),u}}function dr(){return function(t,e){return y(e)&&(e=2),Z(t,e)}}function $r(){return function(t,e,n){return e=Math.abs(Number(e))===1/0?Number(e):p(e),$i(e)?t:(E(t)&&(t=t.toString()),i(t)?(n=!n||isNaN(n)?0:p(n),n=n<0?Math.max(0,t.length+n):n,e>=0?vr(t,n,n+e):0===n?vr(t,e,t.length):vr(t,Math.max(0,n+e),n)):t)}}function vr(t,e,n){return C(t)?t.slice(e,n):si.call(t,e,n)}function mr(t){function e(e){return e.map(function(e){var n=1,r=v;if(A(e))r=e;else if(C(e)&&("+"!==e.charAt(0)&&"-"!==e.charAt(0)||(n="-"===e.charAt(0)?-1:1,e=e.substring(1)),""!==e&&(r=t(e),r.constant))){var i=r();r=function(t){return t[i]}}return{get:r,descending:n}})}function n(t){switch(typeof t){case"number":case"boolean":case"string":return!0;default:return!1}}function o(t){return A(t.valueOf)&&(t=t.valueOf(),n(t))?t:(g(t)&&(t=t.toString(),n(t)),t)}function a(t,e){var n=typeof t;return null===t?(n="string",t="null"):"object"===n&&(t=o(t)),{value:t,type:n,index:e}}function s(t,e){var n=0,r=t.type,i=e.type;if(r===i){var o=t.value,a=e.value;"string"===r?(o=o.toLowerCase(),a=a.toLowerCase()):"object"===r&&(w(o)&&(o=t.index),w(a)&&(a=e.index)),o!==a&&(n=o<a?-1:1)}else n=r<i?-1:1;return n}return function(t,n,o,u){function c(t,e){return{value:t,tieBreaker:{value:e,type:"number",index:e},predicateValues:f.map(function(n){return a(n.get(t),e)})}}function l(t,e){for(var n=0,r=f.length;n<r;n++){var i=p(t.predicateValues[n],e.predicateValues[n]);if(i)return i*f[n].descending*h}return(p(t.tieBreaker,e.tieBreaker)||s(t.tieBreaker,e.tieBreaker))*h}if(null==t)return t;if(!i(t))throw r("orderBy")("notarray","Expected array but received: {0}",t);vi(n)||(n=[n]),0===n.length&&(n=["+"]);var f=e(n),h=o?-1:1,p=A(u)?u:s,d=Array.prototype.map.call(t,c);return d.sort(l),t=d.map(function(t){return t.value})}}function gr(t){return A(t)&&(t={link:t}),t.restrict=t.restrict||"AC",m(t)}function yr(t,e){t.$name=e}function br(t,e,n,r,i){this.$$controls=[],this.$error={},this.$$success={},this.$pending=void 0,this.$name=i(e.name||e.ngForm||"")(n),this.$dirty=!1,this.$pristine=!0,this.$valid=!0,this.$invalid=!1,this.$submitted=!1,this.$$parentForm=ra,this.$$element=t,this.$$animate=r,wr(this)}function wr(t){t.$$classCache={},t.$$classCache[La]=!(t.$$classCache[Ua]=t.$$element.hasClass(Ua))}function xr(t){function e(t,e,n,r){t[e]||(t[e]={}),a(t[e],n,r)}function n(t,e,n,r){t[e]&&s(t[e],n,r),Cr(t[e])&&(t[e]=void 0)}function r(t,e,n){n&&!t.$$classCache[e]?(t.$$animate.addClass(t.$$element,e),t.$$classCache[e]=!0):!n&&t.$$classCache[e]&&(t.$$animate.removeClass(t.$$element,e),t.$$classCache[e]=!1)}function i(t,e,n){e=e?"-"+ht(e,"-"):"",r(t,Ua+e,!0===n),r(t,La+e,!1===n)}var o=t.clazz,a=t.set,s=t.unset;o.prototype.$setValidity=function(t,o,u){y(o)?e(this,"$pending",t,u):n(this,"$pending",t,u),j(o)?o?(s(this.$error,t,u),a(this.$$success,t,u)):(a(this.$error,t,u),s(this.$$success,t,u)):(s(this.$error,t,u),s(this.$$success,t,u)),this.$pending?(r(this,ia,!0),this.$valid=this.$invalid=void 0,i(this,"",null)):(r(this,ia,!1),this.$valid=Cr(this.$error),this.$invalid=!this.$valid,i(this,"",this.$valid));var c;c=this.$pending&&this.$pending[t]?void 0:!this.$error[t]&&(!!this.$$success[t]||null),i(this,t,c),this.$$parentForm.$setValidity(t,c,this)}}function Cr(t){if(t)for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}function Er(t){t.$formatters.push(function(e){return t.$isEmpty(e)?e:e.toString()})}function Sr(t,e,n,r,i,o){kr(t,e,n,r,i,o),Er(r)}function kr(t,e,n,r,i,o){var a=Xr(e[0].type);if(!i.android){var s=!1;e.on("compositionstart",function(){s=!0}),e.on("compositionend",function(){s=!1,c()})}var u,c=function(t){if(u&&(o.defer.cancel(u),u=null),!s){var i=e.val(),c=t&&t.type;"password"===a||n.ngTrim&&"false"===n.ngTrim||(i=gi(i)),(r.$viewValue!==i||""===i&&r.$$hasNativeValidators)&&r.$setViewValue(i,c)}};if(i.hasEvent("input"))e.on("input",c);else{var l=function(t,e,n){u||(u=o.defer(function(){u=null,e&&e.value===n||c(t)}))};e.on("keydown",function(t){var e=t.keyCode;91===e||15<e&&e<19||37<=e&&e<=40||l(t,this,this.value)}),i.hasEvent("paste")&&e.on("paste cut",l)}e.on("change",c),ga[a]&&r.$$hasNativeValidators&&a===n.type&&e.on(ma,function(t){if(!u){var e=this[Yr],n=e.badInput,r=e.typeMismatch;u=o.defer(function(){u=null,e.badInput===n&&e.typeMismatch===r||c(t)})}}),r.$render=function(){var t=r.$isEmpty(r.$viewValue)?"":r.$viewValue;e.val()!==t&&e.val(t)}}function Ar(t,e){if(S(t))return t;if(C(t)){da.lastIndex=0;var n=da.exec(t);if(n){var r=+n[1],i=+n[2],o=0,a=0,s=0,u=0,c=sr(r),l=7*(i-1);return e&&(o=e.getHours(),a=e.getMinutes(),s=e.getSeconds(),u=e.getMilliseconds()),new Date(r,0,c.getDate()+l,o,a,s,u)}}return NaN}function Or(t,e){return function(n,r){var i,a;if(S(n))return n;if(C(n)){if('"'===n.charAt(0)&&'"'===n.charAt(n.length-1)&&(n=n.substring(1,n.length-1)),ua.test(n))return new Date(n);if(t.lastIndex=0,i=t.exec(n))return i.shift(),a=r?{yyyy:r.getFullYear(),MM:r.getMonth()+1,dd:r.getDate(),HH:r.getHours(),mm:r.getMinutes(),ss:r.getSeconds(),sss:r.getMilliseconds()/1e3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},o(i,function(t,n){n<e.length&&(a[e[n]]=+t)}),new Date(a.yyyy,a.MM-1,a.dd,a.HH,a.mm,a.ss||0,1e3*a.sss||0)}return NaN}}function Mr(t,e,n,r){return function(i,o,a,s,u,c,l){function f(t){return t&&!(t.getTime&&t.getTime()!==t.getTime())}function h(t){return b(t)&&!S(t)?n(t)||void 0:t}Vr(i,o,a,s),kr(i,o,a,s,u,c);var p,d=s&&s.$options.getOption("timezone");if(s.$$parserName=t,s.$parsers.push(function(t){if(s.$isEmpty(t))return null;if(e.test(t)){var r=n(t,p);return d&&(r=tt(r,d)),r}}),s.$formatters.push(function(t){if(t&&!S(t))throw Ba("datefmt","Expected `{0}` to be a date",t);return f(t)?(p=t,p&&d&&(p=tt(p,d,!0)),l("date")(t,r,d)):(p=null,"")}),
b(a.min)||a.ngMin){var $;s.$validators.min=function(t){return!f(t)||y($)||n(t)>=$},a.$observe("min",function(t){$=h(t),s.$validate()})}if(b(a.max)||a.ngMax){var v;s.$validators.max=function(t){return!f(t)||y(v)||n(t)<=v},a.$observe("max",function(t){v=h(t),s.$validate()})}}}function Vr(t,e,n,r){var i=e[0];(r.$$hasNativeValidators=w(i.validity))&&r.$parsers.push(function(t){var n=e.prop(Yr)||{};return n.badInput||n.typeMismatch?void 0:t})}function Tr(t){t.$$parserName="number",t.$parsers.push(function(e){return t.$isEmpty(e)?null:fa.test(e)?parseFloat(e):void 0}),t.$formatters.push(function(e){if(!t.$isEmpty(e)){if(!E(e))throw Ba("numfmt","Expected `{0}` to be a number",e);e=e.toString()}return e})}function Nr(t){return b(t)&&!E(t)&&(t=parseFloat(t)),$i(t)?void 0:t}function Ir(t){return(0|t)===t}function jr(t){var e=t.toString(),n=e.indexOf(".");if(-1===n){if(-1<t&&t<1){var r=/e-(\d+)$/.exec(e);if(r)return Number(r[1])}return 0}return e.length-n-1}function Dr(t,e,n){var r=Number(t),i=!Ir(r),o=!Ir(e),a=!Ir(n);if(i||o||a){var s=i?jr(r):0,u=o?jr(e):0,c=a?jr(n):0,l=Math.max(s,u,c),f=Math.pow(10,l);r*=f,e*=f,n*=f,i&&(r=Math.round(r)),o&&(e=Math.round(e)),a&&(n=Math.round(n))}return(r-e)%n==0}function Pr(t,e,n,r,i,o){Vr(t,e,n,r),Tr(r),kr(t,e,n,r,i,o);var a,s;if((b(n.min)||n.ngMin)&&(r.$validators.min=function(t){return r.$isEmpty(t)||y(a)||t>=a},n.$observe("min",function(t){a=Nr(t),r.$validate()})),(b(n.max)||n.ngMax)&&(r.$validators.max=function(t){return r.$isEmpty(t)||y(s)||t<=s},n.$observe("max",function(t){s=Nr(t),r.$validate()})),b(n.step)||n.ngStep){var u;r.$validators.step=function(t,e){return r.$isEmpty(e)||y(u)||Dr(e,a||0,u)},n.$observe("step",function(t){u=Nr(t),r.$validate()})}}function _r(t,e,n,r,i,o){function a(t,r){e.attr(t,n[t]),n.$observe(t,r)}function s(t){if(f=Nr(t),!$i(r.$modelValue))if(l){var n=e.val();f>n&&(n=f,e.val(n)),r.$setViewValue(n)}else r.$validate()}function u(t){if(h=Nr(t),!$i(r.$modelValue))if(l){var n=e.val();h<n&&(e.val(h),n=h<f?f:h),r.$setViewValue(n)}else r.$validate()}function c(t){p=Nr(t),$i(r.$modelValue)||(l&&r.$viewValue!==e.val()?r.$setViewValue(e.val()):r.$validate())}Vr(t,e,n,r),Tr(r),kr(t,e,n,r,i,o);var l=r.$$hasNativeValidators&&"range"===e[0].type,f=l?0:void 0,h=l?100:void 0,p=l?1:void 0,d=e[0].validity,$=b(n.min),v=b(n.max),m=b(n.step),g=r.$render;r.$render=l&&b(d.rangeUnderflow)&&b(d.rangeOverflow)?function(){g(),r.$setViewValue(e.val())}:g,$&&(r.$validators.min=l?function(){return!0}:function(t,e){return r.$isEmpty(e)||y(f)||e>=f},a("min",s)),v&&(r.$validators.max=l?function(){return!0}:function(t,e){return r.$isEmpty(e)||y(h)||e<=h},a("max",u)),m&&(r.$validators.step=l?function(){return!d.stepMismatch}:function(t,e){return r.$isEmpty(e)||y(p)||Dr(e,f||0,p)},a("step",c))}function Rr(t,e,n,r,i,o){kr(t,e,n,r,i,o),Er(r),r.$$parserName="url",r.$validators.url=function(t,e){var n=t||e;return r.$isEmpty(n)||ca.test(n)}}function Ur(t,e,n,r,i,o){kr(t,e,n,r,i,o),Er(r),r.$$parserName="email",r.$validators.email=function(t,e){var n=t||e;return r.$isEmpty(n)||la.test(n)}}function Lr(t,e,n,r){var i=!n.ngTrim||"false"!==gi(n.ngTrim);y(n.name)&&e.attr("name",u());var o=function(t){var o;e[0].checked&&(o=n.value,i&&(o=gi(o)),r.$setViewValue(o,t&&t.type))};e.on("click",o),r.$render=function(){var t=n.value;i&&(t=gi(t)),e[0].checked=t===r.$viewValue},n.$observe("value",r.$render)}function qr(t,e,n,r,i){var o;if(b(r)){if(o=t(r),!o.constant)throw Ba("constexpr","Expected constant expression for `{0}`, but saw `{1}`.",n,r);return o(e)}return i}function Fr(t,e,n,r,i,o,a,s){var u=qr(s,t,"ngTrueValue",n.ngTrueValue,!0),c=qr(s,t,"ngFalseValue",n.ngFalseValue,!1),l=function(t){r.$setViewValue(e[0].checked,t&&t.type)};e.on("click",l),r.$render=function(){e[0].checked=r.$viewValue},r.$isEmpty=function(t){return!1===t},r.$formatters.push(function(t){return z(t,u)}),r.$parsers.push(function(t){return t?u:c})}function Br(t,e){function n(t,e){if(!t||!t.length)return[];if(!e||!e.length)return t;var n=[];t:for(var r=0;r<t.length;r++){for(var i=t[r],o=0;o<e.length;o++)if(i===e[o])continue t;n.push(i)}return n}function r(t){return t&&t.split(" ")}function i(t){var e=t;return vi(t)?e=t.map(i).join(" "):w(t)&&(e=Object.keys(t).filter(function(e){return t[e]}).join(" ")),e}function a(t){var e=t;if(vi(t))e=t.map(a);else if(w(t)){var n=!1;e=Object.keys(t).filter(function(e){var r=t[e];return!n&&y(r)&&(n=!0),r}),n&&e.push(void 0)}return e}t="ngClass"+t;var s;return["$parse",function(u){return{restrict:"AC",link:function(c,l,f){function h(t){t=$(r(t),1),f.$addClass(t)}function p(t){t=$(r(t),-1),f.$removeClass(t)}function d(t,e){var i=r(t),o=r(e),a=n(i,o),s=n(o,i),u=$(a,-1),c=$(s,1);f.$addClass(c),f.$removeClass(u)}function $(t,e){var n=[];return o(t,function(t){(e>0||S[t])&&(S[t]=(S[t]||0)+e,S[t]===+(e>0)&&n.push(t))}),n.join(" ")}function v(t){t===e?h(y):p(y),k=t}function m(t){var e=i(t);e!==y&&g(e)}function g(t){k===e&&d(y,t),y=t}var y,b=f[t].trim(),w=":"===b.charAt(0)&&":"===b.charAt(1),x=w?a:i,C=u(b,x),E=w?m:g,S=l.data("$classCounts"),k=!0;S||(S=gt(),l.data("$classCounts",S)),"ngClass"!==t&&(s||(s=u("$index",function(t){return 1&t})),c.$watch(s,v)),c.$watch(C,E,w)}}}]}function Hr(t,e,n,r,i,o,a,s,u){this.$viewValue=Number.NaN,this.$modelValue=Number.NaN,this.$$rawModelValue=void 0,this.$validators={},this.$asyncValidators={},this.$parsers=[],this.$formatters=[],this.$viewChangeListeners=[],this.$untouched=!0,this.$touched=!1,this.$pristine=!0,this.$dirty=!1,this.$valid=!0,this.$invalid=!1,this.$error={},this.$$success={},this.$pending=void 0,this.$name=u(n.name||"",!1)(t),this.$$parentForm=ra,this.$options=Ha,this.$$parsedNgModel=i(n.ngModel),this.$$parsedNgModelAssign=this.$$parsedNgModel.assign,this.$$ngModelGet=this.$$parsedNgModel,this.$$ngModelSet=this.$$parsedNgModelAssign,this.$$pendingDebounce=null,this.$$parserValid=void 0,this.$$currentValidationRunId=0,Object.defineProperty(this,"$$scope",{value:t}),this.$$attr=n,this.$$element=r,this.$$animate=o,this.$$timeout=a,this.$$parse=i,this.$$q=s,this.$$exceptionHandler=e,wr(this),zr(this)}function zr(t){t.$$scope.$watch(function(e){var n=t.$$ngModelGet(e);if(n!==t.$modelValue&&(t.$modelValue===t.$modelValue||n===n)){t.$modelValue=t.$$rawModelValue=n,t.$$parserValid=void 0;for(var r=t.$formatters,i=r.length,o=n;i--;)o=r[i](o);t.$viewValue!==o&&(t.$$updateEmptyClasses(o),t.$viewValue=t.$$lastCommittedViewValue=o,t.$render(),t.$$runValidators(t.$modelValue,t.$viewValue,$))}return n})}function Wr(t){this.$$options=t}function Gr(t,e){o(e,function(e,n){b(t[n])||(t[n]=e)})}function Kr(t,e){t.prop("selected",e),t.attr("selected",e)}var Jr={objectMaxDepth:5},Zr=/^\/(.+)\/([a-z]*)$/,Yr="validity",Qr=Object.prototype.hasOwnProperty,Xr=function(t){return C(t)?t.toLowerCase():t},ti=function(t){return C(t)?t.toUpperCase():t},ei=function(t){return C(t)?t.replace(/[A-Z]/g,function(t){return String.fromCharCode(32|t.charCodeAt(0))}):t},ni=function(t){return C(t)?t.replace(/[a-z]/g,function(t){return String.fromCharCode(-33&t.charCodeAt(0))}):t};"i"!=="I".toLowerCase()&&(Xr=ei,ti=ni);var ri,ii,oi,ai,si=[].slice,ui=[].splice,ci=[].push,li=Object.prototype.toString,fi=Object.getPrototypeOf,hi=r("ng"),pi=t.angular||(t.angular={}),di=0;ri=t.document.documentMode;var $i=Number.isNaN||function(t){return t!==t};$.$inject=[],v.$inject=[];var vi=Array.isArray,mi=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/,gi=function(t){return C(t)?t.trim():t},yi=function(t){return t.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},bi=function(){if(!b(bi.rules)){var e=t.document.querySelector("[ng-csp]")||t.document.querySelector("[data-ng-csp]");if(e){var n=e.getAttribute("ng-csp")||e.getAttribute("data-ng-csp");bi.rules={noUnsafeEval:!n||-1!==n.indexOf("no-unsafe-eval"),noInlineStyle:!n||-1!==n.indexOf("no-inline-style")}}else bi.rules={noUnsafeEval:function(){try{return new Function(""),!1}catch(t){return!0}}(),noInlineStyle:!1}}return bi.rules},wi=function(){if(b(wi.name_))return wi.name_;var e,n,r,i,o=Ci.length;for(n=0;n<o;++n)if(r=Ci[n],e=t.document.querySelector("["+r.replace(":","\\:")+"jq]")){i=e.getAttribute(r+"jq");break}return wi.name_=i},xi=/:/g,Ci=["ng-","data-ng-","ng:","x-ng-"],Ei=function(e){var n=e.currentScript;if(!n)return!0;if(!(n instanceof t.HTMLScriptElement||n instanceof t.SVGScriptElement))return!1;var r=n.attributes;return[r.getNamedItem("src"),r.getNamedItem("href"),r.getNamedItem("xlink:href")].every(function(t){if(!t)return!0;if(!t.value)return!1;var n=e.createElement("a");if(n.href=t.value,e.location.origin===n.origin)return!0;switch(n.protocol){case"http:":case"https:":case"ftp:":case"blob:":case"file:":case"data:":return!0;default:return!1}})}(t.document),Si=/[A-Z]/g,ki=!1,Ai=1,Oi=3,Mi=8,Vi=9,Ti=11,Ni={full:"1.6.6",major:1,minor:6,dot:6,codeName:"interdimensional-cable"};jt.expando="ng339";var Ii=jt.cache={},ji=1;jt._data=function(t){return this.cache[t[this.expando]]||{}};var Di=/-([a-z])/g,Pi=/^-ms-/,_i={mouseleave:"mouseout",mouseenter:"mouseover"},Ri=r("jqLite"),Ui=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,Li=/<|&#?\w+;/,qi=/<([\w:-]+)/,Fi=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,Bi={option:[1,'<select multiple="multiple">',"</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Bi.optgroup=Bi.option,Bi.tbody=Bi.tfoot=Bi.colgroup=Bi.caption=Bi.thead,Bi.th=Bi.td;var Hi=t.Node.prototype.contains||function(t){return!!(16&this.compareDocumentPosition(t))},zi=jt.prototype={ready:Zt,toString:function(){var t=[];return o(this,function(e){t.push(""+e)}),"["+t.join(", ")+"]"},eq:function(t){return ii(t>=0?this[t]:this[this.length+t])},length:0,push:ci,sort:[].sort,splice:[].splice},Wi={};o("multiple,selected,checked,disabled,readOnly,required,open".split(","),function(t){Wi[Xr(t)]=t});var Gi={};o("input,select,option,textarea,button,form,details".split(","),function(t){Gi[t]=!0});var Ki={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern",ngStep:"step"};o({data:Lt,removeData:Rt,hasData:Vt,cleanData:function(t){for(var e=0,n=t.length;e<n;e++)Rt(t[e])}},function(t,e){jt[e]=t}),o({data:Lt,inheritedData:Wt,scope:function(t){return ii.data(t,"$scope")||Wt(t.parentNode||t,["$isolateScope","$scope"])},isolateScope:function(t){return ii.data(t,"$isolateScope")||ii.data(t,"$isolateScopeNoTemplate")},controller:zt,injector:function(t){return Wt(t,"$injector")},removeAttr:function(t,e){t.removeAttribute(e)},hasClass:qt,css:function(t,e,n){if(e=St(e),!b(n))return t.style[e];t.style[e]=n},attr:function(t,e,n){var r,i=t.nodeType;if(i!==Oi&&2!==i&&i!==Mi&&t.getAttribute){var o=Xr(e),a=Wi[o];if(!b(n))return r=t.getAttribute(e),a&&null!==r&&(r=o),null===r?void 0:r;null===n||!1===n&&a?t.removeAttribute(e):t.setAttribute(e,a?o:n)}},prop:function(t,e,n){if(!b(n))return t[e];t[e]=n},text:function(){function t(t,e){if(y(e)){var n=t.nodeType;return n===Ai||n===Oi?t.textContent:""}t.textContent=e}return t.$dv="",t}(),val:function(t,e){if(y(e)){if(t.multiple&&"select"===L(t)){var n=[];return o(t.options,function(t){t.selected&&n.push(t.value||t.text)}),n}return t.value}t.value=e},html:function(t,e){if(y(e))return t.innerHTML;Pt(t,!0),t.innerHTML=e},empty:Gt},function(t,e){jt.prototype[e]=function(e,n){var r,i,o=this.length;if(t!==Gt&&y(2===t.length&&t!==qt&&t!==zt?e:n)){if(w(e)){for(r=0;r<o;r++)if(t===Lt)t(this[r],e);else for(i in e)t(this[r],i,e[i]);return this}for(var a=t.$dv,s=y(a)?Math.min(o,1):o,u=0;u<s;u++){var c=t(this[u],e,n);a=a?a+c:c}return a}for(r=0;r<o;r++)t(this[r],e,n);return this}}),o({removeData:Rt,on:function(t,e,n,r){if(b(r))throw Ri("onargs","jqLite#on() does not support the `selector` or `eventData` parameters");if(Mt(t)){var i=Ut(t,!0),o=i.events,a=i.handle;a||(a=i.handle=Xt(t,o));for(var s=e.indexOf(" ")>=0?e.split(" "):[e],u=s.length,c=function(e,r,i){var s=o[e];s||(s=o[e]=[],s.specialHandlerWrapper=r,"$destroy"===e||i||t.addEventListener(e,a)),s.push(n)};u--;)e=s[u],_i[e]?(c(_i[e],ee),c(e,void 0,!0)):c(e)}},off:_t,one:function(t,e,n){t=ii(t),t.on(e,function r(){t.off(e,n),t.off(e,r)}),t.on(e,n)},replaceWith:function(t,e){var n,r=t.parentNode;Pt(t),o(new jt(e),function(e){n?r.insertBefore(e,n.nextSibling):r.replaceChild(e,t),n=e})},children:function(t){var e=[];return o(t.childNodes,function(t){t.nodeType===Ai&&e.push(t)}),e},contents:function(t){return t.contentDocument||t.childNodes||[]},append:function(t,e){var n=t.nodeType;if(n===Ai||n===Ti){e=new jt(e);for(var r=0,i=e.length;r<i;r++){var o=e[r];t.appendChild(o)}}},prepend:function(t,e){if(t.nodeType===Ai){var n=t.firstChild;o(new jt(e),function(e){t.insertBefore(e,n)})}},wrap:function(t,e){It(t,ii(e).eq(0).clone()[0])},remove:Kt,detach:function(t){Kt(t,!0)},after:function(t,e){var n=t,r=t.parentNode;if(r){e=new jt(e);for(var i=0,o=e.length;i<o;i++){var a=e[i];r.insertBefore(a,n.nextSibling),n=a}}},addClass:Bt,removeClass:Ft,toggleClass:function(t,e,n){e&&o(e.split(" "),function(e){var r=n;y(r)&&(r=!qt(t,e)),(r?Bt:Ft)(t,e)})},parent:function(t){var e=t.parentNode;return e&&e.nodeType!==Ti?e:null},next:function(t){return t.nextElementSibling},find:function(t,e){return t.getElementsByTagName?t.getElementsByTagName(e):[]},clone:Dt,triggerHandler:function(t,e,n){var r,i,a,s=e.type||e,u=Ut(t),c=u&&u.events,l=c&&c[s];l&&(r={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:$,type:s,target:t},e.type&&(r=f(r,e)),i=wt(l),a=n?[r].concat(n):[r],o(i,function(e){r.isImmediatePropagationStopped()||e.apply(t,a)}))}},function(t,e){jt.prototype[e]=function(e,n,r){for(var i,o=0,a=this.length;o<a;o++)y(i)?(i=t(this[o],e,n,r),b(i)&&(i=ii(i))):Ht(i,t(this[o],e,n,r));return b(i)?i:this}}),jt.prototype.bind=jt.prototype.on,jt.prototype.unbind=jt.prototype.off;var Ji=Object.create(null);ie.prototype={_idx:function(t){return t===this._lastKey?this._lastIndex:(this._lastKey=t,this._lastIndex=this._keys.indexOf(t),this._lastIndex)},_transformKey:function(t){return $i(t)?Ji:t},get:function(t){t=this._transformKey(t);var e=this._idx(t);if(-1!==e)return this._values[e]},set:function(t,e){t=this._transformKey(t);var n=this._idx(t);-1===n&&(n=this._lastIndex=this._keys.length),this._keys[n]=t,this._values[n]=e},delete:function(t){t=this._transformKey(t);var e=this._idx(t);return-1!==e&&(this._keys.splice(e,1),this._values.splice(e,1),this._lastKey=NaN,this._lastIndex=-1,!0)}};var Zi=ie,Yi=[function(){this.$get=[function(){return Zi}]}],Qi=/^([^(]+?)=>/,Xi=/^[^(]*\(\s*([^)]*)\)/m,to=/,/,eo=/^\s*(_?)(\S+?)\1\s*$/,no=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/gm,ro=r("$injector");ce.$$annotate=ue;var io=r("$animate"),oo=1,ao=function(){this.$get=$},so=function(){var t=new Zi,e=[];this.$get=["$$AnimateRunner","$rootScope",function(n,r){function i(t,e,n){var r=!1;return e&&(e=C(e)?e.split(" "):vi(e)?e:[],o(e,function(e){e&&(r=!0,t[e]=n)})),r}function a(){o(e,function(e){var n=t.get(e);if(n){var r=pe(e.attr("class")),i="",a="";o(n,function(t,e){t!==!!r[e]&&(t?i+=(i.length?" ":"")+e:a+=(a.length?" ":"")+e)}),o(e,function(t){i&&Bt(t,i),a&&Ft(t,a)}),t.delete(e)}}),e.length=0}function s(n,o,s){var u=t.get(n)||{},c=i(u,o,!0),l=i(u,s,!1);(c||l)&&(t.set(n,u),e.push(n),1===e.length&&r.$$postDigest(a))}return{enabled:$,on:$,off:$,pin:$,push:function(t,e,r,i){i&&i(),r=r||{},r.from&&t.css(r.from),r.to&&t.css(r.to),(r.addClass||r.removeClass)&&s(t,r.addClass,r.removeClass);var o=new n;return o.complete(),o}}}]},uo=["$provide",function(t){var e=this,n=null,r=null;this.$$registeredAnimations=Object.create(null),this.register=function(n,r){if(n&&"."!==n.charAt(0))throw io("notcsel","Expecting class selector starting with '.' got '{0}'.",n);var i=n+"-animation";e.$$registeredAnimations[n.substr(1)]=i,t.factory(i,r)},this.customFilter=function(t){return 1===arguments.length&&(r=A(t)?t:null),r},this.classNameFilter=function(t){if(1===arguments.length&&(n=t instanceof RegExp?t:null)){if(new RegExp("[(\\s|\\/)]ng-animate[(\\s|\\/)]").test(n.toString()))throw n=null,io("nongcls",'$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the "{0}" CSS class.',"ng-animate")}return n},this.$get=["$$animateQueue",function(t){function e(t,e,n){if(n){var r=he(n);!r||r.parentNode||r.previousElementSibling||(n=null)}n?n.after(t):e.prepend(t)}return{on:t.on,off:t.off,pin:t.pin,enabled:t.enabled,cancel:function(t){t.end&&t.end()},enter:function(n,r,i,o){return r=r&&ii(r),i=i&&ii(i),r=r||i.parent(),e(n,r,i),t.push(n,"enter",de(o))},move:function(n,r,i,o){return r=r&&ii(r),i=i&&ii(i),r=r||i.parent(),e(n,r,i),t.push(n,"move",de(o))},leave:function(e,n){return t.push(e,"leave",de(n),function(){e.remove()})},addClass:function(e,n,r){return r=de(r),r.addClass=fe(r.addclass,n),t.push(e,"addClass",r)},removeClass:function(e,n,r){return r=de(r),r.removeClass=fe(r.removeClass,n),t.push(e,"removeClass",r)},setClass:function(e,n,r,i){return i=de(i),i.addClass=fe(i.addClass,n),i.removeClass=fe(i.removeClass,r),t.push(e,"setClass",i)},animate:function(e,n,r,i,o){return o=de(o),o.from=o.from?f(o.from,n):n,o.to=o.to?f(o.to,r):r,i=i||"ng-inline-animate",o.tempClasses=fe(o.tempClasses,i),t.push(e,"animate",o)}}}]}],co=function(){this.$get=["$$rAF",function(t){function e(e){n.push(e),n.length>1||t(function(){for(var t=0;t<n.length;t++)n[t]();n=[]})}var n=[];return function(){var t=!1;return e(function(){t=!0}),function(n){t?n():e(n)}}}]},lo=function(){this.$get=["$q","$sniffer","$$animateAsyncRun","$$isDocumentHidden","$timeout",function(t,e,n,r,i){function a(t){this.setHost(t);var e=n(),o=function(t){i(t,0,!1)};this._doneCallbacks=[],this._tick=function(t){r()?o(t):e(t)},this._state=0}return a.chain=function(t,e){function n(){if(r===t.length)return void e(!0);t[r](function(t){if(!1===t)return void e(!1);r++,n()})}var r=0;n()},a.all=function(t,e){function n(n){i=i&&n,++r===t.length&&e(i)}var r=0,i=!0;o(t,function(t){t.done(n)})},a.prototype={setHost:function(t){this.host=t||{}},done:function(t){2===this._state?t():this._doneCallbacks.push(t)},progress:$,getPromise:function(){if(!this.promise){var e=this;this.promise=t(function(t,n){e.done(function(e){!1===e?n():t()})})}return this.promise},then:function(t,e){return this.getPromise().then(t,e)},catch:function(t){return this.getPromise().catch(t)},finally:function(t){return this.getPromise().finally(t)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&this.host.end(),this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel(),this._resolve(!1)},complete:function(t){var e=this;0===e._state&&(e._state=1,e._tick(function(){e._resolve(t)}))},_resolve:function(t){2!==this._state&&(o(this._doneCallbacks,function(e){e(t)}),this._doneCallbacks.length=0,this._state=2)}},a}]},fo=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(t,e,n){return function(e,r){function i(){return t(function(){o(),s||u.complete(),s=!0}),u}function o(){a.addClass&&(e.addClass(a.addClass),a.addClass=null),a.removeClass&&(e.removeClass(a.removeClass),a.removeClass=null),a.to&&(e.css(a.to),a.to=null)}var a=r||{};a.$$prepared||(a=B(a)),a.cleanupStyles&&(a.from=a.to=null),a.from&&(e.css(a.from),a.from=null);var s,u=new n;return{start:i,end:i}}}]},ho=r("$compile"),po=new ye;be.$inject=["$provide","$$sanitizeUriProvider"],we.prototype.isFirstChange=function(){return this.previousValue===po};var $o=/^((?:x|data)[:\-_])/i,vo=/[:\-_]+(.)/g,mo=r("$controller"),go=/^(\S+)(\s+as\s+([\w$]+))?$/,yo=function(){this.$get=["$document",function(t){return function(e){return e?!e.nodeType&&e instanceof ii&&(e=e[0]):e=t[0].body,e.offsetWidth+1}}]},bo="application/json",wo={"Content-Type":bo+";charset=utf-8"},xo=/^\[|^\{(?!\{)/,Co={"[":/]$/,"{":/}$/},Eo=/^\)]\}',?\n/,So=r("$http"),ko=pi.$interpolateMinErr=r("$interpolate");ko.throwNoconcat=function(t){throw ko("noconcat","Error while interpolating: {0}\nStrict Contextual Escaping disallows interpolations that concatenate multiple expressions when a trusted value is required.  See http://docs.angularjs.org/api/ng.$sce",t)},ko.interr=function(t,e){return ko("interr","Can't interpolate: {0}\n{1}",t,e.toString())};var Ao=function(){this.$get=function(){function t(t){var e=function(t){e.data=t,e.called=!0};return e.id=t,e}var e=pi.callbacks,n={};return{createCallback:function(r){var i="_"+(e.$$counter++).toString(36),o="angular.callbacks."+i,a=t(i);return n[o]=e[i]=a,o},wasCalled:function(t){return n[t].called},getResponse:function(t){return n[t].data},removeCallback:function(t){var r=n[t];delete e[r.id],delete n[t]}}}},Oo=/^([^?#]*)(\?([^#]*))?(#(.*))?$/,Mo={http:80,https:443,ftp:21},Vo=r("$location"),To=/^\s*[\\\/]{2,}/,No={$$absUrl:"",$$html5:!1,$$replace:!1,absUrl:rn("$$absUrl"),url:function(t){if(y(t))return this.$$url;var e=Oo.exec(t);return(e[1]||""===t)&&this.path(decodeURIComponent(e[1])),(e[2]||e[1]||""===t)&&this.search(e[3]||""),this.hash(e[5]||""),this},protocol:rn("$$protocol"),host:rn("$$host"),port:rn("$$port"),path:on("$$path",function(t){return t=null!==t?t.toString():"","/"===t.charAt(0)?t:"/"+t}),search:function(t,e){switch(arguments.length){case 0:return this.$$search;case 1:if(C(t)||E(t))t=t.toString(),this.$$search=rt(t);else{if(!w(t))throw Vo("isrcharg","The first argument of the `$location#search()` call must be a string or an object.");t=B(t,{}),o(t,function(e,n){null==e&&delete t[n]}),this.$$search=t}break;default:y(e)||null===e?delete this.$$search[t]:this.$$search[t]=e}return this.$$compose(),this},hash:on("$$hash",function(t){return null!==t?t.toString():""}),replace:function(){return this.$$replace=!0,this}};o([nn,en,tn],function(t){t.prototype=Object.create(No),t.prototype.state=function(e){if(!arguments.length)return this.$$state;if(t!==tn||!this.$$html5)throw Vo("nostate","History API state support is available only in HTML5 mode and only in browsers supporting HTML5 History API");return this.$$state=y(e)?null:e,this.$$urlUpdatedByLocation=!0,this}});var Io=r("$parse"),jo={}.constructor.prototype.valueOf,Do=gt();o("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(t){Do[t]=!0});var Po={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v","'":"'",'"':'"'},_o=function(t){this.options=t};_o.prototype={constructor:_o,lex:function(t){for(this.text=t,this.index=0,this.tokens=[];this.index<this.text.length;){var e=this.text.charAt(this.index);if('"'===e||"'"===e)this.readString(e);else if(this.isNumber(e)||"."===e&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(e,"(){}[].,;:?"))this.tokens.push({index:this.index,text:e}),this.index++;else if(this.isWhitespace(e))this.index++;else{var n=e+this.peek(),r=n+this.peek(2),i=Do[e],o=Do[n],a=Do[r];if(i||o||a){var s=a?r:o?n:e;this.tokens.push({index:this.index,text:s,operator:!0}),this.index+=s.length}else this.throwError("Unexpected next character ",this.index,this.index+1)}}return this.tokens},is:function(t,e){return-1!==e.indexOf(t)},peek:function(t){var e=t||1;return this.index+e<this.text.length&&this.text.charAt(this.index+e)},isNumber:function(t){return"0"<=t&&t<="9"&&"string"==typeof t},isWhitespace:function(t){return" "===t||"\r"===t||"\t"===t||"\n"===t||"\v"===t||" "===t},isIdentifierStart:function(t){return this.options.isIdentifierStart?this.options.isIdentifierStart(t,this.codePointAt(t)):this.isValidIdentifierStart(t)},isValidIdentifierStart:function(t){return"a"<=t&&t<="z"||"A"<=t&&t<="Z"||"_"===t||"$"===t},isIdentifierContinue:function(t){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(t,this.codePointAt(t)):this.isValidIdentifierContinue(t)},isValidIdentifierContinue:function(t,e){return this.isValidIdentifierStart(t,e)||this.isNumber(t)},codePointAt:function(t){return 1===t.length?t.charCodeAt(0):(t.charCodeAt(0)<<10)+t.charCodeAt(1)-56613888},peekMultichar:function(){var t=this.text.charAt(this.index),e=this.peek();if(!e)return t;var n=t.charCodeAt(0),r=e.charCodeAt(0);return n>=55296&&n<=56319&&r>=56320&&r<=57343?t+e:t},isExpOperator:function(t){return"-"===t||"+"===t||this.isNumber(t)},throwError:function(t,e,n){n=n||this.index;var r=b(e)?"s "+e+"-"+this.index+" ["+this.text.substring(e,n)+"]":" "+n;throw Io("lexerr","Lexer Error: {0} at column{1} in expression [{2}].",t,r,this.text)},readNumber:function(){for(var t="",e=this.index;this.index<this.text.length;){var n=Xr(this.text.charAt(this.index));if("."===n||this.isNumber(n))t+=n;else{var r=this.peek();if("e"===n&&this.isExpOperator(r))t+=n;else if(this.isExpOperator(n)&&r&&this.isNumber(r)&&"e"===t.charAt(t.length-1))t+=n;else{if(!this.isExpOperator(n)||r&&this.isNumber(r)||"e"!==t.charAt(t.length-1))break;this.throwError("Invalid exponent")}}this.index++}this.tokens.push({index:e,text:t,constant:!0,value:Number(t)})},readIdent:function(){var t=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var e=this.peekMultichar();if(!this.isIdentifierContinue(e))break;this.index+=e.length}this.tokens.push({index:t,text:this.text.slice(t,this.index),identifier:!0})},readString:function(t){var e=this.index;this.index++;for(var n="",r=t,i=!1;this.index<this.text.length;){var o=this.text.charAt(this.index);if(r+=o,i){if("u"===o){var a=this.text.substring(this.index+1,this.index+5);a.match(/[\da-f]{4}/i)||this.throwError("Invalid unicode escape [\\u"+a+"]"),this.index+=4,n+=String.fromCharCode(parseInt(a,16))}else{n+=Po[o]||o}i=!1}else if("\\"===o)i=!0;else{if(o===t)return this.index++,void this.tokens.push({index:e,text:r,constant:!0,value:n});n+=o}this.index++}this.throwError("Unterminated quote",e)}};var Ro=function(t,e){this.lexer=t,this.options=e};Ro.Program="Program",Ro.ExpressionStatement="ExpressionStatement",Ro.AssignmentExpression="AssignmentExpression",Ro.ConditionalExpression="ConditionalExpression",Ro.LogicalExpression="LogicalExpression",Ro.BinaryExpression="BinaryExpression",Ro.UnaryExpression="UnaryExpression",Ro.CallExpression="CallExpression",Ro.MemberExpression="MemberExpression",Ro.Identifier="Identifier",Ro.Literal="Literal",Ro.ArrayExpression="ArrayExpression",Ro.Property="Property",Ro.ObjectExpression="ObjectExpression",Ro.ThisExpression="ThisExpression",Ro.LocalsExpression="LocalsExpression",Ro.NGValueParameter="NGValueParameter",Ro.prototype={ast:function(t){this.text=t,this.tokens=this.lexer.lex(t);var e=this.program();return 0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]),e},program:function(){for(var t=[];;)if(this.tokens.length>0&&!this.peek("}",")",";","]")&&t.push(this.expressionStatement()),!this.expect(";"))return{type:Ro.Program,body:t}},expressionStatement:function(){return{type:Ro.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var t=this.expression();this.expect("|");)t=this.filter(t);return t},expression:function(){return this.assignment()},assignment:function(){var t=this.ternary();if(this.expect("=")){if(!$n(t))throw Io("lval","Trying to assign a value to a non l-value");t={type:Ro.AssignmentExpression,left:t,right:this.assignment(),operator:"="}}return t},ternary:function(){var t,e,n=this.logicalOR();return this.expect("?")&&(t=this.expression(),this.consume(":"))?(e=this.expression(),{type:Ro.ConditionalExpression,test:n,alternate:t,consequent:e}):n},logicalOR:function(){for(var t=this.logicalAND();this.expect("||");)t={type:Ro.LogicalExpression,operator:"||",left:t,right:this.logicalAND()};return t},logicalAND:function(){for(var t=this.equality();this.expect("&&");)t={type:Ro.LogicalExpression,operator:"&&",left:t,right:this.equality()};return t},equality:function(){for(var t,e=this.relational();t=this.expect("==","!=","===","!==");)e={type:Ro.BinaryExpression,operator:t.text,left:e,right:this.relational()};return e},relational:function(){for(var t,e=this.additive();t=this.expect("<",">","<=",">=");)e={type:Ro.BinaryExpression,operator:t.text,left:e,right:this.additive()};return e},additive:function(){for(var t,e=this.multiplicative();t=this.expect("+","-");)e={type:Ro.BinaryExpression,operator:t.text,left:e,right:this.multiplicative()};return e},multiplicative:function(){for(var t,e=this.unary();t=this.expect("*","/","%");)e={type:Ro.BinaryExpression,operator:t.text,left:e,right:this.unary()};return e},unary:function(){var t;return(t=this.expect("+","-","!"))?{type:Ro.UnaryExpression,operator:t.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var t;this.expect("(")?(t=this.filterChain(),this.consume(")")):this.expect("[")?t=this.arrayDeclaration():this.expect("{")?t=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?t=B(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?t={type:Ro.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?t=this.identifier():this.peek().constant?t=this.constant():this.throwError("not a primary expression",this.peek());for(var e;e=this.expect("(","[",".");)"("===e.text?(t={type:Ro.CallExpression,callee:t,arguments:this.parseArguments()},this.consume(")")):"["===e.text?(t={type:Ro.MemberExpression,object:t,property:this.expression(),computed:!0},this.consume("]")):"."===e.text?t={type:Ro.MemberExpression,object:t,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return t},filter:function(t){for(var e=[t],n={type:Ro.CallExpression,callee:this.identifier(),arguments:e,filter:!0};this.expect(":");)e.push(this.expression());return n},parseArguments:function(){var t=[];if(")"!==this.peekToken().text)do{t.push(this.filterChain())}while(this.expect(","));return t},identifier:function(){var t=this.consume();return t.identifier||this.throwError("is not a valid identifier",t),{type:Ro.Identifier,name:t.text}},constant:function(){return{type:Ro.Literal,value:this.consume().value}},arrayDeclaration:function(){var t=[];if("]"!==this.peekToken().text)do{if(this.peek("]"))break;t.push(this.expression())}while(this.expect(","));return this.consume("]"),{type:Ro.ArrayExpression,elements:t}},object:function(){var t,e=[];if("}"!==this.peekToken().text)do{if(this.peek("}"))break;t={type:Ro.Property,kind:"init"},this.peek().constant?(t.key=this.constant(),t.computed=!1,this.consume(":"),t.value=this.expression()):this.peek().identifier?(t.key=this.identifier(),t.computed=!1,this.peek(":")?(this.consume(":"),t.value=this.expression()):t.value=t.key):this.peek("[")?(this.consume("["),t.key=this.expression(),this.consume("]"),t.computed=!0,this.consume(":"),t.value=this.expression()):this.throwError("invalid key",this.peek()),e.push(t)}while(this.expect(","));return this.consume("}"),{type:Ro.ObjectExpression,properties:e}},throwError:function(t,e){throw Io("syntax","Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].",e.text,t,e.index+1,this.text,this.text.substring(e.index))},consume:function(t){if(0===this.tokens.length)throw Io("ueoe","Unexpected end of expression: {0}",this.text);var e=this.expect(t);return e||this.throwError("is unexpected, expecting ["+t+"]",this.peek()),e},peekToken:function(){if(0===this.tokens.length)throw Io("ueoe","Unexpected end of expression: {0}",this.text);return this.tokens[0]},peek:function(t,e,n,r){return this.peekAhead(0,t,e,n,r)},peekAhead:function(t,e,n,r,i){if(this.tokens.length>t){var o=this.tokens[t],a=o.text;if(a===e||a===n||a===r||a===i||!e&&!n&&!r&&!i)return o}return!1},expect:function(t,e,n,r){var i=this.peek(t,e,n,r);return!!i&&(this.tokens.shift(),i)},selfReferential:{this:{type:Ro.ThisExpression},$locals:{type:Ro.LocalsExpression}}};var Uo=1,Lo=2;yn.prototype={compile:function(t){
var e=this;this.state={nextId:0,filters:{},fn:{vars:[],body:[],own:{}},assign:{vars:[],body:[],own:{}},inputs:[]},pn(t,e.$filter);var n,r="";if(this.stage="assign",n=vn(t)){this.state.computing="assign";var i=this.nextId();this.recurse(n,i),this.return_(i),r="fn.assign="+this.generateFunction("assign","s,v,l")}var a=dn(t.body);e.stage="inputs",o(a,function(t,n){var r="fn"+n;e.state[r]={vars:[],body:[],own:{}},e.state.computing=r;var i=e.nextId();e.recurse(t,i),e.return_(i),e.state.inputs.push({name:r,isPure:t.isPure}),t.watchId=n}),this.state.computing="fn",this.stage="main",this.recurse(t);var s='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+r+this.watchFns()+"return fn;",u=new Function("$filter","getStringValue","ifDefined","plus",s)(this.$filter,un,cn,ln);return this.state=this.stage=void 0,u},USE:"use",STRICT:"strict",watchFns:function(){var t=[],e=this.state.inputs,n=this;return o(e,function(e){t.push("var "+e.name+"="+n.generateFunction(e.name,"s")),e.isPure&&t.push(e.name,".isPure="+JSON.stringify(e.isPure)+";")}),e.length&&t.push("fn.inputs=["+e.map(function(t){return t.name}).join(",")+"];"),t.join("")},generateFunction:function(t,e){return"function("+e+"){"+this.varsPrefix(t)+this.body(t)+"};"},filterPrefix:function(){var t=[],e=this;return o(this.state.filters,function(n,r){t.push(n+"=$filter("+e.escape(r)+")")}),t.length?"var "+t.join(",")+";":""},varsPrefix:function(t){return this.state[t].vars.length?"var "+this.state[t].vars.join(",")+";":""},body:function(t){return this.state[t].body.join("")},recurse:function(t,e,n,r,i,a){var s,u,c,l,f,h=this;if(r=r||$,!a&&b(t.watchId))return e=e||this.nextId(),void this.if_("i",this.lazyAssign(e,this.computedMember("i",t.watchId)),this.lazyRecurse(t,e,n,r,i,!0));switch(t.type){case Ro.Program:o(t.body,function(e,n){h.recurse(e.expression,void 0,void 0,function(t){u=t}),n!==t.body.length-1?h.current().body.push(u,";"):h.return_(u)});break;case Ro.Literal:l=this.escape(t.value),this.assign(e,l),r(e||l);break;case Ro.UnaryExpression:this.recurse(t.argument,void 0,void 0,function(t){u=t}),l=t.operator+"("+this.ifDefined(u,0)+")",this.assign(e,l),r(l);break;case Ro.BinaryExpression:this.recurse(t.left,void 0,void 0,function(t){s=t}),this.recurse(t.right,void 0,void 0,function(t){u=t}),l="+"===t.operator?this.plus(s,u):"-"===t.operator?this.ifDefined(s,0)+t.operator+this.ifDefined(u,0):"("+s+")"+t.operator+"("+u+")",this.assign(e,l),r(l);break;case Ro.LogicalExpression:e=e||this.nextId(),h.recurse(t.left,e),h.if_("&&"===t.operator?e:h.not(e),h.lazyRecurse(t.right,e)),r(e);break;case Ro.ConditionalExpression:e=e||this.nextId(),h.recurse(t.test,e),h.if_(e,h.lazyRecurse(t.alternate,e),h.lazyRecurse(t.consequent,e)),r(e);break;case Ro.Identifier:e=e||this.nextId(),n&&(n.context="inputs"===h.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",t.name)+"?l:s"),n.computed=!1,n.name=t.name),h.if_("inputs"===h.stage||h.not(h.getHasOwnProperty("l",t.name)),function(){h.if_("inputs"===h.stage||"s",function(){i&&1!==i&&h.if_(h.isNull(h.nonComputedMember("s",t.name)),h.lazyAssign(h.nonComputedMember("s",t.name),"{}")),h.assign(e,h.nonComputedMember("s",t.name))})},e&&h.lazyAssign(e,h.nonComputedMember("l",t.name))),r(e);break;case Ro.MemberExpression:s=n&&(n.context=this.nextId())||this.nextId(),e=e||this.nextId(),h.recurse(t.object,s,void 0,function(){h.if_(h.notNull(s),function(){t.computed?(u=h.nextId(),h.recurse(t.property,u),h.getStringValue(u),i&&1!==i&&h.if_(h.not(h.computedMember(s,u)),h.lazyAssign(h.computedMember(s,u),"{}")),l=h.computedMember(s,u),h.assign(e,l),n&&(n.computed=!0,n.name=u)):(i&&1!==i&&h.if_(h.isNull(h.nonComputedMember(s,t.property.name)),h.lazyAssign(h.nonComputedMember(s,t.property.name),"{}")),l=h.nonComputedMember(s,t.property.name),h.assign(e,l),n&&(n.computed=!1,n.name=t.property.name))},function(){h.assign(e,"undefined")}),r(e)},!!i);break;case Ro.CallExpression:e=e||this.nextId(),t.filter?(u=h.filter(t.callee.name),c=[],o(t.arguments,function(t){var e=h.nextId();h.recurse(t,e),c.push(e)}),l=u+"("+c.join(",")+")",h.assign(e,l),r(e)):(u=h.nextId(),s={},c=[],h.recurse(t.callee,u,s,function(){h.if_(h.notNull(u),function(){o(t.arguments,function(e){h.recurse(e,t.constant?void 0:h.nextId(),void 0,function(t){c.push(t)})}),l=s.name?h.member(s.context,s.name,s.computed)+"("+c.join(",")+")":u+"("+c.join(",")+")",h.assign(e,l)},function(){h.assign(e,"undefined")}),r(e)}));break;case Ro.AssignmentExpression:u=this.nextId(),s={},this.recurse(t.left,void 0,s,function(){h.if_(h.notNull(s.context),function(){h.recurse(t.right,u),l=h.member(s.context,s.name,s.computed)+t.operator+u,h.assign(e,l),r(e||l)})},1);break;case Ro.ArrayExpression:c=[],o(t.elements,function(e){h.recurse(e,t.constant?void 0:h.nextId(),void 0,function(t){c.push(t)})}),l="["+c.join(",")+"]",this.assign(e,l),r(e||l);break;case Ro.ObjectExpression:c=[],f=!1,o(t.properties,function(t){t.computed&&(f=!0)}),f?(e=e||this.nextId(),this.assign(e,"{}"),o(t.properties,function(t){t.computed?(s=h.nextId(),h.recurse(t.key,s)):s=t.key.type===Ro.Identifier?t.key.name:""+t.key.value,u=h.nextId(),h.recurse(t.value,u),h.assign(h.member(e,s,t.computed),u)})):(o(t.properties,function(e){h.recurse(e.value,t.constant?void 0:h.nextId(),void 0,function(t){c.push(h.escape(e.key.type===Ro.Identifier?e.key.name:""+e.key.value)+":"+t)})}),l="{"+c.join(",")+"}",this.assign(e,l)),r(e||l);break;case Ro.ThisExpression:this.assign(e,"s"),r(e||"s");break;case Ro.LocalsExpression:this.assign(e,"l"),r(e||"l");break;case Ro.NGValueParameter:this.assign(e,"v"),r(e||"v")}},getHasOwnProperty:function(t,e){var n=t+"."+e,r=this.current().own;return r.hasOwnProperty(n)||(r[n]=this.nextId(!1,t+"&&("+this.escape(e)+" in "+t+")")),r[n]},assign:function(t,e){if(t)return this.current().body.push(t,"=",e,";"),t},filter:function(t){return this.state.filters.hasOwnProperty(t)||(this.state.filters[t]=this.nextId(!0)),this.state.filters[t]},ifDefined:function(t,e){return"ifDefined("+t+","+this.escape(e)+")"},plus:function(t,e){return"plus("+t+","+e+")"},return_:function(t){this.current().body.push("return ",t,";")},if_:function(t,e,n){if(!0===t)e();else{var r=this.current().body;r.push("if(",t,"){"),e(),r.push("}"),n&&(r.push("else{"),n(),r.push("}"))}},not:function(t){return"!("+t+")"},isNull:function(t){return t+"==null"},notNull:function(t){return t+"!=null"},nonComputedMember:function(t,e){var n=/^[$_a-zA-Z][$_a-zA-Z0-9]*$/,r=/[^$_a-zA-Z0-9]/g;return n.test(e)?t+"."+e:t+'["'+e.replace(r,this.stringEscapeFn)+'"]'},computedMember:function(t,e){return t+"["+e+"]"},member:function(t,e,n){return n?this.computedMember(t,e):this.nonComputedMember(t,e)},getStringValue:function(t){this.assign(t,"getStringValue("+t+")")},lazyRecurse:function(t,e,n,r,i,o){var a=this;return function(){a.recurse(t,e,n,r,i,o)}},lazyAssign:function(t,e){var n=this;return function(){n.assign(t,e)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(t){return"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)},escape:function(t){if(C(t))return"'"+t.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(E(t))return t.toString();if(!0===t)return"true";if(!1===t)return"false";if(null===t)return"null";if(void 0===t)return"undefined";throw Io("esc","IMPOSSIBLE")},nextId:function(t,e){var n="v"+this.state.nextId++;return t||this.current().vars.push(n+(e?"="+e:"")),n},current:function(){return this.state[this.state.computing]}},bn.prototype={compile:function(t){var e=this;pn(t,e.$filter);var n,r;(n=vn(t))&&(r=this.recurse(n));var i,a=dn(t.body);a&&(i=[],o(a,function(t,n){var r=e.recurse(t);r.isPure=t.isPure,t.input=r,i.push(r),t.watchId=n}));var s=[];o(t.body,function(t){s.push(e.recurse(t.expression))});var u=0===t.body.length?$:1===t.body.length?s[0]:function(t,e){var n;return o(s,function(r){n=r(t,e)}),n};return r&&(u.assign=function(t,e,n){return r(t,n,e)}),i&&(u.inputs=i),u},recurse:function(t,e,n){var r,i,a,s=this;if(t.input)return this.inputs(t.input,t.watchId);switch(t.type){case Ro.Literal:return this.value(t.value,e);case Ro.UnaryExpression:return i=this.recurse(t.argument),this["unary"+t.operator](i,e);case Ro.BinaryExpression:case Ro.LogicalExpression:return r=this.recurse(t.left),i=this.recurse(t.right),this["binary"+t.operator](r,i,e);case Ro.ConditionalExpression:return this["ternary?:"](this.recurse(t.test),this.recurse(t.alternate),this.recurse(t.consequent),e);case Ro.Identifier:return s.identifier(t.name,e,n);case Ro.MemberExpression:return r=this.recurse(t.object,!1,!!n),t.computed||(i=t.property.name),t.computed&&(i=this.recurse(t.property)),t.computed?this.computedMember(r,i,e,n):this.nonComputedMember(r,i,e,n);case Ro.CallExpression:return a=[],o(t.arguments,function(t){a.push(s.recurse(t))}),t.filter&&(i=this.$filter(t.callee.name)),t.filter||(i=this.recurse(t.callee,!0)),t.filter?function(t,n,r,o){for(var s=[],u=0;u<a.length;++u)s.push(a[u](t,n,r,o));var c=i.apply(void 0,s,o);return e?{context:void 0,name:void 0,value:c}:c}:function(t,n,r,o){var s,u=i(t,n,r,o);if(null!=u.value){for(var c=[],l=0;l<a.length;++l)c.push(a[l](t,n,r,o));s=u.value.apply(u.context,c)}return e?{value:s}:s};case Ro.AssignmentExpression:return r=this.recurse(t.left,!0,1),i=this.recurse(t.right),function(t,n,o,a){var s=r(t,n,o,a),u=i(t,n,o,a);return s.context[s.name]=u,e?{value:u}:u};case Ro.ArrayExpression:return a=[],o(t.elements,function(t){a.push(s.recurse(t))}),function(t,n,r,i){for(var o=[],s=0;s<a.length;++s)o.push(a[s](t,n,r,i));return e?{value:o}:o};case Ro.ObjectExpression:return a=[],o(t.properties,function(t){t.computed?a.push({key:s.recurse(t.key),computed:!0,value:s.recurse(t.value)}):a.push({key:t.key.type===Ro.Identifier?t.key.name:""+t.key.value,computed:!1,value:s.recurse(t.value)})}),function(t,n,r,i){for(var o={},s=0;s<a.length;++s)a[s].computed?o[a[s].key(t,n,r,i)]=a[s].value(t,n,r,i):o[a[s].key]=a[s].value(t,n,r,i);return e?{value:o}:o};case Ro.ThisExpression:return function(t){return e?{value:t}:t};case Ro.LocalsExpression:return function(t,n){return e?{value:n}:n};case Ro.NGValueParameter:return function(t,n,r){return e?{value:r}:r}}},"unary+":function(t,e){return function(n,r,i,o){var a=t(n,r,i,o);return a=b(a)?+a:0,e?{value:a}:a}},"unary-":function(t,e){return function(n,r,i,o){var a=t(n,r,i,o);return a=b(a)?-a:-0,e?{value:a}:a}},"unary!":function(t,e){return function(n,r,i,o){var a=!t(n,r,i,o);return e?{value:a}:a}},"binary+":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a),u=e(r,i,o,a),c=ln(s,u);return n?{value:c}:c}},"binary-":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a),u=e(r,i,o,a),c=(b(s)?s:0)-(b(u)?u:0);return n?{value:c}:c}},"binary*":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)*e(r,i,o,a);return n?{value:s}:s}},"binary/":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)/e(r,i,o,a);return n?{value:s}:s}},"binary%":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)%e(r,i,o,a);return n?{value:s}:s}},"binary===":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)===e(r,i,o,a);return n?{value:s}:s}},"binary!==":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)!==e(r,i,o,a);return n?{value:s}:s}},"binary==":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)==e(r,i,o,a);return n?{value:s}:s}},"binary!=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)!=e(r,i,o,a);return n?{value:s}:s}},"binary<":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)<e(r,i,o,a);return n?{value:s}:s}},"binary>":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)>e(r,i,o,a);return n?{value:s}:s}},"binary<=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)<=e(r,i,o,a);return n?{value:s}:s}},"binary>=":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)>=e(r,i,o,a);return n?{value:s}:s}},"binary&&":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)&&e(r,i,o,a);return n?{value:s}:s}},"binary||":function(t,e,n){return function(r,i,o,a){var s=t(r,i,o,a)||e(r,i,o,a);return n?{value:s}:s}},"ternary?:":function(t,e,n,r){return function(i,o,a,s){var u=t(i,o,a,s)?e(i,o,a,s):n(i,o,a,s);return r?{value:u}:u}},value:function(t,e){return function(){return e?{context:void 0,name:void 0,value:t}:t}},identifier:function(t,e,n){return function(r,i,o,a){var s=i&&t in i?i:r;n&&1!==n&&s&&null==s[t]&&(s[t]={});var u=s?s[t]:void 0;return e?{context:s,name:t,value:u}:u}},computedMember:function(t,e,n,r){return function(i,o,a,s){var u,c,l=t(i,o,a,s);return null!=l&&(u=e(i,o,a,s),u=un(u),r&&1!==r&&l&&!l[u]&&(l[u]={}),c=l[u]),n?{context:l,name:u,value:c}:c}},nonComputedMember:function(t,e,n,r){return function(i,o,a,s){var u=t(i,o,a,s);r&&1!==r&&u&&null==u[e]&&(u[e]={});var c=null!=u?u[e]:void 0;return n?{context:u,name:e,value:c}:c}},inputs:function(t,e){return function(n,r,i,o){return o?o[e]:t(n,r,i)}}},wn.prototype={constructor:wn,parse:function(t){var e=this.ast.ast(t),n=this.astCompiler.compile(e);return n.literal=mn(e),n.constant=gn(e),n}};var qo=r("$sce"),Fo={HTML:"html",CSS:"css",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Bo=/_([a-z])/g,Ho=r("$compile"),zo=t.document.createElement("a"),Wo=Fn(t.location.href);zn.$inject=["$document"],Gn.$inject=["$provide"];var Go=22,Ko=".",Jo="0";Qn.$inject=["$locale"],Xn.$inject=["$locale"];var Zo={yyyy:ir("FullYear",4,0,!1,!0),yy:ir("FullYear",2,0,!0,!0),y:ir("FullYear",1,0,!1,!0),MMMM:or("Month"),MMM:or("Month",!0),MM:ir("Month",2,1),M:ir("Month",1,1),LLLL:or("Month",!1,!0),dd:ir("Date",2),d:ir("Date",1),HH:ir("Hours",2),H:ir("Hours",1),hh:ir("Hours",2,-12),h:ir("Hours",1,-12),mm:ir("Minutes",2),m:ir("Minutes",1),ss:ir("Seconds",2),s:ir("Seconds",1),sss:ir("Milliseconds",3),EEEE:or("Day"),EEE:or("Day",!0),a:lr,Z:ar,ww:cr(2),w:cr(1),G:fr,GG:fr,GGG:fr,GGGG:hr},Yo=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/,Qo=/^-?\d+$/;pr.$inject=["$locale"];var Xo=m(Xr),ta=m(ti);mr.$inject=["$parse"];var ea=m({restrict:"E",compile:function(t,e){if(!e.href&&!e.xlinkHref)return function(t,e){if("a"===e[0].nodeName.toLowerCase()){var n="[object SVGAnimatedString]"===li.call(e.prop("href"))?"xlink:href":"href";e.on("click",function(t){e.attr(n)||t.preventDefault()})}}}}),na={};o(Wi,function(t,e){function n(t,n,i){t.$watch(i[r],function(t){i.$set(e,!!t)})}if("multiple"!==t){var r=xe("ng-"+e),i=n;"checked"===t&&(i=function(t,e,i){i.ngModel!==i[r]&&n(t,e,i)}),na[r]=function(){return{restrict:"A",priority:100,link:i}}}}),o(Ki,function(t,e){na[e]=function(){return{priority:100,link:function(t,n,r){if("ngPattern"===e&&"/"===r.ngPattern.charAt(0)){var i=r.ngPattern.match(Zr);if(i)return void r.$set("ngPattern",new RegExp(i[1],i[2]))}t.$watch(r[e],function(t){r.$set(e,t)})}}}}),o(["src","srcset","href"],function(t){var e=xe("ng-"+t);na[e]=function(){return{priority:99,link:function(n,r,i){var o=t,a=t;"href"===t&&"[object SVGAnimatedString]"===li.call(r.prop("href"))&&(a="xlinkHref",i.$attr[a]="xlink:href",o=null),i.$observe(e,function(e){if(!e)return void("href"===t&&i.$set(a,null));i.$set(a,e),ri&&o&&r.prop(o,i[a])})}}}});var ra={$addControl:$,$$renameControl:yr,$removeControl:$,$setValidity:$,$setDirty:$,$setPristine:$,$setSubmitted:$},ia="ng-pending";br.$inject=["$element","$attrs","$scope","$animate","$interpolate"],br.prototype={$rollbackViewValue:function(){o(this.$$controls,function(t){t.$rollbackViewValue()})},$commitViewValue:function(){o(this.$$controls,function(t){t.$commitViewValue()})},$addControl:function(t){$t(t.$name,"input"),this.$$controls.push(t),t.$name&&(this[t.$name]=t),t.$$parentForm=this},$$renameControl:function(t,e){var n=t.$name;this[n]===t&&delete this[n],this[e]=t,t.$name=e},$removeControl:function(t){t.$name&&this[t.$name]===t&&delete this[t.$name],o(this.$pending,function(e,n){this.$setValidity(n,null,t)},this),o(this.$error,function(e,n){this.$setValidity(n,null,t)},this),o(this.$$success,function(e,n){this.$setValidity(n,null,t)},this),F(this.$$controls,t),t.$$parentForm=ra},$setDirty:function(){this.$$animate.removeClass(this.$$element,qa),this.$$animate.addClass(this.$$element,Fa),this.$dirty=!0,this.$pristine=!1,this.$$parentForm.$setDirty()},$setPristine:function(){this.$$animate.setClass(this.$$element,qa,Fa+" ng-submitted"),this.$dirty=!1,this.$pristine=!0,this.$submitted=!1,o(this.$$controls,function(t){t.$setPristine()})},$setUntouched:function(){o(this.$$controls,function(t){t.$setUntouched()})},$setSubmitted:function(){this.$$animate.addClass(this.$$element,"ng-submitted"),this.$submitted=!0,this.$$parentForm.$setSubmitted()}},xr({clazz:br,set:function(t,e,n){var r=t[e];if(r){-1===r.indexOf(n)&&r.push(n)}else t[e]=[n]},unset:function(t,e,n){var r=t[e];r&&(F(r,n),0===r.length&&delete t[e])}});var oa=function(t){return["$timeout","$parse",function(e,n){function r(t){return""===t?n('this[""]').assign:n(t).assign||$}return{name:"form",restrict:t?"EAC":"E",require:["form","^^?form"],controller:br,compile:function(n,i){n.addClass(qa).addClass(Ua);var o=i.name?"name":!(!t||!i.ngForm)&&"ngForm";return{pre:function(t,n,i,a){var s=a[0];if(!("action"in i)){var u=function(e){t.$apply(function(){s.$commitViewValue(),s.$setSubmitted()}),e.preventDefault()};n[0].addEventListener("submit",u),n.on("$destroy",function(){e(function(){n[0].removeEventListener("submit",u)},0,!1)})}(a[1]||s.$$parentForm).$addControl(s);var c=o?r(s.$name):$;o&&(c(t,s),i.$observe(o,function(e){s.$name!==e&&(c(t,void 0),s.$$parentForm.$$renameControl(s,e),(c=r(s.$name))(t,s))})),n.on("$destroy",function(){s.$$parentForm.$removeControl(s),c(t,void 0),f(s,ra)})}}}}}]},aa=oa(),sa=oa(!0),ua=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,ca=/^[a-z][a-z\d.+-]*:\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\s:\/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,la=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+\/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/,fa=/^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,ha=/^(\d{4,})-(\d{2})-(\d{2})$/,pa=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,da=/^(\d{4,})-W(\d\d)$/,$a=/^(\d{4,})-(\d\d)$/,va=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,ma="keydown wheel mousedown",ga=gt();o("date,datetime-local,month,time,week".split(","),function(t){ga[t]=!0});var ya={text:Sr,date:Mr("date",ha,Or(ha,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":Mr("datetimelocal",pa,Or(pa,["yyyy","MM","dd","HH","mm","ss","sss"]),"yyyy-MM-ddTHH:mm:ss.sss"),time:Mr("time",va,Or(va,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:Mr("week",da,Ar,"yyyy-Www"),month:Mr("month",$a,Or($a,["yyyy","MM"]),"yyyy-MM"),number:Pr,url:Rr,email:Ur,radio:Lr,range:_r,checkbox:Fr,hidden:$,button:$,submit:$,reset:$,file:$},ba=["$browser","$sniffer","$filter","$parse",function(t,e,n,r){return{restrict:"E",require:["?ngModel"],link:{pre:function(i,o,a,s){s[0]&&(ya[Xr(a.type)]||ya.text)(i,o,a,s[0],e,t,n,r)}}}}],wa=/^(true|false|\d+)$/,xa=function(){function t(t,e,n){var r=b(n)?n:9===ri?"":null;t.prop("value",r),e.$set("value",n)}return{restrict:"A",priority:100,compile:function(e,n){return wa.test(n.ngValue)?function(e,n,r){t(n,r,e.$eval(r.ngValue))}:function(e,n,r){e.$watch(r.ngValue,function(e){t(n,r,e)})}}}},Ca=["$compile",function(t){return{restrict:"AC",compile:function(e){return t.$$addBindingClass(e),function(e,n,r){t.$$addBindingInfo(n,r.ngBind),n=n[0],e.$watch(r.ngBind,function(t){n.textContent=yt(t)})}}}}],Ea=["$interpolate","$compile",function(t,e){return{compile:function(n){return e.$$addBindingClass(n),function(n,r,i){var o=t(r.attr(i.$attr.ngBindTemplate));e.$$addBindingInfo(r,o.expressions),r=r[0],i.$observe("ngBindTemplate",function(t){r.textContent=y(t)?"":t})}}}}],Sa=["$sce","$parse","$compile",function(t,e,n){return{restrict:"A",compile:function(r,i){var o=e(i.ngBindHtml),a=e(i.ngBindHtml,function(e){return t.valueOf(e)});return n.$$addBindingClass(r),function(e,r,i){n.$$addBindingInfo(r,i.ngBindHtml),e.$watch(a,function(){var n=o(e);r.html(t.getTrustedHtml(n)||"")})}}}}],ka=m({restrict:"A",require:"ngModel",link:function(t,e,n,r){r.$viewChangeListeners.push(function(){t.$eval(n.ngChange)})}}),Aa=Br("",!0),Oa=Br("Odd",0),Ma=Br("Even",1),Va=gr({compile:function(t,e){e.$set("ngCloak",void 0),t.removeClass("ng-cloak")}}),Ta=[function(){return{restrict:"A",scope:!0,controller:"@",priority:500}}],Na={},Ia={blur:!0,focus:!0};o("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(t){var e=xe("ng-"+t);Na[e]=["$parse","$rootScope",function(n,r){return{restrict:"A",compile:function(i,o){var a=n(o[e]);return function(e,n){n.on(t,function(n){var i=function(){a(e,{$event:n})};Ia[t]&&r.$$phase?e.$evalAsync(i):e.$apply(i)})}}}}]});var ja=["$animate","$compile",function(t,e){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(n,r,i,o,a){var s,u,c;n.$watch(i.ngIf,function(n){n?u||a(function(n,o){u=o,n[n.length++]=e.$$createComment("end ngIf",i.ngIf),s={clone:n},t.enter(n,r.parent(),r)}):(c&&(c.remove(),c=null),u&&(u.$destroy(),u=null),s&&(c=mt(s.clone),t.leave(c).done(function(t){!1!==t&&(c=null)}),s=null))})}}}],Da=["$templateRequest","$anchorScroll","$animate",function(t,e,n){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:pi.noop,compile:function(r,i){var o=i.ngInclude||i.src,a=i.onload||"",s=i.autoscroll;return function(r,i,u,c,l){var f,h,p,d=0,$=function(){h&&(h.remove(),h=null),f&&(f.$destroy(),f=null),p&&(n.leave(p).done(function(t){!1!==t&&(h=null)}),h=p,p=null)};r.$watch(o,function(o){var u=function(t){!1===t||!b(s)||s&&!r.$eval(s)||e()},h=++d;o?(t(o,!0).then(function(t){if(!r.$$destroyed&&h===d){var e=r.$new();c.template=t;var s=l(e,function(t){$(),n.enter(t,null,i).done(u)});f=e,p=s,f.$emit("$includeContentLoaded",o),r.$eval(a)}},function(){r.$$destroyed||h===d&&($(),r.$emit("$includeContentError",o))}),r.$emit("$includeContentRequested",o)):($(),c.template=null)})}}}}],Pa=["$compile",function(e){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(n,r,i,o){if(li.call(r[0]).match(/SVG/))return r.empty(),void e(Tt(o.template,t.document).childNodes)(n,function(t){r.append(t)},{futureParentElement:r});r.html(o.template),e(r.contents())(n)}}}],_a=gr({priority:450,compile:function(){return{pre:function(t,e,n){t.$eval(n.ngInit)}}}}),Ra=function(){return{restrict:"A",priority:100,require:"ngModel",link:function(t,e,n,r){var i=n.ngList||", ",a="false"!==n.ngTrim,s=a?gi(i):i,u=function(t){if(!y(t)){var e=[];return t&&o(t.split(s),function(t){t&&e.push(a?gi(t):t)}),e}};r.$parsers.push(u),r.$formatters.push(function(t){if(vi(t))return t.join(i)}),r.$isEmpty=function(t){return!t||!t.length}}}},Ua="ng-valid",La="ng-invalid",qa="ng-pristine",Fa="ng-dirty",Ba=r("ngModel");Hr.$inject=["$scope","$exceptionHandler","$attrs","$element","$parse","$animate","$timeout","$q","$interpolate"],Hr.prototype={$$initGetterSetters:function(){if(this.$options.getOption("getterSetter")){var t=this.$$parse(this.$$attr.ngModel+"()"),e=this.$$parse(this.$$attr.ngModel+"($$$p)");this.$$ngModelGet=function(e){var n=this.$$parsedNgModel(e);return A(n)&&(n=t(e)),n},this.$$ngModelSet=function(t,n){A(this.$$parsedNgModel(t))?e(t,{$$$p:n}):this.$$parsedNgModelAssign(t,n)}}else if(!this.$$parsedNgModel.assign)throw Ba("nonassign","Expression '{0}' is non-assignable. Element: {1}",this.$$attr.ngModel,et(this.$$element))},$render:$,$isEmpty:function(t){return y(t)||""===t||null===t||t!==t},$$updateEmptyClasses:function(t){this.$isEmpty(t)?(this.$$animate.removeClass(this.$$element,"ng-not-empty"),this.$$animate.addClass(this.$$element,"ng-empty")):(this.$$animate.removeClass(this.$$element,"ng-empty"),this.$$animate.addClass(this.$$element,"ng-not-empty"))},$setPristine:function(){this.$dirty=!1,this.$pristine=!0,this.$$animate.removeClass(this.$$element,Fa),this.$$animate.addClass(this.$$element,qa)},$setDirty:function(){this.$dirty=!0,this.$pristine=!1,this.$$animate.removeClass(this.$$element,qa),this.$$animate.addClass(this.$$element,Fa),this.$$parentForm.$setDirty()},$setUntouched:function(){this.$touched=!1,this.$untouched=!0,this.$$animate.setClass(this.$$element,"ng-untouched","ng-touched")},$setTouched:function(){this.$touched=!0,this.$untouched=!1,this.$$animate.setClass(this.$$element,"ng-touched","ng-untouched")},$rollbackViewValue:function(){this.$$timeout.cancel(this.$$pendingDebounce),this.$viewValue=this.$$lastCommittedViewValue,this.$render()},$validate:function(){if(!$i(this.$modelValue)){var t=this.$$lastCommittedViewValue,e=this.$$rawModelValue,n=this.$valid,r=this.$modelValue,i=this.$options.getOption("allowInvalid"),o=this;this.$$runValidators(e,t,function(t){i||n===t||(o.$modelValue=t?e:void 0,o.$modelValue!==r&&o.$$writeModelToScope())})}},$$runValidators:function(t,e,n){function r(t,e){a===s.$$currentValidationRunId&&s.$setValidity(t,e)}function i(t){a===s.$$currentValidationRunId&&n(t)}this.$$currentValidationRunId++;var a=this.$$currentValidationRunId,s=this;return function(){var t=s.$$parserName||"parse";return y(s.$$parserValid)?(r(t,null),!0):(s.$$parserValid||(o(s.$validators,function(t,e){r(e,null)}),o(s.$asyncValidators,function(t,e){r(e,null)})),r(t,s.$$parserValid),s.$$parserValid)}()&&function(){var n=!0;return o(s.$validators,function(i,o){var a=Boolean(i(t,e));n=n&&a,r(o,a)}),!!n||(o(s.$asyncValidators,function(t,e){r(e,null)}),!1)}()?void function(){var n=[],a=!0;o(s.$asyncValidators,function(i,o){var s=i(t,e);if(!D(s))throw Ba("nopromise","Expected asynchronous validator to return a promise but got '{0}' instead.",s);r(o,void 0),n.push(s.then(function(){r(o,!0)},function(){a=!1,r(o,!1)}))}),n.length?s.$$q.all(n).then(function(){i(a)},$):i(!0)}():void i(!1)},$commitViewValue:function(){var t=this.$viewValue;this.$$timeout.cancel(this.$$pendingDebounce),(this.$$lastCommittedViewValue!==t||""===t&&this.$$hasNativeValidators)&&(this.$$updateEmptyClasses(t),this.$$lastCommittedViewValue=t,this.$pristine&&this.$setDirty(),this.$$parseAndValidate())},$$parseAndValidate:function(){function t(){r.$modelValue!==o&&r.$$writeModelToScope()}var e=this.$$lastCommittedViewValue,n=e,r=this;if(this.$$parserValid=!y(n)||void 0,this.$$parserValid)for(var i=0;i<this.$parsers.length;i++)if(n=this.$parsers[i](n),y(n)){this.$$parserValid=!1;break}$i(this.$modelValue)&&(this.$modelValue=this.$$ngModelGet(this.$$scope));var o=this.$modelValue,a=this.$options.getOption("allowInvalid");this.$$rawModelValue=n,a&&(this.$modelValue=n,t()),this.$$runValidators(n,this.$$lastCommittedViewValue,function(e){a||(r.$modelValue=e?n:void 0,t())})},$$writeModelToScope:function(){this.$$ngModelSet(this.$$scope,this.$modelValue),o(this.$viewChangeListeners,function(t){try{t()}catch(t){this.$$exceptionHandler(t)}},this)},$setViewValue:function(t,e){this.$viewValue=t,this.$options.getOption("updateOnDefault")&&this.$$debounceViewValueCommit(e)},$$debounceViewValueCommit:function(t){var e=this.$options.getOption("debounce");E(e[t])?e=e[t]:E(e.default)&&(e=e.default),this.$$timeout.cancel(this.$$pendingDebounce);var n=this;e>0?this.$$pendingDebounce=this.$$timeout(function(){n.$commitViewValue()},e):this.$$scope.$root.$$phase?this.$commitViewValue():this.$$scope.$apply(function(){n.$commitViewValue()})},$overrideModelOptions:function(t){this.$options=this.$options.createChild(t)}},xr({clazz:Hr,set:function(t,e){t[e]=!0},unset:function(t,e){delete t[e]}});var Ha,za=["$rootScope",function(t){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Hr,priority:1,compile:function(e){return e.addClass(qa).addClass("ng-untouched").addClass(Ua),{pre:function(t,e,n,r){var i=r[0],o=r[1]||i.$$parentForm,a=r[2];a&&(i.$options=a.$options),i.$$initGetterSetters(),o.$addControl(i),n.$observe("name",function(t){i.$name!==t&&i.$$parentForm.$$renameControl(i,t)}),t.$on("$destroy",function(){i.$$parentForm.$removeControl(i)})},post:function(e,n,r,i){function o(){a.$setTouched()}var a=i[0];a.$options.getOption("updateOn")&&n.on(a.$options.getOption("updateOn"),function(t){a.$$debounceViewValueCommit(t&&t.type)}),n.on("blur",function(){a.$touched||(t.$$phase?e.$evalAsync(o):e.$apply(o))})}}}}}],Wa=/(\s+|^)default(\s+|$)/;Wr.prototype={getOption:function(t){return this.$$options[t]},createChild:function(t){var e=!1;return t=f({},t),o(t,function(n,r){"$inherit"===n?"*"===r?e=!0:(t[r]=this.$$options[r],"updateOn"===r&&(t.updateOnDefault=this.$$options.updateOnDefault)):"updateOn"===r&&(t.updateOnDefault=!1,t[r]=gi(n.replace(Wa,function(){return t.updateOnDefault=!0," "})))},this),e&&(delete t["*"],Gr(t,this.$$options)),Gr(t,Ha.$$options),new Wr(t)}},Ha=new Wr({updateOn:"",updateOnDefault:!0,debounce:0,getterSetter:!1,allowInvalid:!1,timezone:null});var Ga=function(){function t(t,e){this.$$attrs=t,this.$$scope=e}return t.$inject=["$attrs","$scope"],t.prototype={$onInit:function(){var t=this.parentCtrl?this.parentCtrl.$options:Ha,e=this.$$scope.$eval(this.$$attrs.ngModelOptions);this.$options=t.createChild(e)}},{restrict:"A",priority:10,require:{parentCtrl:"?^^ngModelOptions"},bindToController:!0,controller:t}},Ka=gr({terminal:!0,priority:1e3}),Ja=r("ngOptions"),Za=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,Ya=["$compile","$document","$parse",function(e,n,r){function a(t,e,n){function o(t,e,n,r,i){this.selectValue=t,this.viewValue=e,this.label=n,this.group=r,this.disabled=i}function a(t){var e;if(!c&&i(t))e=t;else{e=[];for(var n in t)t.hasOwnProperty(n)&&"$"!==n.charAt(0)&&e.push(n)}return e}var s=t.match(Za);if(!s)throw Ja("iexp","Expected expression in form of '_select_ (as _label_)? for (_key_,)?_value_ in _collection_' but got '{0}'. Element: {1}",t,et(e));var u=s[5]||s[7],c=s[6],l=/ as /.test(s[0])&&s[1],f=s[9],h=r(s[2]?s[1]:u),p=l&&r(l),d=p||h,$=f&&r(f),v=f?function(t,e){return $(n,e)}:function(t){return re(t)},m=function(t,e){return v(t,C(t,e))},g=r(s[2]||s[1]),y=r(s[3]||""),b=r(s[4]||""),w=r(s[8]),x={},C=c?function(t,e){return x[c]=e,x[u]=t,x}:function(t){return x[u]=t,x};return{trackBy:f,getTrackByValue:m,getWatchables:r(w,function(t){var e=[];t=t||[];for(var r=a(t),i=r.length,o=0;o<i;o++){var u=t===r?o:r[o],c=t[u],l=C(c,u),f=v(c,l);if(e.push(f),s[2]||s[1]){var h=g(n,l);e.push(h)}if(s[4]){var p=b(n,l);e.push(p)}}return e}),getOptions:function(){for(var t=[],e={},r=w(n)||[],i=a(r),s=i.length,u=0;u<s;u++){var c=r===i?u:i[u],l=r[c],h=C(l,c),p=d(n,h),$=v(p,h),x=g(n,h),E=y(n,h),S=b(n,h),k=new o($,p,x,E,S);t.push(k),e[$]=k}return{items:t,selectValueMap:e,getOptionFromViewValue:function(t){return e[m(t)]},getViewValueFromOption:function(t){return f?B(t.viewValue):t.viewValue}}}}}function s(t,r,i,s){function l(t,e){var n=u.cloneNode(!1);e.appendChild(n),h(t,n)}function f(t){var e=x.getOptionFromViewValue(t),n=e&&e.element;return n&&!n.selected&&(n.selected=!0),e}function h(t,e){t.element=e,e.disabled=t.disabled,t.label!==e.label&&(e.label=t.label,e.textContent=t.label),e.value=t.selectValue}function p(){var t=x&&d.readValue();if(x)for(var e=x.items.length-1;e>=0;e--){var n=x.items[e];Kt(b(n.group)?n.element.parentNode:n.element)}x=C.getOptions();var i={};if(x.items.forEach(function(t){var e;b(t.group)?(e=i[t.group],e||(e=c.cloneNode(!1),E.appendChild(e),e.label=null===t.group?"null":t.group,i[t.group]=e),l(t,e)):l(t,E)}),r[0].appendChild(E),$.$render(),!$.$isEmpty(t)){var o=d.readValue();(C.trackBy||v?z(t,o):t===o)||($.$setViewValue(o),$.$render())}}for(var d=s[0],$=s[1],v=i.multiple,m=0,g=r.children(),y=g.length;m<y;m++)if(""===g[m].value){d.hasEmptyOption=!0,d.emptyOption=g.eq(m);break}r.empty();var w=!!d.emptyOption;ii(u.cloneNode(!1)).val("?");var x,C=a(i.ngOptions,r,t),E=n[0].createDocumentFragment()
;d.generateUnknownOptionValue=function(t){return"?"},v?(d.writeValue=function(t){if(x){var e=t&&t.map(f)||[];x.items.forEach(function(t){t.element.selected&&!q(e,t)&&(t.element.selected=!1)})}},d.readValue=function(){var t=r.val()||[],e=[];return o(t,function(t){var n=x.selectValueMap[t];n&&!n.disabled&&e.push(x.getViewValueFromOption(n))}),e},C.trackBy&&t.$watchCollection(function(){if(vi($.$viewValue))return $.$viewValue.map(function(t){return C.getTrackByValue(t)})},function(){$.$render()})):(d.writeValue=function(t){if(x){var e=r[0].options[r[0].selectedIndex],n=x.getOptionFromViewValue(t);e&&e.removeAttribute("selected"),n?(r[0].value!==n.selectValue&&(d.removeUnknownOption(),r[0].value=n.selectValue,n.element.selected=!0),n.element.setAttribute("selected","selected")):d.selectUnknownOrEmptyOption(t)}},d.readValue=function(){var t=x.selectValueMap[r.val()];return t&&!t.disabled?(d.unselectEmptyOption(),d.removeUnknownOption(),x.getViewValueFromOption(t)):null},C.trackBy&&t.$watch(function(){return C.getTrackByValue($.$viewValue)},function(){$.$render()})),w&&(e(d.emptyOption)(t),r.prepend(d.emptyOption),d.emptyOption[0].nodeType===Mi?(d.hasEmptyOption=!1,d.registerOption=function(t,e){""===e.val()&&(d.hasEmptyOption=!0,d.emptyOption=e,d.emptyOption.removeClass("ng-scope"),$.$render(),e.on("$destroy",function(){var t=d.$isEmptyOptionSelected();d.hasEmptyOption=!1,d.emptyOption=void 0,t&&$.$render()}))}):d.emptyOption.removeClass("ng-scope")),t.$watchCollection(C.getWatchables,p)}var u=t.document.createElement("option"),c=t.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(t,e,n,r){r[0].registerOption=$},post:s}}}],Qa=["$locale","$interpolate","$log",function(t,e,n){var r=/{}/g,i=/^when(Minus)?(.+)$/;return{link:function(a,s,u){function c(t){s.text(t||"")}var l,f=u.count,h=u.$attr.when&&s.attr(u.$attr.when),p=u.offset||0,d=a.$eval(h)||{},v={},m=e.startSymbol(),g=e.endSymbol(),b=m+f+"-"+p+g,w=pi.noop;o(u,function(t,e){var n=i.exec(e);if(n){var r=(n[1]?"-":"")+Xr(n[2]);d[r]=s.attr(u.$attr[e])}}),o(d,function(t,n){v[n]=e(t.replace(r,b))}),a.$watch(f,function(e){var r=parseFloat(e),i=$i(r);if(i||r in d||(r=t.pluralCat(r-p)),!(r===l||i&&$i(l))){w();var o=v[r];y(o)?(null!=e&&n.debug("ngPluralize: no rule defined for '"+r+"' in "+h),w=$,c()):w=a.$watch(o,c),l=r}})}}}],Xa=["$parse","$animate","$compile",function(t,e,n){var a=r("ngRepeat"),s=function(t,e,n,r,i,o,a){t[n]=r,i&&(t[i]=o),t.$index=e,t.$first=0===e,t.$last=e===a-1,t.$middle=!(t.$first||t.$last),t.$odd=!(t.$even=0==(1&e))},u=function(t){return t.clone[0]},c=function(t){return t.clone[t.clone.length-1]};return{restrict:"A",multiElement:!0,transclude:"element",priority:1e3,terminal:!0,$$tlb:!0,compile:function(r,l){var f=l.ngRepeat,h=n.$$createComment("end ngRepeat",f),p=f.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);if(!p)throw a("iexp","Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",f);var d=p[1],$=p[2],v=p[3],m=p[4];if(!(p=d.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/)))throw a("iidexp","'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",d);var g=p[3]||p[1],y=p[2];if(v&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(v)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(v)))throw a("badident","alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",v);var b,w,x,C,E={$id:re};return m?b=t(m):(x=function(t,e){return re(e)},C=function(t){return t}),function(t,n,r,l,p){b&&(w=function(e,n,r){return y&&(E[y]=e),E[g]=n,E.$index=r,b(t,E)});var d=gt();t.$watchCollection($,function(r){var l,$,m,b,E,S,k,A,O,M,V,T,N=n[0],I=gt();if(v&&(t[v]=r),i(r))O=r,A=w||x;else{A=w||C,O=[];for(var j in r)Qr.call(r,j)&&"$"!==j.charAt(0)&&O.push(j)}for(b=O.length,V=new Array(b),l=0;l<b;l++)if(E=r===O?l:O[l],S=r[E],k=A(E,S,l),d[k])M=d[k],delete d[k],I[k]=M,V[l]=M;else{if(I[k])throw o(V,function(t){t&&t.scope&&(d[t.id]=t)}),a("dupes","Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",f,k,S);V[l]={id:k,scope:void 0,clone:void 0},I[k]=!0}for(var D in d){if(M=d[D],T=mt(M.clone),e.leave(T),T[0].parentNode)for(l=0,$=T.length;l<$;l++)T[l].$$NG_REMOVED=!0;M.scope.$destroy()}for(l=0;l<b;l++)if(E=r===O?l:O[l],S=r[E],M=V[l],M.scope){m=N;do{m=m.nextSibling}while(m&&m.$$NG_REMOVED);u(M)!==m&&e.move(mt(M.clone),null,N),N=c(M),s(M.scope,l,g,S,y,E,b)}else p(function(t,n){M.scope=n;var r=h.cloneNode(!1);t[t.length++]=r,e.enter(t,null,N),N=r,M.clone=t,I[M.id]=M,s(M.scope,l,g,S,y,E,b)});d=I})}}}}],ts=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngShow,function(e){t[e?"removeClass":"addClass"](n,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],es=["$animate",function(t){return{restrict:"A",multiElement:!0,link:function(e,n,r){e.$watch(r.ngHide,function(e){t[e?"addClass":"removeClass"](n,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],ns=gr(function(t,e,n){t.$watch(n.ngStyle,function(t,n){n&&t!==n&&o(n,function(t,n){e.css(n,"")}),t&&e.css(t)},!0)}),rs=["$animate","$compile",function(t,e){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(n,r,i,a){var s=i.ngSwitch||i.on,u=[],c=[],l=[],f=[],h=function(t,e){return function(n){!1!==n&&t.splice(e,1)}};n.$watch(s,function(n){for(var r,i;l.length;)t.cancel(l.pop());for(r=0,i=f.length;r<i;++r){var s=mt(c[r].clone);f[r].$destroy();(l[r]=t.leave(s)).done(h(l,r))}c.length=0,f.length=0,(u=a.cases["!"+n]||a.cases["?"])&&o(u,function(n){n.transclude(function(r,i){f.push(i);var o=n.element;r[r.length++]=e.$$createComment("end ngSwitchWhen");var a={clone:r};c.push(a),t.enter(r,o.parent(),o)})})})}}}],is=gr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){o(n.ngSwitchWhen.split(n.ngSwitchWhenSeparator).sort().filter(function(t,e,n){return n[e-1]!==t}),function(t){r.cases["!"+t]=r.cases["!"+t]||[],r.cases["!"+t].push({transclude:i,element:e})})}}),os=gr({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(t,e,n,r,i){r.cases["?"]=r.cases["?"]||[],r.cases["?"].push({transclude:i,element:e})}}),as=r("ngTransclude"),ss=["$compile",function(t){return{restrict:"EAC",terminal:!0,compile:function(e){var n=t(e.contents());return e.empty(),function(t,e,r,i,o){function a(t,n){t.length&&u(t)?e.append(t):(s(),n.$destroy())}function s(){n(t,function(t){e.append(t)})}function u(t){for(var e=0,n=t.length;e<n;e++){var r=t[e];if(r.nodeType!==Oi||r.nodeValue.trim())return!0}}if(!o)throw as("orphan","Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. Element: {0}",et(e));r.ngTransclude===r.$attr.ngTransclude&&(r.ngTransclude="");var c=r.ngTransclude||r.ngTranscludeSlot;o(a,null,c),c&&!o.isSlotFilled(c)&&s()}}}}],us=["$templateCache",function(t){return{restrict:"E",terminal:!0,compile:function(e,n){if("text/ng-template"===n.type){var r=n.id,i=e[0].text;t.put(r,i)}}}}],cs={$setViewValue:$,$render:$},ls=["$element","$scope",function(e,n){function r(){s||(s=!0,n.$$postDigest(function(){s=!1,o.ngModelCtrl.$render()}))}function i(t){u||(u=!0,n.$$postDigest(function(){n.$$destroyed||(u=!1,o.ngModelCtrl.$setViewValue(o.readValue()),t&&o.ngModelCtrl.$render())}))}var o=this,a=new Zi;o.selectValueMap={},o.ngModelCtrl=cs,o.multiple=!1,o.unknownOption=ii(t.document.createElement("option")),o.hasEmptyOption=!1,o.emptyOption=void 0,o.renderUnknownOption=function(t){var n=o.generateUnknownOptionValue(t);o.unknownOption.val(n),e.prepend(o.unknownOption),Kr(o.unknownOption,!0),e.val(n)},o.updateUnknownOption=function(t){var n=o.generateUnknownOptionValue(t);o.unknownOption.val(n),Kr(o.unknownOption,!0),e.val(n)},o.generateUnknownOptionValue=function(t){return"? "+re(t)+" ?"},o.removeUnknownOption=function(){o.unknownOption.parent()&&o.unknownOption.remove()},o.selectEmptyOption=function(){o.emptyOption&&(e.val(""),Kr(o.emptyOption,!0))},o.unselectEmptyOption=function(){o.hasEmptyOption&&Kr(o.emptyOption,!1)},n.$on("$destroy",function(){o.renderUnknownOption=$}),o.readValue=function(){var t=e.val(),n=t in o.selectValueMap?o.selectValueMap[t]:t;return o.hasOption(n)?n:null},o.writeValue=function(t){var n=e[0].options[e[0].selectedIndex];if(n&&Kr(ii(n),!1),o.hasOption(t)){o.removeUnknownOption();var r=re(t);e.val(r in o.selectValueMap?r:t);var i=e[0].options[e[0].selectedIndex];Kr(ii(i),!0)}else o.selectUnknownOrEmptyOption(t)},o.addOption=function(t,e){if(e[0].nodeType!==Mi){$t(t,'"option value"'),""===t&&(o.hasEmptyOption=!0,o.emptyOption=e);var n=a.get(t)||0;a.set(t,n+1),r()}},o.removeOption=function(t){var e=a.get(t);e&&(1===e?(a.delete(t),""===t&&(o.hasEmptyOption=!1,o.emptyOption=void 0)):a.set(t,e-1))},o.hasOption=function(t){return!!a.get(t)},o.$hasEmptyOption=function(){return o.hasEmptyOption},o.$isUnknownOptionSelected=function(){return e[0].options[0]===o.unknownOption[0]},o.$isEmptyOptionSelected=function(){return o.hasEmptyOption&&e[0].options[e[0].selectedIndex]===o.emptyOption[0]},o.selectUnknownOrEmptyOption=function(t){null==t&&o.emptyOption?(o.removeUnknownOption(),o.selectEmptyOption()):o.unknownOption.parent().length?o.updateUnknownOption(t):o.renderUnknownOption(t)};var s=!1,u=!1;o.registerOption=function(t,e,n,a,s){if(n.$attr.ngValue){var u,c=NaN;n.$observe("value",function(t){var n,r=e.prop("selected");b(c)&&(o.removeOption(u),delete o.selectValueMap[c],n=!0),c=re(t),u=t,o.selectValueMap[c]=t,o.addOption(t,e),e.attr("value",c),n&&r&&i()})}else a?n.$observe("value",function(t){o.readValue();var n,r=e.prop("selected");b(u)&&(o.removeOption(u),n=!0),u=t,o.addOption(t,e),n&&r&&i()}):s?t.$watch(s,function(t,r){n.$set("value",t);var a=e.prop("selected");r!==t&&o.removeOption(r),o.addOption(t,e),r&&a&&i()}):o.addOption(n.value,e);n.$observe("disabled",function(t){("true"===t||t&&e.prop("selected"))&&(o.multiple?i(!0):(o.ngModelCtrl.$setViewValue(null),o.ngModelCtrl.$render()))}),e.on("$destroy",function(){var t=o.readValue(),e=n.value;o.removeOption(e),r(),(o.multiple&&t&&-1!==t.indexOf(e)||t===e)&&i(!0)})}}],fs=function(){function t(t,e,n,r){var i=r[0],a=r[1];if(!a)return void(i.registerOption=$);if(i.ngModelCtrl=a,e.on("change",function(){i.removeUnknownOption(),t.$apply(function(){a.$setViewValue(i.readValue())})}),n.multiple){i.multiple=!0,i.readValue=function(){var t=[];return o(e.find("option"),function(e){if(e.selected&&!e.disabled){var n=e.value;t.push(n in i.selectValueMap?i.selectValueMap[n]:n)}}),t},i.writeValue=function(t){o(e.find("option"),function(e){var n=!!t&&(q(t,e.value)||q(t,i.selectValueMap[e.value]));n!==e.selected&&Kr(ii(e),n)})};var s,u=NaN;t.$watch(function(){u!==a.$viewValue||z(s,a.$viewValue)||(s=wt(a.$viewValue),a.$render()),u=a.$viewValue}),a.$isEmpty=function(t){return!t||0===t.length}}}function e(t,e,n,r){var i=r[1];if(i){var o=r[0];i.$render=function(){o.writeValue(i.$viewValue)}}}return{restrict:"E",require:["select","?ngModel"],controller:ls,priority:1,link:{pre:t,post:e}}},hs=["$interpolate",function(t){return{restrict:"E",priority:100,compile:function(e,n){var r,i;return b(n.ngValue)||(b(n.value)?r=t(n.value,!0):(i=t(e.text(),!0))||n.$set("value",e.text())),function(t,e,n){var o=e.parent(),a=o.data("$selectController")||o.parent().data("$selectController");a&&a.registerOption(t,e,n,r,i)}}}}],ps=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){r&&(n.required=!0,r.$validators.required=function(t,e){return!n.required||!r.$isEmpty(e)},n.$observe("required",function(){r.$validate()}))}}},ds=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,i){if(i){var o,a=n.ngPattern||n.pattern;n.$observe("pattern",function(t){if(C(t)&&t.length>0&&(t=new RegExp("^"+t+"$")),t&&!t.test)throw r("ngPattern")("noregexp","Expected {0} to be a RegExp but was {1}. Element: {2}",a,t,et(e));o=t||void 0,i.$validate()}),i.$validators.pattern=function(t,e){return i.$isEmpty(e)||y(o)||o.test(e)}}}}},$s=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=-1;n.$observe("maxlength",function(t){var e=p(t);i=$i(e)?-1:e,r.$validate()}),r.$validators.maxlength=function(t,e){return i<0||r.$isEmpty(e)||e.length<=i}}}}},vs=function(){return{restrict:"A",require:"?ngModel",link:function(t,e,n,r){if(r){var i=0;n.$observe("minlength",function(t){i=p(t)||0,r.$validate()}),r.$validators.minlength=function(t,e){return r.$isEmpty(e)||e.length>=i}}}}};if(t.angular.bootstrap)return void(t.console&&console.log("WARNING: Tried to load angular more than once."));!function(){var e;if(!ki){var n=wi();oi=y(n)?t.jQuery:n?t[n]:void 0,oi&&oi.fn.on?(ii=oi,f(oi.fn,{scope:zi.scope,isolateScope:zi.isolateScope,controller:zi.controller,injector:zi.injector,inheritedData:zi.inheritedData}),e=oi.cleanData,oi.cleanData=function(t){for(var n,r,i=0;null!=(r=t[i]);i++)(n=oi._data(r,"events"))&&n.$destroy&&oi(r).triggerHandler("$destroy");e(t)}):ii=jt,pi.element=ii,ki=!0}}(),function(n){f(n,{errorHandlingConfig:e,bootstrap:ct,copy:B,extend:f,merge:h,equals:z,element:ii,forEach:o,injector:ce,noop:$,bind:K,toJson:Z,fromJson:Y,identity:v,isUndefined:y,isDefined:b,isString:C,isFunction:A,isObject:w,isNumber:E,isElement:R,isArray:vi,version:Ni,isDate:S,lowercase:Xr,uppercase:ti,callbacks:{$$counter:0},getTestability:ft,reloadWithDebugInfo:lt,$$minErr:r,$$csp:bi,$$encodeUriSegment:ot,$$encodeUriQuery:at,$$stringify:yt}),ai=bt(t),ai("ng",["ngLocale"],["$provide",function(t){t.provider({$$sanitizeUri:Nn}),t.provider("$compile",be).directive({a:ea,input:ba,textarea:ba,form:aa,script:us,select:fs,option:hs,ngBind:Ca,ngBindHtml:Sa,ngBindTemplate:Ea,ngClass:Aa,ngClassEven:Ma,ngClassOdd:Oa,ngCloak:Va,ngController:Ta,ngForm:sa,ngHide:es,ngIf:ja,ngInclude:Da,ngInit:_a,ngNonBindable:Ka,ngPluralize:Qa,ngRepeat:Xa,ngShow:ts,ngStyle:ns,ngSwitch:rs,ngSwitchWhen:is,ngSwitchDefault:os,ngOptions:Ya,ngTransclude:ss,ngModel:za,ngList:Ra,ngChange:ka,pattern:ds,ngPattern:ds,required:ps,ngRequired:ps,minlength:vs,ngMinlength:vs,maxlength:$s,ngMaxlength:$s,ngValue:xa,ngModelOptions:Ga}).directive({ngInclude:Pa}).directive(na).directive(Na),t.provider({$anchorScroll:le,$animate:uo,$animateCss:fo,$$animateJs:ao,$$animateQueue:so,$$AnimateRunner:lo,$$animateAsyncRun:co,$browser:ve,$cacheFactory:me,$controller:ke,$document:Ae,$$isDocumentHidden:Oe,$exceptionHandler:Me,$filter:Gn,$$forceReflow:yo,$interpolate:Be,$interval:He,$http:Ue,$httpParamSerializer:Te,$httpParamSerializerJQLike:Ne,$httpBackend:qe,$xhrFactory:Le,$jsonpCallbacks:Ao,$location:an,$log:sn,$parse:Cn,$rootScope:Tn,$q:En,$$q:Sn,$sce:_n,$sceDelegate:Pn,$sniffer:Rn,$templateCache:ge,$templateRequest:Un,$$testability:Ln,$timeout:qn,$window:Hn,$$rAF:Vn,$$jqLite:ne,$$Map:Yi,$$cookieReader:Wn})}]).info({angularVersion:"1.6.6"})}(pi),pi.module("ngLocale",[],["$provide",function(t){function e(t){t+="";var e=t.indexOf(".");return-1==e?0:t.length-e-1}function n(t,n){var r=n;void 0===r&&(r=Math.min(e(t),3));var i=Math.pow(10,r);return{v:r,f:(t*i|0)%i}}var r={ZERO:"zero",ONE:"one",TWO:"two",FEW:"few",MANY:"many",OTHER:"other"};t.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],SHORTDAY:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],SHORTMONTH:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],STANDALONEMONTH:["January","February","March","April","May","June","July","August","September","October","November","December"],WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",mediumDate:"MMM d, y",mediumTime:"h:mm:ss a",short:"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-¤",negSuf:"",posPre:"¤",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(t,e){var i=0|t,o=n(t,e);return 1==i&&0==o.v?r.ONE:r.OTHER}})}]),ii(function(){ut(t.document,ct)})}(window),!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}</style>');
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJlcnJvckhhbmRsaW5nQ29uZmlnIiwiY29uZmlnIiwiaXNPYmplY3QiLCJtaW5FcnJDb25maWciLCJpc0RlZmluZWQiLCJvYmplY3RNYXhEZXB0aCIsImlzVmFsaWRPYmplY3RNYXhEZXB0aCIsIk5hTiIsIm1heERlcHRoIiwiaXNOdW1iZXIiLCJtaW5FcnIiLCJtb2R1bGUiLCJFcnJvckNvbnN0cnVjdG9yIiwiRXJyb3IiLCJwYXJhbVByZWZpeCIsImkiLCJjb2RlIiwiYXJndW1lbnRzIiwidGVtcGxhdGUiLCJtZXNzYWdlIiwidGVtcGxhdGVBcmdzIiwic2xpY2VBcmdzIiwibWFwIiwiYXJnIiwidG9EZWJ1Z1N0cmluZyIsInJlcGxhY2UiLCJtYXRjaCIsImluZGV4Iiwic2xpY2UiLCJsZW5ndGgiLCJlbmNvZGVVUklDb21wb25lbnQiLCJpc0FycmF5TGlrZSIsIm9iaiIsImlzV2luZG93IiwiaXNBcnJheSIsImlzU3RyaW5nIiwianFMaXRlIiwiT2JqZWN0IiwiQXJyYXkiLCJpdGVtIiwiZm9yRWFjaCIsIml0ZXJhdG9yIiwiY29udGV4dCIsImtleSIsImlzRnVuY3Rpb24iLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpc1ByaW1pdGl2ZSIsImlzQmxhbmtPYmplY3QiLCJmb3JFYWNoU29ydGVkIiwia2V5cyIsInNvcnQiLCJyZXZlcnNlUGFyYW1zIiwiaXRlcmF0b3JGbiIsInZhbHVlIiwibmV4dFVpZCIsInVpZCIsInNldEhhc2hLZXkiLCJoIiwiJCRoYXNoS2V5IiwiYmFzZUV4dGVuZCIsImRzdCIsIm9ianMiLCJkZWVwIiwiaWkiLCJqIiwiamoiLCJzcmMiLCJpc0RhdGUiLCJEYXRlIiwidmFsdWVPZiIsImlzUmVnRXhwIiwiUmVnRXhwIiwibm9kZU5hbWUiLCJjbG9uZU5vZGUiLCJpc0VsZW1lbnQiLCJjbG9uZSIsImV4dGVuZCIsIm1lcmdlIiwidG9JbnQiLCJzdHIiLCJwYXJzZUludCIsImluaGVyaXQiLCJwYXJlbnQiLCJleHRyYSIsImNyZWF0ZSIsIm5vb3AiLCJpZGVudGl0eSIsIiQiLCJ2YWx1ZUZuIiwiaGFzQ3VzdG9tVG9TdHJpbmciLCJ0b1N0cmluZyIsImlzVW5kZWZpbmVkIiwiZ2V0UHJvdG90eXBlT2YiLCJpc0Vycm9yIiwiaXNTY29wZSIsIiRldmFsQXN5bmMiLCIkd2F0Y2giLCJpc0ZpbGUiLCJpc0Zvcm1EYXRhIiwiaXNCbG9iIiwiaXNCb29sZWFuIiwiaXNQcm9taXNlTGlrZSIsInRoZW4iLCJpc1R5cGVkQXJyYXkiLCJUWVBFRF9BUlJBWV9SRUdFWFAiLCJ0ZXN0IiwiaXNBcnJheUJ1ZmZlciIsIm5vZGUiLCJwcm9wIiwiYXR0ciIsImZpbmQiLCJtYWtlTWFwIiwiaXRlbXMiLCJzcGxpdCIsIm5vZGVOYW1lXyIsImVsZW1lbnQiLCJsb3dlcmNhc2UiLCJpbmNsdWRlcyIsImFycmF5IiwicHJvdG90eXBlIiwiaW5kZXhPZiIsImFycmF5UmVtb3ZlIiwic3BsaWNlIiwiY29weSIsInNvdXJjZSIsImRlc3RpbmF0aW9uIiwiY29weVJlY3Vyc2UiLCJwdXNoIiwiY29weUVsZW1lbnQiLCJzdGFja1NvdXJjZSIsInN0YWNrRGVzdCIsIm5nTWluRXJyIiwibmVlZHNSZWN1cnNlIiwiY29weVR5cGUiLCJ1bmRlZmluZWQiLCJjb25zdHJ1Y3RvciIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJjb3BpZWQiLCJBcnJheUJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJVaW50OEFycmF5Iiwic2V0IiwicmUiLCJsYXN0SW5kZXgiLCJ0eXBlIiwic2ltcGxlQ29tcGFyZSIsImEiLCJiIiwiZXF1YWxzIiwibzEiLCJvMiIsImtleVNldCIsInQxIiwidDIiLCJnZXRUaW1lIiwiY3JlYXRlTWFwIiwiY2hhckF0IiwiY29uY2F0IiwiYXJyYXkxIiwiYXJyYXkyIiwiYXJncyIsInN0YXJ0SW5kZXgiLCJiaW5kIiwic2VsZiIsImZuIiwiY3VycnlBcmdzIiwiYXBwbHkiLCJ0b0pzb25SZXBsYWNlciIsInZhbCIsImRvY3VtZW50IiwidG9Kc29uIiwicHJldHR5IiwiSlNPTiIsInN0cmluZ2lmeSIsImZyb21Kc29uIiwianNvbiIsInBhcnNlIiwidGltZXpvbmVUb09mZnNldCIsInRpbWV6b25lIiwiZmFsbGJhY2siLCJBTExfQ09MT05TIiwicmVxdWVzdGVkVGltZXpvbmVPZmZzZXQiLCJpc051bWJlck5hTiIsImFkZERhdGVNaW51dGVzIiwiZGF0ZSIsIm1pbnV0ZXMiLCJzZXRNaW51dGVzIiwiZ2V0TWludXRlcyIsImNvbnZlcnRUaW1lem9uZVRvTG9jYWwiLCJyZXZlcnNlIiwiZGF0ZVRpbWV6b25lT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJzdGFydGluZ1RhZyIsImVtcHR5IiwiZWxlbUh0bWwiLCJhcHBlbmQiLCJodG1sIiwibm9kZVR5cGUiLCJOT0RFX1RZUEVfVEVYVCIsImUiLCJ0cnlEZWNvZGVVUklDb21wb25lbnQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJwYXJzZUtleVZhbHVlIiwia2V5VmFsdWUiLCJzcGxpdFBvaW50Iiwic3Vic3RyaW5nIiwidG9LZXlWYWx1ZSIsInBhcnRzIiwiYXJyYXlWYWx1ZSIsImVuY29kZVVyaVF1ZXJ5Iiwiam9pbiIsImVuY29kZVVyaVNlZ21lbnQiLCJwY3RFbmNvZGVTcGFjZXMiLCJnZXROZ0F0dHJpYnV0ZSIsIm5nQXR0ciIsIm5nQXR0clByZWZpeGVzIiwiZ2V0QXR0cmlidXRlIiwiYW5ndWxhckluaXQiLCJib290c3RyYXAiLCJhcHBFbGVtZW50IiwicHJlZml4IiwibmFtZSIsImhhc0F0dHJpYnV0ZSIsImNhbmRpZGF0ZSIsInF1ZXJ5U2VsZWN0b3IiLCJpc0F1dG9Cb290c3RyYXBBbGxvd2VkIiwiY29uc29sZSIsImVycm9yIiwic3RyaWN0RGkiLCJtb2R1bGVzIiwiZG9Cb290c3RyYXAiLCJpbmplY3RvciIsInRhZyIsInVuc2hpZnQiLCIkcHJvdmlkZSIsImRlYnVnSW5mb0VuYWJsZWQiLCIkY29tcGlsZVByb3ZpZGVyIiwiY3JlYXRlSW5qZWN0b3IiLCJpbnZva2UiLCJzY29wZSIsImNvbXBpbGUiLCIkYXBwbHkiLCJkYXRhIiwiTkdfRU5BQkxFX0RFQlVHX0lORk8iLCJOR19ERUZFUl9CT09UU1RSQVAiLCJhbmd1bGFyIiwicmVzdW1lQm9vdHN0cmFwIiwiZXh0cmFNb2R1bGVzIiwicmVzdW1lRGVmZXJyZWRCb290c3RyYXAiLCJyZWxvYWRXaXRoRGVidWdJbmZvIiwibG9jYXRpb24iLCJyZWxvYWQiLCJnZXRUZXN0YWJpbGl0eSIsInJvb3RFbGVtZW50IiwiZ2V0Iiwic25ha2VfY2FzZSIsInNlcGFyYXRvciIsIlNOQUtFX0NBU0VfUkVHRVhQIiwibGV0dGVyIiwicG9zIiwidG9Mb3dlckNhc2UiLCJhc3NlcnRBcmciLCJyZWFzb24iLCJhc3NlcnRBcmdGbiIsImFjY2VwdEFycmF5QW5ub3RhdGlvbiIsImFzc2VydE5vdEhhc093blByb3BlcnR5IiwiZ2V0dGVyIiwicGF0aCIsImJpbmRGblRvU2NvcGUiLCJsYXN0SW5zdGFuY2UiLCJsZW4iLCJnZXRCbG9ja05vZGVzIiwibm9kZXMiLCJibG9ja05vZGVzIiwiZW5kTm9kZSIsIm5leHRTaWJsaW5nIiwic2V0dXBNb2R1bGVMb2FkZXIiLCJlbnN1cmUiLCJmYWN0b3J5IiwiJGluamVjdG9yTWluRXJyIiwiJCRtaW5FcnIiLCJyZXF1aXJlcyIsImNvbmZpZ0ZuIiwiaW5mbyIsImludm9rZUxhdGVyIiwicHJvdmlkZXIiLCJtZXRob2QiLCJpbnNlcnRNZXRob2QiLCJxdWV1ZSIsImludm9rZVF1ZXVlIiwibW9kdWxlSW5zdGFuY2UiLCJpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUiLCJyZWNpcGVOYW1lIiwiZmFjdG9yeUZ1bmN0aW9uIiwiJCRtb2R1bGVOYW1lIiwiY29uZmlnQmxvY2tzIiwicnVuQmxvY2tzIiwiX2ludm9rZVF1ZXVlIiwiX2NvbmZpZ0Jsb2NrcyIsIl9ydW5CbG9ja3MiLCJ0aGlzIiwic2VydmljZSIsImNvbnN0YW50IiwiZGVjb3JhdG9yIiwiYW5pbWF0aW9uIiwiZmlsdGVyIiwiY29udHJvbGxlciIsImRpcmVjdGl2ZSIsImNvbXBvbmVudCIsInJ1biIsImJsb2NrIiwic2hhbGxvd0NvcHkiLCJzZXJpYWxpemVPYmplY3QiLCJzZWVuIiwianFOZXh0SWQiLCJqcUlkIiwiY3NzS2ViYWJUb0NhbWVsIiwia2ViYWJUb0NhbWVsIiwiTVNfSEFDS19SRUdFWFAiLCJmbkNhbWVsQ2FzZVJlcGxhY2UiLCJhbGwiLCJ0b1VwcGVyQ2FzZSIsIkRBU0hfTE9XRVJDQVNFX1JFR0VYUCIsImpxTGl0ZUlzVGV4dE5vZGUiLCJIVE1MX1JFR0VYUCIsImpxTGl0ZUFjY2VwdHNEYXRhIiwiTk9ERV9UWVBFX0VMRU1FTlQiLCJOT0RFX1RZUEVfRE9DVU1FTlQiLCJqcUxpdGVIYXNEYXRhIiwianFDYWNoZSIsIm5nMzM5IiwianFMaXRlQnVpbGRGcmFnbWVudCIsInRtcCIsIndyYXAiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJjcmVhdGVUZXh0Tm9kZSIsImFwcGVuZENoaWxkIiwiY3JlYXRlRWxlbWVudCIsIlRBR19OQU1FX1JFR0VYUCIsImV4ZWMiLCJ3cmFwTWFwIiwiX2RlZmF1bHQiLCJpbm5lckhUTUwiLCJYSFRNTF9UQUdfUkVHRVhQIiwibGFzdENoaWxkIiwiY2hpbGROb2RlcyIsImZpcnN0Q2hpbGQiLCJ0ZXh0Q29udGVudCIsImpxTGl0ZVBhcnNlSFRNTCIsInBhcnNlZCIsIlNJTkdMRV9UQUdfUkVHRVhQIiwianFMaXRlV3JhcE5vZGUiLCJ3cmFwcGVyIiwicGFyZW50Tm9kZSIsInJlcGxhY2VDaGlsZCIsIkpRTGl0ZSIsImFyZ0lzU3RyaW5nIiwidHJpbSIsImpxTGl0ZU1pbkVyciIsImpxTGl0ZUFkZE5vZGVzIiwianFMaXRlUmVhZHkiLCJqcUxpdGVDbG9uZSIsImpxTGl0ZURlYWxvYyIsIm9ubHlEZXNjZW5kYW50cyIsImNsZWFuRGF0YSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJqcUxpdGVPZmYiLCJ1bnN1cHBvcnRlZCIsImV4cGFuZG9TdG9yZSIsImpxTGl0ZUV4cGFuZG9TdG9yZSIsImV2ZW50cyIsImhhbmRsZSIsInJlbW92ZUhhbmRsZXIiLCJsaXN0ZW5lckZucyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJNT1VTRV9FVkVOVF9NQVAiLCJqcUxpdGVSZW1vdmVEYXRhIiwiZXhwYW5kb0lkIiwiJGRlc3Ryb3kiLCJjcmVhdGVJZk5lY2Vzc2FyeSIsImpxTGl0ZURhdGEiLCJpc1NpbXBsZVNldHRlciIsImlzU2ltcGxlR2V0dGVyIiwibWFzc0dldHRlciIsImpxTGl0ZUhhc0NsYXNzIiwic2VsZWN0b3IiLCJqcUxpdGVSZW1vdmVDbGFzcyIsImNzc0NsYXNzZXMiLCJzZXRBdHRyaWJ1dGUiLCJjc3NDbGFzcyIsImpxTGl0ZUFkZENsYXNzIiwiZXhpc3RpbmdDbGFzc2VzIiwicm9vdCIsImVsZW1lbnRzIiwianFMaXRlQ29udHJvbGxlciIsImpxTGl0ZUluaGVyaXRlZERhdGEiLCJkb2N1bWVudEVsZW1lbnQiLCJuYW1lcyIsIk5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVCIsImhvc3QiLCJqcUxpdGVFbXB0eSIsInJlbW92ZUNoaWxkIiwianFMaXRlUmVtb3ZlIiwia2VlcERhdGEiLCJqcUxpdGVEb2N1bWVudExvYWRlZCIsImFjdGlvbiIsIndpbiIsInJlYWR5U3RhdGUiLCJzZXRUaW1lb3V0Iiwib24iLCJ0cmlnZ2VyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldEJvb2xlYW5BdHRyTmFtZSIsImJvb2xlYW5BdHRyIiwiQk9PTEVBTl9BVFRSIiwiQk9PTEVBTl9FTEVNRU5UUyIsImdldEFsaWFzZWRBdHRyTmFtZSIsIkFMSUFTRURfQVRUUiIsImNyZWF0ZUV2ZW50SGFuZGxlciIsImV2ZW50SGFuZGxlciIsImV2ZW50IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsImV2ZW50Rm5zIiwiZXZlbnRGbnNMZW5ndGgiLCJpbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInN0b3BQcm9wYWdhdGlvbiIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwiaGFuZGxlcldyYXBwZXIiLCJzcGVjaWFsSGFuZGxlcldyYXBwZXIiLCJkZWZhdWx0SGFuZGxlcldyYXBwZXIiLCJlbGVtIiwiaGFuZGxlciIsInNwZWNpYWxNb3VzZUhhbmRsZXJXcmFwcGVyIiwidGFyZ2V0IiwicmVsYXRlZCIsInJlbGF0ZWRUYXJnZXQiLCJqcUxpdGVDb250YWlucyIsIiQkanFMaXRlUHJvdmlkZXIiLCIkZ2V0IiwiaGFzQ2xhc3MiLCJjbGFzc2VzIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImhhc2hLZXkiLCJuZXh0VWlkRm4iLCJvYmpUeXBlIiwiTmdNYXBTaGltIiwiX2tleXMiLCJfdmFsdWVzIiwiX2xhc3RLZXkiLCJfbGFzdEluZGV4Iiwic3RyaW5naWZ5Rm4iLCJGdW5jdGlvbiIsImV4dHJhY3RBcmdzIiwiZm5UZXh0IiwiU1RSSVBfQ09NTUVOVFMiLCJBUlJPV19BUkciLCJGTl9BUkdTIiwiYW5vbkZuIiwiYW5ub3RhdGUiLCIkaW5qZWN0IiwiYXJnRGVjbCIsImxhc3QiLCJGTl9BUkdfU1BMSVQiLCJGTl9BUkciLCJ1bmRlcnNjb3JlIiwibW9kdWxlc1RvTG9hZCIsInN1cHBvcnRPYmplY3QiLCJkZWxlZ2F0ZSIsInByb3ZpZGVyXyIsInByb3ZpZGVySW5qZWN0b3IiLCJpbnN0YW50aWF0ZSIsInByb3ZpZGVyQ2FjaGUiLCJwcm92aWRlclN1ZmZpeCIsImVuZm9yY2VSZXR1cm5WYWx1ZSIsInJlc3VsdCIsImluc3RhbmNlSW5qZWN0b3IiLCJmYWN0b3J5Rm4iLCJlbmZvcmNlIiwiJGluamVjdG9yIiwiaW5zdGFuY2VDYWNoZSIsInNlcnZpY2VOYW1lIiwiZGVjb3JGbiIsIm9yaWdQcm92aWRlciIsIm9yaWckZ2V0Iiwib3JpZ0luc3RhbmNlIiwiJGRlbGVnYXRlIiwibG9hZE1vZHVsZXMiLCJtb2R1bGVGbiIsInJ1bkludm9rZVF1ZXVlIiwiaW52b2tlQXJncyIsImxvYWRlZE1vZHVsZXMiLCJhbmd1bGFyTW9kdWxlIiwic3RhY2siLCJjcmVhdGVJbnRlcm5hbEluamVjdG9yIiwiY2FjaGUiLCJnZXRTZXJ2aWNlIiwiY2FsbGVyIiwiSU5TVEFOVElBVElORyIsImVyciIsInNoaWZ0IiwiaW5qZWN0aW9uQXJncyIsImxvY2FscyIsIiQkYW5ub3RhdGUiLCJpc0NsYXNzIiwiZnVuYyIsIm1zaWUiLCIkJG5nSXNDbGFzcyIsIlR5cGUiLCJjdG9yIiwiaGFzIiwiTmdNYXAiLCJwcm90b0luc3RhbmNlSW5qZWN0b3IiLCIkQW5jaG9yU2Nyb2xsUHJvdmlkZXIiLCJhdXRvU2Nyb2xsaW5nRW5hYmxlZCIsImRpc2FibGVBdXRvU2Nyb2xsaW5nIiwiJHdpbmRvdyIsIiRsb2NhdGlvbiIsIiRyb290U2NvcGUiLCJnZXRGaXJzdEFuY2hvciIsImxpc3QiLCJzb21lIiwiZ2V0WU9mZnNldCIsIm9mZnNldCIsInNjcm9sbCIsInlPZmZzZXQiLCJzdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJwb3NpdGlvbiIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImJvdHRvbSIsInNjcm9sbFRvIiwic2Nyb2xsSW50b1ZpZXciLCJlbGVtVG9wIiwidG9wIiwic2Nyb2xsQnkiLCJoYXNoIiwiZWxtIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50c0J5TmFtZSIsIm5ld1ZhbCIsIm9sZFZhbCIsIm1lcmdlQ2xhc3NlcyIsImV4dHJhY3RFbGVtZW50Tm9kZSIsIkVMRU1FTlRfTk9ERSIsInNwbGl0Q2xhc3NlcyIsImtsYXNzIiwicHJlcGFyZUFuaW1hdGVPcHRpb25zIiwib3B0aW9ucyIsIkJyb3dzZXIiLCIkbG9nIiwiJHNuaWZmZXIiLCJjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdCIsIm91dHN0YW5kaW5nUmVxdWVzdENvdW50Iiwib3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzIiwicG9wIiwiZ2V0SGFzaCIsInVybCIsInN1YnN0ciIsImNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlIiwicGVuZGluZ0xvY2F0aW9uIiwiZmlyZVN0YXRlT3JVcmxDaGFuZ2UiLCJjYWNoZVN0YXRlIiwiY2FjaGVkU3RhdGUiLCJnZXRDdXJyZW50U3RhdGUiLCJsYXN0Q2FjaGVkU3RhdGUiLCJsYXN0SGlzdG9yeVN0YXRlIiwicHJldkxhc3RIaXN0b3J5U3RhdGUiLCJsYXN0QnJvd3NlclVybCIsInVybENoYW5nZUxpc3RlbmVycyIsImxpc3RlbmVyIiwiaGlzdG9yeSIsImNsZWFyVGltZW91dCIsInBlbmRpbmdEZWZlcklkcyIsImlzTW9jayIsIiQkY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QiLCIkJGluY091dHN0YW5kaW5nUmVxdWVzdENvdW50Iiwibm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyIsImNhbGxiYWNrIiwiaHJlZiIsImJhc2VFbGVtZW50Iiwic3RhdGUiLCJzYW1lU3RhdGUiLCJzYW1lQmFzZSIsInN0cmlwSGFzaCIsInVybENoYW5nZUluaXQiLCJvblVybENoYW5nZSIsIiQkYXBwbGljYXRpb25EZXN0cm95ZWQiLCJvZmYiLCIkJGNoZWNrVXJsQ2hhbmdlIiwiYmFzZUhyZWYiLCJkZWZlciIsImRlbGF5IiwidGltZW91dElkIiwiY2FuY2VsIiwiZGVmZXJJZCIsIiRCcm93c2VyUHJvdmlkZXIiLCIkZG9jdW1lbnQiLCIkQ2FjaGVGYWN0b3J5UHJvdmlkZXIiLCJjYWNoZUZhY3RvcnkiLCJjYWNoZUlkIiwicmVmcmVzaCIsImVudHJ5IiwiZnJlc2hFbmQiLCJzdGFsZUVuZCIsIm4iLCJsaW5rIiwicCIsIm5leHRFbnRyeSIsInByZXZFbnRyeSIsImNhY2hlcyIsInNpemUiLCJzdGF0cyIsImlkIiwiY2FwYWNpdHkiLCJOdW1iZXIiLCJNQVhfVkFMVUUiLCJscnVIYXNoIiwicHV0IiwicmVtb3ZlIiwibHJ1RW50cnkiLCJyZW1vdmVBbGwiLCJkZXN0cm95IiwiJFRlbXBsYXRlQ2FjaGVQcm92aWRlciIsIiRjYWNoZUZhY3RvcnkiLCJVTklOSVRJQUxJWkVEX1ZBTFVFIiwiJENvbXBpbGVQcm92aWRlciIsIiQkc2FuaXRpemVVcmlQcm92aWRlciIsInBhcnNlSXNvbGF0ZUJpbmRpbmdzIiwiZGlyZWN0aXZlTmFtZSIsImlzQ29udHJvbGxlciIsIkxPQ0FMX1JFR0VYUCIsImJpbmRpbmdzIiwiZGVmaW5pdGlvbiIsInNjb3BlTmFtZSIsImJpbmRpbmdDYWNoZSIsIiRjb21waWxlTWluRXJyIiwibW9kZSIsImNvbGxlY3Rpb24iLCJvcHRpb25hbCIsImF0dHJOYW1lIiwicGFyc2VEaXJlY3RpdmVCaW5kaW5ncyIsImlzb2xhdGVTY29wZSIsImJpbmRUb0NvbnRyb2xsZXIiLCJhc3NlcnRWYWxpZERpcmVjdGl2ZU5hbWUiLCJnZXREaXJlY3RpdmVSZXF1aXJlIiwicmVxdWlyZSIsIlJFUVVJUkVfUFJFRklYX1JFR0VYUCIsImdldERpcmVjdGl2ZVJlc3RyaWN0IiwicmVzdHJpY3QiLCJoYXNEaXJlY3RpdmVzIiwiU3VmZml4IiwiQ09NTUVOVF9ESVJFQ1RJVkVfUkVHRVhQIiwiQ0xBU1NfRElSRUNUSVZFX1JFR0VYUCIsIkFMTF9PUl9OT1RISU5HX0FUVFJTIiwiRVZFTlRfSEFORExFUl9BVFRSX1JFR0VYUCIsInJlZ2lzdGVyRGlyZWN0aXZlIiwiZGlyZWN0aXZlRmFjdG9yeSIsIiRleGNlcHRpb25IYW5kbGVyIiwiZGlyZWN0aXZlcyIsInByaW9yaXR5IiwicmVnaXN0ZXJDb21wb25lbnQiLCJtYWtlSW5qZWN0YWJsZSIsInRFbGVtZW50IiwidEF0dHJzIiwiJGVsZW1lbnQiLCIkYXR0cnMiLCJ0ZW1wbGF0ZVVybCIsImRkbyIsImNvbnRyb2xsZXJBcyIsImlkZW50aWZpZXJGb3JDb250cm9sbGVyIiwidHJhbnNjbHVkZSIsImFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0IiwicmVnZXhwIiwiaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0IiwiZW5hYmxlZCIsInByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZCIsInN0cmljdENvbXBvbmVudEJpbmRpbmdzRW5hYmxlZCIsIlRUTCIsIm9uQ2hhbmdlc1R0bCIsImNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZENvbmZpZyIsImNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZCIsImNzc0NsYXNzRGlyZWN0aXZlc0VuYWJsZWRDb25maWciLCJjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkIiwiJGludGVycG9sYXRlIiwiJHRlbXBsYXRlUmVxdWVzdCIsIiRwYXJzZSIsIiRjb250cm9sbGVyIiwiJHNjZSIsIiRhbmltYXRlIiwiJCRzYW5pdGl6ZVVyaSIsImZsdXNoT25DaGFuZ2VzUXVldWUiLCJvbkNoYW5nZXNRdWV1ZSIsImVycm9ycyIsIkF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzVG9Db3B5IiwibCIsIiRhdHRyIiwiJCRlbGVtZW50Iiwic2V0U3BlY2lhbEF0dHIiLCJzcGVjaWFsQXR0ckhvbGRlciIsImF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGUiLCJyZW1vdmVOYW1lZEl0ZW0iLCJzZXROYW1lZEl0ZW0iLCJzYWZlQWRkQ2xhc3MiLCJjbGFzc05hbWUiLCIkY29tcGlsZU5vZGVzIiwidHJhbnNjbHVkZUZuIiwibWF4UHJpb3JpdHkiLCJpZ25vcmVEaXJlY3RpdmUiLCJwcmV2aW91c0NvbXBpbGVDb250ZXh0IiwiY29tcG9zaXRlTGlua0ZuIiwiY29tcGlsZU5vZGVzIiwiJCRhZGRTY29wZUNsYXNzIiwibmFtZXNwYWNlIiwiY2xvbmVDb25uZWN0Rm4iLCJuZWVkc05ld1Njb3BlIiwiJHBhcmVudCIsIiRuZXciLCJwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbiIsInRyYW5zY2x1ZGVDb250cm9sbGVycyIsImZ1dHVyZVBhcmVudEVsZW1lbnQiLCIkJGJvdW5kVHJhbnNjbHVkZSIsImRldGVjdE5hbWVzcGFjZUZvckNoaWxkRWxlbWVudHMiLCIkbGlua05vZGUiLCJ3cmFwVGVtcGxhdGUiLCJKUUxpdGVQcm90b3R5cGUiLCJjb250cm9sbGVyTmFtZSIsImluc3RhbmNlIiwiJCRhZGRTY29wZUluZm8iLCJwYXJlbnRFbGVtZW50Iiwibm9kZUxpc3QiLCIkcm9vdEVsZW1lbnQiLCJub2RlTGlua0ZuIiwiY2hpbGRMaW5rRm4iLCJjaGlsZFNjb3BlIiwiaWR4IiwiY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiIsInN0YWJsZU5vZGVMaXN0Iiwibm9kZUxpbmtGbkZvdW5kIiwibm9kZUxpc3RMZW5ndGgiLCJsaW5rRm5zIiwidHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQiLCJjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbiIsInRlbXBsYXRlT25UaGlzRWxlbWVudCIsImF0dHJzIiwibGlua0ZuRm91bmQiLCJub3RMaXZlTGlzdCIsIm1lcmdlQ29uc2VjdXRpdmVUZXh0Tm9kZXMiLCJjb2xsZWN0RGlyZWN0aXZlcyIsImFwcGx5RGlyZWN0aXZlc1RvTm9kZSIsInRlcm1pbmFsIiwic2libGluZyIsIm5vZGVWYWx1ZSIsInByZXZpb3VzQm91bmRUcmFuc2NsdWRlRm4iLCJib3VuZFRyYW5zY2x1ZGVGbiIsInRyYW5zY2x1ZGVkU2NvcGUiLCJjbG9uZUZuIiwiY29udHJvbGxlcnMiLCJjb250YWluaW5nU2NvcGUiLCIkJHRyYW5zY2x1ZGVkIiwiYm91bmRTbG90cyIsIiQkc2xvdHMiLCJzbG90TmFtZSIsImF0dHJzTWFwIiwiYWRkRGlyZWN0aXZlIiwiZGlyZWN0aXZlTm9ybWFsaXplIiwibk5hbWUiLCJuZ0F0dHJOYW1lIiwiaXNOZ0F0dHIiLCJuQXR0cnMiLCJhdHRyU3RhcnROYW1lIiwiYXR0ckVuZE5hbWUiLCJOR19BVFRSX0JJTkRJTkciLCJQUkVGSVhfUkVHRVhQIiwibXVsdGlFbGVtZW50TWF0Y2giLCJNVUxUSV9FTEVNRU5UX0RJUl9SRSIsImRpcmVjdGl2ZUlzTXVsdGlFbGVtZW50IiwiYWRkQXR0ckludGVycG9sYXRlRGlyZWN0aXZlIiwiYW5pbVZhbCIsImFkZFRleHRJbnRlcnBvbGF0ZURpcmVjdGl2ZSIsIk5PREVfVFlQRV9DT01NRU5UIiwiY29sbGVjdENvbW1lbnREaXJlY3RpdmVzIiwiYnlQcmlvcml0eSIsImdyb3VwU2NhbiIsImF0dHJTdGFydCIsImF0dHJFbmQiLCJkZXB0aCIsImdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyIiwibGlua0ZuIiwiY29tcGlsYXRpb25HZW5lcmF0b3IiLCJlYWdlciIsImNvbXBpbGVkIiwiY29tcGlsZU5vZGUiLCJ0ZW1wbGF0ZUF0dHJzIiwianFDb2xsZWN0aW9uIiwib3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlIiwicHJlTGlua0ZucyIsInBvc3RMaW5rRm5zIiwiYWRkTGlua0ZucyIsInByZSIsInBvc3QiLCJuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUiLCIkJGlzb2xhdGVTY29wZSIsImNsb25lQW5kQW5ub3RhdGVGbiIsImxpbmtOb2RlIiwiY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGUiLCJjbG9uZUF0dGFjaEZuIiwiaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUiLCJlbGVtZW50Q29udHJvbGxlcnMiLCJzY29wZVRvQ2hpbGQiLCJzbG90VHJhbnNjbHVkZUZuIiwiY29udHJvbGxlclNjb3BlIiwic2NvcGVCaW5kaW5nSW5mbyIsIm5ld1Njb3BlRGlyZWN0aXZlIiwiaXNTbG90RmlsbGVkIiwiY29udHJvbGxlckRpcmVjdGl2ZXMiLCJzZXR1cENvbnRyb2xsZXJzIiwidGVtcGxhdGVEaXJlY3RpdmUiLCIkJG9yaWdpbmFsRGlyZWN0aXZlIiwiJCRpc29sYXRlQmluZGluZ3MiLCJpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3MiLCJyZW1vdmVXYXRjaGVzIiwiJG9uIiwiY29udHJvbGxlckRpcmVjdGl2ZSIsIiQkYmluZGluZ3MiLCJiaW5kaW5nSW5mbyIsImNvbnRyb2xsZXJSZXN1bHQiLCJnZXRDb250cm9sbGVycyIsImNvbnRyb2xsZXJJbnN0YW5jZSIsIiRvbkNoYW5nZXMiLCJpbml0aWFsQ2hhbmdlcyIsIiRvbkluaXQiLCIkZG9DaGVjayIsIiRvbkRlc3Ryb3kiLCJpbnZva2VMaW5rRm4iLCIkcG9zdExpbmsiLCIkdGVtcGxhdGUiLCJkaXJlY3RpdmVWYWx1ZSIsInRlcm1pbmFsUHJpb3JpdHkiLCJub25UbGJUcmFuc2NsdWRlRGlyZWN0aXZlIiwiaGFzVHJhbnNjbHVkZURpcmVjdGl2ZSIsImhhc1RlbXBsYXRlIiwiJGNvbXBpbGVOb2RlIiwicmVwbGFjZURpcmVjdGl2ZSIsImNoaWxkVHJhbnNjbHVkZUZuIiwiZGlkU2NhbkZvck11bHRpcGxlVHJhbnNjbHVzaW9uIiwibWlnaHRIYXZlTXVsdGlwbGVUcmFuc2NsdXNpb25FcnJvciIsIiQkc3RhcnQiLCIkJGVuZCIsImFzc2VydE5vRHVwbGljYXRlIiwiJCR0bGIiLCJjYW5kaWRhdGVEaXJlY3RpdmUiLCJzY2FubmluZ0luZGV4IiwiJCRjcmVhdGVDb21tZW50IiwicmVwbGFjZVdpdGgiLCIkJHBhcmVudE5vZGUiLCJzbG90cyIsInNsb3RNYXAiLCJmaWxsZWRTbG90cyIsImVsZW1lbnRTZWxlY3RvciIsImNvbnRlbnRzIiwiZmlsbGVkIiwiJCRuZXdTY29wZSIsImRlbm9ybWFsaXplVGVtcGxhdGUiLCJyZW1vdmVDb21tZW50cyIsInRlbXBsYXRlTmFtZXNwYWNlIiwibmV3VGVtcGxhdGVBdHRycyIsInRlbXBsYXRlRGlyZWN0aXZlcyIsInVucHJvY2Vzc2VkRGlyZWN0aXZlcyIsIm1hcmtEaXJlY3RpdmVTY29wZSIsIm1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzIiwiY29tcGlsZVRlbXBsYXRlVXJsIiwiTWF0aCIsIm1heCIsImluaGVyaXRUeXBlIiwiZGF0YU5hbWUiLCJpbmhlcml0ZWREYXRhIiwicHJvcGVydHkiLCJjb250cm9sbGVyS2V5IiwiJHNjb3BlIiwiJHRyYW5zY2x1ZGUiLCJuZXdTY29wZSIsInREaXJlY3RpdmVzIiwic3RhcnRBdHRyTmFtZSIsImVuZEF0dHJOYW1lIiwibXVsdGlFbGVtZW50Iiwic3JjQXR0ciIsImRzdEF0dHIiLCIkc2V0IiwiYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4iLCJhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4iLCJsaW5rUXVldWUiLCJiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlIiwib3JpZ0FzeW5jRGlyZWN0aXZlIiwiZGVyaXZlZFN5bmNEaXJlY3RpdmUiLCJjb250ZW50IiwidGVtcFRlbXBsYXRlQXR0cnMiLCJiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlIiwibGlua1Jvb3RFbGVtZW50IiwiJCRkZXN0cm95ZWQiLCJvbGRDbGFzc2VzIiwiY2F0Y2giLCJpZ25vcmVDaGlsZExpbmtGbiIsImRpZmYiLCJ3aGF0IiwicHJldmlvdXNEaXJlY3RpdmUiLCJ3cmFwTW9kdWxlTmFtZUlmRGVmaW5lZCIsIm1vZHVsZU5hbWUiLCJ0ZXh0IiwiaW50ZXJwb2xhdGVGbiIsInRlbXBsYXRlTm9kZSIsInRlbXBsYXRlTm9kZVBhcmVudCIsImhhc0NvbXBpbGVQYXJlbnQiLCIkJGFkZEJpbmRpbmdDbGFzcyIsIiQkYWRkQmluZGluZ0luZm8iLCJleHByZXNzaW9ucyIsImdldFRydXN0ZWRDb250ZXh0IiwiYXR0ck5vcm1hbGl6ZWROYW1lIiwiSFRNTCIsIlJFU09VUkNFX1VSTCIsInRydXN0ZWRDb250ZXh0IiwibXVzdEhhdmVFeHByZXNzaW9uIiwiYWxsT3JOb3RoaW5nIiwiJCRvYnNlcnZlcnMiLCJuZXdWYWx1ZSIsIiQkaW50ZXIiLCIkJHNjb3BlIiwib2xkVmFsdWUiLCIkdXBkYXRlQ2xhc3MiLCJlbGVtZW50c1RvUmVtb3ZlIiwibmV3Tm9kZSIsImZpcnN0RWxlbWVudFRvUmVtb3ZlIiwicmVtb3ZlQ291bnQiLCJqMiIsImhhc0RhdGEiLCJhbm5vdGF0aW9uIiwic3RyaWN0QmluZGluZ3NDaGVjayIsInJlY29yZENoYW5nZXMiLCJjdXJyZW50VmFsdWUiLCJwcmV2aW91c1ZhbHVlIiwiJCRwb3N0RGlnZXN0IiwiY2hhbmdlcyIsInRyaWdnZXJPbkNoYW5nZXNIb29rIiwiU2ltcGxlQ2hhbmdlIiwicmVtb3ZlV2F0Y2hDb2xsZWN0aW9uIiwibGFzdFZhbHVlIiwicGFyZW50R2V0IiwicGFyZW50U2V0IiwiY29tcGFyZSIsInJlbW92ZVdhdGNoIiwiJG9ic2VydmUiLCJfVU5JTklUSUFMSVpFRF9WQUxVRSIsImxpdGVyYWwiLCJhc3NpZ24iLCJwYXJlbnRWYWx1ZVdhdGNoIiwicGFyZW50VmFsdWUiLCIkc3RhdGVmdWwiLCIkd2F0Y2hDb2xsZWN0aW9uIiwiZGVlcFdhdGNoIiwiaW5pdGlhbFZhbHVlIiwiU0lNUExFX0FUVFJfTkFNRSIsIiRub3JtYWxpemUiLCIkYWRkQ2xhc3MiLCJjbGFzc1ZhbCIsIiRyZW1vdmVDbGFzcyIsIm5ld0NsYXNzZXMiLCJ0b0FkZCIsInRva2VuRGlmZmVyZW5jZSIsInRvUmVtb3ZlIiwid3JpdGVBdHRyIiwiYm9vbGVhbktleSIsImFsaWFzZWRLZXkiLCJvYnNlcnZlciIsInRyaW1tZWRTcmNzZXQiLCJzcmNQYXR0ZXJuIiwicGF0dGVybiIsInJhd1VyaXMiLCJuYnJVcmlzV2l0aDJwYXJ0cyIsImZsb29yIiwiaW5uZXJJZHgiLCJsYXN0VHVwbGUiLCJyZW1vdmVBdHRyIiwibGlzdGVuZXJzIiwic3RhcnRTeW1ib2wiLCJlbmRTeW1ib2wiLCJiaW5kaW5nIiwiaXNvbGF0ZWQiLCJub1RlbXBsYXRlIiwiY29tbWVudCIsImNyZWF0ZUNvbW1lbnQiLCJwcmV2aW91cyIsImN1cnJlbnQiLCJTUEVDSUFMX0NIQVJTX1JFR0VYUCIsInN0cjEiLCJzdHIyIiwidmFsdWVzIiwidG9rZW5zMSIsInRva2VuczIiLCJvdXRlciIsInRva2VuIiwianFOb2RlcyIsImlkZW50IiwiQ05UUkxfUkVHIiwiJENvbnRyb2xsZXJQcm92aWRlciIsImdsb2JhbHMiLCJyZWdpc3RlciIsImFsbG93R2xvYmFscyIsImFkZElkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwiZXhwcmVzc2lvbiIsImxhdGVyIiwiJGNvbnRyb2xsZXJNaW5FcnIiLCJjb250cm9sbGVyUHJvdG90eXBlIiwiJERvY3VtZW50UHJvdmlkZXIiLCIkJElzRG9jdW1lbnRIaWRkZW5Qcm92aWRlciIsImNoYW5nZUxpc3RlbmVyIiwiaGlkZGVuIiwiZG9jIiwiJEV4Y2VwdGlvbkhhbmRsZXJQcm92aWRlciIsImV4Y2VwdGlvbiIsImNhdXNlIiwic2VyaWFsaXplVmFsdWUiLCJ2IiwidG9JU09TdHJpbmciLCIkSHR0cFBhcmFtU2VyaWFsaXplclByb3ZpZGVyIiwicGFyYW1zIiwiJEh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2VQcm92aWRlciIsInNlcmlhbGl6ZSIsInRvU2VyaWFsaXplIiwidG9wTGV2ZWwiLCJkZWZhdWx0SHR0cFJlc3BvbnNlVHJhbnNmb3JtIiwiaGVhZGVycyIsInRlbXBEYXRhIiwiSlNPTl9QUk9URUNUSU9OX1BSRUZJWCIsImNvbnRlbnRUeXBlIiwiaGFzSnNvbkNvbnRlbnRUeXBlIiwiQVBQTElDQVRJT05fSlNPTiIsImlzSnNvbkxpa2UiLCIkaHR0cE1pbkVyciIsImpzb25TdGFydCIsIkpTT05fU1RBUlQiLCJKU09OX0VORFMiLCJwYXJzZUhlYWRlcnMiLCJmaWxsSW5QYXJzZWQiLCJsaW5lIiwiaGVhZGVyVmFsIiwiaGVhZGVyS2V5IiwiaGVhZGVyc0dldHRlciIsImhlYWRlcnNPYmoiLCJ0cmFuc2Zvcm1EYXRhIiwic3RhdHVzIiwiZm5zIiwiaXNTdWNjZXNzIiwiJEh0dHBQcm92aWRlciIsImRlZmF1bHRzIiwidHJhbnNmb3JtUmVzcG9uc2UiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiZCIsImNvbW1vbiIsIkFjY2VwdCIsIkNPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OIiwicGF0Y2giLCJ4c3JmQ29va2llTmFtZSIsInhzcmZIZWFkZXJOYW1lIiwicGFyYW1TZXJpYWxpemVyIiwianNvbnBDYWxsYmFja1BhcmFtIiwidXNlQXBwbHlBc3luYyIsImludGVyY2VwdG9yRmFjdG9yaWVzIiwiaW50ZXJjZXB0b3JzIiwiJGJyb3dzZXIiLCIkaHR0cEJhY2tlbmQiLCIkJGNvb2tpZVJlYWRlciIsIiRxIiwiJGh0dHAiLCJyZXF1ZXN0Q29uZmlnIiwiY2hhaW5JbnRlcmNlcHRvcnMiLCJwcm9taXNlIiwidGhlbkZuIiwicmVqZWN0Rm4iLCJleGVjdXRlSGVhZGVyRm5zIiwiaGVhZGVyQ29udGVudCIsInByb2Nlc3NlZEhlYWRlcnMiLCJoZWFkZXJGbiIsImhlYWRlciIsInNlcnZlclJlcXVlc3QiLCJyZXFEYXRhIiwid2l0aENyZWRlbnRpYWxzIiwic2VuZFJlcSIsInJlc3BvbnNlIiwicmVzcCIsInJlamVjdCIsImRlZkhlYWRlck5hbWUiLCJsb3dlcmNhc2VEZWZIZWFkZXJOYW1lIiwicmVxSGVhZGVyTmFtZSIsImRlZkhlYWRlcnMiLCJyZXFIZWFkZXJzIiwiZGVmYXVsdEhlYWRlcnNJdGVyYXRpb24iLCJ1cHBlcmNhc2UiLCJyZXF1ZXN0SW50ZXJjZXB0b3JzIiwicmVzcG9uc2VJbnRlcmNlcHRvcnMiLCJyZXNvbHZlIiwicmV2ZXJzZWRJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInJlcXVlc3QiLCJyZXF1ZXN0RXJyb3IiLCJyZXNwb25zZUVycm9yIiwiZmluYWxseSIsImNyZWF0ZUFwcGx5SGFuZGxlcnMiLCJldmVudEhhbmRsZXJzIiwiYXBwbHlIYW5kbGVycyIsImNhbGxFdmVudEhhbmRsZXIiLCIkYXBwbHlBc3luYyIsIiQkcGhhc2UiLCJkb25lIiwiaGVhZGVyc1N0cmluZyIsInN0YXR1c1RleHQiLCJ4aHJTdGF0dXMiLCJyZXNvbHZlSHR0cFByb21pc2UiLCJyZXNvbHZlUHJvbWlzZSIsImRlZmVycmVkIiwicmVzb2x2ZVByb21pc2VXaXRoUmVzdWx0IiwicmVtb3ZlUGVuZGluZ1JlcSIsInBlbmRpbmdSZXF1ZXN0cyIsImNhY2hlZFJlc3AiLCJpc0pzb25wIiwiZ2V0VHJ1c3RlZFJlc291cmNlVXJsIiwiYnVpbGRVcmwiLCJzYW5pdGl6ZUpzb25wQ2FsbGJhY2tQYXJhbSIsImRlZmF1bHRDYWNoZSIsInhzcmZWYWx1ZSIsInVybElzU2FtZU9yaWdpbiIsInRpbWVvdXQiLCJyZXNwb25zZVR5cGUiLCJ1cGxvYWRFdmVudEhhbmRsZXJzIiwic2VyaWFsaXplZFBhcmFtcyIsImludGVyY2VwdG9yRmFjdG9yeSIsIiR4aHJGYWN0b3J5UHJvdmlkZXIiLCJYTUxIdHRwUmVxdWVzdCIsIiRIdHRwQmFja2VuZFByb3ZpZGVyIiwiJGpzb25wQ2FsbGJhY2tzIiwiJHhockZhY3RvcnkiLCJjcmVhdGVIdHRwQmFja2VuZCIsImNyZWF0ZVhociIsIiRicm93c2VyRGVmZXIiLCJjYWxsYmFja3MiLCJyYXdEb2N1bWVudCIsImpzb25wUmVxIiwiY2FsbGJhY2tQYXRoIiwic2NyaXB0IiwiYXN5bmMiLCJib2R5Iiwid2FzQ2FsbGVkIiwidGltZW91dFJlcXVlc3QiLCJqc29ucERvbmUiLCJ4aHIiLCJhYm9ydCIsImNvbXBsZXRlUmVxdWVzdCIsImNyZWF0ZUNhbGxiYWNrIiwiZ2V0UmVzcG9uc2UiLCJyZW1vdmVDYWxsYmFjayIsIm9wZW4iLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25sb2FkIiwicmVzcG9uc2VUZXh0IiwidXJsUmVzb2x2ZSIsInByb3RvY29sIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVxdWVzdEFib3J0ZWQiLCJyZXF1ZXN0VGltZW91dCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0IiwidXBsb2FkIiwic2VuZCIsIiRJbnRlcnBvbGF0ZVByb3ZpZGVyIiwiZXNjYXBlIiwiY2giLCJ1bmVzY2FwZVRleHQiLCJlc2NhcGVkU3RhcnRSZWdleHAiLCJlc2NhcGVkRW5kUmVnZXhwIiwiY29uc3RhbnRXYXRjaERlbGVnYXRlIiwib2JqZWN0RXF1YWxpdHkiLCJjb25zdGFudEludGVycCIsInVud2F0Y2giLCJwYXJzZVN0cmluZ2lmeUludGVyY2VwdG9yIiwiZ2V0VmFsdWUiLCIkaW50ZXJwb2xhdGVNaW5FcnIiLCJpbnRlcnIiLCJleHAiLCIkJHdhdGNoRGVsZWdhdGUiLCJlbmRJbmRleCIsInBhcnNlRm5zIiwidGV4dExlbmd0aCIsImV4cHJlc3Npb25Qb3NpdGlvbnMiLCJzdGFydFN5bWJvbExlbmd0aCIsImVuZFN5bWJvbExlbmd0aCIsInRocm93Tm9jb25jYXQiLCJjb21wdXRlIiwiZ2V0VHJ1c3RlZCIsIiR3YXRjaEdyb3VwIiwib2xkVmFsdWVzIiwiY3VyclZhbHVlIiwiJEludGVydmFsUHJvdmlkZXIiLCIkJHEiLCJpbnRlcnZhbCIsImNvdW50IiwiaW52b2tlQXBwbHkiLCJoYXNQYXJhbXMiLCJpdGVyYXRpb24iLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJza2lwQXBwbHkiLCIkJGludGVydmFsSWQiLCJub3RpZnkiLCJpbnRlcnZhbHMiLCJtYXJrUUV4Y2VwdGlvbkhhbmRsZWQiLCJlbmNvZGVQYXRoIiwic2VnbWVudHMiLCJwYXJzZUFic29sdXRlVXJsIiwiYWJzb2x1dGVVcmwiLCJsb2NhdGlvbk9iaiIsInBhcnNlZFVybCIsIiQkcHJvdG9jb2wiLCIkJGhvc3QiLCJob3N0bmFtZSIsIiQkcG9ydCIsInBvcnQiLCJERUZBVUxUX1BPUlRTIiwicGFyc2VBcHBVcmwiLCJET1VCTEVfU0xBU0hfUkVHRVgiLCIkbG9jYXRpb25NaW5FcnIiLCJwcmVmaXhlZCIsIiQkcGF0aCIsInBhdGhuYW1lIiwiJCRzZWFyY2giLCJzZWFyY2giLCIkJGhhc2giLCJzdGFydHNXaXRoIiwic3RyaXBCYXNlVXJsIiwiYmFzZSIsInRyaW1FbXB0eUhhc2giLCJzdHJpcEZpbGUiLCJsYXN0SW5kZXhPZiIsInNlcnZlckJhc2UiLCJMb2NhdGlvbkh0bWw1VXJsIiwiYXBwQmFzZSIsImFwcEJhc2VOb0ZpbGUiLCJiYXNlUHJlZml4IiwiJCRodG1sNSIsIiQkcGFyc2UiLCJwYXRoVXJsIiwiJCRjb21wb3NlIiwiJCR1cmwiLCIkJGFic1VybCIsIiQkdXJsVXBkYXRlZEJ5TG9jYXRpb24iLCIkJHBhcnNlTGlua1VybCIsInJlbEhyZWYiLCJhcHBVcmwiLCJwcmV2QXBwVXJsIiwicmV3cml0dGVuVXJsIiwiTG9jYXRpb25IYXNoYmFuZ1VybCIsImhhc2hQcmVmaXgiLCJ3aXRob3V0SGFzaFVybCIsIndpdGhvdXRCYXNlVXJsIiwiZmlyc3RQYXRoU2VnbWVudE1hdGNoIiwid2luZG93c0ZpbGVQYXRoRXhwIiwiTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwiLCJsb2NhdGlvbkdldHRlciIsImxvY2F0aW9uR2V0dGVyU2V0dGVyIiwicHJlcHJvY2VzcyIsIiRMb2NhdGlvblByb3ZpZGVyIiwiaHRtbDVNb2RlIiwicmVxdWlyZUJhc2UiLCJyZXdyaXRlTGlua3MiLCJzZXRCcm93c2VyVXJsV2l0aEZhbGxiYWNrIiwib2xkVXJsIiwib2xkU3RhdGUiLCIkJHN0YXRlIiwiYWZ0ZXJMb2NhdGlvbkNoYW5nZSIsIiRicm9hZGNhc3QiLCJhYnNVcmwiLCJMb2NhdGlvbk1vZGUiLCJpbml0aWFsVXJsIiwiSUdOT1JFX1VSSV9SRUdFWFAiLCJjdHJsS2V5IiwibWV0YUtleSIsInNoaWZ0S2V5Iiwid2hpY2giLCJidXR0b24iLCJhYnNIcmVmIiwicHJldmVudERlZmF1bHQiLCJpbml0aWFsaXppbmciLCJuZXdVcmwiLCJuZXdTdGF0ZSIsIiRkaWdlc3QiLCJjdXJyZW50UmVwbGFjZSIsIiQkcmVwbGFjZSIsInVybE9yU3RhdGVDaGFuZ2VkIiwiJExvZ1Byb3ZpZGVyIiwiZGVidWciLCJkZWJ1Z0VuYWJsZWQiLCJmbGFnIiwiZm9ybWF0RXJyb3IiLCJmb3JtYXRTdGFja1RyYWNlIiwic291cmNlVVJMIiwiY29uc29sZUxvZyIsImxvZ0ZuIiwibG9nIiwibmF2aWdhdG9yIiwidXNlckFnZW50Iiwid2FybiIsImdldFN0cmluZ1ZhbHVlIiwiaWZEZWZpbmVkIiwicGx1c0ZuIiwiciIsImlzU3RhdGVsZXNzIiwiJGZpbHRlciIsImZpbHRlck5hbWUiLCJpc1B1cmUiLCJwYXJlbnRJc1B1cmUiLCJBU1QiLCJNZW1iZXJFeHByZXNzaW9uIiwiY29tcHV0ZWQiLCJVbmFyeUV4cHJlc3Npb24iLCJQVVJJVFlfQUJTT0xVVEUiLCJCaW5hcnlFeHByZXNzaW9uIiwib3BlcmF0b3IiLCJDYWxsRXhwcmVzc2lvbiIsIlBVUklUWV9SRUxBVElWRSIsImZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMiLCJhc3QiLCJhbGxDb25zdGFudHMiLCJhcmdzVG9XYXRjaCIsImlzU3RhdGVsZXNzRmlsdGVyIiwiYXN0SXNQdXJlIiwiUHJvZ3JhbSIsImV4cHIiLCJMaXRlcmFsIiwidG9XYXRjaCIsImFyZ3VtZW50IiwibGVmdCIsInJpZ2h0IiwiTG9naWNhbEV4cHJlc3Npb24iLCJDb25kaXRpb25hbEV4cHJlc3Npb24iLCJhbHRlcm5hdGUiLCJjb25zZXF1ZW50IiwiSWRlbnRpZmllciIsIm9iamVjdCIsImNhbGxlZSIsIkFzc2lnbm1lbnRFeHByZXNzaW9uIiwiQXJyYXlFeHByZXNzaW9uIiwiT2JqZWN0RXhwcmVzc2lvbiIsInByb3BlcnRpZXMiLCJUaGlzRXhwcmVzc2lvbiIsIkxvY2Fsc0V4cHJlc3Npb24iLCJnZXRJbnB1dHMiLCJsYXN0RXhwcmVzc2lvbiIsImlzQXNzaWduYWJsZSIsImFzc2lnbmFibGVBU1QiLCJOR1ZhbHVlUGFyYW1ldGVyIiwiaXNMaXRlcmFsIiwiaXNDb25zdGFudCIsIkFTVENvbXBpbGVyIiwiQVNUSW50ZXJwcmV0ZXIiLCJQYXJzZXIiLCJsZXhlciIsImFzdENvbXBpbGVyIiwiY3NwIiwiZ2V0VmFsdWVPZiIsIm9iamVjdFZhbHVlT2YiLCIkUGFyc2VQcm92aWRlciIsImlkZW50U3RhcnQiLCJpZGVudENvbnRpbnVlIiwibGl0ZXJhbHMiLCJ0cnVlIiwiZmFsc2UiLCJudWxsIiwiYWRkTGl0ZXJhbCIsImxpdGVyYWxOYW1lIiwibGl0ZXJhbFZhbHVlIiwic2V0SWRlbnRpZmllckZucyIsImlkZW50aWZpZXJTdGFydCIsImlkZW50aWZpZXJDb250aW51ZSIsImludGVyY2VwdG9yRm4iLCJwYXJzZWRFeHByZXNzaW9uIiwib25lVGltZSIsImNhY2hlS2V5IiwiTGV4ZXIiLCIkcGFyc2VPcHRpb25zIiwib25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlIiwib25lVGltZVdhdGNoRGVsZWdhdGUiLCJpbnB1dHMiLCJpbnB1dHNXYXRjaERlbGVnYXRlIiwiYWRkSW50ZXJjZXB0b3IiLCJleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrIiwib2xkVmFsdWVPZlZhbHVlIiwiY29tcGFyZU9iamVjdElkZW50aXR5IiwicHJldHR5UHJpbnRFeHByZXNzaW9uIiwibGFzdFJlc3VsdCIsImlucHV0RXhwcmVzc2lvbnMiLCJvbGRJbnB1dFZhbHVlT2YiLCJuZXdJbnB1dFZhbHVlIiwib2xkSW5wdXRWYWx1ZU9mVmFsdWVzIiwib2xkSW5wdXRWYWx1ZXMiLCJjaGFuZ2VkIiwib25lVGltZVdhdGNoIiwib25lVGltZUxpc3RlbmVyIiwib2xkIiwiaXNBbGxEZWZpbmVkIiwiYWxsRGVmaW5lZCIsIndhdGNoRGVsZWdhdGUiLCJ1c2VJbnB1dHMiLCJyZWd1bGFyV2F0Y2giLCJzIiwibm9VbnNhZmVFdmFsIiwiaXNJZGVudGlmaWVyU3RhcnQiLCJpc0lkZW50aWZpZXJDb250aW51ZSIsIiRRUHJvdmlkZXIiLCJlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyIsInFGYWN0b3J5IiwiJCRRUHJvdmlkZXIiLCJuZXh0VGljayIsImV4Y2VwdGlvbkhhbmRsZXIiLCJEZWZlcnJlZCIsIlByb21pc2UiLCJyZWplY3RQcm9taXNlIiwicHJvZ3Jlc3MiLCJub3RpZnlQcm9taXNlIiwicHJvY2Vzc1F1ZXVlIiwicGVuZGluZyIsInByb2Nlc3NTY2hlZHVsZWQiLCJtYXJrUVN0YXRlRXhjZXB0aW9uSGFuZGxlZCIsInF1ZXVlU2l6ZSIsInByb2Nlc3NDaGVja3MiLCJjaGVja1F1ZXVlIiwidG9DaGVjayIsImlzU3RhdGVFeGNlcHRpb25IYW5kbGVkIiwiZXJyb3JNZXNzYWdlIiwic2NoZWR1bGVQcm9jZXNzUXVldWUiLCIkJHJlamVjdCIsIiRxTWluRXJyIiwiJCRyZXNvbHZlIiwiZG9SZXNvbHZlIiwiZG9SZWplY3QiLCJkb05vdGlmeSIsImhhbmRsZUNhbGxiYWNrIiwicmVzb2x2ZXIiLCJjYWxsYmFja091dHB1dCIsIndoZW4iLCJlcnJiYWNrIiwicHJvZ3Jlc3NCYWNrIiwicHJvbWlzZXMiLCJjb3VudGVyIiwicmVzdWx0cyIsInJhY2UiLCIkUSIsInJlc29sdmVGbiIsIlR5cGVFcnJvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsInB1ciIsInEiLCIkJFJBRlByb3ZpZGVyIiwiJHRpbWVvdXQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIiwid2Via2l0Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicmFmU3VwcG9ydGVkIiwicmFmIiwidGltZXIiLCJzdXBwb3J0ZWQiLCIkUm9vdFNjb3BlUHJvdmlkZXIiLCJjcmVhdGVDaGlsZFNjb3BlQ2xhc3MiLCJDaGlsZFNjb3BlIiwiJCR3YXRjaGVycyIsIiQkbmV4dFNpYmxpbmciLCIkJGNoaWxkSGVhZCIsIiQkY2hpbGRUYWlsIiwiJCRsaXN0ZW5lcnMiLCIkJGxpc3RlbmVyQ291bnQiLCIkJHdhdGNoZXJzQ291bnQiLCIkaWQiLCIkJENoaWxkU2NvcGUiLCIkcm9vdFNjb3BlTWluRXJyIiwibGFzdERpcnR5V2F0Y2giLCJhcHBseUFzeW5jSWQiLCJkaWdlc3RUdGwiLCJkZXN0cm95Q2hpbGRTY29wZSIsIiRldmVudCIsImN1cnJlbnRTY29wZSIsImNsZWFuVXBTY29wZSIsIiQkcHJldlNpYmxpbmciLCIkcm9vdCIsIlNjb3BlIiwiYmVnaW5QaGFzZSIsInBoYXNlIiwiY2xlYXJQaGFzZSIsImluY3JlbWVudFdhdGNoZXJzQ291bnQiLCJkZWNyZW1lbnRMaXN0ZW5lckNvdW50IiwiaW5pdFdhdGNoVmFsIiwiZmx1c2hBcHBseUFzeW5jIiwiYXBwbHlBc3luY1F1ZXVlIiwic2NoZWR1bGVBcHBseUFzeW5jIiwiaXNvbGF0ZSIsImNoaWxkIiwid2F0Y2hFeHAiLCJ3YXRjaGVyIiwiZXEiLCIkJGRpZ2VzdFdhdGNoSW5kZXgiLCJ3YXRjaEV4cHJlc3Npb25zIiwid2F0Y2hHcm91cEFjdGlvbiIsImNoYW5nZVJlYWN0aW9uU2NoZWR1bGVkIiwiZmlyc3RSdW4iLCJuZXdWYWx1ZXMiLCJkZXJlZ2lzdGVyRm5zIiwic2hvdWxkQ2FsbCIsInVud2F0Y2hGbiIsIiR3YXRjaENvbGxlY3Rpb25JbnRlcmNlcHRvciIsIl92YWx1ZSIsIm5ld0xlbmd0aCIsIm5ld0l0ZW0iLCJvbGRJdGVtIiwiaW50ZXJuYWxBcnJheSIsIm9sZExlbmd0aCIsImNoYW5nZURldGVjdGVkIiwiaW50ZXJuYWxPYmplY3QiLCIkd2F0Y2hDb2xsZWN0aW9uQWN0aW9uIiwiaW5pdFJ1biIsInZlcnlPbGRWYWx1ZSIsInRyYWNrVmVyeU9sZFZhbHVlIiwiY2hhbmdlRGV0ZWN0b3IiLCJ3YXRjaCIsIndhdGNoZXJzIiwiZGlydHkiLCJuZXh0IiwibG9nSWR4IiwiYXN5bmNUYXNrIiwidHRsIiwid2F0Y2hMb2ciLCJhc3luY1F1ZXVlUG9zaXRpb24iLCJhc3luY1F1ZXVlIiwidHJhdmVyc2VTY29wZXNMb29wIiwibXNnIiwicG9zdERpZ2VzdFF1ZXVlUG9zaXRpb24iLCJwb3N0RGlnZXN0UXVldWUiLCJldmVudE5hbWUiLCIkZXZhbCIsIiRhcHBseUFzeW5jRXhwcmVzc2lvbiIsIm5hbWVkTGlzdGVuZXJzIiwiaW5kZXhPZkxpc3RlbmVyIiwiJGVtaXQiLCJ0YXJnZXRTY29wZSIsImxpc3RlbmVyQXJncyIsIiQkYXN5bmNRdWV1ZSIsIiQkcG9zdERpZ2VzdFF1ZXVlIiwiJCRhcHBseUFzeW5jUXVldWUiLCIkJFNhbml0aXplVXJpUHJvdmlkZXIiLCJ1cmkiLCJpc0ltYWdlIiwibm9ybWFsaXplZFZhbCIsInJlZ2V4Iiwic25ha2VUb0NhbWVsIiwiVU5ERVJTQ09SRV9MT1dFUkNBU0VfUkVHRVhQIiwiYWRqdXN0TWF0Y2hlciIsIm1hdGNoZXIiLCIkc2NlTWluRXJyIiwiZXNjYXBlRm9yUmVnZXhwIiwiYWRqdXN0TWF0Y2hlcnMiLCJtYXRjaGVycyIsImFkanVzdGVkTWF0Y2hlcnMiLCIkU2NlRGVsZWdhdGVQcm92aWRlciIsIlNDRV9DT05URVhUUyIsInJlc291cmNlVXJsV2hpdGVsaXN0IiwicmVzb3VyY2VVcmxCbGFja2xpc3QiLCJtYXRjaFVybCIsImlzUmVzb3VyY2VVcmxBbGxvd2VkQnlQb2xpY3kiLCJhbGxvd2VkIiwiZ2VuZXJhdGVIb2xkZXJUeXBlIiwiQmFzZSIsImhvbGRlclR5cGUiLCJ0cnVzdGVkVmFsdWUiLCIkJHVud3JhcFRydXN0ZWRWYWx1ZSIsInRydXN0QXMiLCJDb25zdHJ1Y3RvciIsImJ5VHlwZSIsIm1heWJlVHJ1c3RlZCIsInRydXN0ZWRWYWx1ZUhvbGRlckJhc2UiLCJodG1sU2FuaXRpemVyIiwiQ1NTIiwiVVJMIiwiSlMiLCIkU2NlUHJvdmlkZXIiLCIkc2NlRGVsZWdhdGUiLCJzY2UiLCJpc0VuYWJsZWQiLCJwYXJzZUFzIiwiZW51bVZhbHVlIiwibE5hbWUiLCIkU25pZmZlclByb3ZpZGVyIiwiZXZlbnRTdXBwb3J0IiwiaXNOdyIsIm53IiwicHJvY2VzcyIsImlzQ2hyb21lUGFja2FnZWRBcHAiLCJjaHJvbWUiLCJhcHAiLCJydW50aW1lIiwiaGFzSGlzdG9yeVB1c2hTdGF0ZSIsInB1c2hTdGF0ZSIsImFuZHJvaWQiLCJib3hlZSIsImJvZHlTdHlsZSIsInRyYW5zaXRpb25zIiwiYW5pbWF0aW9ucyIsImhhc0V2ZW50IiwiZGl2RWxtIiwiJFRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyIiwiaHR0cE9wdGlvbnMiLCIkdGVtcGxhdGVDYWNoZSIsImhhbmRsZVJlcXVlc3RGbiIsInRwbCIsImlnbm9yZVJlcXVlc3RFcnJvciIsImhhbmRsZUVycm9yIiwiJHRlbXBsYXRlUmVxdWVzdE1pbkVyciIsInRvdGFsUGVuZGluZ1JlcXVlc3RzIiwidHJhbnNmb3JtZXIiLCIkJFRlc3RhYmlsaXR5UHJvdmlkZXIiLCJ0ZXN0YWJpbGl0eSIsImZpbmRCaW5kaW5ncyIsIm9wdF9leGFjdE1hdGNoIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIm1hdGNoZXMiLCJkYXRhQmluZGluZyIsImJpbmRpbmdOYW1lIiwiZmluZE1vZGVscyIsInByZWZpeGVzIiwiYXR0cmlidXRlRXF1YWxzIiwiZ2V0TG9jYXRpb24iLCJzZXRMb2NhdGlvbiIsIndoZW5TdGFibGUiLCIkVGltZW91dFByb3ZpZGVyIiwiZGVmZXJyZWRzIiwiJCR0aW1lb3V0SWQiLCJ1cmxQYXJzaW5nTm9kZSIsInJlcXVlc3RVcmwiLCJvcmlnaW5VcmwiLCIkV2luZG93UHJvdmlkZXIiLCIkJENvb2tpZVJlYWRlciIsInNhZmVHZXRDb29raWUiLCJjb29raWUiLCJzYWZlRGVjb2RlVVJJQ29tcG9uZW50IiwibGFzdENvb2tpZXMiLCJsYXN0Q29va2llU3RyaW5nIiwiY29va2llQXJyYXkiLCJjdXJyZW50Q29va2llU3RyaW5nIiwiJCRDb29raWVSZWFkZXJQcm92aWRlciIsIiRGaWx0ZXJQcm92aWRlciIsImZpbHRlcnMiLCJzdWZmaXgiLCJjdXJyZW5jeUZpbHRlciIsImRhdGVGaWx0ZXIiLCJmaWx0ZXJGaWx0ZXIiLCJqc29uRmlsdGVyIiwibGltaXRUb0ZpbHRlciIsImxvd2VyY2FzZUZpbHRlciIsIm51bWJlckZpbHRlciIsIm9yZGVyQnlGaWx0ZXIiLCJ1cHBlcmNhc2VGaWx0ZXIiLCJjb21wYXJhdG9yIiwiYW55UHJvcGVydHlLZXkiLCJwcmVkaWNhdGVGbiIsIm1hdGNoQWdhaW5zdEFueVByb3AiLCJleHByZXNzaW9uVHlwZSIsImdldFR5cGVGb3JGaWx0ZXIiLCJjcmVhdGVQcmVkaWNhdGVGbiIsInNob3VsZE1hdGNoUHJpbWl0aXZlcyIsImFjdHVhbCIsImV4cGVjdGVkIiwiZGVlcENvbXBhcmUiLCJkb250TWF0Y2hXaG9sZU9iamVjdCIsImFjdHVhbFR5cGUiLCJleHBlY3RlZFR5cGUiLCJleHBlY3RlZFZhbCIsIm1hdGNoQW55UHJvcGVydHkiLCIkbG9jYWxlIiwiZm9ybWF0cyIsIk5VTUJFUl9GT1JNQVRTIiwiYW1vdW50IiwiY3VycmVuY3lTeW1ib2wiLCJmcmFjdGlvblNpemUiLCJDVVJSRU5DWV9TWU0iLCJQQVRURVJOUyIsIm1heEZyYWMiLCJmb3JtYXROdW1iZXIiLCJHUk9VUF9TRVAiLCJERUNJTUFMX1NFUCIsIm51bWJlciIsIm51bVN0ciIsImRpZ2l0cyIsIm51bWJlck9mSW50ZWdlckRpZ2l0cyIsInplcm9zIiwiZXhwb25lbnQiLCJaRVJPX0NIQVIiLCJNQVhfRElHSVRTIiwicm91bmROdW1iZXIiLCJwYXJzZWROdW1iZXIiLCJtaW5GcmFjIiwiZnJhY3Rpb25MZW4iLCJtaW4iLCJyb3VuZEF0IiwiZGlnaXQiLCJrIiwiY2FycnkiLCJyZWR1Y2VSaWdodCIsImdyb3VwU2VwIiwiZGVjaW1hbFNlcCIsImlzTmFOIiwiaXNJbmZpbml0eSIsImlzRmluaXRlIiwiaXNaZXJvIiwiYWJzIiwiZm9ybWF0dGVkVGV4dCIsImludGVnZXJMZW4iLCJkZWNpbWFscyIsInJlZHVjZSIsImdyb3VwcyIsImxnU2l6ZSIsImdTaXplIiwibmVnUHJlIiwibmVnU3VmIiwicG9zUHJlIiwicG9zU3VmIiwicGFkTnVtYmVyIiwibnVtIiwibmVnV3JhcCIsIm5lZyIsImRhdGVHZXR0ZXIiLCJkYXRlU3RyR2V0dGVyIiwic2hvcnRGb3JtIiwic3RhbmRBbG9uZSIsInRpbWVab25lR2V0dGVyIiwiem9uZSIsInBhZGRlZFpvbmUiLCJnZXRGaXJzdFRodXJzZGF5T2ZZZWFyIiwieWVhciIsImRheU9mV2Vla09uRmlyc3QiLCJnZXREYXkiLCJnZXRUaHVyc2RheVRoaXNXZWVrIiwiZGF0ZXRpbWUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsIndlZWtHZXR0ZXIiLCJmaXJzdFRodXJzIiwidGhpc1RodXJzIiwicm91bmQiLCJhbXBtR2V0dGVyIiwiZ2V0SG91cnMiLCJBTVBNUyIsImVyYUdldHRlciIsIkVSQVMiLCJsb25nRXJhR2V0dGVyIiwiRVJBTkFNRVMiLCJqc29uU3RyaW5nVG9EYXRlIiwic3RyaW5nIiwiUl9JU084NjAxX1NUUiIsInR6SG91ciIsInR6TWluIiwiZGF0ZVNldHRlciIsInNldFVUQ0Z1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJ0aW1lU2V0dGVyIiwic2V0VVRDSG91cnMiLCJzZXRIb3VycyIsIm0iLCJtcyIsInBhcnNlRmxvYXQiLCJmb3JtYXQiLCJEQVRFVElNRV9GT1JNQVRTIiwiTlVNQkVSX1NUUklORyIsIkRBVEVfRk9STUFUU19TUExJVCIsIkRBVEVfRk9STUFUUyIsInNwYWNpbmciLCJpbnB1dCIsImxpbWl0IiwiYmVnaW4iLCJJbmZpbml0eSIsInNsaWNlRm4iLCJlbmQiLCJwcm9jZXNzUHJlZGljYXRlcyIsInNvcnRQcmVkaWNhdGVzIiwicHJlZGljYXRlIiwiZGVzY2VuZGluZyIsIm9iamVjdFZhbHVlIiwiZ2V0UHJlZGljYXRlVmFsdWUiLCJkZWZhdWx0Q29tcGFyZSIsInYxIiwidjIiLCJ0eXBlMSIsInR5cGUyIiwidmFsdWUxIiwidmFsdWUyIiwic29ydFByZWRpY2F0ZSIsInJldmVyc2VPcmRlciIsImNvbXBhcmVGbiIsImdldENvbXBhcmlzb25PYmplY3QiLCJ0aWVCcmVha2VyIiwicHJlZGljYXRlVmFsdWVzIiwicHJlZGljYXRlcyIsImRvQ29tcGFyaXNvbiIsImNvbXBhcmVWYWx1ZXMiLCJuZ0RpcmVjdGl2ZSIsIm51bGxGb3JtUmVuYW1lQ29udHJvbCIsImNvbnRyb2wiLCIkbmFtZSIsIkZvcm1Db250cm9sbGVyIiwiJCRjb250cm9scyIsIiRlcnJvciIsIiQkc3VjY2VzcyIsIiRwZW5kaW5nIiwibmdGb3JtIiwiJGRpcnR5IiwiJHByaXN0aW5lIiwiJHZhbGlkIiwiJGludmFsaWQiLCIkc3VibWl0dGVkIiwiJCRwYXJlbnRGb3JtIiwibnVsbEZvcm1DdHJsIiwiJCRhbmltYXRlIiwic2V0dXBWYWxpZGl0eSIsIiQkY2xhc3NDYWNoZSIsIklOVkFMSURfQ0xBU1MiLCJWQUxJRF9DTEFTUyIsImFkZFNldFZhbGlkaXR5TWV0aG9kIiwiY3JlYXRlQW5kU2V0IiwiY3RybCIsInVuc2V0QW5kQ2xlYW51cCIsInVuc2V0IiwiaXNPYmplY3RFbXB0eSIsImNhY2hlZFRvZ2dsZUNsYXNzIiwic3dpdGNoVmFsdWUiLCJ0b2dnbGVWYWxpZGF0aW9uQ3NzIiwidmFsaWRhdGlvbkVycm9yS2V5IiwiaXNWYWxpZCIsImNsYXp6IiwiJHNldFZhbGlkaXR5IiwiUEVORElOR19DTEFTUyIsImNvbWJpbmVkU3RhdGUiLCJzdHJpbmdCYXNlZElucHV0VHlwZSIsIiRmb3JtYXR0ZXJzIiwiJGlzRW1wdHkiLCJ0ZXh0SW5wdXRUeXBlIiwiYmFzZUlucHV0VHlwZSIsImNvbXBvc2luZyIsImV2IiwibmdUcmltIiwiJHZpZXdWYWx1ZSIsIiQkaGFzTmF0aXZlVmFsaWRhdG9ycyIsIiRzZXRWaWV3VmFsdWUiLCJkZWZlckxpc3RlbmVyIiwib3JpZ1ZhbHVlIiwia2V5Q29kZSIsIlBBUlRJQUxfVkFMSURBVElPTl9UWVBFUyIsIlBBUlRJQUxfVkFMSURBVElPTl9FVkVOVFMiLCJ2YWxpZGl0eSIsIlZBTElESVRZX1NUQVRFX1BST1BFUlRZIiwib3JpZ0JhZElucHV0IiwiYmFkSW5wdXQiLCJvcmlnVHlwZU1pc21hdGNoIiwidHlwZU1pc21hdGNoIiwiJHJlbmRlciIsIndlZWtQYXJzZXIiLCJpc29XZWVrIiwiZXhpc3RpbmdEYXRlIiwiV0VFS19SRUdFWFAiLCJ3ZWVrIiwiaG91cnMiLCJzZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwiYWRkRGF5cyIsImdldFNlY29uZHMiLCJnZXRNaWxsaXNlY29uZHMiLCJjcmVhdGVEYXRlUGFyc2VyIiwibWFwcGluZyIsImlzbyIsIklTT19EQVRFX1JFR0VYUCIsInl5eXkiLCJNTSIsImRkIiwiSEgiLCJtbSIsInNzIiwic3NzIiwicGFydCIsImNyZWF0ZURhdGVJbnB1dFR5cGUiLCJwYXJzZURhdGUiLCJpc1ZhbGlkRGF0ZSIsInBhcnNlT2JzZXJ2ZWREYXRlVmFsdWUiLCJiYWRJbnB1dENoZWNrZXIiLCJwcmV2aW91c0RhdGUiLCIkb3B0aW9ucyIsImdldE9wdGlvbiIsIiQkcGFyc2VyTmFtZSIsIiRwYXJzZXJzIiwicGFyc2VkRGF0ZSIsIm5nTW9kZWxNaW5FcnIiLCJuZ01pbiIsIm1pblZhbCIsIiR2YWxpZGF0b3JzIiwiJHZhbGlkYXRlIiwibmdNYXgiLCJtYXhWYWwiLCJudW1iZXJGb3JtYXR0ZXJQYXJzZXIiLCJOVU1CRVJfUkVHRVhQIiwicGFyc2VOdW1iZXJBdHRyVmFsIiwiaXNOdW1iZXJJbnRlZ2VyIiwiY291bnREZWNpbWFscyIsIm51bVN0cmluZyIsImRlY2ltYWxTeW1ib2xJbmRleCIsImlzVmFsaWRGb3JTdGVwIiwidmlld1ZhbHVlIiwic3RlcEJhc2UiLCJzdGVwIiwiaXNOb25JbnRlZ2VyVmFsdWUiLCJpc05vbkludGVnZXJTdGVwQmFzZSIsImlzTm9uSW50ZWdlclN0ZXAiLCJ2YWx1ZURlY2ltYWxzIiwic3RlcEJhc2VEZWNpbWFscyIsInN0ZXBEZWNpbWFscyIsImRlY2ltYWxDb3VudCIsIm11bHRpcGxpZXIiLCJwb3ciLCJudW1iZXJJbnB1dFR5cGUiLCJuZ1N0ZXAiLCJzdGVwVmFsIiwibW9kZWxWYWx1ZSIsInJhbmdlSW5wdXRUeXBlIiwic2V0SW5pdGlhbFZhbHVlQW5kT2JzZXJ2ZXIiLCJodG1sQXR0ck5hbWUiLCJjaGFuZ2VGbiIsIm1pbkNoYW5nZSIsIiRtb2RlbFZhbHVlIiwic3VwcG9ydHNSYW5nZSIsImVsVmFsIiwibWF4Q2hhbmdlIiwic3RlcENoYW5nZSIsImhhc01pbkF0dHIiLCJoYXNNYXhBdHRyIiwiaGFzU3RlcEF0dHIiLCJvcmlnaW5hbFJlbmRlciIsInJhbmdlVW5kZXJmbG93IiwicmFuZ2VPdmVyZmxvdyIsInN0ZXBNaXNtYXRjaCIsInVybElucHV0VHlwZSIsIlVSTF9SRUdFWFAiLCJlbWFpbElucHV0VHlwZSIsImVtYWlsIiwiRU1BSUxfUkVHRVhQIiwicmFkaW9JbnB1dFR5cGUiLCJkb1RyaW0iLCJjaGVja2VkIiwicGFyc2VDb25zdGFudEV4cHIiLCJwYXJzZUZuIiwiY2hlY2tib3hJbnB1dFR5cGUiLCJ0cnVlVmFsdWUiLCJuZ1RydWVWYWx1ZSIsImZhbHNlVmFsdWUiLCJuZ0ZhbHNlVmFsdWUiLCJjbGFzc0RpcmVjdGl2ZSIsImFycmF5RGlmZmVyZW5jZSIsImNsYXNzU3RyaW5nIiwidG9DbGFzc1N0cmluZyIsImNsYXNzVmFsdWUiLCJ0b0ZsYXRWYWx1ZSIsImZsYXRWYWx1ZSIsImhhc1VuZGVmaW5lZCIsImluZGV4V2F0Y2hFeHByZXNzaW9uIiwiYWRkQ2xhc3NlcyIsImRpZ2VzdENsYXNzQ291bnRzIiwicmVtb3ZlQ2xhc3NlcyIsInVwZGF0ZUNsYXNzZXMiLCJvbGRDbGFzc1N0cmluZyIsIm5ld0NsYXNzU3RyaW5nIiwib2xkQ2xhc3NBcnJheSIsIm5ld0NsYXNzQXJyYXkiLCJ0b1JlbW92ZUFycmF5IiwidG9BZGRBcnJheSIsInRvUmVtb3ZlU3RyaW5nIiwidG9BZGRTdHJpbmciLCJjbGFzc0FycmF5IiwiY2xhc3Nlc1RvVXBkYXRlIiwiY2xhc3NDb3VudHMiLCJuZ0NsYXNzSW5kZXhXYXRjaEFjdGlvbiIsIm5ld01vZHVsbyIsIm9sZE1vZHVsbyIsIm5nQ2xhc3NPbmVUaW1lV2F0Y2hBY3Rpb24iLCJuZXdDbGFzc1ZhbHVlIiwibmdDbGFzc1dhdGNoQWN0aW9uIiwiaXNPbmVUaW1lIiwid2F0Y2hJbnRlcmNlcHRvciIsIndhdGNoRXhwcmVzc2lvbiIsIndhdGNoQWN0aW9uIiwiJGluZGV4IiwiTmdNb2RlbENvbnRyb2xsZXIiLCIkJHJhd01vZGVsVmFsdWUiLCIkYXN5bmNWYWxpZGF0b3JzIiwiJHZpZXdDaGFuZ2VMaXN0ZW5lcnMiLCIkdW50b3VjaGVkIiwiJHRvdWNoZWQiLCJkZWZhdWx0TW9kZWxPcHRpb25zIiwiJCRwYXJzZWROZ01vZGVsIiwibmdNb2RlbCIsIiQkcGFyc2VkTmdNb2RlbEFzc2lnbiIsIiQkbmdNb2RlbEdldCIsIiQkbmdNb2RlbFNldCIsIiQkcGVuZGluZ0RlYm91bmNlIiwiJCRwYXJzZXJWYWxpZCIsIiQkY3VycmVudFZhbGlkYXRpb25SdW5JZCIsImRlZmluZVByb3BlcnR5IiwiJCRhdHRyIiwiJCR0aW1lb3V0IiwiJCRleGNlcHRpb25IYW5kbGVyIiwic2V0dXBNb2RlbFdhdGNoZXIiLCJmb3JtYXR0ZXJzIiwiJCR1cGRhdGVFbXB0eUNsYXNzZXMiLCIkJGxhc3RDb21taXR0ZWRWaWV3VmFsdWUiLCIkJHJ1blZhbGlkYXRvcnMiLCJNb2RlbE9wdGlvbnMiLCIkJG9wdGlvbnMiLCJzZXRPcHRpb25TZWxlY3RlZFN0YXR1cyIsIm9wdGlvbkVsIiwiUkVHRVhfU1RSSU5HX1JFR0VYUCIsIm1hbnVhbExvd2VyY2FzZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNoYXJDb2RlQXQiLCJtYW51YWxVcHBlcmNhc2UiLCJqUXVlcnkiLCJkb2N1bWVudE1vZGUiLCJydWxlcyIsIm5nQ3NwRWxlbWVudCIsIm5nQ3NwQXR0cmlidXRlIiwibm9JbmxpbmVTdHlsZSIsImpxIiwibmFtZV8iLCJlbCIsImN1cnJlbnRTY3JpcHQiLCJIVE1MU2NyaXB0RWxlbWVudCIsIlNWR1NjcmlwdEVsZW1lbnQiLCJnZXROYW1lZEl0ZW0iLCJldmVyeSIsIm9yaWdpbiIsImJpbmRKUXVlcnlGaXJlZCIsInZlcnNpb24iLCJmdWxsIiwibWFqb3IiLCJtaW5vciIsImRvdCIsImNvZGVOYW1lIiwiZXhwYW5kbyIsIl9kYXRhIiwibW91c2VsZWF2ZSIsIm1vdXNlZW50ZXIiLCJvcHRpb24iLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIk5vZGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwicmVhZHkiLCJuZ01pbmxlbmd0aCIsIm5nTWF4bGVuZ3RoIiwibmdQYXR0ZXJuIiwicmVtb3ZlRGF0YSIsInJlbW92ZUF0dHJpYnV0ZSIsImNzcyIsInJldCIsImxvd2VyY2FzZWROYW1lIiwiaXNCb29sZWFuQXR0ciIsImdldFRleHQiLCIkZHYiLCJtdWx0aXBsZSIsInNlbGVjdGVkIiwiYXJnMSIsImFyZzIiLCJub2RlQ291bnQiLCJ0eXBlcyIsImFkZEhhbmRsZXIiLCJub0V2ZW50TGlzdGVuZXIiLCJvbmUiLCJvbkZuIiwicmVwbGFjZU5vZGUiLCJpbnNlcnRCZWZvcmUiLCJjaGlsZHJlbiIsImNvbnRlbnREb2N1bWVudCIsInByZXBlbmQiLCJ3cmFwTm9kZSIsImRldGFjaCIsImFmdGVyIiwibmV3RWxlbWVudCIsInRvZ2dsZUNsYXNzIiwiY29uZGl0aW9uIiwiY2xhc3NDb25kaXRpb24iLCJuZXh0RWxlbWVudFNpYmxpbmciLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInRyaWdnZXJIYW5kbGVyIiwiZXh0cmFQYXJhbWV0ZXJzIiwiZHVtbXlFdmVudCIsImV2ZW50Rm5zQ29weSIsImhhbmRsZXJBcmdzIiwiYXJnMyIsInVuYmluZCIsIm5hbktleSIsIl9pZHgiLCJfdHJhbnNmb3JtS2V5IiwiZGVsZXRlIiwiJCRNYXBQcm92aWRlciIsIiRhbmltYXRlTWluRXJyIiwiJCRDb3JlQW5pbWF0ZUpzUHJvdmlkZXIiLCIkJENvcmVBbmltYXRlUXVldWVQcm92aWRlciIsInBvc3REaWdlc3RFbGVtZW50cyIsIiQkQW5pbWF0ZVJ1bm5lciIsInVwZGF0ZURhdGEiLCJoYW5kbGVDU1NDbGFzc0NoYW5nZXMiLCJleGlzdGluZyIsImFkZFJlbW92ZUNsYXNzZXNQb3N0RGlnZXN0IiwiYWRkIiwiY2xhc3Nlc0FkZGVkIiwiY2xhc3Nlc1JlbW92ZWQiLCJwaW4iLCJkb21PcGVyYXRpb24iLCJmcm9tIiwidG8iLCJydW5uZXIiLCJjb21wbGV0ZSIsIiRBbmltYXRlUHJvdmlkZXIiLCJjbGFzc05hbWVGaWx0ZXIiLCJjdXN0b21GaWx0ZXIiLCIkJHJlZ2lzdGVyZWRBbmltYXRpb25zIiwiZmlsdGVyRm4iLCIkJGFuaW1hdGVRdWV1ZSIsImRvbUluc2VydCIsImFmdGVyRWxlbWVudCIsImFmdGVyTm9kZSIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJlbnRlciIsIm1vdmUiLCJsZWF2ZSIsImFkZGNsYXNzIiwic2V0Q2xhc3MiLCJhbmltYXRlIiwidGVtcENsYXNzZXMiLCIkJEFuaW1hdGVBc3luY1J1bkZhY3RvcnlQcm92aWRlciIsIiQkckFGIiwid2FpdEZvclRpY2siLCJ3YWl0UXVldWUiLCJwYXNzZWQiLCIkJEFuaW1hdGVSdW5uZXJGYWN0b3J5UHJvdmlkZXIiLCIkJGFuaW1hdGVBc3luY1J1biIsIiQkaXNEb2N1bWVudEhpZGRlbiIsIkFuaW1hdGVSdW5uZXIiLCJzZXRIb3N0IiwicmFmVGljayIsInRpbWVvdXRUaWNrIiwiX2RvbmVDYWxsYmFja3MiLCJfdGljayIsIl9zdGF0ZSIsImNoYWluIiwicnVubmVycyIsIm9uUHJvZ3Jlc3MiLCJnZXRQcm9taXNlIiwicmVzb2x2ZUhhbmRsZXIiLCJyZWplY3RIYW5kbGVyIiwicGF1c2UiLCJyZXN1bWUiLCJfcmVzb2x2ZSIsIiRDb3JlQW5pbWF0ZUNzc1Byb3ZpZGVyIiwiaW5pdGlhbE9wdGlvbnMiLCJhcHBseUFuaW1hdGlvbkNvbnRlbnRzIiwiY2xvc2VkIiwiJCRwcmVwYXJlZCIsImNsZWFudXBTdHlsZXMiLCJzdGFydCIsImlzRmlyc3RDaGFuZ2UiLCIkJEZvcmNlUmVmbG93UHJvdmlkZXIiLCJkb21Ob2RlIiwib2Zmc2V0V2lkdGgiLCJDb250ZW50LVR5cGUiLCJbIiwieyIsIiRqc29ucENhbGxiYWNrc1Byb3ZpZGVyIiwiY2FsbGJhY2tJZCIsImNhbGxlZCIsImNhbGxiYWNrTWFwIiwiJCRjb3VudGVyIiwiUEFUSF9NQVRDSCIsImh0dHAiLCJodHRwcyIsImZ0cCIsImxvY2F0aW9uUHJvdG90eXBlIiwicGFyYW1WYWx1ZSIsIkxvY2F0aW9uIiwiJHBhcnNlTWluRXJyIiwiT1BFUkFUT1JTIiwiRVNDQVBFIiwiZiIsInQiLCInIiwiXCIiLCJsZXgiLCJ0b2tlbnMiLCJyZWFkU3RyaW5nIiwicGVlayIsInJlYWROdW1iZXIiLCJwZWVrTXVsdGljaGFyIiwicmVhZElkZW50IiwiaXMiLCJpc1doaXRlc3BhY2UiLCJjaDIiLCJjaDMiLCJvcDEiLCJvcDIiLCJvcDMiLCJ0aHJvd0Vycm9yIiwiY2hhcnMiLCJjb2RlUG9pbnRBdCIsImlzVmFsaWRJZGVudGlmaWVyU3RhcnQiLCJpc1ZhbGlkSWRlbnRpZmllckNvbnRpbnVlIiwiY3AiLCJjcDEiLCJjcDIiLCJpc0V4cE9wZXJhdG9yIiwiY29sU3RyIiwicGVla0NoIiwicXVvdGUiLCJyYXdTdHJpbmciLCJoZXgiLCJFeHByZXNzaW9uU3RhdGVtZW50IiwiUHJvcGVydHkiLCJwcm9ncmFtIiwiZXhwcmVzc2lvblN0YXRlbWVudCIsImV4cGVjdCIsImZpbHRlckNoYWluIiwiYXNzaWdubWVudCIsInRlcm5hcnkiLCJsb2dpY2FsT1IiLCJjb25zdW1lIiwibG9naWNhbEFORCIsImVxdWFsaXR5IiwicmVsYXRpb25hbCIsImFkZGl0aXZlIiwibXVsdGlwbGljYXRpdmUiLCJ1bmFyeSIsInByaW1hcnkiLCJhcnJheURlY2xhcmF0aW9uIiwic2VsZlJlZmVyZW50aWFsIiwicGFyc2VBcmd1bWVudHMiLCJiYXNlRXhwcmVzc2lvbiIsInBlZWtUb2tlbiIsImtpbmQiLCJlMSIsImUyIiwiZTMiLCJlNCIsInBlZWtBaGVhZCIsIiRsb2NhbHMiLCJuZXh0SWQiLCJ2YXJzIiwib3duIiwiYXNzaWduYWJsZSIsInN0YWdlIiwiY29tcHV0aW5nIiwicmVjdXJzZSIsInJldHVybl8iLCJnZW5lcmF0ZUZ1bmN0aW9uIiwiZm5LZXkiLCJpbnRvSWQiLCJ3YXRjaElkIiwiZm5TdHJpbmciLCJVU0UiLCJTVFJJQ1QiLCJmaWx0ZXJQcmVmaXgiLCJ3YXRjaEZucyIsInZhcnNQcmVmaXgiLCJzZWN0aW9uIiwibmFtZUlkIiwicmVjdXJzaW9uRm4iLCJza2lwV2F0Y2hJZENoZWNrIiwiaWZfIiwibGF6eUFzc2lnbiIsImNvbXB1dGVkTWVtYmVyIiwibGF6eVJlY3Vyc2UiLCJwbHVzIiwibm90IiwiZ2V0SGFzT3duUHJvcGVydHkiLCJpc051bGwiLCJub25Db21wdXRlZE1lbWJlciIsIm5vdE51bGwiLCJtZW1iZXIiLCJkZWZhdWx0VmFsdWUiLCJTQUZFX0lERU5USUZJRVIiLCJVTlNBRkVfQ0hBUkFDVEVSUyIsInN0cmluZ0VzY2FwZUZuIiwic3RyaW5nRXNjYXBlUmVnZXgiLCJjIiwic2tpcCIsImluaXQiLCJyaHMiLCJsaHMiLCJ1bmFyeSsiLCJ1bmFyeS0iLCJ1bmFyeSEiLCJiaW5hcnkrIiwiYmluYXJ5LSIsImJpbmFyeSoiLCJiaW5hcnkvIiwiYmluYXJ5JSIsImJpbmFyeT09PSIsImJpbmFyeSE9PSIsImJpbmFyeT09IiwiYmluYXJ5IT0iLCJiaW5hcnk8IiwiYmluYXJ5PiIsImJpbmFyeTw9IiwiYmluYXJ5Pj0iLCJiaW5hcnkmJiIsImJpbmFyeXx8IiwidGVybmFyeT86IiwieXkiLCJ5IiwiTU1NTSIsIk1NTSIsIk0iLCJMTExMIiwiSCIsImhoIiwiRUVFRSIsIkVFRSIsIloiLCJ3dyIsInciLCJHIiwiR0ciLCJHR0ciLCJHR0dHIiwiaHRtbEFuY2hvckRpcmVjdGl2ZSIsInhsaW5rSHJlZiIsIm5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzIiwicHJvcE5hbWUiLCJkZWZhdWx0TGlua0ZuIiwibm9ybWFsaXplZCIsImh0bWxBdHRyIiwiJGFkZENvbnRyb2wiLCIkJHJlbmFtZUNvbnRyb2wiLCIkcmVtb3ZlQ29udHJvbCIsIiRzZXREaXJ0eSIsIiRzZXRQcmlzdGluZSIsIiRzZXRTdWJtaXR0ZWQiLCIkcm9sbGJhY2tWaWV3VmFsdWUiLCIkY29tbWl0Vmlld1ZhbHVlIiwibmV3TmFtZSIsIm9sZE5hbWUiLCJQUklTVElORV9DTEFTUyIsIkRJUlRZX0NMQVNTIiwiJHNldFVudG91Y2hlZCIsImZvcm1EaXJlY3RpdmVGYWN0b3J5IiwiaXNOZ0Zvcm0iLCJnZXRTZXR0ZXIiLCJmb3JtRWxlbWVudCIsIm5hbWVBdHRyIiwiY3RybHMiLCJoYW5kbGVGb3JtU3VibWlzc2lvbiIsInNldHRlciIsImZvcm1EaXJlY3RpdmUiLCJuZ0Zvcm1EaXJlY3RpdmUiLCJEQVRFX1JFR0VYUCIsIkRBVEVUSU1FTE9DQUxfUkVHRVhQIiwiTU9OVEhfUkVHRVhQIiwiVElNRV9SRUdFWFAiLCJpbnB1dFR5cGUiLCJkYXRldGltZS1sb2NhbCIsInRpbWUiLCJtb250aCIsInJhZGlvIiwicmFuZ2UiLCJjaGVja2JveCIsInN1Ym1pdCIsInJlc2V0IiwiZmlsZSIsImlucHV0RGlyZWN0aXZlIiwiQ09OU1RBTlRfVkFMVUVfUkVHRVhQIiwibmdWYWx1ZURpcmVjdGl2ZSIsInVwZGF0ZUVsZW1lbnRWYWx1ZSIsInByb3BWYWx1ZSIsInRwbEF0dHIiLCJuZ1ZhbHVlIiwibmdCaW5kRGlyZWN0aXZlIiwiJGNvbXBpbGUiLCJ0ZW1wbGF0ZUVsZW1lbnQiLCJuZ0JpbmQiLCJuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSIsIm5nQmluZFRlbXBsYXRlIiwibmdCaW5kSHRtbERpcmVjdGl2ZSIsIm5nQmluZEh0bWxHZXR0ZXIiLCJuZ0JpbmRIdG1sIiwibmdCaW5kSHRtbFdhdGNoIiwiZ2V0VHJ1c3RlZEh0bWwiLCJuZ0NoYW5nZURpcmVjdGl2ZSIsIm5nQ2hhbmdlIiwibmdDbGFzc0RpcmVjdGl2ZSIsIm5nQ2xhc3NPZGREaXJlY3RpdmUiLCJuZ0NsYXNzRXZlbkRpcmVjdGl2ZSIsIm5nQ2xvYWtEaXJlY3RpdmUiLCJuZ0NvbnRyb2xsZXJEaXJlY3RpdmUiLCJuZ0V2ZW50RGlyZWN0aXZlcyIsImZvcmNlQXN5bmNFdmVudHMiLCJibHVyIiwiZm9jdXMiLCJuZ0lmRGlyZWN0aXZlIiwicHJldmlvdXNFbGVtZW50cyIsIm5nSWYiLCJuZ0luY2x1ZGVEaXJlY3RpdmUiLCIkYW5jaG9yU2Nyb2xsIiwic3JjRXhwIiwibmdJbmNsdWRlIiwib25sb2FkRXhwIiwiYXV0b1Njcm9sbEV4cCIsImF1dG9zY3JvbGwiLCJwcmV2aW91c0VsZW1lbnQiLCJjdXJyZW50RWxlbWVudCIsImNoYW5nZUNvdW50ZXIiLCJjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50IiwiYWZ0ZXJBbmltYXRpb24iLCJ0aGlzQ2hhbmdlSWQiLCJuZ0luY2x1ZGVGaWxsQ29udGVudERpcmVjdGl2ZSIsIm5nSW5pdERpcmVjdGl2ZSIsIm5nSW5pdCIsIm5nTGlzdERpcmVjdGl2ZSIsIm5nTGlzdCIsInRyaW1WYWx1ZXMiLCIkJGluaXRHZXR0ZXJTZXR0ZXJzIiwiaW52b2tlTW9kZWxHZXR0ZXIiLCJpbnZva2VNb2RlbFNldHRlciIsIiQkJHAiLCIkc2V0VG91Y2hlZCIsInByZXZWYWxpZCIsInByZXZNb2RlbFZhbHVlIiwiYWxsb3dJbnZhbGlkIiwidGhhdCIsImFsbFZhbGlkIiwiJCR3cml0ZU1vZGVsVG9TY29wZSIsImRvbmVDYWxsYmFjayIsInNldFZhbGlkaXR5IiwibG9jYWxWYWxpZGF0aW9uUnVuSWQiLCJ2YWxpZGF0aW9uRG9uZSIsImVycm9yS2V5Iiwic3luY1ZhbGlkYXRvcnNWYWxpZCIsInZhbGlkYXRvciIsIkJvb2xlYW4iLCJ2YWxpZGF0b3JQcm9taXNlcyIsIiQkcGFyc2VBbmRWYWxpZGF0ZSIsIndyaXRlVG9Nb2RlbElmTmVlZGVkIiwiJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdCIsImRlYm91bmNlRGVsYXkiLCIkb3ZlcnJpZGVNb2RlbE9wdGlvbnMiLCJjcmVhdGVDaGlsZCIsIm5nTW9kZWxEaXJlY3RpdmUiLCJtb2RlbEN0cmwiLCJmb3JtQ3RybCIsIm9wdGlvbnNDdHJsIiwic2V0VG91Y2hlZCIsIkRFRkFVTFRfUkVHRVhQIiwiaW5oZXJpdEFsbCIsInVwZGF0ZU9uRGVmYXVsdCIsInVwZGF0ZU9uIiwiZGVib3VuY2UiLCJnZXR0ZXJTZXR0ZXIiLCJuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZSIsIk5nTW9kZWxPcHRpb25zQ29udHJvbGxlciIsIiQkYXR0cnMiLCJwYXJlbnRPcHRpb25zIiwicGFyZW50Q3RybCIsIm1vZGVsT3B0aW9uc0RlZmluaXRpb24iLCJuZ01vZGVsT3B0aW9ucyIsIm5nTm9uQmluZGFibGVEaXJlY3RpdmUiLCJuZ09wdGlvbnNNaW5FcnIiLCJOR19PUFRJT05TX1JFR0VYUCIsIm5nT3B0aW9uc0RpcmVjdGl2ZSIsInBhcnNlT3B0aW9uc0V4cHJlc3Npb24iLCJvcHRpb25zRXhwIiwic2VsZWN0RWxlbWVudCIsIk9wdGlvbiIsInNlbGVjdFZhbHVlIiwibGFiZWwiLCJncm91cCIsImRpc2FibGVkIiwiZ2V0T3B0aW9uVmFsdWVzS2V5cyIsIm9wdGlvblZhbHVlcyIsIm9wdGlvblZhbHVlc0tleXMiLCJrZXlOYW1lIiwiaXRlbUtleSIsInZhbHVlTmFtZSIsInNlbGVjdEFzIiwidHJhY2tCeSIsInNlbGVjdEFzRm4iLCJ2aWV3VmFsdWVGbiIsInRyYWNrQnlGbiIsImdldFRyYWNrQnlWYWx1ZUZuIiwiZ2V0VHJhY2tCeVZhbHVlIiwiZ2V0TG9jYWxzIiwiZGlzcGxheUZuIiwiZ3JvdXBCeUZuIiwiZGlzYWJsZVdoZW5GbiIsInZhbHVlc0ZuIiwiZ2V0V2F0Y2hhYmxlcyIsIndhdGNoZWRBcnJheSIsIm9wdGlvblZhbHVlc0xlbmd0aCIsImRpc2FibGVXaGVuIiwiZ2V0T3B0aW9ucyIsIm9wdGlvbkl0ZW1zIiwic2VsZWN0VmFsdWVNYXAiLCJvcHRpb25JdGVtIiwiZ2V0T3B0aW9uRnJvbVZpZXdWYWx1ZSIsImdldFZpZXdWYWx1ZUZyb21PcHRpb24iLCJuZ09wdGlvbnNQb3N0TGluayIsImFkZE9wdGlvbkVsZW1lbnQiLCJvcHRpb25FbGVtZW50Iiwib3B0aW9uVGVtcGxhdGUiLCJ1cGRhdGVPcHRpb25FbGVtZW50IiwiZ2V0QW5kVXBkYXRlU2VsZWN0ZWRPcHRpb24iLCJ1cGRhdGVPcHRpb25zIiwic2VsZWN0Q3RybCIsInJlYWRWYWx1ZSIsIm5nT3B0aW9ucyIsImdyb3VwRWxlbWVudE1hcCIsImdyb3VwRWxlbWVudCIsIm9wdEdyb3VwVGVtcGxhdGUiLCJsaXN0RnJhZ21lbnQiLCJuZ01vZGVsQ3RybCIsIm5leHRWYWx1ZSIsImhhc0VtcHR5T3B0aW9uIiwiZW1wdHlPcHRpb24iLCJwcm92aWRlZEVtcHR5T3B0aW9uIiwiZ2VuZXJhdGVVbmtub3duT3B0aW9uVmFsdWUiLCJ3cml0ZVZhbHVlIiwic2VsZWN0ZWRPcHRpb25zIiwic2VsZWN0ZWRWYWx1ZXMiLCJzZWxlY3Rpb25zIiwic2VsZWN0ZWRPcHRpb24iLCJzZWxlY3RlZEluZGV4IiwicmVtb3ZlVW5rbm93bk9wdGlvbiIsInNlbGVjdFVua25vd25PckVtcHR5T3B0aW9uIiwidW5zZWxlY3RFbXB0eU9wdGlvbiIsInJlZ2lzdGVyT3B0aW9uIiwib3B0aW9uU2NvcGUiLCJuZWVkc1JlcmVuZGVyIiwiJGlzRW1wdHlPcHRpb25TZWxlY3RlZCIsIm5nUGx1cmFsaXplRGlyZWN0aXZlIiwiQlJBQ0UiLCJJU19XSEVOIiwidXBkYXRlRWxlbWVudFRleHQiLCJuZXdUZXh0IiwibGFzdENvdW50IiwibnVtYmVyRXhwIiwid2hlbkV4cCIsIndoZW5zIiwid2hlbnNFeHBGbnMiLCJicmFjZVJlcGxhY2VtZW50Iiwid2F0Y2hSZW1vdmVyIiwiYXR0cmlidXRlTmFtZSIsInRtcE1hdGNoIiwid2hlbktleSIsImNvdW50SXNOYU4iLCJwbHVyYWxDYXQiLCJ3aGVuRXhwRm4iLCJuZ1JlcGVhdERpcmVjdGl2ZSIsIm5nUmVwZWF0TWluRXJyIiwidXBkYXRlU2NvcGUiLCJ2YWx1ZUlkZW50aWZpZXIiLCJrZXlJZGVudGlmaWVyIiwiYXJyYXlMZW5ndGgiLCIkZmlyc3QiLCIkbGFzdCIsIiRtaWRkbGUiLCIkb2RkIiwiJGV2ZW4iLCJnZXRCbG9ja1N0YXJ0IiwiZ2V0QmxvY2tFbmQiLCJuZ1JlcGVhdCIsIm5nUmVwZWF0RW5kQ29tbWVudCIsImFsaWFzQXMiLCJ0cmFja0J5RXhwIiwidHJhY2tCeUV4cEdldHRlciIsInRyYWNrQnlJZEV4cEZuIiwidHJhY2tCeUlkQXJyYXlGbiIsInRyYWNrQnlJZE9iakZuIiwiaGFzaEZuTG9jYWxzIiwibGFzdEJsb2NrTWFwIiwibmV4dE5vZGUiLCJjb2xsZWN0aW9uTGVuZ3RoIiwidHJhY2tCeUlkIiwidHJhY2tCeUlkRm4iLCJjb2xsZWN0aW9uS2V5cyIsIm5leHRCbG9ja09yZGVyIiwicHJldmlvdXNOb2RlIiwibmV4dEJsb2NrTWFwIiwiYmxvY2tLZXkiLCJuZ1Nob3dEaXJlY3RpdmUiLCJuZ1Nob3ciLCJuZ0hpZGVEaXJlY3RpdmUiLCJuZ0hpZGUiLCJuZ1N0eWxlRGlyZWN0aXZlIiwibmdTdHlsZSIsIm5ld1N0eWxlcyIsIm9sZFN0eWxlcyIsIm5nU3dpdGNoRGlyZWN0aXZlIiwiY2FzZXMiLCJuZ1N3aXRjaENvbnRyb2xsZXIiLCJ3YXRjaEV4cHIiLCJuZ1N3aXRjaCIsInNlbGVjdGVkVHJhbnNjbHVkZXMiLCJzZWxlY3RlZEVsZW1lbnRzIiwicHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMiLCJzZWxlY3RlZFNjb3BlcyIsInNwbGljZUZhY3RvcnkiLCJzZWxlY3RlZFRyYW5zY2x1ZGUiLCJjYXNlRWxlbWVudCIsInNlbGVjdGVkU2NvcGUiLCJhbmNob3IiLCJuZ1N3aXRjaFdoZW5EaXJlY3RpdmUiLCJuZ1N3aXRjaFdoZW4iLCJuZ1N3aXRjaFdoZW5TZXBhcmF0b3IiLCJ3aGVuQ2FzZSIsIm5nU3dpdGNoRGVmYXVsdERpcmVjdGl2ZSIsIm5nVHJhbnNjbHVkZU1pbkVyciIsIm5nVHJhbnNjbHVkZURpcmVjdGl2ZSIsImZhbGxiYWNrTGlua0ZuIiwibmdUcmFuc2NsdWRlQ2xvbmVBdHRhY2hGbiIsIm5vdFdoaXRlc3BhY2UiLCJ1c2VGYWxsYmFja0NvbnRlbnQiLCJuZ1RyYW5zY2x1ZGUiLCJuZ1RyYW5zY2x1ZGVTbG90Iiwic2NyaXB0RGlyZWN0aXZlIiwibm9vcE5nTW9kZWxDb250cm9sbGVyIiwiU2VsZWN0Q29udHJvbGxlciIsInNjaGVkdWxlUmVuZGVyIiwicmVuZGVyU2NoZWR1bGVkIiwic2NoZWR1bGVWaWV3VmFsdWVVcGRhdGUiLCJyZW5kZXJBZnRlciIsInVwZGF0ZVNjaGVkdWxlZCIsIm9wdGlvbnNNYXAiLCJ1bmtub3duT3B0aW9uIiwicmVuZGVyVW5rbm93bk9wdGlvbiIsInVua25vd25WYWwiLCJ1cGRhdGVVbmtub3duT3B0aW9uIiwic2VsZWN0RW1wdHlPcHRpb24iLCJyZWFsVmFsIiwiaGFzT3B0aW9uIiwiY3VycmVudGx5U2VsZWN0ZWRPcHRpb24iLCJoYXNoZWRWYWwiLCJhZGRPcHRpb24iLCJyZW1vdmVPcHRpb24iLCIkaGFzRW1wdHlPcHRpb24iLCIkaXNVbmtub3duT3B0aW9uU2VsZWN0ZWQiLCJvcHRpb25BdHRycyIsImludGVycG9sYXRlVmFsdWVGbiIsImludGVycG9sYXRlVGV4dEZuIiwicmVtb3ZhbCIsInByZXZpb3VzbHlTZWxlY3RlZCIsInJlbW92ZVZhbHVlIiwic2VsZWN0RGlyZWN0aXZlIiwic2VsZWN0UHJlTGluayIsInNob3VsZEJlU2VsZWN0ZWQiLCJsYXN0VmlldyIsImxhc3RWaWV3UmVmIiwic2VsZWN0UG9zdExpbmsiLCJvcHRpb25EaXJlY3RpdmUiLCJyZXF1aXJlZERpcmVjdGl2ZSIsInJlcXVpcmVkIiwicGF0dGVybkRpcmVjdGl2ZSIsInBhdHRlcm5FeHAiLCJtYXhsZW5ndGhEaXJlY3RpdmUiLCJtYXhsZW5ndGgiLCJpbnRWYWwiLCJtaW5sZW5ndGhEaXJlY3RpdmUiLCJtaW5sZW5ndGgiLCJvcmlnaW5hbENsZWFuRGF0YSIsImpxTmFtZSIsImVsZW1zIiwiJCRjc3AiLCIkJGVuY29kZVVyaVNlZ21lbnQiLCIkJGVuY29kZVVyaVF1ZXJ5IiwiJCRzdHJpbmdpZnkiLCJ0ZXh0YXJlYSIsImZvcm0iLCJzZWxlY3QiLCJuZ0NsYXNzIiwibmdDbGFzc0V2ZW4iLCJuZ0NsYXNzT2RkIiwibmdDbG9hayIsIm5nQ29udHJvbGxlciIsIm5nTm9uQmluZGFibGUiLCJuZ1BsdXJhbGl6ZSIsIm5nU3dpdGNoRGVmYXVsdCIsIm5nUmVxdWlyZWQiLCIkYW5pbWF0ZUNzcyIsIiQkYW5pbWF0ZUpzIiwiJCRmb3JjZVJlZmxvdyIsIiRpbnRlcnZhbCIsIiRodHRwUGFyYW1TZXJpYWxpemVyIiwiJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2UiLCIkJHRlc3RhYmlsaXR5IiwiJCRqcUxpdGUiLCIkJE1hcCIsImFuZ3VsYXJWZXJzaW9uIiwiZ2V0RGVjaW1hbHMiLCJnZXRWRiIsIm9wdF9wcmVjaXNpb24iLCJQTFVSQUxfQ0FURUdPUlkiLCJaRVJPIiwiT05FIiwiVFdPIiwiRkVXIiwiTUFOWSIsIk9USEVSIiwiREFZIiwiRklSU1REQVlPRldFRUsiLCJNT05USCIsIlNIT1JUREFZIiwiU0hPUlRNT05USCIsIlNUQU5EQUxPTkVNT05USCIsIldFRUtFTkRSQU5HRSIsImZ1bGxEYXRlIiwibG9uZ0RhdGUiLCJtZWRpdW0iLCJtZWRpdW1EYXRlIiwibWVkaXVtVGltZSIsInNob3J0Iiwic2hvcnREYXRlIiwic2hvcnRUaW1lIiwibWluSW50IiwibG9jYWxlSUQiLCJ2ZiIsImhlYWQiXSwibWFwcGluZ3MiOiJDQUtBLFNBQVVBLEdBQVMsWUFpQ25CLFNBQVNDLEdBQW9CQyxHQUMzQixJQUFJQyxFQUFTRCxHQUtYLE1BQU9FLEdBSkhDLEdBQVVILEVBQU9JLGtCQUNuQkYsR0FBYUUsZUFBaUJDLEVBQXNCTCxFQUFPSSxnQkFBa0JKLEVBQU9JLGVBQWlCRSxLQVkzRyxRQUFTRCxHQUFzQkUsR0FDN0IsTUFBT0MsR0FBU0QsSUFBYUEsRUFBVyxFQWlDMUMsUUFBU0UsR0FBT0MsRUFBUUMsR0FFdEIsTUFEQUEsR0FBbUJBLEdBQW9CQyxNQUNoQyxXQUNMLEdBTUVDLEdBQWFDLEVBTlhDLEVBQU9DLFVBQVUsR0FDbkJDLEVBQVdELFVBQVUsR0FDckJFLEVBQVUsS0FBT1IsRUFBU0EsRUFBUyxJQUFNLElBQU1LLEVBQU8sS0FDdERJLEVBQWVDLEVBQVVKLFVBQVcsR0FBR0ssSUFBSSxTQUFTQyxHQUNsRCxNQUFPQyxJQUFjRCxFQUFLcEIsR0FBYUUsaUJBaUIzQyxLQWJBYyxHQUFXRCxFQUFTTyxRQUFRLFdBQVksU0FBU0MsR0FDL0MsR0FBSUMsSUFBU0QsRUFBTUUsTUFBTSxHQUFJLEVBRTdCLE9BQUlELEdBQVFQLEVBQWFTLE9BQ2hCVCxFQUFhTyxHQUdmRCxJQUdUUCxHQUFXLHdDQUNSUixFQUFTQSxFQUFTLElBQU0sSUFBTUssRUFFNUJELEVBQUksRUFBR0QsRUFBYyxJQUFLQyxFQUFJSyxFQUFhUyxPQUFRZCxJQUFLRCxFQUFjLElBQ3pFSyxHQUFXTCxFQUFjLElBQU1DLEVBQUksSUFBTWUsbUJBQW1CVixFQUFhTCxHQUczRSxPQUFPLElBQUlILEdBQWlCTyxJQWdPaEMsUUFBU1ksR0FBWUMsR0FHbkIsR0FBVyxNQUFQQSxHQUFlQyxFQUFTRCxHQUFNLE9BQU8sQ0FNekMsSUFBSUUsR0FBUUYsSUFBUUcsRUFBU0gsSUFBU0ksSUFBVUosWUFBZUksSUFBUyxPQUFPLENBSS9FLElBQUlQLEdBQVMsVUFBWVEsUUFBT0wsSUFBUUEsRUFBSUgsTUFJNUMsT0FBT3BCLEdBQVNvQixLQUNiQSxHQUFVLElBQU9BLEVBQVMsSUFBTUcsSUFBT0EsWUFBZU0sU0FBOEIsa0JBQWJOLEdBQUlPLE1BdUNoRixRQUFTQyxHQUFRUixFQUFLUyxFQUFVQyxHQUM5QixHQUFJQyxHQUFLZCxDQUNULElBQUlHLEVBQ0YsR0FBSVksRUFBV1osR0FDYixJQUFLVyxJQUFPWCxHQUNFLGNBQVJXLEdBQStCLFdBQVJBLEdBQTRCLFNBQVJBLEdBQWtCWCxFQUFJYSxlQUFlRixJQUNsRkYsRUFBU0ssS0FBS0osRUFBU1YsRUFBSVcsR0FBTUEsRUFBS1gsT0FHckMsSUFBSUUsR0FBUUYsSUFBUUQsRUFBWUMsR0FBTSxDQUMzQyxHQUFJZSxHQUE2QixnQkFBUmYsRUFDekIsS0FBS1csRUFBTSxFQUFHZCxFQUFTRyxFQUFJSCxPQUFRYyxFQUFNZCxFQUFRYyxLQUMzQ0ksR0FBZUosSUFBT1gsS0FDeEJTLEVBQVNLLEtBQUtKLEVBQVNWLEVBQUlXLEdBQU1BLEVBQUtYLE9BR3JDLElBQUlBLEVBQUlRLFNBQVdSLEVBQUlRLFVBQVlBLEVBQ3RDUixFQUFJUSxRQUFRQyxFQUFVQyxFQUFTVixPQUM1QixJQUFJZ0IsRUFBY2hCLEdBRXZCLElBQUtXLElBQU9YLEdBQ1ZTLEVBQVNLLEtBQUtKLEVBQVNWLEVBQUlXLEdBQU1BLEVBQUtYLE9BRW5DLElBQWtDLGtCQUF2QkEsR0FBSWEsZUFFcEIsSUFBS0YsSUFBT1gsR0FDTkEsRUFBSWEsZUFBZUYsSUFDckJGLEVBQVNLLEtBQUtKLEVBQVNWLEVBQUlXLEdBQU1BLEVBQUtYLE9BSzFDLEtBQUtXLElBQU9YLEdBQ05hLEdBQWVDLEtBQUtkLEVBQUtXLElBQzNCRixFQUFTSyxLQUFLSixFQUFTVixFQUFJVyxHQUFNQSxFQUFLWCxFQUs5QyxPQUFPQSxHQUdULFFBQVNpQixHQUFjakIsRUFBS1MsRUFBVUMsR0FFcEMsSUFBSyxHQUREUSxHQUFPYixPQUFPYSxLQUFLbEIsR0FBS21CLE9BQ25CcEMsRUFBSSxFQUFHQSxFQUFJbUMsRUFBS3JCLE9BQVFkLElBQy9CMEIsRUFBU0ssS0FBS0osRUFBU1YsRUFBSWtCLEVBQUtuQyxJQUFLbUMsRUFBS25DLEdBRTVDLE9BQU9tQyxHQVNULFFBQVNFLEdBQWNDLEdBQ3JCLE1BQU8sVUFBU0MsRUFBT1gsR0FBTVUsRUFBV1YsRUFBS1csSUFhL0MsUUFBU0MsS0FDUCxRQUFTQyxHQVNYLFFBQVNDLEdBQVd6QixFQUFLMEIsR0FDbkJBLEVBQ0YxQixFQUFJMkIsVUFBWUQsUUFFVDFCLEdBQUkyQixVQUtmLFFBQVNDLEdBQVdDLEVBQUtDLEVBQU1DLEdBRzdCLElBQUssR0FGREwsR0FBSUcsRUFBSUYsVUFFSDVDLEVBQUksRUFBR2lELEVBQUtGLEVBQUtqQyxPQUFRZCxFQUFJaUQsSUFBTWpELEVBQUcsQ0FDN0MsR0FBSWlCLEdBQU04QixFQUFLL0MsRUFDZixJQUFLYixFQUFTOEIsSUFBU1ksRUFBV1osR0FFbEMsSUFBSyxHQUREa0IsR0FBT2IsT0FBT2EsS0FBS2xCLEdBQ2RpQyxFQUFJLEVBQUdDLEVBQUtoQixFQUFLckIsT0FBUW9DLEVBQUlDLEVBQUlELElBQUssQ0FDN0MsR0FBSXRCLEdBQU1PLEVBQUtlLEdBQ1hFLEVBQU1uQyxFQUFJVyxFQUVWb0IsSUFBUTdELEVBQVNpRSxHQUNmQyxFQUFPRCxHQUNUTixFQUFJbEIsR0FBTyxHQUFJMEIsTUFBS0YsRUFBSUcsV0FDZkMsRUFBU0osR0FDbEJOLEVBQUlsQixHQUFPLEdBQUk2QixRQUFPTCxHQUNiQSxFQUFJTSxTQUNiWixFQUFJbEIsR0FBT3dCLEVBQUlPLFdBQVUsR0FDaEJDLEVBQVVSLEdBQ25CTixFQUFJbEIsR0FBT3dCLEVBQUlTLFNBRVYxRSxFQUFTMkQsRUFBSWxCLE1BQU9rQixFQUFJbEIsR0FBT1QsR0FBUWlDLFVBQzVDUCxFQUFXQyxFQUFJbEIsSUFBT3dCLElBQU0sSUFHOUJOLEVBQUlsQixHQUFPd0IsR0FNakIsTUFEQVYsR0FBV0ksRUFBS0gsR0FDVEcsRUFxQlQsUUFBU2dCLEdBQU9oQixHQUNkLE1BQU9ELEdBQVdDLEVBQUtqQyxHQUFNa0IsS0FBSzdCLFVBQVcsSUFBSSxHQW9DbkQsUUFBUzZELEdBQU1qQixHQUNiLE1BQU9ELEdBQVdDLEVBQUtqQyxHQUFNa0IsS0FBSzdCLFVBQVcsSUFBSSxHQUtuRCxRQUFTOEQsR0FBTUMsR0FDYixNQUFPQyxVQUFTRCxFQUFLLElBU3ZCLFFBQVNFLEdBQVFDLEVBQVFDLEdBQ3ZCLE1BQU9QLEdBQU94QyxPQUFPZ0QsT0FBT0YsR0FBU0MsR0FtQnZDLFFBQVNFLE1BZ0NULFFBQVNDLEdBQVNDLEdBQUksTUFBT0EsR0FJN0IsUUFBU0MsR0FBUW5DLEdBQVEsTUFBTyxZQUFxQixNQUFPQSxJQUU1RCxRQUFTb0MsR0FBa0IxRCxHQUN6QixNQUFPWSxHQUFXWixFQUFJMkQsV0FBYTNELEVBQUkyRCxXQUFhQSxHQWdCdEQsUUFBU0MsR0FBWXRDLEdBQVEsV0FBd0IsS0FBVkEsRUFlM0MsUUFBU2xELEdBQVVrRCxHQUFRLFdBQXdCLEtBQVZBLEVBZ0J6QyxRQUFTcEQsR0FBU29ELEdBRWhCLE1BQWlCLFFBQVZBLEdBQW1DLGdCQUFWQSxHQVNsQyxRQUFTTixHQUFjTSxHQUNyQixNQUFpQixRQUFWQSxHQUFtQyxnQkFBVkEsS0FBdUJ1QyxHQUFldkMsR0FnQnhFLFFBQVNuQixHQUFTbUIsR0FBUSxNQUF3QixnQkFBVkEsR0FxQnhDLFFBQVM3QyxHQUFTNkMsR0FBUSxNQUF3QixnQkFBVkEsR0FleEMsUUFBU2MsR0FBT2QsR0FDZCxNQUFnQyxrQkFBekJxQyxHQUFTN0MsS0FBS1EsR0EwQnZCLFFBQVN3QyxHQUFReEMsR0FFZixPQURVcUMsR0FBUzdDLEtBQUtRLElBRXRCLElBQUssaUJBQ0wsSUFBSyxxQkFDTCxJQUFLLHdCQUF5QixPQUFPLENBQ3JDLFNBQVMsTUFBT0EsYUFBaUJ6QyxRQWdCckMsUUFBUytCLEdBQVdVLEdBQVEsTUFBd0Isa0JBQVZBLEdBVTFDLFFBQVNpQixHQUFTakIsR0FDaEIsTUFBZ0Msb0JBQXpCcUMsR0FBUzdDLEtBQUtRLEdBV3ZCLFFBQVNyQixHQUFTRCxHQUNoQixNQUFPQSxJQUFPQSxFQUFJakMsU0FBV2lDLEVBSS9CLFFBQVMrRCxHQUFRL0QsR0FDZixNQUFPQSxJQUFPQSxFQUFJZ0UsWUFBY2hFLEVBQUlpRSxPQUl0QyxRQUFTQyxHQUFPbEUsR0FDZCxNQUE4QixrQkFBdkIyRCxHQUFTN0MsS0FBS2QsR0FJdkIsUUFBU21FLEdBQVduRSxHQUNsQixNQUE4QixzQkFBdkIyRCxHQUFTN0MsS0FBS2QsR0FJdkIsUUFBU29FLEdBQU9wRSxHQUNkLE1BQThCLGtCQUF2QjJELEdBQVM3QyxLQUFLZCxHQUl2QixRQUFTcUUsR0FBVS9DLEdBQ2pCLE1BQXdCLGlCQUFWQSxHQUloQixRQUFTZ0QsR0FBY3RFLEdBQ3JCLE1BQU9BLElBQU9ZLEVBQVdaLEVBQUl1RSxNQUsvQixRQUFTQyxHQUFhbEQsR0FDcEIsTUFBT0EsSUFBUzdDLEVBQVM2QyxFQUFNekIsU0FBVzRFLEdBQW1CQyxLQUFLZixHQUFTN0MsS0FBS1EsSUFHbEYsUUFBU3FELEdBQWMzRSxHQUNyQixNQUE4Qix5QkFBdkIyRCxHQUFTN0MsS0FBS2QsR0ErQnZCLFFBQVMyQyxHQUFVaUMsR0FDakIsU0FBVUEsS0FDUEEsRUFBS25DLFVBQ0ZtQyxFQUFLQyxNQUFRRCxFQUFLRSxNQUFRRixFQUFLRyxPQU92QyxRQUFTQyxHQUFRaEMsR0FDZixHQUFzQ2pFLEdBQWxDaUIsS0FBVWlGLEVBQVFqQyxFQUFJa0MsTUFBTSxJQUNoQyxLQUFLbkcsRUFBSSxFQUFHQSxFQUFJa0csRUFBTXBGLE9BQVFkLElBQzVCaUIsRUFBSWlGLEVBQU1sRyxLQUFNLENBRWxCLE9BQU9pQixHQUlULFFBQVNtRixHQUFVQyxHQUNqQixNQUFPQyxJQUFVRCxFQUFRM0MsVUFBYTJDLEVBQVEsSUFBTUEsRUFBUSxHQUFHM0MsVUFHakUsUUFBUzZDLEdBQVNDLEVBQU92RixHQUN2QixPQUFxRCxJQUE5Q00sTUFBTWtGLFVBQVVDLFFBQVEzRSxLQUFLeUUsRUFBT3ZGLEdBRzdDLFFBQVMwRixHQUFZSCxFQUFPakUsR0FDMUIsR0FBSTNCLEdBQVE0RixFQUFNRSxRQUFRbkUsRUFJMUIsT0FISTNCLElBQVMsR0FDWDRGLEVBQU1JLE9BQU9oRyxFQUFPLEdBRWZBLEVBb0VULFFBQVNpRyxHQUFLQyxFQUFRQyxFQUFhdEgsR0ErQmpDLFFBQVN1SCxHQUFZRixFQUFRQyxFQUFhdEgsR0FFeEMsS0FEQUEsRUFDZSxFQUNiLE1BQU8sS0FFVCxJQUNJbUMsR0FEQWUsRUFBSW9FLEVBQVluRSxTQUVwQixJQUFJekIsR0FBUTJGLEdBQ1YsSUFBSyxHQUFJOUcsR0FBSSxFQUFHaUQsRUFBSzZELEVBQU9oRyxPQUFRZCxFQUFJaUQsRUFBSWpELElBQzFDK0csRUFBWUUsS0FBS0MsRUFBWUosRUFBTzlHLEdBQUlQLFFBRXJDLElBQUl3QyxFQUFjNkUsR0FFdkIsSUFBS2xGLElBQU9rRixHQUNWQyxFQUFZbkYsR0FBT3NGLEVBQVlKLEVBQU9sRixHQUFNbkMsT0FFekMsSUFBSXFILEdBQTJDLGtCQUExQkEsR0FBT2hGLGVBRWpDLElBQUtGLElBQU9rRixHQUNOQSxFQUFPaEYsZUFBZUYsS0FDeEJtRixFQUFZbkYsR0FBT3NGLEVBQVlKLEVBQU9sRixHQUFNbkMsUUFLaEQsS0FBS21DLElBQU9rRixHQUNOaEYsR0FBZUMsS0FBSytFLEVBQVFsRixLQUM5Qm1GLEVBQVluRixHQUFPc0YsRUFBWUosRUFBT2xGLEdBQU1uQyxHQUtsRCxPQURBaUQsR0FBV3FFLEVBQWFwRSxHQUNqQm9FLEVBR1QsUUFBU0csR0FBWUosRUFBUXJILEdBRTNCLElBQUtOLEVBQVMySCxHQUNaLE1BQU9BLEVBSVQsSUFBSWxHLEdBQVF1RyxFQUFZVCxRQUFRSSxFQUNoQyxLQUFlLElBQVhsRyxFQUNGLE1BQU93RyxHQUFVeEcsRUFHbkIsSUFBSU0sRUFBUzRGLElBQVc5QixFQUFROEIsR0FDOUIsS0FBTU8sSUFBUyxPQUNiLDJFQUdKLElBQUlDLElBQWUsRUFDZlAsRUFBY1EsRUFBU1QsRUFVM0IsWUFSb0JVLEtBQWhCVCxJQUNGQSxFQUFjNUYsR0FBUTJGLE1BQWV4RixPQUFPZ0QsT0FBT1EsR0FBZWdDLElBQ2xFUSxHQUFlLEdBR2pCSCxFQUFZRixLQUFLSCxHQUNqQk0sRUFBVUgsS0FBS0YsR0FFUk8sRUFDSE4sRUFBWUYsRUFBUUMsRUFBYXRILEdBQ2pDc0gsRUFHTixRQUFTUSxHQUFTVCxHQUNoQixPQUFRbEMsR0FBUzdDLEtBQUsrRSxJQUNwQixJQUFLLHFCQUNMLElBQUssc0JBQ0wsSUFBSyxzQkFDTCxJQUFLLHdCQUNMLElBQUssd0JBQ0wsSUFBSyxzQkFDTCxJQUFLLDZCQUNMLElBQUssdUJBQ0wsSUFBSyx1QkFDSCxNQUFPLElBQUlBLEdBQU9XLFlBQVlQLEVBQVlKLEVBQU9ZLFFBQVNaLEVBQU9hLFdBQVliLEVBQU9oRyxPQUV0RixLQUFLLHVCQUVILElBQUtnRyxFQUFPakcsTUFBTyxDQUdqQixHQUFJK0csR0FBUyxHQUFJQyxhQUFZZixFQUFPZ0IsV0FHcEMsT0FGQSxJQUFJQyxZQUFXSCxHQUFRSSxJQUFJLEdBQUlELFlBQVdqQixJQUVuQ2MsRUFFVCxNQUFPZCxHQUFPakcsTUFBTSxFQUV0QixLQUFLLG1CQUNMLElBQUssa0JBQ0wsSUFBSyxrQkFDTCxJQUFLLGdCQUNILE1BQU8sSUFBSWlHLEdBQU9XLFlBQVlYLEVBQU92RCxVQUV2QyxLQUFLLGtCQUNILEdBQUkwRSxHQUFLLEdBQUl4RSxRQUFPcUQsRUFBT0EsT0FBUUEsRUFBT2xDLFdBQVdqRSxNQUFNLFdBQVUsR0FFckUsT0FEQXNILEdBQUdDLFVBQVlwQixFQUFPb0IsVUFDZkQsQ0FFVCxLQUFLLGdCQUNILE1BQU8sSUFBSW5CLEdBQU9XLGFBQWFYLElBQVVxQixLQUFNckIsRUFBT3FCLE9BRzFELEdBQUl0RyxFQUFXaUYsRUFBT25ELFdBQ3BCLE1BQU9tRCxHQUFPbkQsV0FBVSxHQTNJNUIsR0FBSXdELE1BQ0FDLElBR0osSUFGQTNILEVBQVdGLEVBQXNCRSxHQUFZQSxFQUFXRCxJQUVwRHVILEVBQWEsQ0FDZixHQUFJdEIsRUFBYXNCLElBQWdCbkIsRUFBY21CLEdBQzdDLEtBQU1NLElBQVMsT0FBUSx3REFFekIsSUFBSVAsSUFBV0MsRUFDYixLQUFNTSxJQUFTLE1BQU8sb0RBZ0J4QixPQVpJbEcsSUFBUTRGLEdBQ1ZBLEVBQVlqRyxPQUFTLEVBRXJCVyxFQUFRc0YsRUFBYSxTQUFTeEUsRUFBT1gsR0FDdkIsY0FBUkEsU0FDS21GLEdBQVluRixLQUt6QnVGLEVBQVlGLEtBQUtILEdBQ2pCTSxFQUFVSCxLQUFLRixHQUNSQyxFQUFZRixFQUFRQyxFQUFhdEgsR0FHMUMsTUFBT3lILEdBQVlKLEVBQVFySCxHQXNIN0IsUUFBUzJJLEdBQWNDLEVBQUdDLEdBQUssTUFBT0QsS0FBTUMsR0FBTUQsSUFBTUEsR0FBS0MsSUFBTUEsRUFrRW5FLFFBQVNDLEdBQU9DLEVBQUlDLEdBQ2xCLEdBQUlELElBQU9DLEVBQUksT0FBTyxDQUN0QixJQUFXLE9BQVBELEdBQXNCLE9BQVBDLEVBQWEsT0FBTyxDQUV2QyxJQUFJRCxJQUFPQSxHQUFNQyxJQUFPQSxFQUFJLE9BQU8sQ0FDbkMsSUFBb0MzSCxHQUFRYyxFQUFLOEcsRUFBN0NDLFFBQVlILEdBQUlJLFFBQVlILEVBQ2hDLElBQUlFLElBQU9DLEdBQWEsV0FBUEQsRUFBaUIsQ0FDaEMsSUFBSXhILEdBQVFxSCxHQVFMLENBQUEsR0FBSW5GLEVBQU9tRixHQUNoQixRQUFLbkYsRUFBT29GLElBQ0xMLEVBQWNJLEVBQUdLLFVBQVdKLEVBQUdJLFVBQ2pDLElBQUlyRixFQUFTZ0YsR0FDbEIsUUFBS2hGLEVBQVNpRixJQUNQRCxFQUFHNUQsYUFBZTZELEVBQUc3RCxVQUU1QixJQUFJSSxFQUFRd0QsSUFBT3hELEVBQVF5RCxJQUFPdkgsRUFBU3NILElBQU90SCxFQUFTdUgsSUFDekR0SCxHQUFRc0gsSUFBT3BGLEVBQU9vRixJQUFPakYsRUFBU2lGLEdBQUssT0FBTyxDQUNwREMsR0FBU0ksSUFDVCxLQUFLbEgsSUFBTzRHLEdBQ1YsR0FBc0IsTUFBbEI1RyxFQUFJbUgsT0FBTyxLQUFjbEgsRUFBVzJHLEVBQUc1RyxJQUEzQyxDQUNBLElBQUsyRyxFQUFPQyxFQUFHNUcsR0FBTTZHLEVBQUc3RyxJQUFPLE9BQU8sQ0FDdEM4RyxHQUFPOUcsSUFBTyxFQUVoQixJQUFLQSxJQUFPNkcsR0FDVixLQUFNN0csSUFBTzhHLEtBQ1MsTUFBbEI5RyxFQUFJbUgsT0FBTyxJQUNYMUosRUFBVW9KLEVBQUc3RyxNQUNaQyxFQUFXNEcsRUFBRzdHLElBQU8sT0FBTyxDQUVuQyxRQUFPLEVBNUJQLElBQUtULEdBQVFzSCxHQUFLLE9BQU8sQ0FDekIsS0FBSzNILEVBQVMwSCxFQUFHMUgsVUFBWTJILEVBQUczSCxPQUFRLENBQ3RDLElBQUtjLEVBQU0sRUFBR0EsRUFBTWQsRUFBUWMsSUFDMUIsSUFBSzJHLEVBQU9DLEVBQUc1RyxHQUFNNkcsRUFBRzdHLElBQU8sT0FBTyxDQUV4QyxRQUFPLEdBMEJiLE9BQU8sRUE0RlQsUUFBU29ILEdBQU9DLEVBQVFDLEVBQVF0SSxHQUM5QixNQUFPcUksR0FBT0QsT0FBT25JLEdBQU1rQixLQUFLbUgsRUFBUXRJLElBRzFDLFFBQVNOLEdBQVU2SSxFQUFNQyxHQUN2QixNQUFPdkksSUFBTWtCLEtBQUtvSCxFQUFNQyxHQUFjLEdBcUJ4QyxRQUFTQyxHQUFLQyxFQUFNQyxHQUNsQixHQUFJQyxHQUFZdEosVUFBVVksT0FBUyxFQUFJUixFQUFVSixVQUFXLEtBQzVELFFBQUkyQixFQUFXMEgsSUFBU0EsWUFBYzlGLFFBYzdCOEYsRUFiQUMsRUFBVTFJLE9BQ2IsV0FDRSxNQUFPWixXQUFVWSxPQUNieUksRUFBR0UsTUFBTUgsRUFBTU4sRUFBT1EsRUFBV3RKLFVBQVcsSUFDNUNxSixFQUFHRSxNQUFNSCxFQUFNRSxJQUVyQixXQUNFLE1BQU90SixXQUFVWSxPQUNieUksRUFBR0UsTUFBTUgsRUFBTXBKLFdBQ2ZxSixFQUFHeEgsS0FBS3VILElBU3RCLFFBQVNJLEdBQWU5SCxFQUFLVyxHQUMzQixHQUFJb0gsR0FBTXBILENBWVYsT0FWbUIsZ0JBQVJYLElBQXNDLE1BQWxCQSxFQUFJbUgsT0FBTyxJQUFnQyxNQUFsQm5ILEVBQUltSCxPQUFPLEdBQ2pFWSxNQUFNbkMsR0FDR3RHLEVBQVNxQixHQUNsQm9ILEVBQU0sVUFDR3BILEdBQVV2RCxFQUFPNEssV0FBYXJILEVBQ3ZDb0gsRUFBTSxZQUNHM0UsRUFBUXpDLEtBQ2pCb0gsRUFBTSxVQUdEQSxFQXdDVCxRQUFTRSxHQUFPNUksRUFBSzZJLEdBQ25CLElBQUlqRixFQUFZNUQsR0FJaEIsTUFIS3ZCLEdBQVNvSyxLQUNaQSxFQUFTQSxFQUFTLEVBQUksTUFFakJDLEtBQUtDLFVBQVUvSSxFQUFLeUksRUFBZ0JJLEdBZ0I3QyxRQUFTRyxHQUFTQyxHQUNoQixNQUFPOUksR0FBUzhJLEdBQ1ZILEtBQUtJLE1BQU1ELEdBQ1hBLEVBS1IsUUFBU0UsR0FBaUJDLEVBQVVDLEdBR2xDRCxFQUFXQSxFQUFTM0osUUFBUTZKLEdBQVksR0FDeEMsSUFBSUMsR0FBMEJsSCxLQUFLNkcsTUFBTSx5QkFBMkJFLEdBQVksR0FDaEYsT0FBT0ksSUFBWUQsR0FBMkJGLEVBQVdFLEVBSTNELFFBQVNFLEdBQWVDLEVBQU1DLEdBRzVCLE1BRkFELEdBQU8sR0FBSXJILE1BQUtxSCxFQUFLOUIsV0FDckI4QixFQUFLRSxXQUFXRixFQUFLRyxhQUFlRixHQUM3QkQsRUFJVCxRQUFTSSxJQUF1QkosRUFBTU4sRUFBVVcsR0FDOUNBLEVBQVVBLEdBQVcsRUFBSSxDQUN6QixJQUFJQyxHQUFxQk4sRUFBS08sbUJBRTlCLE9BQU9SLEdBQWVDLEVBQU1LLEdBRFBaLEVBQWlCQyxFQUFVWSxHQUNRQSxJQU8xRCxRQUFTRSxJQUFZOUUsR0FDbkJBLEVBQVVoRixHQUFPZ0YsR0FBU3hDLFFBQVF1SCxPQUNsQyxJQUFJQyxHQUFXaEssR0FBTyxTQUFTaUssT0FBT2pGLEdBQVNrRixNQUMvQyxLQUNFLE1BQU9sRixHQUFRLEdBQUdtRixXQUFhQyxHQUFpQm5GLEdBQVUrRSxHQUN0REEsRUFDRTFLLE1BQU0sY0FBYyxHQUNwQkQsUUFBUSxhQUFjLFNBQVNDLEVBQU8rQyxHQUFXLE1BQU8sSUFBTTRDLEdBQVU1QyxLQUM5RSxNQUFPZ0ksR0FDUCxNQUFPcEYsSUFBVStFLElBZ0JyQixRQUFTTSxJQUFzQnBKLEdBQzdCLElBQ0UsTUFBT3FKLG9CQUFtQnJKLEdBQzFCLE1BQU9tSixLQVVYLFFBQVNHLElBQXlCQyxHQUNoQyxHQUFJN0ssS0F1QkosT0F0QkFRLElBQVNxSyxHQUFZLElBQUkzRixNQUFNLEtBQU0sU0FBUzJGLEdBQzVDLEdBQUlDLEdBQVluSyxFQUFLK0gsQ0FDakJtQyxLQUNGbEssRUFBTWtLLEVBQVdBLEVBQVNwTCxRQUFRLE1BQU0sT0FDeENxTCxFQUFhRCxFQUFTcEYsUUFBUSxNQUNWLElBQWhCcUYsSUFDRm5LLEVBQU1rSyxFQUFTRSxVQUFVLEVBQUdELEdBQzVCcEMsRUFBTW1DLEVBQVNFLFVBQVVELEVBQWEsSUFFeENuSyxFQUFNK0osR0FBc0IvSixHQUN4QnZDLEVBQVV1QyxLQUNaK0gsR0FBTXRLLEVBQVVzSyxJQUFPZ0MsR0FBc0JoQyxHQUN4QzdILEdBQWVDLEtBQUtkLEVBQUtXLEdBRW5CVCxHQUFRRixFQUFJVyxJQUNyQlgsRUFBSVcsR0FBS3FGLEtBQUswQyxHQUVkMUksRUFBSVcsSUFBUVgsRUFBSVcsR0FBSytILEdBSnJCMUksRUFBSVcsR0FBTytILE1BU1oxSSxFQUdULFFBQVNnTCxJQUFXaEwsR0FDbEIsR0FBSWlMLEtBWUosT0FYQXpLLEdBQVFSLEVBQUssU0FBU3NCLEVBQU9YLEdBQ3ZCVCxHQUFRb0IsR0FDVmQsRUFBUWMsRUFBTyxTQUFTNEosR0FDdEJELEVBQU1qRixLQUFLbUYsR0FBZXhLLEdBQUssS0FDSixJQUFmdUssRUFBc0IsR0FBSyxJQUFNQyxHQUFlRCxHQUFZLE9BRzVFRCxFQUFNakYsS0FBS21GLEdBQWV4SyxHQUFLLEtBQ1QsSUFBVlcsRUFBaUIsR0FBSyxJQUFNNkosR0FBZTdKLEdBQU8sT0FHekQySixFQUFNcEwsT0FBU29MLEVBQU1HLEtBQUssS0FBTyxHQWUxQyxRQUFTQyxJQUFpQjNDLEdBQ3hCLE1BQU95QyxJQUFlekMsR0FBSyxHQUNoQmpKLFFBQVEsUUFBUyxLQUNqQkEsUUFBUSxRQUFTLEtBQ2pCQSxRQUFRLFFBQVMsS0FlOUIsUUFBUzBMLElBQWV6QyxFQUFLNEMsR0FDM0IsTUFBT3hMLG9CQUFtQjRJLEdBQ2ZqSixRQUFRLFFBQVMsS0FDakJBLFFBQVEsUUFBUyxLQUNqQkEsUUFBUSxPQUFRLEtBQ2hCQSxRQUFRLFFBQVMsS0FDakJBLFFBQVEsUUFBUyxLQUNqQkEsUUFBUSxPQUFTNkwsRUFBa0IsTUFBUSxLQUt4RCxRQUFTQyxJQUFlbkcsRUFBU29HLEdBQy9CLEdBQUkxRyxHQUFNL0YsRUFBR2lELEVBQUt5SixHQUFlNUwsTUFDakMsS0FBS2QsRUFBSSxFQUFHQSxFQUFJaUQsSUFBTWpELEVBRXBCLEdBREErRixFQUFPMkcsR0FBZTFNLEdBQUt5TSxFQUN2QnJMLEVBQVMyRSxFQUFPTSxFQUFRc0csYUFBYTVHLElBQ3ZDLE1BQU9BLEVBR1gsT0FBTyxNQTZMVCxRQUFTNkcsSUFBWXZHLEVBQVN3RyxHQUM1QixHQUFJQyxHQUNBbE4sRUFDQVYsSUFvQkosSUFqQkF1QyxFQUFRaUwsR0FBZ0IsU0FBU0ssR0FDL0IsR0FBSUMsR0FBT0QsRUFBUyxPQUVmRCxHQUFjekcsRUFBUTRHLGNBQWdCNUcsRUFBUTRHLGFBQWFELEtBQzlERixFQUFhekcsRUFDYnpHLEVBQVN5RyxFQUFRc0csYUFBYUssTUFHbEN2TCxFQUFRaUwsR0FBZ0IsU0FBU0ssR0FDL0IsR0FDSUcsR0FEQUYsRUFBT0QsRUFBUyxPQUdmRCxJQUFlSSxFQUFZN0csRUFBUThHLGNBQWMsSUFBTUgsRUFBS3RNLFFBQVEsSUFBSyxPQUFTLFFBQ3JGb00sRUFBYUksRUFDYnROLEVBQVNzTixFQUFVUCxhQUFhSyxNQUdoQ0YsRUFBWSxDQUNkLElBQUtNLEdBR0gsV0FGQXBPLEdBQU9xTyxRQUFRQyxNQUFNLDJIQUl2QnBPLEdBQU9xTyxTQUF1RCxPQUE1Q2YsR0FBZU0sRUFBWSxhQUM3Q0QsRUFBVUMsRUFBWWxOLEdBQVVBLE1BQWNWLElBK0RsRCxRQUFTMk4sSUFBVXhHLEVBQVNtSCxFQUFTdE8sR0FDOUJDLEVBQVNELEtBQVNBLE1BSXZCQSxFQUFTNEUsR0FGUHlKLFVBQVUsR0FFbUJyTyxFQUMvQixJQUFJdU8sR0FBYyxXQUdoQixHQUZBcEgsRUFBVWhGLEdBQU9nRixHQUViQSxFQUFRcUgsV0FBWSxDQUN0QixHQUFJQyxHQUFPdEgsRUFBUSxLQUFPckgsRUFBTzRLLFNBQVksV0FBYXVCLEdBQVk5RSxFQUV0RSxNQUFNZ0IsSUFDRixVQUNBLG1EQUNBc0csRUFBSWpOLFFBQVEsSUFBSSxRQUFRQSxRQUFRLElBQUksU0FHMUM4TSxFQUFVQSxNQUNWQSxFQUFRSSxTQUFTLFdBQVksU0FBU0MsR0FDcENBLEVBQVN0TCxNQUFNLGVBQWdCOEQsTUFHN0JuSCxFQUFPNE8sa0JBRVROLEVBQVF2RyxNQUFNLG1CQUFvQixTQUFTOEcsR0FDekNBLEVBQWlCRCxrQkFBaUIsTUFJdENOLEVBQVFJLFFBQVEsS0FDaEIsSUFBSUYsR0FBV00sR0FBZVIsRUFBU3RPLEVBQU9xTyxTQVM5QyxPQVJBRyxHQUFTTyxRQUFRLGFBQWMsZUFBZ0IsV0FBWSxZQUN4RCxTQUF3QkMsRUFBTzdILEVBQVM4SCxFQUFTVCxHQUNoRFEsRUFBTUUsT0FBTyxXQUNYL0gsRUFBUWdJLEtBQUssWUFBYVgsR0FDMUJTLEVBQVE5SCxHQUFTNkgsUUFJaEJSLEdBR0xZLEVBQXVCLHlCQUN2QkMsRUFBcUIsc0JBT3pCLElBTEl2UCxHQUFVc1AsRUFBcUIzSSxLQUFLM0csRUFBT2dPLFFBQzdDOU4sRUFBTzRPLGtCQUFtQixFQUMxQjlPLEVBQU9nTyxLQUFPaE8sRUFBT2dPLEtBQUt0TSxRQUFRNE4sRUFBc0IsS0FHdER0UCxJQUFXdVAsRUFBbUI1SSxLQUFLM0csRUFBT2dPLE1BQzVDLE1BQU9TLElBR1R6TyxHQUFPZ08sS0FBT2hPLEVBQU9nTyxLQUFLdE0sUUFBUTZOLEVBQW9CLElBQ3REQyxHQUFRQyxnQkFBa0IsU0FBU0MsR0FJakMsTUFIQWpOLEdBQVFpTixFQUFjLFNBQVM5TyxHQUM3QjROLEVBQVF2RyxLQUFLckgsS0FFUjZOLEtBR0w1TCxFQUFXMk0sR0FBUUcsMEJBQ3JCSCxHQUFRRywwQkFjWixRQUFTQyxNQUNQNVAsRUFBT2dPLEtBQU8sd0JBQTBCaE8sRUFBT2dPLEtBQy9DaE8sRUFBTzZQLFNBQVNDLFNBV2xCLFFBQVNDLElBQWVDLEdBQ3RCLEdBQUl0QixHQUFXYyxHQUFRbkksUUFBUTJJLEdBQWF0QixVQUM1QyxLQUFLQSxFQUNILEtBQU1yRyxJQUFTLE9BQ2IsMkRBRUosT0FBT3FHLEdBQVN1QixJQUFJLGlCQUl0QixRQUFTQyxJQUFXbEMsRUFBTW1DLEdBRXhCLE1BREFBLEdBQVlBLEdBQWEsSUFDbEJuQyxFQUFLdE0sUUFBUTBPLEdBQW1CLFNBQVNDLEVBQVFDLEdBQ3RELE9BQVFBLEVBQU1ILEVBQVksSUFBTUUsRUFBT0UsZ0JBMkQzQyxRQUFTQyxJQUFVaFAsRUFBS3dNLEVBQU15QyxHQUM1QixJQUFLalAsRUFDSCxLQUFNNkcsSUFBUyxPQUFRLHdCQUE0QjJGLEdBQVEsSUFBT3lDLEdBQVUsV0FFOUUsT0FBT2pQLEdBR1QsUUFBU2tQLElBQVlsUCxFQUFLd00sRUFBTTJDLEdBTzlCLE1BTklBLElBQXlCeE8sR0FBUVgsS0FDakNBLEVBQU1BLEVBQUlBLEVBQUlNLE9BQVMsSUFHM0IwTyxHQUFVM04sRUFBV3JCLEdBQU13TSxFQUFNLHdCQUM1QnhNLEdBQXNCLGdCQUFSQSxHQUFtQkEsRUFBSWlILFlBQVl1RixNQUFRLGVBQWtCeE0sS0FDekVBLEVBUVQsUUFBU29QLElBQXdCNUMsRUFBTXJMLEdBQ3JDLEdBQWEsbUJBQVRxTCxFQUNGLEtBQU0zRixJQUFTLFVBQVcseUNBQTBDMUYsR0FZeEUsUUFBU2tPLElBQU81TyxFQUFLNk8sRUFBTUMsR0FDekIsSUFBS0QsRUFBTSxNQUFPN08sRUFNbEIsS0FBSyxHQUpEVyxHQURBTyxFQUFPMk4sRUFBSzNKLE1BQU0sS0FFbEI2SixFQUFlL08sRUFDZmdQLEVBQU05TixFQUFLckIsT0FFTmQsRUFBSSxFQUFHQSxFQUFJaVEsRUFBS2pRLElBQ3ZCNEIsRUFBTU8sRUFBS25DLEdBQ1BpQixJQUNGQSxHQUFPK08sRUFBZS9PLEdBQUtXLEdBRy9CLFFBQUttTyxHQUFpQmxPLEVBQVdaLEdBQ3hCb0ksRUFBSzJHLEVBQWMvTyxHQUVyQkEsRUFRVCxRQUFTaVAsSUFBY0MsR0FNckIsSUFBSyxHQUZEQyxHQUZBdkssRUFBT3NLLEVBQU0sR0FDYkUsRUFBVUYsRUFBTUEsRUFBTXJQLE9BQVMsR0FHMUJkLEVBQUksRUFBRzZGLElBQVN3SyxJQUFZeEssRUFBT0EsRUFBS3lLLGFBQWN0USxLQUN6RG9RLEdBQWNELEVBQU1uUSxLQUFPNkYsS0FDeEJ1SyxJQUNIQSxFQUFhL08sR0FBT1IsR0FBTWtCLEtBQUtvTyxFQUFPLEVBQUduUSxLQUUzQ29RLEVBQVduSixLQUFLcEIsR0FJcEIsT0FBT3VLLElBQWNELEVBZXZCLFFBQVNySCxNQUNQLE1BQU94SCxRQUFPZ0QsT0FBTyxNQUd2QixRQUFTMEYsSUFBVXpILEdBQ2pCLEdBQWEsTUFBVEEsRUFDRixNQUFPLEVBRVQsY0FBZUEsSUFDYixJQUFLLFNBQ0gsS0FDRixLQUFLLFNBQ0hBLEVBQVEsR0FBS0EsQ0FDYixNQUNGLFNBSUlBLEdBSEVvQyxFQUFrQnBDLElBQVdwQixHQUFRb0IsSUFBV2MsRUFBT2QsR0FHakRzSCxFQUFPdEgsR0FGUEEsRUFBTXFDLFdBTXBCLE1BQU9yQyxHQW1CVCxRQUFTZ08sSUFBa0J2UixHQUt6QixRQUFTd1IsR0FBT3ZQLEVBQUsrTCxFQUFNeUQsR0FDekIsTUFBT3hQLEdBQUkrTCxLQUFVL0wsRUFBSStMLEdBQVF5RCxLQUpuQyxHQUFJQyxHQUFrQi9RLEVBQU8sYUFDekIwSCxFQUFXMUgsRUFBTyxNQU1sQjZPLEVBQVVnQyxFQUFPeFIsRUFBUSxVQUFXc0MsT0FLeEMsT0FGQWtOLEdBQVFtQyxTQUFXbkMsRUFBUW1DLFVBQVloUixFQUVoQzZRLEVBQU9oQyxFQUFTLFNBQVUsV0FFL0IsR0FBSWhCLEtBcURKLE9BQU8sVUFBZ0JSLEVBQU00RCxFQUFVQyxHQUVyQyxHQUFJQyxLQVlKLE9BVjhCLFVBQVM5RCxFQUFNckwsR0FDM0MsR0FBYSxtQkFBVHFMLEVBQ0YsS0FBTTNGLEdBQVMsVUFBVyx5Q0FBMEMxRixJQUloRHFMLEVBQU0sVUFDMUI0RCxHQUFZcEQsRUFBUTFMLGVBQWVrTCxLQUNyQ1EsRUFBUVIsR0FBUSxNQUVYd0QsRUFBT2hELEVBQVNSLEVBQU0sV0E4UjNCLFFBQVMrRCxHQUFZQyxFQUFVQyxFQUFRQyxFQUFjQyxHQUVuRCxNQURLQSxLQUFPQSxFQUFRQyxHQUNiLFdBRUwsTUFEQUQsR0FBTUQsR0FBZ0IsU0FBU0YsRUFBVUMsRUFBUS9RLFlBQzFDbVIsR0FTWCxRQUFTQyxHQUE0Qk4sRUFBVUMsRUFBUUUsR0FFckQsTUFES0EsS0FBT0EsRUFBUUMsR0FDYixTQUFTRyxFQUFZQyxHQUcxQixNQUZJQSxJQUFtQjNQLEVBQVcyUCxLQUFrQkEsRUFBZ0JDLGFBQWV6RSxHQUNuRm1FLEVBQU1sSyxNQUFNK0osRUFBVUMsRUFBUS9RLFlBQ3ZCbVIsR0EvU1gsSUFBS1QsRUFDSCxLQUFNRixHQUFnQixRQUFTLHNMQUV3QjFELEVBSXpELElBQUlvRSxNQUdBTSxLQUdBQyxLQUVBelMsRUFBUzZSLEVBQVksWUFBYSxTQUFVLE9BQVFXLEdBR3BETCxHQUVGTyxhQUFjUixFQUNkUyxjQUFlSCxFQUNmSSxXQUFZSCxFQWdDWmIsS0FBTSxTQUFTdk8sR0FDYixHQUFJbEQsRUFBVWtELEdBQVEsQ0FDcEIsSUFBS3BELEVBQVNvRCxHQUFRLEtBQU04RSxHQUFTLE9BQVEsbUNBQXNDLFFBRW5GLE9BREF5SixHQUFPdk8sRUFDQXdQLEtBRVQsTUFBT2pCLElBWVRGLFNBQVVBLEVBVVY1RCxLQUFNQSxFQWFOZ0UsU0FBVU0sRUFBNEIsV0FBWSxZQVdsRGIsUUFBU2EsRUFBNEIsV0FBWSxXQVdqRFUsUUFBU1YsRUFBNEIsV0FBWSxXQVdqRC9PLE1BQU93TyxFQUFZLFdBQVksU0FZL0JrQixTQUFVbEIsRUFBWSxXQUFZLFdBQVksV0FZOUNtQixVQUFXWixFQUE0QixXQUFZLFlBQWFJLEdBa0NoRVMsVUFBV2IsRUFBNEIsbUJBQW9CLFlBa0IzRGMsT0FBUWQsRUFBNEIsa0JBQW1CLFlBWXZEZSxXQUFZZixFQUE0QixzQkFBdUIsWUFhL0RnQixVQUFXaEIsRUFBNEIsbUJBQW9CLGFBYTNEaUIsVUFBV2pCLEVBQTRCLG1CQUFvQixhQWEzRHBTLE9BQVFBLEVBWVJzVCxJQUFLLFNBQVNDLEdBRVosTUFEQWQsR0FBVTFLLEtBQUt3TCxHQUNSVixNQVFYLE9BSklsQixJQUNGM1IsRUFBTzJSLEdBR0ZRLE9BMENmLFFBQVNxQixJQUFZdFAsRUFBS04sR0FDeEIsR0FBSTNCLEdBQVFpQyxHQUFNLENBQ2hCTixFQUFNQSxLQUVOLEtBQUssR0FBSTlDLEdBQUksRUFBR2lELEVBQUtHLEVBQUl0QyxPQUFRZCxFQUFJaUQsRUFBSWpELElBQ3ZDOEMsRUFBSTlDLEdBQUtvRCxFQUFJcEQsT0FFVixJQUFJYixFQUFTaUUsR0FBTSxDQUN4Qk4sRUFBTUEsS0FFTixLQUFLLEdBQUlsQixLQUFPd0IsR0FDVSxNQUFsQnhCLEVBQUltSCxPQUFPLElBQWdDLE1BQWxCbkgsRUFBSW1ILE9BQU8sS0FDeENqRyxFQUFJbEIsR0FBT3dCLEVBQUl4QixJQUtyQixNQUFPa0IsSUFBT00sRUFLaEIsUUFBU3VQLElBQWdCMVIsRUFBS3hCLEdBQzVCLEdBQUltVCxLQVVKLE9BTElyVCxHQUFzQkUsS0FHeEJ3QixFQUFNdU4sR0FBUTNILEtBQUs1RixFQUFLLEtBQU14QixJQUV6QnNLLEtBQUtDLFVBQVUvSSxFQUFLLFNBQVNXLEVBQUsrSCxHQUV2QyxHQURBQSxFQUFNRCxFQUFlOUgsRUFBSytILEdBQ3RCeEssRUFBU3dLLEdBQU0sQ0FFakIsR0FBSWlKLEVBQUtsTSxRQUFRaUQsSUFBUSxFQUFHLE1BQU8sS0FFbkNpSixHQUFLM0wsS0FBSzBDLEdBRVosTUFBT0EsS0FJWCxRQUFTbEosSUFBY1EsRUFBS3hCLEdBQzFCLE1BQW1CLGtCQUFSd0IsR0FDRkEsRUFBSTJELFdBQVdsRSxRQUFRLGNBQWUsSUFDcENtRSxFQUFZNUQsR0FDZCxZQUNpQixnQkFBUkEsR0FDVDBSLEdBQWdCMVIsRUFBS3hCLEdBRXZCd0IsRUFxWlQsUUFBUzRSLE1BQWEsUUFBU0MsR0FhL0IsUUFBU0MsSUFBZ0IvRixHQUNyQixNQUFPZ0csSUFBYWhHLEVBQUt0TSxRQUFRdVMsR0FBZ0IsUUFHckQsUUFBU0MsSUFBbUJDLEVBQUs5RCxHQUMvQixNQUFPQSxHQUFPK0QsY0FPaEIsUUFBU0osSUFBYWhHLEdBQ3BCLE1BQU9BLEdBQ0p0TSxRQUFRMlMsR0FBdUJILElBdUJwQyxRQUFTSSxJQUFpQi9ILEdBQ3hCLE9BQVFnSSxHQUFZNU4sS0FBSzRGLEdBRzNCLFFBQVNpSSxJQUFrQjNOLEdBR3pCLEdBQUkyRixHQUFXM0YsRUFBSzJGLFFBQ3BCLE9BQU9BLEtBQWFpSSxLQUFzQmpJLEdBQVlBLElBQWFrSSxHQUdyRSxRQUFTQyxJQUFjOU4sR0FDckIsSUFBSyxHQUFJakUsS0FBT2dTLElBQVEvTixFQUFLZ08sT0FDM0IsT0FBTyxDQUVULFFBQU8sRUFHVCxRQUFTQyxJQUFvQnZJLEVBQU01SixHQUNqQyxHQUFJb1MsR0FBS3BHLEVBQUtxRyxFQUVFaFUsRUFEWmlVLEVBQVd0UyxFQUFRdVMseUJBQ25CL0QsSUFFSixJQUFJbUQsR0FBaUIvSCxHQUVuQjRFLEVBQU1sSixLQUFLdEYsRUFBUXdTLGVBQWU1SSxRQUM3QixDQVNMLElBUEF3SSxFQUFNRSxFQUFTRyxZQUFZelMsRUFBUTBTLGNBQWMsUUFDakQxRyxHQUFPMkcsR0FBZ0JDLEtBQUtoSixLQUFVLEdBQUksS0FBSyxHQUFHZ0UsY0FDbER5RSxFQUFPUSxHQUFRN0csSUFBUTZHLEdBQVFDLFNBQy9CVixFQUFJVyxVQUFZVixFQUFLLEdBQUt6SSxFQUFLN0ssUUFBUWlVLEdBQWtCLGFBQWVYLEVBQUssR0FHN0VoVSxFQUFJZ1UsRUFBSyxHQUNGaFUsS0FDTCtULEVBQU1BLEVBQUlhLFNBR1p6RSxHQUFRbkgsRUFBT21ILEVBQU80RCxFQUFJYyxZQUUxQmQsRUFBTUUsRUFBU2EsV0FDZmYsRUFBSWdCLFlBQWMsR0FVcEIsTUFOQWQsR0FBU2MsWUFBYyxHQUN2QmQsRUFBU1MsVUFBWSxHQUNyQmpULEVBQVEwTyxFQUFPLFNBQVN0SyxHQUN0Qm9PLEVBQVNHLFlBQVl2TyxLQUdoQm9PLEVBR1QsUUFBU2UsSUFBZ0J6SixFQUFNNUosR0FDN0JBLEVBQVVBLEdBQVczQyxFQUFPNEssUUFDNUIsSUFBSXFMLEVBRUosUUFBS0EsRUFBU0MsR0FBa0JYLEtBQUtoSixLQUMzQjVKLEVBQVEwUyxjQUFjWSxFQUFPLE1BR2xDQSxFQUFTbkIsR0FBb0J2SSxFQUFNNUosSUFDL0JzVCxFQUFPSixjQU1sQixRQUFTTSxJQUFldFAsRUFBTXVQLEdBQzVCLEdBQUloUixHQUFTeUIsRUFBS3dQLFVBRWRqUixJQUNGQSxFQUFPa1IsYUFBYUYsRUFBU3ZQLEdBRy9CdVAsRUFBUWhCLFlBQVl2TyxHQVd0QixRQUFTMFAsSUFBT2xQLEdBQ2QsR0FBSUEsWUFBbUJrUCxJQUNyQixNQUFPbFAsRUFHVCxJQUFJbVAsRUFNSixJQUpJcFUsRUFBU2lGLEtBQ1hBLEVBQVVvUCxHQUFLcFAsR0FDZm1QLEdBQWMsS0FFVnpELGVBQWdCd0QsS0FBUyxDQUM3QixHQUFJQyxHQUFxQyxNQUF0Qm5QLEVBQVEwQyxPQUFPLEdBQ2hDLEtBQU0yTSxJQUFhLFFBQVMsbUhBRTlCLE9BQU8sSUFBSUgsSUFBT2xQLEdBR2hCbVAsRUFDRkcsR0FBZTVELEtBQU1pRCxHQUFnQjNPLElBQzVCeEUsRUFBV3dFLEdBQ3BCdVAsR0FBWXZQLEdBRVpzUCxHQUFlNUQsS0FBTTFMLEdBSXpCLFFBQVN3UCxJQUFZeFAsR0FDbkIsTUFBT0EsR0FBUTFDLFdBQVUsR0FHM0IsUUFBU21TLElBQWF6UCxFQUFTMFAsSUFDeEJBLEdBQW1CdkMsR0FBa0JuTixJQUFVaEYsR0FBTzJVLFdBQVczUCxJQUVsRUEsRUFBUTRQLGtCQUNWNVUsR0FBTzJVLFVBQVUzUCxFQUFRNFAsaUJBQWlCLE1BSTlDLFFBQVNDLElBQVU3UCxFQUFTOEIsRUFBTW9CLEVBQUk0TSxHQUNwQyxHQUFJOVcsRUFBVThXLEdBQWMsS0FBTVQsSUFBYSxVQUFXLHdEQUUxRCxJQUFJVSxHQUFlQyxHQUFtQmhRLEdBQ2xDaVEsRUFBU0YsR0FBZ0JBLEVBQWFFLE9BQ3RDQyxFQUFTSCxHQUFnQkEsRUFBYUcsTUFFMUMsSUFBS0EsRUFFTCxHQUFLcE8sRUFPRSxDQUVMLEdBQUlxTyxHQUFnQixTQUFTck8sR0FDM0IsR0FBSXNPLEdBQWNILEVBQU9uTyxFQUNyQjlJLEdBQVVrSyxJQUNaNUMsRUFBWThQLE1BQW1CbE4sR0FFM0JsSyxFQUFVa0ssSUFBT2tOLEdBQWVBLEVBQVkzVixPQUFTLElBQ3pEdUYsRUFBUXFRLG9CQUFvQnZPLEVBQU1vTyxTQUMzQkQsR0FBT25PLElBSWxCMUcsR0FBUTBHLEVBQUtoQyxNQUFNLEtBQU0sU0FBU2dDLEdBQ2hDcU8sRUFBY3JPLEdBQ1Z3TyxHQUFnQnhPLElBQ2xCcU8sRUFBY0csR0FBZ0J4TyxVQXRCbEMsS0FBS0EsSUFBUW1PLEdBQ0UsYUFBVG5PLEdBQ0Y5QixFQUFRcVEsb0JBQW9Cdk8sRUFBTW9PLFNBRTdCRCxHQUFPbk8sR0F3QnBCLFFBQVN5TyxJQUFpQnZRLEVBQVMyRyxHQUNqQyxHQUFJNkosR0FBWXhRLEVBQVF3TixNQUNwQnVDLEVBQWVTLEdBQWFqRCxHQUFRaUQsRUFFeEMsSUFBSVQsRUFBYyxDQUNoQixHQUFJcEosRUFFRixrQkFET29KLEdBQWEvSCxLQUFLckIsRUFJdkJvSixHQUFhRyxTQUNYSCxFQUFhRSxPQUFPUSxVQUN0QlYsRUFBYUcsVUFBVyxZQUUxQkwsR0FBVTdQLFVBRUx1TixJQUFRaUQsR0FDZnhRLEVBQVF3TixVQUFRck0sSUFLcEIsUUFBUzZPLElBQW1CaFEsRUFBUzBRLEdBQ25DLEdBQUlGLEdBQVl4USxFQUFRd04sTUFDcEJ1QyxFQUFlUyxHQUFhakQsR0FBUWlELEVBT3hDLE9BTElFLEtBQXNCWCxJQUN4Qi9QLEVBQVF3TixNQUFRZ0QsRUFBWWhFLEtBQzVCdUQsRUFBZXhDLEdBQVFpRCxJQUFjUCxVQUFZakksUUFBVWtJLFdBQVEvTyxLQUc5RDRPLEVBSVQsUUFBU1ksSUFBVzNRLEVBQVN6RSxFQUFLVyxHQUNoQyxHQUFJaVIsR0FBa0JuTixHQUFVLENBQzlCLEdBQUlQLEdBRUFtUixFQUFpQjVYLEVBQVVrRCxHQUMzQjJVLEdBQWtCRCxHQUFrQnJWLElBQVF6QyxFQUFTeUMsR0FDckR1VixHQUFjdlYsRUFDZHdVLEVBQWVDLEdBQW1CaFEsR0FBVTZRLEdBQzVDN0ksRUFBTytILEdBQWdCQSxFQUFhL0gsSUFFeEMsSUFBSTRJLEVBQ0Y1SSxFQUFLMkUsR0FBYXBSLElBQVFXLE1BQ3JCLENBQ0wsR0FBSTRVLEVBQ0YsTUFBTzlJLEVBRVAsSUFBSTZJLEVBRUYsTUFBTzdJLElBQVFBLEVBQUsyRSxHQUFhcFIsR0FFakMsS0FBS2tFLElBQVFsRSxHQUNYeU0sRUFBSzJFLEdBQWFsTixJQUFTbEUsRUFBSWtFLEtBUTNDLFFBQVNzUixJQUFlL1EsRUFBU2dSLEdBQy9CLFFBQUtoUixFQUFRc0csZUFDSixLQUFPdEcsRUFBUXNHLGFBQWEsVUFBWSxJQUFNLEtBQUtqTSxRQUFRLFVBQVcsS0FDM0VnRyxRQUFRLElBQU0yUSxFQUFXLE1BQVEsRUFHdkMsUUFBU0MsSUFBa0JqUixFQUFTa1IsR0FDOUJBLEdBQWNsUixFQUFRbVIsY0FDeEIvVixFQUFROFYsRUFBV3BSLE1BQU0sS0FBTSxTQUFTc1IsR0FDdENwUixFQUFRbVIsYUFBYSxRQUFTL0IsSUFDekIsS0FBT3BQLEVBQVFzRyxhQUFhLFVBQVksSUFBTSxLQUM5Q2pNLFFBQVEsVUFBVyxLQUNuQkEsUUFBUSxJQUFNK1UsR0FBS2dDLEdBQVksSUFBSyxTQU0vQyxRQUFTQyxJQUFlclIsRUFBU2tSLEdBQy9CLEdBQUlBLEdBQWNsUixFQUFRbVIsYUFBYyxDQUN0QyxHQUFJRyxJQUFtQixLQUFPdFIsRUFBUXNHLGFBQWEsVUFBWSxJQUFNLEtBQzVDak0sUUFBUSxVQUFXLElBRTVDZSxHQUFROFYsRUFBV3BSLE1BQU0sS0FBTSxTQUFTc1IsR0FDdENBLEVBQVdoQyxHQUFLZ0MsSUFDdUMsSUFBbkRFLEVBQWdCalIsUUFBUSxJQUFNK1EsRUFBVyxPQUMzQ0UsR0FBbUJGLEVBQVcsT0FJbENwUixFQUFRbVIsYUFBYSxRQUFTL0IsR0FBS2tDLEtBS3ZDLFFBQVNoQyxJQUFlaUMsRUFBTUMsR0FHNUIsR0FBSUEsRUFHRixHQUFJQSxFQUFTck0sU0FDWG9NLEVBQUtBLEVBQUs5VyxVQUFZK1csTUFDakIsQ0FDTCxHQUFJL1csR0FBUytXLEVBQVMvVyxNQUd0QixJQUFzQixnQkFBWEEsSUFBdUIrVyxFQUFTN1ksU0FBVzZZLEdBQ3BELEdBQUkvVyxFQUNGLElBQUssR0FBSWQsR0FBSSxFQUFHQSxFQUFJYyxFQUFRZCxJQUMxQjRYLEVBQUtBLEVBQUs5VyxVQUFZK1csRUFBUzdYLE9BSW5DNFgsR0FBS0EsRUFBSzlXLFVBQVkrVyxHQU85QixRQUFTQyxJQUFpQnpSLEVBQVMyRyxHQUNqQyxNQUFPK0ssSUFBb0IxUixFQUFTLEtBQU8yRyxHQUFRLGdCQUFrQixjQUd2RSxRQUFTK0ssSUFBb0IxUixFQUFTMkcsRUFBTXpLLEdBR3RDOEQsRUFBUW1GLFdBQWFrSSxLQUN2QnJOLEVBQVVBLEVBQVEyUixnQkFJcEIsS0FGQSxHQUFJQyxHQUFROVcsR0FBUTZMLEdBQVFBLEdBQVFBLEdBRTdCM0csR0FBUyxDQUNkLElBQUssR0FBSXJHLEdBQUksRUFBR2lELEVBQUtnVixFQUFNblgsT0FBUWQsRUFBSWlELEVBQUlqRCxJQUN6QyxHQUFJWCxFQUFVa0QsRUFBUWxCLEdBQU9nTixLQUFLaEksRUFBUzRSLEVBQU1qWSxLQUFNLE1BQU91QyxFQU1oRThELEdBQVVBLEVBQVFnUCxZQUFlaFAsRUFBUW1GLFdBQWEwTSxJQUErQjdSLEVBQVE4UixNQUlqRyxRQUFTQyxJQUFZL1IsR0FFbkIsSUFEQXlQLEdBQWF6UCxHQUFTLEdBQ2ZBLEVBQVF5TyxZQUNiek8sRUFBUWdTLFlBQVloUyxFQUFReU8sWUFJaEMsUUFBU3dELElBQWFqUyxFQUFTa1MsR0FDeEJBLEdBQVV6QyxHQUFhelAsRUFDNUIsSUFBSWpDLEdBQVNpQyxFQUFRZ1AsVUFDakJqUixJQUFRQSxFQUFPaVUsWUFBWWhTLEdBSWpDLFFBQVNtUyxJQUFxQkMsRUFBUUMsR0FDcENBLEVBQU1BLEdBQU8xWixFQUNtQixhQUE1QjBaLEVBQUk5TyxTQUFTK08sV0FJZkQsRUFBSUUsV0FBV0gsR0FHZnBYLEdBQU9xWCxHQUFLRyxHQUFHLE9BQVFKLEdBSTNCLFFBQVM3QyxJQUFZck0sR0FDbkIsUUFBU3VQLEtBQ1A5WixFQUFPNEssU0FBUzhNLG9CQUFvQixtQkFBb0JvQyxHQUN4RDlaLEVBQU8wWCxvQkFBb0IsT0FBUW9DLEdBQ25DdlAsSUFJaUMsYUFBL0J2SyxFQUFPNEssU0FBUytPLFdBQ2xCM1osRUFBTzRaLFdBQVdyUCxJQUtsQnZLLEVBQU80SyxTQUFTbVAsaUJBQWlCLG1CQUFvQkQsR0FHckQ5WixFQUFPK1osaUJBQWlCLE9BQVFELElBK0NwQyxRQUFTRSxJQUFtQjNTLEVBQVMyRyxHQUVuQyxHQUFJaU0sR0FBY0MsR0FBYWxNLEVBQUt1QyxjQUdwQyxPQUFPMEosSUFBZUUsR0FBaUIvUyxFQUFVQyxLQUFhNFMsRUFHaEUsUUFBU0csSUFBbUJwTSxHQUMxQixNQUFPcU0sSUFBYXJNLEdBcUx0QixRQUFTc00sSUFBbUJqVCxFQUFTaVEsR0FDbkMsR0FBSWlELEdBQWUsU0FBU0MsRUFBT3JSLEdBRWpDcVIsRUFBTUMsbUJBQXFCLFdBQ3pCLE1BQU9ELEdBQU1FLGlCQUdmLElBQUlDLEdBQVdyRCxFQUFPbk8sR0FBUXFSLEVBQU1yUixNQUNoQ3lSLEVBQWlCRCxFQUFXQSxFQUFTN1ksT0FBUyxDQUVsRCxJQUFLOFksRUFBTCxDQUVBLEdBQUkvVSxFQUFZMlUsRUFBTUssNkJBQThCLENBQ2xELEdBQUlDLEdBQW1DTixFQUFNTyx3QkFDN0NQLEdBQU1PLHlCQUEyQixXQUMvQlAsRUFBTUssNkJBQThCLEVBRWhDTCxFQUFNUSxpQkFDUlIsRUFBTVEsa0JBR0pGLEdBQ0ZBLEVBQWlDL1gsS0FBS3lYLElBSzVDQSxFQUFNUyw4QkFBZ0MsV0FDcEMsT0FBNkMsSUFBdENULEVBQU1LLDRCQUlmLElBQUlLLEdBQWlCUCxFQUFTUSx1QkFBeUJDLEVBR2xEUixHQUFpQixJQUNwQkQsRUFBV2pILEdBQVlpSCxHQUd6QixLQUFLLEdBQUkzWixHQUFJLEVBQUdBLEVBQUk0WixFQUFnQjVaLElBQzdCd1osRUFBTVMsaUNBQ1RDLEVBQWU3VCxFQUFTbVQsRUFBT0csRUFBUzNaLEtBUTlDLE9BREF1WixHQUFhYyxLQUFPaFUsRUFDYmtULEVBR1QsUUFBU2EsSUFBc0IvVCxFQUFTbVQsRUFBT2MsR0FDN0NBLEVBQVF2WSxLQUFLc0UsRUFBU21ULEdBR3hCLFFBQVNlLElBQTJCQyxFQUFRaEIsRUFBT2MsR0FJakQsR0FBSUcsR0FBVWpCLEVBQU1rQixhQUdmRCxLQUFZQSxJQUFZRCxHQUFXRyxHQUFlNVksS0FBS3lZLEVBQVFDLEtBQ2xFSCxFQUFRdlksS0FBS3lZLEVBQVFoQixHQW1QekIsUUFBU29CLE1BQ1A3SSxLQUFLOEksS0FBTyxXQUNWLE1BQU8vVyxHQUFPeVIsSUFDWnVGLFNBQVUsU0FBU2pWLEVBQU1rVixHQUV2QixNQURJbFYsR0FBS0UsT0FBTUYsRUFBT0EsRUFBSyxJQUNwQnVSLEdBQWV2UixFQUFNa1YsSUFFOUJDLFNBQVUsU0FBU25WLEVBQU1rVixHQUV2QixNQURJbFYsR0FBS0UsT0FBTUYsRUFBT0EsRUFBSyxJQUNwQjZSLEdBQWU3UixFQUFNa1YsSUFFOUJFLFlBQWEsU0FBU3BWLEVBQU1rVixHQUUxQixNQURJbFYsR0FBS0UsT0FBTUYsRUFBT0EsRUFBSyxJQUNwQnlSLEdBQWtCelIsRUFBTWtWLE9Ba0J2QyxRQUFTRyxJQUFRamEsRUFBS2thLEdBQ3BCLEdBQUl2WixHQUFNWCxHQUFPQSxFQUFJMkIsU0FFckIsSUFBSWhCLEVBSUYsTUFIbUIsa0JBQVJBLEtBQ1RBLEVBQU1YLEVBQUkyQixhQUVMaEIsQ0FHVCxJQUFJd1osU0FBaUJuYSxFQU9yQixPQUxFVyxHQURjLGFBQVp3WixHQUF1QyxXQUFaQSxHQUFnQyxPQUFSbmEsRUFDL0NBLEVBQUkyQixVQUFZd1ksRUFBVSxLQUFPRCxHQUFhM1ksS0FFOUM0WSxFQUFVLElBQU1uYSxFQVcxQixRQUFTb2EsTUFDUHRKLEtBQUt1SixTQUNMdkosS0FBS3dKLFdBQ0x4SixLQUFLeUosU0FBV2hjLElBQ2hCdVMsS0FBSzBKLFlBQWMsRUFnSXJCLFFBQVNDLElBQVluUyxHQUNuQixNQUFPb1MsVUFBU2xWLFVBQVU3QixTQUFTN0MsS0FBS3dILEdBRzFDLFFBQVNxUyxJQUFZclMsR0FDbkIsR0FBSXNTLEdBQVNILEdBQVluUyxHQUFJN0ksUUFBUW9iLEdBQWdCLEdBRXJELE9BRFdELEdBQU9sYixNQUFNb2IsS0FBY0YsRUFBT2xiLE1BQU1xYixJQUlyRCxRQUFTQyxJQUFPMVMsR0FHZCxHQUFJSixHQUFPeVMsR0FBWXJTLEVBQ3ZCLE9BQUlKLEdBQ0ssYUFBZUEsRUFBSyxJQUFNLElBQUl6SSxRQUFRLFlBQWEsS0FBTyxJQUU1RCxLQUdULFFBQVN3YixJQUFTM1MsRUFBSWdFLEVBQVVQLEdBQzlCLEdBQUltUCxHQUNBQyxFQUNBQyxDQUVKLElBQWtCLGtCQUFQOVMsSUFDVCxLQUFNNFMsRUFBVTVTLEVBQUc0UyxTQUFVLENBRTNCLEdBREFBLEtBQ0k1UyxFQUFHekksT0FBUSxDQUNiLEdBQUl5TSxFQUlGLEtBSEtuTSxHQUFTNEwsSUFBVUEsSUFDdEJBLEVBQU96RCxFQUFHeUQsTUFBUWlQLEdBQU8xUyxJQUVyQm1ILEdBQWdCLFdBQ3BCLDRFQUE2RTFELEVBRWpGb1AsR0FBVVIsR0FBWXJTLEdBQ3RCOUgsRUFBUTJhLEVBQVEsR0FBR2pXLE1BQU1tVyxJQUFlLFNBQVM5YixHQUMvQ0EsRUFBSUUsUUFBUTZiLEdBQVEsU0FBU3BKLEVBQUtxSixFQUFZeFAsR0FDNUNtUCxFQUFRbFYsS0FBSytGLE9BSW5CekQsRUFBRzRTLFFBQVVBLE9BRU5oYixJQUFRb0ksSUFDakI4UyxFQUFPOVMsRUFBR3pJLE9BQVMsRUFDbkI0TyxHQUFZbkcsRUFBRzhTLEdBQU8sTUFDdEJGLEVBQVU1UyxFQUFHMUksTUFBTSxFQUFHd2IsSUFFdEIzTSxHQUFZbkcsRUFBSSxNQUFNLEVBRXhCLE9BQU80UyxHQTRoQlQsUUFBU25PLElBQWV5TyxFQUFlbFAsR0E2Q3JDLFFBQVNtUCxHQUFjQyxHQUNyQixNQUFPLFVBQVMvYSxFQUFLVyxHQUNuQixJQUFJcEQsRUFBU3lDLEdBR1gsTUFBTythLEdBQVMvYSxFQUFLVyxFQUZyQmQsR0FBUUcsRUFBS1MsRUFBY3NhLEtBT2pDLFFBQVMzTCxHQUFTaEUsRUFBTTRQLEdBS3RCLEdBSkFoTixHQUF3QjVDLEVBQU0sWUFDMUJuTCxFQUFXK2EsSUFBY3piLEdBQVF5YixNQUNuQ0EsRUFBWUMsRUFBaUJDLFlBQVlGLEtBRXRDQSxFQUFVL0IsS0FDYixLQUFNbkssSUFBZ0IsT0FBUSxrREFBcUQxRCxFQUVyRixPQUFRK1AsR0FBYy9QLEVBQU9nUSxHQUFrQkosRUFHakQsUUFBU0ssR0FBbUJqUSxFQUFNeUQsR0FDaEMsTUFBb0IsWUFDbEIsR0FBSXlNLEdBQVNDLEVBQWlCbFAsT0FBT3dDLEVBQVNzQixLQUM5QyxJQUFJbE4sRUFBWXFZLEdBQ2QsS0FBTXhNLElBQWdCLFFBQVMsK0RBQWtFMUQsRUFFbkcsT0FBT2tRLElBSVgsUUFBU3pNLEdBQVF6RCxFQUFNb1EsRUFBV0MsR0FDaEMsTUFBT3JNLEdBQVNoRSxHQUNkNk4sTUFBa0IsSUFBWndDLEVBQW9CSixFQUFtQmpRLEVBQU1vUSxHQUFhQSxJQUlwRSxRQUFTcEwsR0FBUWhGLEVBQU12RixHQUNyQixNQUFPZ0osR0FBUXpELEdBQU8sWUFBYSxTQUFTc1EsR0FDMUMsTUFBT0EsR0FBVVIsWUFBWXJWLE1BSWpDLFFBQVNsRixHQUFNeUssRUFBTXJELEdBQU8sTUFBTzhHLEdBQVF6RCxFQUFNdEksRUFBUWlGLElBQU0sR0FFL0QsUUFBU3NJLEdBQVNqRixFQUFNekssR0FDdEJxTixHQUF3QjVDLEVBQU0sWUFDOUIrUCxFQUFjL1AsR0FBUXpLLEVBQ3RCZ2IsRUFBY3ZRLEdBQVF6SyxFQUd4QixRQUFTMlAsR0FBVXNMLEVBQWFDLEdBQzlCLEdBQUlDLEdBQWViLEVBQWlCNU4sSUFBSXVPLEVBQWNSLEdBQ2xEVyxFQUFXRCxFQUFhN0MsSUFFNUI2QyxHQUFhN0MsS0FBTyxXQUNsQixHQUFJK0MsR0FBZVQsRUFBaUJsUCxPQUFPMFAsRUFBVUQsRUFDckQsT0FBT1AsR0FBaUJsUCxPQUFPd1AsRUFBUyxNQUFPSSxVQUFXRCxLQU85RCxRQUFTRSxHQUFZckIsR0FDbkJqTixHQUFVM0ssRUFBWTRYLElBQWtCdGIsR0FBUXNiLEdBQWdCLGdCQUFpQixlQUNqRixJQUFvQnNCLEdBQWhCcE0sSUE2Q0osT0E1Q0FsUSxHQUFRZ2IsRUFBZSxTQUFTN2MsR0FJOUIsUUFBU29lLEdBQWU3TSxHQUN0QixHQUFJblIsR0FBR2lELENBQ1AsS0FBS2pELEVBQUksRUFBR2lELEVBQUtrTyxFQUFNclEsT0FBUWQsRUFBSWlELEVBQUlqRCxJQUFLLENBQzFDLEdBQUlpZSxHQUFhOU0sRUFBTW5SLEdBQ25CZ1IsRUFBVzZMLEVBQWlCNU4sSUFBSWdQLEVBQVcsR0FFL0NqTixHQUFTaU4sRUFBVyxJQUFJeFUsTUFBTXVILEVBQVVpTixFQUFXLEtBVHZELElBQUlDLEVBQWNqUCxJQUFJclAsR0FBdEIsQ0FDQXNlLEVBQWNsVyxJQUFJcEksR0FBUSxFQVkxQixLQUNNd0IsRUFBU3hCLElBQ1htZSxFQUFXSSxHQUFjdmUsR0FDekJ1ZCxFQUFpQjNQLFFBQVE1TixHQUFVbWUsRUFDbkNwTSxFQUFZQSxFQUFVM0ksT0FBTzhVLEVBQVlDLEVBQVNuTixXQUFXNUgsT0FBTytVLEVBQVNqTSxZQUM3RWtNLEVBQWVELEVBQVNuTSxjQUN4Qm9NLEVBQWVELEVBQVNsTSxnQkFDZmhRLEVBQVdqQyxHQUNsQitSLEVBQVUxSyxLQUFLNFYsRUFBaUI1TyxPQUFPck8sSUFDaEN1QixHQUFRdkIsR0FDZitSLEVBQVUxSyxLQUFLNFYsRUFBaUI1TyxPQUFPck8sSUFFekM4UCxHQUFZOVAsRUFBUSxVQUV0QixNQUFPOEwsR0FZUCxLQVhJdkssSUFBUXZCLEtBQ1ZBLEVBQVNBLEVBQU9BLEVBQU9rQixPQUFTLElBRTlCNEssRUFBRXRMLFNBQVdzTCxFQUFFMFMsUUFBeUMsSUFBaEMxUyxFQUFFMFMsTUFBTTFYLFFBQVFnRixFQUFFdEwsV0FNNUNzTCxFQUFJQSxFQUFFdEwsUUFBVSxLQUFPc0wsRUFBRTBTLE9BRXJCMU4sR0FBZ0IsV0FBWSxnREFDeEI5USxFQUFROEwsRUFBRTBTLE9BQVMxUyxFQUFFdEwsU0FBV3NMLE9BR3ZDaUcsRUFPVCxRQUFTME0sR0FBdUJDLEVBQU83TixHQUVyQyxRQUFTOE4sR0FBV2YsRUFBYWdCLEdBQy9CLEdBQUlGLEVBQU14YyxlQUFlMGIsR0FBYyxDQUNyQyxHQUFJYyxFQUFNZCxLQUFpQmlCLEVBQ3pCLEtBQU0vTixJQUFnQixPQUFRLGlDQUNwQjhNLEVBQWMsT0FBUzFOLEVBQUt6RCxLQUFLLFFBRTdDLE9BQU9pUyxHQUFNZCxHQUViLElBSUUsTUFIQTFOLEdBQUtsQyxRQUFRNFAsR0FDYmMsRUFBTWQsR0FBZWlCLEVBQ3JCSCxFQUFNZCxHQUFlL00sRUFBUStNLEVBQWFnQixHQUNuQ0YsRUFBTWQsR0FDYixNQUFPa0IsR0FJUCxLQUhJSixHQUFNZCxLQUFpQmlCLFNBQ2xCSCxHQUFNZCxHQUVUa0IsRUFDTixRQUNBNU8sRUFBSzZPLFNBTVgsUUFBU0MsR0FBY3JWLEVBQUlzVixFQUFRckIsR0FJakMsSUFBSyxHQUhEclUsTUFDQWdULEVBQVVuTyxHQUFlOFEsV0FBV3ZWLEVBQUlnRSxFQUFVaVEsR0FFN0N4ZCxFQUFJLEVBQUdjLEVBQVNxYixFQUFRcmIsT0FBUWQsRUFBSWMsRUFBUWQsSUFBSyxDQUN4RCxHQUFJNEIsR0FBTXVhLEVBQVFuYyxFQUNsQixJQUFtQixnQkFBUjRCLEdBQ1QsS0FBTThPLElBQWdCLE9BQ2Qsc0VBQXVFOU8sRUFFakZ1SCxHQUFLbEMsS0FBSzRYLEdBQVVBLEVBQU8vYyxlQUFlRixHQUFPaWQsRUFBT2pkLEdBQ1AyYyxFQUFXM2MsRUFBSzRiLElBRW5FLE1BQU9yVSxHQUdULFFBQVM0VixHQUFRQyxHQUdmLEdBQUlDLElBQXdCLGtCQUFURCxHQUNqQixPQUFPLENBRVQsSUFBSTlCLEdBQVM4QixFQUFLRSxXQU1sQixPQUxLNVosR0FBVTRYLEtBR2JBLEVBQVM4QixFQUFLRSxZQUFjLDZCQUE2QnZaLEtBQUsrVixHQUFZc0QsS0FFckU5QixFQUdULFFBQVNqUCxHQUFPMUUsRUFBSUQsRUFBTXVWLEVBQVFyQixHQUNWLGdCQUFYcUIsS0FDVHJCLEVBQWNxQixFQUNkQSxFQUFTLEtBR1gsSUFBSTFWLEdBQU95VixFQUFjclYsRUFBSXNWLEVBQVFyQixFQUtyQyxPQUpJcmMsSUFBUW9JLEtBQ1ZBLEVBQUtBLEVBQUdBLEVBQUd6SSxPQUFTLElBR2pCaWUsRUFBUXhWLElBS1hKLEVBQUt5RSxRQUFRLE1BQ04sSUFBSytOLFNBQVNsVixVQUFVNEMsS0FBS0ksTUFBTUYsRUFBSUosS0FIdkNJLEVBQUdFLE1BQU1ILEVBQU1ILEdBUTFCLFFBQVMyVCxHQUFZcUMsRUFBTU4sRUFBUXJCLEdBR2pDLEdBQUk0QixHQUFRamUsR0FBUWdlLEdBQVFBLEVBQUtBLEVBQUtyZSxPQUFTLEdBQUtxZSxFQUNoRGhXLEVBQU95VixFQUFjTyxFQUFNTixFQUFRckIsRUFHdkMsT0FEQXJVLEdBQUt5RSxRQUFRLE1BQ04sSUFBSytOLFNBQVNsVixVQUFVNEMsS0FBS0ksTUFBTTJWLEVBQU1qVyxJQUlsRCxPQUNFOEUsT0FBUUEsRUFDUjZPLFlBQWFBLEVBQ2I3TixJQUFLc1AsRUFDTHJDLFNBQVVsTyxHQUFlOFEsV0FDekJPLElBQUssU0FBU3JTLEdBQ1osTUFBTytQLEdBQWNqYixlQUFla0wsRUFBT2dRLElBQW1Cc0IsRUFBTXhjLGVBQWVrTCxLQW5RekZPLEdBQXlCLElBQWJBLENBQ1osSUFBSWtSLE1BQ0F6QixFQUFpQixXQUNqQmxOLEtBQ0FvTyxFQUFnQixHQUFJb0IsSUFDcEJ2QyxHQUNFbFAsVUFDSW1ELFNBQVUwTCxFQUFjMUwsR0FDeEJQLFFBQVNpTSxFQUFjak0sR0FDdkJ1QixRQUFTMEssRUFBYzFLLEdBQ3ZCelAsTUFBT21hLEVBQWNuYSxHQUNyQjBQLFNBQVV5SyxFQUFjekssR0FDeEJDLFVBQVdBLElBR2pCMkssRUFBb0JFLEVBQWNPLFVBQzlCZSxFQUF1QnRCLEVBQWUsU0FBU1MsRUFBYWdCLEdBSTFELEtBSEloUSxJQUFRcE4sU0FBU29kLElBQ25CMU8sRUFBSzdJLEtBQUt1WCxHQUVOOU4sR0FBZ0IsT0FBUSx3QkFBeUJaLEVBQUt6RCxLQUFLLFdBRXZFa1IsS0FDQWdDLEVBQ0lsQixFQUF1QmQsRUFBZSxTQUFTQyxFQUFhZ0IsR0FDMUQsR0FBSXhOLEdBQVc2TCxFQUFpQjVOLElBQUl1TyxFQUFjUixFQUFnQndCLEVBQ2xFLE9BQU9yQixHQUFpQmxQLE9BQ3BCK0MsRUFBUzZKLEtBQU03SixNQUFVeEosR0FBV2dXLEtBRTlDTCxFQUFtQm9DLENBRXZCeEMsR0FBYyxZQUFjQyxJQUFvQm5DLEtBQU1uVyxFQUFRNmEsSUFDOURwQyxFQUFpQjNQLFFBQVVxUCxFQUFpQnJQLFFBQVUxRSxJQUN0RCxJQUFJNkksR0FBWW1NLEVBQVlyQixFQUs1QixPQUpBVSxHQUFtQm9DLEVBQXNCdFEsSUFBSSxhQUM3Q2tPLEVBQWlCNVAsU0FBV0EsRUFDNUI5TCxFQUFRa1EsRUFBVyxTQUFTcEksR0FBVUEsR0FBSTRULEVBQWlCbFAsT0FBTzFFLEtBRTNENFQsRUE4T1QsUUFBU3FDLE1BRVAsR0FBSUMsSUFBdUIsQ0FlM0IxTixNQUFLMk4scUJBQXVCLFdBQzFCRCxHQUF1QixHQWdKekIxTixLQUFLOEksTUFBUSxVQUFXLFlBQWEsYUFBYyxTQUFTOEUsRUFBU0MsRUFBV0MsR0FNOUUsUUFBU0MsR0FBZUMsR0FDdEIsR0FBSTdDLEdBQVMsSUFPYixPQU5BM2IsT0FBTWtGLFVBQVV1WixLQUFLamUsS0FBS2dlLEVBQU0sU0FBUzFaLEdBQ3ZDLEdBQTJCLE1BQXZCRCxFQUFVQyxHQUVaLE1BREE2VyxHQUFTN1csR0FDRixJQUdKNlcsRUFHVCxRQUFTK0MsS0FFUCxHQUFJQyxHQUFTQyxFQUFPQyxPQUVwQixJQUFJdmUsRUFBV3FlLEdBQ2JBLEVBQVNBLFFBQ0osSUFBSXRjLEVBQVVzYyxHQUFTLENBQzVCLEdBQUk3RixHQUFPNkYsRUFBTyxHQUNkRyxFQUFRVixFQUFRVyxpQkFBaUJqRyxFQUVuQzZGLEdBRHFCLFVBQW5CRyxFQUFNRSxTQUNDLEVBRUFsRyxFQUFLbUcsd0JBQXdCQyxXQUU5Qi9nQixHQUFTd2dCLEtBQ25CQSxFQUFTLEVBR1gsT0FBT0EsR0FHVCxRQUFTUSxHQUFTckcsR0FDaEIsR0FBSUEsRUFBTSxDQUNSQSxFQUFLc0csZ0JBRUwsSUFBSVQsR0FBU0QsR0FFYixJQUFJQyxFQUFRLENBY1YsR0FBSVUsR0FBVXZHLEVBQUttRyx3QkFBd0JLLEdBQzNDbEIsR0FBUW1CLFNBQVMsRUFBR0YsRUFBVVYsUUFHaENQLEdBQVFlLFNBQVMsRUFBRyxHQUl4QixRQUFTUCxHQUFPWSxHQUVkQSxFQUFPM2YsRUFBUzJmLEdBQVFBLEVBQU9yaEIsRUFBU3FoQixHQUFRQSxFQUFLbmMsV0FBYWdiLEVBQVVtQixNQUM1RSxJQUFJQyxFQUdDRCxJQUdLQyxFQUFNcFgsRUFBU3FYLGVBQWVGLElBQVFMLEVBQVNNLElBRy9DQSxFQUFNbEIsRUFBZWxXLEVBQVNzWCxrQkFBa0JILEtBQVNMLEVBQVNNLEdBRzFELFFBQVRELEdBQWdCTCxFQUFTLE1BVHZCQSxFQUFTLE1BdkV0QixHQUFJOVcsR0FBVytWLEVBQVEvVixRQWlHdkIsT0FaSTZWLElBQ0ZJLEVBQVczYSxPQUFPLFdBQTRCLE1BQU8wYSxHQUFVbUIsUUFDN0QsU0FBK0JJLEVBQVFDLEdBRWpDRCxJQUFXQyxHQUFxQixLQUFYRCxHQUV6QjNJLEdBQXFCLFdBQ25CcUgsRUFBVzVhLFdBQVdrYixPQUt2QkEsSUFRWCxRQUFTa0IsSUFBYWhaLEVBQUVDLEdBQ3RCLE1BQUtELElBQU1DLEVBQ05ELEVBQ0FDLEdBQ0RuSCxHQUFRa0gsS0FBSUEsRUFBSUEsRUFBRWdFLEtBQUssTUFDdkJsTCxHQUFRbUgsS0FBSUEsRUFBSUEsRUFBRStELEtBQUssTUFDcEJoRSxFQUFJLElBQU1DLEdBSEZELEVBREFDLEVBRE0sR0FRdkIsUUFBU2daLElBQW1CamIsR0FDMUIsSUFBSyxHQUFJckcsR0FBSSxFQUFHQSxFQUFJcUcsRUFBUXZGLE9BQVFkLElBQUssQ0FDdkMsR0FBSWdoQixHQUFNM2EsRUFBUXJHLEVBQ2xCLElBQUlnaEIsRUFBSXhWLFdBQWErVixHQUNuQixNQUFPUCxJQUtiLFFBQVNRLElBQWF6RyxHQUNoQjNaLEVBQVMyWixLQUNYQSxFQUFVQSxFQUFRNVUsTUFBTSxLQUsxQixJQUFJbEYsR0FBTTZILElBUVYsT0FQQXJILEdBQVFzWixFQUFTLFNBQVMwRyxHQUdwQkEsRUFBTTNnQixTQUNSRyxFQUFJd2dCLElBQVMsS0FHVnhnQixFQVVULFFBQVN5Z0IsSUFBc0JDLEdBQzdCLE1BQU94aUIsR0FBU3dpQixHQUNWQSxLQWc3QlIsUUFBU0MsSUFBUTVpQixFQUFRNEssRUFBVWlZLEVBQU1DLEdBcUJ2QyxRQUFTQyxHQUEyQnhZLEdBQ2xDLElBQ0VBLEVBQUdFLE1BQU0sS0FBTW5KLEVBQVVKLFVBQVcsSUFDcEMsUUFFQSxHQUFnQyxNQURoQzhoQixFQUVFLEtBQU9DLEVBQTRCbmhCLFFBQ2pDLElBQ0VtaEIsRUFBNEJDLFFBQzVCLE1BQU94VyxHQUNQbVcsRUFBS3ZVLE1BQU01QixLQU9yQixRQUFTeVcsR0FBUUMsR0FDZixHQUFJeGhCLEdBQVF3aEIsRUFBSTFiLFFBQVEsSUFDeEIsUUFBa0IsSUFBWDlGLEVBQWUsR0FBS3doQixFQUFJQyxPQUFPemhCLEdBcUl4QyxRQUFTMGhCLEtBQ1BDLEVBQWtCLEtBQ2xCQyxJQUtGLFFBQVNDLEtBRVBDLEVBQWNDLElBQ2RELEVBQWM3ZCxFQUFZNmQsR0FBZSxLQUFPQSxFQUc1Q25hLEVBQU9tYSxFQUFhRSxLQUN0QkYsRUFBY0UsR0FHaEJBLEVBQWtCRixFQUNsQkcsRUFBbUJILEVBR3JCLFFBQVNGLEtBQ1AsR0FBSU0sR0FBdUJELENBQzNCSixLQUVJTSxJQUFtQnpaLEVBQUs4WSxPQUFTVSxJQUF5QkosSUFJOURLLEVBQWlCelosRUFBSzhZLE1BQ3RCUyxFQUFtQkgsRUFDbkJqaEIsRUFBUXVoQixFQUFvQixTQUFTQyxHQUNuQ0EsRUFBUzNaLEVBQUs4WSxNQUFPTSxNQTVNekIsR0FBSXBaLEdBQU95SSxLQUNQbEQsRUFBVzdQLEVBQU82UCxTQUNsQnFVLEVBQVVsa0IsRUFBT2trQixRQUNqQnRLLEVBQWE1WixFQUFPNFosV0FDcEJ1SyxFQUFlbmtCLEVBQU9ta0IsYUFDdEJDLElBRUo5WixHQUFLK1osUUFBUyxDQUVkLElBQUlyQixHQUEwQixFQUMxQkMsSUFHSjNZLEdBQUtnYSw2QkFBK0J2QixFQUNwQ3pZLEVBQUtpYSw2QkFBK0IsV0FBYXZCLEtBa0NqRDFZLEVBQUtrYSxnQ0FBa0MsU0FBU0MsR0FDZCxJQUE1QnpCLEVBQ0Z5QixJQUVBeEIsRUFBNEJoYixLQUFLd2MsR0FRckMsSUFBSWYsR0FBYUcsRUFDYkUsRUFBaUJsVSxFQUFTNlUsS0FDMUJDLEVBQWMvWixFQUFTNUQsS0FBSyxRQUM1QnVjLEVBQWtCLEtBQ2xCSSxFQUFtQmIsRUFBU29CLFFBQWlCLFdBQzNDLElBQ0UsTUFBT0EsR0FBUVUsTUFDZixNQUFPbFksTUFIMkJuSCxDQVExQ2tlLEtBc0JBblosRUFBSzhZLElBQU0sU0FBU0EsRUFBSzFoQixFQUFTa2pCLEdBYWhDLEdBVEkvZSxFQUFZK2UsS0FDZEEsRUFBUSxNQUlOL1UsSUFBYTdQLEVBQU82UCxXQUFVQSxFQUFXN1AsRUFBTzZQLFVBQ2hEcVUsSUFBWWxrQixFQUFPa2tCLFVBQVNBLEVBQVVsa0IsRUFBT2trQixTQUc3Q2QsRUFBSyxDQUNQLEdBQUl5QixHQUFZaEIsSUFBcUJlLENBS3JDLElBQUliLElBQW1CWCxLQUFTTixFQUFTb0IsU0FBV1csR0FDbEQsTUFBT3ZhLEVBRVQsSUFBSXdhLEdBQVdmLEdBQWtCZ0IsR0FBVWhCLEtBQW9CZ0IsR0FBVTNCLEVBNEJ6RSxPQTNCQVcsR0FBaUJYLEVBQ2pCUyxFQUFtQmUsR0FLZjlCLEVBQVNvQixTQUFhWSxHQUFhRCxHQUloQ0MsSUFDSHZCLEVBQWtCSCxHQUVoQjFoQixFQUNGbU8sRUFBU25PLFFBQVEwaEIsR0FDUDBCLEVBR1ZqVixFQUFTa1MsS0FBT29CLEVBQVFDLEdBRnhCdlQsRUFBUzZVLEtBQU90QixFQUlkdlQsRUFBUzZVLE9BQVN0QixJQUNwQkcsRUFBa0JILEtBZHBCYyxFQUFReGlCLEVBQVUsZUFBaUIsYUFBYWtqQixFQUFPLEdBQUl4QixHQUMzREssS0FnQkVGLElBQ0ZBLEVBQWtCSCxHQUViOVksRUFPUCxNQUFPaVosSUFBbUIxVCxFQUFTNlUsS0FBS2hqQixRQUFRLE9BQU8sTUFjM0Q0SSxFQUFLc2EsTUFBUSxXQUNYLE1BQU9sQixHQUdULElBQUlNLE1BQ0FnQixHQUFnQixFQVFoQnBCLEVBQWtCLElBbUR0QnRaLEdBQUsyYSxZQUFjLFNBQVNSLEdBZ0IxQixNQWRLTyxLQU1DbEMsRUFBU29CLFNBQVM3aEIsR0FBT3JDLEdBQVE2WixHQUFHLFdBQVl5SixHQUVwRGpoQixHQUFPckMsR0FBUTZaLEdBQUcsYUFBY3lKLEdBRWhDMEIsR0FBZ0IsR0FHbEJoQixFQUFtQi9iLEtBQUt3YyxHQUNqQkEsR0FTVG5hLEVBQUs0YSx1QkFBeUIsV0FDNUI3aUIsR0FBT3JDLEdBQVFtbEIsSUFBSSxzQkFBdUI3QixJQVE1Q2haLEVBQUs4YSxpQkFBbUI1QixFQWV4QmxaLEVBQUsrYSxTQUFXLFdBQ2QsR0FBSVgsR0FBT0MsRUFBWTVkLEtBQUssT0FDNUIsT0FBTzJkLEdBQU9BLEVBQUtoakIsUUFBUSx3QkFBd0IsSUFBTSxJQWlCM0Q0SSxFQUFLZ2IsTUFBUSxTQUFTL2EsRUFBSWdiLEdBQ3hCLEdBQUlDLEVBT0osT0FOQXhDLEtBQ0F3QyxFQUFZNUwsRUFBVyxpQkFDZHdLLEdBQWdCb0IsR0FDdkJ6QyxFQUEyQnhZLElBQzFCZ2IsR0FBUyxHQUNabkIsRUFBZ0JvQixJQUFhLEVBQ3RCQSxHQWNUbGIsRUFBS2diLE1BQU1HLE9BQVMsU0FBU0MsR0FDM0IsUUFBSXRCLEVBQWdCc0IsV0FDWHRCLEdBQWdCc0IsR0FDdkJ2QixFQUFhdUIsR0FDYjNDLEVBQTJCeGQsSUFDcEIsSUFRYixRQUFTb2dCLE1BQ1A1UyxLQUFLOEksTUFBUSxVQUFXLE9BQVEsV0FBWSxZQUN4QyxTQUFTOEUsRUFBU2tDLEVBQU1DLEVBQVU4QyxHQUNoQyxNQUFPLElBQUloRCxJQUFRakMsRUFBU2lGLEVBQVcvQyxFQUFNQyxLQXNGckQsUUFBUytDLE1BRVA5UyxLQUFLOEksS0FBTyxXQUdWLFFBQVNpSyxHQUFhQyxFQUFTcEQsR0EwTTdCLFFBQVNxRCxHQUFRQyxHQUNYQSxJQUFVQyxJQUNQQyxFQUVNQSxJQUFhRixJQUN0QkUsRUFBV0YsRUFBTUcsR0FGakJELEVBQVdGLEVBS2JJLEVBQUtKLEVBQU1HLEVBQUdILEVBQU1LLEdBQ3BCRCxFQUFLSixFQUFPQyxHQUNaQSxFQUFXRCxFQUNYQyxFQUFTRSxFQUFJLE1BUWpCLFFBQVNDLEdBQUtFLEVBQVdDLEdBQ25CRCxJQUFjQyxJQUNaRCxJQUFXQSxFQUFVRCxFQUFJRSxHQUN6QkEsSUFBV0EsRUFBVUosRUFBSUcsSUEvTmpDLEdBQUlSLElBQVdVLEdBQ2IsS0FBTTlsQixHQUFPLGlCQUFpQixNQUFPLGtDQUFxQ29sQixFQUc1RSxJQUFJVyxHQUFPLEVBQ1BDLEVBQVE3aEIsS0FBVzZkLEdBQVVpRSxHQUFJYixJQUNqQzFXLEVBQU92RixLQUNQK2MsRUFBWWxFLEdBQVdBLEVBQVFrRSxVQUFhQyxPQUFPQyxVQUNuREMsRUFBVWxkLEtBQ1ZvYyxFQUFXLEtBQ1hDLEVBQVcsSUF5Q2YsT0FBUU0sR0FBT1YsSUFvQmJrQixJQUFLLFNBQVNya0IsRUFBS1csR0FDakIsSUFBSXNDLEVBQVl0QyxHQUFoQixDQUNBLEdBQUlzakIsRUFBV0MsT0FBT0MsVUFBVyxDQUcvQmYsRUFGZWdCLEVBQVFwa0IsS0FBU29rQixFQUFRcGtCLElBQVFBLElBQUtBLEtBWXZELE1BUE1BLEtBQU95TSxJQUFPcVgsSUFDcEJyWCxFQUFLek0sR0FBT1csRUFFUm1qQixFQUFPRyxHQUNUOVQsS0FBS21VLE9BQU9mLEVBQVN2akIsS0FHaEJXLElBY1QwTSxJQUFLLFNBQVNyTixHQUNaLEdBQUlpa0IsRUFBV0MsT0FBT0MsVUFBVyxDQUMvQixHQUFJSSxHQUFXSCxFQUFRcGtCLEVBRXZCLEtBQUt1a0IsRUFBVSxNQUVmbkIsR0FBUW1CLEdBR1YsTUFBTzlYLEdBQUt6TSxJQWNkc2tCLE9BQVEsU0FBU3RrQixHQUNmLEdBQUlpa0IsRUFBV0MsT0FBT0MsVUFBVyxDQUMvQixHQUFJSSxHQUFXSCxFQUFRcGtCLEVBRXZCLEtBQUt1a0IsRUFBVSxNQUVYQSxLQUFhakIsSUFBVUEsRUFBV2lCLEVBQVNiLEdBQzNDYSxJQUFhaEIsSUFBVUEsRUFBV2dCLEVBQVNmLEdBQy9DQyxFQUFLYyxFQUFTZixFQUFFZSxFQUFTYixTQUVsQlUsR0FBUXBrQixHQUdYQSxJQUFPeU0sV0FFTkEsR0FBS3pNLEdBQ1o4akIsTUFZRlUsVUFBVyxXQUNUL1gsRUFBT3ZGLEtBQ1A0YyxFQUFPLEVBQ1BNLEVBQVVsZCxLQUNWb2MsRUFBV0MsRUFBVyxNQWF4QmtCLFFBQVMsV0FDUGhZLEVBQU8sS0FDUHNYLEVBQVEsS0FDUkssRUFBVSxXQUNIUCxHQUFPVixJQW9CaEJqVSxLQUFNLFdBQ0osTUFBT2hOLE1BQVc2aEIsR0FBUUQsS0FBTUEsTUFwTXRDLEdBQUlELEtBeVFKLE9BeEJBWCxHQUFhaFUsS0FBTyxXQUNsQixHQUFJQSxLQUlKLE9BSEFyUCxHQUFRZ2tCLEVBQVEsU0FBU25ILEVBQU95RyxHQUM5QmpVLEVBQUtpVSxHQUFXekcsRUFBTXhOLFNBRWpCQSxHQWNUZ1UsRUFBYTdWLElBQU0sU0FBUzhWLEdBQzFCLE1BQU9VLEdBQU9WLElBSVRELEdBa0RYLFFBQVN3QixNQUNQdlUsS0FBSzhJLE1BQVEsZ0JBQWlCLFNBQVMwTCxHQUNyQyxNQUFPQSxHQUFjLGVBbzhCekIsUUFBU0MsT0FXVCxRQUFTQyxJQUFpQjVZLEVBQVU2WSxHQWNsQyxRQUFTQyxHQUFxQnpZLEVBQU8wWSxFQUFlQyxHQUNsRCxHQUFJQyxHQUFlLHlDQUVmQyxFQUFXamUsSUE2QmYsT0EzQkFySCxHQUFReU0sRUFBTyxTQUFTOFksRUFBWUMsR0FDbEMsR0FBSUQsSUFBY0UsR0FFaEIsWUFEQUgsRUFBU0UsR0FBYUMsRUFBYUYsR0FHckMsSUFBSXJtQixHQUFRcW1CLEVBQVdybUIsTUFBTW1tQixFQUU3QixLQUFLbm1CLEVBQ0gsS0FBTXdtQixJQUFlLE9BQ2pCLG9FQUVBUCxFQUFlSyxFQUFXRCxFQUN6QkgsRUFBZSxpQ0FDaEIsMkJBR05FLEdBQVNFLElBQ1BHLEtBQU16bUIsRUFBTSxHQUFHLEdBQ2YwbUIsV0FBeUIsTUFBYjFtQixFQUFNLEdBQ2xCMm1CLFNBQXVCLE1BQWIzbUIsRUFBTSxHQUNoQjRtQixTQUFVNW1CLEVBQU0sSUFBTXNtQixHQUVwQnRtQixFQUFNLEtBQ1J1bUIsRUFBYUYsR0FBY0QsRUFBU0UsTUFJakNGLEVBR1QsUUFBU1MsR0FBdUJsVixFQUFXc1UsR0FDekMsR0FBSUcsSUFDRlUsYUFBYyxLQUNkQyxpQkFBa0IsS0FnQnBCLElBZEl2b0IsRUFBU21ULEVBQVVwRSxVQUNjLElBQS9Cb0UsRUFBVW9WLGtCQUNaWCxFQUFTVyxpQkFBbUJmLEVBQXFCclUsRUFBVXBFLE1BQ1YwWSxHQUFlLEdBQ2hFRyxFQUFTVSxpQkFFVFYsRUFBU1UsYUFBZWQsRUFBcUJyVSxFQUFVcEUsTUFDVjBZLEdBQWUsSUFHNUR6bkIsRUFBU21ULEVBQVVvVixvQkFDckJYLEVBQVNXLGlCQUNMZixFQUFxQnJVLEVBQVVvVixpQkFBa0JkLEdBQWUsSUFFbEVHLEVBQVNXLG1CQUFxQnBWLEVBQVVELFdBRTFDLEtBQU04VSxJQUFlLFNBQ2YsaUVBQ0FQLEVBRVIsT0FBT0csR0FHVCxRQUFTWSxHQUF5QjNhLEdBQ2hDLEdBQUlxQyxHQUFTckMsRUFBS2pFLE9BQU8sRUFDekIsS0FBS3NHLEdBQVVBLElBQVcvSSxHQUFVK0ksR0FDbEMsS0FBTThYLElBQWUsU0FBVSw0RkFBK0ZuYSxFQUVoSSxJQUFJQSxJQUFTQSxFQUFLeUksT0FDaEIsS0FBTTBSLElBQWUsU0FDZix5R0FDQW5hLEdBSVYsUUFBUzRhLEdBQW9CdFYsR0FDM0IsR0FBSXVWLEdBQVV2VixFQUFVdVYsU0FBWXZWLEVBQVVELFlBQWNDLEVBQVV0RixJQVV0RSxRQVJLN0wsR0FBUTBtQixJQUFZMW9CLEVBQVMwb0IsSUFDaENwbUIsRUFBUW9tQixFQUFTLFNBQVN0bEIsRUFBT1gsR0FDL0IsR0FBSWpCLEdBQVE0QixFQUFNNUIsTUFBTW1uQixFQUNidmxCLEdBQU15SixVQUFVckwsRUFBTSxHQUFHRyxVQUN6QittQixFQUFRam1CLEdBQU9qQixFQUFNLEdBQUtpQixLQUlsQ2ltQixFQUdULFFBQVNFLEdBQXFCQyxFQUFVaGIsR0FDdEMsR0FBSWdiLEtBQWM1bUIsRUFBUzRtQixLQUFhLFNBQVNyaUIsS0FBS3FpQixJQUNwRCxLQUFNYixJQUFlLGNBQ2pCLHdEQUNBYSxFQUNBaGIsRUFHTixPQUFPZ2IsSUFBWSxLQTlHckIsR0FBSUMsTUFDQUMsRUFBUyxZQUNUQyxFQUEyQixvQ0FDM0JDLEVBQXlCLDRCQUN6QkMsRUFBdUJwaUIsRUFBUSw2QkFDL0I2aEIsRUFBd0IsOEJBS3hCUSxFQUE0QiwwQkFDNUJwQixFQUFlcGUsSUFxSG5CaUosTUFBS08sVUFBWSxRQUFTaVcsR0FBa0J2YixFQUFNd2IsR0FxQ2hELE1BcENBaFosSUFBVXhDLEVBQU0sUUFDaEI0QyxHQUF3QjVDLEVBQU0sYUFDMUI1TCxFQUFTNEwsSUFDWDJhLEVBQXlCM2EsR0FDekJ3QyxHQUFVZ1osRUFBa0Isb0JBQ3ZCUCxFQUFjbm1CLGVBQWVrTCxLQUNoQ2liLEVBQWNqYixNQUNkYSxFQUFTNEMsUUFBUXpELEVBQU9rYixHQUFTLFlBQWEsb0JBQzVDLFNBQVM1SyxFQUFXbUwsR0FDbEIsR0FBSUMsS0FvQkosT0FuQkFqbkIsR0FBUXdtQixFQUFjamIsR0FBTyxTQUFTd2IsRUFBa0I1bkIsR0FDdEQsSUFDRSxHQUFJMFIsR0FBWWdMLEVBQVVyUCxPQUFPdWEsRUFDN0IzbUIsR0FBV3lRLEdBQ2JBLEdBQWNuRSxRQUFTekosRUFBUTROLEtBQ3JCQSxFQUFVbkUsU0FBV21FLEVBQVUrUyxPQUN6Qy9TLEVBQVVuRSxRQUFVekosRUFBUTROLEVBQVUrUyxPQUV4Qy9TLEVBQVVxVyxTQUFXclcsRUFBVXFXLFVBQVksRUFDM0NyVyxFQUFVMVIsTUFBUUEsRUFDbEIwUixFQUFVdEYsS0FBT3NGLEVBQVV0RixNQUFRQSxFQUNuQ3NGLEVBQVV1VixRQUFVRCxFQUFvQnRWLEdBQ3hDQSxFQUFVMFYsU0FBV0QsRUFBcUJ6VixFQUFVMFYsU0FBVWhiLEdBQzlEc0YsRUFBVWIsYUFBZStXLEVBQWlCL1csYUFDMUNpWCxFQUFXemhCLEtBQUtxTCxHQUNoQixNQUFPNUcsR0FDUCtjLEVBQWtCL2MsTUFHZmdkLE1BR2JULEVBQWNqYixHQUFNL0YsS0FBS3VoQixJQUV6Qi9tQixFQUFRdUwsRUFBTTNLLEVBQWNrbUIsSUFFdkJ4VyxNQTBGVEEsS0FBS1EsVUFBWSxRQUFTcVcsR0FBa0I1YixFQUFNMlUsR0FRaEQsUUFBU2xSLEdBQVE2TSxHQUNmLFFBQVN1TCxHQUFldGYsR0FDdEIsTUFBSTFILEdBQVcwSCxJQUFPcEksR0FBUW9JLEdBQ1IsU0FBU3VmLEVBQVVDLEdBQ3JDLE1BQU96TCxHQUFVclAsT0FBTzFFLEVBQUl3SSxNQUFPaVgsU0FBVUYsRUFBVUcsT0FBUUYsS0FHMUR4ZixFQUlYLEdBQUlwSixHQUFhd2hCLEVBQVF4aEIsVUFBYXdoQixFQUFRdUgsWUFBbUJ2SCxFQUFReGhCLFNBQWIsR0FDeERncEIsR0FDRjlXLFdBQVlBLEVBQ1orVyxhQUFjQyxHQUF3QjFILEVBQVF0UCxhQUFlc1AsRUFBUXlILGNBQWdCLFFBQ3JGanBCLFNBQVUwb0IsRUFBZTFvQixHQUN6QitvQixZQUFhTCxFQUFlbEgsRUFBUXVILGFBQ3BDSSxXQUFZM0gsRUFBUTJILFdBQ3BCcGIsU0FDQXdaLGlCQUFrQi9GLEVBQVFvRixhQUMxQmlCLFNBQVUsSUFDVkgsUUFBU2xHLEVBQVFrRyxRQVFuQixPQUpBcG1CLEdBQVFrZ0IsRUFBUyxTQUFTaFksRUFBSy9ILEdBQ1AsTUFBbEJBLEVBQUltSCxPQUFPLEtBQVlvZ0IsRUFBSXZuQixHQUFPK0gsS0FHakN3ZixFQXBDVCxJQUFLL25CLEVBQVM0TCxHQUVaLE1BREF2TCxHQUFRdUwsRUFBTTNLLEVBQWNnSCxFQUFLMEksS0FBTTZXLEtBQ2hDN1csSUFHVCxJQUFJTSxHQUFhc1AsRUFBUXRQLFlBQWMsWUFtRHZDLE9BVkE1USxHQUFRa2dCLEVBQVMsU0FBU2hZLEVBQUsvSCxHQUNQLE1BQWxCQSxFQUFJbUgsT0FBTyxLQUNiMEgsRUFBUTdPLEdBQU8rSCxFQUVYOUgsRUFBV3dRLEtBQWFBLEVBQVd6USxHQUFPK0gsTUFJbEQ4RyxFQUFRMEwsU0FBVyxhQUVacEssS0FBS08sVUFBVXRGLEVBQU15RCxJQXdCOUJzQixLQUFLd1gsMkJBQTZCLFNBQVNDLEdBQ3pDLE1BQUlucUIsR0FBVW1xQixJQUNaOUMsRUFBc0I2QywyQkFBMkJDLEdBQzFDelgsTUFFQTJVLEVBQXNCNkMsOEJBeUJqQ3hYLEtBQUswWCw0QkFBOEIsU0FBU0QsR0FDMUMsTUFBSW5xQixHQUFVbXFCLElBQ1o5QyxFQUFzQitDLDRCQUE0QkQsR0FDM0N6WCxNQUVBMlUsRUFBc0IrQyw4QkEwQmpDLElBQUkzYixJQUFtQixDQUN2QmlFLE1BQUtqRSxpQkFBbUIsU0FBUzRiLEdBQy9CLE1BQUlycUIsR0FBVXFxQixJQUNaNWIsRUFBbUI0YixFQUNaM1gsTUFFRmpFLEVBOEJULElBQUk2YixJQUEyQixDQUMvQjVYLE1BQUs0WCx5QkFBMkIsU0FBU0QsR0FDdkMsTUFBSXJxQixHQUFVcXFCLElBQ1pDLEVBQTJCRCxFQUNwQjNYLE1BRUY0WCxFQW9CVCxJQUFJQyxJQUFpQyxDQUNyQzdYLE1BQUs2WCwrQkFBaUMsU0FBU0YsR0FDN0MsTUFBSXJxQixHQUFVcXFCLElBQ1pFLEVBQWlDRixFQUMxQjNYLE1BRUY2WCxFQUdULElBQUlDLEdBQU0sRUFxQlY5WCxNQUFLK1gsYUFBZSxTQUFTdm5CLEdBQzNCLE1BQUlyQyxXQUFVWSxRQUNaK29CLEVBQU10bkIsRUFDQ3dQLE1BRUY4WCxFQUdULElBQUlFLElBQWlDLENBb0JyQ2hZLE1BQUtpWSx5QkFBMkIsU0FBU3puQixHQUN2QyxNQUFJckMsV0FBVVksUUFDWmlwQixFQUFpQ3huQixFQUMxQndQLE1BRUZnWSxFQUlULElBQUlFLElBQWtDLENBb0J0Q2xZLE1BQUttWSwwQkFBNEIsU0FBUzNuQixHQUN4QyxNQUFJckMsV0FBVVksUUFDWm1wQixFQUFrQzFuQixFQUMzQndQLE1BRUZrWSxHQUdUbFksS0FBSzhJLE1BQ0ssWUFBYSxlQUFnQixvQkFBcUIsbUJBQW9CLFNBQ3RFLGNBQWUsYUFBYyxPQUFRLFdBQVksZ0JBQ3pELFNBQVN5QyxFQUFhNk0sRUFBZ0IxQixFQUFxQjJCLEVBQW9CQyxFQUN0RUMsRUFBZXpLLEVBQWMwSyxFQUFRQyxFQUFZQyxHQWdCMUQsUUFBU0MsS0FDUCxJQUNFLE1BQVFaLEdBR04sS0FEQWEsUUFBaUJuakIsR0FDWDJmLEdBQWUsVUFBVyxtREFBb0QwQyxFQUd0RmhLLEdBQVd6UixPQUFPLFdBRWhCLElBQUssR0FERHdjLE1BQ0s1cUIsRUFBSSxFQUFHaUQsRUFBSzBuQixHQUFlN3BCLE9BQVFkLEVBQUlpRCxJQUFNakQsRUFDcEQsSUFDRTJxQixHQUFlM3FCLEtBQ2YsTUFBTzBMLEdBQ1BrZixFQUFPM2pCLEtBQUt5RSxHQUtoQixHQURBaWYsT0FBaUJuakIsR0FDYm9qQixFQUFPOXBCLE9BQ1QsS0FBTThwQixLQUdWLFFBQ0FkLE1BS0osUUFBU2UsR0FBV3hrQixFQUFTeWtCLEdBQzNCLEdBQUlBLEVBQWtCLENBQ3BCLEdBQ0k5cUIsR0FBRytxQixFQUFHbnBCLEVBRE5PLEVBQU9iLE9BQU9hLEtBQUsyb0IsRUFHdkIsS0FBSzlxQixFQUFJLEVBQUcrcUIsRUFBSTVvQixFQUFLckIsT0FBUWQsRUFBSStxQixFQUFHL3FCLElBQ2xDNEIsRUFBTU8sRUFBS25DLEdBQ1grUixLQUFLblEsR0FBT2twQixFQUFpQmxwQixPQUcvQm1RLE1BQUtpWixRQUdQalosTUFBS2taLFVBQVk1a0IsRUFrT25CLFFBQVM2a0IsR0FBZTdrQixFQUFTa2hCLEVBQVVobEIsR0FJekM0b0IsR0FBa0J6VyxVQUFZLFNBQVc2UyxFQUFXLEdBQ3BELElBQUk2RCxHQUFhRCxHQUFrQnJXLFdBQVdzVyxXQUMxQ0MsRUFBWUQsRUFBVyxFQUUzQkEsR0FBV0UsZ0JBQWdCRCxFQUFVcmUsTUFDckNxZSxFQUFVOW9CLE1BQVFBLEVBQ2xCOEQsRUFBUStrQixXQUFXRyxhQUFhRixHQUdsQyxRQUFTRyxHQUFheEMsRUFBVXlDLEdBQzlCLElBQ0V6QyxFQUFTaE8sU0FBU3lRLEdBQ2xCLE1BQU8vZixLQXVEWCxRQUFTeUMsR0FBUXVkLEVBQWVDLEVBQWNDLEVBQWFDLEVBQ3ZDQyxHQUNaSixZQUF5QnJxQixNQUc3QnFxQixFQUFnQnJxQixHQUFPcXFCLEdBRXpCLElBQUlLLEdBQ0lDLEVBQWFOLEVBQWVDLEVBQWNELEVBQzdCRSxFQUFhQyxFQUFpQkMsRUFDbkQzZCxHQUFROGQsZ0JBQWdCUCxFQUN4QixJQUFJUSxHQUFZLElBQ2hCLE9BQU8sVUFBc0JoZSxFQUFPaWUsRUFBZ0J4SyxHQUNsRCxJQUFLK0osRUFDSCxLQUFNdkUsSUFBZSxZQUFhLHdDQUVwQzNYLElBQVV0QixFQUFPLFNBRWI0ZCxHQUEwQkEsRUFBdUJNLGdCQUtuRGxlLEVBQVFBLEVBQU1tZSxRQUFRQyxRQUd4QjNLLEVBQVVBLEtBQ1YsSUFBSTRLLEdBQTBCNUssRUFBUTRLLHdCQUNwQ0MsRUFBd0I3SyxFQUFRNkssc0JBQ2hDQyxFQUFzQjlLLEVBQVE4SyxtQkFNNUJGLElBQTJCQSxFQUF3Qkcsb0JBQ3JESCxFQUEwQkEsRUFBd0JHLG1CQUcvQ1IsSUFDSEEsRUFBWVMsRUFBZ0NGLEdBRTlDLElBQUlHLEVBa0JKLElBWEVBLEVBTmdCLFNBQWRWLEVBTVU3cUIsR0FDVndyQixHQUFhWCxFQUFXN3FCLEdBQU8sU0FBU2lLLE9BQU9vZ0IsR0FBZW5nQixTQUV2RDRnQixFQUdHVyxHQUFnQmpwQixNQUFNOUIsS0FBSzJwQixHQUUzQkEsRUFHVmMsRUFDRixJQUFLLEdBQUlPLEtBQWtCUCxHQUN6QkksRUFBVXZlLEtBQUssSUFBTTBlLEVBQWlCLGFBQWNQLEVBQXNCTyxHQUFnQkMsU0FZOUYsT0FSQTdlLEdBQVE4ZSxlQUFlTCxFQUFXMWUsR0FFOUJpZSxHQUFnQkEsRUFBZVMsRUFBVzFlLEdBQzFDNmQsR0FBaUJBLEVBQWdCN2QsRUFBTzBlLEVBQVdBLEVBQVdMLEdBRTdESixJQUNIVCxFQUFnQkssRUFBa0IsTUFFN0JhLEdBSVgsUUFBU0QsR0FBZ0NPLEdBRXZDLEdBQUlybkIsR0FBT3FuQixHQUFpQkEsRUFBYyxFQUMxQyxPQUFLcm5CLElBR3dCLGtCQUFwQk8sRUFBVVAsSUFBNkJqQixHQUFTN0MsS0FBSzhELEdBQU1sRixNQUFNLE9BQVMsTUFGMUUsT0FxQlgsUUFBU3FyQixHQUFhbUIsRUFBVXhCLEVBQWN5QixFQUFjeEIsRUFBYUMsRUFDakRDLEdBcUR0QixRQUFTQyxHQUFnQjdkLEVBQU9pZixFQUFVQyxFQUFjYixHQUN0RCxHQUFJYyxHQUFZQyxFQUFhem5CLEVBQU0wbkIsRUFBWXZ0QixFQUFHaUQsRUFBSXVxQixFQUFLQyxFQUN2REMsQ0FHSixJQUFJQyxFQUFpQixDQUduQixHQUFJQyxHQUFpQlQsRUFBU3JzQixNQUk5QixLQUhBNHNCLEVBQWlCLEdBQUluc0IsT0FBTXFzQixHQUd0QjV0QixFQUFJLEVBQUdBLEVBQUk2dEIsRUFBUS9zQixPQUFRZCxHQUFLLEVBQ25Dd3RCLEVBQU1LLEVBQVE3dEIsR0FDZDB0QixFQUFlRixHQUFPTCxFQUFTSyxPQUdqQ0UsR0FBaUJQLENBR25CLEtBQUtudEIsRUFBSSxFQUFHaUQsRUFBSzRxQixFQUFRL3NCLE9BQVFkLEVBQUlpRCxHQUNuQzRDLEVBQU82bkIsRUFBZUcsRUFBUTd0QixNQUM5QnF0QixFQUFhUSxFQUFRN3RCLEtBQ3JCc3RCLEVBQWNPLEVBQVE3dEIsS0FFbEJxdEIsR0FDRUEsRUFBV25mLE9BQ2JxZixFQUFhcmYsRUFBTW9lLE9BQ25CbmUsRUFBUThlLGVBQWU1ckIsR0FBT3dFLEdBQU8wbkIsSUFFckNBLEVBQWFyZixFQUlidWYsRUFERUosRUFBV1Msd0JBQ1lDLEVBQ3JCN2YsRUFBT21mLEVBQVcvRCxXQUFZaUQsSUFFeEJjLEVBQVdXLHVCQUF5QnpCLEVBQ3JCQSxHQUVmQSxHQUEyQlosRUFDWm9DLEVBQXdCN2YsRUFBT3lkLEdBRy9CLEtBRzNCMEIsRUFBV0MsRUFBYUMsRUFBWTFuQixFQUFNdW5CLEVBQWNLLElBRS9DSCxHQUNUQSxFQUFZcGYsRUFBT3JJLEVBQUtnUCxlQUFZck4sR0FBVytrQixHQS9GckQsSUFBSyxHQUhEMEIsR0FBT3ZGLEVBQVkyRSxFQUFZeFksRUFBWXlZLEVBQWFZLEVBQWFQLEVBSnJFRSxLQUdBTSxFQUFjaHRCLEdBQVFnc0IsSUFBY0EsWUFBb0I5ckIsSUFJbkRyQixFQUFJLEVBQUdBLEVBQUltdEIsRUFBU3JzQixPQUFRZCxJQUNuQ2l1QixFQUFRLEdBQUlwRCxHQUlDLEtBQVQ1TCxJQUNGbVAsRUFBMEJqQixFQUFVbnRCLEVBQUdtdUIsR0FLekN6RixFQUFhMkYsRUFBa0JsQixFQUFTbnRCLE1BQVFpdUIsRUFBYSxJQUFOanVCLEVBQVU0ckIsTUFBY3BrQixHQUMvQ3FrQixHQUVoQ3dCLEVBQWMzRSxFQUFpQixPQUN6QjRGLEdBQXNCNUYsRUFBWXlFLEVBQVNudEIsR0FBSWl1QixFQUFPdEMsRUFBY3lCLEVBQzVDLFdBQWN0QixHQUN0QyxLQUVGdUIsR0FBY0EsRUFBV25mLE9BQzNCQyxFQUFROGQsZ0JBQWdCZ0MsRUFBTWhELFdBR2hDcUMsRUFBZUQsR0FBY0EsRUFBV2tCLFlBQ3hCMVosRUFBYXNZLEVBQVNudEIsR0FBRzZVLGNBQzFCQSxFQUFXL1QsT0FDcEIsS0FDQWtyQixFQUFhblgsRUFDVndZLEdBQ0VBLEVBQVdTLDBCQUE0QlQsRUFBV1csd0JBQzdDWCxFQUFXL0QsV0FBY3FDLElBRXJDMEIsR0FBY0MsS0FDaEJPLEVBQVE1bUIsS0FBS2pILEVBQUdxdEIsRUFBWUMsR0FDNUJZLEdBQWMsRUFDZFAsRUFBa0JBLEdBQW1CTixHQUl2Q3ZCLEVBQXlCLElBSTNCLE9BQU9vQyxHQUFjbkMsRUFBa0IsS0EwRHpDLFFBQVNxQyxHQUEwQmpCLEVBQVVLLEVBQUtXLEdBQ2hELEdBRUlLLEdBRkEzb0IsRUFBT3NuQixFQUFTSyxHQUNoQnBwQixFQUFTeUIsRUFBS3dQLFVBR2xCLElBQUl4UCxFQUFLMkYsV0FBYUMsR0FJdEIsT0FBYSxDQUVYLEtBREEraUIsRUFBVXBxQixFQUFTeUIsRUFBS3lLLFlBQWM2YyxFQUFTSyxFQUFNLEtBQ3JDZ0IsRUFBUWhqQixXQUFhQyxHQUNuQyxLQUdGNUYsR0FBSzRvQixVQUFZNW9CLEVBQUs0b0IsVUFBWUQsRUFBUUMsVUFFdENELEVBQVFuWixZQUNWbVosRUFBUW5aLFdBQVdnRCxZQUFZbVcsR0FFN0JMLEdBQWVLLElBQVlyQixFQUFTSyxFQUFNLElBQzVDTCxFQUFTdm1CLE9BQU80bUIsRUFBTSxFQUFHLElBSy9CLFFBQVNPLEdBQXdCN2YsRUFBT3lkLEVBQWMrQyxHQUNwRCxRQUFTQyxHQUFrQkMsRUFBa0JDLEVBQVNDLEVBQWFyQyxFQUFxQnNDLEdBT3RGLE1BTEtILEtBQ0hBLEVBQW1CMWdCLEVBQU1vZSxNQUFLLEVBQU95QyxHQUNyQ0gsRUFBaUJJLGVBQWdCLEdBRzVCckQsRUFBYWlELEVBQWtCQyxHQUNwQ3RDLHdCQUF5Qm1DLEVBQ3pCbEMsc0JBQXVCc0MsRUFDdkJyQyxvQkFBcUJBLElBTXpCLEdBQUl3QyxHQUFhTixFQUFrQk8sUUFBVXBtQixJQUM3QyxLQUFLLEdBQUlxbUIsS0FBWXhELEdBQWF1RCxRQUM1QnZELEVBQWF1RCxRQUFRQyxHQUN2QkYsRUFBV0UsR0FBWXBCLEVBQXdCN2YsRUFBT3lkLEVBQWF1RCxRQUFRQyxHQUFXVCxHQUV0Rk8sRUFBV0UsR0FBWSxJQUkzQixPQUFPUixHQWFULFFBQVNOLEdBQWtCeG9CLEVBQU02aUIsRUFBWXVGLEVBQU9yQyxFQUFhQyxHQUMvRCxHQUVJbHJCLEdBQ0ErQyxFQUNBK25CLEVBSkFqZ0IsRUFBVzNGLEVBQUsyRixTQUNoQjRqQixFQUFXbkIsRUFBTWpELEtBS3JCLFFBQVF4ZixHQUNOLElBQUtpSSxJQUVIL1AsRUFBVzBDLEVBQVVQLEdBR3JCd3BCLEdBQWEzRyxFQUNUNEcsR0FBbUI1ckIsR0FBVyxJQUFLa29CLEVBQWFDLEVBR3BELEtBQUssR0FBSTlsQixHQUFNaUgsRUFBTXVpQixFQUFPQyxFQUFZanRCLEVBQU9rdEIsRUFBVUMsRUFBUzdwQixFQUFLdWxCLFdBQzlEbG9CLEVBQUksRUFBR0MsRUFBS3VzQixHQUFVQSxFQUFPNXVCLE9BQVFvQyxFQUFJQyxFQUFJRCxJQUFLLENBQ3pELEdBQUl5c0IsSUFBZ0IsRUFDaEJDLEdBQWMsQ0FFbEI3cEIsR0FBTzJwQixFQUFPeHNCLEdBQ2Q4SixFQUFPakgsRUFBS2lILEtBQ1p6SyxFQUFRd0QsRUFBS3hELE1BR2JpdEIsRUFBYUYsR0FBbUJ0aUIsR0FDaEN5aUIsRUFBV0ksR0FBZ0JscUIsS0FBSzZwQixHQUM1QkMsSUFDRnppQixFQUFPQSxFQUFLdE0sUUFBUW92QixHQUFlLElBQ2hDek4sT0FBTyxHQUFHM2hCLFFBQVEsUUFBUyxTQUFTQyxFQUFPME8sR0FDMUMsTUFBT0EsR0FBTytELGdCQUlwQixJQUFJMmMsR0FBb0JQLEVBQVc3dUIsTUFBTXF2QixHQUNyQ0QsSUFBcUJFLEdBQXdCRixFQUFrQixNQUNqRUosRUFBZ0IzaUIsRUFDaEI0aUIsRUFBYzVpQixFQUFLcVYsT0FBTyxFQUFHclYsRUFBS2xNLE9BQVMsR0FBSyxNQUNoRGtNLEVBQU9BLEVBQUtxVixPQUFPLEVBQUdyVixFQUFLbE0sT0FBUyxJQUd0Q3l1QixFQUFRRCxHQUFtQnRpQixFQUFLdUMsZUFDaEM2ZixFQUFTRyxHQUFTdmlCLEdBQ2R5aUIsR0FBYXhCLEVBQU1uc0IsZUFBZXl0QixLQUNsQ3RCLEVBQU1zQixHQUFTaHRCLEVBQ1h5VyxHQUFtQm5ULEVBQU0wcEIsS0FDM0J0QixFQUFNc0IsSUFBUyxJQUdyQlcsR0FBNEJycUIsRUFBTTZpQixFQUFZbm1CLEVBQU9ndEIsRUFBT0UsR0FDNURKLEdBQWEzRyxFQUFZNkcsRUFBTyxJQUFLM0QsRUFBYUMsRUFBaUI4RCxFQUNyREMsR0FVaEIsR0FQaUIsVUFBYmxzQixHQUFzRCxXQUE5Qm1DLEVBQUs4RyxhQUFhLFNBRzVDOUcsRUFBSzJSLGFBQWEsZUFBZ0IsUUFJL0IwUyxHQUEyQixLQU1oQyxJQUxBdUIsRUFBWTVsQixFQUFLNGxCLFVBQ2J0c0IsRUFBU3NzQixLQUVUQSxFQUFZQSxFQUFVMEUsU0FFdEIvdUIsRUFBU3FxQixJQUE0QixLQUFkQSxFQUN6QixLQUFROXFCLEVBQVF5bkIsRUFBdUI3VCxLQUFLa1gsSUFDMUM4RCxFQUFRRCxHQUFtQjN1QixFQUFNLElBQzdCMHVCLEdBQWEzRyxFQUFZNkcsRUFBTyxJQUFLM0QsRUFBYUMsS0FDcERvQyxFQUFNc0IsR0FBUzlaLEdBQUs5VSxFQUFNLEtBRTVCOHFCLEVBQVlBLEVBQVVwSixPQUFPMWhCLEVBQU1DLE1BQVFELEVBQU0sR0FBR0csT0FHeEQsTUFDRixLQUFLMkssSUFDSDJrQixHQUE0QjFILEVBQVk3aUIsRUFBSzRvQixVQUM3QyxNQUNGLEtBQUs0QixJQUNILElBQUtyRyxHQUEwQixLQUMvQnNHLElBQXlCenFCLEVBQU02aUIsRUFBWXVGLEVBQU9yQyxFQUFhQyxHQUtuRSxNQURBbkQsR0FBV3RtQixLQUFLbXVCLElBQ1Q3SCxFQUdULFFBQVM0SCxJQUF5QnpxQixFQUFNNmlCLEVBQVl1RixFQUFPckMsRUFBYUMsR0FHdEUsSUFDRSxHQUFJbHJCLEdBQVF3bkIsRUFBeUI1VCxLQUFLMU8sRUFBSzRvQixVQUMvQyxJQUFJOXRCLEVBQU8sQ0FDVCxHQUFJNHVCLEdBQVFELEdBQW1CM3VCLEVBQU0sR0FDakMwdUIsSUFBYTNHLEVBQVk2RyxFQUFPLElBQUszRCxFQUFhQyxLQUNwRG9DLEVBQU1zQixHQUFTOVosR0FBSzlVLEVBQU0sTUFHOUIsTUFBTytLLEtBZVgsUUFBUzhrQixJQUFVM3FCLEVBQU00cUIsRUFBV0MsR0FDbEMsR0FBSXZnQixNQUNBd2dCLEVBQVEsQ0FDWixJQUFJRixHQUFhNXFCLEVBQUtvSCxjQUFnQnBILEVBQUtvSCxhQUFhd2pCLEdBQ3RELEVBQUcsQ0FDRCxJQUFLNXFCLEVBQ0gsS0FBTXNoQixJQUFlLFVBQ1gsbUVBQ0FzSixFQUFXQztnR0FFbkI3cUIsR0FBSzJGLFdBQWFpSSxLQUNoQjVOLEVBQUtvSCxhQUFhd2pCLElBQVlFLElBQzlCOXFCLEVBQUtvSCxhQUFheWpCLElBQVVDLEtBRWxDeGdCLEVBQU1sSixLQUFLcEIsR0FDWEEsRUFBT0EsRUFBS3lLLGtCQUNMcWdCLEVBQVEsT0FFakJ4Z0IsR0FBTWxKLEtBQUtwQixFQUdiLE9BQU94RSxJQUFPOE8sR0FXaEIsUUFBU3lnQixJQUEyQkMsRUFBUUosRUFBV0MsR0FDckQsTUFBTyxVQUE2QnhpQixFQUFPN0gsRUFBUzRuQixFQUFPYSxFQUFhbkQsR0FFdEUsTUFEQXRsQixHQUFVbXFCLEdBQVVucUIsRUFBUSxHQUFJb3FCLEVBQVdDLEdBQ3BDRyxFQUFPM2lCLEVBQU83SCxFQUFTNG5CLEVBQU9hLEVBQWFuRCxJQWV0RCxRQUFTbUYsSUFBcUJDLEVBQU9yRixFQUFlQyxFQUFjQyxFQUFhQyxFQUFpQkMsR0FDOUYsR0FBSWtGLEVBRUosT0FBSUQsR0FDSzVpQixFQUFRdWQsRUFBZUMsRUFBY0MsRUFBYUMsRUFBaUJDLEdBRXhELFdBUWxCLE1BUEtrRixLQUNIQSxFQUFXN2lCLEVBQVF1ZCxFQUFlQyxFQUFjQyxFQUFhQyxFQUFpQkMsR0FJOUVKLEVBQWdCQyxFQUFlRyxFQUF5QixNQUVuRGtGLEVBQVN2bkIsTUFBTXNJLEtBQU03UixZQTJCaEMsUUFBU291QixJQUFzQjVGLEVBQVl1SSxFQUFhQyxFQUFldkYsRUFDeEN3RixFQUFjQyxFQUEwQkMsRUFBWUMsRUFDcER4RixHQXFUN0IsUUFBU3lGLEdBQVdDLEVBQUtDLEVBQU1oQixFQUFXQyxHQUNwQ2MsSUFDRWYsSUFBV2UsRUFBTVosR0FBMkJZLEVBQUtmLEVBQVdDLElBQ2hFYyxFQUFJM0osUUFBVXZWLEVBQVV1VixRQUN4QjJKLEVBQUk1SyxjQUFnQkEsR0FDaEI4SyxJQUE2QnBmLEdBQWFBLEVBQVVxZixrQkFDdERILEVBQU1JLEdBQW1CSixHQUFNL0osY0FBYyxLQUUvQzRKLEVBQVdwcUIsS0FBS3VxQixJQUVkQyxJQUNFaEIsSUFBV2dCLEVBQU9iLEdBQTJCYSxFQUFNaEIsRUFBV0MsSUFDbEVlLEVBQUs1SixRQUFVdlYsRUFBVXVWLFFBQ3pCNEosRUFBSzdLLGNBQWdCQSxHQUNqQjhLLElBQTZCcGYsR0FBYUEsRUFBVXFmLGtCQUN0REYsRUFBT0csR0FBbUJILEdBQU9oSyxjQUFjLEtBRWpENkosRUFBWXJxQixLQUFLd3FCLElBSXJCLFFBQVNwRSxHQUFXQyxFQUFhcGYsRUFBTzJqQixFQUFVekUsRUFBY3VCLEdBb0s5RCxRQUFTbUQsR0FBMkI1akIsRUFBTzZqQixFQUFldEYsRUFBcUIwQyxHQUM3RSxHQUFJM0MsRUFlSixJQWJLeG5CLEVBQVFrSixLQUNYaWhCLEVBQVcxQyxFQUNYQSxFQUFzQnNGLEVBQ3RCQSxFQUFnQjdqQixFQUNoQkEsTUFBUTFHLElBR053cUIsSUFDRnhGLEVBQXdCeUYsR0FFckJ4RixJQUNIQSxFQUFzQnVGLEVBQWdDaEosRUFBUzVrQixTQUFXNGtCLElBRXhFbUcsRUFlRixNQUFPUixHQUFrQnpnQixFQUFPNmpCLEVBQWV2RixFQUF1QkMsRUFBcUJ5RixFQVYzRixJQUFJQyxHQUFtQnhELEVBQWtCTyxRQUFRQyxFQUNqRCxJQUFJZ0QsRUFDRixNQUFPQSxHQUFpQmprQixFQUFPNmpCLEVBQWV2RixFQUF1QkMsRUFBcUJ5RixFQUNyRixJQUFJcnRCLEVBQVlzdEIsR0FDckIsS0FBTWhMLElBQWUsU0FDcEIsc0ZBRUFnSSxFQUFVaGtCLEdBQVk2ZCxJQS9MN0IsR0FBSWhwQixHQUFHaUQsRUFBSTR0QixFQUFRcEosRUFBYzJLLEVBQWlCSCxFQUFvQnRHLEVBQWMzQyxFQUNoRmlGLEVBQU9vRSxDQUVQcEIsS0FBZ0JZLEdBQ2xCNUQsRUFBUWlELEVBQ1JsSSxFQUFXa0ksRUFBY2pHLFlBRXpCakMsRUFBVzNuQixHQUFPd3dCLEdBQ2xCNUQsRUFBUSxHQUFJcEQsR0FBVzdCLEVBQVVrSSxJQUduQ2tCLEVBQWtCbGtCLEVBQ2R3akIsRUFDRmpLLEVBQWV2WixFQUFNb2UsTUFBSyxHQUNqQmdHLElBQ1RGLEVBQWtCbGtCLEVBQU1tZSxTQUd0QnNDLElBR0ZoRCxFQUFlbUcsRUFDZm5HLEVBQWFlLGtCQUFvQmlDLEVBRWpDaEQsRUFBYTRHLGFBQWUsU0FBU3BELEdBQ25DLFFBQVNSLEVBQWtCTyxRQUFRQyxLQUluQ3FELElBQ0ZQLEVBQXFCUSxHQUFpQnpKLEVBQVVpRixFQUFPdEMsRUFBYzZHLEVBQXNCL0ssRUFBY3ZaLEVBQU93akIsSUFHOUdBLElBRUZ2akIsRUFBUThlLGVBQWVqRSxFQUFVdkIsR0FBYyxJQUFRaUwsSUFBc0JBLElBQXNCaEIsR0FDL0ZnQixJQUFzQmhCLEVBQXlCaUIsdUJBQ25EeGtCLEVBQVE4ZCxnQkFBZ0JqRCxHQUFVLEdBQ2xDdkIsRUFBYW1MLGtCQUNUbEIsRUFBeUJrQixrQkFDN0JQLEVBQW1CUSxHQUE0QjNrQixFQUFPK2YsRUFBT3hHLEVBQy9CQSxFQUFhbUwsa0JBQ2JsQixHQUMxQlcsRUFBaUJTLGVBQ25CckwsRUFBYXNMLElBQUksV0FBWVYsRUFBaUJTLGVBS2xELEtBQUssR0FBSTlsQixLQUFRaWxCLEdBQW9CLENBQ25DLEdBQUllLEdBQXNCUixFQUFxQnhsQixHQUMzQ3FGLEVBQWE0ZixFQUFtQmpsQixHQUNoQytaLEVBQVdpTSxFQUFvQkMsV0FBV3ZMLGdCQUU5QyxJQUFJaUMsRUFBMEIsQ0FFMUJ0WCxFQUFXNmdCLFlBRFRuTSxFQUVBOEwsR0FBNEJULEVBQWlCbkUsRUFBTzViLEVBQVcyYSxTQUFVakcsRUFBVWlNLEtBS3ZGLElBQUlHLEdBQW1COWdCLEdBQ25COGdCLEtBQXFCOWdCLEVBQVcyYSxXQUdsQzNhLEVBQVcyYSxTQUFXbUcsRUFDdEJuSyxFQUFTM2EsS0FBSyxJQUFNMmtCLEVBQW9CaG1CLEtBQU8sYUFBY21tQixHQUN6RDlnQixFQUFXNmdCLFlBQVlKLGVBQ3pCemdCLEVBQVc2Z0IsWUFBWUosZ0JBRXpCemdCLEVBQVc2Z0IsWUFDVEwsR0FBNEJULEVBQWlCbkUsRUFBTzViLEVBQVcyYSxTQUFVakcsRUFBVWlNLFFBR3ZGM2dCLEdBQVcyYSxTQUFXM2EsSUFDdEIyVyxFQUFTM2EsS0FBSyxJQUFNMmtCLEVBQW9CaG1CLEtBQU8sYUFBY3FGLEVBQVcyYSxVQUN4RTNhLEVBQVc2Z0IsWUFDVEwsR0FBNEJULEVBQWlCbkUsRUFBTzViLEVBQVcyYSxTQUFVakcsRUFBVWlNLEdBeUN6RixJQXBDQXZ4QixFQUFRK3dCLEVBQXNCLFNBQVNRLEVBQXFCaG1CLEdBQzFELEdBQUk2YSxHQUFVbUwsRUFBb0JuTCxPQUM5Qm1MLEdBQW9CdEwsbUJBQXFCdm1CLEdBQVEwbUIsSUFBWTFvQixFQUFTMG9CLElBQ3hFL2pCLEVBQU9tdUIsRUFBbUJqbEIsR0FBTWdnQixTQUFVb0csR0FBZXBtQixFQUFNNmEsRUFBU21CLEVBQVVpSixNQUt0Rnh3QixFQUFRd3dCLEVBQW9CLFNBQVM1ZixHQUNuQyxHQUFJZ2hCLEdBQXFCaGhCLEVBQVcyYSxRQUNwQyxJQUFJbnJCLEVBQVd3eEIsRUFBbUJDLFlBQ2hDLElBQ0VELEVBQW1CQyxXQUFXamhCLEVBQVc2Z0IsWUFBWUssZ0JBQ3JELE1BQU83bkIsR0FDUCtjLEVBQWtCL2MsR0FHdEIsR0FBSTdKLEVBQVd3eEIsRUFBbUJHLFNBQ2hDLElBQ0VILEVBQW1CRyxVQUNuQixNQUFPOW5CLEdBQ1ArYyxFQUFrQi9jLEdBR2xCN0osRUFBV3d4QixFQUFtQkksWUFDaENyQixFQUFnQmx0QixPQUFPLFdBQWFtdUIsRUFBbUJJLGFBQ3ZESixFQUFtQkksWUFFakI1eEIsRUFBV3d4QixFQUFtQkssYUFDaEN0QixFQUFnQlcsSUFBSSxXQUFZLFdBQzlCTSxFQUFtQkssaUJBTXBCMXpCLEVBQUksRUFBR2lELEVBQUtvdUIsRUFBV3Z3QixPQUFRZCxFQUFJaUQsRUFBSWpELElBQzFDNndCLEVBQVNRLEVBQVdyeEIsR0FDcEIyekIsR0FBYTlDLEVBQ1RBLEVBQU9wSixhQUFlQSxFQUFldlosRUFDckM4YSxFQUNBaUYsRUFDQTRDLEVBQU9oSixTQUFXdUwsR0FBZXZDLEVBQU9qSyxjQUFlaUssRUFBT2hKLFFBQVNtQixFQUFVaUosR0FDakZ0RyxFQU9OLElBQUl1RyxHQUFlaGtCLENBU25CLEtBUkl3akIsSUFBNkJBLEVBQXlCdnhCLFVBQXFELE9BQXpDdXhCLEVBQXlCeEksZUFDN0ZnSixFQUFlekssR0FFYjZGLEdBQ0ZBLEVBQVk0RSxFQUFjTCxFQUFTaGQsZUFBWXJOLEdBQVdtbkIsR0FJdkQzdUIsRUFBSXN4QixFQUFZeHdCLE9BQVMsRUFBR2QsR0FBSyxFQUFHQSxJQUN2QzZ3QixFQUFTUyxFQUFZdHhCLEdBQ3JCMnpCLEdBQWE5QyxFQUNUQSxFQUFPcEosYUFBZUEsRUFBZXZaLEVBQ3JDOGEsRUFDQWlGLEVBQ0E0QyxFQUFPaEosU0FBV3VMLEdBQWV2QyxFQUFPakssY0FBZWlLLEVBQU9oSixRQUFTbUIsRUFBVWlKLEdBQ2pGdEcsRUFLTmxxQixHQUFRd3dCLEVBQW9CLFNBQVM1ZixHQUNuQyxHQUFJZ2hCLEdBQXFCaGhCLEVBQVcyYSxRQUNoQ25yQixHQUFXd3hCLEVBQW1CTyxZQUNoQ1AsRUFBbUJPLGNBdmV6QjlILEVBQXlCQSxLQXVCekIsS0FBSyxHQVhEeFosR0FDQXNVLEVBQ0FpTixFQUdBaEQsRUFHQWlELEVBbEJBQyxHQUFvQmpPLE9BQU9DLFVBQzNCdU0sRUFBb0J4RyxFQUF1QndHLGtCQUMzQ0UsRUFBdUIxRyxFQUF1QjBHLHFCQUM5Q2QsRUFBMkI1RixFQUF1QjRGLHlCQUNsRGdCLEVBQW9CNUcsRUFBdUI0RyxrQkFDM0NzQixFQUE0QmxJLEVBQXVCa0ksMEJBQ25EQyxHQUF5QixFQUN6QkMsR0FBYyxFQUNkbEMsRUFBZ0NsRyxFQUF1QmtHLDhCQUN2RG1DLEVBQWVqRCxFQUFjakcsVUFBWTVwQixHQUFPNHZCLEdBSWhEbUQsRUFBbUJoRCxFQUNuQmlELEVBQW9CMUksRUFFcEIySSxHQUFpQyxFQUNqQ0MsR0FBcUMsRUFJaEN2MEIsRUFBSSxFQUFHaUQsRUFBS3lsQixFQUFXNW5CLE9BQVFkLEVBQUlpRCxFQUFJakQsSUFBSyxDQUNuRHNTLEVBQVlvVyxFQUFXMW9CLEVBQ3ZCLElBQUl5d0IsR0FBWW5lLEVBQVVraUIsUUFDdEI5RCxFQUFVcGUsRUFBVW1pQixLQVF4QixJQUxJaEUsSUFDRjBELEVBQWUzRCxHQUFVUyxFQUFhUixFQUFXQyxJQUVuRG1ELE1BQVlyc0IsR0FFUnVzQixFQUFtQnpoQixFQUFVcVcsU0FDL0IsS0FtQ0YsSUFoQ0FtTCxFQUFpQnhoQixFQUFVcEUsTUFFdkI0bEIsSUFJR3hoQixFQUFVNFcsY0FDVC9wQixFQUFTMjBCLElBR1hZLEdBQWtCLHFCQUFzQmhELEdBQTRCWSxFQUNsRGhnQixFQUFXNmhCLEdBQzdCekMsRUFBMkJwZixHQUkzQm9pQixHQUFrQixxQkFBc0JoRCxFQUEwQnBmLEVBQ2hENmhCLElBSXRCN0IsRUFBb0JBLEdBQXFCaGdCLEdBRzNDc1UsRUFBZ0J0VSxFQUFVdEYsTUFRckJzbkIsSUFBb0NoaUIsRUFBVTVSLFVBQVk0UixFQUFVNFcsYUFBZTVXLEVBQVVuUyxXQUMxRm1TLEVBQVVnWCxhQUFlaFgsRUFBVXFpQixPQUFTLENBRzVDLElBQUssR0FGREMsR0FFS0MsRUFBZ0I3MEIsRUFBSSxFQUFJNDBCLEVBQXFCbE0sRUFBV21NLE1BQzdELEdBQUtELEVBQW1CdEwsYUFBZXNMLEVBQW1CRCxPQUNsREMsRUFBbUJsMEIsVUFBWWswQixFQUFtQjFMLGFBQWUwTCxFQUFtQnowQixVQUFZLENBQ3BHbzBCLEdBQXFDLENBQ3JDLE9BSVJELEdBQWlDLEVBWXpDLElBVEtoaUIsRUFBVTRXLGFBQWU1VyxFQUFVRCxhQUN0Q21nQixFQUF1QkEsR0FBd0IxcEIsS0FDL0M0ckIsR0FBa0IsSUFBTzlOLEVBQWdCLGVBQ3JDNEwsRUFBcUI1TCxHQUFnQnRVLEVBQVc2aEIsR0FDcEQzQixFQUFxQjVMLEdBQWlCdFUsR0FHeEN3aEIsRUFBaUJ4aEIsRUFBVWdYLFdBYXpCLEdBVkEySyxHQUF5QixFQUtwQjNoQixFQUFVcWlCLFFBQ2JELEdBQWtCLGVBQWdCVixFQUEyQjFoQixFQUFXNmhCLEdBQ3hFSCxFQUE0QjFoQixHQUdQLFlBQW5Cd2hCLEVBQ0Y5QixHQUFnQyxFQUNoQytCLEVBQW1CemhCLEVBQVVxVyxTQUM3QmtMLEVBQVlNLEVBQ1pBLEVBQWVqRCxFQUFjakcsVUFDekI1cEIsR0FBTzhNLEVBQVEybUIsZ0JBQWdCbE8sRUFBZXNLLEVBQWN0SyxLQUNoRXFLLEVBQWNrRCxFQUFhLEdBQzNCWSxHQUFZNUQsRUFBYzd3QixFQUFVdXpCLEdBQVk1QyxHQVdoRDRDLEVBQVUsR0FBR21CLGFBQWVuQixFQUFVLEdBQUd4ZSxXQUV6Q2dmLEVBQW9CdkQsR0FBcUJ5RCxFQUFvQ1YsRUFBV2xJLEVBQWNvSSxFQUMxRUssR0FBb0JBLEVBQWlCcG5CLE1BUW5DZ25CLDBCQUEyQkEsUUFFcEQsQ0FFTCxHQUFJaUIsR0FBUW5zQixJQUVaLElBQUszSixFQUFTMjBCLEdBRVAsQ0FJTEQsSUFFQSxJQUFJcUIsR0FBVXBzQixLQUNWcXNCLEVBQWNyc0IsSUFHbEJySCxHQUFRcXlCLEVBQWdCLFNBQVNzQixFQUFpQmpHLEdBRWhELEdBQUk3SCxHQUEwQyxNQUE5QjhOLEVBQWdCcnNCLE9BQU8sRUFDdkNxc0IsR0FBa0I5TixFQUFXOE4sRUFBZ0JwcEIsVUFBVSxHQUFLb3BCLEVBRTVERixFQUFRRSxHQUFtQmpHLEVBSzNCOEYsRUFBTTlGLEdBQVksS0FJbEJnRyxFQUFZaEcsR0FBWTdILElBSTFCN2xCLEVBQVEweUIsRUFBYWtCLFdBQVksU0FBU3h2QixHQUN4QyxHQUFJc3BCLEdBQVcrRixFQUFRNUYsR0FBbUJscEIsRUFBVVAsSUFDaERzcEIsSUFDRmdHLEVBQVloRyxJQUFZLEVBQ3hCOEYsRUFBTTlGLEdBQVk4RixFQUFNOUYsT0FDeEI4RixFQUFNOUYsR0FBVWxvQixLQUFLcEIsSUFFckJndUIsRUFBVTVzQixLQUFLcEIsS0FLbkJwRSxFQUFRMHpCLEVBQWEsU0FBU0csRUFBUW5HLEdBQ3BDLElBQUttRyxFQUNILEtBQU1uTyxJQUFlLFVBQVcsbURBQW9EZ0ksSUFJeEYsS0FBSyxHQUFJQSxLQUFZOEYsR0FDZkEsRUFBTTlGLEtBRVI4RixFQUFNOUYsR0FBWTJCLEdBQXFCeUQsRUFBb0NVLEVBQU05RixHQUFXeEQsUUFsRGhHa0ksR0FBWXh5QixHQUFPd1UsR0FBWW9iLElBQWNvRSxVQXVEL0NsQixHQUFhL29CLFFBQ2JpcEIsRUFBb0J2RCxHQUFxQnlELEVBQW9DVixFQUFXbEksTUFBY25rQixPQUNsR0EsSUFBYTRrQixjQUFlOVosRUFBVXFmLGdCQUFrQnJmLEVBQVVpakIsYUFDdEVsQixFQUFrQm5GLFFBQVUrRixFQUloQyxHQUFJM2lCLEVBQVVuUyxTQVdaLEdBVkErekIsR0FBYyxFQUNkUSxHQUFrQixXQUFZaEMsRUFBbUJwZ0IsRUFBVzZoQixHQUM1RHpCLEVBQW9CcGdCLEVBRXBCd2hCLEVBQWtCanlCLEVBQVd5USxFQUFVblMsVUFDakNtUyxFQUFVblMsU0FBU2cwQixFQUFjakQsR0FDakM1ZSxFQUFVblMsU0FFaEIyekIsRUFBaUIwQixHQUFvQjFCLEdBRWpDeGhCLEVBQVU1UixRQUFTLENBU3JCLEdBUkEwekIsRUFBbUI5aEIsRUFFakJ1aEIsRUFERXZnQixHQUFpQndnQixNQUdQMkIsR0FBZTVJLEdBQWF2YSxFQUFVb2pCLGtCQUFtQmpnQixHQUFLcWUsS0FFNUU3QyxFQUFjNEMsRUFBVSxHQUVDLElBQXJCQSxFQUFVL3lCLFFBQWdCbXdCLEVBQVl6bEIsV0FBYWlJLEdBQ3JELEtBQU0wVCxJQUFlLFFBQ2pCLHVFQUNBUCxFQUFlLEdBR3JCbU8sSUFBWTVELEVBQWNnRCxFQUFjbEQsRUFFeEMsSUFBSTBFLEtBQW9CM0ssVUFPcEI0SyxHQUFxQnZILEVBQWtCNEMsS0FBaUIwRSxJQUN4REUsR0FBd0JuTixFQUFXOWhCLE9BQU81RyxFQUFJLEVBQUcwb0IsRUFBVzVuQixRQUFVZCxFQUFJLEtBRTFFMHhCLEdBQTRCWSxJQUk5QndELEdBQW1CRixHQUFvQmxFLEVBQTBCWSxHQUVuRTVKLEVBQWFBLEVBQVcxZixPQUFPNHNCLElBQW9CNXNCLE9BQU82c0IsSUFDMURFLEdBQXdCN0UsRUFBZXlFLElBRXZDMXlCLEVBQUt5bEIsRUFBVzVuQixXQUVoQnF6QixHQUFhNW9CLEtBQUt1b0IsRUFJdEIsSUFBSXhoQixFQUFVNFcsWUFDWmdMLEdBQWMsRUFDZFEsR0FBa0IsV0FBWWhDLEVBQW1CcGdCLEVBQVc2aEIsR0FDNUR6QixFQUFvQnBnQixFQUVoQkEsRUFBVTVSLFVBQ1owekIsRUFBbUI5aEIsR0FJckIrYSxFQUFhMkksR0FBbUJ0TixFQUFXOWhCLE9BQU81RyxFQUFHMG9CLEVBQVc1bkIsT0FBU2QsR0FBSW0wQixFQUN6RWpELEVBQWVDLEVBQWM4QyxHQUEwQkksRUFBbUJoRCxFQUFZQyxHQUNwRmtCLHFCQUFzQkEsRUFDdEJGLGtCQUFvQkEsSUFBc0JoZ0IsR0FBY2dnQixFQUN4RFoseUJBQTBCQSxFQUMxQmdCLGtCQUFtQkEsRUFDbkJzQiwwQkFBMkJBLElBRWpDL3dCLEVBQUt5bEIsRUFBVzVuQixXQUNYLElBQUl3UixFQUFVbkUsUUFDbkIsSUFDRTBpQixFQUFTdmUsRUFBVW5FLFFBQVFnbUIsRUFBY2pELEVBQWVtRCxFQUN4RCxJQUFJMXlCLElBQVUyUSxFQUFVcWdCLHFCQUF1QnJnQixDQUMzQ3pRLEdBQVdndkIsR0FDYlUsRUFBVyxLQUFNbG9CLEVBQUsxSCxHQUFTa3ZCLEdBQVNKLEVBQVdDLEdBQzFDRyxHQUNUVSxFQUFXbG9CLEVBQUsxSCxHQUFTa3ZCLEVBQU9XLEtBQU1ub0IsRUFBSzFILEdBQVNrdkIsRUFBT1ksTUFBT2hCLEVBQVdDLEdBRS9FLE1BQU9obEIsR0FDUCtjLEVBQWtCL2MsRUFBR1AsR0FBWWdwQixJQUlqQzdoQixFQUFVaWMsV0FDWmxCLEVBQVdrQixVQUFXLEVBQ3RCd0YsRUFBbUJrQyxLQUFLQyxJQUFJbkMsRUFBa0J6aEIsRUFBVXFXLFdBYTVELE1BUkEwRSxHQUFXbmYsTUFBUW9rQixJQUFpRCxJQUE1QkEsRUFBa0Jwa0IsTUFDMURtZixFQUFXUyx3QkFBMEJtRyxFQUNyQzVHLEVBQVdXLHNCQUF3QmtHLEVBQ25DN0csRUFBVy9ELFdBQWErSyxFQUV4QnZJLEVBQXVCa0csOEJBQWdDQSxFQUdoRDNFLEVBa09ULFFBQVMrRixJQUFleE0sRUFBZWlCLEVBQVNtQixFQUFVaUosR0FDeEQsR0FBSTF2QixFQUVKLElBQUluQixFQUFTeW1CLEdBQVUsQ0FDckIsR0FBSWxuQixHQUFRa25CLEVBQVFsbkIsTUFBTW1uQixHQUN0QjlhLEVBQU82YSxFQUFRN2IsVUFBVXJMLEVBQU0sR0FBR0csUUFDbENxMUIsRUFBY3gxQixFQUFNLElBQU1BLEVBQU0sR0FDaEMybUIsRUFBd0IsTUFBYjNtQixFQUFNLEVBWXJCLElBVG9CLE9BQWhCdzFCLEVBQ0ZuTixFQUFXQSxFQUFTNWtCLFVBSXBCN0IsRUFBUTB2QixHQUFzQkEsRUFBbUJqbEIsR0FDakR6SyxFQUFRQSxHQUFTQSxFQUFNeXFCLFdBR3BCenFCLEVBQU8sQ0FDVixHQUFJNnpCLEdBQVcsSUFBTXBwQixFQUFPLFlBQzVCekssR0FBUTR6QixFQUFjbk4sRUFBU3FOLGNBQWNELEdBQVlwTixFQUFTM2EsS0FBSytuQixHQUd6RSxJQUFLN3pCLElBQVUra0IsRUFDYixLQUFNSCxJQUFlLFFBQ2pCLGlFQUNBbmEsRUFBTTRaLE9BRVAsSUFBSXpsQixHQUFRMG1CLEdBQVUsQ0FDM0J0bEIsSUFDQSxLQUFLLEdBQUl2QyxHQUFJLEVBQUdpRCxFQUFLNGtCLEVBQVEvbUIsT0FBUWQsRUFBSWlELEVBQUlqRCxJQUMzQ3VDLEVBQU12QyxHQUFLb3pCLEdBQWV4TSxFQUFlaUIsRUFBUTduQixHQUFJZ3BCLEVBQVVpSixPQUV4RDl5QixHQUFTMG9CLEtBQ2xCdGxCLEtBQ0FkLEVBQVFvbUIsRUFBUyxTQUFTeFYsRUFBWWlrQixHQUNwQy96QixFQUFNK3pCLEdBQVlsRCxHQUFleE0sRUFBZXZVLEVBQVkyVyxFQUFVaUosS0FJMUUsT0FBTzF2QixJQUFTLEtBR2xCLFFBQVNrd0IsSUFBaUJ6SixFQUFVaUYsRUFBT3RDLEVBQWM2RyxFQUFzQi9LLEVBQWN2WixFQUFPd2pCLEdBQ2xHLEdBQUlPLEdBQXFCbnBCLElBQ3pCLEtBQUssR0FBSXl0QixLQUFpQi9ELEdBQXNCLENBQzlDLEdBQUlsZ0IsR0FBWWtnQixFQUFxQitELEdBQ2pDMVgsR0FDRjJYLE9BQVFsa0IsSUFBY29mLEdBQTRCcGYsRUFBVXFmLGVBQWlCbEssRUFBZXZaLEVBQzVGOGEsU0FBVUEsRUFDVkMsT0FBUWdGLEVBQ1J3SSxZQUFhOUssR0FHWHRaLEVBQWFDLEVBQVVELFVBQ1IsT0FBZkEsSUFDRkEsRUFBYTRiLEVBQU0zYixFQUFVdEYsTUFHL0IsSUFBSXFtQixHQUFxQi9JLEVBQVlqWSxFQUFZd00sR0FBUSxFQUFNdk0sRUFBVThXLGFBTXpFNkksR0FBbUIzZixFQUFVdEYsTUFBUXFtQixFQUNyQ3JLLEVBQVMzYSxLQUFLLElBQU1pRSxFQUFVdEYsS0FBTyxhQUFjcW1CLEVBQW1CckcsVUFFeEUsTUFBT2lGLEdBU1QsUUFBUzZELElBQW1CcE4sRUFBWWpCLEVBQWNpUCxHQUNwRCxJQUFLLEdBQUl4ekIsR0FBSSxFQUFHQyxFQUFLdWxCLEVBQVc1bkIsT0FBUW9DLEVBQUlDLEVBQUlELElBQzlDd2xCLEVBQVd4bEIsR0FBS2lCLEVBQVF1a0IsRUFBV3hsQixJQUFLeXVCLGVBQWdCbEssRUFBYzhOLFdBQVltQixJQWtCdEYsUUFBU3JILElBQWFzSCxFQUFhM3BCLEVBQU02QixFQUFVK2MsRUFBYUMsRUFBaUIrSyxFQUMzREMsR0FDcEIsR0FBSTdwQixJQUFTNmUsRUFBaUIsTUFBTyxLQUNyQyxJQUFJbHJCLEdBQVEsSUFDWixJQUFJc25CLEVBQWNubUIsZUFBZWtMLEdBQy9CLElBQUssR0FBSXNGLEdBQVdvVyxFQUFhcEwsRUFBVXJPLElBQUlqQyxFQUFPa2IsR0FDbERsb0IsRUFBSSxFQUFHaUQsRUFBS3lsQixFQUFXNW5CLE9BQVFkLEVBQUlpRCxFQUFJakQsSUFFekMsR0FEQXNTLEVBQVlvVyxFQUFXMW9CLElBQ2xCNkUsRUFBWSttQixJQUFnQkEsRUFBY3RaLEVBQVVxVyxZQUNWLElBQTFDclcsRUFBVTBWLFNBQVN0aEIsUUFBUW1JLEdBQWtCLENBSWhELEdBSEkrbkIsSUFDRnRrQixFQUFZbk8sRUFBUW1PLEdBQVlraUIsUUFBU29DLEVBQWVuQyxNQUFPb0MsTUFFNUR2a0IsRUFBVTJnQixXQUFZLENBQ3pCLEdBQUlsTSxHQUFXelUsRUFBVTJnQixXQUNyQnpMLEVBQXVCbFYsRUFBV0EsRUFBVXRGLEtBQzVDN04sR0FBUzRuQixFQUFTVSxnQkFDcEJuVixFQUFVc2dCLGtCQUFvQjdMLEVBQVNVLGNBRzNDa1AsRUFBWTF2QixLQUFLcUwsR0FDakIzUixFQUFRMlIsRUFJZCxNQUFPM1IsR0FZVCxRQUFTc3ZCLElBQXdCampCLEdBQy9CLEdBQUlpYixFQUFjbm1CLGVBQWVrTCxHQUMvQixJQUFLLEdBQUlzRixHQUFXb1csRUFBYXBMLEVBQVVyTyxJQUFJakMsRUFBT2tiLEdBQ2xEbG9CLEVBQUksRUFBR2lELEVBQUt5bEIsRUFBVzVuQixPQUFRZCxFQUFJaUQsRUFBSWpELElBRXpDLEdBREFzUyxFQUFZb1csRUFBVzFvQixHQUNuQnNTLEVBQVV3a0IsYUFDWixPQUFPLENBSWIsUUFBTyxFQVdULFFBQVNmLElBQXdCanpCLEVBQUtNLEdBQ3BDLEdBQUkyekIsR0FBVTN6QixFQUFJNG5CLE1BQ2RnTSxFQUFVbDBCLEVBQUlrb0IsS0FHbEJ2cEIsR0FBUXFCLEVBQUssU0FBU1AsRUFBT1gsR0FDTCxNQUFsQkEsRUFBSW1ILE9BQU8sS0FDVDNGLEVBQUl4QixJQUFRd0IsRUFBSXhCLEtBQVNXLElBQ3ZCQSxFQUFNekIsT0FDUnlCLElBQWtCLFVBQVJYLEVBQWtCLElBQU0sS0FBT3dCLEVBQUl4QixHQUU3Q1csRUFBUWEsRUFBSXhCLElBR2hCa0IsRUFBSW0wQixLQUFLcjFCLEVBQUtXLEdBQU8sRUFBTXcwQixFQUFRbjFCLE9BS3ZDSCxFQUFRMkIsRUFBSyxTQUFTYixFQUFPWCxHQUt0QmtCLEVBQUloQixlQUFlRixJQUEwQixNQUFsQkEsRUFBSW1ILE9BQU8sS0FDekNqRyxFQUFJbEIsR0FBT1csRUFFQyxVQUFSWCxHQUEyQixVQUFSQSxJQUNyQm8xQixFQUFRcDFCLEdBQU9tMUIsRUFBUW4xQixPQU8vQixRQUFTbzBCLElBQW1CdE4sRUFBWXlMLEVBQWNwTCxFQUNsRHFFLEVBQWNpSCxFQUFtQmhELEVBQVlDLEVBQWF4RixHQUM1RCxHQUNJb0wsR0FDQUMsRUFGQUMsS0FHQUMsRUFBNEJsRCxFQUFhLEdBQ3pDbUQsRUFBcUI1TyxFQUFXL0osUUFDaEM0WSxFQUF1QnB6QixFQUFRbXpCLEdBQzdCcE8sWUFBYSxLQUFNSSxXQUFZLEtBQU01b0IsUUFBUyxLQUFNaXlCLG9CQUFxQjJFLElBRTNFcE8sRUFBZXJuQixFQUFXeTFCLEVBQW1CcE8sYUFDdkNvTyxFQUFtQnBPLFlBQVlpTCxFQUFjcEwsR0FDN0N1TyxFQUFtQnBPLFlBQ3pCd00sRUFBb0I0QixFQUFtQjVCLGlCQXlGM0MsT0F2RkF2QixHQUFhL29CLFFBRWJnZixFQUFpQmxCLEdBQ2QxakIsS0FBSyxTQUFTZ3lCLEdBQ2IsR0FBSXZHLEdBQWF3RyxFQUFtQjVELEVBQVdwRyxDQUkvQyxJQUZBK0osRUFBVWhDLEdBQW9CZ0MsR0FFMUJGLEVBQW1CNTJCLFFBQVMsQ0FROUIsR0FORW16QixFQURFdmdCLEdBQWlCa2tCLE1BR1AvQixHQUFlNUksR0FBYTZJLEVBQW1CamdCLEdBQUsraEIsS0FFbEV2RyxFQUFjNEMsRUFBVSxHQUVDLElBQXJCQSxFQUFVL3lCLFFBQWdCbXdCLEVBQVl6bEIsV0FBYWlJLEdBQ3JELEtBQU0wVCxJQUFlLFFBQ2pCLHVFQUNBbVEsRUFBbUJ0cUIsS0FBTWtjLEVBRy9CdU8sSUFBcUJ6TSxVQUNyQitKLEdBQVkzSCxFQUFjK0csRUFBY2xELEVBQ3hDLElBQUkyRSxHQUFxQnZILEVBQWtCNEMsS0FBaUJ3RyxFQUV4RHQ0QixHQUFTbTRCLEVBQW1CcHBCLFFBRzlCNG5CLEdBQW1CRixHQUFvQixHQUV6Q2xOLEVBQWFrTixFQUFtQjVzQixPQUFPMGYsR0FDdkNxTixHQUF3QmhOLEVBQVEwTyxPQUVoQ3hHLEdBQWNvRyxFQUNkbEQsRUFBYTVvQixLQUFLaXNCLEVBZXBCLEtBWkE5TyxFQUFXOWEsUUFBUTJwQixHQUVuQkwsRUFBMEI1SSxHQUFzQjVGLEVBQVl1SSxFQUFhbEksRUFDckVzTCxFQUFtQkYsRUFBY21ELEVBQW9CakcsRUFBWUMsRUFDakV4RixHQUNKcnFCLEVBQVEyckIsRUFBYyxTQUFTdm5CLEVBQU03RixHQUMvQjZGLElBQVNvckIsSUFDWDdELEVBQWFwdEIsR0FBS20wQixFQUFhLE1BR25DZ0QsRUFBMkJuTCxFQUFhbUksRUFBYSxHQUFHdGYsV0FBWXdmLEdBRTdEK0MsRUFBVXQyQixRQUFRLENBQ3ZCLEdBQUlvTixHQUFRa3BCLEVBQVV6WSxRQUNsQitZLEVBQXlCTixFQUFVelksUUFDbkNnWixFQUFrQlAsRUFBVXpZLFFBQzVCZ1EsRUFBb0J5SSxFQUFVelksUUFDOUJrVCxFQUFXc0MsRUFBYSxFQUU1QixLQUFJam1CLEVBQU0wcEIsWUFBVixDQUVBLEdBQUlGLElBQTJCTCxFQUEyQixDQUN4RCxHQUFJUSxHQUFhSCxFQUF1QmpNLFNBRWxDSyxHQUF1QmtHLCtCQUN6QnNGLEVBQW1CNTJCLFVBRXJCbXhCLEVBQVdoYyxHQUFZb2IsSUFFekI4RCxHQUFZNEMsRUFBaUJ0MkIsR0FBT3EyQixHQUF5QjdGLEdBRzdEckcsRUFBYW5xQixHQUFPd3dCLEdBQVdnRyxHQUcvQnBLLEVBREV5SixFQUF3QnBKLHdCQUNEQyxFQUF3QjdmLEVBQU9ncEIsRUFBd0I1TixXQUFZcUYsR0FFbkVBLEVBRTNCdUksRUFBd0JDLEVBQTBCanBCLEVBQU8yakIsRUFBVXpFLEVBQ2pFSyxJQUVKMkosRUFBWSxPQUNYVSxNQUFNLFNBQVN4cUIsR0FDWnZJLEVBQVF1SSxJQUNWbWIsRUFBa0JuYixLQUlqQixTQUEyQnlxQixFQUFtQjdwQixFQUFPckksRUFBTW1KLEVBQWEyZixHQUM3RSxHQUFJbEIsR0FBeUJrQixDQUN6QnpnQixHQUFNMHBCLGNBQ05SLEVBQ0ZBLEVBQVVud0IsS0FBS2lILEVBQ0FySSxFQUNBbUosRUFDQXllLElBRVh5SixFQUF3QnBKLDBCQUMxQkwsRUFBeUJNLEVBQXdCN2YsRUFBT2dwQixFQUF3QjVOLFdBQVlxRixJQUU5RnVJLEVBQXdCQyxFQUEwQmpwQixFQUFPckksRUFBTW1KLEVBQWF5ZSxNQVNsRixRQUFTOEMsSUFBV2xvQixFQUFHQyxHQUNyQixHQUFJMHZCLEdBQU8xdkIsRUFBRXFnQixTQUFXdGdCLEVBQUVzZ0IsUUFDMUIsT0FBYSxLQUFUcVAsRUFBbUJBLEVBQ25CM3ZCLEVBQUUyRSxPQUFTMUUsRUFBRTBFLEtBQWMzRSxFQUFFMkUsS0FBTzFFLEVBQUUwRSxNQUFTLEVBQUksRUFDaEQzRSxFQUFFekgsTUFBUTBILEVBQUUxSCxNQUdyQixRQUFTOHpCLElBQWtCdUQsRUFBTUMsRUFBbUI1bEIsRUFBV2pNLEdBRTdELFFBQVM4eEIsR0FBd0JDLEdBQy9CLE1BQU9BLEdBQ0osYUFBZUEsRUFBYSxJQUM3QixHQUdKLEdBQUlGLEVBQ0YsS0FBTS9RLElBQWUsV0FBWSw4REFDN0IrUSxFQUFrQmxyQixLQUFNbXJCLEVBQXdCRCxFQUFrQnptQixjQUNsRWEsRUFBVXRGLEtBQU1tckIsRUFBd0I3bEIsRUFBVWIsY0FBZXdtQixFQUFNOXNCLEdBQVk5RSxJQUszRixRQUFTK3BCLElBQTRCMUgsRUFBWTJQLEdBQy9DLEdBQUlDLEdBQWdCbk8sRUFBYWtPLEdBQU0sRUFDbkNDLElBQ0Y1UCxFQUFXemhCLE1BQ1QwaEIsU0FBVSxFQUNWeGEsUUFBUyxTQUFrQ29xQixHQUN6QyxHQUFJQyxHQUFxQkQsRUFBYW4wQixTQUNsQ3EwQixJQUFxQkQsRUFBbUIxM0IsTUFNNUMsT0FGSTIzQixJQUFrQnRxQixFQUFRdXFCLGtCQUFrQkYsR0FFekMsU0FBK0J0cUIsRUFBT3JJLEdBQzNDLEdBQUl6QixHQUFTeUIsRUFBS3pCLFFBQ2JxMEIsSUFBa0J0cUIsRUFBUXVxQixrQkFBa0J0MEIsR0FDakQrSixFQUFRd3FCLGlCQUFpQnYwQixFQUFRazBCLEVBQWNNLGFBQy9DMXFCLEVBQU1oSixPQUFPb3pCLEVBQWUsU0FBa0MvMUIsR0FDNURzRCxFQUFLLEdBQUc0b0IsVUFBWWxzQixRQVNoQyxRQUFTc3FCLElBQWExa0IsRUFBTWhJLEdBRTFCLE9BREFnSSxFQUFPN0IsR0FBVTZCLEdBQVEsU0FFekIsSUFBSyxNQUNMLElBQUssT0FDSCxHQUFJaU4sR0FBVXBXLEVBQU80SyxTQUFTeUssY0FBYyxNQUU1QyxPQURBZSxHQUFRVixVQUFZLElBQU12TSxFQUFPLElBQU1oSSxFQUFXLEtBQU9nSSxFQUFPLElBQ3pEaU4sRUFBUVAsV0FBVyxHQUFHQSxVQUMvQixTQUNFLE1BQU8xVSxJQUtYLFFBQVMwNEIsSUFBa0JoekIsRUFBTWl6QixHQUMvQixHQUEyQixXQUF2QkEsRUFDRixNQUFPdk8sR0FBS3dPLElBRWQsSUFBSXByQixHQUFNdkgsRUFBVVAsRUFHcEIsSUFBMkIsUUFBdkJpekIsR0FBdUQsVUFBdkJBLEdBQ2xDLElBQW1FLEtBQTlELE1BQU8sUUFBUyxRQUFTLFNBQVUsU0FBU3B5QixRQUFRaUgsR0FDdkQsTUFBTzRjLEdBQUt5TyxpQkFHVCxJQUEyQixjQUF2QkYsR0FDRSxTQUFSbnJCLEdBQXlDLFdBQXZCbXJCLEdBRVYsU0FBUm5yQixHQUF5QyxTQUF2Qm1yQixFQUVyQixNQUFPdk8sR0FBS3lPLGFBS2hCLFFBQVM5SSxJQUE0QnJxQixFQUFNNmlCLEVBQVlubUIsRUFBT3lLLEVBQU15aUIsR0FDbEUsR0FBSXdKLEdBQWlCSixHQUFrQmh6QixFQUFNbUgsR0FDekNrc0IsR0FBc0J6SixFQUN0QjBKLEVBQWU5USxFQUFxQnJiLElBQVN5aUIsRUFFN0M2SSxFQUFnQm5PLEVBQWE1bkIsRUFBTzIyQixFQUFvQkQsRUFBZ0JFLEVBRzVFLElBQUtiLEVBQUwsQ0FFQSxHQUFhLGFBQVR0ckIsR0FBMkMsV0FBcEI1RyxFQUFVUCxHQUNuQyxLQUFNc2hCLElBQWUsV0FDakIscUVBQ0FoYyxHQUFZdEYsR0FHbEIsSUFBSXlpQixFQUEwQjNpQixLQUFLcUgsR0FDakMsS0FBTW1hLElBQWUsY0FDakIsMklBSU51QixHQUFXemhCLE1BQ1QwaEIsU0FBVSxJQUNWeGEsUUFBUyxXQUNMLE9BQ0VxakIsSUFBSyxTQUFrQ3RqQixFQUFPN0gsRUFBU04sR0FDckQsR0FBSXF6QixHQUFlcnpCLEVBQUtxekIsY0FBZ0JyekIsRUFBS3F6QixZQUFjdHdCLE1BR3ZEdXdCLEVBQVd0ekIsRUFBS2lILEVBQ2hCcXNCLEtBQWE5MkIsSUFJZisxQixFQUFnQmUsR0FBWWxQLEVBQWFrUCxHQUFVLEVBQU1KLEVBQWdCRSxHQUN6RTUyQixFQUFRODJCLEdBS0xmLElBS0x2eUIsRUFBS2lILEdBQVFzckIsRUFBY3BxQixJQUUxQmtyQixFQUFZcHNCLEtBQVVvc0IsRUFBWXBzQixRQUFhc3NCLFNBQVUsR0FDekR2ekIsRUFBS3F6QixhQUFlcnpCLEVBQUtxekIsWUFBWXBzQixHQUFNdXNCLFNBQVdyckIsR0FDckRoSixPQUFPb3pCLEVBQWUsU0FBa0NlLEVBQVVHLEdBT25ELFVBQVR4c0IsR0FBb0Jxc0IsSUFBYUcsRUFDbkN6ekIsRUFBSzB6QixhQUFhSixFQUFVRyxHQUU1Qnp6QixFQUFLa3hCLEtBQUtqcUIsRUFBTXFzQixZQW9CbEMsUUFBU3RFLElBQVkzSCxFQUFjc00sRUFBa0JDLEdBQ25ELEdBR0kzNUIsR0FBR2lELEVBSEgyMkIsRUFBdUJGLEVBQWlCLEdBQ3hDRyxFQUFjSCxFQUFpQjU0QixPQUMvQnNELEVBQVN3MUIsRUFBcUJ2a0IsVUFHbEMsSUFBSStYLEVBQ0YsSUFBS3B0QixFQUFJLEVBQUdpRCxFQUFLbXFCLEVBQWF0c0IsT0FBUWQsRUFBSWlELEVBQUlqRCxJQUM1QyxHQUFJb3RCLEVBQWFwdEIsS0FBTzQ1QixFQUFzQixDQUM1Q3hNLEVBQWFwdEIsS0FBTzI1QixDQUNwQixLQUFLLEdBQUl6MkIsR0FBSWxELEVBQUc4NUIsRUFBSzUyQixFQUFJMjJCLEVBQWMsRUFDOUIxMkIsRUFBS2lxQixFQUFhdHNCLE9BQ3RCb0MsRUFBSUMsRUFBSUQsSUFBSzQyQixJQUNaQSxFQUFLMzJCLEVBQ1BpcUIsRUFBYWxxQixHQUFLa3FCLEVBQWEwTSxTQUV4QjFNLEdBQWFscUIsRUFHeEJrcUIsR0FBYXRzQixRQUFVKzRCLEVBQWMsRUFLakN6TSxFQUFhenJCLFVBQVlpNEIsSUFDM0J4TSxFQUFhenJCLFFBQVVnNEIsRUFFekIsT0FLRnYxQixHQUNGQSxFQUFPa1IsYUFBYXFrQixFQUFTQyxFQU8vQixJQUFJM2xCLEdBQVdqVixFQUFPNEssU0FBU3NLLHdCQUMvQixLQUFLbFUsRUFBSSxFQUFHQSxFQUFJNjVCLEVBQWE3NUIsSUFDM0JpVSxFQUFTRyxZQUFZc2xCLEVBQWlCMTVCLEdBa0J4QyxLQWZJcUIsR0FBTzA0QixRQUFRSCxLQUlqQnY0QixHQUFPZ04sS0FBS3NyQixFQUFTdDRCLEdBQU9nTixLQUFLdXJCLElBR2pDdjRCLEdBQU91NEIsR0FBc0J6VixJQUFJLGFBS25DOWlCLEdBQU8yVSxVQUFVL0IsRUFBU2dDLGlCQUFpQixNQUd0Q2pXLEVBQUksRUFBR0EsRUFBSTY1QixFQUFhNzVCLFVBQ3BCMDVCLEdBQWlCMTVCLEVBRTFCMDVCLEdBQWlCLEdBQUtDLEVBQ3RCRCxFQUFpQjU0QixPQUFTLEVBSTVCLFFBQVM4d0IsSUFBbUJyb0IsRUFBSXl3QixHQUM5QixNQUFPbDJCLEdBQU8sV0FBYSxNQUFPeUYsR0FBR0UsTUFBTSxLQUFNdkosWUFBZXFKLEVBQUl5d0IsR0FJdEUsUUFBU3JHLElBQWE5QyxFQUFRM2lCLEVBQU84YSxFQUFVaUYsRUFBT2EsRUFBYW5ELEdBQ2pFLElBQ0VrRixFQUFPM2lCLEVBQU84YSxFQUFVaUYsRUFBT2EsRUFBYW5ELEdBQzVDLE1BQU9qZ0IsR0FDUCtjLEVBQWtCL2MsRUFBR1AsR0FBWTZkLEtBSXJDLFFBQVNpUixJQUFvQjFTLEVBQVVYLEdBQ3JDLEdBQUlnRCxFQUNGLEtBQU16QyxJQUFlLGNBQ25CLDREQUNBSSxFQUFVWCxHQUtoQixRQUFTaU0sSUFBNEIza0IsRUFBTytmLEVBQU9sbkIsRUFBYWdnQixFQUFVelUsR0FvSXhFLFFBQVM0bkIsR0FBY3Q0QixFQUFLdTRCLEVBQWNDLEdBQ3BDdjRCLEVBQVdrRixFQUFZdXNCLGNBQWdCbHJCLEVBQWMreEIsRUFBY0MsS0FFaEV6UCxLQUNIemMsRUFBTW1zQixhQUFhM1AsR0FDbkJDLE9BR0cyUCxJQUNIQSxLQUNBM1AsR0FBZTFqQixLQUFLc3pCLElBR2xCRCxFQUFRMTRCLEtBQ1Z3NEIsRUFBZ0JFLEVBQVExNEIsR0FBS3c0QixlQUcvQkUsRUFBUTE0QixHQUFPLEdBQUk0NEIsSUFBYUosRUFBZUQsSUFJbkQsUUFBU0ksS0FDUHh6QixFQUFZdXNCLFdBQVdnSCxHQUV2QkEsTUFBVTl5QixHQTNKWixHQUVJOHlCLEdBRkFHLEtBQ0FsSCxJQTZKSixPQTFKQTl4QixHQUFRc2xCLEVBQVUsU0FBMkJDLEVBQVlDLEdBQ3ZELEdBR0F5VCxHQUNBQyxFQUFXQyxFQUFXQyxFQUFTQyxFQUozQnZULEVBQVdQLEVBQVdPLFNBQzFCRCxFQUFXTixFQUFXTSxTQUN0QkYsRUFBT0osRUFBV0ksSUFJbEIsUUFBUUEsR0FFTixJQUFLLElBQ0VFLEdBQWF4bEIsR0FBZUMsS0FBS2tzQixFQUFPMUcsS0FDM0MwUyxHQUFvQjFTLEVBQVVqVixFQUFVdEYsTUFDeENqRyxFQUFZa2dCLEdBQWFnSCxFQUFNMUcsT0FBWS9mLElBRzdDc3pCLEVBQWM3TSxFQUFNOE0sU0FBU3hULEVBQVUsU0FBU2hsQixHQUM5QyxHQUFJbkIsRUFBU21CLElBQVUrQyxFQUFVL0MsR0FBUSxDQUN2QyxHQUFJaTNCLEdBQVd6eUIsRUFBWWtnQixFQUMzQmlULEdBQWNqVCxFQUFXMWtCLEVBQU9pM0IsR0FDaEN6eUIsRUFBWWtnQixHQUFhMWtCLEtBRzdCMHJCLEVBQU1tTCxZQUFZN1IsR0FBVWdTLFFBQVVyckIsRUFDdEN3c0IsRUFBWXpNLEVBQU0xRyxHQUNkbm1CLEVBQVNzNUIsR0FHWDN6QixFQUFZa2dCLEdBQWFrRCxFQUFhdVEsR0FBV3hzQixHQUN4QzVJLEVBQVVvMUIsS0FHbkIzekIsRUFBWWtnQixHQUFheVQsR0FFM0JuSCxFQUFldE0sR0FBYSxHQUFJdVQsSUFBYVEsR0FBc0JqMEIsRUFBWWtnQixJQUMvRXdULEVBQXNCeHpCLEtBQUs2ekIsRUFDM0IsTUFFRixLQUFLLElBQ0gsSUFBS2g1QixHQUFlQyxLQUFLa3NCLEVBQU8xRyxHQUFXLENBQ3pDLEdBQUlELEVBQVUsS0FDZDJTLElBQW9CMVMsRUFBVWpWLEVBQVV0RixNQUN4Q2loQixFQUFNMUcsT0FBWS9mLEdBRXBCLEdBQUk4ZixJQUFhMkcsRUFBTTFHLEdBQVcsS0FFbENvVCxHQUFZdFEsRUFBTzRELEVBQU0xRyxJQUV2QnNULEVBREVGLEVBQVVNLFFBQ0YxeUIsRUFFQUgsRUFFWnd5QixFQUFZRCxFQUFVTyxRQUFVLFdBRzlCLEtBREFSLEdBQVkzekIsRUFBWWtnQixHQUFhMFQsRUFBVXpzQixHQUN6Q2laLEdBQWUsWUFDakIsbUZBQ0E4RyxFQUFNMUcsR0FBV0EsRUFBVWpWLEVBQVV0RixPQUUzQzB0QixFQUFZM3pCLEVBQVlrZ0IsR0FBYTBULEVBQVV6c0IsRUFDL0MsSUFBSWl0QixHQUFtQixTQUEwQkMsR0FZL0MsTUFYS1AsR0FBUU8sRUFBYXIwQixFQUFZa2dCLE1BRS9CNFQsRUFBUU8sRUFBYVYsR0FLeEJFLEVBQVUxc0IsRUFBT2t0QixFQUFjcjBCLEVBQVlrZ0IsSUFIM0NsZ0IsRUFBWWtnQixHQUFhbVUsR0FNN0JWLEVBQVlVLEVBR2RELEdBQWlCRSxXQUFZLEVBRTNCUCxFQURFOVQsRUFBV0ssV0FDQ25aLEVBQU1vdEIsaUJBQWlCck4sRUFBTTFHLEdBQVc0VCxHQUV4Q2p0QixFQUFNaEosT0FBT21sQixFQUFPNEQsRUFBTTFHLEdBQVc0VCxHQUFtQixLQUFNUixFQUFVTSxTQUV4RlIsRUFBc0J4ekIsS0FBSzZ6QixFQUMzQixNQUVGLEtBQUssSUFDSCxJQUFLaDVCLEdBQWVDLEtBQUtrc0IsRUFBTzFHLEdBQVcsQ0FDekMsR0FBSUQsRUFBVSxLQUNkMlMsSUFBb0IxUyxFQUFValYsRUFBVXRGLE1BQ3hDaWhCLEVBQU0xRyxPQUFZL2YsR0FFcEIsR0FBSThmLElBQWEyRyxFQUFNMUcsR0FBVyxLQUVsQ29ULEdBQVl0USxFQUFPNEQsRUFBTTFHLEdBQ3pCLElBQUlnVSxHQUFZWixFQUFVTSxRQUV0Qk8sRUFBZXowQixFQUFZa2dCLEdBQWEwVCxFQUFVenNCLEVBQ3REcWxCLEdBQWV0TSxHQUFhLEdBQUl1VCxJQUFhUSxHQUFzQmowQixFQUFZa2dCLElBRS9FNlQsRUFBYzVzQixFQUFNaEosT0FBT3kxQixFQUFXLFNBQWdDdEIsRUFBVUcsR0FDOUUsR0FBSUEsSUFBYUgsRUFBVSxDQUN6QixHQUFJRyxJQUFhZ0MsR0FBaUJELEdBQWFoekIsRUFBT2l4QixFQUFVZ0MsR0FDOUQsTUFFRmhDLEdBQVdnQyxFQUVidEIsRUFBY2pULEVBQVdvUyxFQUFVRyxHQUNuQ3p5QixFQUFZa2dCLEdBQWFvUyxHQUN4QmtDLEdBRUhkLEVBQXNCeHpCLEtBQUs2ekIsRUFDM0IsTUFFRixLQUFLLElBUUgsR0FQS3hULEdBQWF4bEIsR0FBZUMsS0FBS2tzQixFQUFPMUcsSUFDM0MwUyxHQUFvQjFTLEVBQVVqVixFQUFVdEYsT0FHMUMydEIsRUFBWTFNLEVBQU1uc0IsZUFBZXlsQixHQUFZOEMsRUFBTzRELEVBQU0xRyxJQUFhaGpCLEtBR3JEQSxHQUFRK2lCLEVBQVUsS0FFcEN2Z0IsR0FBWWtnQixHQUFhLFNBQVNwSSxHQUNoQyxNQUFPOGIsR0FBVXpzQixFQUFPMlEsUUFrQzlCMFUsZUFBZ0JBLEVBQ2hCVCxjQUFlMkgsRUFBc0IzNUIsUUFBVSxXQUM3QyxJQUFLLEdBQUlkLEdBQUksRUFBR2lELEVBQUt3M0IsRUFBc0IzNUIsT0FBUWQsRUFBSWlELElBQU1qRCxFQUMzRHk2QixFQUFzQno2QixPQTFqRTlCLEdBV0kycUIsSUFYQThRLEdBQW1CLE1BQ25CdFEsR0FBb0Juc0IsRUFBTzRLLFNBQVN5SyxjQUFjLE9BR2xEMlYsR0FBMkJELEVBQzNCRyxHQUE0QkQsRUFHNUJILEdBQWVELENBbURuQmdCLEdBQVdwa0IsV0FnQlRpMUIsV0FBWXBNLEdBY1pxTSxVQUFXLFNBQVNDLEdBQ2RBLEdBQVlBLEVBQVM5NkIsT0FBUyxHQUNoQzBwQixFQUFTeFAsU0FBU2pKLEtBQUtrWixVQUFXMlEsSUFldENDLGFBQWMsU0FBU0QsR0FDakJBLEdBQVlBLEVBQVM5NkIsT0FBUyxHQUNoQzBwQixFQUFTdlAsWUFBWWxKLEtBQUtrWixVQUFXMlEsSUFnQnpDbkMsYUFBYyxTQUFTcUMsRUFBWWpFLEdBQ2pDLEdBQUlrRSxHQUFRQyxHQUFnQkYsRUFBWWpFLEVBQ3BDa0UsSUFBU0EsRUFBTWo3QixRQUNqQjBwQixFQUFTeFAsU0FBU2pKLEtBQUtrWixVQUFXOFEsRUFHcEMsSUFBSUUsR0FBV0QsR0FBZ0JuRSxFQUFZaUUsRUFDdkNHLElBQVlBLEVBQVNuN0IsUUFDdkIwcEIsRUFBU3ZQLFlBQVlsSixLQUFLa1osVUFBV2dSLElBYXpDaEYsS0FBTSxTQUFTcjFCLEVBQUtXLEVBQU8yNUIsRUFBVzNVLEdBS3BDLEdBSUk3akIsR0FKQW1DLEVBQU9rTSxLQUFLa1osVUFBVSxHQUN0QmtSLEVBQWFuakIsR0FBbUJuVCxFQUFNakUsR0FDdEN3NkIsRUFBYWhqQixHQUFtQnhYLEdBQ2hDeTZCLEVBQVd6NkIsQ0F5QmYsSUF0Qkl1NkIsR0FDRnBxQixLQUFLa1osVUFBVW5sQixLQUFLbEUsRUFBS1csR0FDekJnbEIsRUFBVzRVLEdBQ0ZDLElBQ1RycUIsS0FBS3FxQixHQUFjNzVCLEVBQ25CODVCLEVBQVdELEdBR2JycUIsS0FBS25RLEdBQU9XLEVBR1JnbEIsRUFDRnhWLEtBQUtpWixNQUFNcHBCLEdBQU8ybEIsR0FFbEJBLEVBQVd4VixLQUFLaVosTUFBTXBwQixNQUVwQm1RLEtBQUtpWixNQUFNcHBCLEdBQU8ybEIsRUFBV3JZLEdBQVd0TixFQUFLLE1BTS9CLE9BRmxCOEIsRUFBVzBDLEVBQVUyTCxLQUFLa1osY0FFUSxTQUFScnBCLEdBQTBCLGNBQVJBLElBQzFCLFFBQWI4QixHQUE4QixRQUFSOUIsRUFFekJtUSxLQUFLblEsR0FBT1csRUFBUWtvQixFQUFjbG9CLEVBQWUsUUFBUlgsT0FDcEMsSUFBaUIsUUFBYjhCLEdBQThCLFdBQVI5QixHQUFvQnZDLEVBQVVrRCxHQUFRLENBZXJFLElBQUssR0FiRDJhLEdBQVMsR0FHVG9mLEVBQWdCN21CLEdBQUtsVCxHQUVyQmc2QixFQUFhLHNDQUNiQyxFQUFVLEtBQUs3MkIsS0FBSzIyQixHQUFpQkMsRUFBYSxNQUdsREUsRUFBVUgsRUFBY24yQixNQUFNcTJCLEdBRzlCRSxFQUFvQnpHLEtBQUswRyxNQUFNRixFQUFRMzdCLE9BQVMsR0FDM0NkLEVBQUksRUFBR0EsRUFBSTA4QixFQUFtQjE4QixJQUFLLENBQzFDLEdBQUk0OEIsR0FBZSxFQUFKNThCLENBRWZrZCxJQUFVdU4sRUFBY2hWLEdBQUtnbkIsRUFBUUcsS0FBWSxHQUVqRDFmLEdBQVcsSUFBTXpILEdBQUtnbkIsRUFBUUcsRUFBVyxJQUkzQyxHQUFJQyxHQUFZcG5CLEdBQUtnbkIsRUFBWSxFQUFKejhCLElBQVFtRyxNQUFNLEtBRzNDK1csSUFBVXVOLEVBQWNoVixHQUFLb25CLEVBQVUsS0FBSyxHQUduQixJQUFyQkEsRUFBVS83QixTQUNab2MsR0FBVyxJQUFNekgsR0FBS29uQixFQUFVLEtBRWxDOXFCLEtBQUtuUSxHQUFPVyxFQUFRMmEsR0FHSixJQUFkZ2YsSUFDWSxPQUFWMzVCLEdBQWtCc0MsRUFBWXRDLEdBQ2hDd1AsS0FBS2taLFVBQVU2UixXQUFXdlYsR0FFdEJrVSxHQUFpQjkxQixLQUFLNGhCLEdBQ3hCeFYsS0FBS2taLFVBQVVsbEIsS0FBS3doQixFQUFVaGxCLEdBRTlCMm9CLEVBQWVuWixLQUFLa1osVUFBVSxHQUFJMUQsRUFBVWhsQixHQU1sRCxJQUFJNjJCLEdBQWNybkIsS0FBS3FuQixXQUNuQkEsSUFDRjMzQixFQUFRMjNCLEVBQVlpRCxHQUFXLFNBQVM5eUIsR0FDdEMsSUFDRUEsRUFBR2hILEdBQ0gsTUFBT21KLEdBQ1ArYyxFQUFrQi9jLE9BMEIxQnF2QixTQUFVLFNBQVNuNUIsRUFBSzJILEdBQ3RCLEdBQUkwa0IsR0FBUWxjLEtBQ1JxbkIsRUFBZW5MLEVBQU1tTCxjQUFnQm5MLEVBQU1tTCxZQUFjdHdCLE1BQ3pEaTBCLEVBQWEzRCxFQUFZeDNCLEtBQVN3M0IsRUFBWXgzQixNQVVsRCxPQVJBbTdCLEdBQVU5MUIsS0FBS3NDLEdBQ2ZzVyxFQUFXNWEsV0FBVyxXQUNmODNCLEVBQVV6RCxVQUFXckwsRUFBTW5zQixlQUFlRixJQUFTaUQsRUFBWW9wQixFQUFNcnNCLEtBRXhFMkgsRUFBRzBrQixFQUFNcnNCLE1BSU4sV0FDTCtFLEVBQVlvMkIsRUFBV3h6QixLQTRCN0IsSUFBSXl6QixJQUFjN1MsRUFBYTZTLGNBQzNCQyxHQUFZOVMsRUFBYThTLFlBQ3pCekgsR0FBdUMsT0FBaEJ3SCxJQUF1QyxPQUFmQyxHQUN6Q3o0QixFQUNBLFNBQTZCckUsR0FDN0IsTUFBT0EsR0FBU08sUUFBUSxRQUFTczhCLElBQWF0OEIsUUFBUSxNQUFPdThCLEtBRW5FcE4sR0FBa0IsZUFDbEJHLEdBQXVCLGFBb0MzQixPQWxDQTdoQixHQUFRd3FCLGlCQUFtQjdxQixFQUFtQixTQUEwQmtiLEVBQVVrVSxHQUNoRixHQUFJblcsR0FBV2lDLEVBQVMzYSxLQUFLLGVBRXpCbE4sSUFBUSs3QixHQUNWblcsRUFBV0EsRUFBUy9kLE9BQU9rMEIsR0FFM0JuVyxFQUFTOWYsS0FBS2kyQixHQUdoQmxVLEVBQVMzYSxLQUFLLFdBQVkwWSxJQUN4QnhpQixFQUVKNEosRUFBUXVxQixrQkFBb0I1cUIsRUFBbUIsU0FBMkJrYixHQUN4RXdDLEVBQWF4QyxFQUFVLGVBQ3JCemtCLEVBRUo0SixFQUFROGUsZUFBaUJuZixFQUFtQixTQUF3QmtiLEVBQVU5YSxFQUFPaXZCLEVBQVVDLEdBQzdGLEdBQUloSCxHQUFXK0csRUFBWUMsRUFBYSwwQkFBNEIsZ0JBQW1CLFFBQ3ZGcFUsR0FBUzNhLEtBQUsrbkIsRUFBVWxvQixJQUN0QjNKLEVBRUo0SixFQUFROGQsZ0JBQWtCbmUsRUFBbUIsU0FBeUJrYixFQUFVbVUsR0FDOUUzUixFQUFheEMsRUFBVW1VLEVBQVcsbUJBQXFCLGFBQ3JENTRCLEVBRUo0SixFQUFRMm1CLGdCQUFrQixTQUFTbE8sRUFBZXlXLEdBQ2hELEdBQUk3RixHQUFVLEVBS2QsT0FKSTFwQixLQUNGMHBCLEVBQVUsS0FBTzVRLEdBQWlCLElBQU0sS0FDcEN5VyxJQUFTN0YsR0FBVzZGLEVBQVUsTUFFN0JyK0IsRUFBTzRLLFNBQVMwekIsY0FBYzlGLElBR2hDcnBCLElBcXVEWCxRQUFTcXNCLElBQWErQyxFQUFVQyxHQUM5QnpyQixLQUFLcW9CLGNBQWdCbUQsRUFDckJ4ckIsS0FBS29vQixhQUFlcUQsRUFZdEIsUUFBU2xPLElBQW1CdGlCLEdBQzFCLE1BQU9BLEdBQ0p0TSxRQUFRb3ZCLEdBQWUsSUFDdkJwdkIsUUFBUSs4QixHQUFzQnZxQixJQStEbkMsUUFBUzhvQixJQUFnQjBCLEVBQU1DLEdBQzdCLEdBQUlDLEdBQVMsR0FDVEMsRUFBVUgsRUFBS3YzQixNQUFNLE9BQ3JCMjNCLEVBQVVILEVBQUt4M0IsTUFBTSxNQUV6QjQzQixHQUNBLElBQUssR0FBSS85QixHQUFJLEVBQUdBLEVBQUk2OUIsRUFBUS84QixPQUFRZCxJQUFLLENBRXZDLElBQUssR0FERGcrQixHQUFRSCxFQUFRNzlCLEdBQ1hrRCxFQUFJLEVBQUdBLEVBQUk0NkIsRUFBUWg5QixPQUFRb0MsSUFDbEMsR0FBSTg2QixJQUFVRixFQUFRNTZCLEdBQUksUUFBUzY2QixFQUVyQ0gsS0FBV0EsRUFBTzk4QixPQUFTLEVBQUksSUFBTSxJQUFNazlCLEVBRTdDLE1BQU9KLEdBR1QsUUFBU25JLElBQWV3SSxHQUN0QkEsRUFBVTU4QixHQUFPNDhCLEVBQ2pCLElBQUlqK0IsR0FBSWkrQixFQUFRbjlCLE1BRWhCLElBQUlkLEdBQUssRUFDUCxNQUFPaStCLEVBR1QsTUFBT2orQixLQUFLLENBQ1YsR0FBSTZGLEdBQU9vNEIsRUFBUWorQixJQUNmNkYsRUFBSzJGLFdBQWE2a0IsSUFDbEJ4cUIsRUFBSzJGLFdBQWFDLElBQTRDLEtBQTFCNUYsRUFBSzRvQixVQUFVaFosU0FDbEQ3TyxHQUFPN0UsS0FBS2s4QixFQUFTaitCLEVBQUcsR0FHL0IsTUFBT2krQixHQU9ULFFBQVM1VSxJQUF3QmhYLEVBQVk2ckIsR0FDM0MsR0FBSUEsR0FBUzk4QixFQUFTODhCLEdBQVEsTUFBT0EsRUFDckMsSUFBSTk4QixFQUFTaVIsR0FBYSxDQUN4QixHQUFJMVIsR0FBUXc5QixHQUFVNXBCLEtBQUtsQyxFQUMzQixJQUFJMVIsRUFBTyxNQUFPQSxHQUFNLElBaUI1QixRQUFTeTlCLE1BQ1AsR0FBSXRQLE1BQ0F1UCxHQUFVLENBT2R0c0IsTUFBS3NOLElBQU0sU0FBU3JTLEdBQ2xCLE1BQU84aEIsR0FBWWh0QixlQUFla0wsSUFXcEMrRSxLQUFLdXNCLFNBQVcsU0FBU3R4QixFQUFNdkYsR0FDN0JtSSxHQUF3QjVDLEVBQU0sY0FDMUI3TixFQUFTNk4sR0FDWGxKLEVBQU9nckIsRUFBYTloQixHQUVwQjhoQixFQUFZOWhCLEdBQVF2RixHQWN4QnNLLEtBQUt3c0IsYUFBZSxXQUNsQkYsR0FBVSxHQUladHNCLEtBQUs4SSxNQUFRLFlBQWEsVUFBVyxTQUFTeUMsRUFBV3FDLEdBNkd2RCxRQUFTNmUsR0FBYzNmLEVBQVE0ZixFQUFZelIsRUFBVWhnQixHQUNuRCxJQUFNNlIsSUFBVTFmLEVBQVMwZixFQUFPMlgsUUFDOUIsS0FBTTcyQixHQUFPLGVBQWUsUUFDMUIsbUZBQ0FxTixFQUFNeXhCLEVBR1Y1ZixHQUFPMlgsT0FBT2lJLEdBQWN6UixFQXZGOUIsTUFBTyxVQUFxQjBSLEVBQVk3ZixFQUFROGYsRUFBT1QsR0FRckQsR0FBSWxSLEdBQVVyc0IsRUFBTzhHLEVBQWFnM0IsQ0FNbEMsSUFMQUUsR0FBa0IsSUFBVkEsRUFDSlQsR0FBUzk4QixFQUFTODhCLEtBQ3BCTyxFQUFhUCxHQUdYOThCLEVBQVNzOUIsR0FBYSxDQUV4QixLQURBLzlCLEVBQVErOUIsRUFBVy85QixNQUFNdzlCLEtBRXZCLEtBQU1TLElBQWtCLFVBQ3RCLHVGQUNrREYsRUFTdEQsSUFQQWozQixFQUFjOUcsRUFBTSxHQUNwQjg5QixFQUFhQSxHQUFjOTlCLEVBQU0sS0FDakMrOUIsRUFBYTVQLEVBQVlodEIsZUFBZTJGLEdBQ2xDcW5CLEVBQVlybkIsR0FDWm9JLEdBQU9nUCxFQUFPMlgsT0FBUS91QixHQUFhLEtBQ2hDNDJCLEVBQVV4dUIsR0FBTzhQLEVBQVNsWSxHQUFhLE9BQVFELEtBR3RELEtBQU1vM0IsSUFBa0IsVUFDdEIsd0RBQTJEbjNCLEVBRy9EaUksSUFBWWd2QixFQUFZajNCLEdBQWEsR0FHdkMsR0FBSWszQixFQUFPLENBV1QsR0FBSUUsSUFBdUIxOUIsR0FBUXU5QixHQUNqQ0EsRUFBV0EsRUFBVzU5QixPQUFTLEdBQUs0OUIsR0FBWWo0QixTQU9sRCxPQU5BdW1CLEdBQVcxckIsT0FBT2dELE9BQU91NkIsR0FBdUIsTUFFNUNKLEdBQ0ZELEVBQWMzZixFQUFRNGYsRUFBWXpSLEVBQVV2bEIsR0FBZWkzQixFQUFXMXhCLE1BR2pFbEosRUFBTyxXQUNaLEdBQUlvWixHQUFTSSxFQUFVclAsT0FBT3l3QixFQUFZMVIsRUFBVW5PLEVBQVFwWCxFQVE1RCxPQVBJeVYsS0FBVzhQLElBQWE3dEIsRUFBUytkLElBQVdyYixFQUFXcWIsTUFDekQ4UCxFQUFXOVAsRUFDUHVoQixHQUVGRCxFQUFjM2YsRUFBUTRmLEVBQVl6UixFQUFVdmxCLEdBQWVpM0IsRUFBVzF4QixPQUduRWdnQixJQUVQQSxTQUFVQSxFQUNWeVIsV0FBWUEsSUFVaEIsTUFOQXpSLEdBQVcxUCxFQUFVUixZQUFZNGhCLEVBQVk3ZixFQUFRcFgsR0FFakRnM0IsR0FDRkQsRUFBYzNmLEVBQVE0ZixFQUFZelIsRUFBVXZsQixHQUFlaTNCLEVBQVcxeEIsTUFHakVnZ0IsS0F5Q2IsUUFBUzhSLE1BQ1Avc0IsS0FBSzhJLE1BQVEsVUFBVyxTQUFTN2IsR0FDL0IsTUFBT3FDLElBQU9yQyxFQUFPNEssWUFVekIsUUFBU20xQixNQUNQaHRCLEtBQUs4SSxNQUFRLFlBQWEsYUFBYyxTQUFTK0osRUFBVy9FLEdBVTFELFFBQVNtZixLQUNQQyxFQUFTQyxFQUFJRCxPQVZmLEdBQUlDLEdBQU10YSxFQUFVLEdBQ2hCcWEsRUFBU0MsR0FBT0EsRUFBSUQsTUFZeEIsT0FWQXJhLEdBQVUvTCxHQUFHLG1CQUFvQm1tQixHQUVqQ25mLEVBQVdrVCxJQUFJLFdBQVksV0FDekJuTyxFQUFVVCxJQUFJLG1CQUFvQjZhLEtBTzdCLFdBQ0wsTUFBT0MsTUFpRGIsUUFBU0UsTUFDUHB0QixLQUFLOEksTUFBUSxPQUFRLFNBQVNnSCxHQUM1QixNQUFPLFVBQVN1ZCxFQUFXQyxHQUN6QnhkLEVBQUt2VSxNQUFNN0QsTUFBTW9ZLEVBQU0zaEIsY0FzQzdCLFFBQVNvL0IsSUFBZUMsR0FDdEIsTUFBSXBnQyxHQUFTb2dDLEdBQ0psOEIsRUFBT2s4QixHQUFLQSxFQUFFQyxjQUFnQjMxQixFQUFPMDFCLEdBRXZDQSxFQUtULFFBQVNFLE1BaUJQMXRCLEtBQUs4SSxLQUFPLFdBQ1YsTUFBTyxVQUEyQjZrQixHQUNoQyxJQUFLQSxFQUFRLE1BQU8sRUFDcEIsSUFBSXh6QixLQVlKLE9BWEFoSyxHQUFjdzlCLEVBQVEsU0FBU245QixFQUFPWCxHQUN0QixPQUFWVyxHQUFrQnNDLEVBQVl0QyxJQUFVVixFQUFXVSxLQUNuRHBCLEdBQVFvQixHQUNWZCxFQUFRYyxFQUFPLFNBQVNnOUIsR0FDdEJyekIsRUFBTWpGLEtBQUttRixHQUFleEssR0FBUSxJQUFNd0ssR0FBZWt6QixHQUFlQyxPQUd4RXJ6QixFQUFNakYsS0FBS21GLEdBQWV4SyxHQUFPLElBQU13SyxHQUFla3pCLEdBQWUvOEIsUUFJbEUySixFQUFNRyxLQUFLLE9BTXhCLFFBQVNzekIsTUE2Q1A1dEIsS0FBSzhJLEtBQU8sV0FDVixNQUFPLFVBQW1DNmtCLEdBTXhDLFFBQVNFLEdBQVVDLEVBQWE5eUIsRUFBUSt5QixHQUNsQixPQUFoQkQsR0FBd0JoN0IsRUFBWWc3QixLQUNwQzErQixHQUFRMCtCLEdBQ1ZwK0IsRUFBUW8rQixFQUFhLFNBQVN0OUIsRUFBTzNCLEdBQ25DZy9CLEVBQVVyOUIsRUFBT3dLLEVBQVMsS0FBTzVOLEVBQVNvRCxHQUFTM0IsRUFBUSxJQUFNLE9BRTFEekIsRUFBUzBnQyxLQUFpQng4QixFQUFPdzhCLEdBQzFDMzlCLEVBQWMyOUIsRUFBYSxTQUFTdDlCLEVBQU9YLEdBQ3pDZytCLEVBQVVyOUIsRUFBT3dLLEdBQ1oreUIsRUFBVyxHQUFLLEtBQ2pCbCtCLEdBQ0NrK0IsRUFBVyxHQUFLLFFBR3ZCNXpCLEVBQU1qRixLQUFLbUYsR0FBZVcsR0FBVSxJQUFNWCxHQUFla3pCLEdBQWVPLE1BbkI1RSxJQUFLSCxFQUFRLE1BQU8sRUFDcEIsSUFBSXh6QixLQUVKLE9BREEwekIsR0FBVUYsRUFBUSxJQUFJLEdBQ2Z4ekIsRUFBTUcsS0FBSyxPQXVCeEIsUUFBUzB6QixJQUE2QjF4QixFQUFNMnhCLEdBQzFDLEdBQUk1K0IsRUFBU2lOLEdBQU8sQ0FFbEIsR0FBSTR4QixHQUFXNXhCLEVBQUszTixRQUFRdy9CLEdBQXdCLElBQUl6cUIsTUFFeEQsSUFBSXdxQixFQUFVLENBQ1osR0FBSUUsR0FBY0gsRUFBUSxnQkFDdEJJLEVBQXFCRCxHQUEwRCxJQUExQ0EsRUFBWXo1QixRQUFRMjVCLEdBRTdELElBQUlELEdBQXNCRSxHQUFXTCxHQUNuQyxJQUNFNXhCLEVBQU9wRSxFQUFTZzJCLEdBQ2hCLE1BQU92MEIsR0FDUCxJQUFLMDBCLEVBQ0gsTUFBTy94QixFQUVULE1BQU1reUIsSUFBWSxVQUFXLHdFQUNQbHlCLEVBQU0zQyxLQU1wQyxNQUFPMkMsR0FHVCxRQUFTaXlCLElBQVdyOEIsR0FDaEIsR0FBSXU4QixHQUFZdjhCLEVBQUl0RCxNQUFNOC9CLEdBQzFCLE9BQU9ELElBQWFFLEdBQVVGLEVBQVUsSUFBSTc2QixLQUFLMUIsR0FTckQsUUFBUzA4QixJQUFhWCxHQUdwQixRQUFTWSxHQUFhaC9CLEVBQUsrSCxHQUNyQi9ILElBQ0ZxVCxFQUFPclQsR0FBT3FULEVBQU9yVCxHQUFPcVQsRUFBT3JULEdBQU8sS0FBTytILEVBQU1BLEdBSjNELEdBQTBCM0osR0FBdEJpVixFQUFTbk0sSUFtQmIsT0FYSTFILEdBQVM0K0IsR0FDWHYrQixFQUFRdStCLEVBQVE3NUIsTUFBTSxNQUFPLFNBQVMwNkIsR0FDcEM3Z0MsRUFBSTZnQyxFQUFLbjZCLFFBQVEsS0FDakJrNkIsRUFBYXQ2QixHQUFVbVAsR0FBS29yQixFQUFLeGUsT0FBTyxFQUFHcmlCLEtBQU15VixHQUFLb3JCLEVBQUt4ZSxPQUFPcmlCLEVBQUksT0FFL0RiLEVBQVM2Z0MsSUFDbEJ2K0IsRUFBUXUrQixFQUFTLFNBQVNjLEVBQVdDLEdBQ25DSCxFQUFhdDZCLEdBQVV5NkIsR0FBWXRyQixHQUFLcXJCLE1BSXJDN3JCLEVBZ0JULFFBQVMrckIsSUFBY2hCLEdBQ3JCLEdBQUlpQixFQUVKLE9BQU8sVUFBU2owQixHQUdkLEdBRktpMEIsSUFBWUEsRUFBY04sR0FBYVgsSUFFeENoekIsRUFBTSxDQUNSLEdBQUl6SyxHQUFRMCtCLEVBQVczNkIsR0FBVTBHLEdBSWpDLFlBSGN4RixLQUFWakYsSUFDRkEsRUFBUSxNQUVIQSxFQUdULE1BQU8wK0IsSUFnQlgsUUFBU0MsSUFBYzd5QixFQUFNMnhCLEVBQVNtQixFQUFRQyxHQUM1QyxNQUFJdi9CLEdBQVd1L0IsR0FDTkEsRUFBSS95QixFQUFNMnhCLEVBQVNtQixJQUc1QjEvQixFQUFRMi9CLEVBQUssU0FBUzczQixHQUNwQjhFLEVBQU85RSxFQUFHOEUsRUFBTTJ4QixFQUFTbUIsS0FHcEI5eUIsR0FJVCxRQUFTZ3pCLElBQVVGLEdBQ2pCLE1BQU8sTUFBT0EsR0FBVUEsRUFBUyxJQVluQyxRQUFTRyxNQXNEUCxHQUFJQyxHQUFXeHZCLEtBQUt3dkIsVUFFbEJDLG1CQUFvQnpCLElBR3BCMEIsa0JBQW1CLFNBQVNDLEdBQzFCLE9BQU92aUMsRUFBU3VpQyxJQUFPdjhCLEVBQU91OEIsSUFBT3I4QixFQUFPcThCLElBQU90OEIsRUFBV3M4QixHQUFpQkEsRUFBWjczQixFQUFPNjNCLEtBSTVFMUIsU0FDRTJCLFFBQ0VDLE9BQVUscUNBRVpuUSxLQUFRL2UsR0FBWW12QixJQUNwQjViLElBQVF2VCxHQUFZbXZCLElBQ3BCQyxNQUFRcHZCLEdBQVltdkIsS0FHdEJFLGVBQWdCLGFBQ2hCQyxlQUFnQixlQUVoQkMsZ0JBQWlCLHVCQUVqQkMsbUJBQW9CLFlBR2xCQyxHQUFnQixDQW9CcEJwd0IsTUFBS293QixjQUFnQixTQUFTNS9CLEdBQzVCLE1BQUlsRCxHQUFVa0QsSUFDWjQvQixJQUFrQjUvQixFQUNYd1AsTUFFRm93QixFQWdCVCxJQUFJQyxHQUF1QnJ3QixLQUFLc3dCLGVBRWhDdHdCLE1BQUs4SSxNQUFRLFdBQVksZUFBZ0IsaUJBQWtCLGdCQUFpQixhQUFjLEtBQU0sWUFBYSxPQUN6RyxTQUFTeW5CLEVBQVVDLEVBQWNDLEVBQWdCamMsRUFBZTFHLEVBQVk0aUIsRUFBSW5sQixFQUFXaU4sR0FzakI3RixRQUFTbVksR0FBTUMsR0ErQ2IsUUFBU0MsR0FBa0JDLEVBQVNSLEdBQ2xDLElBQUssR0FBSXJpQyxHQUFJLEVBQUdpRCxFQUFLby9CLEVBQWF2aEMsT0FBUWQsRUFBSWlELEdBQUssQ0FDakQsR0FBSTYvQixHQUFTVCxFQUFhcmlDLEtBQ3RCK2lDLEVBQVdWLEVBQWFyaUMsSUFFNUI2aUMsR0FBVUEsRUFBUXI5QixLQUFLczlCLEVBQVFDLEdBS2pDLE1BRkFWLEdBQWF2aEMsT0FBUyxFQUVmK2hDLEVBR1QsUUFBUzlnQixLQUNQdWdCLEVBQVNoZiw2QkFBNkIvZSxHQUd4QyxRQUFTeStCLEdBQWlCaEQsRUFBUzlnQyxHQUNqQyxHQUFJK2pDLEdBQWVDLElBYW5CLE9BWEF6aEMsR0FBUXUrQixFQUFTLFNBQVNtRCxFQUFVQyxHQUM5QnZoQyxFQUFXc2hDLEdBRVEsT0FEckJGLEVBQWdCRSxFQUFTamtDLE1BRXZCZ2tDLEVBQWlCRSxHQUFVSCxHQUc3QkMsRUFBaUJFLEdBQVVELElBSXhCRCxFQTRCVCxRQUFTRyxHQUFjbmtDLEdBQ3JCLEdBQUk4Z0MsR0FBVTlnQyxFQUFPOGdDLFFBQ2pCc0QsRUFBVXBDLEdBQWNoaUMsRUFBT21QLEtBQU0yeUIsR0FBY2hCLE9BQVV4NEIsR0FBV3RJLEVBQU91aUMsaUJBZ0JuRixPQWJJNThCLEdBQVl5K0IsSUFDZDdoQyxFQUFRdStCLEVBQVMsU0FBU3o5QixFQUFPNmdDLEdBQ0wsaUJBQXRCOThCLEdBQVU4OEIsVUFDTHBELEdBQVFvRCxLQUtqQnYrQixFQUFZM0YsRUFBT3FrQyxtQkFBcUIxK0IsRUFBWTA4QixFQUFTZ0MsbUJBQy9EcmtDLEVBQU9xa0MsZ0JBQWtCaEMsRUFBU2dDLGlCQUk3QkMsRUFBUXRrQyxFQUFRb2tDLEdBQVM5OUIsS0FBS2c4QixFQUFtQkEsR0FHMUQsUUFBU0EsR0FBa0JpQyxHQUV6QixHQUFJQyxHQUFPNS9CLEtBQVcyL0IsRUFHdEIsT0FGQUMsR0FBS3IxQixLQUFPNnlCLEdBQWN1QyxFQUFTcDFCLEtBQU1vMUIsRUFBU3pELFFBQVN5RCxFQUFTdEMsT0FDMUNqaUMsRUFBT3NpQyxtQkFDekJILEdBQVVvQyxFQUFTdEMsUUFDdkJ1QyxFQUNBakIsRUFBR2tCLE9BQU9ELEdBcEloQixJQUFLdmtDLEVBQVN3akMsR0FDWixLQUFNaGpDLEdBQU8sU0FBUyxTQUFVLCtEQUFnRWdqQyxFQUdsRyxLQUFLdmhDLEVBQVNtcEIsRUFBS2huQixRQUFRby9CLEVBQWN2Z0IsTUFDdkMsS0FBTXppQixHQUFPLFNBQVMsU0FBVSwyRkFBNEZnakMsRUFBY3ZnQixJQUc1SSxJQUFJbGpCLEdBQVM0RSxHQUNYbU4sT0FBUSxNQUNSd3dCLGlCQUFrQkYsRUFBU0UsaUJBQzNCRCxrQkFBbUJELEVBQVNDLGtCQUM1QlMsZ0JBQWlCVixFQUFTVSxnQkFDMUJDLG1CQUFvQlgsRUFBU1csb0JBQzVCUyxFQUVIempDLEdBQU84Z0MsUUErRFAsU0FBc0I5Z0MsR0FDcEIsR0FFSTBrQyxHQUFlQyxFQUF3QkMsRUFGdkNDLEVBQWF4QyxFQUFTdkIsUUFDdEJnRSxFQUFhbGdDLEtBQVc1RSxFQUFPOGdDLFFBR25DK0QsR0FBYWpnQyxLQUFXaWdDLEVBQVdwQyxPQUFRb0MsRUFBV3o5QixHQUFVcEgsRUFBTytSLFNBR3ZFZ3pCLEdBQ0EsSUFBS0wsSUFBaUJHLEdBQVksQ0FDaENGLEVBQXlCdjlCLEdBQVVzOUIsRUFFbkMsS0FBS0UsSUFBaUJFLEdBQ3BCLEdBQUkxOUIsR0FBVXc5QixLQUFtQkQsRUFDL0IsUUFBU0ksRUFJYkQsR0FBV0osR0FBaUJHLEVBQVdILEdBSXpDLE1BQU9aLEdBQWlCZ0IsRUFBWXR4QixHQUFZeFQsS0FyRnBCeWpDLEdBQzlCempDLEVBQU8rUixPQUFTaXpCLEdBQVVobEMsRUFBTytSLFFBQ2pDL1IsRUFBTytpQyxnQkFBa0I3Z0MsRUFBU2xDLEVBQU8raUMsaUJBQ3JDM2tCLEVBQVVyTyxJQUFJL1AsRUFBTytpQyxpQkFBbUIvaUMsRUFBTytpQyxnQkFFbkRLLEVBQVMvZSw4QkFFVCxJQUFJNGdCLE1BQ0FDLEtBQ0F2QixFQUFVSixFQUFHNEIsUUFBUW5sQyxFQWlCekIsT0FkQXVDLEdBQVE2aUMsRUFBc0IsU0FBU0MsSUFDakNBLEVBQVlDLFNBQVdELEVBQVlFLGVBQ3JDTixFQUFvQnYyQixRQUFRMjJCLEVBQVlDLFFBQVNELEVBQVlFLGVBRTNERixFQUFZZCxVQUFZYyxFQUFZRyxnQkFDdENOLEVBQXFCbjlCLEtBQUtzOUIsRUFBWWQsU0FBVWMsRUFBWUcsaUJBSWhFN0IsRUFBVUQsRUFBa0JDLEVBQVNzQixHQUNyQ3RCLEVBQVVBLEVBQVFyOUIsS0FBSzY5QixHQUN2QlIsRUFBVUQsRUFBa0JDLEVBQVN1QixHQUNyQ3ZCLEVBQVVBLEVBQVE4QixRQUFRNWlCLEdBdVE1QixRQUFTeWhCLEdBQVF0a0MsRUFBUW9rQyxHQTJFdkIsUUFBU3NCLEdBQW9CQyxHQUMzQixHQUFJQSxFQUFlLENBQ2pCLEdBQUlDLEtBZ0JKLE9BZkFyakMsR0FBUW9qQyxFQUFlLFNBQVN0ckIsRUFBYzNYLEdBQzVDa2pDLEVBQWNsakMsR0FBTyxTQUFTNFgsR0FTNUIsUUFBU3VyQixLQUNQeHJCLEVBQWFDLEdBVFgyb0IsRUFDRnRpQixFQUFXbWxCLFlBQVlELEdBQ2RsbEIsRUFBV29sQixRQUNwQkYsSUFFQWxsQixFQUFXelIsT0FBTzIyQixNQVFqQkQsR0FXWCxRQUFTSSxHQUFLL0QsRUFBUXNDLEVBQVUwQixFQUFlQyxFQUFZQyxHQVV6RCxRQUFTQyxLQUNQQyxFQUFlOUIsRUFBVXRDLEVBQVFnRSxFQUFlQyxFQUFZQyxHQVYxRC9tQixJQUNFK2lCLEdBQVVGLEdBQ1o3aUIsRUFBTTJILElBQUk3RCxHQUFNK2UsRUFBUXNDLEVBQVU5QyxHQUFhd0UsR0FBZ0JDLEVBQVlDLElBRzNFL21CLEVBQU00SCxPQUFPOUQsSUFRYitmLEVBQ0Z0aUIsRUFBV21sQixZQUFZTSxJQUV2QkEsSUFDS3psQixFQUFXb2xCLFNBQVNwbEIsRUFBV3pSLFVBUXhDLFFBQVNtM0IsR0FBZTlCLEVBQVV0QyxFQUFRbkIsRUFBU29GLEVBQVlDLEdBRTdEbEUsRUFBU0EsSUFBVyxFQUFJQSxFQUFTLEdBRWhDRSxHQUFVRixHQUFVcUUsRUFBU25CLFFBQVVtQixFQUFTN0IsU0FDL0N0MUIsS0FBTW8xQixFQUNOdEMsT0FBUUEsRUFDUm5CLFFBQVNnQixHQUFjaEIsR0FDdkI5Z0MsT0FBUUEsRUFDUmttQyxXQUFZQSxFQUNaQyxVQUFXQSxJQUlmLFFBQVNJLEdBQXlCdm9CLEdBQ2hDcW9CLEVBQWVyb0IsRUFBTzdPLEtBQU02TyxFQUFPaWtCLE9BQVF6dUIsR0FBWXdLLEVBQU84aUIsV0FBWTlpQixFQUFPa29CLFdBQVlsb0IsRUFBT21vQixXQUd0RyxRQUFTSyxLQUNQLEdBQUlsWSxHQUFNa1YsRUFBTWlELGdCQUFnQmovQixRQUFReEgsSUFDM0IsSUFBVHN1QixHQUFZa1YsRUFBTWlELGdCQUFnQi8rQixPQUFPNG1CLEVBQUssR0FySnBELEdBRUlsUCxHQUNBc25CLEVBSEFKLEVBQVcvQyxFQUFHbmUsUUFDZHVlLEVBQVUyQyxFQUFTM0MsUUFHbkJtQixFQUFhOWtDLEVBQU84Z0MsUUFDcEI2RixFQUF1QyxVQUE3QnYvQixHQUFVcEgsRUFBTytSLFFBQzNCbVIsRUFBTWxqQixFQUFPa2pCLEdBb0RqQixJQWxESXlqQixFQUdGempCLEVBQU1tSSxFQUFLdWIsc0JBQXNCMWpCLEdBQ3ZCaGhCLEVBQVNnaEIsS0FFbkJBLEVBQU1tSSxFQUFLaG5CLFFBQVE2ZSxJQUdyQkEsRUFBTTJqQixFQUFTM2pCLEVBQUtsakIsRUFBTytpQyxnQkFBZ0IvaUMsRUFBT3dnQyxTQUU5Q21HLElBRUZ6akIsRUFBTTRqQixFQUEyQjVqQixFQUFLbGpCLEVBQU9nakMscUJBRy9DUSxFQUFNaUQsZ0JBQWdCMStCLEtBQUsvSCxHQUMzQjJqQyxFQUFRcjlCLEtBQUtrZ0MsRUFBa0JBLElBRTFCeG1DLEVBQU9vZixRQUFTaWpCLEVBQVNqakIsUUFBMkIsSUFBakJwZixFQUFPb2YsT0FDeEIsUUFBbEJwZixFQUFPK1IsUUFBc0MsVUFBbEIvUixFQUFPK1IsU0FDckNxTixFQUFRbmYsRUFBU0QsRUFBT29mLE9BQVNwZixFQUFPb2YsTUFDbENuZixFQUEwQixFQUFXbWYsT0FDbEIsRUFBV0EsTUFDNUIybkIsR0FHTjNuQixJQUNGc25CLEVBQWF0bkIsRUFBTXJQLElBQUltVCxHQUNuQi9pQixFQUFVdW1DLEdBQ1JyZ0MsRUFBY3FnQyxHQUVoQkEsRUFBV3BnQyxLQUFLaWdDLEVBQTBCQSxHQUd0Q3RrQyxHQUFReWtDLEdBQ1ZMLEVBQWVLLEVBQVcsR0FBSUEsRUFBVyxHQUFJbHpCLEdBQVlrekIsRUFBVyxJQUFLQSxFQUFXLEdBQUlBLEVBQVcsSUFFbkdMLEVBQWVLLEVBQVksT0FBUyxLQUFNLFlBSzlDdG5CLEVBQU0ySCxJQUFJN0QsRUFBS3lnQixJQU9maCtCLEVBQVkrZ0MsR0FBYSxDQUMzQixHQUFJTSxHQUFZQyxHQUFnQmpuQyxFQUFPa2pCLEtBQ2pDb2dCLElBQWlCdGpDLEVBQU82aUMsZ0JBQWtCUixFQUFTUSxvQkFDbkR2NkIsRUFDRjArQixLQUNGbEMsRUFBWTlrQyxFQUFPOGlDLGdCQUFrQlQsRUFBU1MsZ0JBQW1Ca0UsR0FHbkUzRCxFQUFhcmpDLEVBQU8rUixPQUFRbVIsRUFBS2toQixFQUFTNEIsRUFBTWxCLEVBQVk5a0MsRUFBT2tuQyxRQUMvRGxuQyxFQUFPcWtDLGdCQUFpQnJrQyxFQUFPbW5DLGFBQy9CekIsRUFBb0IxbEMsRUFBTzJsQyxlQUMzQkQsRUFBb0IxbEMsRUFBT29uQyxzQkFHakMsTUFBT3pELEdBa0ZULFFBQVNrRCxHQUFTM2pCLEVBQUtta0IsR0FJckIsTUFISUEsR0FBaUJ6bEMsT0FBUyxJQUM1QnNoQixLQUErQixJQUF0QkEsRUFBSTFiLFFBQVEsS0FBZSxJQUFNLEtBQU82L0IsR0FFNUNua0IsRUFHVCxRQUFTNGpCLEdBQTJCNWpCLEVBQUt4Z0IsR0FDdkMsR0FBSSwwQkFBMEIrRCxLQUFLeWMsR0FFakMsS0FBTW1lLElBQVksV0FBWSw2Q0FBOENuZSxFQUk5RSxJQUR5QixHQUFJM2UsUUFBTyxPQUFTN0IsRUFBTSxLQUM1QitELEtBQUt5YyxHQUUxQixLQUFNbWUsSUFBWSxXQUFZLHNEQUF1RDMrQixFQUFLd2dCLEVBTTVGLE9BRkFBLE1BQStCLElBQXRCQSxFQUFJMWIsUUFBUSxLQUFlLElBQU0sS0FBTzlFLEVBQU0saUJBcGhDekQsR0FBSXFrQyxHQUFlMWYsRUFBYyxRQUtqQ2diLEdBQVNVLGdCQUFrQjdnQyxFQUFTbWdDLEVBQVNVLGlCQUMzQzNrQixFQUFVck8sSUFBSXN5QixFQUFTVSxpQkFBbUJWLEVBQVNVLGVBT3JELElBQUlxQyxLQXN6QkosT0FwekJBN2lDLEdBQVEyZ0MsRUFBc0IsU0FBU29FLEdBQ3JDbEMsRUFBcUIxMkIsUUFBUXhNLEVBQVNvbEMsR0FDaENscEIsRUFBVXJPLElBQUl1M0IsR0FBc0JscEIsRUFBVXJQLE9BQU91NEIsTUE2cUI3RDlELEVBQU1pRCxtQkF3SU4sU0FBNEIxdEIsR0FDMUJ4VyxFQUFRdkIsVUFBVyxTQUFTOE0sR0FDMUIwMUIsRUFBTTExQixHQUFRLFNBQVNvVixFQUFLbGpCLEdBQzFCLE1BQU93akMsR0FBTTUrQixLQUFXNUUsT0FDdEIrUixPQUFRakUsRUFDUm9WLElBQUtBLFNBL0RNLE1BQU8sU0FBVSxPQUFRLFNBc0U1QyxTQUFvQ3BWLEdBQ2xDdkwsRUFBUXZCLFVBQVcsU0FBUzhNLEdBQzFCMDFCLEVBQU0xMUIsR0FBUSxTQUFTb1YsRUFBSy9ULEVBQU1uUCxHQUNoQyxNQUFPd2pDLEdBQU01K0IsS0FBVzVFLE9BQ3RCK1IsT0FBUWpFLEVBQ1JvVixJQUFLQSxFQUNML1QsS0FBTUEsU0FwQ2EsT0FBUSxNQUFPLFNBWTFDcTBCLEVBQU1uQixTQUFXQSxFQUdWbUIsSUE4T1gsUUFBUytELE1BQ1AxMEIsS0FBSzhJLEtBQU8sV0FDVixNQUFPLFlBQ0wsTUFBTyxJQUFJN2IsR0FBTzBuQyxpQkF1QnhCLFFBQVNDLE1BQ1A1MEIsS0FBSzhJLE1BQVEsV0FBWSxrQkFBbUIsWUFBYSxjQUFlLFNBQVN5bkIsRUFBVXNFLEVBQWlCaGlCLEVBQVdpaUIsR0FDckgsTUFBT0MsSUFBa0J4RSxFQUFVdUUsRUFBYXZFLEVBQVNoZSxNQUFPc2lCLEVBQWlCaGlCLEVBQVUsTUFJL0YsUUFBU2tpQixJQUFrQnhFLEVBQVV5RSxFQUFXQyxFQUFlQyxFQUFXQyxHQWdJeEUsUUFBU0MsR0FBUy9rQixFQUFLZ2xCLEVBQWNsQyxHQUNuQzlpQixFQUFNQSxFQUFJMWhCLFFBQVEsZ0JBQWlCMG1DLEVBSW5DLElBQUlDLEdBQVNILEVBQVk3eUIsY0FBYyxVQUFXb1AsRUFBVyxJQTZCN0QsT0E1QkE0akIsR0FBT2wvQixLQUFPLGtCQUNkay9CLEVBQU9qa0MsSUFBTWdmLEVBQ2JpbEIsRUFBT0MsT0FBUSxFQUVmN2pCLEVBQVcsU0FBU2pLLEdBQ2xCNnRCLEVBQU8zd0Isb0JBQW9CLE9BQVErTSxHQUNuQzRqQixFQUFPM3dCLG9CQUFvQixRQUFTK00sR0FDcEN5akIsRUFBWUssS0FBS2x2QixZQUFZZ3ZCLEdBQzdCQSxFQUFTLElBQ1QsSUFBSWxHLElBQVUsRUFDVjlJLEVBQU8sU0FFUDdlLEtBQ2lCLFNBQWZBLEVBQU1yUixNQUFvQjgrQixFQUFVTyxVQUFVSixLQUNoRDV0QixHQUFVclIsS0FBTSxVQUVsQmt3QixFQUFPN2UsRUFBTXJSLEtBQ2JnNUIsRUFBd0IsVUFBZjNuQixFQUFNclIsS0FBbUIsSUFBTSxLQUd0Qys4QixHQUNGQSxFQUFLL0QsRUFBUTlJLElBSWpCZ1AsRUFBT3R1QixpQkFBaUIsT0FBUTBLLEdBQ2hDNGpCLEVBQU90dUIsaUJBQWlCLFFBQVMwSyxHQUNqQ3lqQixFQUFZSyxLQUFLbnpCLFlBQVlpekIsR0FDdEI1akIsRUFoS1QsTUFBTyxVQUFTeFMsRUFBUW1SLEVBQUtxUCxFQUFNaE8sRUFBVXVjLEVBQVNvRyxFQUFTN0MsRUFBaUI4QyxFQUFjeEIsRUFBZXlCLEdBMEczRyxRQUFTbUIsS0FDSEMsR0FDRkEsSUFFRUMsR0FDRkEsRUFBSUMsUUFJUixRQUFTQyxHQUFnQnBrQixFQUFVMGQsRUFBUXNDLEVBQVUwQixFQUFlQyxFQUFZQyxHQUUxRWhtQyxFQUFVbWxCLElBQ1p3aUIsRUFBY3ZpQixPQUFPRCxHQUV2QmtqQixFQUFZQyxFQUFNLEtBRWxCbGtCLEVBQVMwZCxFQUFRc0MsRUFBVTBCLEVBQWVDLEVBQVlDLEdBdkh4RCxHQUZBampCLEVBQU1BLEdBQU9rZ0IsRUFBU2xnQixNQUVJLFVBQXRCOWIsR0FBVTJLLEdBQ1osR0FBSW0yQixHQUFlSCxFQUFVYSxlQUFlMWxCLEdBQ3hDc2xCLEVBQVlQLEVBQVMva0IsRUFBS2dsQixFQUFjLFNBQVNqRyxFQUFROUksR0FFM0QsR0FBSW9MLEdBQXVCLE1BQVh0QyxHQUFtQjhGLEVBQVVjLFlBQVlYLEVBQ3pEUyxHQUFnQnBrQixFQUFVMGQsRUFBUXNDLEVBQVUsR0FBSXBMLEVBQU0sWUFDdEQ0TyxFQUFVZSxlQUFlWixTQUV0QixDQUVMLEdBQUlPLEdBQU1aLEVBQVU5MUIsRUFBUW1SLEVBRTVCdWxCLEdBQUlNLEtBQUtoM0IsRUFBUW1SLEdBQUssR0FDdEIzZ0IsRUFBUXUrQixFQUFTLFNBQVN6OUIsRUFBT1gsR0FDM0J2QyxFQUFVa0QsSUFDVm9sQyxFQUFJTyxpQkFBaUJ0bUMsRUFBS1csS0FJaENvbEMsRUFBSVEsT0FBUyxXQUNYLEdBQUkvQyxHQUFhdUMsRUFBSXZDLFlBQWMsR0FJL0IzQixFQUFZLFlBQWNrRSxHQUFPQSxFQUFJbEUsU0FBV2tFLEVBQUlTLGFBR3BEakgsRUFBd0IsT0FBZndHLEVBQUl4RyxPQUFrQixJQUFNd0csRUFBSXhHLE1BSzlCLEtBQVhBLElBQ0ZBLEVBQVNzQyxFQUFXLElBQW1DLFNBQTdCNEUsR0FBV2ptQixHQUFLa21CLFNBQXNCLElBQU0sR0FHeEVULEVBQWdCcGtCLEVBQ1owZCxFQUNBc0MsRUFDQWtFLEVBQUlZLHdCQUNKbkQsRUFDQSxZQUdOLElBQUlYLEdBQWUsV0FHakJvRCxFQUFnQnBrQixHQUFXLEVBQUcsS0FBTSxLQUFNLEdBQUksVUFHNUMra0IsRUFBaUIsV0FDbkJYLEVBQWdCcGtCLEdBQVcsRUFBRyxLQUFNLEtBQU0sR0FBSSxVQUc1Q2dsQixFQUFpQixXQUduQlosRUFBZ0Jwa0IsR0FBVyxFQUFHLEtBQU0sS0FBTSxHQUFJLFdBbUJoRCxJQWhCQWtrQixFQUFJZSxRQUFVakUsRUFDZGtELEVBQUlnQixRQUFVSCxFQUNkYixFQUFJaUIsVUFBWUgsRUFFaEJobkMsRUFBUW9qQyxFQUFlLFNBQVN0aUMsRUFBT1gsR0FDbkMrbEMsRUFBSTV1QixpQkFBaUJuWCxFQUFLVyxLQUc5QmQsRUFBUTZrQyxFQUFxQixTQUFTL2pDLEVBQU9YLEdBQzNDK2xDLEVBQUlrQixPQUFPOXZCLGlCQUFpQm5YLEVBQUtXLEtBRy9CZ2hDLElBQ0ZvRSxFQUFJcEUsaUJBQWtCLEdBR3BCOEMsRUFDRixJQUNFc0IsRUFBSXRCLGFBQWVBLEVBQ25CLE1BQU8zNkIsR0FRUCxHQUFxQixTQUFqQjI2QixFQUNGLEtBQU0zNkIsR0FLWmk4QixFQUFJbUIsS0FBS2prQyxFQUFZNHNCLEdBQVEsS0FBT0EsR0FHdEMsR0FBSTJVLEVBQVUsRUFDWixHQUFJNWhCLEdBQVl3aUIsRUFBY1MsRUFBZ0JyQixPQUNyQzdnQyxHQUFjNmdDLElBQ3ZCQSxFQUFRNWdDLEtBQUtpaUMsSUFzSG5CLFFBQVNzQixNQUNQLEdBQUkvTCxHQUFjLEtBQ2RDLEVBQVksSUFXaEJsckIsTUFBS2lyQixZQUFjLFNBQVN6NkIsR0FDMUIsTUFBSUEsSUFDRnk2QixFQUFjejZCLEVBQ1B3UCxNQUVBaXJCLEdBYVhqckIsS0FBS2tyQixVQUFZLFNBQVMxNkIsR0FDeEIsTUFBSUEsSUFDRjA2QixFQUFZMTZCLEVBQ0x3UCxNQUVBa3JCLEdBS1hsckIsS0FBSzhJLE1BQVEsU0FBVSxvQkFBcUIsT0FBUSxTQUFTd1AsRUFBUTVCLEVBQW1COEIsR0FNdEYsUUFBU3llLEdBQU9DLEdBQ2QsTUFBTyxTQUFXQSxFQUdwQixRQUFTQyxHQUFhN1EsR0FDcEIsTUFBT0EsR0FBSzMzQixRQUFReW9DLEVBQW9Cbk0sR0FDdEN0OEIsUUFBUTBvQyxFQUFrQm5NLEdBSTlCLFFBQVNvTSxHQUFzQm43QixFQUFPK1UsRUFBVXFtQixFQUFnQkMsR0FDOUQsR0FBSUMsR0FBVXQ3QixFQUFNaEosT0FBTyxTQUFrQ2dKLEdBRTNELE1BREFzN0IsS0FDT0QsRUFBZXI3QixJQUNyQitVLEVBQVVxbUIsRUFDYixPQUFPRSxHQXlIVCxRQUFTcmYsR0FBYWtPLEVBQU1hLEVBQW9CRCxFQUFnQkUsR0F1RzlELFFBQVNzUSxHQUEwQmxuQyxHQUNqQyxJQUVFLE1BREFBLEdBQVFtbkMsRUFBU25uQyxHQUNWNDJCLElBQWlCOTVCLEVBQVVrRCxHQUFTQSxFQUFReUgsR0FBVXpILEdBQzdELE1BQU9tYyxHQUNQK0osRUFBa0JraEIsR0FBbUJDLE9BQU92UixFQUFNM1osS0ExR3RELElBQUsyWixFQUFLdjNCLFNBQXlDLElBQS9CdTNCLEVBQUszeEIsUUFBUXMyQixHQUFxQixDQUNwRCxHQUFJdU0sRUFDSixLQUFLclEsRUFBb0IsQ0FFdkJxUSxFQUFpQjdrQyxFQURHd2tDLEVBQWE3USxJQUVqQ2tSLEVBQWVNLElBQU14UixFQUNyQmtSLEVBQWUzUSxlQUNmMlEsRUFBZU8sZ0JBQWtCVCxFQUVuQyxNQUFPRSxHQUdUcFEsSUFBaUJBLENBV2pCLEtBVkEsR0FBSS92QixHQUNBMmdDLEVBS0FGLEVBSkFqcEMsRUFBUSxFQUNSZzRCLEtBQ0FvUixLQUNBQyxFQUFhNVIsRUFBS3YzQixPQUVsQmtJLEtBQ0FraEMsS0FFR3RwQyxFQUFRcXBDLEdBQVksQ0FDekIsSUFBMEQsS0FBcEQ3Z0MsRUFBYWl2QixFQUFLM3hCLFFBQVFzMkIsRUFBYXA4QixNQUNtQyxLQUF6RW1wQyxFQUFXMVIsRUFBSzN4QixRQUFRdTJCLEVBQVc3ekIsRUFBYStnQyxJQVVoRCxDQUVEdnBDLElBQVVxcEMsR0FDWmpoQyxFQUFPL0IsS0FBS2lpQyxFQUFhN1EsRUFBS3JzQixVQUFVcEwsSUFFMUMsT0FkSUEsSUFBVXdJLEdBQ1pKLEVBQU8vQixLQUFLaWlDLEVBQWE3USxFQUFLcnNCLFVBQVVwTCxFQUFPd0ksS0FFakR5Z0MsRUFBTXhSLEVBQUtyc0IsVUFBVTVDLEVBQWErZ0MsRUFBbUJKLEdBQ3JEblIsRUFBWTN4QixLQUFLNGlDLEdBQ2pCRyxFQUFTL2lDLEtBQUtvakIsRUFBT3dmLEVBQUtKLElBQzFCN29DLEVBQVFtcEMsRUFBV0ssRUFDbkJGLEVBQW9CampDLEtBQUsrQixFQUFPbEksUUFDaENrSSxFQUFPL0IsS0FBSyxJQW9CaEIsR0FKSWd5QixHQUFrQmp3QixFQUFPbEksT0FBUyxHQUNsQzZvQyxHQUFtQlUsY0FBY2hTLElBR2hDYSxHQUFzQk4sRUFBWTkzQixPQUFRLENBQzdDLEdBQUl3cEMsR0FBVSxTQUFTMU0sR0FDckIsSUFBSyxHQUFJNTlCLEdBQUksRUFBR2lELEVBQUsyMUIsRUFBWTkzQixPQUFRZCxFQUFJaUQsRUFBSWpELElBQUssQ0FDcEQsR0FBSW01QixHQUFnQnQwQixFQUFZKzRCLEVBQU81OUIsSUFBSyxNQUM1Q2dKLEdBQU9raEMsRUFBb0JscUMsSUFBTTQ5QixFQUFPNTlCLEdBRTFDLE1BQU9nSixHQUFPcUQsS0FBSyxLQUdqQnE5QixFQUFXLFNBQVNubkMsR0FDdEIsTUFBTzAyQixHQUNMMU8sRUFBS2dnQixXQUFXdFIsRUFBZ0IxMkIsR0FDaENnb0IsRUFBS2huQixRQUFRaEIsR0FHakIsT0FBT3VCLEdBQU8sU0FBeUJuQyxHQUNuQyxHQUFJM0IsR0FBSSxFQUNKaUQsRUFBSzIxQixFQUFZOTNCLE9BQ2pCODhCLEVBQVMsR0FBSXI4QixPQUFNMEIsRUFFdkIsS0FDRSxLQUFPakQsRUFBSWlELEVBQUlqRCxJQUNiNDlCLEVBQU81OUIsR0FBS2dxQyxFQUFTaHFDLEdBQUcyQixFQUcxQixPQUFPMm9DLEdBQVExTSxHQUNmLE1BQU9sZixHQUNQK0osRUFBa0JraEIsR0FBbUJDLE9BQU92UixFQUFNM1osT0FLdERtckIsSUFBS3hSLEVBQ0xPLFlBQWFBLEVBQ2JrUixnQkFBaUIsU0FBUzU3QixFQUFPK1UsR0FDL0IsR0FBSXlYLEVBQ0osT0FBT3hzQixHQUFNczhCLFlBQVlSLEVBQXVCLFNBQThCcE0sRUFBUTZNLEdBQ3BGLEdBQUlDLEdBQVlKLEVBQVExTSxFQUNwQi83QixHQUFXb2hCLElBQ2JBLEVBQVNsaEIsS0FBS2dRLEtBQU0yNEIsRUFBVzlNLElBQVc2TSxFQUFZL1AsRUFBWWdRLEVBQVd4OEIsR0FFL0V3c0IsRUFBWWdRLFFBOU90QixHQUFJUCxHQUFvQm5OLEVBQVlsOEIsT0FDaENzcEMsRUFBa0JuTixFQUFVbjhCLE9BQzVCcW9DLEVBQXFCLEdBQUkxbEMsUUFBT3U1QixFQUFZdDhCLFFBQVEsS0FBTXNvQyxHQUFTLEtBQ25FSSxFQUFtQixHQUFJM2xDLFFBQU93NUIsRUFBVXY4QixRQUFRLEtBQU1zb0MsR0FBUyxJQTJSbkUsT0FwQkE3ZSxHQUFhNlMsWUFBYyxXQUN6QixNQUFPQSxJQWVUN1MsRUFBYThTLFVBQVksV0FDdkIsTUFBT0EsSUFHRjlTLElBS1gsUUFBU3dnQixNQUNQNTRCLEtBQUs4SSxNQUFRLGFBQWMsVUFBVyxLQUFNLE1BQU8sV0FDOUMsU0FBU2dGLEVBQWNGLEVBQVc4aUIsRUFBTW1JLEVBQU90SSxHQWtJbEQsUUFBU3VJLEdBQVN0aEMsRUFBSWdiLEVBQU91bUIsRUFBT0MsR0FrQ2xDLFFBQVN0bkIsS0FDRnVuQixFQUdIemhDLEVBQUdFLE1BQU0sS0FBTU4sR0FGZkksRUFBRzBoQyxHQW5DUCxHQUFJRCxHQUFZOXFDLFVBQVVZLE9BQVMsRUFDL0JxSSxFQUFPNmhDLEVBQVkxcUMsRUFBVUosVUFBVyxNQUN4Q2dyQyxFQUFjdnJCLEVBQVF1ckIsWUFDdEJDLEVBQWdCeHJCLEVBQVF3ckIsY0FDeEJGLEVBQVksRUFDWkcsRUFBYS9yQyxFQUFVMHJDLEtBQWlCQSxFQUN4Q3ZGLEdBQVk0RixFQUFZUixFQUFNbkksR0FBSW5lLFFBQ2xDdWUsRUFBVTJDLEVBQVMzQyxPQXdCdkIsT0F0QkFpSSxHQUFRenJDLEVBQVV5ckMsR0FBU0EsRUFBUSxFQUVuQ2pJLEVBQVF3SSxhQUFlSCxFQUFZLFdBQzdCRSxFQUNGOUksRUFBU2hlLE1BQU1iLEdBRWY1RCxFQUFXNWEsV0FBV3dlLEdBRXhCK2hCLEVBQVM4RixPQUFPTCxLQUVaSCxFQUFRLEdBQUtHLEdBQWFILElBQzVCdEYsRUFBU25CLFFBQVE0RyxHQUNqQkUsRUFBY3RJLEVBQVF3SSxvQkFDZkUsR0FBVTFJLEVBQVF3SSxlQUd0QkQsR0FBV3ZyQixFQUFXelIsVUFFMUJtVyxHQUVIZ25CLEVBQVUxSSxFQUFRd0ksY0FBZ0I3RixFQUUzQjNDLEVBaktULEdBQUkwSSxLQW1NSixPQVpBVixHQUFTcG1CLE9BQVMsU0FBU29lLEdBQ3pCLFNBQUlBLEdBQVdBLEVBQVF3SSxlQUFnQkUsTUFFckNDLEdBQXNCRCxFQUFVMUksRUFBUXdJLGNBQWN4SSxTQUN0RDBJLEVBQVUxSSxFQUFRd0ksY0FBYzFILE9BQU8sWUFDdkNoa0IsRUFBUXdyQixjQUFjdEksRUFBUXdJLG9CQUN2QkUsR0FBVTFJLEVBQVF3SSxlQUNsQixJQUtKUixJQTJHWCxRQUFTWSxJQUFXMzdCLEdBSWxCLElBSEEsR0FBSTQ3QixHQUFXNTdCLEVBQUszSixNQUFNLEtBQ3RCbkcsRUFBSTByQyxFQUFTNXFDLE9BRVZkLEtBQ0wwckMsRUFBUzFyQyxHQUFLc00sR0FBaUJvL0IsRUFBUzFyQyxHQUcxQyxPQUFPMHJDLEdBQVNyL0IsS0FBSyxLQUd2QixRQUFTcy9CLElBQWlCQyxFQUFhQyxHQUNyQyxHQUFJQyxHQUFZekQsR0FBV3VELEVBRTNCQyxHQUFZRSxXQUFhRCxFQUFVeEQsU0FDbkN1RCxFQUFZRyxPQUFTRixFQUFVRyxTQUMvQkosRUFBWUssT0FBU2xvQyxFQUFNOG5DLEVBQVVLLE9BQVNDLEdBQWNOLEVBQVV4RCxXQUFhLEtBSXJGLFFBQVMrRCxJQUFZanFCLEVBQUt5cEIsR0FFeEIsR0FBSVMsR0FBbUIzbUMsS0FBS3ljLEdBQzFCLEtBQU1tcUIsSUFBZ0IsVUFBVyxxQkFBc0JucUIsRUFHekQsSUFBSW9xQixHQUE4QixNQUFsQnBxQixFQUFJclosT0FBTyxFQUN2QnlqQyxLQUNGcHFCLEVBQU0sSUFBTUEsRUFFZCxJQUFJemhCLEdBQVEwbkMsR0FBV2ptQixFQUN2QnlwQixHQUFZWSxPQUFTN2dDLG1CQUFtQjRnQyxHQUF5QyxNQUE3QjdyQyxFQUFNK3JDLFNBQVMzakMsT0FBTyxHQUN0RXBJLEVBQU0rckMsU0FBUzFnQyxVQUFVLEdBQUtyTCxFQUFNK3JDLFVBQ3hDYixFQUFZYyxTQUFXOWdDLEdBQWNsTCxFQUFNaXNDLFFBQzNDZixFQUFZZ0IsT0FBU2poQyxtQkFBbUJqTCxFQUFNb2dCLE1BRzFDOHFCLEVBQVlZLFFBQTJDLE1BQWpDWixFQUFZWSxPQUFPMWpDLE9BQU8sS0FDbEQ4aUMsRUFBWVksT0FBUyxJQUFNWixFQUFZWSxRQUkzQyxRQUFTSyxJQUFXN29DLEVBQUsyb0MsR0FDdkIsTUFBTzNvQyxHQUFJcEQsTUFBTSxFQUFHK3JDLEVBQU85ckMsVUFBWThyQyxFQVV6QyxRQUFTRyxJQUFhQyxFQUFNNXFCLEdBQzFCLEdBQUkwcUIsR0FBVzFxQixFQUFLNHFCLEdBQ2xCLE1BQU81cUIsR0FBSUMsT0FBTzJxQixFQUFLbHNDLFFBSzNCLFFBQVNpakIsSUFBVTNCLEdBQ2pCLEdBQUl4aEIsR0FBUXdoQixFQUFJMWIsUUFBUSxJQUN4QixRQUFrQixJQUFYOUYsRUFBZXdoQixFQUFNQSxFQUFJQyxPQUFPLEVBQUd6aEIsR0FHNUMsUUFBU3FzQyxJQUFjN3FCLEdBQ3JCLE1BQU9BLEdBQUkxaEIsUUFBUSxXQUFZLE1BSWpDLFFBQVN3c0MsSUFBVTlxQixHQUNqQixNQUFPQSxHQUFJQyxPQUFPLEVBQUcwQixHQUFVM0IsR0FBSytxQixZQUFZLEtBQU8sR0FJekQsUUFBU0MsSUFBV2hyQixHQUNsQixNQUFPQSxHQUFJcFcsVUFBVSxFQUFHb1csRUFBSTFiLFFBQVEsSUFBSzBiLEVBQUkxYixRQUFRLE1BQVEsSUFhL0QsUUFBUzJtQyxJQUFpQkMsRUFBU0MsRUFBZUMsR0FDaER6N0IsS0FBSzA3QixTQUFVLEVBQ2ZELEVBQWFBLEdBQWMsR0FDM0I3QixHQUFpQjJCLEVBQVN2N0IsTUFRMUJBLEtBQUsyN0IsUUFBVSxTQUFTdHJCLEdBQ3RCLEdBQUl1ckIsR0FBVVosR0FBYVEsRUFBZW5yQixFQUMxQyxLQUFLaGhCLEVBQVN1c0MsR0FDWixLQUFNcEIsSUFBZ0IsV0FBWSxnREFBaURucUIsRUFDL0VtckIsRUFHTmxCLElBQVlzQixFQUFTNTdCLE1BRWhCQSxLQUFLMDZCLFNBQ1IxNkIsS0FBSzA2QixPQUFTLEtBR2hCMTZCLEtBQUs2N0IsYUFPUDc3QixLQUFLNjdCLFVBQVksV0FDZixHQUFJaEIsR0FBUzNnQyxHQUFXOEYsS0FBSzQ2QixVQUN6QjVyQixFQUFPaFAsS0FBSzg2QixPQUFTLElBQU12Z0MsR0FBaUJ5RixLQUFLODZCLFFBQVUsRUFFL0Q5NkIsTUFBSzg3QixNQUFRcEMsR0FBVzE1QixLQUFLMDZCLFNBQVdHLEVBQVMsSUFBTUEsRUFBUyxJQUFNN3JCLEVBQ3RFaFAsS0FBSys3QixTQUFXUCxFQUFnQng3QixLQUFLODdCLE1BQU14ckIsT0FBTyxHQUVsRHRRLEtBQUtnOEIsd0JBQXlCLEdBR2hDaDhCLEtBQUtpOEIsZUFBaUIsU0FBUzVyQixFQUFLNnJCLEdBQ2xDLEdBQUlBLEdBQTBCLE1BQWZBLEVBQVEsR0FJckIsTUFEQWw4QixNQUFLZ1AsS0FBS2t0QixFQUFRcHRDLE1BQU0sS0FDakIsQ0FFVCxJQUFJcXRDLEdBQVFDLEVBQ1JDLENBa0JKLE9BZkkvdUMsR0FBVTZ1QyxFQUFTbkIsR0FBYU8sRUFBU2xyQixLQUMzQytyQixFQUFhRCxFQUVYRSxFQURFWixHQUFjbnVDLEVBQVU2dUMsRUFBU25CLEdBQWFTLEVBQVlVLElBQzdDWCxHQUFpQlIsR0FBYSxJQUFLbUIsSUFBV0EsR0FFOUNaLEVBQVVhLEdBRWxCOXVDLEVBQVU2dUMsRUFBU25CLEdBQWFRLEVBQWVuckIsSUFDeERnc0IsRUFBZWIsRUFBZ0JXLEVBQ3RCWCxJQUFrQm5yQixFQUFNLE1BQ2pDZ3NCLEVBQWViLEdBRWJhLEdBQ0ZyOEIsS0FBSzI3QixRQUFRVSxLQUVOQSxHQWViLFFBQVNDLElBQW9CZixFQUFTQyxFQUFlZSxHQUVuRDNDLEdBQWlCMkIsRUFBU3Y3QixNQVExQkEsS0FBSzI3QixRQUFVLFNBQVN0ckIsR0FDdEIsR0FDSW1zQixHQURBQyxFQUFpQnpCLEdBQWFPLEVBQVNsckIsSUFBUTJxQixHQUFhUSxFQUFlbnJCLEVBRzFFdmQsR0FBWTJwQyxJQUFnRCxNQUE3QkEsRUFBZXpsQyxPQUFPLEdBY3BEZ0osS0FBSzA3QixRQUNQYyxFQUFpQkMsR0FFakJELEVBQWlCLEdBQ2IxcEMsRUFBWTJwQyxLQUNkbEIsRUFBVWxyQixFQUNPLEtBQU8xaEIsYUFoQjVCNnRDLEVBQWlCeEIsR0FBYXVCLEVBQVlFLEdBQ3RDM3BDLEVBQVkwcEMsS0FFZEEsRUFBaUJDLElBa0JyQm5DLEdBQVlrQyxFQUFnQng4QixNQUU1QkEsS0FBSzA2QixPQWVMLFNBQWdDMzhCLEVBQU1zUyxFQUFLNHFCLEdBS3pDLEdBRUl5QixHQUZBQyxFQUFxQixpQkFVekIsT0FMSTVCLElBQVcxcUIsRUFBSzRxQixLQUNsQjVxQixFQUFNQSxFQUFJMWhCLFFBQVFzc0MsRUFBTSxLQUl0QjBCLEVBQW1CbjZCLEtBQUs2TixHQUNuQnRTLEdBR1QyK0IsRUFBd0JDLEVBQW1CbjZCLEtBQUt6RSxHQUN6QzIrQixFQUF3QkEsRUFBc0IsR0FBSzMrQixJQW5DdkJpQyxLQUFLMDZCLE9BQVE4QixFQUFnQmpCLEdBRWxFdjdCLEtBQUs2N0IsYUF5Q1A3N0IsS0FBSzY3QixVQUFZLFdBQ2YsR0FBSWhCLEdBQVMzZ0MsR0FBVzhGLEtBQUs0NkIsVUFDekI1ckIsRUFBT2hQLEtBQUs4NkIsT0FBUyxJQUFNdmdDLEdBQWlCeUYsS0FBSzg2QixRQUFVLEVBRS9EOTZCLE1BQUs4N0IsTUFBUXBDLEdBQVcxNUIsS0FBSzA2QixTQUFXRyxFQUFTLElBQU1BLEVBQVMsSUFBTTdyQixFQUN0RWhQLEtBQUsrN0IsU0FBV1IsR0FBV3Y3QixLQUFLODdCLE1BQVFTLEVBQWF2OEIsS0FBSzg3QixNQUFRLElBRWxFOTdCLEtBQUtnOEIsd0JBQXlCLEdBR2hDaDhCLEtBQUtpOEIsZUFBaUIsU0FBUzVyQixFQUFLNnJCLEdBQ2xDLE1BQUlscUIsSUFBVXVwQixLQUFhdnBCLEdBQVUzQixLQUNuQ3JRLEtBQUsyN0IsUUFBUXRyQixJQUNOLElBaUJiLFFBQVN1c0IsSUFBMkJyQixFQUFTQyxFQUFlZSxHQUMxRHY4QixLQUFLMDdCLFNBQVUsRUFDZlksR0FBb0I1a0MsTUFBTXNJLEtBQU03UixXQUVoQzZSLEtBQUtpOEIsZUFBaUIsU0FBUzVyQixFQUFLNnJCLEdBQ2xDLEdBQUlBLEdBQTBCLE1BQWZBLEVBQVEsR0FJckIsTUFEQWw4QixNQUFLZ1AsS0FBS2t0QixFQUFRcHRDLE1BQU0sS0FDakIsQ0FHVCxJQUFJdXRDLEdBQ0FGLENBWUosT0FWSVosS0FBWXZwQixHQUFVM0IsR0FDeEJnc0IsRUFBZWhzQixHQUNMOHJCLEVBQVNuQixHQUFhUSxFQUFlbnJCLElBQy9DZ3NCLEVBQWVkLEVBQVVnQixFQUFhSixFQUM3QlgsSUFBa0JuckIsRUFBTSxNQUNqQ2dzQixFQUFlYixHQUViYSxHQUNGcjhCLEtBQUsyN0IsUUFBUVUsS0FFTkEsR0FHWHI4QixLQUFLNjdCLFVBQVksV0FDZixHQUFJaEIsR0FBUzNnQyxHQUFXOEYsS0FBSzQ2QixVQUN6QjVyQixFQUFPaFAsS0FBSzg2QixPQUFTLElBQU12Z0MsR0FBaUJ5RixLQUFLODZCLFFBQVUsRUFFL0Q5NkIsTUFBSzg3QixNQUFRcEMsR0FBVzE1QixLQUFLMDZCLFNBQVdHLEVBQVMsSUFBTUEsRUFBUyxJQUFNN3JCLEVBRXRFaFAsS0FBSys3QixTQUFXUixFQUFVZ0IsRUFBYXY4QixLQUFLODdCLE1BRTVDOTdCLEtBQUtnOEIsd0JBQXlCLEdBaVZsQyxRQUFTYSxJQUFldFksR0FDdEIsTUFBb0IsWUFDbEIsTUFBT3ZrQixNQUFLdWtCLElBS2hCLFFBQVN1WSxJQUFxQnZZLEVBQVV3WSxHQUN0QyxNQUFvQixVQUFTdnNDLEdBQzNCLE1BQUlzQyxHQUFZdEMsR0FDUHdQLEtBQUt1a0IsSUFHZHZrQixLQUFLdWtCLEdBQVl3WSxFQUFXdnNDLEdBQzVCd1AsS0FBSzY3QixZQUVFNzdCLE9BdUNYLFFBQVNnOUIsTUFDUCxHQUFJVCxHQUFhLElBQ2JVLEdBQ0V0bEIsU0FBUyxFQUNUdWxCLGFBQWEsRUFDYkMsY0FBYyxFQVdwQm45QixNQUFLdThCLFdBQWEsU0FBU3ZoQyxHQUN6QixNQUFJMU4sR0FBVTBOLElBQ1p1aEMsRUFBYXZoQyxFQUNOZ0YsTUFFQXU4QixHQTJCWHY4QixLQUFLaTlCLFVBQVksU0FBUzVuQixHQUN4QixNQUFJOWhCLEdBQVU4aEIsSUFDWjRuQixFQUFVdGxCLFFBQVV0QyxFQUNiclYsTUFDRTVTLEVBQVNpb0IsSUFFZDloQixFQUFVOGhCLEVBQUtzQyxXQUNqQnNsQixFQUFVdGxCLFFBQVV0QyxFQUFLc0MsU0FHdkJwa0IsRUFBVThoQixFQUFLNm5CLGVBQ2pCRCxFQUFVQyxZQUFjN25CLEVBQUs2bkIsY0FHM0IzcEMsRUFBVThoQixFQUFLOG5CLGVBQWlCOXRDLEVBQVNnbUIsRUFBSzhuQixpQkFDaERGLEVBQVVFLGFBQWU5bkIsRUFBSzhuQixjQUd6Qm45QixNQUVBaTlCLEdBMkNYajlCLEtBQUs4SSxNQUFRLGFBQWMsV0FBWSxXQUFZLGVBQWdCLFVBQy9ELFNBQVNnRixFQUFZeWlCLEVBQVV4Z0IsRUFBVXNMLEVBQWN6TixHQTJCekQsUUFBU3d2QixHQUEwQi9zQixFQUFLMWhCLEVBQVNrakIsR0FDL0MsR0FBSXdyQixHQUFTeHZCLEVBQVV3QyxNQUNuQml0QixFQUFXenZCLEVBQVUwdkIsT0FDekIsS0FDRWhOLEVBQVNsZ0IsSUFBSUEsRUFBSzFoQixFQUFTa2pCLEdBSzNCaEUsRUFBVTB2QixRQUFVaE4sRUFBUzFlLFFBQzdCLE1BQU9sWSxHQUtQLEtBSEFrVSxHQUFVd0MsSUFBSWd0QixHQUNkeHZCLEVBQVUwdkIsUUFBVUQsRUFFZDNqQyxHQTZJVixRQUFTNmpDLEdBQW9CSCxFQUFRQyxHQUNuQ3h2QixFQUFXMnZCLFdBQVcseUJBQTBCNXZCLEVBQVU2dkIsU0FBVUwsRUFDbEV4dkIsRUFBVTB2QixRQUFTRCxHQXhMdkIsR0FBSXp2QixHQUNBOHZCLEVBR0FwQyxFQUZBanBCLEVBQVdpZSxFQUFTamUsV0FDcEJzckIsRUFBYXJOLEVBQVNsZ0IsS0FHMUIsSUFBSTRzQixFQUFVdGxCLFFBQVMsQ0FDckIsSUFBS3JGLEdBQVkycUIsRUFBVUMsWUFDekIsS0FBTTFDLElBQWdCLFNBQ3BCLCtEQUVKZSxHQUFVRixHQUFXdUMsSUFBZXRyQixHQUFZLEtBQ2hEcXJCLEVBQWU1dEIsRUFBU29CLFFBQVVtcUIsR0FBbUJzQixPQUVyRHJCLEdBQVV2cEIsR0FBVTRyQixHQUNwQkQsRUFBZXJCLEVBRWpCLElBQUlkLEdBQWdCTCxHQUFVSSxFQUU5QjF0QixHQUFZLEdBQUk4dkIsR0FBYXBDLEVBQVNDLEVBQWUsSUFBTWUsR0FDM0QxdUIsRUFBVW91QixlQUFlMkIsRUFBWUEsR0FFckMvdkIsRUFBVTB2QixRQUFVaE4sRUFBUzFlLE9BRTdCLElBQUlnc0IsR0FBb0IsMkJBcUJ4QnhpQixHQUFhdlUsR0FBRyxRQUFTLFNBQVNXLEdBQ2hDLEdBQUkwMUIsR0FBZUYsRUFBVUUsWUFJN0IsSUFBS0EsSUFBZ0IxMUIsRUFBTXEyQixVQUFXcjJCLEVBQU1zMkIsVUFBV3QyQixFQUFNdTJCLFVBQTRCLElBQWhCdjJCLEVBQU13MkIsT0FBZ0MsSUFBakJ4MkIsRUFBTXkyQixPQUFwRyxDQUtBLElBSEEsR0FBSWp2QixHQUFNM2YsR0FBT21ZLEVBQU1nQixRQUdNLE1BQXRCcFUsRUFBVTRhLEVBQUksS0FFbkIsR0FBSUEsRUFBSSxLQUFPb00sRUFBYSxNQUFRcE0sRUFBTUEsRUFBSTVjLFVBQVUsR0FBSSxNQUc5RCxLQUFJaEQsRUFBUzh0QyxLQUFpQnJxQyxFQUFZbWMsRUFBSWpiLEtBQUttcEMsSUFBbkQsQ0FFQSxHQUFJZ0IsR0FBVWx2QixFQUFJbGIsS0FBSyxRQUduQm1vQyxFQUFVanRCLEVBQUlqYixLQUFLLFNBQVdpYixFQUFJamIsS0FBSyxhQUV2QzVHLEdBQVMrd0MsSUFBbUMsK0JBQXZCQSxFQUFRdHJDLGFBRy9Cc3JDLEVBQVU3SCxHQUFXNkgsRUFBUS9mLFNBQVN6TSxNQUlwQ2tzQixFQUFrQmpxQyxLQUFLdXFDLEtBRXZCQSxHQUFZbHZCLEVBQUlqYixLQUFLLFdBQWN5VCxFQUFNQyxzQkFDdkNtRyxFQUFVb3VCLGVBQWVrQyxFQUFTakMsS0FJcEN6MEIsRUFBTTIyQixpQkFFRnZ3QixFQUFVNnZCLFdBQWFuTixFQUFTbGdCLFFBQ2xDdkMsRUFBV3pSLFNBRVh1UixFQUFRblIsUUFBUSw2QkFBOEIsUUFRbER5K0IsR0FBY3J0QixFQUFVNnZCLFlBQWN4QyxHQUFjMEMsSUFDdERyTixFQUFTbGdCLElBQUl4QyxFQUFVNnZCLFVBQVUsRUFHbkMsSUFBSVcsSUFBZSxDQWtGbkIsT0EvRUE5TixHQUFTcmUsWUFBWSxTQUFTb3NCLEVBQVFDLEdBRXBDLElBQUt4RCxHQUFXdUQsRUFBUTlDLEdBR3RCLFlBREE1dEIsRUFBUTlRLFNBQVM2VSxLQUFPMnNCLEVBSTFCeHdCLEdBQVc1YSxXQUFXLFdBQ3BCLEdBRUl5VSxHQUZBMDFCLEVBQVN4dkIsRUFBVTZ2QixTQUNuQkosRUFBV3p2QixFQUFVMHZCLE9BRXpCZSxHQUFTcEQsR0FBY29ELEdBQ3ZCendCLEVBQVU4dEIsUUFBUTJDLEdBQ2xCendCLEVBQVUwdkIsUUFBVWdCLEVBRXBCNTJCLEVBQW1CbUcsRUFBVzJ2QixXQUFXLHVCQUF3QmEsRUFBUWpCLEVBQ3JFa0IsRUFBVWpCLEdBQVUzMUIsaUJBSXBCa0csRUFBVTZ2QixXQUFhWSxJQUV2QjMyQixHQUNGa0csRUFBVTh0QixRQUFRMEIsR0FDbEJ4dkIsRUFBVTB2QixRQUFVRCxFQUNwQkYsRUFBMEJDLEdBQVEsRUFBT0MsS0FFekNlLEdBQWUsRUFDZmIsRUFBb0JILEVBQVFDLE9BRzNCeHZCLEVBQVdvbEIsU0FBU3BsQixFQUFXMHdCLFlBSXRDMXdCLEVBQVczYSxPQUFPLFdBQ2hCLEdBQUlrckMsR0FBZ0J4d0IsRUFBVW11Qix1QkFBd0IsQ0FDcERudUIsRUFBVW11Qix3QkFBeUIsQ0FFbkMsSUFBSXFCLEdBQVNuQyxHQUFjM0ssRUFBU2xnQixPQUNoQ2l1QixFQUFTcEQsR0FBY3J0QixFQUFVNnZCLFVBQ2pDSixFQUFXL00sRUFBUzFlLFFBQ3BCNHNCLEVBQWlCNXdCLEVBQVU2d0IsVUFDM0JDLEVBQW9CdEIsSUFBV2lCLEdBQ2hDendCLEVBQVU2dEIsU0FBVzNyQixFQUFTb0IsU0FBV21zQixJQUFhenZCLEVBQVUwdkIsU0FFL0RjLEdBQWdCTSxLQUNsQk4sR0FBZSxFQUVmdndCLEVBQVc1YSxXQUFXLFdBQ3BCLEdBQUlvckMsR0FBU3p3QixFQUFVNnZCLFNBQ25CLzFCLEVBQW1CbUcsRUFBVzJ2QixXQUFXLHVCQUF3QmEsRUFBUWpCLEVBQ3pFeHZCLEVBQVUwdkIsUUFBU0QsR0FBVTMxQixnQkFJN0JrRyxHQUFVNnZCLFdBQWFZLElBRXZCMzJCLEdBQ0ZrRyxFQUFVOHRCLFFBQVEwQixHQUNsQnh2QixFQUFVMHZCLFFBQVVELElBRWhCcUIsR0FDRnZCLEVBQTBCa0IsRUFBUUcsRUFDUm5CLElBQWF6dkIsRUFBVTB2QixRQUFVLEtBQU8xdkIsRUFBVTB2QixTQUU5RUMsRUFBb0JILEVBQVFDLFFBTXBDenZCLEVBQVU2d0IsV0FBWSxJQU1qQjd3QixJQStEWCxRQUFTK3dCLE1BQ1AsR0FBSUMsSUFBUSxFQUNSdG5DLEVBQU95SSxJQVNYQSxNQUFLOCtCLGFBQWUsU0FBU0MsR0FDM0IsTUFBSXp4QyxHQUFVeXhDLElBQ1pGLEVBQVFFLEVBQ0QvK0IsTUFFQTYrQixHQUlYNytCLEtBQUs4SSxNQUFRLFVBQVcsU0FBUzhFLEdBaUUvQixRQUFTb3hCLEdBQVl2d0MsR0FVbkIsTUFUSXVFLEdBQVF2RSxLQUNOQSxFQUFJNGQsT0FBUzR5QixFQUNmeHdDLEVBQU9BLEVBQUlKLFVBQStDLElBQXBDSSxFQUFJNGQsTUFBTTFYLFFBQVFsRyxFQUFJSixTQUN0QyxVQUFZSSxFQUFJSixRQUFVLEtBQU9JLEVBQUk0ZCxNQUNyQzVkLEVBQUk0ZCxNQUNENWQsRUFBSXl3QyxZQUNiendDLEVBQU1BLEVBQUlKLFFBQVUsS0FBT0ksRUFBSXl3QyxVQUFZLElBQU16d0MsRUFBSXFnQyxPQUdsRHJnQyxFQUdULFFBQVMwd0MsR0FBVy9vQyxHQUNsQixHQUFJa0YsR0FBVXNTLEVBQVF0UyxZQUNsQjhqQyxFQUFROWpDLEVBQVFsRixJQUFTa0YsRUFBUStqQyxLQUFPN3NDLENBRTVDLE9BQU8sWUFDTCxHQUFJNEUsS0FPSixPQU5BMUgsR0FBUXZCLFVBQVcsU0FBU00sR0FDMUIySSxFQUFLbEMsS0FBSzhwQyxFQUFZdndDLE1BS2pCbWIsU0FBU2xWLFVBQVVnRCxNQUFNMUgsS0FBS292QyxFQUFPOWpDLEVBQVNsRSxJQWxGekQsR0FBSTZuQyxHQUFtQi94QixJQUFRLFdBQVd0WixLQUFLZ2EsRUFBUTB4QixXQUFhMXhCLEVBQVEweEIsVUFBVUMsVUFFdEYsUUFRRUYsSUFBS0YsRUFBVyxPQVNoQnBnQyxLQUFNb2dDLEVBQVcsUUFTakJLLEtBQU1MLEVBQVcsUUFTakI1akMsTUFBTzRqQyxFQUFXLFNBU2xCTixNQUFPLFdBQ0wsR0FBSXJuQyxHQUFLMm5DLEVBQVcsUUFFcEIsT0FBTyxZQUNETixHQUNGcm5DLEVBQUdFLE1BQU1ILEVBQU1wSixrQkFtRTNCLFFBQVNzeEMsSUFBZXhrQyxHQWV0QixNQUFPQSxHQUFPLEdBa2pCaEIsUUFBU3lrQyxJQUFVbFMsRUFBR21DLEdBQ3BCLFdBQW9CLEtBQU5uQyxFQUFvQkEsRUFBSW1DLEVBR3hDLFFBQVNnUSxJQUFPM21CLEVBQUc0bUIsR0FDakIsV0FBaUIsS0FBTjVtQixFQUEwQjRtQixNQUNwQixLQUFOQSxFQUEwQjVtQixFQUM5QkEsRUFBSTRtQixFQUdiLFFBQVNDLElBQVlDLEVBQVNDLEdBRTVCLE9BRFNELEVBQVFDLEdBQ056VyxVQU9iLFFBQVMwVyxJQUFPbHNDLEVBQU1tc0MsR0FDcEIsT0FBUW5zQyxFQUFLc0MsTUFFWCxJQUFLOHBDLElBQUlDLGlCQUNQLEdBQUlyc0MsRUFBS3NzQyxTQUNQLE9BQU8sQ0FFVCxNQUdGLEtBQUtGLElBQUlHLGdCQUNQLE1BQU9DLEdBR1QsS0FBS0osSUFBSUssaUJBQ1AsTUFBeUIsTUFBbEJ6c0MsRUFBSzBzQyxVQUFtQkYsRUFHakMsS0FBS0osSUFBSU8sZUFDUCxPQUFPLEVBR1gsV0FBUWhyQyxLQUFjd3FDLEVBQWdCUyxHQUFrQlQsRUFHMUQsUUFBU1UsSUFBZ0NDLEVBQUtkLEVBQVNHLEdBQ3JELEdBQUlZLEdBQ0FDLEVBQ0FDLEVBRUFDLEVBQVlKLEVBQUlaLE9BQVNBLEdBQU9ZLEVBQUtYLEVBRXpDLFFBQVFXLEVBQUl4cUMsTUFDWixJQUFLOHBDLElBQUllLFFBQ1BKLEdBQWUsRUFDZm54QyxFQUFRa3hDLEVBQUlwTCxLQUFNLFNBQVMwTCxHQUN6QlAsR0FBZ0NPLEVBQUt2VSxXQUFZbVQsRUFBU2tCLEdBQzFESCxFQUFlQSxHQUFnQkssRUFBS3ZVLFdBQVd6c0IsV0FFakQwZ0MsRUFBSTFnQyxTQUFXMmdDLENBQ2YsTUFDRixLQUFLWCxJQUFJaUIsUUFDUFAsRUFBSTFnQyxVQUFXLEVBQ2YwZ0MsRUFBSVEsVUFDSixNQUNGLEtBQUtsQixJQUFJRyxnQkFDUE0sR0FBZ0NDLEVBQUlTLFNBQVV2QixFQUFTa0IsR0FDdkRKLEVBQUkxZ0MsU0FBVzBnQyxFQUFJUyxTQUFTbmhDLFNBQzVCMGdDLEVBQUlRLFFBQVVSLEVBQUlTLFNBQVNELE9BQzNCLE1BQ0YsS0FBS2xCLElBQUlLLGlCQUNQSSxHQUFnQ0MsRUFBSVUsS0FBTXhCLEVBQVNrQixHQUNuREwsR0FBZ0NDLEVBQUlXLE1BQU96QixFQUFTa0IsR0FDcERKLEVBQUkxZ0MsU0FBVzBnQyxFQUFJVSxLQUFLcGhDLFVBQVkwZ0MsRUFBSVcsTUFBTXJoQyxTQUM5QzBnQyxFQUFJUSxRQUFVUixFQUFJVSxLQUFLRixRQUFRbnFDLE9BQU8ycEMsRUFBSVcsTUFBTUgsUUFDaEQsTUFDRixLQUFLbEIsSUFBSXNCLGtCQUNQYixHQUFnQ0MsRUFBSVUsS0FBTXhCLEVBQVNrQixHQUNuREwsR0FBZ0NDLEVBQUlXLE1BQU96QixFQUFTa0IsR0FDcERKLEVBQUkxZ0MsU0FBVzBnQyxFQUFJVSxLQUFLcGhDLFVBQVkwZ0MsRUFBSVcsTUFBTXJoQyxTQUM5QzBnQyxFQUFJUSxRQUFVUixFQUFJMWdDLGFBQWlCMGdDLEVBQ25DLE1BQ0YsS0FBS1YsSUFBSXVCLHNCQUNQZCxHQUFnQ0MsRUFBSWh0QyxLQUFNa3NDLEVBQVNrQixHQUNuREwsR0FBZ0NDLEVBQUljLFVBQVc1QixFQUFTa0I7b0JBQ3hETCxHQUFnQ0MsRUFBSWUsV0FBWTdCLEVBQVNrQixHQUN6REosRUFBSTFnQyxTQUFXMGdDLEVBQUlodEMsS0FBS3NNLFVBQVkwZ0MsRUFBSWMsVUFBVXhoQyxVQUFZMGdDLEVBQUllLFdBQVd6aEMsU0FDN0UwZ0MsRUFBSVEsUUFBVVIsRUFBSTFnQyxhQUFpQjBnQyxFQUNuQyxNQUNGLEtBQUtWLElBQUkwQixXQUNQaEIsRUFBSTFnQyxVQUFXLEVBQ2YwZ0MsRUFBSVEsU0FBV1IsRUFDZixNQUNGLEtBQUtWLElBQUlDLGlCQUNQUSxHQUFnQ0MsRUFBSWlCLE9BQVEvQixFQUFTa0IsR0FDakRKLEVBQUlSLFVBQ05PLEdBQWdDQyxFQUFJcmMsU0FBVXViLEVBQVNrQixHQUV6REosRUFBSTFnQyxTQUFXMGdDLEVBQUlpQixPQUFPM2hDLFlBQWMwZ0MsRUFBSVIsVUFBWVEsRUFBSXJjLFNBQVNya0IsVUFDckUwZ0MsRUFBSVEsUUFBVVIsRUFBSTFnQyxhQUFpQjBnQyxFQUNuQyxNQUNGLEtBQUtWLElBQUlPLGVBQ1BNLElBQW9CSCxFQUFJdmdDLFFBQVN3L0IsR0FBWUMsRUFBU2MsRUFBSWtCLE9BQU83bUMsTUFDakU0bEMsRUFBZUUsRUFDZkQsS0FDQXB4QyxFQUFRa3hDLEVBQUl6eUMsVUFBVyxTQUFTK3lDLEdBQzlCUCxHQUFnQ08sRUFBTXBCLEVBQVNrQixHQUMvQ0gsRUFBZUEsR0FBZ0JLLEVBQUtoaEMsU0FDcEM0Z0MsRUFBWTVyQyxLQUFLd0MsTUFBTW9wQyxFQUFhSSxFQUFLRSxXQUUzQ1IsRUFBSTFnQyxTQUFXMmdDLEVBQ2ZELEVBQUlRLFFBQVVMLEVBQW9CRCxHQUFlRixFQUNqRCxNQUNGLEtBQUtWLElBQUk2QixxQkFDUHBCLEdBQWdDQyxFQUFJVSxLQUFNeEIsRUFBU2tCLEdBQ25ETCxHQUFnQ0MsRUFBSVcsTUFBT3pCLEVBQVNrQixHQUNwREosRUFBSTFnQyxTQUFXMGdDLEVBQUlVLEtBQUtwaEMsVUFBWTBnQyxFQUFJVyxNQUFNcmhDLFNBQzlDMGdDLEVBQUlRLFNBQVdSLEVBQ2YsTUFDRixLQUFLVixJQUFJOEIsZ0JBQ1BuQixHQUFlLEVBQ2ZDLEtBQ0FweEMsRUFBUWt4QyxFQUFJOTZCLFNBQVUsU0FBU283QixHQUM3QlAsR0FBZ0NPLEVBQU1wQixFQUFTa0IsR0FDL0NILEVBQWVBLEdBQWdCSyxFQUFLaGhDLFNBQ3BDNGdDLEVBQVk1ckMsS0FBS3dDLE1BQU1vcEMsRUFBYUksRUFBS0UsV0FFM0NSLEVBQUkxZ0MsU0FBVzJnQyxFQUNmRCxFQUFJUSxRQUFVTixDQUNkLE1BQ0YsS0FBS1osSUFBSStCLGlCQUNQcEIsR0FBZSxFQUNmQyxLQUNBcHhDLEVBQVFreEMsRUFBSXNCLFdBQVksU0FBUzNkLEdBQy9Cb2MsR0FBZ0NwYyxFQUFTL3pCLE1BQU9zdkMsRUFBU2tCLEdBQ3pESCxFQUFlQSxHQUFnQnRjLEVBQVMvekIsTUFBTTBQLFNBQzlDNGdDLEVBQVk1ckMsS0FBS3dDLE1BQU1vcEMsRUFBYXZjLEVBQVMvekIsTUFBTTR3QyxTQUMvQzdjLEVBQVM2YixXQUVYTyxHQUFnQ3BjLEVBQVMxMEIsSUFBS2l3QyxHQUEwQixHQUN4RWUsRUFBZUEsR0FBZ0J0YyxFQUFTMTBCLElBQUlxUSxTQUM1QzRnQyxFQUFZNXJDLEtBQUt3QyxNQUFNb3BDLEVBQWF2YyxFQUFTMTBCLElBQUl1eEMsWUFHckRSLEVBQUkxZ0MsU0FBVzJnQyxFQUNmRCxFQUFJUSxRQUFVTixDQUNkLE1BQ0YsS0FBS1osSUFBSWlDLGVBSVQsSUFBS2pDLElBQUlrQyxpQkFDUHhCLEVBQUkxZ0MsVUFBVyxFQUNmMGdDLEVBQUlRLFlBS1IsUUFBU2lCLElBQVU3TSxHQUNqQixHQUFvQixJQUFoQkEsRUFBS3ptQyxPQUFULENBQ0EsR0FBSXV6QyxHQUFpQjlNLEVBQUssR0FBRzdJLFdBQ3pCeHhCLEVBQVltbkMsRUFBZWxCLE9BQy9CLE9BQXlCLEtBQXJCam1DLEVBQVVwTSxPQUFxQm9NLEVBQzVCQSxFQUFVLEtBQU9tbkMsRUFBaUJubkMsTUFBWTFGLElBR3ZELFFBQVM4c0MsSUFBYTNCLEdBQ3BCLE1BQU9BLEdBQUl4cUMsT0FBUzhwQyxHQUFJMEIsWUFBY2hCLEVBQUl4cUMsT0FBUzhwQyxHQUFJQyxpQkFHekQsUUFBU3FDLElBQWM1QixHQUNyQixHQUF3QixJQUFwQkEsRUFBSXBMLEtBQUt6bUMsUUFBZ0J3ekMsR0FBYTNCLEVBQUlwTCxLQUFLLEdBQUc3SSxZQUNwRCxPQUFRdjJCLEtBQU04cEMsR0FBSTZCLHFCQUFzQlQsS0FBTVYsRUFBSXBMLEtBQUssR0FBRzdJLFdBQVk0VSxPQUFRbnJDLEtBQU04cEMsR0FBSXVDLGtCQUFtQmpDLFNBQVUsS0FJekgsUUFBU2tDLElBQVU5QixHQUNqQixNQUEyQixLQUFwQkEsRUFBSXBMLEtBQUt6bUMsUUFDUSxJQUFwQjZ4QyxFQUFJcEwsS0FBS3ptQyxTQUNUNnhDLEVBQUlwTCxLQUFLLEdBQUc3SSxXQUFXdjJCLE9BQVM4cEMsR0FBSWlCLFNBQ3BDUCxFQUFJcEwsS0FBSyxHQUFHN0ksV0FBV3YyQixPQUFTOHBDLEdBQUk4QixpQkFDcENwQixFQUFJcEwsS0FBSyxHQUFHN0ksV0FBV3YyQixPQUFTOHBDLEdBQUkrQixrQkFHMUMsUUFBU1UsSUFBVy9CLEdBQ2xCLE1BQU9BLEdBQUkxZ0MsU0FHYixRQUFTMGlDLElBQVk5QyxHQUNuQjkvQixLQUFLOC9CLFFBQVVBLEVBaWRqQixRQUFTK0MsSUFBZS9DLEdBQ3RCOS9CLEtBQUs4L0IsUUFBVUEsRUFxWGpCLFFBQVNnRCxJQUFPQyxFQUFPakQsRUFBU2x3QixHQUM5QjVQLEtBQUs0Z0MsSUFBTSxHQUFJVixJQUFJNkMsRUFBT256QixHQUMxQjVQLEtBQUtnakMsWUFBY3B6QixFQUFRcXpCLElBQU0sR0FBSUosSUFBZS9DLEdBQ25CLEdBQUk4QyxJQUFZOUMsR0FlbkQsUUFBU29ELElBQVcxeUMsR0FDbEIsTUFBT1YsR0FBV1UsRUFBTWdCLFNBQVdoQixFQUFNZ0IsVUFBWTJ4QyxHQUFjbnpDLEtBQUtRLEdBdUQxRSxRQUFTNHlDLE1BQ1AsR0FPSUMsR0FBWUMsRUFQWi8yQixFQUFReFYsS0FDUndzQyxHQUNGQyxNQUFRLEVBQ1JDLE9BQVMsRUFDVEMsS0FBUSxLQUNSanVDLGNBQWFBLEdBZWZ1SyxNQUFLMmpDLFdBQWEsU0FBU0MsRUFBYUMsR0FDdENOLEVBQVNLLEdBQWVDLEdBMkIxQjdqQyxLQUFLOGpDLGlCQUFtQixTQUFTQyxFQUFpQkMsR0FHaEQsTUFGQVgsR0FBYVUsRUFDYlQsRUFBZ0JVLEVBQ1Roa0MsTUFHVEEsS0FBSzhJLE1BQVEsVUFBVyxTQUFTZzNCLEdBVS9CLFFBQVN4bkIsR0FBT3dmLEVBQUttTSxHQUNuQixHQUFJQyxHQUFrQkMsRUFBU0MsQ0FFL0IsY0FBZXRNLElBQ2IsSUFBSyxTQU1ILEdBTEFBLEVBQU1BLEVBQUlwMEIsT0FDVjBnQyxFQUFXdE0sSUFFWG9NLEVBQW1CMzNCLEVBQU02M0IsSUFFRixDQUNDLE1BQWxCdE0sRUFBSTlnQyxPQUFPLElBQWdDLE1BQWxCOGdDLEVBQUk5Z0MsT0FBTyxLQUN0Q210QyxHQUFVLEVBQ1ZyTSxFQUFNQSxFQUFJNzlCLFVBQVUsR0FJdEJpcUMsR0FEYSxHQUFJcEIsSUFETCxHQUFJdUIsSUFBTUMsR0FDU3hFLEVBQVN3RSxHQUNkbHNDLE1BQU0wL0IsR0FDNUJvTSxFQUFpQmhrQyxTQUNuQmdrQyxFQUFpQm5NLGdCQUFrQlQsRUFDMUI2TSxFQUNURCxFQUFpQm5NLGdCQUFrQm1NLEVBQWlCaGIsUUFDaERxYixFQUE4QkMsRUFDekJOLEVBQWlCTyxTQUMxQlAsRUFBaUJuTSxnQkFBa0IyTSxHQUVyQ240QixFQUFNNjNCLEdBQVlGLEVBRXBCLE1BQU9TLEdBQWVULEVBQWtCRCxFQUUxQyxLQUFLLFdBQ0gsTUFBT1UsR0FBZTdNLEVBQUttTSxFQUU3QixTQUNFLE1BQU9VLEdBQWVueUMsRUFBTXl4QyxJQUlsQyxRQUFTVyxHQUEwQnRkLEVBQVV1ZCxFQUFpQkMsR0FFNUQsTUFBZ0IsT0FBWnhkLEdBQXVDLE1BQW5CdWQsRUFDZnZkLElBQWF1ZCxJQUdFLGdCQUFidmQsSUFPZSxpQkFGeEJBLEVBQVc0YixHQUFXNWIsTUFFZXdkLEtBVWhDeGQsSUFBYXVkLEdBQW9CdmQsSUFBYUEsR0FBWXVkLElBQW9CQSxHQUd2RixRQUFTSCxHQUFvQnZvQyxFQUFPK1UsRUFBVXFtQixFQUFnQjJNLEVBQWtCYSxHQUM5RSxHQUNJQyxHQURBQyxFQUFtQmYsRUFBaUJPLE1BR3hDLElBQWdDLElBQTVCUSxFQUFpQmwyQyxPQUFjLENBQ2pDLEdBQUltMkMsR0FBa0JOLENBRXRCLE9BREFLLEdBQW1CQSxFQUFpQixHQUM3QjlvQyxFQUFNaEosT0FBTyxTQUE4QmdKLEdBQ2hELEdBQUlncEMsR0FBZ0JGLEVBQWlCOW9DLEVBS3JDLE9BSkt5b0MsR0FBMEJPLEVBQWVELEVBQWlCRCxFQUFpQmpGLFVBQzlFZ0YsRUFBYWQsRUFBaUIvbkMsTUFBTzFHLE9BQVdBLElBQVkwdkMsSUFDNURELEVBQWtCQyxHQUFpQmpDLEdBQVdpQyxJQUV6Q0gsR0FDTjl6QixFQUFVcW1CLEVBQWdCd04sR0FLL0IsSUFBSyxHQUZESyxNQUNBQyxLQUNLcDNDLEVBQUksRUFBR2lELEVBQUsrekMsRUFBaUJsMkMsT0FBUWQsRUFBSWlELEVBQUlqRCxJQUNwRG0zQyxFQUFzQm4zQyxHQUFLMjJDLEVBQzNCUyxFQUFlcDNDLEdBQUssSUFHdEIsT0FBT2tPLEdBQU1oSixPQUFPLFNBQStCZ0osR0FHakQsSUFBSyxHQUZEbXBDLElBQVUsRUFFTHIzQyxFQUFJLEVBQUdpRCxFQUFLK3pDLEVBQWlCbDJDLE9BQVFkLEVBQUlpRCxFQUFJakQsSUFBSyxDQUN6RCxHQUFJazNDLEdBQWdCRixFQUFpQmgzQyxHQUFHa08sSUFDcENtcEMsSUFBWUEsR0FBV1YsRUFBMEJPLEVBQWVDLEVBQXNCbjNDLEdBQUlnM0MsRUFBaUJoM0MsR0FBRyt4QyxZQUNoSHFGLEVBQWVwM0MsR0FBS2szQyxFQUNwQkMsRUFBc0JuM0MsR0FBS2szQyxHQUFpQmpDLEdBQVdpQyxJQVEzRCxNQUpJRyxLQUNGTixFQUFhZCxFQUFpQi9uQyxNQUFPMUcsT0FBV0EsR0FBVzR2QyxJQUd0REwsR0FDTjl6QixFQUFVcW1CLEVBQWdCd04sR0FHL0IsUUFBU1AsR0FBcUJyb0MsRUFBTytVLEVBQVVxbUIsRUFBZ0IyTSxFQUFrQmEsR0FTL0UsUUFBU1EsR0FBYXBwQyxHQUNwQixNQUFPK25DLEdBQWlCL25DLEdBRTFCLFFBQVNxcEMsR0FBZ0JoMUMsRUFBT2kxQyxFQUFLdHBDLEdBQ25Dd3NCLEVBQVluNEIsRUFDUlYsRUFBV29oQixJQUNiQSxFQUFTMWdCLEVBQU9pMUMsRUFBS3RwQyxHQUVuQjdPLEVBQVVrRCxJQUNaMkwsRUFBTW1zQixhQUFhLFdBQ2JoN0IsRUFBVXE3QixJQUNaOE8sTUFuQlIsR0FBSUEsR0FBUzlPLENBTWIsT0FKRThPLEdBREV5TSxFQUFpQk8sT0FDVEMsRUFBb0J2b0MsRUFBT3FwQyxFQUFpQmpPLEVBQWdCMk0sRUFBa0JhLEdBRTlFNW9DLEVBQU1oSixPQUFPb3lDLEVBQWNDLEVBQWlCak8sR0FzQjFELFFBQVNnTixHQUE0QnBvQyxFQUFPK1UsRUFBVXFtQixFQUFnQjJNLEdBa0JwRSxRQUFTd0IsR0FBYWwxQyxHQUNwQixHQUFJbTFDLElBQWEsQ0FJakIsT0FIQWoyQyxHQUFRYyxFQUFPLFNBQVNvSCxHQUNqQnRLLEVBQVVzSyxLQUFNK3RDLEdBQWEsS0FFN0JBLEVBdEJULEdBQUlsTyxHQUFTOU8sQ0FlYixPQWRBOE8sR0FBVXQ3QixFQUFNaEosT0FBTyxTQUFzQmdKLEdBQzNDLE1BQU8rbkMsR0FBaUIvbkMsSUFDdkIsU0FBeUIzTCxFQUFPaTFDLEVBQUt0cEMsR0FDdEN3c0IsRUFBWW40QixFQUNSVixFQUFXb2hCLElBQ2JBLEVBQVMxZ0IsRUFBT2kxQyxFQUFLdHBDLEdBRW5CdXBDLEVBQWFsMUMsSUFDZjJMLEVBQU1tc0IsYUFBYSxXQUNib2QsRUFBYS9jLElBQVk4TyxPQUdoQ0YsR0FhTCxRQUFTRCxHQUFzQm43QixFQUFPK1UsRUFBVXFtQixFQUFnQjJNLEdBQzlELEdBQUl6TSxHQUFVdDdCLEVBQU1oSixPQUFPLFNBQXVCZ0osR0FFaEQsTUFEQXM3QixLQUNPeU0sRUFBaUIvbkMsSUFDdkIrVSxFQUFVcW1CLEVBQ2IsT0FBT0UsR0FHVCxRQUFTa04sR0FBZVQsRUFBa0JELEdBQ3hDLElBQUtBLEVBQWUsTUFBT0MsRUFDM0IsSUFBSTBCLEdBQWdCMUIsRUFBaUJuTSxnQkFDakM4TixHQUFZLEVBRVpDLEVBQ0FGLElBQWtCckIsR0FDbEJxQixJQUFrQnBCLEVBRWxCaHRDLEVBQUtzdUMsRUFBZSxTQUFzQzNwQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNuRixHQUFJajBDLEdBQVFxMUMsR0FBYXBCLEVBQVNBLEVBQU8sR0FBS1AsRUFBaUIvbkMsRUFBTzJRLEVBQVFxYyxFQUFRc2IsRUFDdEYsT0FBT1IsR0FBY3p6QyxFQUFPMkwsRUFBTzJRLElBQ2pDLFNBQXNDM1EsRUFBTzJRLEVBQVFxYyxFQUFRc2IsR0FDL0QsR0FBSWowQyxHQUFRMHpDLEVBQWlCL25DLEVBQU8yUSxFQUFRcWMsRUFBUXNiLEdBQ2hEdDVCLEVBQVM4NEIsRUFBY3p6QyxFQUFPMkwsRUFBTzJRLEVBR3pDLE9BQU94ZixHQUFVa0QsR0FBUzJhLEVBQVMzYSxFQXlCckMsT0FyQkFxMUMsSUFBYTNCLEVBQWlCTyxPQUMxQm1CLEdBQWlCQSxJQUFrQmxCLEdBQ3JDbHRDLEVBQUd1Z0MsZ0JBQWtCNk4sRUFDckJwdUMsRUFBR2l0QyxPQUFTUCxFQUFpQk8sUUFDbkJSLEVBQWMzYSxZQUV4Qjl4QixFQUFHdWdDLGdCQUFrQjJNLEVBQ3JCbHRDLEVBQUdpdEMsT0FBU1AsRUFBaUJPLE9BQVNQLEVBQWlCTyxRQUFVUCxJQUcvRDFzQyxFQUFHaXRDLFNBQ0xqdEMsRUFBR2l0QyxPQUFTanRDLEVBQUdpdEMsT0FBT2oyQyxJQUFJLFNBQVNtTCxHQUc3QixNQUFJQSxHQUFFcW1DLFNBQVdVLEdBQ1IsU0FBb0JxRixHQUFLLE1BQU9wc0MsR0FBRW9zQyxJQUVwQ3BzQyxLQUlSbkMsRUE1TlQsR0FBSXd1QyxHQUFlL0MsS0FBTStDLGFBQ3JCMUIsR0FDRXJCLElBQUsrQyxFQUNMekMsU0FBVXp1QyxFQUFLeXVDLEdBQ2YwQyxrQkFBbUJuMkMsRUFBV3V6QyxJQUFlQSxFQUM3QzZDLHFCQUFzQnAyQyxFQUFXd3pDLElBQWtCQSxFQUV6RCxPQUFPaHJCLEtBMGJYLFFBQVM2dEIsTUFDUCxHQUFJQyxJQUE2QixDQUNqQ3BtQyxNQUFLOEksTUFBUSxhQUFjLG9CQUFxQixTQUFTZ0YsRUFBWTRJLEdBQ25FLE1BQU8ydkIsSUFBUyxTQUFTMzBCLEdBQ3ZCNUQsRUFBVzVhLFdBQVd3ZSxJQUNyQmdGLEVBQW1CMHZCLEtBZ0J4QnBtQyxLQUFLb21DLDJCQUE2QixTQUFTNTFDLEdBQ3pDLE1BQUlsRCxHQUFVa0QsSUFDWjQxQyxFQUE2QjUxQyxFQUN0QndQLE1BRUFvbUMsR0FNYixRQUFTRSxNQUNQLEdBQUlGLElBQTZCLENBQ2pDcG1DLE1BQUs4SSxNQUFRLFdBQVksb0JBQXFCLFNBQVN5bkIsRUFBVTdaLEdBQy9ELE1BQU8ydkIsSUFBUyxTQUFTMzBCLEdBQ3ZCNmUsRUFBU2hlLE1BQU1iLElBQ2RnRixFQUFtQjB2QixLQUd4QnBtQyxLQUFLb21DLDJCQUE2QixTQUFTNTFDLEdBQ3pDLE1BQUlsRCxHQUFVa0QsSUFDWjQxQyxFQUE2QjUxQyxFQUN0QndQLE1BRUFvbUMsR0FlYixRQUFTQyxJQUFTRSxFQUFVQyxFQUFrQkosR0FlNUMsUUFBUzd6QixLQUNQLE1BQU8sSUFBSWswQixHQUdiLFFBQVNBLEtBQ1AsR0FBSTNWLEdBQVU5d0IsS0FBSzh3QixRQUFVLEdBQUk0VixFQUVqQzFtQyxNQUFLc3lCLFFBQVUsU0FBUzE2QixHQUFPNDdCLEVBQWUxQyxFQUFTbDVCLElBQ3ZEb0ksS0FBSzR4QixPQUFTLFNBQVNsMEIsR0FBVWlwQyxFQUFjN1YsRUFBU3B6QixJQUN4RHNDLEtBQUt1NUIsT0FBUyxTQUFTcU4sR0FBWUMsRUFBYy9WLEVBQVM4VixJQUk1RCxRQUFTRixLQUNQMW1DLEtBQUt1OUIsU0FBWW5PLE9BQVEsR0E4QjNCLFFBQVMwWCxHQUFhajFCLEdBQ3BCLEdBQUlyYSxHQUFJczVCLEVBQVNpVyxDQUVqQkEsR0FBVWwxQixFQUFNazFCLFFBQ2hCbDFCLEVBQU1tMUIsa0JBQW1CLEVBQ3pCbjFCLEVBQU1rMUIsWUFBVXR4QyxFQUNoQixLQUNFLElBQUssR0FBSXhILEdBQUksRUFBR2lELEVBQUs2MUMsRUFBUWg0QyxPQUFRZCxFQUFJaUQsSUFBTWpELEVBQUcsQ0FDaERnNUMsR0FBMkJwMUIsR0FDM0JpZixFQUFVaVcsRUFBUTk0QyxHQUFHLEdBQ3JCdUosRUFBS3V2QyxFQUFROTRDLEdBQUc0akIsRUFBTXVkLE9BQ3RCLEtBQ010L0IsRUFBVzBILEdBQ2JnOEIsRUFBZTFDLEVBQVN0NUIsRUFBR3FhLEVBQU1yaEIsUUFDUCxJQUFqQnFoQixFQUFNdWQsT0FDZm9FLEVBQWUxQyxFQUFTamYsRUFBTXJoQixPQUU5Qm0yQyxFQUFjN1YsRUFBU2pmLEVBQU1yaEIsT0FFL0IsTUFBT21KLEdBQ1BndEMsRUFBYzdWLEVBQVNuM0IsS0FHM0IsVUFDRXV0QyxFQUNFZCxHQUE0QyxJQUFkYyxHQUNoQ1gsRUFBU1ksSUFLZixRQUFTQSxLQUVQLE1BQVFELEdBQWFFLEVBQVdyNEMsUUFBUSxDQUN0QyxHQUFJczRDLEdBQVVELEVBQVd4NkIsT0FDekIsS0FBSzA2QixHQUF3QkQsR0FBVSxDQUNyQ0osR0FBMkJJLEVBQzNCLElBQUlFLEdBQWUsaUNBQW1DNzRDLEdBQWMyNEMsRUFBUTcyQyxNQUN4RXdDLEdBQVFxMEMsRUFBUTcyQyxPQUNsQmcyQyxFQUFpQmEsRUFBUTcyQyxNQUFPKzJDLEdBRWhDZixFQUFpQmUsS0FNekIsUUFBU0MsR0FBcUIzMUIsSUFDeEJ1MEIsR0FBK0J2MEIsRUFBTWsxQixTQUE0QixJQUFqQmwxQixFQUFNdWQsUUFBaUJrWSxHQUF3QnoxQixLQUMvRSxJQUFkcTFCLEdBQXlDLElBQXRCRSxFQUFXcjRDLFFBQ2hDdzNDLEVBQVNZLEdBRVhDLEVBQVdseUMsS0FBSzJjLEtBRWRBLEVBQU1tMUIsa0JBQXFCbjFCLEVBQU1rMUIsVUFDckNsMUIsRUFBTW0xQixrQkFBbUIsSUFDdkJFLEVBQ0ZYLEVBQVMsV0FBYU8sRUFBYWoxQixNQUdyQyxRQUFTMmhCLEdBQWUxQyxFQUFTbDVCLEdBQzNCazVCLEVBQVF5TSxRQUFRbk8sU0FDaEJ4M0IsSUFBUWs1QixFQUNWMlcsRUFBUzNXLEVBQVM0VyxFQUNoQixTQUNBLHFFQUNBOXZDLElBRUYrdkMsRUFBVTdXLEVBQVNsNUIsSUFLdkIsUUFBUyt2QyxHQUFVN1csRUFBU2w1QixHQWlCMUIsUUFBU2d3QyxHQUFVaHdDLEdBQ2J1N0IsSUFDSkEsR0FBTyxFQUNQd1UsRUFBVTdXLEVBQVNsNUIsSUFFckIsUUFBU2l3QyxHQUFTandDLEdBQ1p1N0IsSUFDSkEsR0FBTyxFQUNQc1UsRUFBUzNXLEVBQVNsNUIsSUFFcEIsUUFBU2t3QyxHQUFTbEIsR0FDaEJDLEVBQWMvVixFQUFTOFYsR0EzQnpCLEdBQUluekMsR0FDQTAvQixHQUFPLENBQ1gsTUFDTS9sQyxFQUFTd0ssSUFBUTlILEVBQVc4SCxNQUFNbkUsRUFBT21FLEVBQUluRSxNQUM3QzNELEVBQVcyRCxJQUNicTlCLEVBQVF5TSxRQUFRbk8sUUFBVSxFQUMxQjM3QixFQUFLekQsS0FBSzRILEVBQUtnd0MsRUFBV0MsRUFBVUMsS0FFcENoWCxFQUFReU0sUUFBUS9zQyxNQUFRb0gsRUFDeEJrNUIsRUFBUXlNLFFBQVFuTyxPQUFTLEVBQ3pCb1ksRUFBcUIxVyxFQUFReU0sVUFFL0IsTUFBTzVqQyxHQUNQa3VDLEVBQVNsdUMsSUFrQmIsUUFBU2d0QyxHQUFjN1YsRUFBU3B6QixHQUMxQm96QixFQUFReU0sUUFBUW5PLFFBQ3BCcVksRUFBUzNXLEVBQVNwekIsR0FHcEIsUUFBUytwQyxHQUFTM1csRUFBU3B6QixHQUN6Qm96QixFQUFReU0sUUFBUS9zQyxNQUFRa04sRUFDeEJvekIsRUFBUXlNLFFBQVFuTyxPQUFTLEVBQ3pCb1ksRUFBcUIxVyxFQUFReU0sU0FHL0IsUUFBU3NKLEdBQWMvVixFQUFTOFYsR0FDOUIsR0FBSTFSLEdBQVlwRSxFQUFReU0sUUFBUXdKLE9BRTNCalcsR0FBUXlNLFFBQVFuTyxRQUFVLEdBQU04RixHQUFhQSxFQUFVbm1DLFFBQzFEdzNDLEVBQVMsV0FFUCxJQUFLLEdBREQ3MEIsR0FBVXZHLEVBQ0xsZCxFQUFJLEVBQUdpRCxFQUFLZ2tDLEVBQVVubUMsT0FBUWQsRUFBSWlELEVBQUlqRCxJQUFLLENBQ2xEa2QsRUFBUytwQixFQUFVam5DLEdBQUcsR0FDdEJ5akIsRUFBV3dqQixFQUFVam5DLEdBQUcsRUFDeEIsS0FDRTQ0QyxFQUFjMTdCLEVBQVFyYixFQUFXNGhCLEdBQVlBLEVBQVNrMUIsR0FBWUEsR0FDbEUsTUFBT2p0QyxHQUNQNnNDLEVBQWlCN3NDLE9BMkMzQixRQUFTaTRCLEdBQU9sMEIsR0FDZCxHQUFJeU4sR0FBUyxHQUFJdTdCLEVBRWpCLE9BREFDLEdBQWN4N0IsRUFBUXpOLEdBQ2Z5TixFQUdULFFBQVM0OEIsR0FBZXYzQyxFQUFPdzNDLEVBQVV0MkIsR0FDdkMsR0FBSXUyQixHQUFpQixJQUNyQixLQUNNbjRDLEVBQVc0aEIsS0FBV3UyQixFQUFpQnYyQixLQUMzQyxNQUFPL1gsR0FDUCxNQUFPaTRCLEdBQU9qNEIsR0FFaEIsTUFBSW5HLEdBQWN5MEMsR0FDVEEsRUFBZXgwQyxLQUFLLFdBQ3pCLE1BQU91MEMsR0FBU3gzQyxJQUNmb2hDLEdBRUlvVyxFQUFTeDNDLEdBc0JwQixRQUFTMDNDLEdBQUsxM0MsRUFBT2toQixFQUFVeTJCLEVBQVNDLEdBQ3RDLEdBQUlqOUIsR0FBUyxHQUFJdTdCLEVBRWpCLE9BREFsVCxHQUFlcm9CLEVBQVEzYSxHQUNoQjJhLEVBQU8xWCxLQUFLaWUsRUFBVXkyQixFQUFTQyxHQW1DeEMsUUFBU2huQyxHQUFJaW5DLEdBQ1gsR0FBSWw5QixHQUFTLEdBQUl1N0IsR0FDYjRCLEVBQVUsRUFDVkMsRUFBVW41QyxHQUFRaTVDLFFBZ0J0QixPQWRBMzRDLEdBQVEyNEMsRUFBVSxTQUFTdlgsRUFBU2poQyxHQUNsQ3k0QyxJQUNBSixFQUFLcFgsR0FBU3I5QixLQUFLLFNBQVNqRCxHQUMxQiszQyxFQUFRMTRDLEdBQU9XLElBQ1A4M0MsR0FBVTlVLEVBQWVyb0IsRUFBUW85QixJQUN4QyxTQUFTN3FDLEdBQ1ZpcEMsRUFBY3g3QixFQUFRek4sT0FJVixJQUFaNHFDLEdBQ0Y5VSxFQUFlcm9CLEVBQVFvOUIsR0FHbEJwOUIsRUFpQlQsUUFBU3E5QixHQUFLSCxHQUNaLEdBQUk1VSxHQUFXbGhCLEdBTWYsT0FKQTdpQixHQUFRMjRDLEVBQVUsU0FBU3ZYLEdBQ3pCb1gsRUFBS3BYLEdBQVNyOUIsS0FBS2dnQyxFQUFTbkIsUUFBU21CLEVBQVM3QixVQUd6QzZCLEVBQVMzQyxRQUdsQixRQUFTMlgsR0FBR1QsR0FPVixRQUFTVSxHQUFVbDRDLEdBQ2pCZ2pDLEVBQWUxQyxFQUFTdGdDLEdBRzFCLFFBQVN3Z0MsR0FBU3R6QixHQUNoQmlwQyxFQUFjN1YsRUFBU3B6QixHQVh6QixJQUFLNU4sRUFBV2s0QyxHQUNkLEtBQU1OLEdBQVMsVUFBVyxpQ0FBb0NNLEVBR2hFLElBQUlsWCxHQUFVLEdBQUk0VixFQVlsQixPQUZBc0IsR0FBU1UsRUFBVzFYLEdBRWJGLEVBbFhULEdBQUk0VyxHQUFXOTVDLEVBQU8sS0FBTSs2QyxXQUN4QnpCLEVBQVksRUFDWkUsSUE2QkpyMUMsR0FBTzIwQyxFQUFRaHlDLFdBQ2JqQixLQUFNLFNBQVNtMUMsRUFBYUMsRUFBWVQsR0FDdEMsR0FBSXQxQyxFQUFZODFDLElBQWdCOTFDLEVBQVkrMUMsSUFBZS8xQyxFQUFZczFDLEdBQ3JFLE1BQU9wb0MsS0FFVCxJQUFJbUwsR0FBUyxHQUFJdTdCLEVBTWpCLE9BSkExbUMsTUFBS3U5QixRQUFRd0osUUFBVS9tQyxLQUFLdTlCLFFBQVF3SixZQUNwQy9tQyxLQUFLdTlCLFFBQVF3SixRQUFRN3hDLE1BQU1pVyxFQUFReTlCLEVBQWFDLEVBQVlULElBQ3hEcG9DLEtBQUt1OUIsUUFBUW5PLE9BQVMsR0FBR29ZLEVBQXFCeG5DLEtBQUt1OUIsU0FFaERweUIsR0FHVDRhLE1BQVMsU0FBU3JVLEdBQ2hCLE1BQU8xUixNQUFLdk0sS0FBSyxLQUFNaWUsSUFHekJraEIsUUFBVyxTQUFTbGhCLEVBQVUwMkIsR0FDNUIsTUFBT3BvQyxNQUFLdk0sS0FBSyxTQUFTakQsR0FDeEIsTUFBT3UzQyxHQUFldjNDLEVBQU84aEMsRUFBUzVnQixJQUNyQyxTQUFTblcsR0FDVixNQUFPd3NDLEdBQWV4c0MsRUFBT3EyQixFQUFRbGdCLElBQ3BDMDJCLEtBMk9QLElBQUk5VixHQUFVNFYsQ0ErRmQsT0FUQU8sR0FBRy96QyxVQUFZZ3lDLEVBQVFoeUMsVUFFdkIrekMsRUFBR2wyQixNQUFRQSxFQUNYazJCLEVBQUc3VyxPQUFTQSxFQUNaNlcsRUFBR1AsS0FBT0EsRUFDVk8sRUFBR25XLFFBQVVBLEVBQ2JtVyxFQUFHcm5DLElBQU1BLEVBQ1RxbkMsRUFBR0QsS0FBT0EsRUFFSEMsRUFHVCxRQUFTbkIsSUFBd0J6MUIsR0FDL0IsUUFBU0EsRUFBTWkzQixJQUVqQixRQUFTN0IsSUFBMkJwMUIsR0FDbENBLEVBQU1pM0IsS0FBTSxFQUVkLFFBQVNyUCxJQUFzQnNQLEdBQzdCOUIsR0FBMkI4QixFQUFFeEwsU0FJL0IsUUFBU3lMLE1BQ1BocEMsS0FBSzhJLE1BQVEsVUFBVyxXQUFZLFNBQVM4RSxFQUFTcTdCLEdBQ3BELEdBQUlDLEdBQXdCdDdCLEVBQVFzN0IsdUJBQ1J0N0IsRUFBUXU3Qiw0QkFFaENDLEVBQXVCeDdCLEVBQVF3N0Isc0JBQ1J4N0IsRUFBUXk3Qiw0QkFDUno3QixFQUFRMDdCLGtDQUUvQkMsSUFBaUJMLEVBQ2pCTSxFQUFNRCxFQUNOLFNBQVMveEMsR0FDUCxHQUFJcWMsR0FBS3ExQixFQUFzQjF4QyxFQUMvQixPQUFPLFlBQ0w0eEMsRUFBcUJ2MUIsS0FHekIsU0FBU3JjLEdBQ1AsR0FBSWl5QyxHQUFRUixFQUFTenhDLEVBQUksT0FBTyxFQUNoQyxPQUFPLFlBQ0x5eEMsRUFBU3YyQixPQUFPKzJCLElBTXhCLE9BRkFELEdBQUlFLFVBQVlILEVBRVRDLElBeUVYLFFBQVNHLE1BYVAsUUFBU0MsR0FBc0J2M0MsR0FDN0IsUUFBU3czQyxLQUNQN3BDLEtBQUs4cEMsV0FBYTlwQyxLQUFLK3BDLGNBQ25CL3BDLEtBQUtncUMsWUFBY2hxQyxLQUFLaXFDLFlBQWMsS0FDMUNqcUMsS0FBS2txQyxlQUNMbHFDLEtBQUttcUMsbUJBQ0xucUMsS0FBS29xQyxnQkFBa0IsRUFDdkJwcUMsS0FBS3FxQyxJQUFNNTVDLElBQ1h1UCxLQUFLc3FDLGFBQWUsS0FHdEIsTUFEQVQsR0FBV24xQyxVQUFZckMsRUFDaEJ3M0MsRUF2QlQsR0FBSS94QixHQUFNLEdBQ055eUIsRUFBbUIzOEMsRUFBTyxjQUMxQjQ4QyxFQUFpQixLQUNqQkMsRUFBZSxJQUVuQnpxQyxNQUFLMHFDLFVBQVksU0FBU2w2QyxHQUl4QixNQUhJckMsV0FBVVksU0FDWitvQixFQUFNdG5CLEdBRURzbkIsR0FpQlQ5WCxLQUFLOEksTUFBUSxvQkFBcUIsU0FBVSxXQUN4QyxTQUFTNE4sRUFBbUI0QixFQUFRaVksR0FFdEMsUUFBU29hLEdBQWtCQyxHQUN2QkEsRUFBT0MsYUFBYWhsQixhQUFjLEVBR3RDLFFBQVNpbEIsR0FBYXJtQixHQUdQLElBQVR2WCxLQU1FdVgsRUFBT3VsQixhQUNUYyxFQUFhcm1CLEVBQU91bEIsYUFFbEJ2bEIsRUFBT3NsQixlQUNUZSxFQUFhcm1CLEVBQU9zbEIsZ0JBV3hCdGxCLEVBQU9uSyxRQUFVbUssRUFBT3NsQixjQUFnQnRsQixFQUFPc21CLGNBQWdCdG1CLEVBQU91bEIsWUFDbEV2bEIsRUFBT3dsQixZQUFjeGxCLEVBQU91bUIsTUFBUXZtQixFQUFPcWxCLFdBQWEsS0EyQzlELFFBQVNtQixLQUNQanJDLEtBQUtxcUMsSUFBTTU1QyxJQUNYdVAsS0FBS2t6QixRQUFVbHpCLEtBQUtzYSxRQUFVdGEsS0FBSzhwQyxXQUNwQjlwQyxLQUFLK3BDLGNBQWdCL3BDLEtBQUsrcUMsY0FDMUIvcUMsS0FBS2dxQyxZQUFjaHFDLEtBQUtpcUMsWUFBYyxLQUNyRGpxQyxLQUFLZ3JDLE1BQVFockMsS0FDYkEsS0FBSzZsQixhQUFjLEVBQ25CN2xCLEtBQUtrcUMsZUFDTGxxQyxLQUFLbXFDLG1CQUNMbnFDLEtBQUtvcUMsZ0JBQWtCLEVBQ3ZCcHFDLEtBQUs2Z0Isa0JBQW9CLEtBMnFDM0IsUUFBU3FxQixHQUFXQyxHQUNsQixHQUFJcjlCLEVBQVdvbEIsUUFDYixLQUFNcVgsR0FBaUIsU0FBVSwwQkFBMkJ6OEIsRUFBV29sQixRQUd6RXBsQixHQUFXb2xCLFFBQVVpWSxFQUd2QixRQUFTQyxLQUNQdDlCLEVBQVdvbEIsUUFBVSxLQUd2QixRQUFTbVksR0FBdUI1ZixFQUFTc04sR0FDdkMsR0FDRXROLEVBQVEyZSxpQkFBbUJyUixRQUNuQnROLEVBQVVBLEVBQVFuUixTQUc5QixRQUFTZ3hCLEdBQXVCN2YsRUFBU3NOLEVBQU85OUIsR0FDOUMsR0FDRXd3QixFQUFRMGUsZ0JBQWdCbHZDLElBQVM4OUIsRUFFSyxJQUFsQ3ROLEVBQVEwZSxnQkFBZ0JsdkMsVUFDbkJ3d0IsR0FBUTBlLGdCQUFnQmx2QyxTQUV6Qnd3QixFQUFVQSxFQUFRblIsU0FPOUIsUUFBU2l4QixNQUVULFFBQVNDLEtBQ1AsS0FBT0MsRUFBZ0IxOEMsUUFDckIsSUFDRTA4QyxFQUFnQjcrQixVQUNoQixNQUFPalQsR0FDUCtjLEVBQWtCL2MsR0FHdEI4d0MsRUFBZSxLQUdqQixRQUFTaUIsS0FDYyxPQUFqQmpCLElBQ0ZBLEVBQWVsYSxFQUFTaGUsTUFBTSxXQUM1QnpFLEVBQVd6UixPQUFPbXZDLE1BaHNDeEJQLEVBQU12MkMsV0FDSmdCLFlBQWF1MUMsRUE4QmIxd0IsS0FBTSxTQUFTb3hCLEVBQVN0NUMsR0FDdEIsR0FBSXU1QyxFQStCSixPQTdCQXY1QyxHQUFTQSxHQUFVMk4sS0FFZjJyQyxHQUNGQyxFQUFRLEdBQUlYLEdBQ1pXLEVBQU1aLE1BQVFockMsS0FBS2dyQyxRQUlkaHJDLEtBQUtzcUMsZUFDUnRxQyxLQUFLc3FDLGFBQWVWLEVBQXNCNXBDLE9BRTVDNHJDLEVBQVEsR0FBSTVyQyxNQUFLc3FDLGNBRW5Cc0IsRUFBTXR4QixRQUFVam9CLEVBQ2hCdTVDLEVBQU1iLGNBQWdCMTRDLEVBQU80M0MsWUFDekI1M0MsRUFBTzIzQyxhQUNUMzNDLEVBQU80M0MsWUFBWUYsY0FBZ0I2QixFQUNuQ3Y1QyxFQUFPNDNDLFlBQWMyQixHQUVyQnY1QyxFQUFPMjNDLFlBQWMzM0MsRUFBTzQzQyxZQUFjMkIsR0FReENELEdBQVd0NUMsSUFBVzJOLE9BQU00ckMsRUFBTTVxQixJQUFJLFdBQVkycEIsR0FFL0NpQixHQXlIVHo0QyxPQUFRLFNBQVMwNEMsRUFBVTM2QixFQUFVcW1CLEVBQWdCd04sR0FDbkQsR0FBSTduQyxHQUFNb2IsRUFBT3V6QixFQUVqQixJQUFJM3VDLEVBQUk2NkIsZ0JBQ04sTUFBTzc2QixHQUFJNjZCLGdCQUFnQi8zQixLQUFNa1IsRUFBVXFtQixFQUFnQnI2QixFQUFLMnVDLEVBRWxFLElBQUkxdkMsR0FBUTZELEtBQ1J2TCxFQUFRMEgsRUFBTTJ0QyxXQUNkZ0MsR0FDRXQwQyxHQUFJMFosRUFDSjVHLEtBQU1paEMsRUFDTnJ1QyxJQUFLQSxFQUNMNDZCLElBQUtpTixHQUF5QjhHLEVBQzlCRSxLQUFNeFUsRUFtQlosT0FoQkFpVCxHQUFpQixLQUVaMTZDLEVBQVdvaEIsS0FDZDQ2QixFQUFRdDBDLEdBQUtoRixHQUdWaUMsSUFDSEEsRUFBUTBILEVBQU0ydEMsY0FDZHIxQyxFQUFNdTNDLG9CQUFzQixHQUk5QnYzQyxFQUFNb0gsUUFBUWl3QyxHQUNkcjNDLEVBQU11M0MscUJBQ05YLEVBQXVCcnJDLEtBQU0sR0FFdEIsV0FDTCxHQUFJblIsR0FBUStGLEVBQVlILEVBQU9xM0MsRUFDM0JqOUMsSUFBUyxJQUNYdzhDLEVBQXVCbHZDLEdBQVEsR0FDM0J0TixFQUFRNEYsRUFBTXUzQyxvQkFDaEJ2M0MsRUFBTXUzQyxzQkFHVnhCLEVBQWlCLE9BOERyQi9SLFlBQWEsU0FBU3dULEVBQWtCLzZCLEdBd0N0QyxRQUFTZzdCLEtBQ1BDLEdBQTBCLEVBRXRCQyxHQUNGQSxHQUFXLEVBQ1hsN0IsRUFBU203QixFQUFXQSxFQUFXOTBDLElBRS9CMlosRUFBU203QixFQUFXM1QsRUFBV25oQyxHQTlDbkMsR0FBSW1oQyxHQUFZLEdBQUlscEMsT0FBTXk4QyxFQUFpQmw5QyxRQUN2Q3M5QyxFQUFZLEdBQUk3OEMsT0FBTXk4QyxFQUFpQmw5QyxRQUN2Q3U5QyxLQUNBLzBDLEVBQU95SSxLQUNQbXNDLEdBQTBCLEVBQzFCQyxHQUFXLENBRWYsS0FBS0gsRUFBaUJsOUMsT0FBUSxDQUU1QixHQUFJdzlDLElBQWEsQ0FJakIsT0FIQWgxQyxHQUFLckUsV0FBVyxXQUNWcTVDLEdBQVlyN0IsRUFBU203QixFQUFXQSxFQUFXOTBDLEtBRTFDLFdBQ0xnMUMsR0FBYSxHQUlqQixNQUFnQyxLQUE1Qk4sRUFBaUJsOUMsT0FFWmlSLEtBQUs3TSxPQUFPODRDLEVBQWlCLEdBQUksU0FBMEJ6N0MsRUFBT2kzQixFQUFVdHJCLEdBQ2pGa3dDLEVBQVUsR0FBSzc3QyxFQUNma29DLEVBQVUsR0FBS2pSLEVBQ2Z2VyxFQUFTbTdCLEVBQVk3N0MsSUFBVWkzQixFQUFZNGtCLEVBQVkzVCxFQUFXdjhCLE1BSXRFek0sRUFBUXU4QyxFQUFrQixTQUFTL0ssRUFBTWp6QyxHQUN2QyxHQUFJdStDLEdBQVlqMUMsRUFBS3BFLE9BQU8rdEMsRUFBTSxTQUE2QjF3QyxFQUFPaTNCLEdBQ3BFNGtCLEVBQVVwK0MsR0FBS3VDLEVBQ2Zrb0MsRUFBVXpxQyxHQUFLdzVCLEVBQ1Ywa0IsSUFDSEEsR0FBMEIsRUFDMUI1MEMsRUFBS3JFLFdBQVdnNUMsS0FHcEJJLEdBQWNwM0MsS0FBS3MzQyxLQWNkLFdBQ0wsS0FBT0YsRUFBY3Y5QyxRQUNuQnU5QyxFQUFjMS9CLGFBNkRwQjJjLGlCQUFrQixTQUFTcjZCLEVBQUtnaUIsR0FvQjlCLFFBQVN1N0IsR0FBNEJDLEdBQ25DcGxCLEVBQVdvbEIsQ0FDWCxJQUFJQyxHQUFXOThDLEVBQWMrOEMsRUFBU0MsQ0FHdEMsS0FBSS81QyxFQUFZdzBCLEdBQWhCLENBRUEsR0FBS2w2QixFQUFTazZCLEdBS1AsR0FBSXI0QixFQUFZcTRCLEdBQVcsQ0FDNUJHLElBQWFxbEIsSUFFZnJsQixFQUFXcWxCLEVBQ1hDLEVBQVl0bEIsRUFBUzE0QixPQUFTLEVBQzlCaStDLEtBR0ZMLEVBQVlybEIsRUFBU3Y0QixPQUVqQmcrQyxJQUFjSixJQUVoQkssSUFDQXZsQixFQUFTMTRCLE9BQVNnK0MsRUFBWUosRUFHaEMsS0FBSyxHQUFJMStDLEdBQUksRUFBR0EsRUFBSTArQyxFQUFXMStDLElBQzdCNCtDLEVBQVVwbEIsRUFBU3g1QixHQUNuQjIrQyxFQUFVdGxCLEVBQVNyNUIsR0FHUjQrQyxJQUFZQSxHQUFhRCxJQUFZQSxHQUMvQkMsSUFBWUQsSUFDM0JJLElBQ0F2bEIsRUFBU3g1QixHQUFLMitDLE9BR2IsQ0FDRG5sQixJQUFhd2xCLElBRWZ4bEIsRUFBV3dsQixLQUNYRixFQUFZLEVBQ1pDLEtBR0ZMLEVBQVksQ0FDWixLQUFLOThDLElBQU95M0IsR0FDTnYzQixHQUFlQyxLQUFLczNCLEVBQVV6M0IsS0FDaEM4OEMsSUFDQUMsRUFBVXRsQixFQUFTejNCLEdBQ25CZzlDLEVBQVVwbEIsRUFBUzUzQixHQUVmQSxJQUFPNDNCLEdBRUVvbEIsSUFBWUEsR0FBYUQsSUFBWUEsR0FDL0JDLElBQVlELElBQzNCSSxJQUNBdmxCLEVBQVM1M0IsR0FBTys4QyxJQUdsQkcsSUFDQXRsQixFQUFTNTNCLEdBQU8rOEMsRUFDaEJJLEtBSU4sSUFBSUQsRUFBWUosRUFBVyxDQUV6QkssR0FDQSxLQUFLbjlDLElBQU80M0IsR0FDTDEzQixHQUFlQyxLQUFLczNCLEVBQVV6M0IsS0FDakNrOUMsVUFDT3RsQixHQUFTNTNCLFNBbEVsQjQzQixLQUFhSCxJQUNmRyxFQUFXSCxFQUNYMGxCLElBcUVKLE9BQU9BLElBR1QsUUFBU0UsS0FTUCxHQVJJQyxHQUNGQSxHQUFVLEVBQ1ZqOEIsRUFBU29XLEVBQVVBLEVBQVUvdkIsSUFFN0IyWixFQUFTb1csRUFBVThsQixFQUFjNzFDLEdBSS9CODFDLEVBQ0YsR0FBS2pnRCxFQUFTazZCLEdBR1AsR0FBSXI0QixFQUFZcTRCLEdBQVcsQ0FDaEM4bEIsRUFBZSxHQUFJNTlDLE9BQU04M0IsRUFBU3Y0QixPQUNsQyxLQUFLLEdBQUlkLEdBQUksRUFBR0EsRUFBSXE1QixFQUFTdjRCLE9BQVFkLElBQ25DbS9DLEVBQWFuL0MsR0FBS3E1QixFQUFTcjVCLE9BRXhCLENBQ0xtL0MsSUFDQSxLQUFLLEdBQUl2OUMsS0FBT3kzQixHQUNWdjNCLEdBQWVDLEtBQUtzM0IsRUFBVXozQixLQUNoQ3U5QyxFQUFhdjlDLEdBQU95M0IsRUFBU3ozQixRQVZqQ3U5QyxHQUFlOWxCLEVBakhyQm1sQixFQUE0Qm5qQixXQUFZLENBRXhDLElBRUloQyxHQUdBRyxFQUVBMmxCLEVBUEE3MUMsRUFBT3lJLEtBU1BxdEMsRUFBcUJuOEIsRUFBU25pQixPQUFTLEVBQ3ZDaStDLEVBQWlCLEVBQ2pCTSxFQUFpQmgxQixFQUFPcHBCLEVBQUt1OUMsR0FDN0JLLEtBQ0FHLEtBQ0FFLEdBQVUsRUFDVkosRUFBWSxDQWlIaEIsT0FBTy9zQyxNQUFLN00sT0FBT202QyxFQUFnQkosSUFzRHJDMU8sUUFBUyxXQUNQLEdBQUkrTyxHQUFPLzhDLEVBQU84WixFQUFNOVMsRUFBSTBGLEVBQ3hCc3dDLEVBQ0FDLEVBQ0FDLEVBQU1qaUIsRUFFTmtpQixFQUFRQyxFQUhEQyxFQUFNLzFCLEVBQ0VyUCxFQUFTekksS0FDeEI4dEMsSUFHSjVDLEdBQVcsV0FFWDNhLEVBQVNsZSxtQkFFTHJTLE9BQVM4TixHQUErQixPQUFqQjI4QixJQUd6QmxhLEVBQVNoZSxNQUFNRyxPQUFPKzNCLEdBQ3RCZSxLQUdGaEIsRUFBaUIsSUFFakIsR0FBRyxDQUNEaUQsR0FBUSxFQUNSaGlCLEVBQVVoakIsQ0FLVixLQUFLLEdBQUlzbEMsR0FBcUIsRUFBR0EsRUFBcUJDLEVBQVdqL0MsT0FBUWcvQyxJQUFzQixDQUM3RixJQUNFSCxFQUFZSSxFQUFXRCxHQUN2QnYyQyxFQUFLbzJDLEVBQVVwMkMsR0FDZkEsRUFBR28yQyxFQUFVenhDLE1BQU95eEMsRUFBVTlnQyxRQUM5QixNQUFPblQsR0FDUCtjLEVBQWtCL2MsR0FFcEI2d0MsRUFBaUIsS0FFbkJ3RCxFQUFXai9DLE9BQVMsQ0FFcEJrL0MsR0FDQSxFQUFHLENBQ0QsR0FBS1QsRUFBVy9oQixFQUFRcWUsV0FHdEIsSUFEQTBELEVBQVN4QixtQkFBcUJ3QixFQUFTeitDLE9BQ2hDeStDLEVBQVN4QixzQkFDZCxJQUlFLEdBSEF1QixFQUFRQyxFQUFTQSxFQUFTeEIsb0JBS3hCLEdBREE5dUMsRUFBTXF3QyxFQUFNcndDLEtBQ1AxTSxFQUFRME0sRUFBSXV1QixPQUFlbmhCLEVBQU9pakMsRUFBTWpqQyxRQUN2Q2lqQyxFQUFNeEIsR0FDRnYxQyxFQUFPaEcsRUFBTzhaLEdBQ2I1UixHQUFZbEksSUFBVWtJLEdBQVk0UixLQWV0QyxHQUFJaWpDLElBQVUvQyxFQUFnQixDQUduQ2lELEdBQVEsQ0FDUixNQUFNUSxRQWxCTlIsSUFBUSxFQUNSakQsRUFBaUIrQyxFQUNqQkEsRUFBTWpqQyxLQUFPaWpDLEVBQU14QixHQUFLajNDLEVBQUt0RSxFQUFPLE1BQVFBLEVBQzVDZ0gsRUFBSysxQyxFQUFNLzFDLEdBQ1hBLEVBQUdoSCxFQUFTOFosSUFBU2loQyxFQUFnQi82QyxFQUFROFosRUFBT21oQixHQUNoRG9pQixFQUFNLElBQ1JGLEVBQVMsRUFBSUUsRUFDUkMsRUFBU0gsS0FBU0csRUFBU0gsT0FDaENHLEVBQVNILEdBQVF6NEMsTUFDZmc1QyxJQUFLcCtDLEVBQVd5OUMsRUFBTXpWLEtBQU8sUUFBVXlWLEVBQU16VixJQUFJNzhCLE1BQVFzeUMsRUFBTXpWLElBQUlqbEMsWUFBYzA2QyxFQUFNelYsSUFDdkYxb0IsT0FBUTVlLEVBQ1I2ZSxPQUFRL0UsS0FVaEIsTUFBTzNRLEdBQ1ArYyxFQUFrQi9jLEdBUXhCLEtBQU0rekMsRUFBU2ppQixFQUFRMmUsaUJBQW1CM2UsRUFBUXVlLGFBQzdDdmUsSUFBWWhqQixHQUFVZ2pCLEVBQVFzZSxlQUNqQyxLQUFPdGUsSUFBWWhqQixLQUFZaWxDLEVBQU9qaUIsRUFBUXNlLGdCQUM1Q3RlLEVBQVVBLEVBQVFuUixjQUdkbVIsRUFBVWlpQixFQUlwQixLQUFLRCxHQUFTTyxFQUFXai9DLFVBQWE4K0MsSUFFcEMsS0FEQXpDLEtBQ01iLEVBQWlCLFNBQ25CLDRGQUVBenlCLEVBQUtnMkIsU0FHSkwsR0FBU08sRUFBV2ovQyxPQUs3QixLQUhBcThDLElBR08rQyxFQUEwQkMsRUFBZ0JyL0MsUUFDL0MsSUFDRXEvQyxFQUFnQkQsT0FDaEIsTUFBT3gwQyxHQUNQK2MsRUFBa0IvYyxHQUd0QnkwQyxFQUFnQnIvQyxPQUFTby9DLEVBQTBCLEVBSW5ENWQsRUFBU2xlLG9CQXNDWHROLFNBQVUsV0FFUixJQUFJL0UsS0FBSzZsQixZQUFULENBQ0EsR0FBSXh6QixHQUFTMk4sS0FBS3NhLE9BRWxCdGEsTUFBS3k5QixXQUFXLFlBQ2hCejlCLEtBQUs2bEIsYUFBYyxFQUVmN2xCLE9BQVM4TixHQUVYeWlCLEVBQVNwZSx5QkFHWGs1QixFQUF1QnJyQyxNQUFPQSxLQUFLb3FDLGdCQUNuQyxLQUFLLEdBQUlpRSxLQUFhcnVDLE1BQUttcUMsZ0JBQ3pCbUIsRUFBdUJ0ckMsS0FBTUEsS0FBS21xQyxnQkFBZ0JrRSxHQUFZQSxFQUs1RGg4QyxJQUFVQSxFQUFPMjNDLGNBQWdCaHFDLE9BQU0zTixFQUFPMjNDLFlBQWNocUMsS0FBSytwQyxlQUNqRTEzQyxHQUFVQSxFQUFPNDNDLGNBQWdCanFDLE9BQU0zTixFQUFPNDNDLFlBQWNqcUMsS0FBSytxQyxlQUNqRS9xQyxLQUFLK3FDLGdCQUFlL3FDLEtBQUsrcUMsY0FBY2hCLGNBQWdCL3BDLEtBQUsrcEMsZUFDNUQvcEMsS0FBSytwQyxnQkFBZS9wQyxLQUFLK3BDLGNBQWNnQixjQUFnQi9xQyxLQUFLK3FDLGVBR2hFL3FDLEtBQUsrRSxTQUFXL0UsS0FBS3crQixRQUFVeCtCLEtBQUszRCxPQUFTMkQsS0FBSzlNLFdBQWE4TSxLQUFLaXpCLFlBQWN6Z0MsRUFDbEZ3TixLQUFLZ2hCLElBQU1oaEIsS0FBSzdNLE9BQVM2TSxLQUFLeTRCLFlBQWMsV0FBYSxNQUFPam1DLElBQ2hFd04sS0FBS2txQyxlQUdMbHFDLEtBQUsrcEMsY0FBZ0IsS0FDckJlLEVBQWE5cUMsUUErQmZzdUMsTUFBTyxTQUFTcE4sRUFBTXAwQixHQUNwQixNQUFPd0wsR0FBTzRvQixHQUFNbGhDLEtBQU04TSxJQWlDNUI1WixXQUFZLFNBQVNndUMsRUFBTXAwQixHQUdwQmdCLEVBQVdvbEIsU0FBWThhLEVBQVdqL0MsUUFDckN3aEMsRUFBU2hlLE1BQU0sV0FDVHk3QixFQUFXai9DLFFBQ2IrZSxFQUFXMHdCLFlBS2pCd1AsRUFBVzk0QyxNQUFNaUgsTUFBTzZELEtBQU14SSxHQUFJOGdCLEVBQU80b0IsR0FBT3AwQixPQUFRQSxLQUcxRHdiLGFBQWMsU0FBUzl3QixHQUNyQjQyQyxFQUFnQmw1QyxLQUFLc0MsSUFnRHZCNkUsT0FBUSxTQUFTNmtDLEdBQ2YsSUFDRWdLLEVBQVcsU0FDWCxLQUNFLE1BQU9sckMsTUFBS3N1QyxNQUFNcE4sR0FDbEIsUUFDQWtLLEtBRUYsTUFBT3p4QyxHQUNQK2MsRUFBa0IvYyxHQUNsQixRQUNBLElBQ0VtVSxFQUFXMHdCLFVBQ1gsTUFBTzdrQyxHQUdQLEtBRkErYyxHQUFrQi9jLEdBRVpBLEtBc0JaczVCLFlBQWEsU0FBU2lPLEdBUXBCLFFBQVNxTixLQUNQcHlDLEVBQU1teUMsTUFBTXBOLEdBUmQsR0FBSS9rQyxHQUFRNkQsSUFDUmtoQyxJQUNGdUssRUFBZ0J2MkMsS0FBS3E1QyxHQUV2QnJOLEVBQU81b0IsRUFBTzRvQixHQUNkd0ssS0FrQ0YxcUIsSUFBSyxTQUFTL2xCLEVBQU1pVyxHQUNsQixHQUFJczlCLEdBQWlCeHVDLEtBQUtrcUMsWUFBWWp2QyxFQUNqQ3V6QyxLQUNIeHVDLEtBQUtrcUMsWUFBWWp2QyxHQUFRdXpDLE1BRTNCQSxFQUFldDVDLEtBQUtnYyxFQUVwQixJQUFJdWEsR0FBVXpyQixJQUNkLElBQ095ckIsRUFBUTBlLGdCQUFnQmx2QyxLQUMzQnd3QixFQUFRMGUsZ0JBQWdCbHZDLEdBQVEsR0FFbEN3d0IsRUFBUTBlLGdCQUFnQmx2QyxXQUNoQnd3QixFQUFVQSxFQUFRblIsUUFFNUIsSUFBSS9pQixHQUFPeUksSUFDWCxPQUFPLFlBQ0wsR0FBSXl1QyxHQUFrQkQsRUFBZTc1QyxRQUFRdWMsSUFDcEIsSUFBckJ1OUIsSUFDRkQsRUFBZUMsR0FBbUIsS0FDbENuRCxFQUF1Qi96QyxFQUFNLEVBQUcwRCxNQTRCdEN5ekMsTUFBTyxTQUFTenpDLEVBQU03RCxHQUNwQixHQUNJbzNDLEdBYUF2Z0QsRUFBR2MsRUFkSHNLLEtBRUE4QyxFQUFRNkQsS0FDUmlJLEdBQWtCLEVBQ2xCUixHQUNFeE0sS0FBTUEsRUFDTjB6QyxZQUFheHlDLEVBQ2I4TCxnQkFBaUIsV0FBWUEsR0FBa0IsR0FDL0NtMkIsZUFBZ0IsV0FDZDMyQixFQUFNRSxrQkFBbUIsR0FFM0JBLGtCQUFrQixHQUVwQmluQyxFQUFlMzNDLEdBQVF3USxHQUFRdFosVUFBVyxFQUc5QyxHQUFHLENBR0QsSUFGQXFnRCxFQUFpQnJ5QyxFQUFNK3RDLFlBQVlqdkMsSUFBUzVCLEVBQzVDb08sRUFBTW9qQyxhQUFlMXVDLEVBQ2hCbE8sRUFBSSxFQUFHYyxFQUFTeS9DLEVBQWV6L0MsT0FBUWQsRUFBSWMsRUFBUWQsSUFHdEQsR0FBS3VnRCxFQUFldmdELEdBTXBCLElBRUV1Z0QsRUFBZXZnRCxHQUFHeUosTUFBTSxLQUFNazNDLEdBQzlCLE1BQU9qMUMsR0FDUCtjLEVBQWtCL2MsT0FUbEI2MEMsR0FBZTM1QyxPQUFPNUcsRUFBRyxHQUN6QkEsSUFDQWMsR0FXSixJQUFJa1osRUFFRixNQURBUixHQUFNb2pDLGFBQWUsS0FDZHBqQyxDQUdUdEwsR0FBUUEsRUFBTW1lLGNBQ1BuZSxFQUlULE9BRkFzTCxHQUFNb2pDLGFBQWUsS0FFZHBqQyxHQXlCVGcyQixXQUFZLFNBQVN4aUMsRUFBTTdELEdBQ3pCLEdBQUlxUixHQUFTekksS0FDVHlyQixFQUFVaGpCLEVBQ1ZpbEMsRUFBT2psQyxFQUNQaEIsR0FDRXhNLEtBQU1BLEVBQ04wekMsWUFBYWxtQyxFQUNiMjFCLGVBQWdCLFdBQ2QzMkIsRUFBTUUsa0JBQW1CLEdBRTNCQSxrQkFBa0IsRUFHeEIsS0FBS2MsRUFBTzBoQyxnQkFBZ0JsdkMsR0FBTyxNQUFPd00sRUFNMUMsS0FKQSxHQUNJdWpCLEdBQVcvOEIsRUFBR2MsRUFEZDYvQyxFQUFlMzNDLEdBQVF3USxHQUFRdFosVUFBVyxHQUl0Q3M5QixFQUFVaWlCLEdBQU8sQ0FHdkIsSUFGQWptQyxFQUFNb2pDLGFBQWVwZixFQUNyQlQsRUFBWVMsRUFBUXllLFlBQVlqdkMsT0FDM0JoTixFQUFJLEVBQUdjLEVBQVNpOEIsRUFBVWo4QixPQUFRZCxFQUFJYyxFQUFRZCxJQUVqRCxHQUFLKzhCLEVBQVUvOEIsR0FPZixJQUNFKzhCLEVBQVUvOEIsR0FBR3lKLE1BQU0sS0FBTWszQyxHQUN6QixNQUFPajFDLEdBQ1ArYyxFQUFrQi9jLE9BVGxCcXhCLEdBQVVuMkIsT0FBTzVHLEVBQUcsR0FDcEJBLElBQ0FjLEdBZUosTUFBTTIrQyxFQUFTamlCLEVBQVEwZSxnQkFBZ0JsdkMsSUFBU3d3QixFQUFRdWUsYUFDbkR2ZSxJQUFZaGpCLEdBQVVnakIsRUFBUXNlLGVBQ2pDLEtBQU90ZSxJQUFZaGpCLEtBQVlpbEMsRUFBT2ppQixFQUFRc2UsZ0JBQzVDdGUsRUFBVUEsRUFBUW5SLFFBTXhCLE1BREE3UyxHQUFNb2pDLGFBQWUsS0FDZHBqQyxHQUlYLElBQUlxRyxHQUFhLEdBQUltOUIsR0FHakIrQyxFQUFhbGdDLEVBQVcrZ0MsZ0JBQ3hCVCxFQUFrQnRnQyxFQUFXZ2hDLHFCQUM3QnJELEVBQWtCMzlCLEVBQVdpaEMscUJBRTdCWixFQUEwQixDQUU5QixPQUFPcmdDLEtBOEVYLFFBQVNraEMsTUFDUCxHQUFJeDNCLEdBQTZCLG9DQUMvQkUsRUFBOEIsNENBa0JoQzFYLE1BQUt3WCwyQkFBNkIsU0FBU0MsR0FDekMsTUFBSW5xQixHQUFVbXFCLElBQ1pELEVBQTZCQyxFQUN0QnpYLE1BRUZ3WCxHQW9CVHhYLEtBQUswWCw0QkFBOEIsU0FBU0QsR0FDMUMsTUFBSW5xQixHQUFVbXFCLElBQ1pDLEVBQThCRCxFQUN2QnpYLE1BRUYwWCxHQUdUMVgsS0FBSzhJLEtBQU8sV0FDVixNQUFPLFVBQXFCbW1DLEVBQUtDLEdBQy9CLEdBQ0lDLEdBREFDLEVBQVFGLEVBQVV4M0IsRUFBOEJGLENBR3BELE9BREEyM0IsR0FBZ0I3WSxHQUFXMlksR0FBS3Q5QixLQUNWLEtBQWxCdzlCLEdBQXlCQSxFQUFjdmdELE1BQU13Z0QsR0FHMUNILEVBRkUsVUFBWUUsSUE2QzNCLFFBQVNFLElBQWFwMEMsR0FDcEIsTUFBT0EsR0FDSnRNLFFBQVEyZ0QsR0FBNkJudUMsSUFHMUMsUUFBU291QyxJQUFjQyxHQUNyQixHQUFnQixTQUFaQSxFQUNGLE1BQU9BLEVBQ0YsSUFBSW5nRCxFQUFTbWdELEdBQVUsQ0FLNUIsR0FBSUEsRUFBUTc2QyxRQUFRLFFBQVUsRUFDNUIsS0FBTTg2QyxJQUFXLFNBQ2IsdURBQXdERCxFQUs5RCxPQUhBQSxHQUFVRSxHQUFnQkYsR0FDWjdnRCxRQUFRLFlBQWEsTUFDckJBLFFBQVEsUUFBUyxjQUN4QixHQUFJK0MsUUFBTyxJQUFNODlDLEVBQVUsS0FDN0IsR0FBSS85QyxFQUFTKzlDLEdBSWxCLE1BQU8sSUFBSTk5QyxRQUFPLElBQU04OUMsRUFBUXo2QyxPQUFTLElBRXpDLE1BQU0wNkMsSUFBVyxXQUNiLGtFQUtSLFFBQVNFLElBQWVDLEdBQ3RCLEdBQUlDLEtBTUosT0FMSXZpRCxHQUFVc2lELElBQ1psZ0QsRUFBUWtnRCxFQUFVLFNBQVNKLEdBQ3pCSyxFQUFpQjM2QyxLQUFLcTZDLEdBQWNDLE1BR2pDSyxFQThGVCxRQUFTQyxNQUNQOXZDLEtBQUsrdkMsYUFBZUEsRUFHcEIsSUFBSUMsSUFBd0IsUUFDeEJDLElBMEJKandDLE1BQUtnd0MscUJBQXVCLFNBQVN4L0MsR0FJbkMsTUFISXJDLFdBQVVZLFNBQ1ppaEQsRUFBdUJMLEdBQWVuL0MsSUFFakN3L0MsR0E0QlRod0MsS0FBS2l3QyxxQkFBdUIsU0FBU3ovQyxHQUluQyxNQUhJckMsV0FBVVksU0FDWmtoRCxFQUF1Qk4sR0FBZW4vQyxJQUVqQ3kvQyxHQUdUandDLEtBQUs4SSxNQUFRLFlBQWEsU0FBU3lDLEdBV2pDLFFBQVMya0MsR0FBU1YsRUFBU3pWLEdBQ3pCLE1BQWdCLFNBQVp5VixFQUNLcGIsR0FBZ0IyRixLQUdkeVYsRUFBUWh0QyxLQUFLdTNCLEVBQVVwb0IsTUFJcEMsUUFBU3crQixHQUE2QjkvQixHQUNwQyxHQUNJcGlCLEdBQUdvbEIsRUFESDBtQixFQUFZekQsR0FBV2ptQixFQUFJeGQsWUFDckJ1OUMsR0FBVSxDQUVwQixLQUFLbmlELEVBQUksRUFBR29sQixFQUFJMjhCLEVBQXFCamhELE9BQVFkLEVBQUlvbEIsRUFBR3BsQixJQUNsRCxHQUFJaWlELEVBQVNGLEVBQXFCL2hELEdBQUk4ckMsR0FBWSxDQUNoRHFXLEdBQVUsQ0FDVixPQUdKLEdBQUlBLEVBRUYsSUFBS25pRCxFQUFJLEVBQUdvbEIsRUFBSTQ4QixFQUFxQmxoRCxPQUFRZCxFQUFJb2xCLEVBQUdwbEIsSUFDbEQsR0FBSWlpRCxFQUFTRCxFQUFxQmhpRCxHQUFJOHJDLEdBQVksQ0FDaERxVyxHQUFVLENBQ1YsT0FJTixNQUFPQSxHQUdULFFBQVNDLEdBQW1CQyxHQUMxQixHQUFJQyxHQUFhLFNBQWdDQyxHQUMvQ3h3QyxLQUFLeXdDLHFCQUF1QixXQUMxQixNQUFPRCxJQVlYLE9BVElGLEtBQ0ZDLEVBQVc3N0MsVUFBWSxHQUFJNDdDLElBRTdCQyxFQUFXNzdDLFVBQVVsRCxRQUFVLFdBQzdCLE1BQU93TyxNQUFLeXdDLHdCQUVkRixFQUFXNzdDLFVBQVU3QixTQUFXLFdBQzlCLE1BQU9tTixNQUFLeXdDLHVCQUF1QjU5QyxZQUU5QjA5QyxFQW9DVCxRQUFTRyxHQUFRdDZDLEVBQU1vNkMsR0FDckIsR0FBSUcsR0FBZUMsRUFBTzdnRCxlQUFlcUcsR0FBUXc2QyxFQUFPeDZDLEdBQVEsSUFDaEUsS0FBS3U2QyxFQUNILEtBQU1sQixJQUFXLFdBQ2IsMEVBQ0FyNUMsRUFBTW82QyxFQUVaLElBQXFCLE9BQWpCQSxHQUF5QjE5QyxFQUFZMDlDLElBQWtDLEtBQWpCQSxFQUN4RCxNQUFPQSxFQUlULElBQTRCLGdCQUFqQkEsR0FDVCxLQUFNZixJQUFXLFFBQ2Isc0ZBQ0FyNUMsRUFFTixPQUFPLElBQUl1NkMsR0FBWUgsR0FxQnpCLFFBQVNoL0MsR0FBUXEvQyxHQUNmLE1BQUlBLGFBQXdCQyxHQUNuQkQsRUFBYUosdUJBRWJJLEVBeUJYLFFBQVNyWSxHQUFXcGlDLEVBQU15NkMsR0FDeEIsR0FBcUIsT0FBakJBLEdBQXlCLzlDLEVBQVkrOUMsSUFBa0MsS0FBakJBLEVBQ3hELE1BQU9BLEVBRVQsSUFBSW43QyxHQUFlazdDLEVBQU83Z0QsZUFBZXFHLEdBQVF3NkMsRUFBT3g2QyxHQUFRLElBR2hFLElBQUlWLEdBQWVtN0MsWUFBd0JuN0MsR0FDekMsTUFBT203QyxHQUFhSixzQkFNdEIsSUFBSXI2QyxJQUFTMjVDLEdBQWE5b0IsYUFBYyxDQUV0QyxHQUFJa3BCLEVBQTZCVSxHQUMvQixNQUFPQSxFQUVQLE1BQU1wQixJQUFXLFdBQ2Isa0ZBQ0FvQixFQUFhaCtDLFlBRWQsR0FBSXVELElBQVMyNUMsR0FBYS9vQixLQUUvQixNQUFPK3BCLEdBQWNGLEVBR3ZCLE1BQU1wQixJQUFXLFNBQVUsd0RBMUw3QixHQUFJc0IsR0FBZ0IsU0FBdUJ2M0MsR0FDekMsS0FBTWkyQyxJQUFXLFNBQVUsd0RBR3pCbGtDLEdBQVUrQixJQUFJLGVBQ2hCeWpDLEVBQWdCeGxDLEVBQVVyTyxJQUFJLGFBcURoQyxJQUFJNHpDLEdBQXlCVCxJQUN6Qk8sSUFrSUosT0FoSUFBLEdBQU9iLEdBQWEvb0IsTUFBUXFwQixFQUFtQlMsR0FDL0NGLEVBQU9iLEdBQWFpQixLQUFPWCxFQUFtQlMsR0FDOUNGLEVBQU9iLEdBQWFrQixLQUFPWixFQUFtQlMsR0FDOUNGLEVBQU9iLEdBQWFtQixJQUFNYixFQUFtQlMsR0FDN0NGLEVBQU9iLEdBQWE5b0IsY0FBZ0JvcEIsRUFBbUJPLEVBQU9iLEdBQWFrQixPQTRIbEVQLFFBQVNBLEVBQ1RsWSxXQUFZQSxFQUNaaG5DLFFBQVNBLEtBK1N0QixRQUFTMi9DLE1BQ1AsR0FBSXg1QixJQUFVLENBYWQzWCxNQUFLMlgsUUFBVSxTQUFTbm5CLEdBSXRCLE1BSElyQyxXQUFVWSxTQUNaNG9CLElBQVlubkIsR0FFUG1uQixHQWtEVDNYLEtBQUs4SSxNQUFRLFNBQVUsZUFBZ0IsU0FDekJ3UCxFQUFVODRCLEdBSXRCLEdBQUl6NUIsR0FBV3pLLEdBQU8sRUFDcEIsS0FBTXVpQyxJQUFXLFdBQ2YscVBBS0osSUFBSTRCLEdBQU0xd0MsR0FBWW92QyxHQWF0QnNCLEdBQUlDLFVBQVksV0FDZCxNQUFPMzVCLElBRVQwNUIsRUFBSVgsUUFBVVUsRUFBYVYsUUFDM0JXLEVBQUk3WSxXQUFhNFksRUFBYTVZLFdBQzlCNlksRUFBSTcvQyxRQUFVNC9DLEVBQWE1L0MsUUFFdEJtbUIsSUFDSDA1QixFQUFJWCxRQUFVVyxFQUFJN1ksV0FBYSxTQUFTcGlDLEVBQU01RixHQUFTLE1BQU9BLElBQzlENmdELEVBQUk3L0MsUUFBVWlCLEdBc0JoQjQrQyxFQUFJRSxRQUFVLFNBQW9CbjdDLEVBQU04cUMsR0FDdEMsR0FBSWgrQixHQUFTb1YsRUFBTzRvQixFQUNwQixPQUFJaCtCLEdBQU9nbUIsU0FBV2htQixFQUFPaEQsU0FDcEJnRCxFQUVBb1YsRUFBTzRvQixFQUFNLFNBQVMxd0MsR0FDM0IsTUFBTzZnRCxHQUFJN1ksV0FBV3BpQyxFQUFNNUYsS0FrUWxDLElBQUk0SCxHQUFRaTVDLEVBQUlFLFFBQ1ovWSxFQUFhNlksRUFBSTdZLFdBQ2pCa1ksRUFBVVcsRUFBSVgsT0FlbEIsT0FiQWhoRCxHQUFRcWdELEdBQWMsU0FBU3lCLEVBQVd2MkMsR0FDeEMsR0FBSXcyQyxHQUFRbDlDLEdBQVUwRyxFQUN0Qm8yQyxHQUFJaEMsR0FBYSxZQUFjb0MsSUFBVSxTQUFTdlEsR0FDaEQsTUFBTzlvQyxHQUFNbzVDLEVBQVd0USxJQUUxQm1RLEVBQUloQyxHQUFhLGVBQWlCb0MsSUFBVSxTQUFTamhELEdBQ25ELE1BQU9nb0MsR0FBV2daLEVBQVdoaEQsSUFFL0I2Z0QsRUFBSWhDLEdBQWEsWUFBY29DLElBQVUsU0FBU2poRCxHQUNoRCxNQUFPa2dELEdBQVFjLEVBQVdoaEQsTUFJdkI2Z0QsSUFxQlgsUUFBU0ssTUFDUDF4QyxLQUFLOEksTUFBUSxVQUFXLFlBQWEsU0FBUzhFLEVBQVNpRixHQUNyRCxHQUFJOCtCLE1BT0FDLEVBQU9oa0MsRUFBUWlrQyxJQUFNamtDLEVBQVFpa0MsR0FBR0MsUUFDaENDLEdBQ0tILEdBQ0Roa0MsRUFBUW9rQyxTQUNQcGtDLEVBQVFva0MsT0FBT0MsS0FBT3JrQyxFQUFRb2tDLE9BQU9DLElBQUlDLFVBQ3JDdGtDLEVBQVFva0MsT0FBT0MsS0FBT3JrQyxFQUFRb2tDLE9BQU9FLFNBQVd0a0MsRUFBUW9rQyxPQUFPRSxRQUFRcitCLElBQ2hGcytCLEdBQXVCSixHQUF1Qm5rQyxFQUFRdUQsU0FBV3ZELEVBQVF1RCxRQUFRaWhDLFVBQ2pGQyxFQUNFcGdELEdBQU8sZ0JBQWdCdVEsS0FBS2pPLElBQVdxWixFQUFRMHhCLGVBQWlCQyxpQkFBbUIsSUFDckYrUyxFQUFRLFNBQVMxK0MsTUFBTWdhLEVBQVEweEIsZUFBaUJDLFdBQ2hEMW5DLEVBQVdnYixFQUFVLE9BQ3JCMC9CLEVBQVkxNkMsRUFBUzI5QixNQUFRMzlCLEVBQVMyOUIsS0FBS2xuQixNQUMzQ2trQyxHQUFjLEVBQ2RDLEdBQWEsQ0FVakIsT0FSSUYsS0FHRkMsS0FBaUIsY0FBZ0JELElBQWEsb0JBQXNCQSxJQUNwRUUsS0FBZ0IsYUFBZUYsSUFBYSxtQkFBcUJBLE1BYWpFcGhDLFdBQVlnaEMsR0FBeUJFLEVBQVUsR0FBT0MsR0FDdERJLFNBQVUsU0FBU2pyQyxHQU9qQixHQUFjLFVBQVZBLEdBQXFCeUYsR0FBTSxPQUFPLENBRXRDLElBQUlwYSxFQUFZNitDLEVBQWFscUMsSUFBUyxDQUNwQyxHQUFJa3JDLEdBQVM5NkMsRUFBU3lLLGNBQWMsTUFDcENxdkMsR0FBYWxxQyxHQUFTLEtBQU9BLElBQVNrckMsR0FHeEMsTUFBT2hCLEdBQWFscUMsSUFFdEJ3N0IsSUFBS0EsS0FDTHVQLFlBQWFBLEVBQ2JDLFdBQVlBLEVBQ1pKLFFBQVNBLEtBa0JmLFFBQVNPLE1BRVAsR0FBSUMsRUFlSjd5QyxNQUFLNnlDLFlBQWMsU0FBU2o3QyxHQUMxQixNQUFJQSxJQUNGaTdDLEVBQWNqN0MsRUFDUG9JLE1BRUY2eUMsR0F5QlQ3eUMsS0FBSzhJLE1BQVEsb0JBQXFCLGlCQUFrQixRQUFTLEtBQU0sT0FDakUsU0FBUzROLEVBQW1CbzhCLEVBQWdCbmlCLEVBQU9ELEVBQUlsWSxHQUVyRCxRQUFTdTZCLEdBQWdCQyxFQUFLQyxHQWtDNUIsUUFBU0MsR0FBWXZoQixHQVNuQixNQVJLc2hCLEtBQ0h0aEIsRUFBT3doQixHQUF1QixTQUMxQixzREFDQUgsRUFBS3JoQixFQUFLdkMsT0FBUXVDLEVBQUswQixZQUUzQjNjLEVBQWtCaWIsSUFHYmpCLEVBQUdrQixPQUFPRCxHQTFDbkJvaEIsRUFBZ0JLLHVCQU9YL2pELEVBQVMyakQsS0FBUWxnRCxFQUFZZ2dELEVBQWU1MUMsSUFBSTgxQyxNQUNuREEsRUFBTXg2QixFQUFLdWIsc0JBQXNCaWYsR0FHbkMsSUFBSXZqQixHQUFvQmtCLEVBQU1uQixVQUFZbUIsRUFBTW5CLFNBQVNDLGlCQVV6RCxPQVJJcmdDLElBQVFxZ0MsR0FDVkEsRUFBb0JBLEVBQWtCcHZCLE9BQU8sU0FBU2d6QyxHQUNwRCxNQUFPQSxLQUFnQnJsQixLQUVoQnlCLElBQXNCekIsS0FDL0J5QixFQUFvQixNQUdma0IsRUFBTXp6QixJQUFJODFDLEVBQUtqaEQsR0FDbEJ3YSxNQUFPdW1DLEVBQ1ByakIsa0JBQW1CQSxHQUNsQm9qQixJQUNGamdCLFFBQVEsV0FDUG1nQixFQUFnQksseUJBRWpCMy9DLEtBQUssU0FBU2krQixHQUViLE1BREFvaEIsR0FBZTUrQixJQUFJOCtCLEVBQUt0aEIsRUFBU3AxQixNQUMxQm8xQixFQUFTcDFCLE1BQ2Y0MkMsR0FpQlAsTUFGQUgsR0FBZ0JLLHFCQUF1QixFQUVoQ0wsSUFNYixRQUFTTyxNQUNQdHpDLEtBQUs4SSxNQUFRLGFBQWMsV0FBWSxZQUNsQyxTQUFTZ0YsRUFBY3lpQixFQUFZMWlCLEdBU3RDLEdBQUkwbEMsS0FvR0osT0F0RkFBLEdBQVlDLGFBQWUsU0FBU2wvQyxFQUFTcTRCLEVBQVk4bUIsR0FDdkQsR0FBSXorQixHQUFXMWdCLEVBQVFvL0MsdUJBQXVCLGNBQzFDQyxJQWtCSixPQWpCQWprRCxHQUFRc2xCLEVBQVUsU0FBU21XLEdBQ3pCLEdBQUl5b0IsR0FBY24zQyxHQUFRbkksUUFBUTYyQixHQUFTN3VCLEtBQUssV0FDNUNzM0MsSUFDRmxrRCxFQUFRa2tELEVBQWEsU0FBU0MsR0FDNUIsR0FBSUosRUFBZ0IsQ0FDSixHQUFJL2hELFFBQU8sVUFBWWcrQyxHQUFnQi9pQixHQUFjLGVBQ3ZELzRCLEtBQUtpZ0QsSUFDZkYsRUFBUXorQyxLQUFLaTJCLFFBRzBCLElBQXJDMG9CLEVBQVlsL0MsUUFBUWc0QixJQUN0QmduQixFQUFReitDLEtBQUtpMkIsT0FNaEJ3b0IsR0FlVEosRUFBWU8sV0FBYSxTQUFTeC9DLEVBQVNxNEIsRUFBWThtQixHQUVyRCxJQUFLLEdBRERNLElBQVksTUFBTyxXQUFZLFNBQzFCeGdDLEVBQUksRUFBR0EsRUFBSXdnQyxFQUFTaGxELFNBQVV3a0IsRUFBRyxDQUN4QyxHQUFJeWdDLEdBQWtCUCxFQUFpQixJQUFNLEtBQ3pDbnVDLEVBQVcsSUFBTXl1QyxFQUFTeGdDLEdBQUssUUFBVXlnQyxFQUFrQixJQUFNcm5CLEVBQWEsS0FDOUU3bUIsRUFBV3hSLEVBQVE0UCxpQkFBaUJvQixFQUN4QyxJQUFJUSxFQUFTL1csT0FDWCxNQUFPK1csS0FZYnl0QyxFQUFZVSxZQUFjLFdBQ3hCLE1BQU9wbUMsR0FBVXdDLE9BWW5Ca2pDLEVBQVlXLFlBQWMsU0FBUzdqQyxHQUM3QkEsSUFBUXhDLEVBQVV3QyxRQUNwQnhDLEVBQVV3QyxJQUFJQSxHQUNkdkMsRUFBVzB3QixZQVlmK1UsRUFBWVksV0FBYSxTQUFTemlDLEdBQ2hDNmUsRUFBUzllLGdDQUFnQ0MsSUFHcEM2aEMsSUFLWCxRQUFTYSxNQUNQcDBDLEtBQUs4SSxNQUFRLGFBQWMsV0FBWSxLQUFNLE1BQU8sb0JBQy9DLFNBQVNnRixFQUFjeWlCLEVBQVlHLEVBQU1tSSxFQUFPbmlCLEdBa0NuRCxRQUFTMmQsR0FBUTc4QixFQUFJZ2IsRUFBT3dtQixHQUNyQmxwQyxFQUFXMEgsS0FDZHdoQyxFQUFjeG1CLEVBQ2RBLEVBQVFoYixFQUNSQSxFQUFLaEYsRUFHUCxJQUlJaWdCLEdBSkFyYixFQUFPN0ksRUFBVUosVUFBVyxHQUM1QmtyQyxFQUFhL3JDLEVBQVUwckMsS0FBaUJBLEVBQ3hDdkYsR0FBWTRGLEVBQVlSLEVBQU1uSSxHQUFJbmUsUUFDbEN1ZSxFQUFVMkMsRUFBUzNDLE9BbUJ2QixPQWhCQXJlLEdBQVk4ZCxFQUFTaGUsTUFBTSxXQUN6QixJQUNFa2hCLEVBQVNuQixRQUFROTZCLEVBQUdFLE1BQU0sS0FBTU4sSUFDaEMsTUFBT3VDLEdBQ1A4NUIsRUFBUzdCLE9BQU9qNEIsR0FDaEIrYyxFQUFrQi9jLEdBQ2xCLGNBQ08wNkMsR0FBVXZqQixFQUFRd2pCLGFBR3RCamIsR0FBV3ZyQixFQUFXelIsVUFDMUJtVyxHQUVIc2UsRUFBUXdqQixZQUFjN2hDLEVBQ3RCNGhDLEVBQVU1aEMsR0FBYWdoQixFQUVoQjNDLEVBN0RULEdBQUl1akIsS0F3RkosT0FYQWhnQixHQUFRM2hCLE9BQVMsU0FBU29lLEdBQ3hCLFNBQUlBLEdBQVdBLEVBQVF3akIsY0FBZUQsTUFFcEM1YSxHQUFzQjRhLEVBQVV2akIsRUFBUXdqQixhQUFheGpCLFNBQ3JEdWpCLEVBQVV2akIsRUFBUXdqQixhQUFhMWlCLE9BQU8sa0JBQy9CeWlCLEdBQVV2akIsRUFBUXdqQixhQUNsQi9qQixFQUFTaGUsTUFBTUcsT0FBT29lLEVBQVF3akIsZUFLbENqZ0IsSUE0RFgsUUFBU2lDLElBQVdqbUIsR0FDbEIsR0FBSXNCLEdBQU90QixDQWFYLE9BVkluRCxNQUdGcW5DLEdBQWU5dUMsYUFBYSxPQUFRa00sR0FDcENBLEVBQU80aUMsR0FBZTVpQyxNQUd4QjRpQyxHQUFlOXVDLGFBQWEsT0FBUWtNLElBSWxDQSxLQUFNNGlDLEdBQWU1aUMsS0FDckI0a0IsU0FBVWdlLEdBQWVoZSxTQUFXZ2UsR0FBZWhlLFNBQVM1bkMsUUFBUSxLQUFNLElBQU0sR0FDaEZ5WCxLQUFNbXVDLEdBQWVudUMsS0FDckJ5MEIsT0FBUTBaLEdBQWUxWixPQUFTMFosR0FBZTFaLE9BQU9sc0MsUUFBUSxNQUFPLElBQU0sR0FDM0VxZ0IsS0FBTXVsQyxHQUFldmxDLEtBQU91bEMsR0FBZXZsQyxLQUFLcmdCLFFBQVEsS0FBTSxJQUFNLEdBQ3BFdXJDLFNBQVVxYSxHQUFlcmEsU0FDekJFLEtBQU1tYSxHQUFlbmEsS0FDckJPLFNBQWlELE1BQXRDNFosR0FBZTVaLFNBQVMzakMsT0FBTyxHQUN0Q3U5QyxHQUFlNVosU0FDZixJQUFNNFosR0FBZTVaLFVBVzdCLFFBQVN2RyxJQUFnQm9nQixHQUN2QixHQUFJdHhDLEdBQVU3VCxFQUFTbWxELEdBQWVsZSxHQUFXa2UsR0FBY0EsQ0FDL0QsT0FBUXR4QyxHQUFPcXpCLFdBQWFrZSxHQUFVbGUsVUFDOUJyekIsRUFBT2tELE9BQVNxdUMsR0FBVXJ1QyxLQTZDcEMsUUFBU3N1QyxNQUNQMTBDLEtBQUs4SSxLQUFPblcsRUFBUTFGLEdBWXRCLFFBQVMwbkQsSUFBZTloQyxHQUt0QixRQUFTK2hDLEdBQWN6ZixHQUNyQixJQUNFLE1BQU9BLEdBQVkwZixRQUFVLEdBQzdCLE1BQU9sN0MsR0FDUCxNQUFPLElBSVgsUUFBU203QyxHQUF1QjVpRCxHQUM5QixJQUNFLE1BQU8ySCxvQkFBbUIzSCxHQUMxQixNQUFPeUgsR0FDUCxNQUFPekgsSUFoQlgsR0FBSWlqQyxHQUFjdGlCLEVBQVUsT0FDeEJraUMsS0FDQUMsRUFBbUIsRUFrQnZCLE9BQU8sWUFDTCxHQUFJQyxHQUFhSixFQUFRNW1ELEVBQUdZLEVBQU9vTSxFQUMvQmk2QyxFQUFzQk4sRUFBY3pmLEVBRXhDLElBQUkrZixJQUF3QkYsRUFLMUIsSUFKQUEsRUFBbUJFLEVBQ25CRCxFQUFjRCxFQUFpQjVnRCxNQUFNLE1BQ3JDMmdELEtBRUs5bUQsRUFBSSxFQUFHQSxFQUFJZ25ELEVBQVlsbUQsT0FBUWQsSUFDbEM0bUQsRUFBU0ksRUFBWWhuRCxJQUNyQlksRUFBUWdtRCxFQUFPbGdELFFBQVEsTUFDWCxJQUNWc0csRUFBTzY1QyxFQUF1QkQsRUFBTzU2QyxVQUFVLEVBQUdwTCxJQUk5Q2lFLEVBQVlpaUQsRUFBWTk1QyxNQUMxQjg1QyxFQUFZOTVDLEdBQVE2NUMsRUFBdUJELEVBQU81NkMsVUFBVXBMLEVBQVEsS0FLNUUsT0FBT2ttRCxJQU9YLFFBQVNJLE1BQ1BuMUMsS0FBSzhJLEtBQU82ckMsR0E4R2QsUUFBU1MsSUFBZ0J0NUMsR0FtQnZCLFFBQVN5d0IsR0FBU3R4QixFQUFNeUQsR0FDdEIsR0FBSXRSLEVBQVM2TixHQUFPLENBQ2xCLEdBQUlvNkMsS0FJSixPQUhBM2xELEdBQVF1TCxFQUFNLFNBQVNvRixFQUFReFEsR0FDN0J3bEQsRUFBUXhsRCxHQUFPMDhCLEVBQVMxOEIsRUFBS3dRLEtBRXhCZzFDLEVBRVAsTUFBT3Y1QyxHQUFTNEMsUUFBUXpELEVBQU9xNkMsRUFBUTUyQyxHQTFCM0MsR0FBSTQyQyxHQUFTLFFBNkJidDFDLE1BQUt1c0IsU0FBV0EsRUFFaEJ2c0IsS0FBSzhJLE1BQVEsWUFBYSxTQUFTeUMsR0FDakMsTUFBTyxVQUFTdFEsR0FDZCxNQUFPc1EsR0FBVXJPLElBQUlqQyxFQUFPcTZDLE1Ba0JoQy9vQixFQUFTLFdBQVlncEIsSUFDckJocEIsRUFBUyxPQUFRaXBCLElBQ2pCanBCLEVBQVMsU0FBVWtwQixJQUNuQmxwQixFQUFTLE9BQVFtcEIsSUFDakJucEIsRUFBUyxVQUFXb3BCLElBQ3BCcHBCLEVBQVMsWUFBYXFwQixJQUN0QnJwQixFQUFTLFNBQVVzcEIsSUFDbkJ0cEIsRUFBUyxVQUFXdXBCLElBQ3BCdnBCLEVBQVMsWUFBYXdwQixJQTRJeEIsUUFBU04sTUFDUCxNQUFPLFVBQVNoaEQsRUFBT2s0QixFQUFZcXBCLEVBQVlDLEdBQzdDLElBQUtobkQsRUFBWXdGLEdBQVEsQ0FDdkIsR0FBYSxNQUFUQSxFQUNGLE1BQU9BLEVBRVAsTUFBTTdHLEdBQU8sVUFBVSxXQUFZLG1DQUFvQzZHLEdBSTNFd2hELEVBQWlCQSxHQUFrQixHQUNuQyxJQUNJQyxHQUNBQyxFQUZBQyxFQUFpQkMsR0FBaUIxcEIsRUFJdEMsUUFBUXlwQixHQUNOLElBQUssV0FDSEYsRUFBY3ZwQixDQUNkLE1BQ0YsS0FBSyxVQUNMLElBQUssT0FDTCxJQUFLLFNBQ0wsSUFBSyxTQUNId3BCLEdBQXNCLENBRXhCLEtBQUssU0FDSEQsRUFBY0ksR0FBa0IzcEIsRUFBWXFwQixFQUFZQyxFQUFnQkUsRUFDeEUsTUFDRixTQUNFLE1BQU8xaEQsR0FHWCxNQUFPakYsT0FBTWtGLFVBQVUyTCxPQUFPclEsS0FBS3lFLEVBQU95aEQsSUFLOUMsUUFBU0ksSUFBa0IzcEIsRUFBWXFwQixFQUFZQyxFQUFnQkUsR0FDakUsR0FBSUksR0FBd0JucEQsRUFBU3UvQixJQUFnQnNwQixJQUFrQnRwQixFQWlDdkUsUUE5Qm1CLElBQWZxcEIsRUFDRkEsRUFBYXgvQyxFQUNIMUcsRUFBV2ttRCxLQUNyQkEsRUFBYSxTQUFTUSxFQUFRQyxHQUM1QixPQUFJM2pELEVBQVkwakQsS0FJQSxPQUFYQSxHQUFrQyxPQUFiQyxFQUVqQkQsSUFBV0MsSUFFaEJycEQsRUFBU3FwRCxJQUFjcnBELEVBQVNvcEQsS0FBWTVqRCxFQUFrQjRqRCxNQUtsRUEsRUFBU2ppRCxHQUFVLEdBQUtpaUQsR0FDeEJDLEVBQVdsaUQsR0FBVSxHQUFLa2lELElBQ1csSUFBOUJELEVBQU83aEQsUUFBUThoRCxPQUlaLFNBQVNobkQsR0FDckIsTUFBSThtRCxLQUEwQm5wRCxFQUFTcUMsR0FDOUJpbkQsR0FBWWpuRCxFQUFNazlCLEVBQVdzcEIsR0FBaUJELEVBQVlDLEdBQWdCLEdBRTVFUyxHQUFZam5ELEVBQU1rOUIsRUFBWXFwQixFQUFZQyxFQUFnQkUsSUFNckUsUUFBU08sSUFBWUYsRUFBUUMsRUFBVVQsRUFBWUMsRUFBZ0JFLEVBQXFCUSxHQUN0RixHQUFJQyxHQUFhUCxHQUFpQkcsR0FDOUJLLEVBQWVSLEdBQWlCSSxFQUVwQyxJQUFzQixXQUFqQkksR0FBc0QsTUFBdkJKLEVBQVN6L0MsT0FBTyxHQUNsRCxPQUFRMC9DLEdBQVlGLEVBQVFDLEVBQVN4OEMsVUFBVSxHQUFJKzdDLEVBQVlDLEVBQWdCRSxFQUMxRSxJQUFJL21ELEdBQVFvbkQsR0FHakIsTUFBT0EsR0FBT3ZvQyxLQUFLLFNBQVN4ZSxHQUMxQixNQUFPaW5ELElBQVlqbkQsRUFBTWduRCxFQUFVVCxFQUFZQyxFQUFnQkUsSUFJbkUsUUFBUVMsR0FDTixJQUFLLFNBQ0gsR0FBSS9tRCxFQUNKLElBQUlzbUQsRUFBcUIsQ0FDdkIsSUFBS3RtRCxJQUFPMm1ELEdBR1YsR0FBSTNtRCxFQUFJbUgsUUFBNkIsTUFBbEJuSCxFQUFJbUgsT0FBTyxJQUMxQjAvQyxHQUFZRixFQUFPM21ELEdBQU00bUQsRUFBVVQsRUFBWUMsR0FBZ0IsR0FDakUsT0FBTyxDQUdYLFFBQU9VLEdBQStCRCxHQUFZRixFQUFRQyxFQUFVVCxFQUFZQyxHQUFnQixHQUMzRixHQUFxQixXQUFqQlksRUFBMkIsQ0FDcEMsSUFBS2huRCxJQUFPNG1ELEdBQVUsQ0FDcEIsR0FBSUssR0FBY0wsRUFBUzVtRCxFQUMzQixLQUFJQyxFQUFXZ25ELEtBQWdCaGtELEVBQVlna0QsR0FBM0MsQ0FJQSxHQUFJQyxHQUFtQmxuRCxJQUFRb21ELENBRS9CLEtBQUtTLEdBRFdLLEVBQW1CUCxFQUFTQSxFQUFPM21ELEdBQ3ZCaW5ELEVBQWFkLEVBQVlDLEVBQWdCYyxFQUFrQkEsR0FDckYsT0FBTyxHQUdYLE9BQU8sRUFFUCxNQUFPZixHQUFXUSxFQUFRQyxFQUU5QixLQUFLLFdBQ0gsT0FBTyxDQUNULFNBQ0UsTUFBT1QsR0FBV1EsRUFBUUMsSUFLaEMsUUFBU0osSUFBaUJ6K0MsR0FDeEIsTUFBZ0IsUUFBUkEsRUFBZ0IsYUFBZ0JBLEdBNEQxQyxRQUFTMjlDLElBQWV5QixHQUN0QixHQUFJQyxHQUFVRCxFQUFRRSxjQUN0QixPQUFPLFVBQVNDLEVBQVFDLEVBQWdCQyxHQVV0QyxNQVRJdmtELEdBQVlza0QsS0FDZEEsRUFBaUJILEVBQVFLLGNBR3ZCeGtELEVBQVl1a0QsS0FDZEEsRUFBZUosRUFBUU0sU0FBUyxHQUFHQyxTQUluQixNQUFWTCxFQUNGQSxFQUNBTSxHQUFhTixFQUFRRixFQUFRTSxTQUFTLEdBQUlOLEVBQVFTLFVBQVdULEVBQVFVLFlBQWFOLEdBQ2hGMW9ELFFBQVEsVUFBV3lvRCxJQTJEL0IsUUFBU3ZCLElBQWFtQixHQUNwQixHQUFJQyxHQUFVRCxFQUFRRSxjQUN0QixPQUFPLFVBQVNVLEVBQVFQLEdBR3RCLE1BQWtCLE9BQVZPLEVBQ0ZBLEVBQ0FILEdBQWFHLEVBQVFYLEVBQVFNLFNBQVMsR0FBSU4sRUFBUVMsVUFBV1QsRUFBUVUsWUFDeEROLElBaUJ2QixRQUFTai9DLElBQU15L0MsR0FDYixHQUFrQkMsR0FBUUMsRUFDdEI5cEQsRUFBR2tELEVBQUc2bUQsRUFETkMsRUFBVyxDQW9CZixNQWhCS0YsRUFBd0JGLEVBQU9sakQsUUFBUWdqRCxNQUFpQixJQUMzREUsRUFBU0EsRUFBT2xwRCxRQUFRZ3BELEdBQWEsTUFJbEMxcEQsRUFBSTRwRCxFQUFPaGQsT0FBTyxPQUFTLEdBRTFCa2QsRUFBd0IsSUFBR0EsRUFBd0I5cEQsR0FDdkQ4cEQsSUFBMEJGLEVBQU8vb0QsTUFBTWIsRUFBSSxHQUMzQzRwRCxFQUFTQSxFQUFPNTlDLFVBQVUsRUFBR2hNLElBQ3BCOHBELEVBQXdCLElBRWpDQSxFQUF3QkYsRUFBTzlvRCxRQUk1QmQsRUFBSSxFQUFHNHBELEVBQU83Z0QsT0FBTy9JLEtBQU9pcUQsR0FBV2pxRCxLQUU1QyxHQUFJQSxLQUFPK3BELEVBQVFILEVBQU85b0QsUUFFeEIrb0QsR0FBVSxHQUNWQyxFQUF3QixNQUNuQixDQUdMLElBREFDLElBQ09ILEVBQU83Z0QsT0FBT2doRCxLQUFXRSxJQUFXRixHQU0zQyxLQUhBRCxHQUF5QjlwRCxFQUN6QjZwRCxLQUVLM21ELEVBQUksRUFBR2xELEdBQUsrcEQsRUFBTy9wRCxJQUFLa0QsSUFDM0IybUQsRUFBTzNtRCxJQUFNMG1ELEVBQU83Z0QsT0FBTy9JLEdBVy9CLE1BTkk4cEQsR0FBd0JJLEtBQzFCTCxFQUFTQSxFQUFPampELE9BQU8sRUFBR3NqRCxHQUFhLEdBQ3ZDRixFQUFXRixFQUF3QixFQUNuQ0EsRUFBd0IsSUFHakJwb0IsRUFBR21vQixFQUFRbitDLEVBQUdzK0MsRUFBVWhxRCxFQUFHOHBELEdBT3RDLFFBQVNLLElBQVlDLEVBQWNoQixFQUFjaUIsRUFBU2QsR0FDdEQsR0FBSU0sR0FBU08sRUFBYTFvQixFQUN0QjRvQixFQUFjVCxFQUFPL29ELE9BQVNzcEQsRUFBYXBxRCxDQUcvQ29wRCxHQUFnQnZrRCxFQUFZdWtELEdBQWlCbnpCLEtBQUtzMEIsSUFBSXQwQixLQUFLQyxJQUFJbTBCLEVBQVNDLEdBQWNmLElBQVlILENBR2xHLElBQUlvQixHQUFVcEIsRUFBZWdCLEVBQWFwcUQsRUFDdEN5cUQsRUFBUVosRUFBT1csRUFFbkIsSUFBSUEsRUFBVSxFQUFHLENBRWZYLEVBQU9qakQsT0FBT3F2QixLQUFLQyxJQUFJazBCLEVBQWFwcUQsRUFBR3dxRCxHQUd2QyxLQUFLLEdBQUl0bkQsR0FBSXNuRCxFQUFTdG5ELEVBQUkybUQsRUFBTy9vRCxPQUFRb0MsSUFDdkMybUQsRUFBTzNtRCxHQUFLLE1BRVQsQ0FFTG9uRCxFQUFjcjBCLEtBQUtDLElBQUksRUFBR28wQixHQUMxQkYsRUFBYXBxRCxFQUFJLEVBQ2pCNnBELEVBQU8vb0QsT0FBU20xQixLQUFLQyxJQUFJLEVBQUdzMEIsRUFBVXBCLEVBQWUsR0FDckRTLEVBQU8sR0FBSyxDQUNaLEtBQUssR0FBSTdwRCxHQUFJLEVBQUdBLEVBQUl3cUQsRUFBU3hxRCxJQUFLNnBELEVBQU83cEQsR0FBSyxFQUdoRCxHQUFJeXFELEdBQVMsRUFDWCxHQUFJRCxFQUFVLEVBQUksRUFBRyxDQUNuQixJQUFLLEdBQUlFLEdBQUksRUFBR0EsRUFBSUYsRUFBU0UsSUFDM0JiLEVBQU9qOEMsUUFBUSxHQUNmdzhDLEVBQWFwcUQsR0FFZjZwRCxHQUFPajhDLFFBQVEsR0FDZnc4QyxFQUFhcHFELFFBRWI2cEQsR0FBT1csRUFBVSxJQUtyQixNQUFPRixFQUFjcjBCLEtBQUtDLElBQUksRUFBR2t6QixHQUFla0IsSUFBZVQsRUFBTzVpRCxLQUFLLEVBSTNFLElBQUkwakQsR0FBUWQsRUFBT2UsWUFBWSxTQUFTRCxFQUFPanBCLEVBQUcxaEMsRUFBRzZwRCxHQUduRCxNQUZBbm9CLElBQVFpcEIsRUFDUmQsRUFBTzdwRCxHQUFLMGhDLEVBQUksR0FDVHpMLEtBQUswRyxNQUFNK0UsRUFBSSxLQUNyQixFQUNDaXBCLEtBQ0ZkLEVBQU9qOEMsUUFBUSs4QyxHQUNmUCxFQUFhcHFELEtBc0JuQixRQUFTd3BELElBQWFHLEVBQVFudEIsRUFBU3F1QixFQUFVQyxFQUFZMUIsR0FFM0QsSUFBTWhvRCxFQUFTdW9ELEtBQVdqcUQsRUFBU2lxRCxJQUFZb0IsTUFBTXBCLEdBQVMsTUFBTyxFQUVyRSxJQUlJUyxHQUpBWSxHQUFjQyxTQUFTdEIsR0FDdkJ1QixHQUFTLEVBQ1R0QixFQUFTM3pCLEtBQUtrMUIsSUFBSXhCLEdBQVUsR0FDNUJ5QixFQUFnQixFQUdwQixJQUFJSixFQUNGSSxFQUFnQixRQUNYLENBQ0xoQixFQUFlamdELEdBQU15L0MsR0FFckJPLEdBQVlDLEVBQWNoQixFQUFjNXNCLEVBQVE2dEIsUUFBUzd0QixFQUFRK3NCLFFBRWpFLElBQUlNLEdBQVNPLEVBQWExb0IsRUFDdEIycEIsRUFBYWpCLEVBQWFwcUQsRUFDMUJncUQsRUFBV0ksRUFBYTErQyxFQUN4QjQvQyxJQUlKLEtBSEFKLEVBQVNyQixFQUFPMEIsT0FBTyxTQUFTTCxFQUFReHBCLEdBQUssTUFBT3dwQixLQUFXeHBCLElBQU0sR0FHOUQycEIsRUFBYSxHQUNsQnhCLEVBQU9qOEMsUUFBUSxHQUNmeTlDLEdBSUVBLEdBQWEsRUFDZkMsRUFBV3pCLEVBQU9qakQsT0FBT3lrRCxFQUFZeEIsRUFBTy9vRCxTQUU1Q3dxRCxFQUFXekIsRUFDWEEsR0FBVSxHQUlaLElBQUkyQixLQUlKLEtBSEkzQixFQUFPL29ELFFBQVUwN0IsRUFBUWl2QixRQUMzQkQsRUFBTzU5QyxRQUFRaThDLEVBQU9qakQsUUFBUTQxQixFQUFRaXZCLE9BQVE1QixFQUFPL29ELFFBQVF1TCxLQUFLLEtBRTdEdzlDLEVBQU8vb0QsT0FBUzA3QixFQUFRa3ZCLE9BQzdCRixFQUFPNTlDLFFBQVFpOEMsRUFBT2pqRCxRQUFRNDFCLEVBQVFrdkIsTUFBTzdCLEVBQU8vb0QsUUFBUXVMLEtBQUssSUFFL0R3OUMsR0FBTy9vRCxRQUNUMHFELEVBQU81OUMsUUFBUWk4QyxFQUFPeDlDLEtBQUssS0FFN0IrK0MsRUFBZ0JJLEVBQU9uL0MsS0FBS3crQyxHQUd4QlMsRUFBU3hxRCxTQUNYc3FELEdBQWlCTixFQUFhUSxFQUFTai9DLEtBQUssS0FHMUMyOUMsSUFDRm9CLEdBQWlCLEtBQU9wQixHQUc1QixNQUFJTCxHQUFTLElBQU11QixFQUNWMXVCLEVBQVFtdkIsT0FBU1AsRUFBZ0I1dUIsRUFBUW92QixPQUV6Q3B2QixFQUFRcXZCLE9BQVNULEVBQWdCNXVCLEVBQVFzdkIsT0FJcEQsUUFBU0MsSUFBVUMsRUFBS25DLEVBQVFwMEMsRUFBTXcyQyxHQUNwQyxHQUFJQyxHQUFNLEVBVVYsTUFUSUYsRUFBTSxHQUFNQyxHQUFXRCxHQUFPLEtBQzVCQyxFQUNGRCxFQUFhLEVBQU5BLEdBRVBBLEdBQU9BLEVBQ1BFLEVBQU0sTUFHVkYsRUFBTSxHQUFLQSxFQUNKQSxFQUFJbHJELE9BQVMrb0QsR0FBUW1DLEVBQU0vQixHQUFZK0IsQ0FJOUMsT0FISXYyQyxLQUNGdTJDLEVBQU1BLEVBQUkzcEMsT0FBTzJwQyxFQUFJbHJELE9BQVMrb0QsSUFFekJxQyxFQUFNRixFQUlmLFFBQVNHLElBQVduL0MsRUFBTTBZLEVBQU14RixFQUFRekssRUFBTXcyQyxHQUU1QyxNQURBL3JDLEdBQVNBLEdBQVUsRUFDWixTQUFTdlYsR0FDZCxHQUFJcEksR0FBUW9JLEVBQUssTUFBUXFDLElBS3pCLFFBSklrVCxFQUFTLEdBQUszZCxHQUFTMmQsS0FDekIzZCxHQUFTMmQsR0FFRyxJQUFWM2QsSUFBMkIsS0FBWjJkLElBQWdCM2QsRUFBUSxJQUNwQ3dwRCxHQUFVeHBELEVBQU9takIsRUFBTWpRLEVBQU13MkMsSUFJeEMsUUFBU0csSUFBY3AvQyxFQUFNcS9DLEVBQVdDLEdBQ3RDLE1BQU8sVUFBUzNoRCxFQUFNcStDLEdBQ3BCLEdBQUl6bUQsR0FBUW9JLEVBQUssTUFBUXFDLElBSXpCLE9BQU9nOEMsR0FGRzlrQixJQURRb29CLEVBQWEsYUFBZSxLQUFPRCxFQUFZLFFBQVUsSUFDMUNyL0MsSUFFYnpLLElBSXhCLFFBQVNncUQsSUFBZTVoRCxFQUFNcStDLEVBQVM5b0MsR0FDckMsR0FBSXNzQyxJQUFRLEVBQUl0c0MsRUFDWnVzQyxFQUFjRCxHQUFRLEVBQUssSUFBTSxFQUtyQyxPQUhBQyxJQUFjVixHQUFVOTFCLEtBQUt1MkIsRUFBTyxFQUFJLFFBQVUsUUFBUUEsRUFBTyxJQUFLLEdBQ3hEVCxHQUFVOTFCLEtBQUtrMUIsSUFBSXFCLEVBQU8sSUFBSyxHQUsvQyxRQUFTRSxJQUF1QkMsR0FFNUIsR0FBSUMsR0FBbUIsR0FBS3RwRCxNQUFLcXBELEVBQU0sRUFBRyxHQUFJRSxRQUc5QyxPQUFPLElBQUl2cEQsTUFBS3FwRCxFQUFNLEdBQUtDLEdBQW9CLEVBQUssRUFBSSxJQUFNQSxHQUdsRSxRQUFTRSxJQUFvQkMsR0FDekIsTUFBTyxJQUFJenBELE1BQUt5cEQsRUFBU0MsY0FBZUQsRUFBU0UsV0FFL0NGLEVBQVNHLFdBQWEsRUFBSUgsRUFBU0YsV0FHekMsUUFBU00sSUFBV3puQyxHQUNqQixNQUFPLFVBQVMvYSxHQUNiLEdBQUl5aUQsR0FBYVYsR0FBdUIvaEQsRUFBS3FpRCxlQUMxQ0ssRUFBWVAsR0FBb0JuaUQsR0FFL0JxdEIsR0FBUXExQixHQUFhRCxDQUd6QixPQUFPckIsSUFGSyxFQUFJOTFCLEtBQUtxM0IsTUFBTXQxQixFQUFPLFFBRVR0UyxJQUkvQixRQUFTNm5DLElBQVc1aUQsRUFBTXErQyxHQUN4QixNQUFPcitDLEdBQUs2aUQsV0FBYSxHQUFLeEUsRUFBUXlFLE1BQU0sR0FBS3pFLEVBQVF5RSxNQUFNLEdBR2pFLFFBQVNDLElBQVUvaUQsRUFBTXErQyxHQUN2QixNQUFPcitDLEdBQUtxaUQsZUFBaUIsRUFBSWhFLEVBQVEyRSxLQUFLLEdBQUszRSxFQUFRMkUsS0FBSyxHQUdsRSxRQUFTQyxJQUFjampELEVBQU1xK0MsR0FDM0IsTUFBT3IrQyxHQUFLcWlELGVBQWlCLEVBQUloRSxFQUFRNkUsU0FBUyxHQUFLN0UsRUFBUTZFLFNBQVMsR0F5STFFLFFBQVN0RyxJQUFXd0IsR0FLbEIsUUFBUytFLEdBQWlCQyxHQUN4QixHQUFJcHRELEVBQ0osSUFBS0EsRUFBUW90RCxFQUFPcHRELE1BQU1xdEQsR0FBaUIsQ0FDekMsR0FBSXJqRCxHQUFPLEdBQUlySCxNQUFLLEdBQ2hCMnFELEVBQVMsRUFDVEMsRUFBUyxFQUNUQyxFQUFheHRELEVBQU0sR0FBS2dLLEVBQUt5akQsZUFBaUJ6akQsRUFBSzBqRCxZQUNuREMsRUFBYTN0RCxFQUFNLEdBQUtnSyxFQUFLNGpELFlBQWM1akQsRUFBSzZqRCxRQUVoRDd0RCxHQUFNLEtBQ1JzdEQsRUFBU2pxRCxFQUFNckQsRUFBTSxHQUFLQSxFQUFNLEtBQ2hDdXRELEVBQVFscUQsRUFBTXJELEVBQU0sR0FBS0EsRUFBTSxNQUVqQ3d0RCxFQUFXcHNELEtBQUs0SSxFQUFNM0csRUFBTXJELEVBQU0sSUFBS3FELEVBQU1yRCxFQUFNLElBQU0sRUFBR3FELEVBQU1yRCxFQUFNLElBQ3hFLElBQUlnQyxHQUFJcUIsRUFBTXJELEVBQU0sSUFBTSxHQUFLc3RELEVBQzNCUSxFQUFJenFELEVBQU1yRCxFQUFNLElBQU0sR0FBS3V0RCxFQUMzQnBXLEVBQUk5ekMsRUFBTXJELEVBQU0sSUFBTSxHQUN0Qit0RCxFQUFLejRCLEtBQUtxM0IsTUFBMkMsSUFBckNxQixXQUFXLE1BQVFodUQsRUFBTSxJQUFNLElBRW5ELE9BREEydEQsR0FBV3ZzRCxLQUFLNEksRUFBTWhJLEVBQUc4ckQsRUFBRzNXLEVBQUc0VyxHQUN4Qi9qRCxFQUVULE1BQU9vakQsR0F2QlQsR0FBSUMsR0FBZ0Isc0dBMkJwQixPQUFPLFVBQVNyakQsRUFBTWlrRCxFQUFRdmtELEdBQzVCLEdBRUlkLEdBQUk1SSxFQUZKMDNCLEVBQU8sR0FDUG5zQixJQWFKLElBVkEwaUQsRUFBU0EsR0FBVSxhQUNuQkEsRUFBUzdGLEVBQVE4RixpQkFBaUJELElBQVdBLEVBQ3pDeHRELEVBQVN1SixLQUNYQSxFQUFPbWtELEdBQWNucEQsS0FBS2dGLEdBQVEzRyxFQUFNMkcsR0FBUW1qRCxFQUFpQm5qRCxJQUcvRGpMLEVBQVNpTCxLQUNYQSxFQUFPLEdBQUlySCxNQUFLcUgsS0FHYnRILEVBQU9zSCxLQUFVc2dELFNBQVN0Z0QsRUFBSzlCLFdBQ2xDLE1BQU84QixFQUdULE1BQU9pa0QsR0FDTGp1RCxFQUFRb3VELEdBQW1CeDZDLEtBQUtxNkMsR0FDNUJqdUQsR0FDRnVMLEVBQVFsRCxFQUFPa0QsRUFBT3ZMLEVBQU8sR0FDN0JpdUQsRUFBUzFpRCxFQUFNZ1csUUFFZmhXLEVBQU1qRixLQUFLMm5ELEdBQ1hBLEVBQVMsS0FJYixJQUFJM2pELEdBQXFCTixFQUFLTyxtQkFXOUIsT0FWSWIsS0FDRlksRUFBcUJiLEVBQWlCQyxFQUFVWSxHQUNoRE4sRUFBT0ksR0FBdUJKLEVBQU1OLEdBQVUsSUFFaEQ1SSxFQUFReUssRUFBTyxTQUFTM0osR0FDdEJnSCxFQUFLeWxELEdBQWF6c0QsR0FDbEI4MUIsR0FBUTl1QixFQUFLQSxFQUFHb0IsRUFBTW8rQyxFQUFROEYsaUJBQWtCNWpELEdBQ3pCLE9BQVYxSSxFQUFtQixJQUFPQSxFQUFNN0IsUUFBUSxXQUFZLElBQUlBLFFBQVEsTUFBTyxPQUcvRTIzQixHQW9DWCxRQUFTb3ZCLE1BQ1AsTUFBTyxVQUFTN1QsRUFBUXFiLEdBSXRCLE1BSElwcUQsR0FBWW9xRCxLQUNaQSxFQUFVLEdBRVBwbEQsRUFBTytwQyxFQUFRcWIsSUFnSjFCLFFBQVN2SCxNQUNQLE1BQU8sVUFBU3dILEVBQU9DLEVBQU9DLEdBTTVCLE1BSkVELEdBREVsNUIsS0FBS2sxQixJQUFJcmxDLE9BQU9xcEMsTUFBWUUsRUFBQUEsRUFDdEJ2cEMsT0FBT3FwQyxHQUVQbnJELEVBQU1tckQsR0FFWjFrRCxHQUFZMGtELEdBQWVELEdBRTNCeHZELEVBQVN3dkQsS0FBUUEsRUFBUUEsRUFBTXRxRCxZQUM5QjVELEVBQVlrdUQsSUFFakJFLEdBQVVBLEdBQVNyRSxNQUFNcUUsR0FBVSxFQUFJcHJELEVBQU1vckQsR0FDN0NBLEVBQVNBLEVBQVEsRUFBS241QixLQUFLQyxJQUFJLEVBQUdnNUIsRUFBTXB1RCxPQUFTc3VELEdBQVNBLEVBRXRERCxHQUFTLEVBQ0pHLEdBQVFKLEVBQU9FLEVBQU9BLEVBQVFELEdBRXZCLElBQVZDLEVBQ0tFLEdBQVFKLEVBQU9DLEVBQU9ELEVBQU1wdUQsUUFFNUJ3dUQsR0FBUUosRUFBT2o1QixLQUFLQyxJQUFJLEVBQUdrNUIsRUFBUUQsR0FBUUMsSUFYdEJGLElBaUJwQyxRQUFTSSxJQUFRSixFQUFPRSxFQUFPRyxHQUM3QixNQUFJbnVELEdBQVM4dEQsR0FBZUEsRUFBTXJ1RCxNQUFNdXVELEVBQU9HLEdBRXhDMXVELEdBQU1rQixLQUFLbXRELEVBQU9FLEVBQU9HLEdBNmlCbEMsUUFBUzFILElBQWN4OUIsR0FvRHJCLFFBQVNtbEMsR0FBa0JDLEdBQ3pCLE1BQU9BLEdBQWVsdkQsSUFBSSxTQUFTbXZELEdBQ2pDLEdBQUlDLEdBQWEsRUFBRzFnRCxFQUFNekssQ0FFMUIsSUFBSTNDLEVBQVc2dEQsR0FDYnpnRCxFQUFNeWdELE1BQ0QsSUFBSXR1RCxFQUFTc3VELEtBQ1csTUFBeEJBLEVBQVUzbUQsT0FBTyxJQUFzQyxNQUF4QjJtRCxFQUFVM21ELE9BQU8sS0FDbkQ0bUQsRUFBcUMsTUFBeEJELEVBQVUzbUQsT0FBTyxJQUFjLEVBQUksRUFDaEQybUQsRUFBWUEsRUFBVTFqRCxVQUFVLElBRWhCLEtBQWQwakQsSUFDRnpnRCxFQUFNb2IsRUFBT3FsQyxHQUNUemdELEVBQUlnRCxXQUFVLENBQ2hCLEdBQUlyUSxHQUFNcU4sR0FDVkEsR0FBTSxTQUFTMU0sR0FBUyxNQUFPQSxHQUFNWCxJQUkzQyxPQUFRcU4sSUFBS0EsRUFBSzBnRCxXQUFZQSxLQUlsQyxRQUFTM3RELEdBQVlPLEdBQ25CLGFBQWVBLElBQ2IsSUFBSyxTQUNMLElBQUssVUFDTCxJQUFLLFNBQ0gsT0FBTyxDQUNULFNBQ0UsT0FBTyxHQUliLFFBQVNxdEQsR0FBWXJ0RCxHQUVuQixNQUFJVixHQUFXVSxFQUFNZ0IsV0FDbkJoQixFQUFRQSxFQUFNZ0IsVUFDVnZCLEVBQVlPLElBQWVBLEdBRzdCb0MsRUFBa0JwQyxLQUNwQkEsRUFBUUEsRUFBTXFDLFdBQ1Y1QyxFQUFZTyxJQUFlQSxHQU1uQyxRQUFTc3RELEdBQWtCdHRELEVBQU8zQixHQUNoQyxHQUFJdUgsU0FBYzVGLEVBT2xCLE9BTmMsUUFBVkEsR0FDRjRGLEVBQU8sU0FDUDVGLEVBQVEsUUFDVSxXQUFUNEYsSUFDVDVGLEVBQVFxdEQsRUFBWXJ0RCxLQUVkQSxNQUFPQSxFQUFPNEYsS0FBTUEsRUFBTXZILE1BQU9BLEdBRzNDLFFBQVNrdkQsR0FBZUMsRUFBSUMsR0FDMUIsR0FBSTl5QyxHQUFTLEVBQ1QreUMsRUFBUUYsRUFBRzVuRCxLQUNYK25ELEVBQVFGLEVBQUc3bkQsSUFFZixJQUFJOG5ELElBQVVDLEVBQU8sQ0FDbkIsR0FBSUMsR0FBU0osRUFBR3h0RCxNQUNaNnRELEVBQVNKLEVBQUd6dEQsS0FFRixZQUFWMHRELEdBRUZFLEVBQVNBLEVBQU81Z0QsY0FDaEI2Z0QsRUFBU0EsRUFBTzdnRCxlQUNHLFdBQVYwZ0QsSUFHTDl3RCxFQUFTZ3hELEtBQVNBLEVBQVNKLEVBQUdudkQsT0FDOUJ6QixFQUFTaXhELEtBQVNBLEVBQVNKLEVBQUdwdkQsUUFHaEN1dkQsSUFBV0MsSUFDYmx6QyxFQUFTaXpDLEVBQVNDLEdBQVUsRUFBSSxPQUdsQ2x6QyxHQUFTK3lDLEVBQVFDLEdBQVMsRUFBSSxDQUdoQyxPQUFPaHpDLEdBMUlULE1BQU8sVUFBUzFXLEVBQU82cEQsRUFBZUMsRUFBY0MsR0EwQmxELFFBQVNDLEdBQW9CanVELEVBQU8zQixHQUlsQyxPQUNFMkIsTUFBT0EsRUFDUGt1RCxZQUFhbHVELE1BQU8zQixFQUFPdUgsS0FBTSxTQUFVdkgsTUFBT0EsR0FDbEQ4dkQsZ0JBQWlCQyxFQUFXcHdELElBQUksU0FBU212RCxHQUN2QyxNQUFPRyxHQUFrQkgsRUFBVXpnRCxJQUFJMU0sR0FBUTNCLE1BS3JELFFBQVNnd0QsR0FBYWIsRUFBSUMsR0FDeEIsSUFBSyxHQUFJaHdELEdBQUksRUFBR2lELEVBQUswdEQsRUFBVzd2RCxPQUFRZCxFQUFJaUQsRUFBSWpELElBQUssQ0FDbkQsR0FBSWtkLEdBQVMyZCxFQUFRazFCLEVBQUdXLGdCQUFnQjF3RCxHQUFJZ3dELEVBQUdVLGdCQUFnQjF3RCxHQUMvRCxJQUFJa2QsRUFDRixNQUFPQSxHQUFTeXpDLEVBQVczd0QsR0FBRzJ2RCxXQUFhQSxFQUkvQyxPQUFROTBCLEVBQVFrMUIsRUFBR1UsV0FBWVQsRUFBR1MsYUFBZVgsRUFBZUMsRUFBR1UsV0FBWVQsRUFBR1MsYUFBZWQsRUE3Q25HLEdBQWEsTUFBVG5wRCxFQUFlLE1BQU9BLEVBQzFCLEtBQUt4RixFQUFZd0YsR0FDZixLQUFNN0csR0FBTyxXQUFXLFdBQVksbUNBQW9DNkcsRUFHckVyRixJQUFRa3ZELEtBQWtCQSxHQUFpQkEsSUFDbkIsSUFBekJBLEVBQWN2dkQsU0FBZ0J1dkQsR0FBaUIsS0FFbkQsSUFBSU0sR0FBYW5CLEVBQWtCYSxHQUUvQlYsRUFBYVcsR0FBZ0IsRUFBSSxFQUdqQ3oxQixFQUFVaDVCLEVBQVcwdUQsR0FBYUEsRUFBWVQsRUFLOUNlLEVBQWdCdHZELE1BQU1rRixVQUFVbEcsSUFBSXdCLEtBQUt5RSxFQUFPZ3FELEVBSXBELE9BSEFLLEdBQWN6dUQsS0FBS3d1RCxHQUNuQnBxRCxFQUFRcXFELEVBQWN0d0QsSUFBSSxTQUFTaUIsR0FBUSxNQUFPQSxHQUFLZSxTQXdIM0QsUUFBU3V1RCxJQUFZeCtDLEdBT25CLE1BTkl6USxHQUFXeVEsS0FDYkEsR0FDRStTLEtBQU0vUyxJQUdWQSxFQUFVMFYsU0FBVzFWLEVBQVUwVixVQUFZLEtBQ3BDdGpCLEVBQVE0TixHQThlakIsUUFBU3krQyxJQUFzQkMsRUFBU2hrRCxHQUN0Q2drRCxFQUFRQyxNQUFRamtELEVBcURsQixRQUFTa2tELElBQWVsb0MsRUFBVUMsRUFBUXVOLEVBQVFoTSxFQUFVTCxHQUMxRHBZLEtBQUtvL0MsY0FHTHAvQyxLQUFLcS9DLFVBQ0xyL0MsS0FBS3MvQyxhQUNMdC9DLEtBQUt1L0MsYUFBVzlwRCxHQUNoQnVLLEtBQUtrL0MsTUFBUTltQyxFQUFhbEIsRUFBT2pjLE1BQVFpYyxFQUFPc29DLFFBQVUsSUFBSS82QixHQUM5RHprQixLQUFLeS9DLFFBQVMsRUFDZHovQyxLQUFLMC9DLFdBQVksRUFDakIxL0MsS0FBSzIvQyxRQUFTLEVBQ2QzL0MsS0FBSzQvQyxVQUFXLEVBQ2hCNS9DLEtBQUs2L0MsWUFBYSxFQUNsQjcvQyxLQUFLOC9DLGFBQWVDLEdBRXBCLy9DLEtBQUtrWixVQUFZakMsRUFDakJqWCxLQUFLZ2dELFVBQVl2bkMsRUFFakJ3bkMsR0FBY2pnRCxNQStlaEIsUUFBU2lnRCxJQUFjaGxDLEdBQ3JCQSxFQUFTaWxDLGdCQUNUamxDLEVBQVNpbEMsYUFBYUMsTUFBbUJsbEMsRUFBU2lsQyxhQUFhRSxJQUFlbmxDLEVBQVMvQixVQUFVblEsU0FBU3EzQyxLQUU1RyxRQUFTQyxJQUFxQnp3RCxHQXFENUIsUUFBUzB3RCxHQUFhQyxFQUFNdGxELEVBQU16SyxFQUFPOFAsR0FDbENpZ0QsRUFBS3RsRCxLQUNSc2xELEVBQUt0bEQsT0FFUGhGLEVBQUlzcUQsRUFBS3RsRCxHQUFPekssRUFBTzhQLEdBR3pCLFFBQVNrZ0QsR0FBZ0JELEVBQU10bEQsRUFBTXpLLEVBQU84UCxHQUN0Q2lnRCxFQUFLdGxELElBQ1B3bEQsRUFBTUYsRUFBS3RsRCxHQUFPekssRUFBTzhQLEdBRXZCb2dELEdBQWNILEVBQUt0bEQsTUFDckJzbEQsRUFBS3RsRCxPQUFReEYsSUFJakIsUUFBU2tyRCxHQUFrQkosRUFBTTdtQyxFQUFXa25DLEdBQ3RDQSxJQUFnQkwsRUFBS0wsYUFBYXhtQyxJQUNwQzZtQyxFQUFLUCxVQUFVLzJDLFNBQVNzM0MsRUFBS3JuQyxVQUFXUSxHQUN4QzZtQyxFQUFLTCxhQUFheG1DLElBQWEsSUFDckJrbkMsR0FBZUwsRUFBS0wsYUFBYXhtQyxLQUMzQzZtQyxFQUFLUCxVQUFVOTJDLFlBQVlxM0MsRUFBS3JuQyxVQUFXUSxHQUMzQzZtQyxFQUFLTCxhQUFheG1DLElBQWEsR0FJbkMsUUFBU21uQyxHQUFvQk4sRUFBTU8sRUFBb0JDLEdBQ3JERCxFQUFxQkEsRUFBcUIsSUFBTTNqRCxHQUFXMmpELEVBQW9CLEtBQU8sR0FFdEZILEVBQWtCSixFQUFNSCxHQUFjVSxHQUFnQyxJQUFaQyxHQUMxREosRUFBa0JKLEVBQU1KLEdBQWdCVyxHQUFnQyxJQUFaQyxHQWxGOUQsR0FBSUMsR0FBUXB4RCxFQUFRb3hELE1BQ2hCL3FELEVBQU1yRyxFQUFRcUcsSUFDZHdxRCxFQUFRN3dELEVBQVE2d0QsS0FFcEJPLEdBQU10c0QsVUFBVXVzRCxhQUFlLFNBQVNILEVBQW9CanZDLEVBQU92UixHQUM3RHhOLEVBQVkrZSxHQUNkeXVDLEVBQWF0Z0QsS0FBTSxXQUFZOGdELEVBQW9CeGdELEdBRW5Ea2dELEVBQWdCeGdELEtBQU0sV0FBWThnRCxFQUFvQnhnRCxHQUVuRC9NLEVBQVVzZSxHQUlUQSxHQUNGNHVDLEVBQU16Z0QsS0FBS3EvQyxPQUFReUIsRUFBb0J4Z0QsR0FDdkNySyxFQUFJK0osS0FBS3MvQyxVQUFXd0IsRUFBb0J4Z0QsS0FFeENySyxFQUFJK0osS0FBS3EvQyxPQUFReUIsRUFBb0J4Z0QsR0FDckNtZ0QsRUFBTXpnRCxLQUFLcy9DLFVBQVd3QixFQUFvQnhnRCxLQVI1Q21nRCxFQUFNemdELEtBQUtxL0MsT0FBUXlCLEVBQW9CeGdELEdBQ3ZDbWdELEVBQU16Z0QsS0FBS3MvQyxVQUFXd0IsRUFBb0J4Z0QsSUFVeENOLEtBQUt1L0MsVUFDUG9CLEVBQWtCM2dELEtBQU1raEQsSUFBZSxHQUN2Q2xoRCxLQUFLMi9DLE9BQVMzL0MsS0FBSzQvQyxhQUFXbnFELEdBQzlCb3JELEVBQW9CN2dELEtBQU0sR0FBSSxRQUU5QjJnRCxFQUFrQjNnRCxLQUFNa2hELElBQWUsR0FDdkNsaEQsS0FBSzIvQyxPQUFTZSxHQUFjMWdELEtBQUtxL0MsUUFDakNyL0MsS0FBSzQvQyxVQUFZNS9DLEtBQUsyL0MsT0FDdEJrQixFQUFvQjdnRCxLQUFNLEdBQUlBLEtBQUsyL0MsUUFPckMsSUFBSXdCLEVBRUZBLEdBREVuaEQsS0FBS3UvQyxVQUFZdi9DLEtBQUt1L0MsU0FBU3VCLE9BQ2pCcnJELElBQ1B1SyxLQUFLcS9DLE9BQU95QixPQUVaOWdELEtBQUtzL0MsVUFBVXdCLElBR1IsTUFHbEJELEVBQW9CN2dELEtBQU04Z0QsRUFBb0JLLEdBQzlDbmhELEtBQUs4L0MsYUFBYW1CLGFBQWFILEVBQW9CSyxFQUFlbmhELE9BcUN0RSxRQUFTMGdELElBQWN4eEQsR0FDckIsR0FBSUEsRUFDRixJQUFLLEdBQUk2RSxLQUFRN0UsR0FDZixHQUFJQSxFQUFJYSxlQUFlZ0UsR0FDckIsT0FBTyxDQUliLFFBQU8sRUF1c0NULFFBQVNxdEQsSUFBcUJiLEdBQzVCQSxFQUFLYyxZQUFZbnNELEtBQUssU0FBUzFFLEdBQzdCLE1BQU8rdkQsR0FBS2UsU0FBUzl3RCxHQUFTQSxFQUFRQSxFQUFNcUMsYUFJaEQsUUFBUzB1RCxJQUFjcGxELEVBQU83SCxFQUFTTixFQUFNdXNELEVBQU14d0MsRUFBVXdnQixHQUMzRGl4QixHQUFjcmxELEVBQU83SCxFQUFTTixFQUFNdXNELEVBQU14d0MsRUFBVXdnQixHQUNwRDZ3QixHQUFxQmIsR0FHdkIsUUFBU2lCLElBQWNybEQsRUFBTzdILEVBQVNOLEVBQU11c0QsRUFBTXh3QyxFQUFVd2dCLEdBQzNELEdBQUluNkIsR0FBTzdCLEdBQVVELEVBQVEsR0FBRzhCLEtBS2hDLEtBQUsyWixFQUFTc2lDLFFBQVMsQ0FDckIsR0FBSW9QLElBQVksQ0FFaEJudEQsR0FBUXdTLEdBQUcsbUJBQW9CLFdBQzdCMjZDLEdBQVksSUFHZG50RCxFQUFRd1MsR0FBRyxpQkFBa0IsV0FDM0IyNkMsR0FBWSxFQUNadndDLE1BSUosR0FBSW1qQixHQUVBbmpCLEVBQVcsU0FBU3d3QyxHQUt0QixHQUpJcnRCLElBQ0Y5RCxFQUFTaGUsTUFBTUcsT0FBTzJoQixHQUN0QkEsRUFBVSxPQUVSb3RCLEVBQUosQ0FDQSxHQUFJanhELEdBQVE4RCxFQUFRc0QsTUFDaEI2UCxFQUFRaTZDLEdBQU1BLEVBQUd0ckQsSUFLUixjQUFUQSxHQUF5QnBDLEVBQUsydEQsUUFBMEIsVUFBaEIzdEQsRUFBSzJ0RCxTQUMvQ254RCxFQUFRa1QsR0FBS2xULEtBTVgrdkQsRUFBS3FCLGFBQWVweEQsR0FBb0IsS0FBVkEsR0FBZ0IrdkQsRUFBS3NCLHdCQUNyRHRCLEVBQUt1QixjQUFjdHhELEVBQU9pWCxJQU05QixJQUFJc0ksRUFBUzJpQyxTQUFTLFNBQ3BCcCtDLEVBQVF3UyxHQUFHLFFBQVNvSyxPQUNmLENBQ0wsR0FBSTZ3QyxHQUFnQixTQUFTTCxFQUFJdkUsRUFBTzZFLEdBQ2pDM3RCLElBQ0hBLEVBQVU5RCxFQUFTaGUsTUFBTSxXQUN2QjhoQixFQUFVLEtBQ0w4b0IsR0FBU0EsRUFBTTNzRCxRQUFVd3hELEdBQzVCOXdDLEVBQVN3d0MsTUFNakJwdEQsR0FBUXdTLEdBQUcsVUFBd0IsU0FBU1csR0FDMUMsR0FBSTVYLEdBQU00WCxFQUFNdzZDLE9BSUosTUFBUnB5RCxHQUFlLEdBQUtBLEdBQU9BLEVBQU0sSUFBUSxJQUFNQSxHQUFPQSxHQUFPLElBRWpFa3lELEVBQWN0NkMsRUFBT3pILEtBQU1BLEtBQUt4UCxTQUk5QnVmLEVBQVMyaUMsU0FBUyxVQUNwQnArQyxFQUFRd1MsR0FBRyxZQUFhaTdDLEdBTTVCenRELEVBQVF3UyxHQUFHLFNBQVVvSyxHQU1qQmd4QyxHQUF5QjlyRCxJQUFTbXFELEVBQUtzQix1QkFBeUJ6ckQsSUFBU3BDLEVBQUtvQyxNQUNoRjlCLEVBQVF3UyxHQUFHcTdDLEdBQXdDLFNBQVNULEdBQzFELElBQUtydEIsRUFBUyxDQUNaLEdBQUkrdEIsR0FBV3BpRCxLQUFLcWlELElBQ2hCQyxFQUFlRixFQUFTRyxTQUN4QkMsRUFBbUJKLEVBQVNLLFlBQ2hDcHVCLEdBQVU5RCxFQUFTaGUsTUFBTSxXQUN2QjhoQixFQUFVLEtBQ04rdEIsRUFBU0csV0FBYUQsR0FBZ0JGLEVBQVNLLGVBQWlCRCxHQUNsRXR4QyxFQUFTd3dDLFFBT25CbkIsRUFBS21DLFFBQVUsV0FFYixHQUFJbHlELEdBQVErdkQsRUFBS2UsU0FBU2YsRUFBS3FCLFlBQWMsR0FBS3JCLEVBQUtxQixVQUNuRHR0RCxHQUFRc0QsUUFBVXBILEdBQ3BCOEQsRUFBUXNELElBQUlwSCxJQUtsQixRQUFTbXlELElBQVdDLEVBQVNDLEdBQzNCLEdBQUl2eEQsRUFBT3N4RCxHQUNULE1BQU9BLEVBR1QsSUFBSXZ6RCxFQUFTdXpELEdBQVUsQ0FDckJFLEdBQVkzc0QsVUFBWSxDQUN4QixJQUFJZ0UsR0FBUTJvRCxHQUFZdGdELEtBQUtvZ0QsRUFDN0IsSUFBSXpvRCxFQUFPLENBQ1QsR0FBSXlnRCxJQUFRemdELEVBQU0sR0FDZDRvRCxHQUFRNW9ELEVBQU0sR0FDZDZvRCxFQUFRLEVBQ1JucUQsRUFBVSxFQUNWb3FELEVBQVUsRUFDVkMsRUFBZSxFQUNmN0gsRUFBYVYsR0FBdUJDLEdBQ3BDdUksRUFBdUIsR0FBWkosRUFBTyxFQVN0QixPQVBJRixLQUNGRyxFQUFRSCxFQUFhcEgsV0FDckI1aUQsRUFBVWdxRCxFQUFhOXBELGFBQ3ZCa3FELEVBQVVKLEVBQWFPLGFBQ3ZCRixFQUFlTCxFQUFhUSxtQkFHdkIsR0FBSTl4RCxNQUFLcXBELEVBQU0sRUFBR1MsRUFBV0YsVUFBWWdJLEVBQVNILEVBQU9ucUQsRUFBU29xRCxFQUFTQyxJQUl0RixNQUFPejFELEtBR1QsUUFBUzYxRCxJQUFpQjdyQyxFQUFROHJDLEdBQ2hDLE1BQU8sVUFBU0MsRUFBSzVxRCxHQUNuQixHQUFJdUIsR0FBTzNMLENBRVgsSUFBSThDLEVBQU9reUQsR0FDVCxNQUFPQSxFQUdULElBQUluMEQsRUFBU20wRCxHQUFNLENBT2pCLEdBSHNCLE1BQWxCQSxFQUFJeHNELE9BQU8sSUFBNkMsTUFBL0J3c0QsRUFBSXhzRCxPQUFPd3NELEVBQUl6MEQsT0FBUyxLQUNuRHkwRCxFQUFNQSxFQUFJdnBELFVBQVUsRUFBR3VwRCxFQUFJejBELE9BQVMsSUFFbEMwMEQsR0FBZ0I3dkQsS0FBSzR2RCxHQUN2QixNQUFPLElBQUlqeUQsTUFBS2l5RCxFQUtsQixJQUhBL3JDLEVBQU90aEIsVUFBWSxFQUNuQmdFLEVBQVFzZCxFQUFPalYsS0FBS2doRCxHQXVCbEIsTUFwQkFycEQsR0FBTXlTLFFBRUpwZSxFQURFb0ssR0FFQThxRCxLQUFNOXFELEVBQUtxaUQsY0FDWDBJLEdBQUkvcUQsRUFBS3NpRCxXQUFhLEVBQ3RCMEksR0FBSWhyRCxFQUFLdWlELFVBQ1QwSSxHQUFJanJELEVBQUs2aUQsV0FDVHFJLEdBQUlsckQsRUFBS0csYUFDVGdyRCxHQUFJbnJELEVBQUt3cUQsYUFDVFksSUFBS3ByRCxFQUFLeXFELGtCQUFvQixNQUd4QkssS0FBTSxLQUFNQyxHQUFJLEVBQUdDLEdBQUksRUFBR0MsR0FBSSxFQUFHQyxHQUFJLEVBQUdDLEdBQUksRUFBR0MsSUFBSyxHQUc5RHQwRCxFQUFReUssRUFBTyxTQUFTOHBELEVBQU1wMUQsR0FDeEJBLEVBQVEwMEQsRUFBUXgwRCxTQUNsQlAsRUFBSSswRCxFQUFRMTBELEtBQVdvMUQsS0FHcEIsR0FBSTF5RCxNQUFLL0MsRUFBSWsxRCxLQUFNbDFELEVBQUltMUQsR0FBSyxFQUFHbjFELEVBQUlvMUQsR0FBSXAxRCxFQUFJcTFELEdBQUlyMUQsRUFBSXMxRCxHQUFJdDFELEVBQUl1MUQsSUFBTSxFQUFhLElBQVZ2MUQsRUFBSXcxRCxLQUFjLEdBSWpHLE1BQU92MkQsTUFJWCxRQUFTeTJELElBQW9COXRELEVBQU1xaEIsRUFBUTBzQyxFQUFXdEgsR0FDcEQsTUFBTyxVQUE4QjFnRCxFQUFPN0gsRUFBU04sRUFBTXVzRCxFQUFNeHdDLEVBQVV3Z0IsRUFBVXVQLEdBNERuRixRQUFTc2tCLEdBQVk1ekQsR0FFbkIsTUFBT0EsTUFBV0EsRUFBTXNHLFNBQVd0RyxFQUFNc0csWUFBY3RHLEVBQU1zRyxXQUcvRCxRQUFTdXRELEdBQXVCenNELEdBQzlCLE1BQU90SyxHQUFVc0ssS0FBU3RHLEVBQU9zRyxHQUFPdXNELEVBQVV2c0QsUUFBUW5DLEdBQVltQyxFQWpFeEUwc0QsR0FBZ0Jub0QsRUFBTzdILEVBQVNOLEVBQU11c0QsR0FDdENpQixHQUFjcmxELEVBQU83SCxFQUFTTixFQUFNdXNELEVBQU14d0MsRUFBVXdnQixFQUNwRCxJQUNJZzBCLEdBREFqc0QsRUFBV2lvRCxHQUFRQSxFQUFLaUUsU0FBU0MsVUFBVSxXQW1DL0MsSUFoQ0FsRSxFQUFLbUUsYUFBZXR1RCxFQUNwQm1xRCxFQUFLb0UsU0FBU3p2RCxLQUFLLFNBQVMxRSxHQUMxQixHQUFJK3ZELEVBQUtlLFNBQVM5d0QsR0FBUSxNQUFPLEtBQ2pDLElBQUlpbkIsRUFBTzdqQixLQUFLcEQsR0FBUSxDQUl0QixHQUFJbzBELEdBQWFULEVBQVUzekQsRUFBTyt6RCxFQUlsQyxPQUhJanNELEtBQ0Zzc0QsRUFBYTVyRCxHQUF1QjRyRCxFQUFZdHNELElBRTNDc3NELEtBS1hyRSxFQUFLYyxZQUFZbnNELEtBQUssU0FBUzFFLEdBQzdCLEdBQUlBLElBQVVjLEVBQU9kLEdBQ25CLEtBQU1xMEQsSUFBYyxVQUFXLDhCQUErQnIwRCxFQUVoRSxPQUFJNHpELEdBQVk1ekQsSUFDZCt6RCxFQUFlL3pELEVBQ1grekQsR0FBZ0Jqc0QsSUFDbEJpc0QsRUFBZXZyRCxHQUF1QnVyRCxFQUFjanNELEdBQVUsSUFFekR3bkMsRUFBUSxRQUFRdHZDLEVBQU9xc0QsRUFBUXZrRCxLQUV0Q2lzRCxFQUFlLEtBQ1IsTUFJUGozRCxFQUFVMEcsRUFBS3drRCxNQUFReGtELEVBQUs4d0QsTUFBTzttQkFDckMsR0FBSUMsRUFDSnhFLEdBQUt5RSxZQUFZeE0sSUFBTSxTQUFTaG9ELEdBQzlCLE9BQVE0ekQsRUFBWTV6RCxJQUFVc0MsRUFBWWl5RCxJQUFXWixFQUFVM3pELElBQVV1MEQsR0FFM0Uvd0QsRUFBS2cxQixTQUFTLE1BQU8sU0FBU3B4QixHQUM1Qm10RCxFQUFTVixFQUF1QnpzRCxHQUNoQzJvRCxFQUFLMEUsY0FJVCxHQUFJMzNELEVBQVUwRyxFQUFLbXdCLE1BQVFud0IsRUFBS2t4RCxNQUFPLENBQ3JDLEdBQUlDLEVBQ0o1RSxHQUFLeUUsWUFBWTdnQyxJQUFNLFNBQVMzekIsR0FDOUIsT0FBUTR6RCxFQUFZNXpELElBQVVzQyxFQUFZcXlELElBQVdoQixFQUFVM3pELElBQVUyMEQsR0FFM0VueEQsRUFBS2cxQixTQUFTLE1BQU8sU0FBU3B4QixHQUM1QnV0RCxFQUFTZCxFQUF1QnpzRCxHQUNoQzJvRCxFQUFLMEUsZ0JBZWIsUUFBU1gsSUFBZ0Jub0QsRUFBTzdILEVBQVNOLEVBQU11c0QsR0FDN0MsR0FBSXpzRCxHQUFPUSxFQUFRLElBQ0lpc0QsRUFBS3NCLHNCQUF3QnowRCxFQUFTMEcsRUFBS3N1RCxZQUVoRTdCLEVBQUtvRSxTQUFTenZELEtBQUssU0FBUzFFLEdBQzFCLEdBQUk0eEQsR0FBVzl0RCxFQUFRUCxLQUFLc3VELE9BQzVCLE9BQU9ELEdBQVNHLFVBQVlILEVBQVNLLGlCQUFlaHRELEdBQVlqRixJQUt0RSxRQUFTNDBELElBQXNCN0UsR0FDN0JBLEVBQUttRSxhQUFlLFNBQ3BCbkUsRUFBS29FLFNBQVN6dkQsS0FBSyxTQUFTMUUsR0FDMUIsTUFBSSt2RCxHQUFLZSxTQUFTOXdELEdBQW9CLEtBQ2xDNjBELEdBQWN6eEQsS0FBS3BELEdBQWVvc0QsV0FBV3BzRCxPQUFqRCxLQUlGK3ZELEVBQUtjLFlBQVluc0QsS0FBSyxTQUFTMUUsR0FDN0IsSUFBSyt2RCxFQUFLZSxTQUFTOXdELEdBQVEsQ0FDekIsSUFBSzdDLEVBQVM2QyxHQUNaLEtBQU1xMEQsSUFBYyxTQUFVLGdDQUFpQ3IwRCxFQUVqRUEsR0FBUUEsRUFBTXFDLFdBRWhCLE1BQU9yQyxLQUlYLFFBQVM4MEQsSUFBbUIxdEQsR0FJMUIsTUFISXRLLEdBQVVzSyxLQUFTakssRUFBU2lLLEtBQzlCQSxFQUFNZ2xELFdBQVdobEQsSUFFWGMsR0FBWWQsT0FBYW5DLEdBQU5tQyxFQUc3QixRQUFTMnRELElBQWdCdEwsR0FLdkIsT0FBYyxFQUFOQSxLQUFhQSxFQUd2QixRQUFTdUwsSUFBY3ZMLEdBQ3JCLEdBQUl3TCxHQUFZeEwsRUFBSXBuRCxXQUNoQjZ5RCxFQUFxQkQsRUFBVTl3RCxRQUFRLElBRTNDLEtBQTRCLElBQXhCK3dELEVBQTJCLENBQzdCLElBQUssRUFBSXpMLEdBQU9BLEVBQU0sRUFBRyxDQUV2QixHQUFJcnJELEdBQVEsV0FBVzRULEtBQUtpakQsRUFFNUIsSUFBSTcyRCxFQUNGLE1BQU9tbEIsUUFBT25sQixFQUFNLElBSXhCLE1BQU8sR0FHVCxNQUFPNjJELEdBQVUxMkQsT0FBUzIyRCxFQUFxQixFQUdqRCxRQUFTQyxJQUFlQyxFQUFXQyxFQUFVQyxHQUczQyxHQUFJdDFELEdBQVF1akIsT0FBTzZ4QyxHQUVmRyxHQUFxQlIsR0FBZ0IvMEQsR0FDckN3MUQsR0FBd0JULEdBQWdCTSxHQUN4Q0ksR0FBb0JWLEdBQWdCTyxFQUl4QyxJQUFJQyxHQUFxQkMsR0FBd0JDLEVBQWtCLENBQ2pFLEdBQUlDLEdBQWdCSCxFQUFvQlAsR0FBY2gxRCxHQUFTLEVBQzNEMjFELEVBQW1CSCxFQUF1QlIsR0FBY0ssR0FBWSxFQUNwRU8sRUFBZUgsRUFBbUJULEdBQWNNLEdBQVEsRUFFeERPLEVBQWVuaUMsS0FBS0MsSUFBSStoQyxFQUFlQyxFQUFrQkMsR0FDekRFLEVBQWFwaUMsS0FBS3FpQyxJQUFJLEdBQUlGLEVBRTlCNzFELElBQWdCODFELEVBQ2hCVCxHQUFzQlMsRUFDdEJSLEdBQWNRLEVBRVZQLElBQW1CdjFELEVBQVEwekIsS0FBS3EzQixNQUFNL3FELElBQ3RDdzFELElBQXNCSCxFQUFXM2hDLEtBQUtxM0IsTUFBTXNLLElBQzVDSSxJQUFrQkgsRUFBTzVoQyxLQUFLcTNCLE1BQU11SyxJQUcxQyxPQUFRdDFELEVBQVFxMUQsR0FBWUMsR0FBUyxFQUd2QyxRQUFTVSxJQUFnQnJxRCxFQUFPN0gsRUFBU04sRUFBTXVzRCxFQUFNeHdDLEVBQVV3Z0IsR0FDN0QrekIsR0FBZ0Jub0QsRUFBTzdILEVBQVNOLEVBQU11c0QsR0FDdEM2RSxHQUFzQjdFLEdBQ3RCaUIsR0FBY3JsRCxFQUFPN0gsRUFBU04sRUFBTXVzRCxFQUFNeHdDLEVBQVV3Z0IsRUFFcEQsSUFBSXcwQixHQUNBSSxDQTBCSixLQXhCSTczRCxFQUFVMEcsRUFBS3drRCxNQUFReGtELEVBQUs4d0QsU0FDOUJ2RSxFQUFLeUUsWUFBWXhNLElBQU0sU0FBU2hvRCxHQUM5QixNQUFPK3ZELEdBQUtlLFNBQVM5d0QsSUFBVXNDLEVBQVlpeUQsSUFBV3YwRCxHQUFTdTBELEdBR2pFL3dELEVBQUtnMUIsU0FBUyxNQUFPLFNBQVNweEIsR0FDNUJtdEQsRUFBU08sR0FBbUIxdEQsR0FFNUIyb0QsRUFBSzBFLGdCQUlMMzNELEVBQVUwRyxFQUFLbXdCLE1BQVFud0IsRUFBS2t4RCxTQUM5QjNFLEVBQUt5RSxZQUFZN2dDLElBQU0sU0FBUzN6QixHQUM5QixNQUFPK3ZELEdBQUtlLFNBQVM5d0QsSUFBVXNDLEVBQVlxeUQsSUFBVzMwRCxHQUFTMjBELEdBR2pFbnhELEVBQUtnMUIsU0FBUyxNQUFPLFNBQVNweEIsR0FDNUJ1dEQsRUFBU0csR0FBbUIxdEQsR0FFNUIyb0QsRUFBSzBFLGVBSUwzM0QsRUFBVTBHLEVBQUs4eEQsT0FBUzl4RCxFQUFLeXlELE9BQVEsQ0FDdkMsR0FBSUMsRUFDSm5HLEdBQUt5RSxZQUFZYyxLQUFPLFNBQVNhLEVBQVlmLEdBQzNDLE1BQU9yRixHQUFLZSxTQUFTc0UsSUFBYzl5RCxFQUFZNHpELElBQ3hDZixHQUFlQyxFQUFXYixHQUFVLEVBQUcyQixJQUdoRDF5RCxFQUFLZzFCLFNBQVMsT0FBUSxTQUFTcHhCLEdBQzdCOHVELEVBQVVwQixHQUFtQjF0RCxHQUU3QjJvRCxFQUFLMEUsZUFLWCxRQUFTMkIsSUFBZXpxRCxFQUFPN0gsRUFBU04sRUFBTXVzRCxFQUFNeHdDLEVBQVV3Z0IsR0FrRTVELFFBQVNzMkIsR0FBMkJDLEVBQWNDLEdBSWhEenlELEVBQVFOLEtBQUs4eUQsRUFBYzl5RCxFQUFLOHlELElBQ2hDOXlELEVBQUtnMUIsU0FBUzg5QixFQUFjQyxHQUc5QixRQUFTQyxHQUFVcHZELEdBR2pCLEdBRkFtdEQsRUFBU08sR0FBbUIxdEQsSUFFeEJjLEdBQVk2bkQsRUFBSzBHLGFBSXJCLEdBQUlDLEVBQWUsQ0FDakIsR0FBSUMsR0FBUTd5RCxFQUFRc0QsS0FFaEJtdEQsR0FBU29DLElBQ1hBLEVBQVFwQyxFQUNSendELEVBQVFzRCxJQUFJdXZELElBRWQ1RyxFQUFLdUIsY0FBY3FGLE9BR25CNUcsR0FBSzBFLFlBSVQsUUFBU21DLEdBQVV4dkQsR0FHakIsR0FGQXV0RCxFQUFTRyxHQUFtQjF0RCxJQUV4QmMsR0FBWTZuRCxFQUFLMEcsYUFJckIsR0FBSUMsRUFBZSxDQUNqQixHQUFJQyxHQUFRN3lELEVBQVFzRCxLQUVoQnV0RCxHQUFTZ0MsSUFDWDd5RCxFQUFRc0QsSUFBSXV0RCxHQUVaZ0MsRUFBUWhDLEVBQVNKLEVBQVNBLEVBQVNJLEdBRXJDNUUsRUFBS3VCLGNBQWNxRixPQUduQjVHLEdBQUswRSxZQUlULFFBQVNvQyxHQUFXenZELEdBQ2xCOHVELEVBQVVwQixHQUFtQjF0RCxHQUV6QmMsR0FBWTZuRCxFQUFLMEcsZUFLakJDLEdBQWlCM0csRUFBS3FCLGFBQWV0dEQsRUFBUXNELE1BQy9DMm9ELEVBQUt1QixjQUFjeHRELEVBQVFzRCxPQUczQjJvRCxFQUFLMEUsYUFoSVRYLEdBQWdCbm9ELEVBQU83SCxFQUFTTixFQUFNdXNELEdBQ3RDNkUsR0FBc0I3RSxHQUN0QmlCLEdBQWNybEQsRUFBTzdILEVBQVNOLEVBQU11c0QsRUFBTXh3QyxFQUFVd2dCLEVBRXBELElBQUkyMkIsR0FBZ0IzRyxFQUFLc0IsdUJBQTZDLFVBQXBCdnRELEVBQVEsR0FBRzhCLEtBQ3pEMnVELEVBQVNtQyxFQUFnQixNQUFJenhELEdBQzdCMHZELEVBQVMrQixFQUFnQixRQUFNenhELEdBQy9CaXhELEVBQVVRLEVBQWdCLE1BQUl6eEQsR0FDOUIyc0QsRUFBVzl0RCxFQUFRLEdBQUc4dEQsU0FDdEJrRixFQUFhaDZELEVBQVUwRyxFQUFLd2tELEtBQzVCK08sRUFBYWo2RCxFQUFVMEcsRUFBS213QixLQUM1QnFqQyxFQUFjbDZELEVBQVUwRyxFQUFLOHhELE1BRTdCMkIsRUFBaUJsSCxFQUFLbUMsT0FFMUJuQyxHQUFLbUMsUUFBVXdFLEdBQWlCNTVELEVBQVU4MEQsRUFBU3NGLGlCQUFtQnA2RCxFQUFVODBELEVBQVN1RixlQUd2RixXQUNFRixJQUNBbEgsRUFBS3VCLGNBQWN4dEQsRUFBUXNELFFBRTdCNnZELEVBRUVILElBQ0YvRyxFQUFLeUUsWUFBWXhNLElBQU0wTyxFQUVyQixXQUE4QixPQUFPLEdBRXJDLFNBQXNCUCxFQUFZZixHQUNoQyxNQUFPckYsR0FBS2UsU0FBU3NFLElBQWM5eUQsRUFBWWl5RCxJQUFXYSxHQUFhYixHQUczRThCLEVBQTJCLE1BQU9HLElBR2hDTyxJQUNGaEgsRUFBS3lFLFlBQVk3Z0MsSUFBTStpQyxFQUVyQixXQUE4QixPQUFPLEdBRXJDLFNBQXNCUCxFQUFZZixHQUNoQyxNQUFPckYsR0FBS2UsU0FBU3NFLElBQWM5eUQsRUFBWXF5RCxJQUFXUyxHQUFhVCxHQUczRTBCLEVBQTJCLE1BQU9PLElBR2hDSSxJQUNGakgsRUFBS3lFLFlBQVljLEtBQU9vQixFQUN0QixXQUlFLE9BQVE5RSxFQUFTd0YsY0FHbkIsU0FBdUJqQixFQUFZZixHQUNqQyxNQUFPckYsR0FBS2UsU0FBU3NFLElBQWM5eUQsRUFBWTR6RCxJQUN4Q2YsR0FBZUMsRUFBV2IsR0FBVSxFQUFHMkIsSUFHbERHLEVBQTJCLE9BQVFRLElBdUV2QyxRQUFTUSxJQUFhMXJELEVBQU83SCxFQUFTTixFQUFNdXNELEVBQU14d0MsRUFBVXdnQixHQUcxRGl4QixHQUFjcmxELEVBQU83SCxFQUFTTixFQUFNdXNELEVBQU14d0MsRUFBVXdnQixHQUNwRDZ3QixHQUFxQmIsR0FFckJBLEVBQUttRSxhQUFlLE1BQ3BCbkUsRUFBS3lFLFlBQVkzMEMsSUFBTSxTQUFTczJDLEVBQVlmLEdBQzFDLEdBQUlwMUQsR0FBUW0yRCxHQUFjZixDQUMxQixPQUFPckYsR0FBS2UsU0FBUzl3RCxJQUFVczNELEdBQVdsMEQsS0FBS3BELElBSW5ELFFBQVN1M0QsSUFBZTVyRCxFQUFPN0gsRUFBU04sRUFBTXVzRCxFQUFNeHdDLEVBQVV3Z0IsR0FHNURpeEIsR0FBY3JsRCxFQUFPN0gsRUFBU04sRUFBTXVzRCxFQUFNeHdDLEVBQVV3Z0IsR0FDcEQ2d0IsR0FBcUJiLEdBRXJCQSxFQUFLbUUsYUFBZSxRQUNwQm5FLEVBQUt5RSxZQUFZZ0QsTUFBUSxTQUFTckIsRUFBWWYsR0FDNUMsR0FBSXAxRCxHQUFRbTJELEdBQWNmLENBQzFCLE9BQU9yRixHQUFLZSxTQUFTOXdELElBQVV5M0QsR0FBYXIwRCxLQUFLcEQsSUFJckQsUUFBUzAzRCxJQUFlL3JELEVBQU83SCxFQUFTTixFQUFNdXNELEdBQzVDLEdBQUk0SCxJQUFVbjBELEVBQUsydEQsUUFBZ0MsVUFBdEJqK0MsR0FBSzFQLEVBQUsydEQsT0FFbkM3dUQsR0FBWWtCLEVBQUtpSCxPQUNuQjNHLEVBQVFOLEtBQUssT0FBUXZELElBR3ZCLElBQUl5Z0IsR0FBVyxTQUFTd3dDLEdBQ3RCLEdBQUlseEQsRUFDQThELEdBQVEsR0FBRzh6RCxVQUNiNTNELEVBQVF3RCxFQUFLeEQsTUFDVDIzRCxJQUNGMzNELEVBQVFrVCxHQUFLbFQsSUFFZit2RCxFQUFLdUIsY0FBY3R4RCxFQUFPa3hELEdBQU1BLEVBQUd0ckQsT0FJdkM5QixHQUFRd1MsR0FBRyxRQUFTb0ssR0FFcEJxdkMsRUFBS21DLFFBQVUsV0FDYixHQUFJbHlELEdBQVF3RCxFQUFLeEQsS0FDYjIzRCxLQUNGMzNELEVBQVFrVCxHQUFLbFQsSUFFZjhELEVBQVEsR0FBRzh6RCxRQUFXNTNELElBQVUrdkQsRUFBS3FCLFlBR3ZDNXRELEVBQUtnMUIsU0FBUyxRQUFTdTNCLEVBQUttQyxTQUc5QixRQUFTMkYsSUFBa0IvdkMsRUFBUTFvQixFQUFTcUwsRUFBTTB4QixFQUFZcDBCLEdBQzVELEdBQUkrdkQsRUFDSixJQUFJaDdELEVBQVVxL0IsR0FBYSxDQUV6QixHQURBMjdCLEVBQVVod0MsRUFBT3FVLElBQ1oyN0IsRUFBUXBvRCxTQUNYLEtBQU0ya0QsSUFBYyxZQUFhLHlEQUNNNXBELEVBQU0weEIsRUFFL0MsT0FBTzI3QixHQUFRMTRELEdBRWpCLE1BQU8ySSxHQUdULFFBQVNnd0QsSUFBa0Jwc0QsRUFBTzdILEVBQVNOLEVBQU11c0QsRUFBTXh3QyxFQUFVd2dCLEVBQVV1UCxFQUFTeG5CLEdBQ2xGLEdBQUlrd0MsR0FBWUgsR0FBa0IvdkMsRUFBUW5jLEVBQU8sY0FBZW5JLEVBQUt5MEQsYUFBYSxHQUM5RUMsRUFBYUwsR0FBa0IvdkMsRUFBUW5jLEVBQU8sZUFBZ0JuSSxFQUFLMjBELGNBQWMsR0FFakZ6M0MsRUFBVyxTQUFTd3dDLEdBQ3RCbkIsRUFBS3VCLGNBQWN4dEQsRUFBUSxHQUFHOHpELFFBQVMxRyxHQUFNQSxFQUFHdHJELE1BR2xEOUIsR0FBUXdTLEdBQUcsUUFBU29LLEdBRXBCcXZDLEVBQUttQyxRQUFVLFdBQ2JwdUQsRUFBUSxHQUFHOHpELFFBQVU3SCxFQUFLcUIsWUFNNUJyQixFQUFLZSxTQUFXLFNBQVM5d0QsR0FDdkIsT0FBaUIsSUFBVkEsR0FHVCt2RCxFQUFLYyxZQUFZbnNELEtBQUssU0FBUzFFLEdBQzdCLE1BQU9nRyxHQUFPaEcsRUFBT2c0RCxLQUd2QmpJLEVBQUtvRSxTQUFTenZELEtBQUssU0FBUzFFLEdBQzFCLE1BQU9BLEdBQVFnNEQsRUFBWUUsSUEra0IvQixRQUFTRSxJQUFlM3RELEVBQU1xSyxHQStHNUIsUUFBU3VqRCxHQUFnQi84QixFQUFTQyxHQUNoQyxJQUFLRCxJQUFZQSxFQUFRLzhCLE9BQVEsUUFDakMsS0FBS2c5QixJQUFZQSxFQUFRaDlCLE9BQVEsTUFBTys4QixFQUV4QyxJQUFJRCxLQUVKRyxHQUNBLElBQUssR0FBSS85QixHQUFJLEVBQUdBLEVBQUk2OUIsRUFBUS84QixPQUFRZCxJQUFLLENBRXZDLElBQUssR0FERGcrQixHQUFRSCxFQUFRNzlCLEdBQ1hrRCxFQUFJLEVBQUdBLEVBQUk0NkIsRUFBUWg5QixPQUFRb0MsSUFDbEMsR0FBSTg2QixJQUFVRixFQUFRNTZCLEdBQUksUUFBUzY2QixFQUVyQ0gsR0FBTzMyQixLQUFLKzJCLEdBR2QsTUFBT0osR0FHVCxRQUFTejNCLEdBQU0wMEQsR0FDYixNQUFPQSxJQUFlQSxFQUFZMTBELE1BQU0sS0FHMUMsUUFBUzIwRCxHQUFjQyxHQUNyQixHQUFJRixHQUFjRSxDQVVsQixPQVJJNTVELElBQVE0NUQsR0FDVkYsRUFBY0UsRUFBV3g2RCxJQUFJdTZELEdBQWV6dUQsS0FBSyxLQUN4Q2xOLEVBQVM0N0QsS0FDbEJGLEVBQWN2NUQsT0FBT2EsS0FBSzQ0RCxHQUN4QjNvRCxPQUFPLFNBQVN4USxHQUFPLE1BQU9tNUQsR0FBV241RCxLQUN6Q3lLLEtBQUssTUFHRnd1RCxFQUdULFFBQVNHLEdBQVlELEdBQ25CLEdBQUlFLEdBQVlGLENBRWhCLElBQUk1NUQsR0FBUTQ1RCxHQUNWRSxFQUFZRixFQUFXeDZELElBQUl5NkQsT0FDdEIsSUFBSTc3RCxFQUFTNDdELEdBQWEsQ0FDL0IsR0FBSUcsSUFBZSxDQUVuQkQsR0FBWTM1RCxPQUFPYSxLQUFLNDRELEdBQVkzb0QsT0FBTyxTQUFTeFEsR0FDbEQsR0FBSVcsR0FBUXc0RCxFQUFXbjVELEVBTXZCLFFBSktzNUQsR0FBZ0JyMkQsRUFBWXRDLEtBQy9CMjRELEdBQWUsR0FHVjM0RCxJQUdMMjRELEdBR0ZELEVBQVVoMEQsU0FBS08sSUFJbkIsTUFBT3l6RCxHQTNLVGp1RCxFQUFPLFVBQVlBLENBQ25CLElBQUltdUQsRUFFSixRQUFRLFNBQVUsU0FBUzl3QyxHQUN6QixPQUNFckMsU0FBVSxLQUNWM0MsS0FBTSxTQUFTblgsRUFBTzdILEVBQVNOLEdBZ0M3QixRQUFTcTFELEdBQVdQLEdBQ2xCQSxFQUFjUSxFQUFrQmwxRCxFQUFNMDBELEdBQWMsR0FDcEQ5MEQsRUFBSzQxQixVQUFVay9CLEdBR2pCLFFBQVNTLEdBQWNULEdBQ3JCQSxFQUFjUSxFQUFrQmwxRCxFQUFNMDBELElBQWUsR0FDckQ5MEQsRUFBSzgxQixhQUFhZy9CLEdBR3BCLFFBQVNVLEdBQWNDLEVBQWdCQyxHQUNyQyxHQUFJQyxHQUFnQnYxRCxFQUFNcTFELEdBQ3RCRyxFQUFnQngxRCxFQUFNczFELEdBRXRCRyxFQUFnQmhCLEVBQWdCYyxFQUFlQyxHQUMvQ0UsRUFBYWpCLEVBQWdCZSxFQUFlRCxHQUU1Q0ksRUFBaUJULEVBQWtCTyxHQUFnQixHQUNuREcsRUFBY1YsRUFBa0JRLEVBQVksRUFFaEQ5MUQsR0FBSzQxQixVQUFVb2dDLEdBQ2ZoMkQsRUFBSzgxQixhQUFhaWdDLEdBR3BCLFFBQVNULEdBQWtCVyxFQUFZbHhCLEdBQ3JDLEdBQUlteEIsS0FXSixPQVRBeDZELEdBQVF1NkQsRUFBWSxTQUFTdndDLElBQ3ZCcWYsRUFBUSxHQUFLb3hCLEVBQVl6d0MsTUFDM0J5d0MsRUFBWXp3QyxJQUFjeXdDLEVBQVl6d0MsSUFBYyxHQUFLcWYsRUFDckRveEIsRUFBWXp3QyxPQUFpQnFmLEVBQVEsSUFDdkNteEIsRUFBZ0JoMUQsS0FBS3drQixNQUtwQnd3QyxFQUFnQjV2RCxLQUFLLEtBRzlCLFFBQVM4dkQsR0FBd0JDLEdBSTNCQSxJQUFjL2tELEVBQ2hCK2pELEVBQVdJLEdBRVhGLEVBQWNFLEdBR2hCYSxFQUFZRCxFQUdkLFFBQVNFLEdBQTBCQyxHQUNqQyxHQUFJZCxHQUFpQlgsRUFBY3lCLEVBRS9CZCxLQUFtQkQsR0FDckJnQixFQUFtQmYsR0FJdkIsUUFBU2UsR0FBbUJmLEdBQ3RCWSxJQUFjaGxELEdBQ2hCa2tELEVBQWNDLEVBQWdCQyxHQUdoQ0QsRUFBaUJDLEVBaEduQixHQVNJRCxHQVRBOThCLEVBQWEzNEIsRUFBS2lILEdBQU15SSxPQUN4QmduRCxFQUFzQyxNQUF6Qi85QixFQUFXMzFCLE9BQU8sSUFBeUMsTUFBekIyMUIsRUFBVzMxQixPQUFPLEdBRWpFMnpELEVBQW1CRCxFQUFZekIsRUFBY0YsRUFDN0M2QixFQUFrQnR5QyxFQUFPcVUsRUFBWWcrQixHQUNyQ0UsRUFBY0gsRUFBWUgsRUFBNEJFLEVBRXRETixFQUFjNzFELEVBQVFnSSxLQUFLLGdCQUMzQmd1RCxHQUFZLENBR1hILEtBR0hBLEVBQWNwekQsS0FDZHpDLEVBQVFnSSxLQUFLLGVBQWdCNnRELElBR2xCLFlBQVRsdkQsSUFDR211RCxJQUNIQSxFQUF1Qjl3QyxFQUFPLFNBQVUsU0FBbUJ3eUMsR0FFekQsTUFBZ0IsR0FBVEEsS0FJWDN1RCxFQUFNaEosT0FBT2kyRCxFQUFzQmdCLElBR3JDanVELEVBQU1oSixPQUFPeTNELEVBQWlCQyxFQUFhSCxPQTZ1RW5ELFFBQVNLLElBQWtCdG1DLEVBQVEvTixFQUFtQnVDLEVBQU9oQyxFQUFVcUIsRUFBUUcsRUFBVXd3QixFQUFVdlksRUFBSXRZLEdBQ3JHcFksS0FBSzRoRCxXQUFhN3RDLE9BQU90bUIsSUFDekJ1UyxLQUFLaW5ELFlBQWNsekMsT0FBT3RtQixJQUMxQnVTLEtBQUtnckQsb0JBQWtCdjFELEdBQ3ZCdUssS0FBS2dsRCxlQUNMaGxELEtBQUtpckQsb0JBQ0xqckQsS0FBSzJrRCxZQUNMM2tELEtBQUtxaEQsZUFDTHJoRCxLQUFLa3JELHdCQUNMbHJELEtBQUttckQsWUFBYSxFQUNsQm5yRCxLQUFLb3JELFVBQVcsRUFDaEJwckQsS0FBSzAvQyxXQUFZLEVBQ2pCMS9DLEtBQUt5L0MsUUFBUyxFQUNkei9DLEtBQUsyL0MsUUFBUyxFQUNkMy9DLEtBQUs0L0MsVUFBVyxFQUNoQjUvQyxLQUFLcS9DLFVBQ0xyL0MsS0FBS3MvQyxhQUNMdC9DLEtBQUt1L0MsYUFBVzlwRCxHQUNoQnVLLEtBQUtrL0MsTUFBUTltQyxFQUFhYSxFQUFNaGUsTUFBUSxJQUFJLEdBQU93cEIsR0FDbkR6a0IsS0FBSzgvQyxhQUFlQyxHQUNwQi8vQyxLQUFLd2tELFNBQVc2RyxHQUVoQnJyRCxLQUFLc3JELGdCQUFrQmh6QyxFQUFPVyxFQUFNc3lDLFNBQ3BDdnJELEtBQUt3ckQsc0JBQXdCeHJELEtBQUtzckQsZ0JBQWdCbmlDLE9BQ2xEbnBCLEtBQUt5ckQsYUFBZXpyRCxLQUFLc3JELGdCQUN6QnRyRCxLQUFLMHJELGFBQWUxckQsS0FBS3dyRCxzQkFDekJ4ckQsS0FBSzJyRCxrQkFBb0IsS0FDekIzckQsS0FBSzRyRCxrQkFBZ0JuMkQsR0FFckJ1SyxLQUFLNnJELHlCQUEyQixFQUloQ3Q4RCxPQUFPdThELGVBQWU5ckQsS0FBTSxXQUFZeFAsTUFBT2kwQixJQUMvQ3prQixLQUFLK3JELE9BQVM5eUMsRUFDZGpaLEtBQUtrWixVQUFZakMsRUFDakJqWCxLQUFLZ2dELFVBQVl2bkMsRUFDakJ6WSxLQUFLZ3NELFVBQVkvaUIsRUFDakJqcEMsS0FBSzI3QixRQUFVcmpCLEVBQ2Z0WSxLQUFLNjRCLElBQU1uSSxFQUNYMXdCLEtBQUtpc0QsbUJBQXFCdjFDLEVBRTFCdXBDLEdBQWNqZ0QsTUFDZGtzRCxHQUFrQmxzRCxNQThrQnBCLFFBQVNrc0QsSUFBa0IzTCxHQVN6QkEsRUFBSy80QixRQUFRcjBCLE9BQU8sU0FBc0JnSixHQUN4QyxHQUFJd3FELEdBQWFwRyxFQUFLa0wsYUFBYXR2RCxFQUluQyxJQUFJd3FELElBQWVwRyxFQUFLMEcsY0FHcEIxRyxFQUFLMEcsY0FBZ0IxRyxFQUFLMEcsYUFBZU4sSUFBZUEsR0FDMUQsQ0FDQXBHLEVBQUswRyxZQUFjMUcsRUFBS3lLLGdCQUFrQnJFLEVBQzFDcEcsRUFBS3FMLGtCQUFnQm4yRCxFQU1yQixLQUpBLEdBQUkwMkQsR0FBYTVMLEVBQUtjLFlBQ2xCNWxDLEVBQU0wd0MsRUFBV3A5RCxPQUVqQjYyRCxFQUFZZSxFQUNUbHJDLEtBQ0xtcUMsRUFBWXVHLEVBQVcxd0MsR0FBS21xQyxFQUUxQnJGLEdBQUtxQixhQUFlZ0UsSUFDdEJyRixFQUFLNkwscUJBQXFCeEcsR0FDMUJyRixFQUFLcUIsV0FBYXJCLEVBQUs4TCx5QkFBMkJ6RyxFQUNsRHJGLEVBQUttQyxVQUdMbkMsRUFBSytMLGdCQUFnQi9MLEVBQUswRyxZQUFhMUcsRUFBS3FCLFdBQVlwdkQsSUFJNUQsTUFBT20wRCxLQTJTWCxRQUFTNEYsSUFBYTM4QyxHQUNwQjVQLEtBQUt3c0QsVUFBWTU4QyxFQTBWbkIsUUFBUzRmLElBQVN6K0IsRUFBS00sR0FDckIzQixFQUFRMkIsRUFBSyxTQUFTYixFQUFPWCxHQUN0QnZDLEVBQVV5RCxFQUFJbEIsTUFDakJrQixFQUFJbEIsR0FBT1csS0ErOUVqQixRQUFTaThELElBQXdCQyxFQUFVbDhELEdBQ3pDazhELEVBQVMzNEQsS0FBSyxXQUFZdkQsR0FRMUJrOEQsRUFBUzE0RCxLQUFLLFdBQVl4RCxHQXB1L0I1QixHQUFJbkQsS0FDRkUsZUFBZ0IsR0FrT2RvL0QsR0FBc0IscUJBSXRCdEssR0FBMEIsV0FHMUJ0eUQsR0FBaUJSLE9BQU9tRixVQUFVM0UsZUFpQmxDd0UsR0FBWSxTQUFTeW5ELEdBQVMsTUFBTzNzRCxHQUFTMnNELEdBQVVBLEVBQU94K0MsY0FBZ0J3K0MsR0FpQi9FN3BCLEdBQVksU0FBUzZwQixHQUFTLE1BQU8zc0QsR0FBUzJzRCxHQUFVQSxFQUFPMzZDLGNBQWdCMjZDLEdBRy9FNFEsR0FBa0IsU0FBUzdtQixHQUU3QixNQUFPMTJDLEdBQVMwMkMsR0FDVkEsRUFBRXAzQyxRQUFRLFNBQVUsU0FBU3VvQyxHQUFLLE1BQU8yMUIsUUFBT0MsYUFBZ0MsR0FBbkI1MUIsRUFBRzYxQixXQUFXLE1BQzNFaG5CLEdBR0ppbkIsR0FBa0IsU0FBU2puQixHQUU3QixNQUFPMTJDLEdBQVMwMkMsR0FDVkEsRUFBRXAzQyxRQUFRLFNBQVUsU0FBU3VvQyxHQUFLLE1BQU8yMUIsUUFBT0MsY0FBZ0MsR0FBbkI1MUIsRUFBRzYxQixXQUFXLE1BQzNFaG5CLEVBUUosT0FBUSxJQUFJdm9DLGdCQUNkakosR0FBWXE0RCxHQUNaejZCLEdBQVk2NkIsR0FJZCxJQUNJOS9DLElBQ0E1ZCxHQUNBMjlELEdBVUE3Z0QsR0FUQXRkLE1BQXVCQSxNQUN2QitGLE1BQXVCQSxPQUN2QkssTUFBdUJBLEtBQ3ZCckMsR0FBb0J0RCxPQUFPbUYsVUFBVTdCLFNBQ3JDRSxHQUFvQnhELE9BQU93RCxlQUMzQnVDLEdBQW9CMUgsRUFBTyxNQUczQjZPLEdBQW9CeFAsRUFBT3dQLFVBQVl4UCxFQUFPd1AsWUFFOUMvTCxHQUFvQixDQU94QndjLElBQU9qZ0IsRUFBTzRLLFNBQVNxMUQsWUE4UHZCLElBQUl4MEQsSUFBY3FiLE9BQU9pbEMsT0FBUyxTQUFxQmlCLEdBRXJELE1BQU9BLEtBQVFBLEVBeUJqQnpuRCxHQUFLNFgsV0FnQ0wzWCxFQUFTMlgsVUFzSVQsSUFBSWhiLElBQVVJLE1BQU1KLFFBeUZoQnVFLEdBQXFCLHlGQVVyQitQLEdBQU8sU0FBU2xULEdBQ2xCLE1BQU9uQixHQUFTbUIsR0FBU0EsRUFBTWtULE9BQVNsVCxHQU10Q2svQyxHQUFrQixTQUFTM0osR0FDN0IsTUFBT0EsR0FDSnAzQyxRQUFRLDhCQUErQixRQUV2Q0EsUUFBUSxRQUFTLFVBbVhsQnMwQyxHQUFNLFdBQ1IsSUFBSzMxQyxFQUFVMjFDLEdBQUlrcUIsT0FBUSxDQUd6QixHQUFJQyxHQUFnQm5nRSxFQUFPNEssU0FBU3VELGNBQWMsYUFDbENuTyxFQUFPNEssU0FBU3VELGNBQWMsZ0JBRTlDLElBQUlneUQsRUFBYyxDQUNoQixHQUFJQyxHQUFpQkQsRUFBYXh5RCxhQUFhLFdBQ2pDd3lELEVBQWF4eUQsYUFBYSxjQUN4Q3FvQyxJQUFJa3FCLE9BQ0ZubkIsY0FBZXFuQixJQUFpRSxJQUE5Q0EsRUFBZTE0RCxRQUFRLGtCQUN6RDI0RCxlQUFnQkQsSUFBa0UsSUFBL0NBLEVBQWUxNEQsUUFBUSx3QkFHNURzdUMsSUFBSWtxQixPQUNGbm5CLGFBUU4sV0FDRSxJQUdFLE1BREEsSUFBSXA4QixVQUFTLEtBQ04sRUFDUCxNQUFPalEsR0FDUCxPQUFPLE1BYkwyekQsZUFBZSxHQUtyQixNQUFPcnFCLElBQUlrcUIsT0FtRFRJLEdBQUssV0FDUCxHQUFJamdFLEVBQVVpZ0UsR0FBR0MsT0FBUSxNQUFPRCxJQUFHQyxLQUNuQyxJQUFJQyxHQUNBeC9ELEVBQStCK00sRUFBUUMsRUFBcEMvSixFQUFLeUosR0FBZTVMLE1BQzNCLEtBQUtkLEVBQUksRUFBR0EsRUFBSWlELElBQU1qRCxFQUdwQixHQUZBK00sRUFBU0wsR0FBZTFNLEdBQ3hCdy9ELEVBQUt4Z0UsRUFBTzRLLFNBQVN1RCxjQUFjLElBQU1KLEVBQU9yTSxRQUFRLElBQUssT0FBUyxPQUM5RCxDQUNOc00sRUFBT3d5RCxFQUFHN3lELGFBQWFJLEVBQVMsS0FDaEMsT0FJSixNQUFRdXlELElBQUdDLE1BQVF2eUQsR0FtSWpCekMsR0FBYSxLQXNKYm1DLElBQWtCLE1BQU8sV0FBWSxNQUFPLFNBK0Q1Q1UsR0FsREosU0FBNEJ4RCxHQUMxQixHQUFJeTlCLEdBQVN6OUIsRUFBUzYxRCxhQUV0QixLQUFLcDRCLEVBR0gsT0FBTyxDQUlULE1BQU1BLFlBQWtCcm9DLEdBQU8wZ0UsbUJBQXFCcjRCLFlBQWtCcm9DLEdBQU8yZ0Usa0JBQzNFLE9BQU8sQ0FHVCxJQUFJdjBDLEdBQWFpYyxFQUFPamMsVUFHeEIsUUFGWUEsRUFBV3cwQyxhQUFhLE9BQVF4MEMsRUFBV3cwQyxhQUFhLFFBQVN4MEMsRUFBV3cwQyxhQUFhLGVBRXpGQyxNQUFNLFNBQVN6OEQsR0FDekIsSUFBS0EsRUFDSCxPQUFPLENBRVQsS0FBS0EsRUFBSWIsTUFDUCxPQUFPLENBR1QsSUFBSThpQixHQUFPemIsRUFBU3lLLGNBQWMsSUFHbEMsSUFGQWdSLEVBQUszQixLQUFPdGdCLEVBQUliLE1BRVpxSCxFQUFTaUYsU0FBU2l4RCxTQUFXejZDLEVBQUt5NkMsT0FFcEMsT0FBTyxDQUtULFFBQVF6NkMsRUFBS2lqQixVQUNYLElBQUssUUFDTCxJQUFLLFNBQ0wsSUFBSyxPQUNMLElBQUssUUFDTCxJQUFLLFFBQ0wsSUFBSyxRQUNILE9BQU8sQ0FDVCxTQUNFLE9BQU8sTUFNaUN0cEMsRUFBTzRLLFVBeVVuRHdGLEdBQW9CLFNBUXBCMndELElBQWtCLEVBMEtsQnRzRCxHQUFvQixFQUVwQmhJLEdBQWlCLEVBQ2pCNGtCLEdBQW9CLEVBQ3BCM2MsR0FBcUIsRUFDckJ3RSxHQUE4QixHQXVrQjlCOG5ELElBR0ZDLEtBQU0sUUFDTkMsTUFBTyxFQUNQQyxNQUFPLEVBQ1BDLElBQUssRUFDTEMsU0FBVSx5QkE2UVo5cUQsSUFBTytxRCxRQUFVLE9BRWpCLElBQUkxc0QsSUFBVTJCLEdBQU8rSSxTQUNqQnhMLEdBQU8sQ0FLWHlDLElBQU9nckQsTUFBUSxTQUFTMTZELEdBRXRCLE1BQU9rTSxNQUFLdU0sTUFBTXpZLEVBQUtrTSxLQUFLdXVELGNBTTlCLElBQUlqdEQsSUFBd0IsWUFDeEJKLEdBQWlCLFFBQ2pCMEQsSUFBb0I2cEQsV0FBWSxXQUFZQyxXQUFZLGFBQ3hEL3FELEdBQWUvVixFQUFPLFVBd0J0QnVWLEdBQW9CLGdDQUNwQjNCLEdBQWMsWUFDZGUsR0FBa0IsYUFDbEJLLEdBQW1CLDJFQUVuQkgsSUFDRmtzRCxRQUFXLEVBQUcsK0JBQWdDLGFBRTlDQyxPQUFVLEVBQUcsVUFBVyxZQUN4QkMsS0FBUSxFQUFHLG9CQUFxQix1QkFDaENDLElBQU8sRUFBRyxpQkFBa0Isb0JBQzVCQyxJQUFPLEVBQUcscUJBQXNCLHlCQUNoQ3JzRCxVQUFhLEVBQUcsR0FBSSxJQUd0QkQsSUFBUXVzRCxTQUFXdnNELEdBQVFrc0QsT0FDM0Jsc0QsR0FBUXdzRCxNQUFReHNELEdBQVF5c0QsTUFBUXpzRCxHQUFRMHNELFNBQVcxc0QsR0FBUTJzRCxRQUFVM3NELEdBQVFtc0QsTUFDN0Vuc0QsR0FBUTRzRCxHQUFLNXNELEdBQVFzc0QsRUFxRnJCLElBQUlubUQsSUFBaUIzYixFQUFPcWlFLEtBQUs1NkQsVUFBVTY2RCxVQUF5QixTQUFTOWdFLEdBRTNFLFNBQThDLEdBQXBDdVIsS0FBS3d2RCx3QkFBd0IvZ0UsS0F5UnJDc3NCLEdBQWtCdlgsR0FBTzlPLFdBQzNCKzZELE1BQU81ckQsR0FDUGhSLFNBQVUsV0FDUixHQUFJckMsS0FFSixPQURBZCxHQUFRc1EsS0FBTSxTQUFTckcsR0FBS25KLEVBQU0wRSxLQUFLLEdBQUt5RSxLQUNyQyxJQUFNbkosRUFBTThKLEtBQUssTUFBUSxLQUdsQ3l4QyxHQUFJLFNBQVNsOUMsR0FDVCxNQUFzQlMsSUFBZFQsR0FBUyxFQUFZbVIsS0FBS25SLEdBQWlCbVIsS0FBS0EsS0FBS2pSLE9BQVNGLEtBRzFFRSxPQUFRLEVBQ1JtRyxLQUFNQSxHQUNON0UsUUFBU0EsS0FDVHdFLFVBQVdBLFFBUVRzUyxLQUNKelgsR0FBUSw0REFBNEQwRSxNQUFNLEtBQU0sU0FBUzVELEdBQ3ZGMlcsR0FBYTVTLEdBQVUvRCxJQUFVQSxHQUVuQyxJQUFJNFcsTUFDSjFYLEdBQVEsbURBQW1EMEUsTUFBTSxLQUFNLFNBQVM1RCxHQUM5RTRXLEdBQWlCNVcsSUFBUyxHQUU1QixJQUFJOFcsS0FDRm9vRCxZQUFlLFlBQ2ZDLFlBQWUsWUFDZjdLLE1BQVMsTUFDVEksTUFBUyxNQUNUMEssVUFBYSxVQUNibkosT0FBVSxPQWVaLzJELElBQ0U0TSxLQUFNMkksR0FDTjRxRCxXQUFZaHJELEdBQ1ptakIsUUFBU3BtQixHQUNUcUMsVUFBVyxTQUF5QjdGLEdBQ2xDLElBQUssR0FBSW5RLEdBQUksRUFBR2lELEVBQUtrTixFQUFNclAsT0FBUWQsRUFBSWlELEVBQUlqRCxJQUN6QzRXLEdBQWlCekcsRUFBTW5RLE1BRzFCLFNBQVN1SixFQUFJeUQsR0FDZHVJLEdBQU92SSxHQUFRekQsSUFHakI5SCxHQUNFNE0sS0FBTTJJLEdBQ05xZixjQUFldGUsR0FFZjdKLE1BQU8sU0FBUzdILEdBRWQsTUFBT2hGLElBQU9nTixLQUFLaEksRUFBUyxXQUFhMFIsR0FBb0IxUixFQUFRZ1AsWUFBY2hQLEdBQVUsZ0JBQWlCLFlBR2hIb2hCLGFBQWMsU0FBU3BoQixHQUVyQixNQUFPaEYsSUFBT2dOLEtBQUtoSSxFQUFTLGtCQUFvQmhGLEdBQU9nTixLQUFLaEksRUFBUyw0QkFHdkVnTSxXQUFZeUYsR0FFWnBLLFNBQVUsU0FBU3JILEdBQ2pCLE1BQU8wUixJQUFvQjFSLEVBQVMsY0FHdEN5MkIsV0FBWSxTQUFTejJCLEVBQVMyRyxHQUM1QjNHLEVBQVF3N0QsZ0JBQWdCNzBELElBRzFCOE4sU0FBVTFELEdBRVYwcUQsSUFBSyxTQUFTejdELEVBQVMyRyxFQUFNekssR0FHM0IsR0FGQXlLLEVBQU8rRixHQUFnQi9GLElBRW5CM04sRUFBVWtELEdBR1osTUFBTzhELEdBQVFnYSxNQUFNclQsRUFGckIzRyxHQUFRZ2EsTUFBTXJULEdBQVF6SyxHQU0xQndELEtBQU0sU0FBU00sRUFBUzJHLEVBQU16SyxHQUM1QixHQUFJdy9ELEdBQ0F2MkQsRUFBV25GLEVBQVFtRixRQUN2QixJQUFJQSxJQUFhQyxJQW4zQ0ssSUFtM0NhRCxHQUFvQ0EsSUFBYTZrQixJQUNqRmhxQixFQUFRc0csYUFEWCxDQUtBLEdBQUlxMUQsR0FBaUIxN0QsR0FBVTBHLEdBQzNCaTFELEVBQWdCL29ELEdBQWE4b0QsRUFFakMsS0FBSTNpRSxFQUFVa0QsR0FpQlosTUFOQXcvRCxHQUFNMTdELEVBQVFzRyxhQUFhSyxHQUV2QmkxRCxHQUF5QixPQUFSRixJQUNuQkEsRUFBTUMsR0FHTyxPQUFSRCxNQUFldjZELEdBQVl1NkQsQ0FkcEIsUUFBVngvRCxJQUE2QixJQUFWQSxHQUFtQjAvRCxFQUN4QzU3RCxFQUFRdzdELGdCQUFnQjcwRCxHQUV4QjNHLEVBQVFtUixhQUFheEssRUFBTWkxRCxFQUFnQkQsRUFBaUJ6L0QsS0FlbEV1RCxLQUFNLFNBQVNPLEVBQVMyRyxFQUFNekssR0FDNUIsSUFBSWxELEVBQVVrRCxHQUdaLE1BQU84RCxHQUFRMkcsRUFGZjNHLEdBQVEyRyxHQUFRekssR0FNcEI4MUIsS0FBTSxXQUlKLFFBQVM2cEMsR0FBUTc3RCxFQUFTOUQsR0FDeEIsR0FBSXNDLEVBQVl0QyxHQUFRLENBQ3RCLEdBQUlpSixHQUFXbkYsRUFBUW1GLFFBQ3ZCLE9BQVFBLEtBQWFpSSxJQUFxQmpJLElBQWFDLEdBQWtCcEYsRUFBUTBPLFlBQWMsR0FFakcxTyxFQUFRME8sWUFBY3hTLEVBUHhCLE1BREEyL0QsR0FBUUMsSUFBTSxHQUNQRCxLQVdUdjRELElBQUssU0FBU3RELEVBQVM5RCxHQUNyQixHQUFJc0MsRUFBWXRDLEdBQVEsQ0FDdEIsR0FBSThELEVBQVErN0QsVUFBbUMsV0FBdkJoOEQsRUFBVUMsR0FBdUIsQ0FDdkQsR0FBSTZXLEtBTUosT0FMQXpiLEdBQVE0RSxFQUFRc2IsUUFBUyxTQUFTKytDLEdBQzVCQSxFQUFPMkIsVUFDVG5sRCxFQUFPalcsS0FBS3k1RCxFQUFPbitELE9BQVNtK0QsRUFBT3JvQyxRQUdoQ25iLEVBRVQsTUFBTzdXLEdBQVE5RCxNQUVqQjhELEVBQVE5RCxNQUFRQSxHQUdsQmdKLEtBQU0sU0FBU2xGLEVBQVM5RCxHQUN0QixHQUFJc0MsRUFBWXRDLEdBQ2QsTUFBTzhELEdBQVFxTyxTQUVqQm9CLElBQWF6UCxHQUFTLEdBQ3RCQSxFQUFRcU8sVUFBWW5TLEdBR3RCNkksTUFBT2dOLElBQ04sU0FBUzdPLEVBQUl5RCxHQUlkdUksR0FBTzlPLFVBQVV1RyxHQUFRLFNBQVNzMUQsRUFBTUMsR0FDdEMsR0FBSXZpRSxHQUFHNEIsRUFDSDRnRSxFQUFZendELEtBQUtqUixNQUtyQixJQUFJeUksSUFBTzZPLElBQ052VCxFQUEyQixJQUFkMEUsRUFBR3pJLFFBQWlCeUksSUFBTzZOLElBQWtCN04sSUFBT3VPLEdBQXFCd3FELEVBQU9DLEdBQVEsQ0FDeEcsR0FBSXBqRSxFQUFTbWpFLEdBQU8sQ0FHbEIsSUFBS3RpRSxFQUFJLEVBQUdBLEVBQUl3aUUsRUFBV3hpRSxJQUN6QixHQUFJdUosSUFBT3lOLEdBRVR6TixFQUFHd0ksS0FBSy9SLEdBQUlzaUUsT0FFWixLQUFLMWdFLElBQU8wZ0UsR0FDVi80RCxFQUFHd0ksS0FBSy9SLEdBQUk0QixFQUFLMGdFLEVBQUsxZ0UsR0FLNUIsT0FBT21RLE1BT1AsSUFBSyxHQUhEeFAsR0FBUWdILEVBQUc0NEQsSUFFWGgvRCxFQUFNMEIsRUFBWXRDLEdBQVUwekIsS0FBS3MwQixJQUFJaVksRUFBVyxHQUFLQSxFQUNoRHQvRCxFQUFJLEVBQUdBLEVBQUlDLEVBQUlELElBQUssQ0FDM0IsR0FBSXVyQixHQUFZbGxCLEVBQUd3SSxLQUFLN08sR0FBSW8vRCxFQUFNQyxFQUNsQ2hnRSxHQUFRQSxFQUFRQSxFQUFRa3NCLEVBQVlBLEVBRXRDLE1BQU9sc0IsR0FJVCxJQUFLdkMsRUFBSSxFQUFHQSxFQUFJd2lFLEVBQVd4aUUsSUFDekJ1SixFQUFHd0ksS0FBSy9SLEdBQUlzaUUsRUFBTUMsRUFHcEIsT0FBT3h3RCxTQThFYnRRLEdBQ0VtZ0UsV0FBWWhyRCxHQUVaaUMsR0FBSSxTQUFrQnhTLEVBQVM4QixFQUFNb0IsRUFBSTRNLEdBQ3ZDLEdBQUk5VyxFQUFVOFcsR0FBYyxLQUFNVCxJQUFhLFNBQVUsd0VBR3pELElBQUtsQyxHQUFrQm5OLEdBQXZCLENBSUEsR0FBSStQLEdBQWVDLEdBQW1CaFEsR0FBUyxHQUMzQ2lRLEVBQVNGLEVBQWFFLE9BQ3RCQyxFQUFTSCxFQUFhRyxNQUVyQkEsS0FDSEEsRUFBU0gsRUFBYUcsT0FBUytDLEdBQW1CalQsRUFBU2lRLEdBcUI3RCxLQWpCQSxHQUFJbXNELEdBQVF0NkQsRUFBS3pCLFFBQVEsTUFBUSxFQUFJeUIsRUFBS2hDLE1BQU0sTUFBUWdDLEdBQ3BEbkksRUFBSXlpRSxFQUFNM2hFLE9BRVY0aEUsRUFBYSxTQUFTdjZELEVBQU1nUyxFQUF1QndvRCxHQUNyRCxHQUFJaHBELEdBQVdyRCxFQUFPbk8sRUFFakJ3UixLQUNIQSxFQUFXckQsRUFBT25PLE1BQ2xCd1IsRUFBU1Esc0JBQXdCQSxFQUNwQixhQUFUaFMsR0FBd0J3NkQsR0FDMUJ0OEQsRUFBUTBTLGlCQUFpQjVRLEVBQU1vTyxJQUluQ29ELEVBQVMxUyxLQUFLc0MsSUFHVHZKLEtBQ0xtSSxFQUFPczZELEVBQU16aUUsR0FDVDJXLEdBQWdCeE8sSUFDbEJ1NkQsRUFBVy9yRCxHQUFnQnhPLEdBQU9vUyxJQUNsQ21vRCxFQUFXdjZELE1BQU1YLElBQVcsSUFFNUJrN0QsRUFBV3Y2RCxLQUtqQmdjLElBQUtqTyxHQUVMMHNELElBQUssU0FBU3Y4RCxFQUFTOEIsRUFBTW9CLEdBQzNCbEQsRUFBVWhGLEdBQU9nRixHQUtqQkEsRUFBUXdTLEdBQUcxUSxFQUFNLFFBQVMwNkQsS0FDeEJ4OEQsRUFBUThkLElBQUloYyxFQUFNb0IsR0FDbEJsRCxFQUFROGQsSUFBSWhjLEVBQU0wNkQsS0FFcEJ4OEQsRUFBUXdTLEdBQUcxUSxFQUFNb0IsSUFHbkJ3ckIsWUFBYSxTQUFTMXVCLEVBQVN5OEQsR0FDN0IsR0FBSWxpRSxHQUFPd0QsRUFBU2lDLEVBQVFnUCxVQUM1QlMsSUFBYXpQLEdBQ2I1RSxFQUFRLEdBQUk4VCxJQUFPdXRELEdBQWMsU0FBU2o5RCxHQUNwQ2pGLEVBQ0Z3RCxFQUFPMitELGFBQWFsOUQsRUFBTWpGLEVBQU0wUCxhQUVoQ2xNLEVBQU9rUixhQUFhelAsRUFBTVEsR0FFNUJ6RixFQUFRaUYsS0FJWm05RCxTQUFVLFNBQVMzOEQsR0FDakIsR0FBSTI4RCxLQU1KLE9BTEF2aEUsR0FBUTRFLEVBQVF3TyxXQUFZLFNBQVN4TyxHQUMvQkEsRUFBUW1GLFdBQWFpSSxJQUN2QnV2RCxFQUFTLzdELEtBQUtaLEtBR1gyOEQsR0FHVDN0QyxTQUFVLFNBQVNodkIsR0FDakIsTUFBT0EsR0FBUTQ4RCxpQkFBbUI1OEQsRUFBUXdPLGdCQUc1Q3ZKLE9BQVEsU0FBU2pGLEVBQVNSLEdBQ3hCLEdBQUkyRixHQUFXbkYsRUFBUW1GLFFBQ3ZCLElBQUlBLElBQWFpSSxJQUFxQmpJLElBQWEwTSxHQUFuRCxDQUVBclMsRUFBTyxHQUFJMFAsSUFBTzFQLEVBRWxCLEtBQUssR0FBSTdGLEdBQUksRUFBR2lELEVBQUs0QyxFQUFLL0UsT0FBUWQsRUFBSWlELEVBQUlqRCxJQUFLLENBQzdDLEdBQUkyOUMsR0FBUTkzQyxFQUFLN0YsRUFDakJxRyxHQUFRK04sWUFBWXVwQyxNQUl4QnVsQixRQUFTLFNBQVM3OEQsRUFBU1IsR0FDekIsR0FBSVEsRUFBUW1GLFdBQWFpSSxHQUFtQixDQUMxQyxHQUFJN1MsR0FBUXlGLEVBQVF5TyxVQUNwQnJULEdBQVEsR0FBSThULElBQU8xUCxHQUFPLFNBQVM4M0MsR0FDakN0M0MsRUFBUTA4RCxhQUFhcGxCLEVBQU8vOEMsT0FLbENvVCxLQUFNLFNBQVMzTixFQUFTODhELEdBQ3RCaHVELEdBQWU5TyxFQUFTaEYsR0FBTzhoRSxHQUFVcmxCLEdBQUcsR0FBR2o2QyxRQUFRLEtBR3pEcWlCLE9BQVE1TixHQUVSOHFELE9BQVEsU0FBUy84RCxHQUNmaVMsR0FBYWpTLEdBQVMsSUFHeEJnOUQsTUFBTyxTQUFTaDlELEVBQVNpOUQsR0FDdkIsR0FBSTFpRSxHQUFReUYsRUFBU2pDLEVBQVNpQyxFQUFRZ1AsVUFFdEMsSUFBSWpSLEVBQVEsQ0FDVmsvRCxFQUFhLEdBQUkvdEQsSUFBTyt0RCxFQUV4QixLQUFLLEdBQUl0akUsR0FBSSxFQUFHaUQsRUFBS3FnRSxFQUFXeGlFLE9BQVFkLEVBQUlpRCxFQUFJakQsSUFBSyxDQUNuRCxHQUFJNkYsR0FBT3k5RCxFQUFXdGpFLEVBQ3RCb0UsR0FBTzIrRCxhQUFhbDlELEVBQU1qRixFQUFNMFAsYUFDaEMxUCxFQUFRaUYsS0FLZG1WLFNBQVV0RCxHQUNWdUQsWUFBYTNELEdBRWJpc0QsWUFBYSxTQUFTbDlELEVBQVNnUixFQUFVbXNELEdBQ25DbnNELEdBQ0Y1VixFQUFRNFYsRUFBU2xSLE1BQU0sS0FBTSxTQUFTc2xCLEdBQ3BDLEdBQUlnNEMsR0FBaUJELENBQ2pCMytELEdBQVk0K0QsS0FDZEEsR0FBa0Jyc0QsR0FBZS9RLEVBQVNvbEIsS0FFM0NnNEMsRUFBaUIvckQsR0FBaUJKLElBQW1CalIsRUFBU29sQixNQUtyRXJuQixPQUFRLFNBQVNpQyxHQUNmLEdBQUlqQyxHQUFTaUMsRUFBUWdQLFVBQ3JCLE9BQU9qUixJQUFVQSxFQUFPb0gsV0FBYTBNLEdBQThCOVQsRUFBUyxNQUc5RXE3QyxLQUFNLFNBQVNwNUMsR0FDYixNQUFPQSxHQUFRcTlELG9CQUdqQjE5RCxLQUFNLFNBQVNLLEVBQVNnUixHQUN0QixNQUFJaFIsR0FBUXM5RCxxQkFDSHQ5RCxFQUFRczlELHFCQUFxQnRzRCxPQU14Q3hULE1BQU9nUyxHQUVQK3RELGVBQWdCLFNBQVN2OUQsRUFBU21ULEVBQU9xcUQsR0FFdkMsR0FBSUMsR0FBWUMsRUFBY0MsRUFDMUI1akIsRUFBWTVtQyxFQUFNclIsTUFBUXFSLEVBQzFCcEQsRUFBZUMsR0FBbUJoUSxHQUNsQ2lRLEVBQVNGLEdBQWdCQSxFQUFhRSxPQUN0Q3FELEVBQVdyRCxHQUFVQSxFQUFPOHBDLEVBRTVCem1DLEtBRUZtcUQsR0FDRTN6QixlQUFnQixXQUFhcCtCLEtBQUsySCxrQkFBbUIsR0FDckRELG1CQUFvQixXQUFhLE9BQWlDLElBQTFCMUgsS0FBSzJILGtCQUM3Q0sseUJBQTBCLFdBQWFoSSxLQUFLOEgsNkJBQThCLEdBQzFFSSw4QkFBK0IsV0FBYSxPQUE0QyxJQUFyQ2xJLEtBQUs4SCw2QkFDeERHLGdCQUFpQnpWLEVBQ2pCNEQsS0FBTWk0QyxFQUNONWxDLE9BQVFuVSxHQUlObVQsRUFBTXJSLE9BQ1IyN0QsRUFBYWhnRSxFQUFPZ2dFLEVBQVl0cUQsSUFJbEN1cUQsRUFBZXJ4RCxHQUFZaUgsR0FDM0JxcUQsRUFBY0gsR0FBbUJDLEdBQVk5NkQsT0FBTzY2RCxJQUFvQkMsR0FFeEVyaUUsRUFBUXNpRSxFQUFjLFNBQVN4NkQsR0FDeEJ1NkQsRUFBVzdwRCxpQ0FDZDFRLEVBQUdFLE1BQU1wRCxFQUFTMjlELFFBS3pCLFNBQVN6NkQsRUFBSXlELEdBSWR1SSxHQUFPOU8sVUFBVXVHLEdBQVEsU0FBU3MxRCxFQUFNQyxFQUFNMEIsR0FHNUMsSUFBSyxHQUZEMWhFLEdBRUt2QyxFQUFJLEVBQUdpRCxFQUFLOE8sS0FBS2pSLE9BQVFkLEVBQUlpRCxFQUFJakQsSUFDcEM2RSxFQUFZdEMsSUFDZEEsRUFBUWdILEVBQUd3SSxLQUFLL1IsR0FBSXNpRSxFQUFNQyxFQUFNMEIsR0FDNUI1a0UsRUFBVWtELEtBRVpBLEVBQVFsQixHQUFPa0IsS0FHakJvVCxHQUFlcFQsRUFBT2dILEVBQUd3SSxLQUFLL1IsR0FBSXNpRSxFQUFNQyxFQUFNMEIsR0FHbEQsT0FBTzVrRSxHQUFVa0QsR0FBU0EsRUFBUXdQLFFBS3RDd0QsR0FBTzlPLFVBQVU0QyxLQUFPa00sR0FBTzlPLFVBQVVvUyxHQUN6Q3RELEdBQU85TyxVQUFVeTlELE9BQVMzdUQsR0FBTzlPLFVBQVUwZCxHQTREM0MsSUFBSWdnRCxJQUFTN2lFLE9BQU9nRCxPQUFPLEtBTzNCK1csSUFBVTVVLFdBQ1IyOUQsS0FBTSxTQUFTeGlFLEdBQ2IsTUFBSUEsS0FBUW1RLEtBQUt5SixTQUNSekosS0FBSzBKLFlBRWQxSixLQUFLeUosU0FBVzVaLEVBQ2hCbVEsS0FBSzBKLFdBQWExSixLQUFLdUosTUFBTTVVLFFBQVE5RSxHQUM5Qm1RLEtBQUswSixhQUVkNG9ELGNBQWUsU0FBU3ppRSxHQUN0QixNQUFPNkksSUFBWTdJLEdBQU91aUUsR0FBU3ZpRSxHQUVyQ3FOLElBQUssU0FBU3JOLEdBQ1pBLEVBQU1tUSxLQUFLc3lELGNBQWN6aUUsRUFDekIsSUFBSTRyQixHQUFNemIsS0FBS3F5RCxLQUFLeGlFLEVBQ3BCLEtBQWEsSUFBVDRyQixFQUNGLE1BQU96YixNQUFLd0osUUFBUWlTLElBR3hCeGxCLElBQUssU0FBU3BHLEVBQUtXLEdBQ2pCWCxFQUFNbVEsS0FBS3N5RCxjQUFjemlFLEVBQ3pCLElBQUk0ckIsR0FBTXpiLEtBQUtxeUQsS0FBS3hpRSxJQUNQLElBQVQ0ckIsSUFDRkEsRUFBTXpiLEtBQUswSixXQUFhMUosS0FBS3VKLE1BQU14YSxRQUVyQ2lSLEtBQUt1SixNQUFNa1MsR0FBTzVyQixFQUNsQm1RLEtBQUt3SixRQUFRaVMsR0FBT2pyQixHQUt0QitoRSxPQUFRLFNBQVMxaUUsR0FDZkEsRUFBTW1RLEtBQUtzeUQsY0FBY3ppRSxFQUN6QixJQUFJNHJCLEdBQU16YixLQUFLcXlELEtBQUt4aUUsRUFDcEIsUUFBYSxJQUFUNHJCLElBR0p6YixLQUFLdUosTUFBTTFVLE9BQU80bUIsRUFBSyxHQUN2QnpiLEtBQUt3SixRQUFRM1UsT0FBTzRtQixFQUFLLEdBQ3pCemIsS0FBS3lKLFNBQVdoYyxJQUNoQnVTLEtBQUswSixZQUFjLEdBQ1osSUFPWCxJQUFJNkQsSUFBUWpFLEdBRVJrcEQsSUFBNkIsV0FDL0J4eUQsS0FBSzhJLE1BQVEsV0FDWCxNQUFPeUUsUUFtRVB2RCxHQUFZLGNBQ1pDLEdBQVUsd0JBQ1ZNLEdBQWUsSUFDZkMsR0FBUyx1QkFDVFQsR0FBaUIsbUNBQ2pCcEwsR0FBa0IvUSxFQUFPLFlBNDFCN0JxTyxJQUFlOFEsV0FBYTVDLEVBbVI1QixJQUFJc29ELElBQWlCN2tFLEVBQU8sWUFDeEI0aEIsR0FBZSxFQW9EZmtqRCxHQUF1QyxXQUN6QzF5RCxLQUFLOEksS0FBT3RXLEdBS1ZtZ0UsR0FBMEMsV0FDNUMsR0FBSXZrQixHQUFrQixHQUFJN2dDLElBQ3RCcWxELElBRUo1eUQsTUFBSzhJLE1BQVEsa0JBQW1CLGFBQzNCLFNBQVMrcEQsRUFBbUIva0QsR0FrQy9CLFFBQVNnbEQsR0FBV3gyRCxFQUFNME0sRUFBU3hZLEdBQ2pDLEdBQUk4MEMsSUFBVSxDQVdkLE9BVkl0OEIsS0FDRkEsRUFBVTNaLEVBQVMyWixHQUFXQSxFQUFRNVUsTUFBTSxLQUNsQ2hGLEdBQVE0WixHQUFXQSxLQUM3QnRaLEVBQVFzWixFQUFTLFNBQVMwUSxHQUNwQkEsSUFDRjRyQixHQUFVLEVBQ1ZocEMsRUFBS29kLEdBQWFscEIsTUFJakI4MEMsRUFHVCxRQUFTeXRCLEtBQ1ByakUsRUFBUWtqRSxFQUFvQixTQUFTdCtELEdBQ25DLEdBQUlnSSxHQUFPOHhDLEVBQWdCbHhDLElBQUk1SSxFQUMvQixJQUFJZ0ksRUFBTSxDQUNSLEdBQUkwMkQsR0FBV3ZqRCxHQUFhbmIsRUFBUU4sS0FBSyxVQUNyQ2cyQixFQUFRLEdBQ1JFLEVBQVcsRUFDZng2QixHQUFRNE0sRUFBTSxTQUFTOHlCLEVBQVExVixHQUV6QjBWLE1BRGE0akMsRUFBU3Q1QyxLQUVwQjBWLEVBQ0ZwRixJQUFVQSxFQUFNajdCLE9BQVMsSUFBTSxJQUFNMnFCLEVBRXJDd1EsSUFBYUEsRUFBU243QixPQUFTLElBQU0sSUFBTTJxQixLQUtqRGhxQixFQUFRNEUsRUFBUyxTQUFTMmEsR0FDcEIrYSxHQUNGcmtCLEdBQWVzSixFQUFLK2EsR0FFbEJFLEdBQ0Yza0IsR0FBa0IwSixFQUFLaWIsS0FHM0Jra0IsRUFBZ0Jta0IsT0FBT2orRCxNQUczQnMrRCxFQUFtQjdqRSxPQUFTLEVBSTlCLFFBQVNra0UsR0FBMkIzK0QsRUFBUzQrRCxFQUFLLytDLEdBQ2hELEdBQUk3WCxHQUFPOHhDLEVBQWdCbHhDLElBQUk1SSxPQUUzQjYrRCxFQUFlTCxFQUFXeDJELEVBQU00MkQsR0FBSyxHQUNyQ0UsRUFBaUJOLEVBQVd4MkQsRUFBTTZYLEdBQVEsSUFFMUNnL0MsR0FBZ0JDLEtBRWxCaGxCLEVBQWdCbjRDLElBQUkzQixFQUFTZ0ksR0FDN0JzMkQsRUFBbUIxOUQsS0FBS1osR0FFVSxJQUE5QnMrRCxFQUFtQjdqRSxRQUNyQitlLEVBQVd3YSxhQUFheXFDLElBN0Y5QixPQUNFcDdDLFFBQVNubEIsRUFDVHNVLEdBQUl0VSxFQUNKNGYsSUFBSzVmLEVBQ0w2Z0UsSUFBSzdnRSxFQUVMMEMsS0FBTSxTQUFTWixFQUFTbVQsRUFBT21JLEVBQVMwakQsR0FDbENBLEdBQ0ZBLElBR0YxakQsRUFBVUEsTUFDTkEsRUFBUTJqRCxNQUNWai9ELEVBQVF5N0QsSUFBSW5nRCxFQUFRMmpELE1BRWxCM2pELEVBQVE0akQsSUFDVmwvRCxFQUFReTdELElBQUluZ0QsRUFBUTRqRCxLQUdsQjVqRCxFQUFRM0csVUFBWTJHLEVBQVExRyxjQUM5QitwRCxFQUEyQjMrRCxFQUFTc2IsRUFBUTNHLFNBQVUyRyxFQUFRMUcsWUFHaEUsSUFBSXVxRCxHQUFTLEdBQUlaLEVBS2pCLE9BREFZLEdBQU9DLFdBQ0FELE9Bb0ZYRSxJQUFvQixXQUF5QixTQUFTNzNELEdBQ3hELEdBQUltRCxHQUFXZSxLQUNYNHpELEVBQWtCLEtBQ2xCQyxFQUFlLElBRW5CN3pELE1BQUs4ekQsdUJBQXlCdmtFLE9BQU9nRCxPQUFPLE1BeUM1Q3lOLEtBQUt1c0IsU0FBVyxTQUFTdHhCLEVBQU15RCxHQUM3QixHQUFJekQsR0FBMkIsTUFBbkJBLEVBQUtqRSxPQUFPLEdBQ3RCLEtBQU15N0QsSUFBZSxVQUFXLHdEQUE2RHgzRCxFQUcvRixJQUFJcEwsR0FBTW9MLEVBQU8sWUFDakJnRSxHQUFTNjBELHVCQUF1Qjc0RCxFQUFLcVYsT0FBTyxJQUFNemdCLEVBQ2xEaU0sRUFBUzRDLFFBQVE3TyxFQUFLNk8sSUF3Q3hCc0IsS0FBSzZ6RCxhQUFlLFNBQVNFLEdBSzNCLE1BSnlCLEtBQXJCNWxFLFVBQVVZLFNBQ1o4a0UsRUFBZS9qRSxFQUFXaWtFLEdBQVlBLEVBQVcsTUFHNUNGLEdBc0JUN3pELEtBQUs0ekQsZ0JBQWtCLFNBQVNqbkMsR0FDOUIsR0FBeUIsSUFBckJ4K0IsVUFBVVksU0FDWjZrRSxFQUFtQmpuQyxZQUFzQmo3QixRQUFVaTdCLEVBQWEsTUFDM0MsQ0FFbkIsR0FEb0IsR0FBSWo3QixRQUFPLG9DQUNia0MsS0FBS2dnRSxFQUFnQi9nRSxZQUVyQyxLQURBK2dFLEdBQWtCLEtBQ1puQixHQUFlLFVBQVcsd0hBOVNmLGNBa1R2QixNQUFPbUIsSUFHVDV6RCxLQUFLOEksTUFBUSxpQkFBa0IsU0FBU2tyRCxHQUN0QyxRQUFTQyxHQUFVMy9ELEVBQVM2bUIsRUFBZSs0QyxHQUl6QyxHQUFJQSxFQUFjLENBQ2hCLEdBQUlDLEdBQVk1a0QsR0FBbUIya0QsSUFDL0JDLEdBQWNBLEVBQVU3d0QsWUFBZTZ3RCxFQUFVQyx5QkFDbkRGLEVBQWUsTUFHZkEsRUFDRkEsRUFBYTVDLE1BQU1oOUQsR0FFbkI2bUIsRUFBY2cyQyxRQUFRNzhELEdBdUIxQixPQThCRXdTLEdBQUlrdEQsRUFBZWx0RCxHQStCbkJzTCxJQUFLNGhELEVBQWU1aEQsSUFrQnBCaWhELElBQUtXLEVBQWVYLElBK0JwQjE3QyxRQUFTcThDLEVBQWVyOEMsUUFVeEJqRixPQUFRLFNBQVMrZ0QsR0FDWEEsRUFBT2pXLEtBQ1RpVyxFQUFPalcsT0E0Qlg2VyxNQUFPLFNBQVMvL0QsRUFBU2pDLEVBQVFpL0QsRUFBTzFoRCxHQUt0QyxNQUpBdmQsR0FBU0EsR0FBVS9DLEdBQU8rQyxHQUMxQmkvRCxFQUFRQSxHQUFTaGlFLEdBQU9naUUsR0FDeEJqL0QsRUFBU0EsR0FBVWkvRCxFQUFNai9ELFNBQ3pCNGhFLEVBQVUzL0QsRUFBU2pDLEVBQVFpL0QsR0FDcEIwQyxFQUFlOStELEtBQUtaLEVBQVMsUUFBU3FiLEdBQXNCQyxLQTJCckUwa0QsS0FBTSxTQUFTaGdFLEVBQVNqQyxFQUFRaS9ELEVBQU8xaEQsR0FLckMsTUFKQXZkLEdBQVNBLEdBQVUvQyxHQUFPK0MsR0FDMUJpL0QsRUFBUUEsR0FBU2hpRSxHQUFPZ2lFLEdBQ3hCai9ELEVBQVNBLEdBQVVpL0QsRUFBTWovRCxTQUN6QjRoRSxFQUFVMy9ELEVBQVNqQyxFQUFRaS9ELEdBQ3BCMEMsRUFBZTkrRCxLQUFLWixFQUFTLE9BQVFxYixHQUFzQkMsS0FzQnBFMmtELE1BQU8sU0FBU2pnRSxFQUFTc2IsR0FDdkIsTUFBT29rRCxHQUFlOStELEtBQUtaLEVBQVMsUUFBU3FiLEdBQXNCQyxHQUFVLFdBQzNFdGIsRUFBUTZmLFlBNEJabEwsU0FBVSxTQUFTM1UsRUFBU29sQixFQUFXOUosR0FHckMsTUFGQUEsR0FBVUQsR0FBc0JDLEdBQ2hDQSxFQUFRM0csU0FBV3FHLEdBQWFNLEVBQVE0a0QsU0FBVTk2QyxHQUMzQ3M2QyxFQUFlOStELEtBQUtaLEVBQVMsV0FBWXNiLElBMkJsRDFHLFlBQWEsU0FBUzVVLEVBQVNvbEIsRUFBVzlKLEdBR3hDLE1BRkFBLEdBQVVELEdBQXNCQyxHQUNoQ0EsRUFBUTFHLFlBQWNvRyxHQUFhTSxFQUFRMUcsWUFBYXdRLEdBQ2pEczZDLEVBQWU5K0QsS0FBS1osRUFBUyxjQUFlc2IsSUE0QnJENmtELFNBQVUsU0FBU25nRSxFQUFTNCtELEVBQUsvK0MsRUFBUXZFLEdBSXZDLE1BSEFBLEdBQVVELEdBQXNCQyxHQUNoQ0EsRUFBUTNHLFNBQVdxRyxHQUFhTSxFQUFRM0csU0FBVWlxRCxHQUNsRHRqRCxFQUFRMUcsWUFBY29HLEdBQWFNLEVBQVExRyxZQUFhaUwsR0FDakQ2L0MsRUFBZTkrRCxLQUFLWixFQUFTLFdBQVlzYixJQTJDbEQ4a0QsUUFBUyxTQUFTcGdFLEVBQVNpL0QsRUFBTUMsRUFBSTk1QyxFQUFXOUosR0FPOUMsTUFOQUEsR0FBVUQsR0FBc0JDLEdBQ2hDQSxFQUFRMmpELEtBQU8zakQsRUFBUTJqRCxLQUFPeGhFLEVBQU82ZCxFQUFRMmpELEtBQU1BLEdBQVFBLEVBQzNEM2pELEVBQVE0akQsR0FBTzVqRCxFQUFRNGpELEdBQU96aEUsRUFBTzZkLEVBQVE0akQsR0FBSUEsR0FBVUEsRUFFM0Q5NUMsRUFBWUEsR0FBYSxvQkFDekI5SixFQUFRK2tELFlBQWNybEQsR0FBYU0sRUFBUStrRCxZQUFhajdDLEdBQ2pEczZDLEVBQWU5K0QsS0FBS1osRUFBUyxVQUFXc2IsU0FNbkRnbEQsR0FBZ0QsV0FDbEQ1MEQsS0FBSzhJLE1BQVEsUUFBUyxTQUFTK3JELEdBRzdCLFFBQVNDLEdBQVl0OUQsR0FDbkJ1OUQsRUFBVTcvRCxLQUFLc0MsR0FDWHU5RCxFQUFVaG1FLE9BQVMsR0FDdkI4bEUsRUFBTSxXQUNKLElBQUssR0FBSTVtRSxHQUFJLEVBQUdBLEVBQUk4bUUsRUFBVWhtRSxPQUFRZCxJQUNwQzhtRSxFQUFVOW1FLElBRVo4bUUsUUFUSixHQUFJQSxLQWFKLE9BQU8sWUFDTCxHQUFJQyxJQUFTLENBSWIsT0FIQUYsR0FBWSxXQUNWRSxHQUFTLElBRUosU0FBU3RqRCxHQUNWc2pELEVBQ0Z0akQsSUFFQW9qRCxFQUFZcGpELFFBT2xCdWpELEdBQThDLFdBQ2hEajFELEtBQUs4SSxNQUFRLEtBQU0sV0FBWSxvQkFBcUIscUJBQXNCLFdBQ3JFLFNBQVM0bkIsRUFBTTNnQixFQUFZbWxELEVBQXFCQyxFQUFzQmxzQixHQTBDekUsUUFBU21zQixHQUFjaHZELEdBQ3JCcEcsS0FBS3ExRCxRQUFRanZELEVBRWIsSUFBSWt2RCxHQUFVSixJQUNWSyxFQUFjLFNBQVMvOUQsR0FDekJ5eEMsRUFBU3p4QyxFQUFJLEdBQUcsR0FHbEJ3SSxNQUFLdzFELGtCQUNMeDFELEtBQUt5MUQsTUFBUSxTQUFTaitELEdBQ2hCMjlELElBQ0ZJLEVBQVkvOUQsR0FFWjg5RCxFQUFROTlELElBR1p3SSxLQUFLMDFELE9BQVMsRUE2RmhCLE1BakpBTixHQUFjTyxNQUFRLFNBQVNBLEVBQU9qa0QsR0FJcEMsUUFBU2c4QixLQUNQLEdBQUk3K0MsSUFBVThtRSxFQUFNNW1FLE9BRWxCLFdBREEyaUIsSUFBUyxFQUlYaWtELEdBQU05bUUsR0FBTyxTQUFTNmlDLEdBQ3BCLElBQWlCLElBQWJBLEVBRUYsV0FEQWhnQixJQUFTLEVBR1g3aUIsS0FDQTYrQyxNQWZKLEdBQUk3K0MsR0FBUSxDQUVaNitDLE1Ba0JGMG5CLEVBQWNoMEQsSUFBTSxTQUFTdzBELEVBQVNsa0QsR0FPcEMsUUFBU21rRCxHQUFXbmtDLEdBQ2xCdEMsRUFBU0EsR0FBVXNDLElBQ2JxSCxJQUFVNjhCLEVBQVE3bUUsUUFDdEIyaUIsRUFBUzBkLEdBVGIsR0FBSTJKLEdBQVEsRUFDUjNKLEdBQVMsQ0FDYjEvQixHQUFRa21FLEVBQVMsU0FBU25DLEdBQ3hCQSxFQUFPdGdDLEtBQUswaUMsTUE4QmhCVCxFQUFjMWdFLFdBQ1oyZ0UsUUFBUyxTQUFTanZELEdBQ2hCcEcsS0FBS29HLEtBQU9BLE9BR2Qrc0IsS0FBTSxTQUFTMzdCLEdBOURTLElBK0RsQndJLEtBQUswMUQsT0FDUGwrRCxJQUVBd0ksS0FBS3cxRCxlQUFldGdFLEtBQUtzQyxJQUk3Qm92QyxTQUFVcDBDLEVBRVZzakUsV0FBWSxXQUNWLElBQUs5MUQsS0FBSzh3QixRQUFTLENBQ2pCLEdBQUl2NUIsR0FBT3lJLElBQ1hBLE1BQUs4d0IsUUFBVUosRUFBRyxTQUFTNEIsRUFBU1YsR0FDbENyNkIsRUFBSzQ3QixLQUFLLFNBQVMvRCxJQUNGLElBQVhBLEVBQ0Z3QyxJQUVBVSxRQUtSLE1BQU90eUIsTUFBSzh3QixTQUdkcjlCLEtBQU0sU0FBU3NpRSxFQUFnQkMsR0FDN0IsTUFBT2gyRCxNQUFLODFELGFBQWFyaUUsS0FBS3NpRSxFQUFnQkMsSUFHaERqd0MsTUFBUyxTQUFTeGQsR0FDaEIsTUFBT3ZJLE1BQUs4MUQsYUFBb0IsTUFBRXZ0RCxJQUdwQ3FxQixRQUFXLFNBQVNycUIsR0FDbEIsTUFBT3ZJLE1BQUs4MUQsYUFBc0IsUUFBRXZ0RCxJQUd0QzB0RCxNQUFPLFdBQ0RqMkQsS0FBS29HLEtBQUs2dkQsT0FDWmoyRCxLQUFLb0csS0FBSzZ2RCxTQUlkQyxPQUFRLFdBQ0ZsMkQsS0FBS29HLEtBQUs4dkQsUUFDWmwyRCxLQUFLb0csS0FBSzh2RCxVQUlkMVksSUFBSyxXQUNDeDlDLEtBQUtvRyxLQUFLbzNDLEtBQ1p4OUMsS0FBS29HLEtBQUtvM0MsTUFFWng5QyxLQUFLbTJELFVBQVMsSUFHaEJ6akQsT0FBUSxXQUNGMVMsS0FBS29HLEtBQUtzTSxRQUNaMVMsS0FBS29HLEtBQUtzTSxTQUVaMVMsS0FBS20yRCxVQUFTLElBR2hCekMsU0FBVSxTQUFTaGlDLEdBQ2pCLEdBQUluNkIsR0FBT3lJLElBaklLLEtBa0laekksRUFBS20rRCxTQUNQbitELEVBQUttK0QsT0FsSWMsRUFtSW5CbitELEVBQUtrK0QsTUFBTSxXQUNUbCtELEVBQUs0K0QsU0FBU3prQyxPQUtwQnlrQyxTQUFVLFNBQVN6a0MsR0F4SUssSUF5SWxCMXhCLEtBQUswMUQsU0FDUGhtRSxFQUFRc1EsS0FBS3cxRCxlQUFnQixTQUFTaCtELEdBQ3BDQSxFQUFHazZCLEtBRUwxeEIsS0FBS3cxRCxlQUFlem1FLE9BQVMsRUFDN0JpUixLQUFLMDFELE9BOUllLEtBbUpuQk4sS0FrQlBnQixHQUEwQixXQUM1QnAyRCxLQUFLOEksTUFBUSxRQUFTLEtBQU0sa0JBQW1CLFNBQVMrckQsRUFBT25rQyxFQUFJbWlDLEdBRWpFLE1BQU8sVUFBU3YrRCxFQUFTK2hFLEdBNEJ2QixRQUFTNTFELEtBUVAsTUFQQW8wRCxHQUFNLFdBQ0p5QixJQUNLQyxHQUNIOUMsRUFBT0MsV0FFVDZDLEdBQVMsSUFFSjlDLEVBR1QsUUFBUzZDLEtBQ0gxbUQsRUFBUTNHLFdBQ1YzVSxFQUFRMlUsU0FBUzJHLEVBQVEzRyxVQUN6QjJHLEVBQVEzRyxTQUFXLE1BRWpCMkcsRUFBUTFHLGNBQ1Y1VSxFQUFRNFUsWUFBWTBHLEVBQVExRyxhQUM1QjBHLEVBQVExRyxZQUFjLE1BRXBCMEcsRUFBUTRqRCxLQUNWbC9ELEVBQVF5N0QsSUFBSW5nRCxFQUFRNGpELElBQ3BCNWpELEVBQVE0akQsR0FBSyxNQTdDakIsR0FBSTVqRCxHQUFVeW1ELEtBQ1R6bUQsR0FBUTRtRCxhQUNYNW1ELEVBQVU5YSxFQUFLOGEsSUFNYkEsRUFBUTZtRCxnQkFDVjdtRCxFQUFRMmpELEtBQU8zakQsRUFBUTRqRCxHQUFLLE1BRzFCNWpELEVBQVEyakQsT0FDVmovRCxFQUFReTdELElBQUluZ0QsRUFBUTJqRCxNQUNwQjNqRCxFQUFRMmpELEtBQU8sS0FHakIsSUFBSWdELEdBQVE5QyxFQUFTLEdBQUlaLEVBQ3pCLFFBQ0U2RCxNQUFPajJELEVBQ1ArOEMsSUFBSy84QyxPQSt0RFQyVSxHQUFpQnhuQixFQUFPLFlBR3hCcTdCLEdBQXVCLEdBQUl4VSxHQVEvQkMsSUFBaUJ0SyxTQUFXLFdBQVkseUJBeW5GeENxZSxHQUFhL3pCLFVBQVVpaUUsY0FBZ0IsV0FBYSxNQUFPMzJELE1BQUtxb0IsZ0JBQWtCWSxHQUdsRixJQUFJbEwsSUFBZ0IsdUJBQ2hCMk4sR0FBdUIsY0EwR3ZCbUIsR0FBb0JqL0IsRUFBTyxlQUczQncrQixHQUFZLDZCQTJTWndxQyxHQUFxQyxXQUN2QzUyRCxLQUFLOEksTUFBUSxZQUFhLFNBQVMrSixHQUNqQyxNQUFPLFVBQVNna0QsR0FnQmQsTUFQSUEsSUFDR0EsRUFBUXA5RCxVQUFZbzlELFlBQW1Cdm5FLE1BQzFDdW5FLEVBQVVBLEVBQVEsSUFHcEJBLEVBQVVoa0QsRUFBVSxHQUFHMmlCLEtBRWxCcWhDLEVBQVFDLFlBQWMsTUFLL0J4b0MsR0FBbUIsbUJBQ25Cd0IsSUFBaUNpbkMsZUFBZ0J6b0MsR0FBbUIsa0JBQ3BFSSxHQUFhLGdCQUNiQyxJQUNGcW9DLElBQUssS0FDTEMsSUFBSyxNQUVIOW9DLEdBQXlCLGNBQ3pCSyxHQUFjNWdDLEVBQU8sU0FpbkRyQmdxQyxHQUFxQm43QixHQUFRbTdCLG1CQUFxQmhxQyxFQUFPLGVBQzdEZ3FDLElBQW1CVSxjQUFnQixTQUFTaFMsR0FDMUMsS0FBTXNSLElBQW1CLFdBQ3JCLHlNQUV3RHRSLElBRzlEc1IsR0FBbUJDLE9BQVMsU0FBU3ZSLEVBQU0zWixHQUN6QyxNQUFPaXJCLElBQW1CLFNBQVUsOEJBQWdDdFIsRUFBTTNaLEVBQUk5WixZQStrQmhGLElBQUlxa0UsSUFBdUMsV0FDekNsM0QsS0FBSzhJLEtBQU8sV0FJVixRQUFTaXRCLEdBQWVvaEMsR0FDdEIsR0FBSXpsRCxHQUFXLFNBQVNwVixHQUN0Qm9WLEVBQVNwVixLQUFPQSxFQUNoQm9WLEVBQVMwbEQsUUFBUyxFQUdwQixPQURBMWxELEdBQVNtQyxHQUFLc2pELEVBQ1B6bEQsRUFUVCxHQUFJd2pCLEdBQVl6NEIsR0FBUXk0QixVQUNwQm1pQyxJQVdKLFFBVUV0aEMsZUFBZ0IsU0FBUzFsQixHQUN2QixHQUFJOG1ELEdBQWEsS0FBT2ppQyxFQUFVb2lDLGFBQWF6a0UsU0FBUyxJQUNwRHdpQyxFQUFlLHFCQUF1QjhoQyxFQUN0Q3psRCxFQUFXcWtCLEVBQWVvaEMsRUFFOUIsT0FEQUUsR0FBWWhpQyxHQUFnQkgsRUFBVWlpQyxHQUFjemxELEVBQzdDMmpCLEdBV1RJLFVBQVcsU0FBU0osR0FDbEIsTUFBT2dpQyxHQUFZaGlDLEdBQWMraEMsUUFXbkNwaEMsWUFBYSxTQUFTWCxHQUNwQixNQUFPZ2lDLEdBQVloaUMsR0FBYy80QixNQVVuQzI1QixlQUFnQixTQUFTWixHQUN2QixHQUFJM2pCLEdBQVcybEQsRUFBWWhpQyxTQUNwQkgsR0FBVXhqQixFQUFTbUMsVUFDbkJ3akQsR0FBWWhpQyxPQWlCdkJraUMsR0FBYSxpQ0FDYmw5QixJQUFpQm05QixLQUFRLEdBQUlDLE1BQVMsSUFBS0MsSUFBTyxJQUNsRGw5QixHQUFrQjVzQyxFQUFPLGFBNEJ6QjJzQyxHQUFxQixpQkFvVHJCbzlCLElBTUY1N0IsU0FBUyxHQU1UTCxTQUFTLEVBTVRnRCxXQUFXLEVBcUJYaEIsT0FBUWIsR0FBZSxZQXVCdkJ4c0IsSUFBSyxTQUFTQSxHQUNaLEdBQUl2ZCxFQUFZdWQsR0FDZCxNQUFPclEsTUFBSzg3QixLQUdkLElBQUlsdEMsR0FBUTJvRSxHQUFXLzBELEtBQUs2TixFQUs1QixRQUpJemhCLEVBQU0sSUFBYyxLQUFSeWhCLElBQVlyUSxLQUFLakMsS0FBS2xFLG1CQUFtQmpMLEVBQU0sTUFDM0RBLEVBQU0sSUFBTUEsRUFBTSxJQUFjLEtBQVJ5aEIsSUFBWXJRLEtBQUs2NkIsT0FBT2pzQyxFQUFNLElBQU0sSUFDaEVvUixLQUFLZ1AsS0FBS3BnQixFQUFNLElBQU0sSUFFZm9SLE1BcUJUdTJCLFNBQVVzRyxHQUFlLGNBNEJ6QnoyQixLQUFNeTJCLEdBQWUsVUFvQnJCekMsS0FBTXlDLEdBQWUsVUEwQnJCOStCLEtBQU0rK0IsR0FBcUIsU0FBVSxTQUFTLytCLEdBRTVDLE1BREFBLEdBQWdCLE9BQVRBLEVBQWdCQSxFQUFLbEwsV0FBYSxHQUNmLE1BQW5Ca0wsRUFBSy9HLE9BQU8sR0FBYStHLEVBQU8sSUFBTUEsSUFnRC9DODhCLE9BQVEsU0FBU0EsRUFBUSs4QixHQUN2QixPQUFRenBFLFVBQVVZLFFBQ2hCLElBQUssR0FDSCxNQUFPaVIsTUFBSzQ2QixRQUNkLEtBQUssR0FDSCxHQUFJdnJDLEVBQVN3ckMsSUFBV2x0QyxFQUFTa3RDLEdBQy9CQSxFQUFTQSxFQUFPaG9DLFdBQ2hCbU4sS0FBSzQ2QixTQUFXOWdDLEdBQWMrZ0MsT0FDekIsQ0FBQSxJQUFJenRDLEVBQVN5dEMsR0FTbEIsS0FBTUwsSUFBZ0IsV0FDbEIscUZBVEpLLEdBQVMvbEMsRUFBSytsQyxNQUVkbnJDLEVBQVFtckMsRUFBUSxTQUFTcnFDLEVBQU9YLEdBQ2pCLE1BQVRXLFNBQXNCcXFDLEdBQU9ockMsS0FHbkNtUSxLQUFLNDZCLFNBQVdDLEVBS2xCLEtBQ0YsU0FDTS9uQyxFQUFZOGtFLElBQThCLE9BQWZBLFFBQ3RCNTNELE1BQUs0NkIsU0FBU0MsR0FFckI3NkIsS0FBSzQ2QixTQUFTQyxHQUFVKzhCLEVBSzlCLE1BREE1M0QsTUFBSzY3QixZQUNFNzdCLE1Bd0JUZ1AsS0FBTTh0QixHQUFxQixTQUFVLFNBQVM5dEIsR0FDNUMsTUFBZ0IsUUFBVEEsRUFBZ0JBLEVBQUtuYyxXQUFhLEtBVzNDbEUsUUFBUyxXQUVQLE1BREFxUixNQUFLMCtCLFdBQVksRUFDVjErQixNQUlYdFEsSUFBU2t0QyxHQUE0Qk4sR0FBcUJoQixJQUFtQixTQUFTdThCLEdBQ3BGQSxFQUFTbmpFLFVBQVluRixPQUFPZ0QsT0FBT29sRSxJQXFCbkNFLEVBQVNuakUsVUFBVW1kLE1BQVEsU0FBU0EsR0FDbEMsSUFBSzFqQixVQUFVWSxPQUNiLE1BQU9pUixNQUFLdTlCLE9BR2QsSUFBSXM2QixJQUFhdjhCLEtBQXFCdDdCLEtBQUswN0IsUUFDekMsS0FBTWxCLElBQWdCLFVBQVcsOEdBU25DLE9BSEF4NkIsTUFBS3U5QixRQUFVenFDLEVBQVkrZSxHQUFTLEtBQU9BLEVBQzNDN1IsS0FBS2c4Qix3QkFBeUIsRUFFdkJoOEIsT0EraEJYLElBQUk4M0QsSUFBZWxxRSxFQUFPLFVBRXRCdTFDLE1BQW1CenRDLFlBQVloQixVQUFVbEQsUUFvQ3pDdW1FLEdBQVloaEUsSUFDaEJySCxHQUFRLGdEQUFnRDBFLE1BQU0sS0FBTSxTQUFTb3NDLEdBQVl1M0IsR0FBVXYzQixJQUFZLEdBQy9HLElBQUl3M0IsS0FBVTNrRCxFQUFJLEtBQU00a0QsRUFBSSxLQUFNcjRCLEVBQUksS0FBTXM0QixFQUFJLEtBQU0xcUMsRUFBSSxLQUFNMnFDLElBQUssSUFBTUMsSUFBSSxLQVMzRS96QixHQUFRLFNBQWV6MEIsR0FDekI1UCxLQUFLNFAsUUFBVUEsRUFHakJ5MEIsSUFBTTN2QyxXQUNKZ0IsWUFBYTJ1QyxHQUViZzBCLElBQUssU0FBUy94QyxHQUtaLElBSkF0bUIsS0FBS3NtQixLQUFPQSxFQUNadG1CLEtBQUtuUixNQUFRLEVBQ2JtUixLQUFLczRELFVBRUV0NEQsS0FBS25SLE1BQVFtUixLQUFLc21CLEtBQUt2M0IsUUFBUSxDQUNwQyxHQUFJbW9DLEdBQUtsM0IsS0FBS3NtQixLQUFLdHZCLE9BQU9nSixLQUFLblIsTUFDL0IsSUFBVyxNQUFQcW9DLEdBQXFCLE1BQVBBLEVBQ2hCbDNCLEtBQUt1NEQsV0FBV3JoQyxPQUNYLElBQUlsM0IsS0FBS3JTLFNBQVN1cEMsSUFBYyxNQUFQQSxHQUFjbDNCLEtBQUtyUyxTQUFTcVMsS0FBS3c0RCxRQUMvRHg0RCxLQUFLeTRELGlCQUNBLElBQUl6NEQsS0FBS2ltQyxrQkFBa0JqbUMsS0FBSzA0RCxpQkFDckMxNEQsS0FBSzI0RCxnQkFDQSxJQUFJMzRELEtBQUs0NEQsR0FBRzFoQyxFQUFJLGVBQ3JCbDNCLEtBQUtzNEQsT0FBT3BqRSxNQUFNckcsTUFBT21SLEtBQUtuUixNQUFPeTNCLEtBQU00USxJQUMzQ2wzQixLQUFLblIsWUFDQSxJQUFJbVIsS0FBSzY0RCxhQUFhM2hDLEdBQzNCbDNCLEtBQUtuUixZQUNBLENBQ0wsR0FBSWlxRSxHQUFNNWhDLEVBQUtsM0IsS0FBS3c0RCxPQUNoQk8sRUFBTUQsRUFBTTk0RCxLQUFLdzRELEtBQUssR0FDdEJRLEVBQU1qQixHQUFVN2dDLEdBQ2hCK2hDLEVBQU1sQixHQUFVZSxHQUNoQkksRUFBTW5CLEdBQVVnQixFQUNwQixJQUFJQyxHQUFPQyxHQUFPQyxFQUFLLENBQ3JCLEdBQUlqdEMsR0FBUWl0QyxFQUFNSCxFQUFPRSxFQUFNSCxFQUFNNWhDLENBQ3JDbDNCLE1BQUtzNEQsT0FBT3BqRSxNQUFNckcsTUFBT21SLEtBQUtuUixNQUFPeTNCLEtBQU0yRixFQUFPdVUsVUFBVSxJQUM1RHhnQyxLQUFLblIsT0FBU285QixFQUFNbDlCLFdBRXBCaVIsTUFBS201RCxXQUFXLDZCQUE4Qm41RCxLQUFLblIsTUFBT21SLEtBQUtuUixNQUFRLElBSTdFLE1BQU9tUixNQUFLczRELFFBR2RNLEdBQUksU0FBUzFoQyxFQUFJa2lDLEdBQ2YsT0FBOEIsSUFBdkJBLEVBQU16a0UsUUFBUXVpQyxJQUd2QnNoQyxLQUFNLFNBQVN2cUUsR0FDYixHQUFJZ3NELEdBQU1oc0QsR0FBSyxDQUNmLE9BQVErUixNQUFLblIsTUFBUW9yRCxFQUFNajZDLEtBQUtzbUIsS0FBS3YzQixRQUFVaVIsS0FBS3NtQixLQUFLdHZCLE9BQU9nSixLQUFLblIsTUFBUW9yRCxJQUcvRXRzRCxTQUFVLFNBQVN1cEMsR0FDakIsTUFBUSxLQUFPQSxHQUFNQSxHQUFNLEtBQXNCLGdCQUFQQSxJQUc1QzJoQyxhQUFjLFNBQVMzaEMsR0FFckIsTUFBZSxNQUFQQSxHQUFxQixPQUFQQSxHQUFzQixPQUFQQSxHQUN0QixPQUFQQSxHQUFzQixPQUFQQSxHQUFzQixNQUFQQSxHQUd4QytPLGtCQUFtQixTQUFTL08sR0FDMUIsTUFBT2wzQixNQUFLNFAsUUFBUXEyQixrQkFDaEJqbUMsS0FBSzRQLFFBQVFxMkIsa0JBQWtCL08sRUFBSWwzQixLQUFLcTVELFlBQVluaUMsSUFDcERsM0IsS0FBS3M1RCx1QkFBdUJwaUMsSUFHbENvaUMsdUJBQXdCLFNBQVNwaUMsR0FDL0IsTUFBUSxLQUFPQSxHQUFNQSxHQUFNLEtBQ25CLEtBQU9BLEdBQU1BLEdBQU0sS0FDbkIsTUFBUUEsR0FBYSxNQUFQQSxHQUd4QmdQLHFCQUFzQixTQUFTaFAsR0FDN0IsTUFBT2wzQixNQUFLNFAsUUFBUXMyQixxQkFDaEJsbUMsS0FBSzRQLFFBQVFzMkIscUJBQXFCaFAsRUFBSWwzQixLQUFLcTVELFlBQVluaUMsSUFDdkRsM0IsS0FBS3U1RCwwQkFBMEJyaUMsSUFHckNxaUMsMEJBQTJCLFNBQVNyaUMsRUFBSXNpQyxHQUN0QyxNQUFPeDVELE1BQUtzNUQsdUJBQXVCcGlDLEVBQUlzaUMsSUFBT3g1RCxLQUFLclMsU0FBU3VwQyxJQUc5RG1pQyxZQUFhLFNBQVNuaUMsR0FDcEIsTUFBa0IsS0FBZEEsRUFBR25vQyxPQUFxQm1vQyxFQUFHNjFCLFdBQVcsSUFFbEM3MUIsRUFBRzYxQixXQUFXLElBQU0sSUFBTTcxQixFQUFHNjFCLFdBQVcsR0FBSyxVQUd2RDJMLGNBQWUsV0FDYixHQUFJeGhDLEdBQUtsM0IsS0FBS3NtQixLQUFLdHZCLE9BQU9nSixLQUFLblIsT0FDM0IycEUsRUFBT3g0RCxLQUFLdzRELE1BQ2hCLEtBQUtBLEVBQ0gsTUFBT3RoQyxFQUVULElBQUl1aUMsR0FBTXZpQyxFQUFHNjFCLFdBQVcsR0FDcEIyTSxFQUFNbEIsRUFBS3pMLFdBQVcsRUFDMUIsT0FBSTBNLElBQU8sT0FBVUEsR0FBTyxPQUFVQyxHQUFPLE9BQVVBLEdBQU8sTUFDckR4aUMsRUFBS3NoQyxFQUVQdGhDLEdBR1R5aUMsY0FBZSxTQUFTemlDLEdBQ3RCLE1BQWUsTUFBUEEsR0FBcUIsTUFBUEEsR0FBY2wzQixLQUFLclMsU0FBU3VwQyxJQUdwRGlpQyxXQUFZLFNBQVM1OUQsRUFBT203RCxFQUFPbFosR0FDakNBLEVBQU1BLEdBQU94OUMsS0FBS25SLEtBQ2xCLElBQUkrcUUsR0FBVXRzRSxFQUFVb3BFLEdBQ2QsS0FBT0EsRUFBUyxJQUFNMTJELEtBQUtuUixNQUFRLEtBQU9tUixLQUFLc21CLEtBQUtyc0IsVUFBVXk4RCxFQUFPbFosR0FBTyxJQUM1RSxJQUFNQSxDQUNoQixNQUFNc2EsSUFBYSxTQUFVLHFEQUN6QnY4RCxFQUFPcStELEVBQVE1NUQsS0FBS3NtQixPQUcxQm15QyxXQUFZLFdBR1YsSUFGQSxHQUFJN2dCLEdBQVMsR0FDVDhlLEVBQVExMkQsS0FBS25SLE1BQ1ZtUixLQUFLblIsTUFBUW1SLEtBQUtzbUIsS0FBS3YzQixRQUFRLENBQ3BDLEdBQUltb0MsR0FBSzNpQyxHQUFVeUwsS0FBS3NtQixLQUFLdHZCLE9BQU9nSixLQUFLblIsT0FDekMsSUFBVyxNQUFQcW9DLEdBQWNsM0IsS0FBS3JTLFNBQVN1cEMsR0FDOUIwZ0IsR0FBVTFnQixNQUNMLENBQ0wsR0FBSTJpQyxHQUFTNzVELEtBQUt3NEQsTUFDbEIsSUFBVyxNQUFQdGhDLEdBQWNsM0IsS0FBSzI1RCxjQUFjRSxHQUNuQ2ppQixHQUFVMWdCLE1BQ0wsSUFBSWwzQixLQUFLMjVELGNBQWN6aUMsSUFDMUIyaUMsR0FBVTc1RCxLQUFLclMsU0FBU2tzRSxJQUNhLE1BQXJDamlCLEVBQU81Z0QsT0FBTzRnRCxFQUFPN29ELE9BQVMsR0FDaEM2b0QsR0FBVTFnQixNQUNMLENBQUEsSUFBSWwzQixLQUFLMjVELGNBQWN6aUMsSUFDeEIyaUMsR0FBVzc1RCxLQUFLclMsU0FBU2tzRSxJQUNVLE1BQXJDamlCLEVBQU81Z0QsT0FBTzRnRCxFQUFPN29ELE9BQVMsR0FHaEMsS0FGQWlSLE1BQUttNUQsV0FBVyxxQkFLcEJuNUQsS0FBS25SLFFBRVBtUixLQUFLczRELE9BQU9wakUsTUFDVnJHLE1BQU82bkUsRUFDUHB3QyxLQUFNc3hCLEVBQ04xM0MsVUFBVSxFQUNWMVAsTUFBT3VqQixPQUFPNmpDLE1BSWxCK2dCLFVBQVcsV0FDVCxHQUFJakMsR0FBUTEyRCxLQUFLblIsS0FFakIsS0FEQW1SLEtBQUtuUixPQUFTbVIsS0FBSzA0RCxnQkFBZ0IzcEUsT0FDNUJpUixLQUFLblIsTUFBUW1SLEtBQUtzbUIsS0FBS3YzQixRQUFRLENBQ3BDLEdBQUltb0MsR0FBS2wzQixLQUFLMDRELGVBQ2QsS0FBSzE0RCxLQUFLa21DLHFCQUFxQmhQLEdBQzdCLEtBRUZsM0IsTUFBS25SLE9BQVNxb0MsRUFBR25vQyxPQUVuQmlSLEtBQUtzNEQsT0FBT3BqRSxNQUNWckcsTUFBTzZuRSxFQUNQcHdDLEtBQU10bUIsS0FBS3NtQixLQUFLeDNCLE1BQU00bkUsRUFBTzEyRCxLQUFLblIsT0FDbEM2OUIsWUFBWSxLQUloQjZyQyxXQUFZLFNBQVN1QixHQUNuQixHQUFJcEQsR0FBUTEyRCxLQUFLblIsS0FDakJtUixNQUFLblIsT0FJTCxLQUhBLEdBQUltdEQsR0FBUyxHQUNUK2QsRUFBWUQsRUFDWjdpQyxHQUFTLEVBQ05qM0IsS0FBS25SLE1BQVFtUixLQUFLc21CLEtBQUt2M0IsUUFBUSxDQUNwQyxHQUFJbW9DLEdBQUtsM0IsS0FBS3NtQixLQUFLdHZCLE9BQU9nSixLQUFLblIsTUFFL0IsSUFEQWtyRSxHQUFhN2lDLEVBQ1RELEVBQVEsQ0FDVixHQUFXLE1BQVBDLEVBQVksQ0FDZCxHQUFJOGlDLEdBQU1oNkQsS0FBS3NtQixLQUFLcnNCLFVBQVUrRixLQUFLblIsTUFBUSxFQUFHbVIsS0FBS25SLE1BQVEsRUFDdERtckUsR0FBSXByRSxNQUFNLGdCQUNib1IsS0FBS201RCxXQUFXLDhCQUFnQ2EsRUFBTSxLQUV4RGg2RCxLQUFLblIsT0FBUyxFQUNkbXRELEdBQVU2USxPQUFPQyxhQUFhMzZELFNBQVM2bkUsRUFBSyxTQUN2QyxDQUVMaGUsR0FEVWdjLEdBQU85Z0MsSUFDU0EsRUFFNUJELEdBQVMsTUFDSixJQUFXLE9BQVBDLEVBQ1RELEdBQVMsTUFDSixDQUFBLEdBQUlDLElBQU80aUMsRUFRaEIsTUFQQTk1RCxNQUFLblIsWUFDTG1SLE1BQUtzNEQsT0FBT3BqRSxNQUNWckcsTUFBTzZuRSxFQUNQcHdDLEtBQU15ekMsRUFDTjc1RCxVQUFVLEVBQ1YxUCxNQUFPd3JELEdBSVRBLElBQVU5a0IsRUFFWmwzQixLQUFLblIsUUFFUG1SLEtBQUttNUQsV0FBVyxxQkFBc0J6QyxJQUkxQyxJQUFJeDJCLElBQU0sU0FBYTZDLEVBQU9uekIsR0FDNUI1UCxLQUFLK2lDLE1BQVFBLEVBQ2IvaUMsS0FBSzRQLFFBQVVBLEVBR2pCc3dCLElBQUllLFFBQVUsVUFDZGYsR0FBSSs1QixvQkFBc0Isc0JBQzFCLzVCLEdBQUk2QixxQkFBdUIsdUJBQzNCN0IsR0FBSXVCLHNCQUF3Qix3QkFDNUJ2QixHQUFJc0Isa0JBQW9CLG9CQUN4QnRCLEdBQUlLLGlCQUFtQixtQkFDdkJMLEdBQUlHLGdCQUFrQixrQkFDdEJILEdBQUlPLGVBQWlCLGlCQUNyQlAsR0FBSUMsaUJBQW1CLG1CQUN2QkQsR0FBSTBCLFdBQWEsYUFDakIxQixHQUFJaUIsUUFBVSxVQUNkakIsR0FBSThCLGdCQUFrQixrQkFDdEI5QixHQUFJZzZCLFNBQVcsV0FDZmg2QixHQUFJK0IsaUJBQW1CLG1CQUN2Qi9CLEdBQUlpQyxlQUFpQixpQkFDckJqQyxHQUFJa0MsaUJBQW1CLG1CQUd2QmxDLEdBQUl1QyxpQkFBbUIsbUJBRXZCdkMsR0FBSXhyQyxXQUNGa3NDLElBQUssU0FBU3RhLEdBQ1p0bUIsS0FBS3NtQixLQUFPQSxFQUNadG1CLEtBQUtzNEQsT0FBU3Q0RCxLQUFLK2lDLE1BQU1zMUIsSUFBSS94QyxFQUU3QixJQUFJOTFCLEdBQVF3UCxLQUFLbTZELFNBTWpCLE9BSjJCLEtBQXZCbjZELEtBQUtzNEQsT0FBT3ZwRSxRQUNkaVIsS0FBS201RCxXQUFXLHlCQUEwQm41RCxLQUFLczRELE9BQU8sSUFHakQ5bkUsR0FHVDJwRSxRQUFTLFdBRVAsSUFEQSxHQUFJM2tDLFFBSUYsR0FGSXgxQixLQUFLczRELE9BQU92cEUsT0FBUyxJQUFNaVIsS0FBS3c0RCxLQUFLLElBQUssSUFBSyxJQUFLLE1BQ3REaGpDLEVBQUt0Z0MsS0FBSzhLLEtBQUtvNkQsd0JBQ1pwNkQsS0FBS3E2RCxPQUFPLEtBQ2YsT0FBU2prRSxLQUFNOHBDLEdBQUllLFFBQVN6TCxLQUFNQSxJQUt4QzRrQyxvQkFBcUIsV0FDbkIsT0FBU2hrRSxLQUFNOHBDLEdBQUkrNUIsb0JBQXFCdHRDLFdBQVkzc0IsS0FBS3M2RCxnQkFHM0RBLFlBQWEsV0FFWCxJQURBLEdBQUloNUIsR0FBT3RoQyxLQUFLMnNCLGFBQ1Qzc0IsS0FBS3E2RCxPQUFPLE1BQ2pCLzRCLEVBQU90aEMsS0FBS0ssT0FBT2loQyxFQUVyQixPQUFPQSxJQUdUM1UsV0FBWSxXQUNWLE1BQU8zc0IsTUFBS3U2RCxjQUdkQSxXQUFZLFdBQ1YsR0FBSXB2RCxHQUFTbkwsS0FBS3c2RCxTQUNsQixJQUFJeDZELEtBQUtxNkQsT0FBTyxLQUFNLENBQ3BCLElBQUs5M0IsR0FBYXAzQixHQUNoQixLQUFNMnNELElBQWEsT0FBUSw0Q0FHN0Izc0QsSUFBVy9VLEtBQU04cEMsR0FBSTZCLHFCQUFzQlQsS0FBTW4yQixFQUFRbzJCLE1BQU92aEMsS0FBS3U2RCxhQUFjLzVCLFNBQVUsS0FFL0YsTUFBT3IxQixJQUdUcXZELFFBQVMsV0FDUCxHQUNJOTRCLEdBQ0FDLEVBRkEvdEMsRUFBT29NLEtBQUt5NkQsV0FHaEIsT0FBSXo2RCxNQUFLcTZELE9BQU8sT0FDZDM0QixFQUFZMWhDLEtBQUsyc0IsYUFDYjNzQixLQUFLMDZELFFBQVEsT0FDZi80QixFQUFhM2hDLEtBQUsyc0IsY0FDVHYyQixLQUFNOHBDLEdBQUl1QixzQkFBdUI3dEMsS0FBTUEsRUFBTTh0QyxVQUFXQSxFQUFXQyxXQUFZQSxJQUdyRi90QyxHQUdUNm1FLFVBQVcsV0FFVCxJQURBLEdBQUluNUIsR0FBT3RoQyxLQUFLMjZELGFBQ1QzNkQsS0FBS3E2RCxPQUFPLE9BQ2pCLzRCLEdBQVNsckMsS0FBTThwQyxHQUFJc0Isa0JBQW1CaEIsU0FBVSxLQUFNYyxLQUFNQSxFQUFNQyxNQUFPdmhDLEtBQUsyNkQsYUFFaEYsT0FBT3I1QixJQUdUcTVCLFdBQVksV0FFVixJQURBLEdBQUlyNUIsR0FBT3RoQyxLQUFLNDZELFdBQ1Q1NkQsS0FBS3E2RCxPQUFPLE9BQ2pCLzRCLEdBQVNsckMsS0FBTThwQyxHQUFJc0Isa0JBQW1CaEIsU0FBVSxLQUFNYyxLQUFNQSxFQUFNQyxNQUFPdmhDLEtBQUs0NkQsV0FFaEYsT0FBT3Q1QixJQUdUczVCLFNBQVUsV0FHUixJQUZBLEdBQ0kzdUMsR0FEQXFWLEVBQU90aEMsS0FBSzY2RCxhQUVSNXVDLEVBQVFqc0IsS0FBS3E2RCxPQUFPLEtBQUssS0FBSyxNQUFNLFFBQzFDLzRCLEdBQVNsckMsS0FBTThwQyxHQUFJSyxpQkFBa0JDLFNBQVV2VSxFQUFNM0YsS0FBTWdiLEtBQU1BLEVBQU1DLE1BQU92aEMsS0FBSzY2RCxhQUVyRixPQUFPdjVCLElBR1R1NUIsV0FBWSxXQUdWLElBRkEsR0FDSTV1QyxHQURBcVYsRUFBT3RoQyxLQUFLODZELFdBRVI3dUMsRUFBUWpzQixLQUFLcTZELE9BQU8sSUFBSyxJQUFLLEtBQU0sT0FDMUMvNEIsR0FBU2xyQyxLQUFNOHBDLEdBQUlLLGlCQUFrQkMsU0FBVXZVLEVBQU0zRixLQUFNZ2IsS0FBTUEsRUFBTUMsTUFBT3ZoQyxLQUFLODZELFdBRXJGLE9BQU94NUIsSUFHVHc1QixTQUFVLFdBR1IsSUFGQSxHQUNJN3VDLEdBREFxVixFQUFPdGhDLEtBQUsrNkQsaUJBRVI5dUMsRUFBUWpzQixLQUFLcTZELE9BQU8sSUFBSSxNQUM5Qi80QixHQUFTbHJDLEtBQU04cEMsR0FBSUssaUJBQWtCQyxTQUFVdlUsRUFBTTNGLEtBQU1nYixLQUFNQSxFQUFNQyxNQUFPdmhDLEtBQUsrNkQsaUJBRXJGLE9BQU96NUIsSUFHVHk1QixlQUFnQixXQUdkLElBRkEsR0FDSTl1QyxHQURBcVYsRUFBT3RoQyxLQUFLZzdELFFBRVIvdUMsRUFBUWpzQixLQUFLcTZELE9BQU8sSUFBSSxJQUFJLE1BQ2xDLzRCLEdBQVNsckMsS0FBTThwQyxHQUFJSyxpQkFBa0JDLFNBQVV2VSxFQUFNM0YsS0FBTWdiLEtBQU1BLEVBQU1DLE1BQU92aEMsS0FBS2c3RCxRQUVyRixPQUFPMTVCLElBR1QwNUIsTUFBTyxXQUNMLEdBQUkvdUMsRUFDSixRQUFLQSxFQUFRanNCLEtBQUtxNkQsT0FBTyxJQUFLLElBQUssT0FDeEJqa0UsS0FBTThwQyxHQUFJRyxnQkFBaUJHLFNBQVV2VSxFQUFNM0YsS0FBTXRyQixRQUFRLEVBQU1xbUMsU0FBVXJoQyxLQUFLZzdELFNBRWhGaDdELEtBQUtpN0QsV0FJaEJBLFFBQVMsV0FDUCxHQUFJQSxFQUNBajdELE1BQUtxNkQsT0FBTyxNQUNkWSxFQUFVajdELEtBQUtzNkQsY0FDZnQ2RCxLQUFLMDZELFFBQVEsTUFDSjE2RCxLQUFLcTZELE9BQU8sS0FDckJZLEVBQVVqN0QsS0FBS2s3RCxtQkFDTmw3RCxLQUFLcTZELE9BQU8sS0FDckJZLEVBQVVqN0QsS0FBSzZoQyxTQUNON2hDLEtBQUttN0QsZ0JBQWdCcHJFLGVBQWVpUSxLQUFLdzRELE9BQU9seUMsTUFDekQyMEMsRUFBVW5tRSxFQUFLa0wsS0FBS203RCxnQkFBZ0JuN0QsS0FBSzA2RCxVQUFVcDBDLE9BQzFDdG1CLEtBQUs0UCxRQUFRMnpCLFNBQVN4ekMsZUFBZWlRLEtBQUt3NEQsT0FBT2x5QyxNQUMxRDIwQyxHQUFZN2tFLEtBQU04cEMsR0FBSWlCLFFBQVMzd0MsTUFBT3dQLEtBQUs0UCxRQUFRMnpCLFNBQVN2akMsS0FBSzA2RCxVQUFVcDBDLE9BQ2xFdG1CLEtBQUt3NEQsT0FBTzlyQyxXQUNyQnV1QyxFQUFVajdELEtBQUswc0IsYUFDTjFzQixLQUFLdzRELE9BQU90NEQsU0FDckIrNkQsRUFBVWo3RCxLQUFLRSxXQUVmRixLQUFLbTVELFdBQVcsMkJBQTRCbjVELEtBQUt3NEQsT0FJbkQsS0FEQSxHQUFJOXFCLEdBQ0lBLEVBQU8xdEMsS0FBS3E2RCxPQUFPLElBQUssSUFBSyxNQUNqQixNQUFkM3NCLEVBQUtwbkIsTUFDUDIwQyxHQUFXN2tFLEtBQU04cEMsR0FBSU8sZUFBZ0JxQixPQUFRbTVCLEVBQVM5c0UsVUFBVzZSLEtBQUtvN0Qsa0JBQ3RFcDdELEtBQUswNkQsUUFBUSxNQUNVLE1BQWRodEIsRUFBS3BuQixNQUNkMjBDLEdBQVk3a0UsS0FBTThwQyxHQUFJQyxpQkFBa0IwQixPQUFRbzVCLEVBQVMxMkMsU0FBVXZrQixLQUFLMnNCLGFBQWN5VCxVQUFVLEdBQ2hHcGdDLEtBQUswNkQsUUFBUSxNQUNVLE1BQWRodEIsRUFBS3BuQixLQUNkMjBDLEdBQVk3a0UsS0FBTThwQyxHQUFJQyxpQkFBa0IwQixPQUFRbzVCLEVBQVMxMkMsU0FBVXZrQixLQUFLMHNCLGFBQWMwVCxVQUFVLEdBRWhHcGdDLEtBQUttNUQsV0FBVyxhQUdwQixPQUFPOEIsSUFHVDU2RCxPQUFRLFNBQVNnN0QsR0FJZixJQUhBLEdBQUlqa0UsSUFBUWlrRSxHQUNSbHdELEdBQVUvVSxLQUFNOHBDLEdBQUlPLGVBQWdCcUIsT0FBUTloQyxLQUFLMHNCLGFBQWN2K0IsVUFBV2lKLEVBQU1pSixRQUFRLEdBRXJGTCxLQUFLcTZELE9BQU8sTUFDakJqakUsRUFBS2xDLEtBQUs4SyxLQUFLMnNCLGFBR2pCLE9BQU94aEIsSUFHVGl3RCxlQUFnQixXQUNkLEdBQUloa0UsS0FDSixJQUE4QixNQUExQjRJLEtBQUtzN0QsWUFBWWgxQyxLQUNuQixHQUNFbHZCLEVBQUtsQyxLQUFLOEssS0FBS3M2RCxxQkFDUnQ2RCxLQUFLcTZELE9BQU8sS0FFdkIsT0FBT2pqRSxJQUdUczFCLFdBQVksV0FDVixHQUFJVCxHQUFRanNCLEtBQUswNkQsU0FJakIsT0FIS3p1QyxHQUFNUyxZQUNUMXNCLEtBQUttNUQsV0FBVyw0QkFBNkJsdEMsSUFFdEM3MUIsS0FBTThwQyxHQUFJMEIsV0FBWTNtQyxLQUFNZ3hCLEVBQU0zRixPQUc3Q3BtQixTQUFVLFdBRVIsT0FBUzlKLEtBQU04cEMsR0FBSWlCLFFBQVMzd0MsTUFBT3dQLEtBQUswNkQsVUFBVWxxRSxRQUdwRDBxRSxpQkFBa0IsV0FDaEIsR0FBSXAxRCxLQUNKLElBQThCLE1BQTFCOUYsS0FBS3M3RCxZQUFZaDFDLEtBQ25CLEVBQUcsQ0FDRCxHQUFJdG1CLEtBQUt3NEQsS0FBSyxLQUVaLEtBRUYxeUQsR0FBUzVRLEtBQUs4SyxLQUFLMnNCLG9CQUNaM3NCLEtBQUtxNkQsT0FBTyxLQUl2QixPQUZBcjZELE1BQUswNkQsUUFBUSxNQUVKdGtFLEtBQU04cEMsR0FBSThCLGdCQUFpQmw4QixTQUFVQSxJQUdoRCs3QixPQUFRLFdBQ04sR0FBcUJ0ZCxHQUFqQjJkLElBQ0osSUFBOEIsTUFBMUJsaUMsS0FBS3M3RCxZQUFZaDFDLEtBQ25CLEVBQUcsQ0FDRCxHQUFJdG1CLEtBQUt3NEQsS0FBSyxLQUVaLEtBRUZqMEMsSUFBWW51QixLQUFNOHBDLEdBQUlnNkIsU0FBVXFCLEtBQU0sUUFDbEN2N0QsS0FBS3c0RCxPQUFPdDRELFVBQ2Rxa0IsRUFBUzEwQixJQUFNbVEsS0FBS0UsV0FDcEJxa0IsRUFBUzZiLFVBQVcsRUFDcEJwZ0MsS0FBSzA2RCxRQUFRLEtBQ2JuMkMsRUFBUy96QixNQUFRd1AsS0FBSzJzQixjQUNiM3NCLEtBQUt3NEQsT0FBTzlyQyxZQUNyQm5JLEVBQVMxMEIsSUFBTW1RLEtBQUswc0IsYUFDcEJuSSxFQUFTNmIsVUFBVyxFQUNoQnBnQyxLQUFLdzRELEtBQUssTUFDWng0RCxLQUFLMDZELFFBQVEsS0FDYm4yQyxFQUFTL3pCLE1BQVF3UCxLQUFLMnNCLGNBRXRCcEksRUFBUy96QixNQUFRK3pCLEVBQVMxMEIsS0FFbkJtUSxLQUFLdzRELEtBQUssTUFDbkJ4NEQsS0FBSzA2RCxRQUFRLEtBQ2JuMkMsRUFBUzEwQixJQUFNbVEsS0FBSzJzQixhQUNwQjNzQixLQUFLMDZELFFBQVEsS0FDYm4yQyxFQUFTNmIsVUFBVyxFQUNwQnBnQyxLQUFLMDZELFFBQVEsS0FDYm4yQyxFQUFTL3pCLE1BQVF3UCxLQUFLMnNCLGNBRXRCM3NCLEtBQUttNUQsV0FBVyxjQUFlbjVELEtBQUt3NEQsUUFFdEN0MkIsRUFBV2h0QyxLQUFLcXZCLFNBQ1R2a0IsS0FBS3E2RCxPQUFPLEtBSXZCLE9BRkFyNkQsTUFBSzA2RCxRQUFRLE1BRUx0a0UsS0FBTThwQyxHQUFJK0IsaUJBQWtCQyxXQUFZQSxJQUdsRGkzQixXQUFZLFNBQVNqckIsRUFBS2ppQixHQUN4QixLQUFNNnJDLElBQWEsU0FDZix5RkFDRTdyQyxFQUFNM0YsS0FBTTRuQixFQUFNamlCLEVBQU1wOUIsTUFBUSxFQUFJbVIsS0FBS3NtQixLQUFNdG1CLEtBQUtzbUIsS0FBS3JzQixVQUFVZ3lCLEVBQU1wOUIsU0FHakY2ckUsUUFBUyxTQUFTYyxHQUNoQixHQUEyQixJQUF2Qng3RCxLQUFLczRELE9BQU92cEUsT0FDZCxLQUFNK29FLElBQWEsT0FBUSxvQ0FBcUM5M0QsS0FBS3NtQixLQUd2RSxJQUFJMkYsR0FBUWpzQixLQUFLcTZELE9BQU9tQixFQUl4QixPQUhLdnZDLElBQ0hqc0IsS0FBS201RCxXQUFXLDZCQUErQnFDLEVBQUssSUFBS3g3RCxLQUFLdzRELFFBRXpEdnNDLEdBR1RxdkMsVUFBVyxXQUNULEdBQTJCLElBQXZCdDdELEtBQUtzNEQsT0FBT3ZwRSxPQUNkLEtBQU0rb0UsSUFBYSxPQUFRLG9DQUFxQzkzRCxLQUFLc21CLEtBRXZFLE9BQU90bUIsTUFBS3M0RCxPQUFPLElBR3JCRSxLQUFNLFNBQVNnRCxFQUFJQyxFQUFJQyxFQUFJQyxHQUN6QixNQUFPMzdELE1BQUs0N0QsVUFBVSxFQUFHSixFQUFJQyxFQUFJQyxFQUFJQyxJQUd2Q0MsVUFBVyxTQUFTM3RFLEVBQUd1dEUsRUFBSUMsRUFBSUMsRUFBSUMsR0FDakMsR0FBSTM3RCxLQUFLczRELE9BQU92cEUsT0FBU2QsRUFBRyxDQUMxQixHQUFJZytCLEdBQVFqc0IsS0FBS3M0RCxPQUFPcnFFLEdBQ3BCaXFFLEVBQUlqc0MsRUFBTTNGLElBQ2QsSUFBSTR4QyxJQUFNc0QsR0FBTXRELElBQU11RCxHQUFNdkQsSUFBTXdELEdBQU14RCxJQUFNeUQsSUFDeENILElBQU9DLElBQU9DLElBQU9DLEVBQ3pCLE1BQU8xdkMsR0FHWCxPQUFPLEdBR1RvdUMsT0FBUSxTQUFTbUIsRUFBSUMsRUFBSUMsRUFBSUMsR0FDM0IsR0FBSTF2QyxHQUFRanNCLEtBQUt3NEQsS0FBS2dELEVBQUlDLEVBQUlDLEVBQUlDLEVBQ2xDLFNBQUkxdkMsSUFDRmpzQixLQUFLczRELE9BQU8xckQsUUFDTHFmLElBS1hrdkMsaUJBQ0VuN0QsTUFBUzVKLEtBQU04cEMsR0FBSWlDLGdCQUNuQjA1QixTQUFZemxFLEtBQU04cEMsR0FBSWtDLG1CQW1CMUIsSUFBSTlCLElBQWtCLEVBQ2xCSSxHQUFrQixDQStLdEJrQyxJQUFZbHVDLFdBQ1YwSCxRQUFTLFNBQVN3a0MsR0FDaEIsR0FBSXJwQyxHQUFPeUk7VUFDWEEsTUFBSzZSLE9BQ0hpcUQsT0FBUSxFQUNSem1CLFdBQ0E3OUMsSUFBS3VrRSxRQUFVdm1DLFFBQVV3bUMsUUFDekI3eUMsUUFBUzR5QyxRQUFVdm1DLFFBQVV3bUMsUUFDN0J2M0IsV0FFRjlELEdBQWdDQyxFQUFLcnBDLEVBQUt1b0MsUUFDMUMsSUFDSW04QixHQURBM3BFLEVBQVEsRUFHWixJQURBME4sS0FBS2s4RCxNQUFRLFNBQ1JELEVBQWF6NUIsR0FBYzVCLEdBQU8sQ0FDckM1Z0MsS0FBSzZSLE1BQU1zcUQsVUFBWSxRQUN2QixJQUFJaHhELEdBQVNuTCxLQUFLODdELFFBQ2xCOTdELE1BQUtvOEQsUUFBUUgsRUFBWTl3RCxHQUN6Qm5MLEtBQUtxOEQsUUFBUWx4RCxHQUNiN1ksRUFBUSxhQUFlME4sS0FBS3M4RCxpQkFBaUIsU0FBVSxTQUV6RCxHQUFJbDdCLEdBQVVpQixHQUFVekIsRUFBSXBMLEtBQzVCaitCLEdBQUsya0UsTUFBUSxTQUNieHNFLEVBQVEweEMsRUFBUyxTQUFTbU0sRUFBTzE5QyxHQUMvQixHQUFJMHNFLEdBQVEsS0FBTzFzRSxDQUNuQjBILEdBQUtzYSxNQUFNMHFELElBQVVSLFFBQVV2bUMsUUFBVXdtQyxRQUN6Q3prRSxFQUFLc2EsTUFBTXNxRCxVQUFZSSxDQUN2QixJQUFJQyxHQUFTamxFLEVBQUt1a0UsUUFDbEJ2a0UsR0FBSzZrRSxRQUFRN3VCLEVBQU9pdkIsR0FDcEJqbEUsRUFBSzhrRSxRQUFRRyxHQUNiamxFLEVBQUtzYSxNQUFNNHlCLE9BQU92dkMsTUFBTStGLEtBQU1zaEUsRUFBT3Y4QixPQUFRdU4sRUFBTXZOLFNBQ25EdU4sRUFBTWt2QixRQUFVNXNFLElBRWxCbVEsS0FBSzZSLE1BQU1zcUQsVUFBWSxLQUN2Qm44RCxLQUFLazhELE1BQVEsT0FDYmw4RCxLQUFLbzhELFFBQVF4N0IsRUFDYixJQUFJODdCLEdBR0YsSUFBTTE4RCxLQUFLMjhELElBQU0sSUFBTTM4RCxLQUFLNDhELE9BQVMsT0FDckM1OEQsS0FBSzY4RCxlQUNMLFVBQVk3OEQsS0FBS3M4RCxpQkFBaUIsS0FBTSxXQUN4Q2hxRSxFQUNBME4sS0FBSzg4RCxXQUNMLGFBR0V0bEUsRUFBSyxHQUFLb1MsVUFBUyxVQUNuQixpQkFDQSxZQUNBLE9BQ0E4eUQsR0FDRTE4RCxLQUFLOC9CLFFBQ0xMLEdBQ0FDLEdBQ0FDLEdBRU4sT0FEQTMvQixNQUFLNlIsTUFBUTdSLEtBQUtrOEQsVUFBUXptRSxHQUNuQitCLEdBR1RtbEUsSUFBSyxNQUVMQyxPQUFRLFNBRVJFLFNBQVUsV0FDUixHQUFJM3hELE1BQ0FzNUIsRUFBU3prQyxLQUFLNlIsTUFBTTR5QixPQUNwQmx0QyxFQUFPeUksSUFVWCxPQVRBdFEsR0FBUSswQyxFQUFRLFNBQVMwWSxHQUN2Qmh5QyxFQUFPalcsS0FBSyxPQUFTaW9ELEVBQU1saUQsS0FBTyxJQUFNMUQsRUFBSytrRSxpQkFBaUJuZixFQUFNbGlELEtBQU0sTUFDdEVraUQsRUFBTW5kLFFBQ1I3MEIsRUFBT2pXLEtBQUtpb0QsRUFBTWxpRCxLQUFNLFdBQWFqRCxLQUFLQyxVQUFVa2xELEVBQU1uZCxRQUFVLE9BR3BFeUUsRUFBTzExQyxRQUNUb2MsRUFBT2pXLEtBQUssY0FBZ0J1dkMsRUFBT2oyQyxJQUFJLFNBQVNQLEdBQUssTUFBT0EsR0FBRWdOLE9BQVNYLEtBQUssS0FBTyxNQUU5RTZRLEVBQU83USxLQUFLLEtBR3JCZ2lFLGlCQUFrQixTQUFTcmhFLEVBQU0weUIsR0FDL0IsTUFBTyxZQUFjQSxFQUFTLEtBQzFCM3RCLEtBQUsrOEQsV0FBVzloRSxHQUNoQitFLEtBQUt3MUIsS0FBS3Y2QixHQUNWLE1BR040aEUsYUFBYyxXQUNaLEdBQUkxaUUsTUFDQTVDLEVBQU95SSxJQUlYLE9BSEF0USxHQUFRc1EsS0FBSzZSLE1BQU13akMsUUFBUyxTQUFTeGhDLEVBQUl4VCxHQUN2Q2xHLEVBQU1qRixLQUFLMmUsRUFBSyxZQUFjdGMsRUFBSzAvQixPQUFPNTJCLEdBQVUsT0FFbERsRyxFQUFNcEwsT0FBZSxPQUFTb0wsRUFBTUcsS0FBSyxLQUFPLElBQzdDLElBR1R5aUUsV0FBWSxTQUFTQyxHQUNuQixNQUFPaDlELE1BQUs2UixNQUFNbXJELEdBQVNqQixLQUFLaHRFLE9BQVMsT0FBU2lSLEtBQUs2UixNQUFNbXJELEdBQVNqQixLQUFLemhFLEtBQUssS0FBTyxJQUFNLElBRy9GazdCLEtBQU0sU0FBU3duQyxHQUNiLE1BQU9oOUQsTUFBSzZSLE1BQU1tckQsR0FBU3huQyxLQUFLbDdCLEtBQUssS0FHdkM4aEUsUUFBUyxTQUFTeDdCLEVBQUs0N0IsRUFBUVMsRUFBUUMsRUFBYTNxRSxFQUFRNHFFLEdBQzFELEdBQUk3N0IsR0FBTUMsRUFBb0JucUMsRUFBTXUxQixFQUFZeVQsRUFBL0I3b0MsRUFBT3lJLElBRXhCLElBREFrOUQsRUFBY0EsR0FBZTFxRSxHQUN4QjJxRSxHQUFvQjd2RSxFQUFVc3pDLEVBQUk2N0IsU0FNckMsTUFMQUQsR0FBU0EsR0FBVXg4RCxLQUFLODdELGFBQ3hCOTdELE1BQUtvOUQsSUFBSSxJQUNQcDlELEtBQUtxOUQsV0FBV2IsRUFBUXg4RCxLQUFLczlELGVBQWUsSUFBSzE4QixFQUFJNjdCLFVBQ3JEejhELEtBQUt1OUQsWUFBWTM4QixFQUFLNDdCLEVBQVFTLEVBQVFDLEVBQWEzcUUsR0FBUSxHQUkvRCxRQUFRcXVDLEVBQUl4cUMsTUFDWixJQUFLOHBDLElBQUllLFFBQ1B2eEMsRUFBUWt4QyxFQUFJcEwsS0FBTSxTQUFTN0ksRUFBWXB2QixHQUNyQ2hHLEVBQUs2a0UsUUFBUXp2QyxFQUFXQSxlQUFZbDNCLE9BQVdBLEdBQVcsU0FBU3lyQyxHQUFRSyxFQUFRTCxJQUMvRTNqQyxJQUFRcWpDLEVBQUlwTCxLQUFLem1DLE9BQVMsRUFDNUJ3SSxFQUFLazBCLFVBQVUrSixLQUFLdGdDLEtBQUtxc0MsRUFBTyxLQUVoQ2hxQyxFQUFLOGtFLFFBQVE5NkIsSUFHakIsTUFDRixLQUFLckIsSUFBSWlCLFFBQ1B4VSxFQUFhM3NCLEtBQUtpM0IsT0FBTzJKLEVBQUlwd0MsT0FDN0J3UCxLQUFLbXBCLE9BQU9xekMsRUFBUTd2QyxHQUNwQnV3QyxFQUFZVixHQUFVN3ZDLEVBQ3RCLE1BQ0YsS0FBS3VULElBQUlHLGdCQUNQcmdDLEtBQUtvOEQsUUFBUXg3QixFQUFJUyxhQUFVNXJDLE9BQVdBLEdBQVcsU0FBU3lyQyxHQUFRSyxFQUFRTCxJQUMxRXZVLEVBQWFpVSxFQUFJSixTQUFXLElBQU14Z0MsS0FBSzAvQixVQUFVNkIsRUFBTyxHQUFLLElBQzdEdmhDLEtBQUttcEIsT0FBT3F6QyxFQUFRN3ZDLEdBQ3BCdXdDLEVBQVl2d0MsRUFDWixNQUNGLEtBQUt1VCxJQUFJSyxpQkFDUHZnQyxLQUFLbzhELFFBQVF4N0IsRUFBSVUsU0FBTTdyQyxPQUFXQSxHQUFXLFNBQVN5ckMsR0FBUUksRUFBT0osSUFDckVsaEMsS0FBS284RCxRQUFReDdCLEVBQUlXLFVBQU85ckMsT0FBV0EsR0FBVyxTQUFTeXJDLEdBQVFLLEVBQVFMLElBRXJFdlUsRUFEbUIsTUFBakJpVSxFQUFJSixTQUNPeGdDLEtBQUt3OUQsS0FBS2w4QixFQUFNQyxHQUNILE1BQWpCWCxFQUFJSixTQUNBeGdDLEtBQUswL0IsVUFBVTRCLEVBQU0sR0FBS1YsRUFBSUosU0FBV3hnQyxLQUFLMC9CLFVBQVU2QixFQUFPLEdBRS9ELElBQU1ELEVBQU8sSUFBTVYsRUFBSUosU0FBVyxJQUFNZSxFQUFRLElBRS9EdmhDLEtBQUttcEIsT0FBT3F6QyxFQUFRN3ZDLEdBQ3BCdXdDLEVBQVl2d0MsRUFDWixNQUNGLEtBQUt1VCxJQUFJc0Isa0JBQ1BnN0IsRUFBU0EsR0FBVXg4RCxLQUFLODdELFNBQ3hCdmtFLEVBQUs2a0UsUUFBUXg3QixFQUFJVSxLQUFNazdCLEdBQ3ZCamxFLEVBQUs2bEUsSUFBcUIsT0FBakJ4OEIsRUFBSUosU0FBb0JnOEIsRUFBU2psRSxFQUFLa21FLElBQUlqQixHQUFTamxFLEVBQUtnbUUsWUFBWTM4QixFQUFJVyxNQUFPaTdCLElBQ3hGVSxFQUFZVixFQUNaLE1BQ0YsS0FBS3Q4QixJQUFJdUIsc0JBQ1ArNkIsRUFBU0EsR0FBVXg4RCxLQUFLODdELFNBQ3hCdmtFLEVBQUs2a0UsUUFBUXg3QixFQUFJaHRDLEtBQU00b0UsR0FDdkJqbEUsRUFBSzZsRSxJQUFJWixFQUFRamxFLEVBQUtnbUUsWUFBWTM4QixFQUFJYyxVQUFXODZCLEdBQVNqbEUsRUFBS2dtRSxZQUFZMzhCLEVBQUllLFdBQVk2NkIsSUFDM0ZVLEVBQVlWLEVBQ1osTUFDRixLQUFLdDhCLElBQUkwQixXQUNQNDZCLEVBQVNBLEdBQVV4OEQsS0FBSzg3RCxTQUNwQm1CLElBQ0ZBLEVBQU9ydEUsUUFBeUIsV0FBZjJILEVBQUsya0UsTUFBcUIsSUFBTWw4RCxLQUFLbXBCLE9BQU9ucEIsS0FBSzg3RCxTQUFVOTdELEtBQUswOUQsa0JBQWtCLElBQUs5OEIsRUFBSTNsQyxNQUFRLFFBQ3BIZ2lFLEVBQU83OEIsVUFBVyxFQUNsQjY4QixFQUFPaGlFLEtBQU8ybEMsRUFBSTNsQyxNQUVwQjFELEVBQUs2bEUsSUFBbUIsV0FBZjdsRSxFQUFLMmtFLE9BQXNCM2tFLEVBQUtrbUUsSUFBSWxtRSxFQUFLbW1FLGtCQUFrQixJQUFLOThCLEVBQUkzbEMsT0FDM0UsV0FDRTFELEVBQUs2bEUsSUFBbUIsV0FBZjdsRSxFQUFLMmtFLE9BQXNCLElBQUssV0FDbkMzcEUsR0FBcUIsSUFBWEEsR0FDWmdGLEVBQUs2bEUsSUFDSDdsRSxFQUFLb21FLE9BQU9wbUUsRUFBS3FtRSxrQkFBa0IsSUFBS2g5QixFQUFJM2xDLE9BQzVDMUQsRUFBSzhsRSxXQUFXOWxFLEVBQUtxbUUsa0JBQWtCLElBQUtoOUIsRUFBSTNsQyxNQUFPLE9BRTNEMUQsRUFBSzR4QixPQUFPcXpDLEVBQVFqbEUsRUFBS3FtRSxrQkFBa0IsSUFBS2g5QixFQUFJM2xDLFVBRXJEdWhFLEdBQVVqbEUsRUFBSzhsRSxXQUFXYixFQUFRamxFLEVBQUtxbUUsa0JBQWtCLElBQUtoOUIsRUFBSTNsQyxRQUV2RWlpRSxFQUFZVixFQUNaLE1BQ0YsS0FBS3Q4QixJQUFJQyxpQkFDUG1CLEVBQU8yN0IsSUFBV0EsRUFBT3J0RSxRQUFVb1EsS0FBSzg3RCxXQUFhOTdELEtBQUs4N0QsU0FDMURVLEVBQVNBLEdBQVV4OEQsS0FBSzg3RCxTQUN4QnZrRSxFQUFLNmtFLFFBQVF4N0IsRUFBSWlCLE9BQVFQLE1BQU03ckMsR0FBVyxXQUN4QzhCLEVBQUs2bEUsSUFBSTdsRSxFQUFLc21FLFFBQVF2OEIsR0FBTyxXQUN2QlYsRUFBSVIsVUFDTm1CLEVBQVFocUMsRUFBS3VrRSxTQUNidmtFLEVBQUs2a0UsUUFBUXg3QixFQUFJcmMsU0FBVWdkLEdBQzNCaHFDLEVBQUtrb0MsZUFBZThCLEdBQ2hCaHZDLEdBQXFCLElBQVhBLEdBQ1pnRixFQUFLNmxFLElBQUk3bEUsRUFBS2ttRSxJQUFJbG1FLEVBQUsrbEUsZUFBZWg4QixFQUFNQyxJQUFTaHFDLEVBQUs4bEUsV0FBVzlsRSxFQUFLK2xFLGVBQWVoOEIsRUFBTUMsR0FBUSxPQUV6RzVVLEVBQWFwMUIsRUFBSytsRSxlQUFlaDhCLEVBQU1DLEdBQ3ZDaHFDLEVBQUs0eEIsT0FBT3F6QyxFQUFRN3ZDLEdBQ2hCc3dDLElBQ0ZBLEVBQU83OEIsVUFBVyxFQUNsQjY4QixFQUFPaGlFLEtBQU9zbUMsS0FHWmh2QyxHQUFxQixJQUFYQSxHQUNaZ0YsRUFBSzZsRSxJQUFJN2xFLEVBQUtvbUUsT0FBT3BtRSxFQUFLcW1FLGtCQUFrQnQ4QixFQUFNVixFQUFJcmMsU0FBU3RwQixPQUFRMUQsRUFBSzhsRSxXQUFXOWxFLEVBQUtxbUUsa0JBQWtCdDhCLEVBQU1WLEVBQUlyYyxTQUFTdHBCLE1BQU8sT0FFMUkweEIsRUFBYXAxQixFQUFLcW1FLGtCQUFrQnQ4QixFQUFNVixFQUFJcmMsU0FBU3RwQixNQUN2RDFELEVBQUs0eEIsT0FBT3F6QyxFQUFRN3ZDLEdBQ2hCc3dDLElBQ0ZBLEVBQU83OEIsVUFBVyxFQUNsQjY4QixFQUFPaGlFLEtBQU8ybEMsRUFBSXJjLFNBQVN0cEIsUUFHOUIsV0FDRDFELEVBQUs0eEIsT0FBT3F6QyxFQUFRLGVBRXRCVSxFQUFZVixNQUNUanFFLEVBQ0wsTUFDRixLQUFLMnRDLElBQUlPLGVBQ1ArN0IsRUFBU0EsR0FBVXg4RCxLQUFLODdELFNBQ3BCbDdCLEVBQUl2Z0MsUUFDTmtoQyxFQUFRaHFDLEVBQUs4SSxPQUFPdWdDLEVBQUlrQixPQUFPN21DLE1BQy9CN0QsS0FDQTFILEVBQVFreEMsRUFBSXp5QyxVQUFXLFNBQVMreUMsR0FDOUIsR0FBSUcsR0FBVzlwQyxFQUFLdWtFLFFBQ3BCdmtFLEdBQUs2a0UsUUFBUWw3QixFQUFNRyxHQUNuQmpxQyxFQUFLbEMsS0FBS21zQyxLQUVaMVUsRUFBYTRVLEVBQVEsSUFBTW5xQyxFQUFLa0QsS0FBSyxLQUFPLElBQzVDL0MsRUFBSzR4QixPQUFPcXpDLEVBQVE3dkMsR0FDcEJ1d0MsRUFBWVYsS0FFWmo3QixFQUFRaHFDLEVBQUt1a0UsU0FDYng2QixLQUNBbHFDLEtBQ0FHLEVBQUs2a0UsUUFBUXg3QixFQUFJa0IsT0FBUVAsRUFBT0QsRUFBTSxXQUNwQy9wQyxFQUFLNmxFLElBQUk3bEUsRUFBS3NtRSxRQUFRdDhCLEdBQVEsV0FDNUI3eEMsRUFBUWt4QyxFQUFJenlDLFVBQVcsU0FBUyt5QyxHQUM5QjNwQyxFQUFLNmtFLFFBQVFsN0IsRUFBTU4sRUFBSTFnQyxhQUFXekssR0FBWThCLEVBQUt1a0UsYUFBVXJtRSxHQUFXLFNBQVM0ckMsR0FDL0VqcUMsRUFBS2xDLEtBQUttc0MsT0FJWjFVLEVBREUyVSxFQUFLcm1DLEtBQ00xRCxFQUFLdW1FLE9BQU94OEIsRUFBSzF4QyxRQUFTMHhDLEVBQUtybUMsS0FBTXFtQyxFQUFLbEIsVUFBWSxJQUFNaHBDLEVBQUtrRCxLQUFLLEtBQU8sSUFFN0VpbkMsRUFBUSxJQUFNbnFDLEVBQUtrRCxLQUFLLEtBQU8sSUFFOUMvQyxFQUFLNHhCLE9BQU9xekMsRUFBUTd2QyxJQUNuQixXQUNEcDFCLEVBQUs0eEIsT0FBT3F6QyxFQUFRLGVBRXRCVSxFQUFZVixLQUdoQixNQUNGLEtBQUt0OEIsSUFBSTZCLHFCQUNQUixFQUFRdmhDLEtBQUs4N0QsU0FDYng2QixLQUNBdGhDLEtBQUtvOEQsUUFBUXg3QixFQUFJVSxTQUFNN3JDLEdBQVc2ckMsRUFBTSxXQUN0Qy9wQyxFQUFLNmxFLElBQUk3bEUsRUFBS3NtRSxRQUFRdjhCLEVBQUsxeEMsU0FBVSxXQUNuQzJILEVBQUs2a0UsUUFBUXg3QixFQUFJVyxNQUFPQSxHQUN4QjVVLEVBQWFwMUIsRUFBS3VtRSxPQUFPeDhCLEVBQUsxeEMsUUFBUzB4QyxFQUFLcm1DLEtBQU1xbUMsRUFBS2xCLFVBQVlRLEVBQUlKLFNBQVdlLEVBQ2xGaHFDLEVBQUs0eEIsT0FBT3F6QyxFQUFRN3ZDLEdBQ3BCdXdDLEVBQVlWLEdBQVU3dkMsTUFFdkIsRUFDSCxNQUNGLEtBQUt1VCxJQUFJOEIsZ0JBQ1A1cUMsS0FDQTFILEVBQVFreEMsRUFBSTk2QixTQUFVLFNBQVNvN0IsR0FDN0IzcEMsRUFBSzZrRSxRQUFRbDdCLEVBQU1OLEVBQUkxZ0MsYUFBV3pLLEdBQVk4QixFQUFLdWtFLGFBQVVybUUsR0FBVyxTQUFTNHJDLEdBQy9FanFDLEVBQUtsQyxLQUFLbXNDLE9BR2QxVSxFQUFhLElBQU12MUIsRUFBS2tELEtBQUssS0FBTyxJQUNwQzBGLEtBQUttcEIsT0FBT3F6QyxFQUFRN3ZDLEdBQ3BCdXdDLEVBQVlWLEdBQVU3dkMsRUFDdEIsTUFDRixLQUFLdVQsSUFBSStCLGlCQUNQN3FDLEtBQ0FncEMsR0FBVyxFQUNYMXdDLEVBQVFreEMsRUFBSXNCLFdBQVksU0FBUzNkLEdBQzNCQSxFQUFTNmIsV0FDWEEsR0FBVyxLQUdYQSxHQUNGbzhCLEVBQVNBLEdBQVV4OEQsS0FBSzg3RCxTQUN4Qjk3RCxLQUFLbXBCLE9BQU9xekMsRUFBUSxNQUNwQjlzRSxFQUFRa3hDLEVBQUlzQixXQUFZLFNBQVMzZCxHQUMzQkEsRUFBUzZiLFVBQ1hrQixFQUFPL3BDLEVBQUt1a0UsU0FDWnZrRSxFQUFLNmtFLFFBQVE3M0MsRUFBUzEwQixJQUFLeXhDLElBRTNCQSxFQUFPL2MsRUFBUzEwQixJQUFJdUcsT0FBUzhwQyxHQUFJMEIsV0FDdEJyZCxFQUFTMTBCLElBQUlvTCxLQUNaLEdBQUtzcEIsRUFBUzEwQixJQUFJVyxNQUVoQyt3QyxFQUFRaHFDLEVBQUt1a0UsU0FDYnZrRSxFQUFLNmtFLFFBQVE3M0MsRUFBUy96QixNQUFPK3dDLEdBQzdCaHFDLEVBQUs0eEIsT0FBTzV4QixFQUFLdW1FLE9BQU90QixFQUFRbDdCLEVBQU0vYyxFQUFTNmIsVUFBV21CLE9BRzVEN3hDLEVBQVFreEMsRUFBSXNCLFdBQVksU0FBUzNkLEdBQy9CaHRCLEVBQUs2a0UsUUFBUTczQyxFQUFTL3pCLE1BQU9vd0MsRUFBSTFnQyxhQUFXekssR0FBWThCLEVBQUt1a0UsYUFBVXJtRSxHQUFXLFNBQVN5ckMsR0FDekY5cEMsRUFBS2xDLEtBQUtxQyxFQUFLMC9CLE9BQ1gxUyxFQUFTMTBCLElBQUl1RyxPQUFTOHBDLEdBQUkwQixXQUFhcmQsRUFBUzEwQixJQUFJb0wsS0FDakQsR0FBS3NwQixFQUFTMTBCLElBQUlXLE9BQ3JCLElBQU0wd0MsT0FHZHZVLEVBQWEsSUFBTXYxQixFQUFLa0QsS0FBSyxLQUFPLElBQ3BDMEYsS0FBS21wQixPQUFPcXpDLEVBQVE3dkMsSUFFdEJ1d0MsRUFBWVYsR0FBVTd2QyxFQUN0QixNQUNGLEtBQUt1VCxJQUFJaUMsZUFDUG5pQyxLQUFLbXBCLE9BQU9xekMsRUFBUSxLQUNwQlUsRUFBWVYsR0FBVSxJQUN0QixNQUNGLEtBQUt0OEIsSUFBSWtDLGlCQUNQcGlDLEtBQUttcEIsT0FBT3F6QyxFQUFRLEtBQ3BCVSxFQUFZVixHQUFVLElBQ3RCLE1BQ0YsS0FBS3Q4QixJQUFJdUMsaUJBQ1B6aUMsS0FBS21wQixPQUFPcXpDLEVBQVEsS0FDcEJVLEVBQVlWLEdBQVUsT0FLMUJrQixrQkFBbUIsU0FBU3BwRSxFQUFTaXdCLEdBQ25DLEdBQUkxMEIsR0FBTXlFLEVBQVUsSUFBTWl3QixFQUN0QnkzQyxFQUFNaDhELEtBQUt5ckIsVUFBVXV3QyxHQUl6QixPQUhLQSxHQUFJanNFLGVBQWVGLEtBQ3RCbXNFLEVBQUluc0UsR0FBT21RLEtBQUs4N0QsUUFBTyxFQUFPeG5FLEVBQVUsTUFBUTBMLEtBQUtpM0IsT0FBTzFTLEdBQVksT0FBU2p3QixFQUFVLE1BRXRGMG5FLEVBQUluc0UsSUFHYnM1QixPQUFRLFNBQVN0VixFQUFJcmpCLEdBQ25CLEdBQUtxakIsRUFFTCxNQURBN1QsTUFBS3lyQixVQUFVK0osS0FBS3RnQyxLQUFLMmUsRUFBSSxJQUFLcmpCLEVBQU8sS0FDbENxakIsR0FHVHhULE9BQVEsU0FBUzAvQixHQUlmLE1BSEsvL0IsTUFBSzZSLE1BQU13akMsUUFBUXRsRCxlQUFlZ3dDLEtBQ3JDLy9CLEtBQUs2UixNQUFNd2pDLFFBQVF0VixHQUFjLy9CLEtBQUs4N0QsUUFBTyxJQUV4Qzk3RCxLQUFLNlIsTUFBTXdqQyxRQUFRdFYsSUFHNUJMLFVBQVcsU0FBUzdyQixFQUFJa3FELEdBQ3RCLE1BQU8sYUFBZWxxRCxFQUFLLElBQU03VCxLQUFLaTNCLE9BQU84bUMsR0FBZ0IsS0FHL0RQLEtBQU0sU0FBU2w4QixFQUFNQyxHQUNuQixNQUFPLFFBQVVELEVBQU8sSUFBTUMsRUFBUSxLQUd4Qzg2QixRQUFTLFNBQVN4b0QsR0FDaEI3VCxLQUFLeXJCLFVBQVUrSixLQUFLdGdDLEtBQUssVUFBVzJlLEVBQUksTUFHMUN1cEQsSUFBSyxTQUFTeHBFLEVBQU04dEMsRUFBV0MsR0FDN0IsSUFBYSxJQUFUL3RDLEVBQ0Y4dEMsUUFDSyxDQUNMLEdBQUlsTSxHQUFPeDFCLEtBQUt5ckIsVUFBVStKLElBQzFCQSxHQUFLdGdDLEtBQUssTUFBT3RCLEVBQU0sTUFDdkI4dEMsSUFDQWxNLEVBQUt0Z0MsS0FBSyxLQUNOeXNDLElBQ0ZuTSxFQUFLdGdDLEtBQUssU0FDVnlzQyxJQUNBbk0sRUFBS3RnQyxLQUFLLFFBS2hCdW9FLElBQUssU0FBUzl3QyxHQUNaLE1BQU8sS0FBT0EsRUFBYSxLQUc3Qmd4QyxPQUFRLFNBQVNoeEMsR0FDZixNQUFPQSxHQUFhLFVBR3RCa3hDLFFBQVMsU0FBU2x4QyxHQUNoQixNQUFPQSxHQUFhLFVBR3RCaXhDLGtCQUFtQixTQUFTdDhCLEVBQU1DLEdBQ2hDLEdBQUl5OEIsR0FBa0IsNkJBQ2xCQyxFQUFvQixpQkFDeEIsT0FBSUQsR0FBZ0JwcUUsS0FBSzJ0QyxHQUNoQkQsRUFBTyxJQUFNQyxFQUViRCxFQUFRLEtBQU9DLEVBQU01eUMsUUFBUXN2RSxFQUFtQmorRCxLQUFLaytELGdCQUFrQixNQUlsRlosZUFBZ0IsU0FBU2g4QixFQUFNQyxHQUM3QixNQUFPRCxHQUFPLElBQU1DLEVBQVEsS0FHOUJ1OEIsT0FBUSxTQUFTeDhCLEVBQU1DLEVBQU9uQixHQUM1QixNQUFJQSxHQUFpQnBnQyxLQUFLczlELGVBQWVoOEIsRUFBTUMsR0FDeEN2aEMsS0FBSzQ5RCxrQkFBa0J0OEIsRUFBTUMsSUFHdEM5QixlQUFnQixTQUFTaHdDLEdBQ3ZCdVEsS0FBS21wQixPQUFPMTVCLEVBQU0sa0JBQW9CQSxFQUFPLE1BRy9DOHRFLFlBQWEsU0FBUzM4QixFQUFLNDdCLEVBQVFTLEVBQVFDLEVBQWEzcUUsRUFBUTRxRSxHQUM5RCxHQUFJNWxFLEdBQU95SSxJQUNYLE9BQU8sWUFDTHpJLEVBQUs2a0UsUUFBUXg3QixFQUFLNDdCLEVBQVFTLEVBQVFDLEVBQWEzcUUsRUFBUTRxRSxLQUkzREUsV0FBWSxTQUFTeHBELEVBQUlyakIsR0FDdkIsR0FBSStHLEdBQU95SSxJQUNYLE9BQU8sWUFDTHpJLEVBQUs0eEIsT0FBT3RWLEVBQUlyakIsS0FJcEIydEUsa0JBQW1CLGlCQUVuQkQsZUFBZ0IsU0FBU0UsR0FDdkIsTUFBTyxPQUFTLE9BQVNBLEVBQUVyUixXQUFXLEdBQUdsNkQsU0FBUyxLQUFLL0QsT0FBTyxJQUdoRW1vQyxPQUFRLFNBQVN6bUMsR0FDZixHQUFJbkIsRUFBU21CLEdBQVEsTUFBTyxJQUFPQSxFQUFNN0IsUUFBUXFSLEtBQUttK0Qsa0JBQW1CbitELEtBQUtrK0QsZ0JBQWtCLEdBQ2hHLElBQUl2d0UsRUFBUzZDLEdBQVEsTUFBT0EsR0FBTXFDLFVBQ2xDLEtBQWMsSUFBVnJDLEVBQWdCLE1BQU8sTUFDM0IsS0FBYyxJQUFWQSxFQUFpQixNQUFPLE9BQzVCLElBQWMsT0FBVkEsRUFBZ0IsTUFBTyxNQUMzQixRQUFxQixLQUFWQSxFQUF1QixNQUFPLFdBRXpDLE1BQU1zbkUsSUFBYSxNQUFPLGVBRzVCZ0UsT0FBUSxTQUFTdUMsRUFBTUMsR0FDckIsR0FBSXpxRCxHQUFLLElBQU83VCxLQUFLNlIsTUFBTWlxRCxRQUkzQixPQUhLdUMsSUFDSHIrRCxLQUFLeXJCLFVBQVVzd0MsS0FBSzdtRSxLQUFLMmUsR0FBTXlxRCxFQUFPLElBQU1BLEVBQU8sS0FFOUN6cUQsR0FHVDRYLFFBQVMsV0FDUCxNQUFPenJCLE1BQUs2UixNQUFNN1IsS0FBSzZSLE1BQU1zcUQsYUFTakN0NUIsR0FBZW51QyxXQUNiMEgsUUFBUyxTQUFTd2tDLEdBQ2hCLEdBQUlycEMsR0FBT3lJLElBQ1gyZ0MsSUFBZ0NDLEVBQUtycEMsRUFBS3VvQyxRQUMxQyxJQUFJbThCLEdBQ0E5eUMsR0FDQzh5QyxFQUFhejVCLEdBQWM1QixNQUM5QnpYLEVBQVNucEIsS0FBS284RCxRQUFRSCxHQUV4QixJQUNJeDNCLEdBREFyRCxFQUFVaUIsR0FBVXpCLEVBQUlwTCxLQUV4QjRMLEtBQ0ZxRCxLQUNBLzBDLEVBQVEweEMsRUFBUyxTQUFTbU0sRUFBTzE5QyxHQUMvQixHQUFJc3RELEdBQVE1bEQsRUFBSzZrRSxRQUFRN3VCLEVBQ3pCNFAsR0FBTW5kLE9BQVN1TixFQUFNdk4sT0FDckJ1TixFQUFNNFAsTUFBUUEsRUFDZDFZLEVBQU92dkMsS0FBS2lvRCxHQUNaNVAsRUFBTWt2QixRQUFVNXNFLElBR3BCLElBQUlnM0IsS0FDSm4zQixHQUFRa3hDLEVBQUlwTCxLQUFNLFNBQVM3SSxHQUN6QjlGLEVBQVkzeEIsS0FBS3FDLEVBQUs2a0UsUUFBUXp2QyxFQUFXQSxjQUUzQyxJQUFJbjFCLEdBQXlCLElBQXBCb3BDLEVBQUlwTCxLQUFLem1DLE9BQWV5RCxFQUNKLElBQXBCb3VDLEVBQUlwTCxLQUFLem1DLE9BQWU4M0IsRUFBWSxHQUNwQyxTQUFTMXFCLEVBQU8yUSxHQUNkLEdBQUk2YixFQUlKLE9BSEFqNUIsR0FBUW0zQixFQUFhLFNBQVNpUixHQUM1Qm5QLEVBQVltUCxFQUFJMzdCLEVBQU8yUSxLQUVsQjZiLEVBVWxCLE9BUklRLEtBQ0YzeEIsRUFBRzJ4QixPQUFTLFNBQVNodEIsRUFBTzNMLEVBQU9zYyxHQUNqQyxNQUFPcWMsR0FBT2h0QixFQUFPMlEsRUFBUXRjLEtBRzdCaTBDLElBQ0ZqdEMsRUFBR2l0QyxPQUFTQSxHQUVQanRDLEdBR1Q0a0UsUUFBUyxTQUFTeDdCLEVBQUtoeEMsRUFBUzJDLEdBQzlCLEdBQUkrdUMsR0FBTUMsRUFBb0JucUMsRUFBYkcsRUFBT3lJLElBQ3hCLElBQUk0Z0MsRUFBSXVjLE1BQ04sTUFBT245QyxNQUFLeWtDLE9BQU83RCxFQUFJdWMsTUFBT3ZjLEVBQUk2N0IsUUFFcEMsUUFBUTc3QixFQUFJeHFDLE1BQ1osSUFBSzhwQyxJQUFJaUIsUUFDUCxNQUFPbmhDLE1BQUt4UCxNQUFNb3dDLEVBQUlwd0MsTUFBT1osRUFDL0IsS0FBS3N3QyxJQUFJRyxnQkFFUCxNQURBa0IsR0FBUXZoQyxLQUFLbzhELFFBQVF4N0IsRUFBSVMsVUFDbEJyaEMsS0FBSyxRQUFVNGdDLEVBQUlKLFVBQVVlLEVBQU8zeEMsRUFDN0MsS0FBS3N3QyxJQUFJSyxpQkFJVCxJQUFLTCxJQUFJc0Isa0JBR1AsTUFGQUYsR0FBT3RoQyxLQUFLbzhELFFBQVF4N0IsRUFBSVUsTUFDeEJDLEVBQVF2aEMsS0FBS284RCxRQUFReDdCLEVBQUlXLE9BQ2xCdmhDLEtBQUssU0FBVzRnQyxFQUFJSixVQUFVYyxFQUFNQyxFQUFPM3hDLEVBQ3BELEtBQUtzd0MsSUFBSXVCLHNCQUNQLE1BQU96aEMsTUFBSyxhQUNWQSxLQUFLbzhELFFBQVF4N0IsRUFBSWh0QyxNQUNqQm9NLEtBQUtvOEQsUUFBUXg3QixFQUFJYyxXQUNqQjFoQyxLQUFLbzhELFFBQVF4N0IsRUFBSWUsWUFDakIveEMsRUFFSixLQUFLc3dDLElBQUkwQixXQUNQLE1BQU9ycUMsR0FBS20xQixXQUFXa1UsRUFBSTNsQyxLQUFNckwsRUFBUzJDLEVBQzVDLEtBQUsydEMsSUFBSUMsaUJBTVAsTUFMQW1CLEdBQU90aEMsS0FBS284RCxRQUFReDdCLEVBQUlpQixRQUFRLElBQVN0dkMsR0FDcENxdUMsRUFBSVIsV0FDUG1CLEVBQVFYLEVBQUlyYyxTQUFTdHBCLE1BRW5CMmxDLEVBQUlSLFdBQVVtQixFQUFRdmhDLEtBQUtvOEQsUUFBUXg3QixFQUFJcmMsV0FDcENxYyxFQUFJUixTQUNUcGdDLEtBQUtzOUQsZUFBZWg4QixFQUFNQyxFQUFPM3hDLEVBQVMyQyxHQUMxQ3lOLEtBQUs0OUQsa0JBQWtCdDhCLEVBQU1DLEVBQU8zeEMsRUFBUzJDLEVBQ2pELEtBQUsydEMsSUFBSU8sZUFPUCxNQU5BcnBDLE1BQ0ExSCxFQUFRa3hDLEVBQUl6eUMsVUFBVyxTQUFTK3lDLEdBQzlCOXBDLEVBQUtsQyxLQUFLcUMsRUFBSzZrRSxRQUFRbDdCLE1BRXJCTixFQUFJdmdDLFNBQVFraEMsRUFBUXZoQyxLQUFLOC9CLFFBQVFjLEVBQUlrQixPQUFPN21DLE9BQzNDMmxDLEVBQUl2Z0MsU0FBUWtoQyxFQUFRdmhDLEtBQUtvOEQsUUFBUXg3QixFQUFJa0IsUUFBUSxJQUMzQ2xCLEVBQUl2Z0MsT0FDVCxTQUFTbEUsRUFBTzJRLEVBQVFxYyxFQUFRc2IsR0FFOUIsSUFBSyxHQURENVksTUFDSzU5QixFQUFJLEVBQUdBLEVBQUltSixFQUFLckksU0FBVWQsRUFDakM0OUIsRUFBTzMyQixLQUFLa0MsRUFBS25KLEdBQUdrTyxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUU3QyxJQUFJajBDLEdBQVErd0MsRUFBTTdwQyxVQUFNakMsR0FBV28yQixFQUFRNFksRUFDM0MsT0FBTzcwQyxJQUFXQSxZQUFTNkYsR0FBV3dGLFNBQU14RixHQUFXakYsTUFBT0EsR0FBU0EsR0FFekUsU0FBUzJMLEVBQU8yUSxFQUFRcWMsRUFBUXNiLEdBQzlCLEdBQ0lqMEMsR0FEQSt0RSxFQUFNaDlCLEVBQU1wbEMsRUFBTzJRLEVBQVFxYyxFQUFRc2IsRUFFdkMsSUFBaUIsTUFBYjg1QixFQUFJL3RFLE1BQWUsQ0FFckIsSUFBSyxHQUREcTdCLE1BQ0s1OUIsRUFBSSxFQUFHQSxFQUFJbUosRUFBS3JJLFNBQVVkLEVBQ2pDNDlCLEVBQU8zMkIsS0FBS2tDLEVBQUtuSixHQUFHa08sRUFBTzJRLEVBQVFxYyxFQUFRc2IsR0FFN0NqMEMsR0FBUSt0RSxFQUFJL3RFLE1BQU1rSCxNQUFNNm1FLEVBQUkzdUUsUUFBU2k4QixHQUV2QyxNQUFPajhCLElBQVdZLE1BQU9BLEdBQVNBLEVBRXhDLEtBQUswdkMsSUFBSTZCLHFCQUdQLE1BRkFULEdBQU90aEMsS0FBS284RCxRQUFReDdCLEVBQUlVLE1BQU0sRUFBTSxHQUNwQ0MsRUFBUXZoQyxLQUFLbzhELFFBQVF4N0IsRUFBSVcsT0FDbEIsU0FBU3BsQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNyQyxHQUFJKzVCLEdBQU1sOUIsRUFBS25sQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNsQzg1QixFQUFNaDlCLEVBQU1wbEMsRUFBTzJRLEVBQVFxYyxFQUFRc2IsRUFFdkMsT0FEQSs1QixHQUFJNXVFLFFBQVE0dUUsRUFBSXZqRSxNQUFRc2pFLEVBQ2pCM3VFLEdBQVdZLE1BQU8rdEUsR0FBT0EsRUFFcEMsS0FBS3IrQixJQUFJOEIsZ0JBS1AsTUFKQTVxQyxNQUNBMUgsRUFBUWt4QyxFQUFJOTZCLFNBQVUsU0FBU283QixHQUM3QjlwQyxFQUFLbEMsS0FBS3FDLEVBQUs2a0UsUUFBUWw3QixNQUVsQixTQUFTL2tDLEVBQU8yUSxFQUFRcWMsRUFBUXNiLEdBRXJDLElBQUssR0FERGowQyxNQUNLdkMsRUFBSSxFQUFHQSxFQUFJbUosRUFBS3JJLFNBQVVkLEVBQ2pDdUMsRUFBTTBFLEtBQUtrQyxFQUFLbkosR0FBR2tPLEVBQU8yUSxFQUFRcWMsRUFBUXNiLEdBRTVDLE9BQU83MEMsSUFBV1ksTUFBT0EsR0FBU0EsRUFFdEMsS0FBSzB2QyxJQUFJK0IsaUJBaUJQLE1BaEJBN3FDLE1BQ0ExSCxFQUFRa3hDLEVBQUlzQixXQUFZLFNBQVMzZCxHQUMzQkEsRUFBUzZiLFNBQ1hocEMsRUFBS2xDLE1BQU1yRixJQUFLMEgsRUFBSzZrRSxRQUFRNzNDLEVBQVMxMEIsS0FDM0J1d0MsVUFBVSxFQUNWNXZDLE1BQU8rRyxFQUFLNmtFLFFBQVE3M0MsRUFBUy96QixTQUd4QzRHLEVBQUtsQyxNQUFNckYsSUFBSzAwQixFQUFTMTBCLElBQUl1RyxPQUFTOHBDLEdBQUkwQixXQUMxQnJkLEVBQVMxMEIsSUFBSW9MLEtBQ1osR0FBS3NwQixFQUFTMTBCLElBQUlXLE1BQ3hCNHZDLFVBQVUsRUFDVjV2QyxNQUFPK0csRUFBSzZrRSxRQUFRNzNDLEVBQVMvekIsV0FJckMsU0FBUzJMLEVBQU8yUSxFQUFRcWMsRUFBUXNiLEdBRXJDLElBQUssR0FERGowQyxNQUNLdkMsRUFBSSxFQUFHQSxFQUFJbUosRUFBS3JJLFNBQVVkLEVBQzdCbUosRUFBS25KLEdBQUdteUMsU0FDVjV2QyxFQUFNNEcsRUFBS25KLEdBQUc0QixJQUFJc00sRUFBTzJRLEVBQVFxYyxFQUFRc2IsSUFBV3J0QyxFQUFLbkosR0FBR3VDLE1BQU0yTCxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUV6RmowQyxFQUFNNEcsRUFBS25KLEdBQUc0QixLQUFPdUgsRUFBS25KLEdBQUd1QyxNQUFNMkwsRUFBTzJRLEVBQVFxYyxFQUFRc2IsRUFHOUQsT0FBTzcwQyxJQUFXWSxNQUFPQSxHQUFTQSxFQUV0QyxLQUFLMHZDLElBQUlpQyxlQUNQLE1BQU8sVUFBU2htQyxHQUNkLE1BQU92TSxJQUFXWSxNQUFPMkwsR0FBU0EsRUFFdEMsS0FBSytqQyxJQUFJa0MsaUJBQ1AsTUFBTyxVQUFTam1DLEVBQU8yUSxHQUNyQixNQUFPbGQsSUFBV1ksTUFBT3NjLEdBQVVBLEVBRXZDLEtBQUtvekIsSUFBSXVDLGlCQUNQLE1BQU8sVUFBU3RtQyxFQUFPMlEsRUFBUXFjLEdBQzdCLE1BQU92NUIsSUFBV1ksTUFBTzI0QixHQUFVQSxLQUt6Q3MxQyxTQUFVLFNBQVNwOUIsRUFBVXp4QyxHQUMzQixNQUFPLFVBQVN1TSxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNyQyxHQUFJaDJDLEdBQU00eUMsRUFBU2xsQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixFQU0xQyxPQUpFaDJDLEdBREVuQixFQUFVbUIsSUFDTEEsRUFFRCxFQUVEbUIsR0FBV1ksTUFBTy9CLEdBQU9BLElBR3BDaXdFLFNBQVUsU0FBU3I5QixFQUFVenhDLEdBQzNCLE1BQU8sVUFBU3VNLEVBQU8yUSxFQUFRcWMsRUFBUXNiLEdBQ3JDLEdBQUloMkMsR0FBTTR5QyxFQUFTbGxDLEVBQU8yUSxFQUFRcWMsRUFBUXNiLEVBTTFDLE9BSkVoMkMsR0FERW5CLEVBQVVtQixJQUNMQSxHQUVBLEVBRUZtQixHQUFXWSxNQUFPL0IsR0FBT0EsSUFHcENrd0UsU0FBVSxTQUFTdDlCLEVBQVV6eEMsR0FDM0IsTUFBTyxVQUFTdU0sRUFBTzJRLEVBQVFxYyxFQUFRc2IsR0FDckMsR0FBSWgyQyxJQUFPNHlDLEVBQVNsbEMsRUFBTzJRLEVBQVFxYyxFQUFRc2IsRUFDM0MsT0FBTzcwQyxJQUFXWSxNQUFPL0IsR0FBT0EsSUFHcENtd0UsVUFBVyxTQUFTdDlCLEVBQU1DLEVBQU8zeEMsR0FDL0IsTUFBTyxVQUFTdU0sRUFBTzJRLEVBQVFxYyxFQUFRc2IsR0FDckMsR0FBSSs1QixHQUFNbDlCLEVBQUtubEMsRUFBTzJRLEVBQVFxYyxFQUFRc2IsR0FDbEM4NUIsRUFBTWg5QixFQUFNcGxDLEVBQU8yUSxFQUFRcWMsRUFBUXNiLEdBQ25DaDJDLEVBQU1reEMsR0FBTzYrQixFQUFLRCxFQUN0QixPQUFPM3VFLElBQVdZLE1BQU8vQixHQUFPQSxJQUdwQ293RSxVQUFXLFNBQVN2OUIsRUFBTUMsRUFBTzN4QyxHQUMvQixNQUFPLFVBQVN1TSxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNyQyxHQUFJKzVCLEdBQU1sOUIsRUFBS25sQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNsQzg1QixFQUFNaDlCLEVBQU1wbEMsRUFBTzJRLEVBQVFxYyxFQUFRc2IsR0FDbkNoMkMsR0FBT25CLEVBQVVreEUsR0FBT0EsRUFBTSxJQUFNbHhFLEVBQVVpeEUsR0FBT0EsRUFBTSxFQUMvRCxPQUFPM3VFLElBQVdZLE1BQU8vQixHQUFPQSxJQUdwQ3F3RSxVQUFXLFNBQVN4OUIsRUFBTUMsRUFBTzN4QyxHQUMvQixNQUFPLFVBQVN1TSxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNyQyxHQUFJaDJDLEdBQU02eUMsRUFBS25sQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUFVbEQsRUFBTXBsQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixFQUM3RSxPQUFPNzBDLElBQVdZLE1BQU8vQixHQUFPQSxJQUdwQ3N3RSxVQUFXLFNBQVN6OUIsRUFBTUMsRUFBTzN4QyxHQUMvQixNQUFPLFVBQVN1TSxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNyQyxHQUFJaDJDLEdBQU02eUMsRUFBS25sQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUFVbEQsRUFBTXBsQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixFQUM3RSxPQUFPNzBDLElBQVdZLE1BQU8vQixHQUFPQSxJQUdwQ3V3RSxVQUFXLFNBQVMxOUIsRUFBTUMsRUFBTzN4QyxHQUMvQixNQUFPLFVBQVN1TSxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNyQyxHQUFJaDJDLEdBQU02eUMsRUFBS25sQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUFVbEQsRUFBTXBsQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixFQUM3RSxPQUFPNzBDLElBQVdZLE1BQU8vQixHQUFPQSxJQUdwQ3d3RSxZQUFhLFNBQVMzOUIsRUFBTUMsRUFBTzN4QyxHQUNqQyxNQUFPLFVBQVN1TSxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNyQyxHQUFJaDJDLEdBQU02eUMsRUFBS25sQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixLQUFZbEQsRUFBTXBsQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixFQUMvRSxPQUFPNzBDLElBQVdZLE1BQU8vQixHQUFPQSxJQUdwQ3l3RSxZQUFhLFNBQVM1OUIsRUFBTUMsRUFBTzN4QyxHQUNqQyxNQUFPLFVBQVN1TSxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNyQyxHQUFJaDJDLEdBQU02eUMsRUFBS25sQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixLQUFZbEQsRUFBTXBsQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixFQUMvRSxPQUFPNzBDLElBQVdZLE1BQU8vQixHQUFPQSxJQUdwQzB3RSxXQUFZLFNBQVM3OUIsRUFBTUMsRUFBTzN4QyxHQUNoQyxNQUFPLFVBQVN1TSxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUVyQyxHQUFJaDJDLEdBQU02eUMsRUFBS25sQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixJQUFXbEQsRUFBTXBsQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixFQUM5RSxPQUFPNzBDLElBQVdZLE1BQU8vQixHQUFPQSxJQUdwQzJ3RSxXQUFZLFNBQVM5OUIsRUFBTUMsRUFBTzN4QyxHQUNoQyxNQUFPLFVBQVN1TSxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUVyQyxHQUFJaDJDLEdBQU02eUMsRUFBS25sQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixJQUFXbEQsRUFBTXBsQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixFQUM5RSxPQUFPNzBDLElBQVdZLE1BQU8vQixHQUFPQSxJQUdwQzR3RSxVQUFXLFNBQVMvOUIsRUFBTUMsRUFBTzN4QyxHQUMvQixNQUFPLFVBQVN1TSxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNyQyxHQUFJaDJDLEdBQU02eUMsRUFBS25sQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUFVbEQsRUFBTXBsQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixFQUM3RSxPQUFPNzBDLElBQVdZLE1BQU8vQixHQUFPQSxJQUdwQzZ3RSxVQUFXLFNBQVNoK0IsRUFBTUMsRUFBTzN4QyxHQUMvQixNQUFPLFVBQVN1TSxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNyQyxHQUFJaDJDLEdBQU02eUMsRUFBS25sQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUFVbEQsRUFBTXBsQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixFQUM3RSxPQUFPNzBDLElBQVdZLE1BQU8vQixHQUFPQSxJQUdwQzh3RSxXQUFZLFNBQVNqK0IsRUFBTUMsRUFBTzN4QyxHQUNoQyxNQUFPLFVBQVN1TSxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNyQyxHQUFJaDJDLEdBQU02eUMsRUFBS25sQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixJQUFXbEQsRUFBTXBsQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixFQUM5RSxPQUFPNzBDLElBQVdZLE1BQU8vQixHQUFPQSxJQUdwQyt3RSxXQUFZLFNBQVNsK0IsRUFBTUMsRUFBTzN4QyxHQUNoQyxNQUFPLFVBQVN1TSxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNyQyxHQUFJaDJDLEdBQU02eUMsRUFBS25sQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixJQUFXbEQsRUFBTXBsQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixFQUM5RSxPQUFPNzBDLElBQVdZLE1BQU8vQixHQUFPQSxJQUdwQ2d4RSxXQUFZLFNBQVNuK0IsRUFBTUMsRUFBTzN4QyxHQUNoQyxNQUFPLFVBQVN1TSxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNyQyxHQUFJaDJDLEdBQU02eUMsRUFBS25sQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixJQUFXbEQsRUFBTXBsQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixFQUM5RSxPQUFPNzBDLElBQVdZLE1BQU8vQixHQUFPQSxJQUdwQ2l4RSxXQUFZLFNBQVNwK0IsRUFBTUMsRUFBTzN4QyxHQUNoQyxNQUFPLFVBQVN1TSxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNyQyxHQUFJaDJDLEdBQU02eUMsRUFBS25sQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixJQUFXbEQsRUFBTXBsQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixFQUM5RSxPQUFPNzBDLElBQVdZLE1BQU8vQixHQUFPQSxJQUdwQ2t4RSxZQUFhLFNBQVMvckUsRUFBTTh0QyxFQUFXQyxFQUFZL3hDLEdBQ2pELE1BQU8sVUFBU3VNLEVBQU8yUSxFQUFRcWMsRUFBUXNiLEdBQ3JDLEdBQUloMkMsR0FBTW1GLEVBQUt1SSxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUFVL0MsRUFBVXZsQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUFVOUMsRUFBV3hsQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixFQUM3SCxPQUFPNzBDLElBQVdZLE1BQU8vQixHQUFPQSxJQUdwQytCLE1BQU8sU0FBU0EsRUFBT1osR0FDckIsTUFBTyxZQUFhLE1BQU9BLElBQVdBLFlBQVM2RixHQUFXd0YsU0FBTXhGLEdBQVdqRixNQUFPQSxHQUFTQSxJQUU3Rms4QixXQUFZLFNBQVN6eEIsRUFBTXJMLEVBQVMyQyxHQUNsQyxNQUFPLFVBQVM0SixFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNyQyxHQUFJeEosR0FBT251QixHQUFXN1IsSUFBUTZSLEdBQVVBLEVBQVMzUSxDQUM3QzVKLElBQXFCLElBQVhBLEdBQWdCMG9DLEdBQXNCLE1BQWRBLEVBQUtoZ0MsS0FDekNnZ0MsRUFBS2hnQyxNQUVQLElBQUl6SyxHQUFReXFDLEVBQU9BLEVBQUtoZ0MsT0FBUXhGLEVBQ2hDLE9BQUk3RixJQUNNQSxRQUFTcXJDLEVBQU1oZ0MsS0FBTUEsRUFBTXpLLE1BQU9BLEdBRW5DQSxJQUliOHNFLGVBQWdCLFNBQVNoOEIsRUFBTUMsRUFBTzN4QyxFQUFTMkMsR0FDN0MsTUFBTyxVQUFTNEosRUFBTzJRLEVBQVFxYyxFQUFRc2IsR0FDckMsR0FDSTg1QixHQUNBL3RFLEVBRkFndUUsRUFBTWw5QixFQUFLbmxDLEVBQU8yUSxFQUFRcWMsRUFBUXNiLEVBYXRDLE9BVlcsT0FBUCs1QixJQUNGRCxFQUFNaDlCLEVBQU1wbEMsRUFBTzJRLEVBQVFxYyxFQUFRc2IsR0FDbkM4NUIsRUFBTTkrQixHQUFlOCtCLEdBQ2pCaHNFLEdBQXFCLElBQVhBLEdBQ1Jpc0UsSUFBU0EsRUFBSUQsS0FDZkMsRUFBSUQsT0FHUi90RSxFQUFRZ3VFLEVBQUlELElBRVYzdUUsR0FDTUEsUUFBUzR1RSxFQUFLdmpFLEtBQU1zakUsRUFBSy90RSxNQUFPQSxHQUVqQ0EsSUFJYm90RSxrQkFBbUIsU0FBU3Q4QixFQUFNQyxFQUFPM3hDLEVBQVMyQyxHQUNoRCxNQUFPLFVBQVM0SixFQUFPMlEsRUFBUXFjLEVBQVFzYixHQUNyQyxHQUFJKzVCLEdBQU1sOUIsRUFBS25sQyxFQUFPMlEsRUFBUXFjLEVBQVFzYixFQUNsQ2x5QyxJQUFxQixJQUFYQSxHQUNSaXNFLEdBQXFCLE1BQWRBLEVBQUlqOUIsS0FDYmk5QixFQUFJajlCLE1BR1IsSUFBSS93QyxHQUFlLE1BQVBndUUsRUFBY0EsRUFBSWo5QixPQUFTOXJDLEVBQ3ZDLE9BQUk3RixJQUNNQSxRQUFTNHVFLEVBQUt2akUsS0FBTXNtQyxFQUFPL3dDLE1BQU9BLEdBRW5DQSxJQUliaTBDLE9BQVEsU0FBUzBZLEVBQU9zZixHQUN0QixNQUFPLFVBQVN0Z0UsRUFBTzNMLEVBQU9zYyxFQUFRMjNCLEdBQ3BDLE1BQUlBLEdBQWVBLEVBQU9nNEIsR0FDbkJ0ZixFQUFNaGhELEVBQU8zTCxFQUFPc2MsTUFjakNnMkIsR0FBT3B1QyxXQUNMZ0IsWUFBYW90QyxHQUViMXFDLE1BQU8sU0FBU2t1QixHQUNkLEdBQUlzYSxHQUFNNWdDLEtBQUs0Z0MsSUFBSUEsSUFBSXRhLEdBQ25COXVCLEVBQUt3SSxLQUFLZ2pDLFlBQVk1bUMsUUFBUXdrQyxFQUdsQyxPQUZBcHBDLEdBQUcweEIsUUFBVXdaLEdBQVU5QixHQUN2QnBwQyxFQUFHMEksU0FBV3lpQyxHQUFXL0IsR0FDbEJwcEMsR0F3aEZYLElBQUlpNEMsSUFBYTdoRCxFQUFPLFFBRXBCbWlELElBRUYvb0IsS0FBTSxPQUdOZ3FCLElBQUssTUFJTEMsSUFBSyxNQUlMaHFCLGFBQWMsY0FHZGlxQixHQUFJLE1BS0Y1QixHQUE4QixZQTBxQzlCNkQsR0FBeUJ2bEQsRUFBTyxZQWlWaEMybUQsR0FBaUJ0bkQsRUFBTzRLLFNBQVN5SyxjQUFjLEtBQy9DbXlDLEdBQVluZSxHQUFXcnBDLEVBQU82UCxTQUFTNlUsS0FnTTNDZ2pDLElBQWV2cUMsU0FBVyxhQWdIMUJnckMsR0FBZ0JockMsU0FBVyxXQTRVM0IsSUFBSSt0QyxJQUFhLEdBQ2JSLEdBQWMsSUFDZE8sR0FBWSxHQXNEaEIzQyxJQUFlbnJDLFNBQVcsV0EwRTFCeXJDLEdBQWF6ckMsU0FBVyxVQXVUeEIsSUFBSTZ5QyxLQUNGeUcsS0FBTXRKLEdBQVcsV0FBWSxFQUFHLEdBQUcsR0FBTyxHQUN4Q3dsQixHQUFJeGxCLEdBQVcsV0FBWSxFQUFHLEdBQUcsR0FBTSxHQUN0Q3lsQixFQUFHemxCLEdBQVcsV0FBWSxFQUFHLEdBQUcsR0FBTyxHQUMxQzBsQixLQUFNemxCLEdBQWMsU0FDbkIwbEIsSUFBSzFsQixHQUFjLFNBQVMsR0FDM0JzSixHQUFJdkosR0FBVyxRQUFTLEVBQUcsR0FDMUI0bEIsRUFBRzVsQixHQUFXLFFBQVMsRUFBRyxHQUM3QjZsQixLQUFNNWxCLEdBQWMsU0FBUyxHQUFPLEdBQ2xDdUosR0FBSXhKLEdBQVcsT0FBUSxHQUN0QnpxQixFQUFHeXFCLEdBQVcsT0FBUSxHQUN2QnlKLEdBQUl6SixHQUFXLFFBQVMsR0FDdkI4bEIsRUFBRzlsQixHQUFXLFFBQVMsR0FDeEIrbEIsR0FBSS9sQixHQUFXLFFBQVMsR0FBSSxJQUMzQnhwRCxFQUFHd3BELEdBQVcsUUFBUyxHQUFJLElBQzVCMEosR0FBSTFKLEdBQVcsVUFBVyxHQUN6QnNDLEVBQUd0QyxHQUFXLFVBQVcsR0FDMUIySixHQUFJM0osR0FBVyxVQUFXLEdBQ3pCclUsRUFBR3FVLEdBQVcsVUFBVyxHQUczQjRKLElBQUs1SixHQUFXLGVBQWdCLEdBQ2pDZ21CLEtBQU0vbEIsR0FBYyxPQUNuQmdtQixJQUFLaG1CLEdBQWMsT0FBTyxHQUN4Qi9qRCxFQUFHa2xELEdBQ0g4a0IsRUFBRzlsQixHQUNKK2xCLEdBQUlubEIsR0FBVyxHQUNkb2xCLEVBQUdwbEIsR0FBVyxHQUNkcWxCLEVBQUc5a0IsR0FDSCtrQixHQUFJL2tCLEdBQ0pnbEIsSUFBS2hsQixHQUNMaWxCLEtBQU0va0IsSUFHUG1CLEdBQXFCLGdHQUNyQkQsR0FBZ0IsU0FrR3BCdkgsSUFBV3ByQyxTQUFXLFVBaUl0QixJQUFJd3JDLElBQWtCampELEVBQVE0QixJQTJCMUJ3aEQsR0FBa0JwakQsRUFBUXcvQixHQStxQjlCMmpCLElBQWMxckMsU0FBVyxTQXFLekIsSUFBSXkyRCxJQUFzQmx1RSxHQUN4QnNqQixTQUFVLElBQ1Y3WixRQUFTLFNBQVM5SCxFQUFTTixHQUN6QixJQUFLQSxFQUFLMmQsT0FBUzNkLEVBQUs4c0UsVUFDdEIsTUFBTyxVQUFTM2tFLEVBQU83SCxHQUVyQixHQUEwQyxNQUF0Q0EsRUFBUSxHQUFHM0MsU0FBUzZMLGNBQXhCLENBR0EsR0FBSW1VLEdBQStDLCtCQUF4QzllLEdBQVM3QyxLQUFLc0UsRUFBUVAsS0FBSyxTQUMzQixhQUFlLE1BQzFCTyxHQUFRd1MsR0FBRyxRQUFTLFNBQVNXLEdBRXRCblQsRUFBUU4sS0FBSzJkLElBQ2hCbEssRUFBTTIyQix3QkFtV2QyaUMsS0FHSnJ4RSxHQUFReVgsR0FBYyxTQUFTNjVELEVBQVV4ckQsR0FJdkMsUUFBU3lyRCxHQUFjOWtFLEVBQU83SCxFQUFTTixHQUNyQ21JLEVBQU1oSixPQUFPYSxFQUFLa3RFLEdBQWEsU0FBa0Mxd0UsR0FDL0R3RCxFQUFLa3hCLEtBQUsxUCxJQUFZaGxCLEtBSjFCLEdBQWlCLGFBQWJ3d0UsRUFBSixDQVFBLEdBQUlFLEdBQWEzakQsR0FBbUIsTUFBUS9ILEdBQ3hDc0osRUFBU21pRCxDQUVJLGFBQWJELElBQ0ZsaUQsRUFBUyxTQUFTM2lCLEVBQU83SCxFQUFTTixHQUU1QkEsRUFBS3UzRCxVQUFZdjNELEVBQUtrdEUsSUFDeEJELEVBQWM5a0UsRUFBTzdILEVBQVNOLEtBS3BDK3NFLEdBQTJCRyxHQUFjLFdBQ3ZDLE9BQ0VqckQsU0FBVSxJQUNWVyxTQUFVLElBQ1Z0RCxLQUFNd0wsT0FNWnB2QixFQUFRNFgsR0FBYyxTQUFTNjVELEVBQVV6bUUsR0FDdkNxbUUsR0FBMkJybUUsR0FBVSxXQUNuQyxPQUNFa2MsU0FBVSxJQUNWdEQsS0FBTSxTQUFTblgsRUFBTzdILEVBQVNOLEdBRzdCLEdBQWUsY0FBWDBHLEdBQXVELE1BQTdCMUcsRUFBSzQ3RCxVQUFVNTRELE9BQU8sR0FBWSxDQUM5RCxHQUFJcEksR0FBUW9GLEVBQUs0N0QsVUFBVWhoRSxNQUFNKzlELEdBQ2pDLElBQUkvOUQsRUFFRixXQURBb0YsR0FBS2t4QixLQUFLLFlBQWEsR0FBSXh6QixRQUFPOUMsRUFBTSxHQUFJQSxFQUFNLEtBS3REdU4sRUFBTWhKLE9BQU9hLEVBQUswRyxHQUFTLFNBQWdDbEssR0FDekR3RCxFQUFLa3hCLEtBQUt4cUIsRUFBUWxLLFVBUTVCZCxHQUFTLE1BQU8sU0FBVSxRQUFTLFNBQVM4bEIsR0FDMUMsR0FBSTByRCxHQUFhM2pELEdBQW1CLE1BQVEvSCxFQUM1Q3VyRCxJQUEyQkcsR0FBYyxXQUN2QyxPQUNFdHFELFNBQVUsR0FDVnRELEtBQU0sU0FBU25YLEVBQU83SCxFQUFTTixHQUM3QixHQUFJZ3RFLEdBQVd4ckQsRUFDWHZhLEVBQU91YSxDQUVNLFVBQWJBLEdBQ3dDLCtCQUF4QzNpQixHQUFTN0MsS0FBS3NFLEVBQVFQLEtBQUssV0FDN0JrSCxFQUFPLFlBQ1BqSCxFQUFLaWxCLE1BQU1oZSxHQUFRLGFBQ25CK2xFLEVBQVcsTUFHYmh0RSxFQUFLZzFCLFNBQVNrNEMsRUFBWSxTQUFTMXdFLEdBQ2pDLElBQUtBLEVBSUgsWUFIaUIsU0FBYmdsQixHQUNGeGhCLEVBQUtreEIsS0FBS2pxQixFQUFNLE1BS3BCakgsR0FBS2t4QixLQUFLanFCLEVBQU16SyxHQU9aMGMsSUFBUTh6RCxHQUFVMXNFLEVBQVFQLEtBQUtpdEUsRUFBVWh0RSxFQUFLaUgsVUFTNUQsSUFBSThrRCxLQUNGcWhCLFlBQWE1dUUsRUFDYjZ1RSxnQkFBaUJyaUIsR0FDakJzaUIsZUFBZ0I5dUUsRUFDaEJ5dUQsYUFBY3p1RCxFQUNkK3VFLFVBQVcvdUUsRUFDWGd2RSxhQUFjaHZFLEVBQ2RpdkUsY0FBZWp2RSxHQUVqQjB1RCxHQUFnQixZQXdEaEIvQixJQUFlLzBDLFNBQVcsV0FBWSxTQUFVLFNBQVUsV0FBWSxnQkFzQnRFKzBDLEdBQWV6cUQsV0FZYmd0RSxtQkFBb0IsV0FDbEJoeUUsRUFBUXNRLEtBQUtvL0MsV0FBWSxTQUFTSCxHQUNoQ0EsRUFBUXlpQix3QkFlWkMsaUJBQWtCLFdBQ2hCanlFLEVBQVFzUSxLQUFLby9DLFdBQVksU0FBU0gsR0FDaENBLEVBQVEwaUIsc0JBeUJaUCxZQUFhLFNBQVNuaUIsR0FHcEJwaEQsR0FBd0JvaEQsRUFBUUMsTUFBTyxTQUN2Q2wvQyxLQUFLby9DLFdBQVdscUQsS0FBSytwRCxHQUVqQkEsRUFBUUMsUUFDVmwvQyxLQUFLaS9DLEVBQVFDLE9BQVNELEdBR3hCQSxFQUFRYSxhQUFlOS9DLE1BSXpCcWhFLGdCQUFpQixTQUFTcGlCLEVBQVMyaUIsR0FDakMsR0FBSUMsR0FBVTVpQixFQUFRQyxLQUVsQmwvQyxNQUFLNmhFLEtBQWE1aUIsU0FDYmovQyxNQUFLNmhFLEdBRWQ3aEUsS0FBSzRoRSxHQUFXM2lCLEVBQ2hCQSxFQUFRQyxNQUFRMGlCLEdBbUJsQk4sZUFBZ0IsU0FBU3JpQixHQUNuQkEsRUFBUUMsT0FBU2wvQyxLQUFLaS9DLEVBQVFDLFNBQVdELFNBQ3BDai9DLE1BQUtpL0MsRUFBUUMsT0FFdEJ4dkQsRUFBUXNRLEtBQUt1L0MsU0FBVSxTQUFTL3VELEVBQU95SyxHQUVyQytFLEtBQUtpaEQsYUFBYWhtRCxFQUFNLEtBQU1na0QsSUFDN0JqL0MsTUFDSHRRLEVBQVFzUSxLQUFLcS9DLE9BQVEsU0FBUzd1RCxFQUFPeUssR0FFbkMrRSxLQUFLaWhELGFBQWFobUQsRUFBTSxLQUFNZ2tELElBQzdCai9DLE1BQ0h0USxFQUFRc1EsS0FBS3MvQyxVQUFXLFNBQVM5dUQsRUFBT3lLLEdBRXRDK0UsS0FBS2loRCxhQUFhaG1ELEVBQU0sS0FBTWdrRCxJQUM3QmovQyxNQUVIcEwsRUFBWW9MLEtBQUtvL0MsV0FBWUgsR0FDN0JBLEVBQVFhLGFBQWVDLElBYXpCd2hCLFVBQVcsV0FDVHZoRSxLQUFLZ2dELFVBQVU5MkMsWUFBWWxKLEtBQUtrWixVQUFXNG9ELElBQzNDOWhFLEtBQUtnZ0QsVUFBVS8yQyxTQUFTakosS0FBS2taLFVBQVc2b0QsSUFDeEMvaEUsS0FBS3kvQyxRQUFTLEVBQ2R6L0MsS0FBSzAvQyxXQUFZLEVBQ2pCMS9DLEtBQUs4L0MsYUFBYXloQixhQW1CcEJDLGFBQWMsV0FDWnhoRSxLQUFLZ2dELFVBQVV5VSxTQUFTejBELEtBQUtrWixVQUFXNG9ELEdBQWdCQyxHQUFjLGlCQUN0RS9oRSxLQUFLeS9DLFFBQVMsRUFDZHovQyxLQUFLMC9DLFdBQVksRUFDakIxL0MsS0FBSzYvQyxZQUFhLEVBQ2xCbndELEVBQVFzUSxLQUFLby9DLFdBQVksU0FBU0gsR0FDaENBLEVBQVF1aUIsa0JBaUJaUSxjQUFlLFdBQ2J0eUUsRUFBUXNRLEtBQUtvL0MsV0FBWSxTQUFTSCxHQUNoQ0EsRUFBUStpQixtQkFXWlAsY0FBZSxXQUNiemhFLEtBQUtnZ0QsVUFBVS8yQyxTQUFTakosS0FBS2taLFVBelFmLGdCQTBRZGxaLEtBQUs2L0MsWUFBYSxFQUNsQjcvQyxLQUFLOC9DLGFBQWEyaEIsa0JBNEJ0QnBoQixJQUNFVyxNQUFPN0IsR0FDUGxwRCxJQUFLLFNBQVM0ckMsRUFBUXRkLEVBQVVqa0IsR0FDOUIsR0FBSTBOLEdBQU82ekIsRUFBT3RkLEVBQ2xCLElBQUt2VyxFQUVFLEVBRVUsSUFESEEsRUFBS3JaLFFBQVEyTCxJQUV2QjBOLEVBQUs5WSxLQUFLb0wsT0FKWnVoQyxHQUFPdGQsSUFBYWprQixJQVF4Qm1nRCxNQUFPLFNBQVM1ZSxFQUFRdGQsRUFBVWprQixHQUNoQyxHQUFJME4sR0FBTzZ6QixFQUFPdGQsRUFDYnZXLEtBR0xwWixFQUFZb1osRUFBTTFOLEdBQ0UsSUFBaEIwTixFQUFLamYsY0FDQTh5QyxHQUFPdGQsTUFzS3BCLElBQUkwOUMsSUFBdUIsU0FBU0MsR0FDbEMsT0FBUSxXQUFZLFNBQVUsU0FBU2o1QixFQUFVM3dCLEdBdUUvQyxRQUFTNnBELEdBQVV4MUMsR0FDakIsTUFBbUIsS0FBZkEsRUFFS3JVLEVBQU8sWUFBWTZRLE9BRXJCN1EsRUFBT3FVLEdBQVl4RCxRQUFVMzJCLEVBUHRDLE9BbkVFeUksS0FBTSxPQUNOZ2IsU0FBVWlzRCxFQUFXLE1BQVEsSUFDN0Jwc0QsU0FBVSxPQUFRLFdBQ2xCeFYsV0FBWTYrQyxHQUNaL2lELFFBQVMsU0FBdUJnbUUsRUFBYXB1RSxHQUUzQ291RSxFQUFZbjVELFNBQVM2NEQsSUFBZ0I3NEQsU0FBU20zQyxHQUU5QyxJQUFJaWlCLEdBQVdydUUsRUFBS2lILEtBQU8sVUFBVWluRSxJQUFZbHVFLEVBQUt3ckQsU0FBUyxRQUUvRCxRQUNFLy9CLElBQUssU0FBdUJ0akIsRUFBT2ltRSxFQUFhcHVFLEVBQU1zdUUsR0FDcEQsR0FBSWhpRSxHQUFhZ2lFLEVBQU0sRUFHdkIsTUFBTSxVQUFZdHVFLElBQU8sQ0FPdkIsR0FBSXV1RSxHQUF1QixTQUFTOTZELEdBQ2xDdEwsRUFBTUUsT0FBTyxXQUNYaUUsRUFBV3FoRSxtQkFDWHJoRSxFQUFXbWhFLGtCQUdiaDZELEVBQU0yMkIsaUJBR1Jna0MsR0FBWSxHQUFHcDdELGlCQUFpQixTQUFVdTdELEdBSTFDSCxFQUFZdDdELEdBQUcsV0FBWSxXQUN6Qm1pQyxFQUFTLFdBQ1BtNUIsRUFBWSxHQUFHejlELG9CQUFvQixTQUFVNDlELElBQzVDLEdBQUcsTUFJV0QsRUFBTSxJQUFNaGlFLEVBQVd3L0MsY0FDN0JzaEIsWUFBWTlnRSxFQUUzQixJQUFJa2lFLEdBQVNILEVBQVdGLEVBQVU3aEUsRUFBVzQrQyxPQUFTMXNELENBRWxENnZFLEtBQ0ZHLEVBQU9ybUUsRUFBT21FLEdBQ2R0TSxFQUFLZzFCLFNBQVNxNUMsRUFBVSxTQUFTLzZDLEdBQzNCaG5CLEVBQVc0K0MsUUFBVTUzQixJQUN6Qms3QyxFQUFPcm1FLE1BQU8xRyxJQUNkNkssRUFBV3cvQyxhQUFhdWhCLGdCQUFnQi9nRSxFQUFZZ25CLElBQ3BEazdDLEVBQVNMLEVBQVU3aEUsRUFBVzQrQyxRQUN2Qi9pRCxFQUFPbUUsT0FHbEI4aEUsRUFBWXQ3RCxHQUFHLFdBQVksV0FDekJ4RyxFQUFXdy9DLGFBQWF3aEIsZUFBZWhoRSxHQUN2Q2tpRSxFQUFPcm1FLE1BQU8xRyxJQUNkMUQsRUFBT3VPLEVBQVl5L0MsYUFtQjdCMGlCLEdBQWdCUixLQUNoQlMsR0FBa0JULElBQXFCLEdBb0h2Q3hlLEdBQWtCLGdGQWFsQnFFLEdBQWEsdUhBRWJHLEdBQWUsK0xBQ2Y1QyxHQUFnQixtREFDaEJzZCxHQUFjLDZCQUNkQyxHQUF1QixpRUFDdkI5ZixHQUFjLHFCQUNkK2YsR0FBZSxvQkFDZkMsR0FBYywwQ0FFZDNnQixHQUE0QiwwQkFDNUJELEdBQTJCbnJELElBQy9CckgsR0FBUSxzQ0FBc0MwRSxNQUFNLEtBQU0sU0FBU2dDLEdBQ2pFOHJELEdBQXlCOXJELElBQVEsR0FHbkMsSUFBSTJzRSxLQWdHRno4QyxLQUFRaTdCLEdBc0dSM29ELEtBQVFzckQsR0FBb0IsT0FBUXllLEdBQzdCcmYsR0FBaUJxZixJQUFjLE9BQVEsS0FBTSxPQUM3QyxjQW9HUEssaUJBQWtCOWUsR0FBb0IsZ0JBQWlCMGUsR0FDbkR0ZixHQUFpQnNmLElBQXVCLE9BQVEsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLFFBQzlFLDJCQXFHSkssS0FBUS9lLEdBQW9CLE9BQVE0ZSxHQUNoQ3hmLEdBQWlCd2YsSUFBYyxLQUFNLEtBQU0sS0FBTSxRQUNsRCxnQkFzR0gvZixLQUFRbUIsR0FBb0IsT0FBUXBCLEdBQWFILEdBQVksWUF1RzdEdWdCLE1BQVNoZixHQUFvQixRQUFTMmUsR0FDbkN2ZixHQUFpQnVmLElBQWUsT0FBUSxPQUN4QyxXQXVISGpyQixPQUFVNE8sR0FtR1ZuMkMsSUFBT3czQyxHQWtHUEcsTUFBU0QsR0FxRVRvYixNQUFTamIsR0F1SFRrYixNQUFTeGMsR0F5RFR5YyxTQUFZOWEsR0FFWnI3QixPQUFVMTZCLEVBQ1YwckMsT0FBVTFyQyxFQUNWOHdFLE9BQVU5d0UsRUFDVit3RSxNQUFTL3dFLEVBQ1RneEUsS0FBUWh4RSxHQTIwQk5peEUsSUFBa0IsV0FBWSxXQUFZLFVBQVcsU0FDckQsU0FBU2x6QyxFQUFVeGdCLEVBQVUrdkIsRUFBU3huQixHQUN4QyxPQUNFckMsU0FBVSxJQUNWSCxTQUFVLFlBQ1Z4QyxNQUNFbU0sSUFBSyxTQUFTdGpCLEVBQU83SCxFQUFTTixFQUFNc3VFLEdBQzlCQSxFQUFNLEtBQ1BTLEdBQVV4dUUsR0FBVVAsRUFBS29DLFFBQVUyc0UsR0FBVXo4QyxNQUFNbnFCLEVBQU83SCxFQUFTTixFQUFNc3VFLEVBQU0sR0FBSXZ5RCxFQUNoQ3dnQixFQUFVdVAsRUFBU3huQixRQVM3RW9yRCxHQUF3QixxQkF3RHhCQyxHQUFtQixXQU9yQixRQUFTQyxHQUFtQnR2RSxFQUFTTixFQUFNeEQsR0FHekMsR0FBSXF6RSxHQUFZdjJFLEVBQVVrRCxHQUFTQSxFQUFrQixJQUFUMGMsR0FBYyxHQUFLLElBQy9ENVksR0FBUVAsS0FBSyxRQUFTOHZFLEdBQ3RCN3ZFLEVBQUtreEIsS0FBSyxRQUFTMTBCLEdBR3JCLE9BQ0V5bEIsU0FBVSxJQUNWVyxTQUFVLElBQ1Z4YSxRQUFTLFNBQVM0MkMsRUFBSzh3QixHQUNyQixNQUFJSixJQUFzQjl2RSxLQUFLa3dFLEVBQVFDLFNBQzlCLFNBQTZCNW5FLEVBQU84UyxFQUFLamIsR0FFOUM0dkUsRUFBbUIzMEQsRUFBS2piLEVBRFptSSxFQUFNbXlDLE1BQU10NkMsRUFBSyt2RSxXQUl4QixTQUFxQjVuRSxFQUFPOFMsRUFBS2piLEdBQ3RDbUksRUFBTWhKLE9BQU9hLEVBQUsrdkUsUUFBUyxTQUEwQnZ6RSxHQUNuRG96RSxFQUFtQjMwRCxFQUFLamIsRUFBTXhELFNBMkR0Q3d6RSxJQUFtQixXQUFZLFNBQVNDLEdBQzFDLE9BQ0VodUQsU0FBVSxLQUNWN1osUUFBUyxTQUF1QjhuRSxHQUU5QixNQURBRCxHQUFTdDlDLGtCQUFrQnU5QyxHQUNwQixTQUFvQi9uRSxFQUFPN0gsRUFBU04sR0FDekNpd0UsRUFBU3I5QyxpQkFBaUJ0eUIsRUFBU04sRUFBS213RSxRQUN4Qzd2RSxFQUFVQSxFQUFRLEdBQ2xCNkgsRUFBTWhKLE9BQU9hLEVBQUttd0UsT0FBUSxTQUEyQjN6RSxHQUNuRDhELEVBQVEwTyxZQUFjL0ssR0FBVXpILFVBMkR0QzR6RSxJQUEyQixlQUFnQixXQUFZLFNBQVNoc0QsRUFBYzZyRCxHQUNoRixPQUNFN25FLFFBQVMsU0FBK0I4bkUsR0FFdEMsTUFEQUQsR0FBU3Q5QyxrQkFBa0J1OUMsR0FDcEIsU0FBNEIvbkUsRUFBTzdILEVBQVNOLEdBQ2pELEdBQUl1eUIsR0FBZ0JuTyxFQUFhOWpCLEVBQVFOLEtBQUtBLEVBQUtpbEIsTUFBTW9yRCxnQkFDekRKLEdBQVNyOUMsaUJBQWlCdHlCLEVBQVNpeUIsRUFBY00sYUFDakR2eUIsRUFBVUEsRUFBUSxHQUNsQk4sRUFBS2cxQixTQUFTLGlCQUFrQixTQUFTeDRCLEdBQ3ZDOEQsRUFBUTBPLFlBQWNsUSxFQUFZdEMsR0FBUyxHQUFLQSxTQXVEdEQ4ekUsSUFBdUIsT0FBUSxTQUFVLFdBQVksU0FBUzlyRCxFQUFNRixFQUFRMnJELEdBQzlFLE9BQ0VodUQsU0FBVSxJQUNWN1osUUFBUyxTQUEyQjJhLEVBQVVDLEdBQzVDLEdBQUl1dEQsR0FBbUJqc0QsRUFBT3RCLEVBQU93dEQsWUFDakNDLEVBQWtCbnNELEVBQU90QixFQUFPd3RELFdBQVksU0FBb0I1c0UsR0FFbEUsTUFBTzRnQixHQUFLaG5CLFFBQVFvRyxJQUl0QixPQUZBcXNFLEdBQVN0OUMsa0JBQWtCNVAsR0FFcEIsU0FBd0I1YSxFQUFPN0gsRUFBU04sR0FDN0Npd0UsRUFBU3I5QyxpQkFBaUJ0eUIsRUFBU04sRUFBS3d3RSxZQUV4Q3JvRSxFQUFNaEosT0FBT3N4RSxFQUFpQixXQUU1QixHQUFJajBFLEdBQVErekUsRUFBaUJwb0UsRUFDN0I3SCxHQUFRa0YsS0FBS2dmLEVBQUtrc0QsZUFBZWwwRSxJQUFVLFdBMEVqRG0wRSxHQUFvQmh5RSxHQUN0QnNqQixTQUFVLElBQ1ZILFFBQVMsVUFDVHhDLEtBQU0sU0FBU25YLEVBQU83SCxFQUFTTixFQUFNdXNELEdBQ25DQSxFQUFLMksscUJBQXFCaDJELEtBQUssV0FDN0JpSCxFQUFNbXlDLE1BQU10NkMsRUFBSzR3RSxlQWtYbkJDLEdBQW1CamMsR0FBZSxJQUFJLEdBZ0R0Q2tjLEdBQXNCbGMsR0FBZSxNQUFPLEdBZ0Q1Q21jLEdBQXVCbmMsR0FBZSxPQUFRLEdBc0Q5Q29jLEdBQW1Cam1CLElBQ3JCM2lELFFBQVMsU0FBUzlILEVBQVNOLEdBQ3pCQSxFQUFLa3hCLEtBQUssY0FBV3p2QixJQUNyQm5CLEVBQVE0VSxZQUFZLGVBd09wQis3RCxJQUF5QixXQUMzQixPQUNFaHZELFNBQVUsSUFDVjlaLE9BQU8sRUFDUG1FLFdBQVksSUFDWnNXLFNBQVUsT0F3UFZzdUQsTUFLQUMsSUFDRkMsTUFBUSxFQUNSQyxPQUFTLEVBRVgzMUUsR0FDRSw4SUFBOEkwRSxNQUFNLEtBQ3BKLFNBQVNpNkMsR0FDUCxHQUFJeDVCLEdBQWdCMEksR0FBbUIsTUFBUTh3QixFQUMvQzYyQixJQUFrQnJ3RCxJQUFrQixTQUFVLGFBQWMsU0FBU3lELEVBQVF4SyxHQUMzRSxPQUNFbUksU0FBVSxJQUNWN1osUUFBUyxTQUFTNmEsRUFBVWpqQixHQUsxQixHQUFJd0QsR0FBSzhnQixFQUFPdGtCLEVBQUs2Z0IsR0FDckIsT0FBTyxVQUF3QjFZLEVBQU83SCxHQUNwQ0EsRUFBUXdTLEdBQUd1bkMsRUFBVyxTQUFTNW1DLEdBQzdCLEdBQUlpSyxHQUFXLFdBQ2JsYSxFQUFHMkUsR0FBUXl1QyxPQUFRbmpDLElBRWpCMDlELElBQWlCOTJCLElBQWN2Z0MsRUFBV29sQixRQUM1Qy8yQixFQUFNakosV0FBV3dlLEdBRWpCdlYsRUFBTUUsT0FBT3FWLFdBZ2Y3QixJQUFJNHpELEtBQWlCLFdBQVksV0FBWSxTQUFTN3NELEVBQVV3ckQsR0FDOUQsT0FDRWwvQyxjQUFjLEVBQ2R4TixXQUFZLFVBQ1pYLFNBQVUsSUFDVjRGLFVBQVUsRUFDVnZHLFNBQVUsSUFDVjJNLE9BQU8sRUFDUHRQLEtBQU0sU0FBU21SLEVBQVF4TixFQUFVZ0MsRUFBT3NuQyxFQUFNNzdCLEdBQzFDLEdBQUloa0IsR0FBTzhhLEVBQVkrcEQsQ0FDdkI5Z0QsR0FBT3R4QixPQUFPOGxCLEVBQU11c0QsS0FBTSxTQUF5QmgxRSxHQUU3Q0EsRUFDR2dyQixHQUNIa0osRUFBWSxTQUFTNXlCLEVBQU82eUIsR0FDMUJuSixFQUFhbUosRUFDYjd5QixFQUFNQSxFQUFNL0MsVUFBWWsxRSxFQUFTbGhELGdCQUFnQixXQUFZOUosRUFBTXVzRCxNQUluRTlrRSxHQUNFNU8sTUFBT0EsR0FFVDJtQixFQUFTNDdDLE1BQU12aUUsRUFBT21sQixFQUFTNWtCLFNBQVU0a0IsTUFJekNzdUQsSUFDRkEsRUFBaUJweEQsU0FDakJveEQsRUFBbUIsTUFFakIvcEQsSUFDRkEsRUFBV3pXLFdBQ1h5VyxFQUFhLE1BRVg5YSxJQUNGNmtFLEVBQW1CcG5FLEdBQWN1QyxFQUFNNU8sT0FDdkMybUIsRUFBUzg3QyxNQUFNZ1IsR0FBa0JweUMsS0FBSyxTQUFTekIsSUFDNUIsSUFBYkEsSUFBb0I2ekMsRUFBbUIsUUFFN0M3a0UsRUFBUSxhQWlNbEIra0UsSUFBc0IsbUJBQW9CLGdCQUFpQixXQUM3QyxTQUFTcHRELEVBQW9CcXRELEVBQWlCanRELEdBQzlELE9BQ0V4QyxTQUFVLE1BQ1ZXLFNBQVUsSUFDVjRGLFVBQVUsRUFDVmpGLFdBQVksVUFDWmpYLFdBQVk3RCxHQUFRakssS0FDcEI0SixRQUFTLFNBQVM5SCxFQUFTTixHQUN6QixHQUFJMnhFLEdBQVMzeEUsRUFBSzR4RSxXQUFhNXhFLEVBQUszQyxJQUNoQ3cwRSxFQUFZN3hFLEVBQUtvaUMsUUFBVSxHQUMzQjB2QyxFQUFnQjl4RSxFQUFLK3hFLFVBRXpCLE9BQU8sVUFBUzVwRSxFQUFPOGEsRUFBVWdDLEVBQU9zbkMsRUFBTTc3QixHQUM1QyxHQUNJbW1CLEdBQ0FtN0IsRUFDQUMsRUFIQUMsRUFBZ0IsRUFLaEJDLEVBQTRCLFdBQzFCSCxJQUNGQSxFQUFnQjd4RCxTQUNoQjZ4RCxFQUFrQixNQUVoQm43QixJQUNGQSxFQUFhOWxDLFdBQ2I4bEMsRUFBZSxNQUVibzdCLElBQ0Z4dEQsRUFBUzg3QyxNQUFNMFIsR0FBZ0I5eUMsS0FBSyxTQUFTekIsSUFDMUIsSUFBYkEsSUFBb0JzMEMsRUFBa0IsUUFFNUNBLEVBQWtCQyxFQUNsQkEsRUFBaUIsTUFJckI5cEUsR0FBTWhKLE9BQU93eUUsRUFBUSxTQUE4QnQwRSxHQUNqRCxHQUFJKzBFLEdBQWlCLFNBQVMxMEMsSUFDWCxJQUFiQSxJQUFzQnBrQyxFQUFVdzRFLElBQ2hDQSxJQUFpQjNwRSxFQUFNbXlDLE1BQU13M0IsSUFDN0JKLEtBR0ZXLElBQWlCSCxDQUVqQjcwRSxJQUdGZ25CLEVBQWlCaG5CLEdBQUssR0FBTW9DLEtBQUssU0FBU2krQixHQUN4QyxJQUFJdjFCLEVBQU0wcEIsYUFFTndnRCxJQUFpQkgsRUFBckIsQ0FDQSxHQUFJdmhELEdBQVd4b0IsRUFBTW9lLE1BQ3JCZ21DLEdBQUtueUQsU0FBV3NqQyxDQVFoQixJQUFJNS9CLEdBQVE0eUIsRUFBWUMsRUFBVSxTQUFTN3lCLEdBQ3pDcTBFLElBQ0ExdEQsRUFBUzQ3QyxNQUFNdmlFLEVBQU8sS0FBTW1sQixHQUFVa2MsS0FBS2l6QyxJQUc3Q3Y3QixHQUFlbG1CLEVBQ2ZzaEQsRUFBaUJuMEUsRUFFakIrNEMsRUFBYTZELE1BQU0sd0JBQXlCcjlDLEdBQzVDOEssRUFBTW15QyxNQUFNdTNCLEtBQ1gsV0FDRzFwRSxFQUFNMHBCLGFBRU53Z0QsSUFBaUJILElBQ25CQyxJQUNBaHFFLEVBQU11eUMsTUFBTSx1QkFBd0JyOUMsTUFHeEM4SyxFQUFNdXlDLE1BQU0sMkJBQTRCcjlDLEtBRXhDODBFLElBQ0E1bEIsRUFBS255RCxTQUFXLGFBYXhCazRFLElBQWlDLFdBQ25DLFNBQVNyQyxHQUNQLE9BQ0VodUQsU0FBVSxNQUNWVyxVQUFXLElBQ1hkLFFBQVMsWUFDVHhDLEtBQU0sU0FBU25YLEVBQU84YSxFQUFVZ0MsRUFBT3NuQyxHQUNyQyxHQUFJMXRELEdBQVM3QyxLQUFLaW5CLEVBQVMsSUFBSXJvQixNQUFNLE9BU25DLE1BTEFxb0IsR0FBUzVkLFlBQ1Q0cUUsR0FBU2xpRSxHQUFvQncrQyxFQUFLbnlELFNBQVVuQixFQUFPNEssVUFBVWlMLFlBQVkzRyxFQUNyRSxTQUErQnJLLEdBQ2pDbWxCLEVBQVMxZCxPQUFPekgsS0FDZDRvQixvQkFBcUJ6RCxHQUkzQkEsR0FBU3pkLEtBQUsrbUQsRUFBS255RCxVQUNuQjYxRSxFQUFTaHRELEVBQVNxTSxZQUFZbm5CLE9BK0RsQ29xRSxHQUFrQnhuQixJQUNwQm5vQyxTQUFVLElBQ1Z4YSxRQUFTLFdBQ1AsT0FDRXFqQixJQUFLLFNBQVN0akIsRUFBTzdILEVBQVM0bkIsR0FDNUIvZixFQUFNbXlDLE1BQU1weUIsRUFBTXNxRCxhQTBGdEJDLEdBQWtCLFdBQ3BCLE9BQ0V4d0QsU0FBVSxJQUNWVyxTQUFVLElBQ1ZkLFFBQVMsVUFDVHhDLEtBQU0sU0FBU25YLEVBQU83SCxFQUFTTixFQUFNdXNELEdBQ25DLEdBQUltbUIsR0FBUzF5RSxFQUFLMHlFLFFBQVUsS0FDeEJDLEVBQTZCLFVBQWhCM3lFLEVBQUsydEQsT0FDbEJ2a0QsRUFBWXVwRSxFQUFhampFLEdBQUtnakUsR0FBVUEsRUFFeEN0dUUsRUFBUSxTQUFTd3RELEdBRW5CLElBQUk5eUQsRUFBWTh5RCxHQUFoQixDQUVBLEdBQUk1M0MsS0FRSixPQU5JNDNDLElBQ0ZsMkQsRUFBUWsyRCxFQUFVeHhELE1BQU1nSixHQUFZLFNBQVM1TSxHQUN2Q0EsR0FBT3dkLEVBQUs5WSxLQUFLeXhFLEVBQWFqakUsR0FBS2xULEdBQVNBLEtBSTdDd2QsR0FHVHV5QyxHQUFLb0UsU0FBU3p2RCxLQUFLa0QsR0FDbkJtb0QsRUFBS2MsWUFBWW5zRCxLQUFLLFNBQVMxRSxHQUM3QixHQUFJcEIsR0FBUW9CLEdBQ1YsTUFBT0EsR0FBTThKLEtBQUtvc0UsS0FPdEJubUIsRUFBS2UsU0FBVyxTQUFTOXdELEdBQ3ZCLE9BQVFBLElBQVVBLEVBQU16QixXQW1CNUJxeEQsR0FBYyxXQUNkRCxHQUFnQixhQUNoQjJoQixHQUFpQixjQUNqQkMsR0FBYyxXQU1kbGQsR0FBZ0JqM0QsRUFBTyxVQW1PM0JtOUQsSUFBa0IzZ0QsU0FBVyxTQUFVLG9CQUFxQixTQUFVLFdBQVksU0FBVSxXQUFZLFdBQVksS0FBTSxnQkErQzFIMmdELEdBQWtCcjJELFdBQ2hCa3lFLG9CQUFxQixXQUNuQixHQUFJNW1FLEtBQUt3a0QsU0FBU0MsVUFBVSxnQkFBaUIsQ0FDM0MsR0FBSW9pQixHQUFvQjdtRSxLQUFLMjdCLFFBQVEzN0IsS0FBSytyRCxPQUFPUixRQUFVLE1BQ3ZEdWIsRUFBb0I5bUUsS0FBSzI3QixRQUFRMzdCLEtBQUsrckQsT0FBT1IsUUFBVSxTQUUzRHZyRCxNQUFLeXJELGFBQWUsU0FBU2huQyxHQUMzQixHQUFJa2lDLEdBQWEzbUQsS0FBS3NyRCxnQkFBZ0I3bUMsRUFJdEMsT0FISTMwQixHQUFXNjJELEtBQ2JBLEVBQWFrZ0IsRUFBa0JwaUQsSUFFMUJraUMsR0FFVDNtRCxLQUFLMHJELGFBQWUsU0FBU2puQyxFQUFRNkMsR0FDL0J4M0IsRUFBV2tRLEtBQUtzckQsZ0JBQWdCN21DLElBQ2xDcWlELEVBQWtCcmlELEdBQVNzaUQsS0FBTXovQyxJQUVqQ3RuQixLQUFLd3JELHNCQUFzQi9tQyxFQUFRNkMsUUFHbEMsS0FBS3RuQixLQUFLc3JELGdCQUFnQm5pQyxPQUMvQixLQUFNMDdCLElBQWMsWUFBYSxtREFDN0I3a0QsS0FBSytyRCxPQUFPUixRQUFTbnlELEdBQVk0RyxLQUFLa1osYUF5QjlDd3BDLFFBQVNsd0QsRUFvQlQ4dUQsU0FBVSxTQUFTOXdELEdBRWpCLE1BQU9zQyxHQUFZdEMsSUFBb0IsS0FBVkEsR0FBMEIsT0FBVkEsR0FBa0JBLElBQVVBLEdBRzNFNDdELHFCQUFzQixTQUFTNTdELEdBQ3pCd1AsS0FBS3NoRCxTQUFTOXdELElBQ2hCd1AsS0FBS2dnRCxVQUFVOTJDLFlBQVlsSixLQUFLa1osVUE5VmhCLGdCQStWaEJsWixLQUFLZ2dELFVBQVUvMkMsU0FBU2pKLEtBQUtrWixVQWhXakIsY0FrV1psWixLQUFLZ2dELFVBQVU5MkMsWUFBWWxKLEtBQUtrWixVQWxXcEIsWUFtV1psWixLQUFLZ2dELFVBQVUvMkMsU0FBU2pKLEtBQUtrWixVQWxXYixrQkFpWHBCc29ELGFBQWMsV0FDWnhoRSxLQUFLeS9DLFFBQVMsRUFDZHovQyxLQUFLMC9DLFdBQVksRUFDakIxL0MsS0FBS2dnRCxVQUFVOTJDLFlBQVlsSixLQUFLa1osVUFBVzZvRCxJQUMzQy9oRSxLQUFLZ2dELFVBQVUvMkMsU0FBU2pKLEtBQUtrWixVQUFXNG9ELEtBYzFDUCxVQUFXLFdBQ1R2aEUsS0FBS3kvQyxRQUFTLEVBQ2R6L0MsS0FBSzAvQyxXQUFZLEVBQ2pCMS9DLEtBQUtnZ0QsVUFBVTkyQyxZQUFZbEosS0FBS2taLFVBQVc0b0QsSUFDM0M5aEUsS0FBS2dnRCxVQUFVLzJDLFNBQVNqSixLQUFLa1osVUFBVzZvRCxJQUN4Qy9oRSxLQUFLOC9DLGFBQWF5aEIsYUFlcEJTLGNBQWUsV0FDYmhpRSxLQUFLb3JELFVBQVcsRUFDaEJwckQsS0FBS21yRCxZQUFhLEVBQ2xCbnJELEtBQUtnZ0QsVUFBVXlVLFNBQVN6MEQsS0FBS2taLFVBN1pYLGVBQ0YsZUEwYWxCOHRELFlBQWEsV0FDWGhuRSxLQUFLb3JELFVBQVcsRUFDaEJwckQsS0FBS21yRCxZQUFhLEVBQ2xCbnJELEtBQUtnZ0QsVUFBVXlVLFNBQVN6MEQsS0FBS2taLFVBN2FiLGFBREUsaUJBeWdCcEJ3b0QsbUJBQW9CLFdBQ2xCMWhFLEtBQUtnc0QsVUFBVXQ1QyxPQUFPMVMsS0FBSzJyRCxtQkFDM0IzckQsS0FBSzRoRCxXQUFhNWhELEtBQUtxc0QseUJBQ3ZCcnNELEtBQUswaUQsV0FlUHVDLFVBQVcsV0FFVCxJQUFJdnNELEdBQVlzSCxLQUFLaW5ELGFBQXJCLENBSUEsR0FBSXJCLEdBQVk1bEQsS0FBS3FzRCx5QkFLakIxRixFQUFhM21ELEtBQUtnckQsZ0JBRWxCaWMsRUFBWWpuRSxLQUFLMi9DLE9BQ2pCdW5CLEVBQWlCbG5FLEtBQUtpbkQsWUFFdEJrZ0IsRUFBZW5uRSxLQUFLd2tELFNBQVNDLFVBQVUsZ0JBRXZDMmlCLEVBQU9wbkUsSUFDWEEsTUFBS3NzRCxnQkFBZ0IzRixFQUFZZixFQUFXLFNBQVN5aEIsR0FHOUNGLEdBQWdCRixJQUFjSSxJQUtqQ0QsRUFBS25nQixZQUFjb2dCLEVBQVcxZ0IsTUFBYWx4RCxHQUV2QzJ4RSxFQUFLbmdCLGNBQWdCaWdCLEdBQ3ZCRSxFQUFLRSwyQkFNYmhiLGdCQUFpQixTQUFTM0YsRUFBWWYsRUFBVzJoQixHQThFL0MsUUFBU0MsR0FBWXZzRSxFQUFNOGxELEdBQ3JCMG1CLElBQXlCTCxFQUFLdmIsMEJBQ2hDdWIsRUFBS25tQixhQUFhaG1ELEVBQU04bEQsR0FJNUIsUUFBUzJtQixHQUFlTCxHQUNsQkksSUFBeUJMLEVBQUt2YiwwQkFFaEMwYixFQUFhRixHQXRGakJybkUsS0FBSzZyRCwwQkFDTCxJQUFJNGIsR0FBdUJ6bkUsS0FBSzZyRCx5QkFDNUJ1YixFQUFPcG5FLElBR1gsT0FVQSxZQUNFLEdBQUkybkUsR0FBV1AsRUFBSzFpQixjQUFnQixPQUNwQyxPQUFJNXhELEdBQVlzMEUsRUFBS3hiLGdCQUNuQjRiLEVBQVlHLEVBQVUsT0FjakIsSUFaQVAsRUFBS3hiLGdCQUNSbDhELEVBQVEwM0UsRUFBS3BpQixZQUFhLFNBQVN4M0IsRUFBR3Z5QixHQUNwQ3VzRSxFQUFZdnNFLEVBQU0sUUFFcEJ2TCxFQUFRMDNFLEVBQUtuYyxpQkFBa0IsU0FBU3o5QixFQUFHdnlCLEdBQ3pDdXNFLEVBQVl2c0UsRUFBTSxTQUl0QnVzRSxFQUFZRyxFQUFVUCxFQUFLeGIsZUFDcEJ3YixFQUFLeGIsbUJBS2hCLFdBQ0UsR0FBSWdjLElBQXNCLENBTTFCLE9BTEFsNEUsR0FBUTAzRSxFQUFLcGlCLFlBQWEsU0FBUzZpQixFQUFXNXNFLEdBQzVDLEdBQUlrUSxHQUFTMjhELFFBQVFELEVBQVVsaEIsRUFBWWYsR0FDM0NnaUIsR0FBc0JBLEdBQXVCejhELEVBQzdDcThELEVBQVl2c0UsRUFBTWtRLE9BRWZ5OEQsSUFDSGw0RSxFQUFRMDNFLEVBQUtuYyxpQkFBa0IsU0FBU3o5QixFQUFHdnlCLEdBQ3pDdXNFLEVBQVl2c0UsRUFBTSxTQUViLFVBS1gsWUFDRSxHQUFJOHNFLE1BQ0FWLEdBQVcsQ0FDZjMzRSxHQUFRMDNFLEVBQUtuYyxpQkFBa0IsU0FBUzRjLEVBQVc1c0UsR0FDakQsR0FBSTYxQixHQUFVKzJDLEVBQVVsaEIsRUFBWWYsRUFDcEMsS0FBS3B5RCxFQUFjczlCLEdBQ2pCLEtBQU0rekIsSUFBYyxZQUNsQiw2RUFBZ0YvekIsRUFFcEYwMkMsR0FBWXZzRSxNQUFNeEYsSUFDbEJzeUUsRUFBa0I3eUUsS0FBSzQ3QixFQUFRcjlCLEtBQUssV0FDbEMrekUsRUFBWXZzRSxHQUFNLElBQ2pCLFdBQ0Rvc0UsR0FBVyxFQUNYRyxFQUFZdnNFLEdBQU0sUUFHakI4c0UsRUFBa0JoNUUsT0FHckJxNEUsRUFBS3Z1QyxJQUFJejNCLElBQUkybUUsR0FBbUJ0MEUsS0FBSyxXQUNuQ2kwRSxFQUFlTCxJQUNkNzBFLEdBSkhrMUUsR0FBZSxVQS9EakJBLElBQWUsSUFnR25CL0YsaUJBQWtCLFdBQ2hCLEdBQUkvYixHQUFZNWxELEtBQUs0aEQsVUFFckI1aEQsTUFBS2dzRCxVQUFVdDVDLE9BQU8xUyxLQUFLMnJELG9CQUt2QjNyRCxLQUFLcXNELDJCQUE2QnpHLEdBQTRCLEtBQWRBLEdBQXFCNWxELEtBQUs2aEQseUJBRzlFN2hELEtBQUtvc0QscUJBQXFCeEcsR0FDMUI1bEQsS0FBS3FzRCx5QkFBMkJ6RyxFQUc1QjVsRCxLQUFLMC9DLFdBQ1AxL0MsS0FBS3VoRSxZQUVQdmhFLEtBQUtnb0UsdUJBR1BBLG1CQUFvQixXQTBDbEIsUUFBU0MsS0FDSGIsRUFBS25nQixjQUFnQmlnQixHQUN2QkUsRUFBS0Usc0JBM0NULEdBQUkxaEIsR0FBWTVsRCxLQUFLcXNELHlCQUNqQjFGLEVBQWFmLEVBQ2J3aEIsRUFBT3BuRSxJQUlYLElBRkFBLEtBQUs0ckQsZUFBZ0I5NEQsRUFBWTZ6RCxRQUFjbHhELEdBRTNDdUssS0FBSzRyRCxjQUNQLElBQUssR0FBSTM5RCxHQUFJLEVBQUdBLEVBQUkrUixLQUFLMmtELFNBQVM1MUQsT0FBUWQsSUFFeEMsR0FEQTA0RCxFQUFhM21ELEtBQUsya0QsU0FBUzEyRCxHQUFHMDRELEdBQzFCN3pELEVBQVk2ekQsR0FBYSxDQUMzQjNtRCxLQUFLNHJELGVBQWdCLENBQ3JCLE9BSUZsekQsR0FBWXNILEtBQUtpbkQsZUFFbkJqbkQsS0FBS2luRCxZQUFjam5ELEtBQUt5ckQsYUFBYXpyRCxLQUFLd25CLFNBRTVDLElBQUkwL0MsR0FBaUJsbkUsS0FBS2luRCxZQUN0QmtnQixFQUFlbm5FLEtBQUt3a0QsU0FBU0MsVUFBVSxlQUMzQ3prRCxNQUFLZ3JELGdCQUFrQnJFLEVBRW5Cd2dCLElBQ0ZubkUsS0FBS2luRCxZQUFjTixFQUNuQnNoQixLQUtGam9FLEtBQUtzc0QsZ0JBQWdCM0YsRUFBWTNtRCxLQUFLcXNELHlCQUEwQixTQUFTZ2IsR0FDbEVGLElBS0hDLEVBQUtuZ0IsWUFBY29nQixFQUFXMWdCLE1BQWFseEQsR0FDM0N3eUUsUUFXTlgsb0JBQXFCLFdBQ25CdG5FLEtBQUswckQsYUFBYTFyRCxLQUFLd25CLFFBQVN4bkIsS0FBS2luRCxhQUNyQ3YzRCxFQUFRc1EsS0FBS2tyRCxxQkFBc0IsU0FBU2g2QyxHQUMxQyxJQUNFQSxJQUNBLE1BQU92WCxHQUVQcUcsS0FBS2lzRCxtQkFBbUJ0eUQsS0FFekJxRyxPQXNETDhoRCxjQUFlLFNBQVN0eEQsRUFBT3VXLEdBQzdCL0csS0FBSzRoRCxXQUFhcHhELEVBQ2R3UCxLQUFLd2tELFNBQVNDLFVBQVUsb0JBQzFCemtELEtBQUtrb0UsMEJBQTBCbmhFLElBSW5DbWhFLDBCQUEyQixTQUFTbmhFLEdBQ2xDLEdBQUlvaEUsR0FBZ0Jub0UsS0FBS3drRCxTQUFTQyxVQUFVLFdBRXhDOTJELEdBQVN3NkUsRUFBY3BoRSxJQUN6Qm9oRSxFQUFnQkEsRUFBY3BoRSxHQUNyQnBaLEVBQVN3NkUsRUFBdUIsV0FDekNBLEVBQWdCQSxFQUF1QixTQUd6Q25vRSxLQUFLZ3NELFVBQVV0NUMsT0FBTzFTLEtBQUsyckQsa0JBQzNCLElBQUl5YixHQUFPcG5FLElBQ1Btb0UsR0FBZ0IsRUFDbEJub0UsS0FBSzJyRCxrQkFBb0IzckQsS0FBS2dzRCxVQUFVLFdBQ3RDb2IsRUFBS3pGLG9CQUNKd0csR0FDTW5vRSxLQUFLd25CLFFBQVF3akIsTUFBTTlYLFFBQzVCbHpCLEtBQUsyaEUsbUJBRUwzaEUsS0FBS3duQixRQUFRbnJCLE9BQU8sV0FDbEIrcUUsRUFBS3pGLHNCQXdCWHlHLHNCQUF1QixTQUFTeDRELEdBQzlCNVAsS0FBS3drRCxTQUFXeGtELEtBQUt3a0QsU0FBUzZqQixZQUFZejRELEtBcUU5Q3l3QyxJQUNFVyxNQUFPK0osR0FDUDkwRCxJQUFLLFNBQVM0ckMsRUFBUXRkLEdBQ3BCc2QsRUFBT3RkLElBQVksR0FFckJrOEIsTUFBTyxTQUFTNWUsRUFBUXRkLFNBQ2ZzZCxHQUFPdGQsS0FnTWxCLElBa0VJOG1DLElBbEVBaWQsSUFBb0IsYUFBYyxTQUFTeDZELEdBQzdDLE9BQ0VtSSxTQUFVLElBQ1ZILFNBQVUsVUFBVyxTQUFVLG9CQUMvQnhWLFdBQVl5cUQsR0FJWm4wQyxTQUFVLEVBQ1Z4YSxRQUFTLFNBQXdCOUgsR0FJL0IsTUFGQUEsR0FBUTJVLFNBQVM2NEQsSUFBZ0I3NEQsU0FwbkNqQixnQkFvbkMyQ0EsU0FBU20zQyxLQUdsRTNnQyxJQUFLLFNBQXdCdGpCLEVBQU83SCxFQUFTTixFQUFNc3VFLEdBQ2pELEdBQUlpRyxHQUFZakcsRUFBTSxHQUNsQmtHLEVBQVdsRyxFQUFNLElBQU1pRyxFQUFVem9CLGFBQ2pDMm9CLEVBQWNuRyxFQUFNLEVBRXBCbUcsS0FDRkYsRUFBVS9qQixTQUFXaWtCLEVBQVlqa0IsVUFHbkMrakIsRUFBVTNCLHNCQUdWNEIsRUFBU3BILFlBQVltSCxHQUVyQnYwRSxFQUFLZzFCLFNBQVMsT0FBUSxTQUFTMUIsR0FDekJpaEQsRUFBVXJwQixRQUFVNTNCLEdBQ3RCaWhELEVBQVV6b0IsYUFBYXVoQixnQkFBZ0JrSCxFQUFXamhELEtBSXREbnJCLEVBQU02a0IsSUFBSSxXQUFZLFdBQ3BCdW5ELEVBQVV6b0IsYUFBYXdoQixlQUFlaUgsTUFHMUM3b0QsS0FBTSxTQUF5QnZqQixFQUFPN0gsRUFBU04sRUFBTXN1RSxHQVFuRCxRQUFTb0csS0FDUEgsRUFBVXZCLGNBUlosR0FBSXVCLEdBQVlqRyxFQUFNLEVBQ2xCaUcsR0FBVS9qQixTQUFTQyxVQUFVLGFBQy9CbndELEVBQVF3UyxHQUFHeWhFLEVBQVUvakIsU0FBU0MsVUFBVSxZQUFhLFNBQVMvQyxHQUM1RDZtQixFQUFVTCwwQkFBMEJ4bUIsR0FBTUEsRUFBR3RyRCxRQVFqRDlCLEVBQVF3UyxHQUFHLE9BQVEsV0FDYnloRSxFQUFVbmQsV0FFVnQ5QyxFQUFXb2xCLFFBQ2IvMkIsRUFBTWpKLFdBQVd3MUUsR0FFakJ2c0UsRUFBTUUsT0FBT3FzRSxZQVd2QkMsR0FBaUIsdUJBWXJCcGMsSUFBYTczRCxXQVVYK3ZELFVBQVcsU0FBU3hwRCxHQUNsQixNQUFPK0UsTUFBS3dzRCxVQUFVdnhELElBU3hCb3RFLFlBQWEsU0FBU3o0RCxHQUNwQixHQUFJZzVELElBQWEsQ0F1Q2pCLE9BcENBaDVELEdBQVU3ZCxLQUFXNmQsR0FHckJsZ0IsRUFBUWtnQixFQUFxQixTQUFTKytDLEVBQVE5K0QsR0FDN0IsYUFBWDgrRCxFQUNVLE1BQVI5K0QsRUFDRis0RSxHQUFhLEdBRWJoNUQsRUFBUS9mLEdBQU9tUSxLQUFLd3NELFVBQVUzOEQsR0FFbEIsYUFBUkEsSUFDRitmLEVBQVFpNUQsZ0JBQWtCN29FLEtBQUt3c0QsVUFBVXFjLGtCQUlqQyxhQUFSaDVFLElBR0YrZixFQUFRaTVELGlCQUFrQixFQUMxQmo1RCxFQUFRL2YsR0FBTzZULEdBQUtpckQsRUFBT2hnRSxRQUFRZzZFLEdBQWdCLFdBRWpELE1BREEvNEQsR0FBUWk1RCxpQkFBa0IsRUFDbkIsU0FJWjdvRSxNQUVDNG9FLFVBRUtoNUQsR0FBUSxLQUNmNGYsR0FBUzVmLEVBQVM1UCxLQUFLd3NELFlBSXpCaDlCLEdBQVM1ZixFQUFTeTdDLEdBQW9CbUIsV0FFL0IsR0FBSUQsSUFBYTM4QyxLQUs1Qnk3QyxHQUFzQixHQUFJa0IsS0FDeEJ1YyxTQUFVLEdBQ1ZELGlCQUFpQixFQUNqQkUsU0FBVSxFQUNWQyxjQUFjLEVBQ2Q3QixjQUFjLEVBQ2Q3dUUsU0FBVSxNQXFQWixJQUFJMndFLElBQTBCLFdBRTVCLFFBQVNDLEdBQXlCaHlELEVBQVF1TixHQUN4Q3prQixLQUFLbXBFLFFBQVVqeUQsRUFDZmxYLEtBQUt3bkIsUUFBVS9DLEVBV2pCLE1BZEF5a0QsR0FBeUI5K0QsU0FBVyxTQUFVLFVBSzlDOCtELEVBQXlCeDBFLFdBQ3ZCK3NCLFFBQVMsV0FDUCxHQUFJMm5ELEdBQWdCcHBFLEtBQUtxcEUsV0FBYXJwRSxLQUFLcXBFLFdBQVc3a0IsU0FBVzZHLEdBQzdEaWUsRUFBeUJ0cEUsS0FBS3duQixRQUFROG1CLE1BQU10dUMsS0FBS21wRSxRQUFRSSxlQUU3RHZwRSxNQUFLd2tELFNBQVc0a0IsRUFBY2YsWUFBWWlCLE1BSzVDcnpELFNBQVUsSUFFVlcsU0FBVSxHQUNWZCxTQUFVdXpELFdBQVkscUJBQ3RCMXpELGtCQUFrQixFQUNsQnJWLFdBQVk0b0UsSUE4Q1pNLEdBQXlCenFCLElBQWN2aUMsVUFBVSxFQUFNNUYsU0FBVSxNQU1qRTZ5RCxHQUFrQjc3RSxFQUFPLGFBdU96Qjg3RSxHQUFvQixzT0FhcEJDLElBQXNCLFdBQVksWUFBYSxTQUFVLFNBQVMxRixFQUFVcHhELEVBQVd5RixHQUV6RixRQUFTc3hELEdBQXVCQyxFQUFZQyxFQUFlM3RFLEdBc0R6RCxRQUFTNHRFLEdBQU9DLEVBQWFwa0IsRUFBV3FrQixFQUFPQyxFQUFPQyxHQUNwRG5xRSxLQUFLZ3FFLFlBQWNBLEVBQ25CaHFFLEtBQUs0bEQsVUFBWUEsRUFDakI1bEQsS0FBS2lxRSxNQUFRQSxFQUNianFFLEtBQUtrcUUsTUFBUUEsRUFDYmxxRSxLQUFLbXFFLFNBQVdBLEVBR2xCLFFBQVNDLEdBQW9CQyxHQUMzQixHQUFJQyxFQUVKLEtBQUtDLEdBQVd0N0UsRUFBWW83RSxHQUMxQkMsRUFBbUJELE1BQ2QsQ0FFTEMsSUFDQSxLQUFLLEdBQUlFLEtBQVdILEdBQ2RBLEVBQWF0NkUsZUFBZXk2RSxJQUFrQyxNQUF0QkEsRUFBUXh6RSxPQUFPLElBQ3pEc3pFLEVBQWlCcDFFLEtBQUtzMUUsR0FJNUIsTUFBT0YsR0ExRVQsR0FBSTE3RSxHQUFRaTdFLEVBQVdqN0UsTUFBTTg2RSxHQUM3QixLQUFLLEVBQ0gsS0FBTUQsSUFBZ0IsT0FDcEIsMkhBR0FJLEVBQVl6d0UsR0FBWTB3RSxHQU01QixJQUFJVyxHQUFZNzdFLEVBQU0sSUFBTUEsRUFBTSxHQUU5QjI3RSxFQUFVMzdFLEVBQU0sR0FHaEI4N0UsRUFBVyxPQUFPOTJFLEtBQUtoRixFQUFNLEtBQU9BLEVBQU0sR0FFMUMrN0UsRUFBVS83RSxFQUFNLEdBRWhCK0QsRUFBVTJsQixFQUFPMXBCLEVBQU0sR0FBS0EsRUFBTSxHQUFLNjdFLEdBQ3ZDRyxFQUFhRixHQUFZcHlELEVBQU9veUQsR0FDaENHLEVBQWNELEdBQWNqNEUsRUFDNUJtNEUsRUFBWUgsR0FBV3J5RCxFQUFPcXlELEdBSzlCSSxFQUFvQkosRUFDRSxTQUFTbjZFLEVBQU9zYyxHQUFVLE1BQU9nK0QsR0FBVTN1RSxFQUFPMlEsSUFDbEQsU0FBd0J0YyxHQUFTLE1BQU8yWSxJQUFRM1ksSUFDdEV3NkUsRUFBa0IsU0FBU3g2RSxFQUFPWCxHQUNwQyxNQUFPazdFLEdBQWtCdjZFLEVBQU95NkUsRUFBVXo2RSxFQUFPWCxLQUcvQ3E3RSxFQUFZNXlELEVBQU8xcEIsRUFBTSxJQUFNQSxFQUFNLElBQ3JDdThFLEVBQVk3eUQsRUFBTzFwQixFQUFNLElBQU0sSUFDL0J3OEUsRUFBZ0I5eUQsRUFBTzFwQixFQUFNLElBQU0sSUFDbkN5OEUsRUFBVy95RCxFQUFPMXBCLEVBQU0sSUFFeEJrZSxLQUNBbStELEVBQVlWLEVBQVUsU0FBUy81RSxFQUFPWCxHQUd4QyxNQUZBaWQsR0FBT3k5RCxHQUFXMTZFLEVBQ2xCaWQsRUFBTzI5RCxHQUFhajZFLEVBQ2JzYyxHQUNMLFNBQVN0YyxHQUVYLE1BREFzYyxHQUFPMjlELEdBQWFqNkUsRUFDYnNjLEVBNkJULFFBQ0U2OUQsUUFBU0EsRUFDVEssZ0JBQWlCQSxFQUNqQk0sY0FBZWh6RCxFQUFPK3lELEVBQVUsU0FBU2hCLEdBSXZDLEdBQUlrQixLQUNKbEIsR0FBZUEsS0FJZixLQUFLLEdBRkRDLEdBQW1CRixFQUFvQkMsR0FDdkNtQixFQUFxQmxCLEVBQWlCdjdFLE9BQ2pDRixFQUFRLEVBQUdBLEVBQVEyOEUsRUFBb0IzOEUsSUFBUyxDQUN2RCxHQUFJZ0IsR0FBT3c2RSxJQUFpQkMsRUFBb0J6N0UsRUFBUXk3RSxFQUFpQno3RSxHQUNyRTJCLEVBQVE2NUUsRUFBYXg2RSxHQUVyQmlkLEVBQVNtK0QsRUFBVXo2RSxFQUFPWCxHQUMxQm02RSxFQUFjZSxFQUFrQnY2RSxFQUFPc2MsRUFJM0MsSUFIQXkrRCxFQUFhcjJFLEtBQUs4MEUsR0FHZHA3RSxFQUFNLElBQU1BLEVBQU0sR0FBSSxDQUN4QixHQUFJcTdFLEdBQVFpQixFQUFVL3VFLEVBQU8yUSxFQUM3QnkrRCxHQUFhcjJFLEtBQUsrMEUsR0FJcEIsR0FBSXI3RSxFQUFNLEdBQUksQ0FDWixHQUFJNjhFLEdBQWNMLEVBQWNqdkUsRUFBTzJRLEVBQ3ZDeStELEdBQWFyMkUsS0FBS3UyRSxJQUd0QixNQUFPRixLQUdURyxXQUFZLFdBV1YsSUFBSyxHQVREQyxNQUNBQyxLQUlBdkIsRUFBZWdCLEVBQVNsdkUsT0FDeEJtdUUsRUFBbUJGLEVBQW9CQyxHQUN2Q21CLEVBQXFCbEIsRUFBaUJ2N0UsT0FFakNGLEVBQVEsRUFBR0EsRUFBUTI4RSxFQUFvQjM4RSxJQUFTLENBQ3ZELEdBQUlnQixHQUFPdzZFLElBQWlCQyxFQUFvQno3RSxFQUFReTdFLEVBQWlCejdFLEdBQ3JFMkIsRUFBUTY1RSxFQUFheDZFLEdBQ3JCaWQsRUFBU20rRCxFQUFVejZFLEVBQU9YLEdBQzFCKzFELEVBQVlpbEIsRUFBWTF1RSxFQUFPMlEsR0FDL0JrOUQsRUFBY2UsRUFBa0JubEIsRUFBVzk0QyxHQUMzQ205RCxFQUFRaUIsRUFBVS91RSxFQUFPMlEsR0FDekJvOUQsRUFBUWlCLEVBQVVodkUsRUFBTzJRLEdBQ3pCcTlELEVBQVdpQixFQUFjanZFLEVBQU8yUSxHQUNoQysrRCxFQUFhLEdBQUk5QixHQUFPQyxFQUFhcGtCLEVBQVdxa0IsRUFBT0MsRUFBT0MsRUFFbEV3QixHQUFZejJFLEtBQUsyMkUsR0FDakJELEVBQWU1QixHQUFlNkIsRUFHaEMsT0FDRTEzRSxNQUFPdzNFLEVBQ1BDLGVBQWdCQSxFQUNoQkUsdUJBQXdCLFNBQVN0N0UsR0FDL0IsTUFBT283RSxHQUFlWixFQUFnQng2RSxLQUV4Q3U3RSx1QkFBd0IsU0FBU3BkLEdBRy9CLE1BQU9nYyxHQUFVNzFFLEVBQUs2NUQsRUFBTy9JLFdBQWErSSxFQUFPL0ksY0FjekQsUUFBU29tQixHQUFrQjd2RSxFQUFPMnRFLEVBQWU5MUUsRUFBTXN1RSxHQXlMckQsUUFBUzJKLEdBQWlCdGQsRUFBUXQ4RCxHQUNoQyxHQUFJNjVFLEdBQWdCQyxFQUFldjZFLFdBQVUsRUFDN0NTLEdBQU9nUSxZQUFZNnBFLEdBQ25CRSxFQUFvQnpkLEVBQVF1ZCxHQUc5QixRQUFTRyxHQUEyQnptQixHQUNsQyxHQUFJK0ksR0FBUy8rQyxFQUFRazhELHVCQUF1QmxtQixHQUN4Q3R4RCxFQUFVcTZELEdBQVVBLEVBQU9yNkQsT0FJL0IsT0FGSUEsS0FBWUEsRUFBUWc4RCxXQUFVaDhELEVBQVFnOEQsVUFBVyxHQUU5QzNCLEVBR1QsUUFBU3lkLEdBQW9CemQsRUFBUXI2RCxHQUNuQ3E2RCxFQUFPcjZELFFBQVVBLEVBQ2pCQSxFQUFRNjFFLFNBQVd4YixFQUFPd2IsU0FPdEJ4YixFQUFPc2IsUUFBVTMxRSxFQUFRMjFFLFFBQzNCMzFFLEVBQVEyMUUsTUFBUXRiLEVBQU9zYixNQUN2QjMxRSxFQUFRME8sWUFBYzJyRCxFQUFPc2IsT0FFL0IzMUUsRUFBUTlELE1BQVFtK0QsRUFBT3FiLFlBR3pCLFFBQVNzQyxLQUNQLEdBQUlqa0QsR0FBZ0J6WSxHQUFXMjhELEVBQVdDLFdBTzFDLElBQUk1OEQsRUFFRixJQUFLLEdBQUkzaEIsR0FBSTJoQixFQUFRemIsTUFBTXBGLE9BQVMsRUFBR2QsR0FBSyxFQUFHQSxJQUFLLENBQ2xELEdBQUkwZ0UsR0FBUy8rQyxFQUFRemIsTUFBTWxHLEVBRXpCc1ksSUFERWpaLEVBQVVxaEUsRUFBT3ViLE9BQ052YixFQUFPcjZELFFBQVFnUCxXQUVmcXJELEVBQU9yNkQsU0FLMUJzYixFQUFVNjhELEVBQVVmLFlBRXBCLElBQUlnQixLQXNDSixJQXBDQTk4RCxFQUFRemIsTUFBTXpFLFFBQVEsU0FBbUJpL0QsR0FDdkMsR0FBSWdlLEVBRUFyL0UsR0FBVXFoRSxFQUFPdWIsUUFJbkJ5QyxFQUFlRCxFQUFnQi9kLEVBQU91YixPQUVqQ3lDLElBRUhBLEVBQWVDLEVBQWlCaDdFLFdBQVUsR0FDMUNpN0UsRUFBYXhxRSxZQUFZc3FFLEdBSXpCQSxFQUFhMUMsTUFBeUIsT0FBakJ0YixFQUFPdWIsTUFBaUIsT0FBU3ZiLEVBQU91YixNQUc3RHdDLEVBQWdCL2QsRUFBT3ViLE9BQVN5QyxHQUdsQ1YsRUFBaUJ0ZCxFQUFRZ2UsSUFLekJWLEVBQWlCdGQsRUFBUWtlLEtBSTdCL0MsRUFBYyxHQUFHem5FLFlBQVl3cUUsR0FFN0JDLEVBQVlwcUIsV0FHUG9xQixFQUFZeHJCLFNBQVNqNUIsR0FBZ0IsQ0FDeEMsR0FBSTBrRCxHQUFZUixFQUFXQyxhQUNOQyxFQUFVOUIsU0FBV3RhLEVBQ3BCNzVELEVBQU82eEIsRUFBZTBrRCxHQUFhMWtELElBQWtCMGtELEtBQ3pFRCxFQUFZaHJCLGNBQWNpckIsR0FDMUJELEVBQVlwcUIsWUFqUmxCLElBQUssR0FORDZwQixHQUFhakssRUFBTSxHQUNuQndLLEVBQWN4SyxFQUFNLEdBQ3BCalMsRUFBV3I4RCxFQUFLcThELFNBSVhwaUUsRUFBSSxFQUFHZ2pFLEVBQVc2WSxFQUFjN1ksV0FBWS8vRCxFQUFLKy9ELEVBQVNsaUUsT0FBUWQsRUFBSWlELEVBQUlqRCxJQUNqRixHQUEwQixLQUF0QmdqRSxFQUFTaGpFLEdBQUd1QyxNQUFjLENBQzVCKzdFLEVBQVdTLGdCQUFpQixFQUM1QlQsRUFBV1UsWUFBY2hjLEVBQVNsbEIsR0FBRzk5QyxFQUNyQyxPQUtKNjdFLEVBQWN6d0UsT0FFZCxJQUFJNnpFLEtBQXdCWCxFQUFXVSxXQUVuQjM5RSxJQUFPNjhFLEVBQWV2NkUsV0FBVSxJQUN0Q2dHLElBQUksSUFFbEIsSUFBSWdZLEdBQ0E2OEQsRUFBWTdDLEVBQXVCNTFFLEVBQUt5NEUsVUFBVzNDLEVBQWUzdEUsR0FJbEUwd0UsRUFBZWg2RCxFQUFVLEdBQUcxUSx3QkFHaENvcUUsR0FBV1ksMkJBQTZCLFNBQVN2MUU7MENBQy9DLE1BQU8sS0FJSnk0RCxHQXdESGtjLEVBQVdhLFdBQWEsU0FBZ0N2aEQsR0FFdEQsR0FBS2pjLEVBQUwsQ0FJQSxHQUFJeTlELEdBQWtCeGhELEdBQVVBLEVBQU9yOUIsSUFBSTY5RSxNQUUzQ3o4RCxHQUFRemIsTUFBTXpFLFFBQVEsU0FBU2kvRCxHQUN6QkEsRUFBT3I2RCxRQUFRZzhELFdBQWE5N0QsRUFBUzY0RSxFQUFpQjFlLEtBQ3hEQSxFQUFPcjZELFFBQVFnOEQsVUFBVyxPQU1oQ2ljLEVBQVdDLFVBQVksV0FDckIsR0FBSWMsR0FBaUJ4RCxFQUFjbHlFLFVBQy9CMjFFLElBT0osT0FMQTc5RSxHQUFRNDlFLEVBQWdCLFNBQVM5OEUsR0FDL0IsR0FBSW0rRCxHQUFTLytDLEVBQVFnOEQsZUFBZXA3RSxFQUNoQ20rRCxLQUFXQSxFQUFPd2IsVUFBVW9ELEVBQVdyNEUsS0FBSzBhLEVBQVFtOEQsdUJBQXVCcGQsTUFHMUU0ZSxHQUtMZCxFQUFVOUIsU0FFWnh1RSxFQUFNb3RCLGlCQUFpQixXQUNyQixHQUFJbjZCLEdBQVEwOUUsRUFBWWxyQixZQUN0QixNQUFPa3JCLEdBQVlsckIsV0FBV3B6RCxJQUFJLFNBQVNnQyxHQUN6QyxNQUFPaThFLEdBQVV6QixnQkFBZ0J4NkUsTUFHcEMsV0FDRHM4RSxFQUFZcHFCLGNBN0ZoQjZwQixFQUFXYSxXQUFhLFNBQTZCNThFLEdBRW5ELEdBQUtvZixFQUFMLENBRUEsR0FBSTQ5RCxHQUFpQjFELEVBQWMsR0FBR2w2RCxRQUFRazZELEVBQWMsR0FBRzJELGVBQzNEOWUsRUFBUy8rQyxFQUFRazhELHVCQUF1QnQ3RSxFQUl4Q2c5RSxJQUFnQkEsRUFBZTFkLGdCQUFnQixZQUUvQ25CLEdBTUVtYixFQUFjLEdBQUd0NUUsUUFBVW0rRCxFQUFPcWIsY0FDcEN1QyxFQUFXbUIsc0JBRVg1RCxFQUFjLEdBQUd0NUUsTUFBUW0rRCxFQUFPcWIsWUFDaENyYixFQUFPcjZELFFBQVFnOEQsVUFBVyxHQUc1QjNCLEVBQU9yNkQsUUFBUW1SLGFBQWEsV0FBWSxhQUV4QzhtRSxFQUFXb0IsMkJBQTJCbjlFLEtBSTFDKzdFLEVBQVdDLFVBQVksV0FFckIsR0FBSWdCLEdBQWlCNTlELEVBQVFnOEQsZUFBZTlCLEVBQWNseUUsTUFFMUQsT0FBSTQxRSxLQUFtQkEsRUFBZXJELFVBQ3BDb0MsRUFBV3FCLHNCQUNYckIsRUFBV21CLHNCQUNKOTlELEVBQVFtOEQsdUJBQXVCeUIsSUFFakMsTUFNTGYsRUFBVTlCLFNBQ1p4dUUsRUFBTWhKLE9BQ0osV0FBYSxNQUFPczVFLEdBQVV6QixnQkFBZ0I4QixFQUFZbHJCLGFBQzFELFdBQWFrckIsRUFBWXBxQixhQW1EM0J3cUIsSUFHRmpKLEVBQVNzSSxFQUFXVSxhQUFhOXdFLEdBRWpDMnRFLEVBQWMzWSxRQUFRb2IsRUFBV1UsYUFFN0JWLEVBQVdVLFlBQVksR0FBR3h6RSxXQUFhNmtCLElBR3pDaXVELEVBQVdTLGdCQUFpQixFQUs1QlQsRUFBV3NCLGVBQWlCLFNBQVNDLEVBQWFwaEIsR0FDekIsS0FBbkJBLEVBQVM5MEQsUUFDWDIwRSxFQUFXUyxnQkFBaUIsRUFDNUJULEVBQVdVLFlBQWN2Z0IsRUFDekI2ZixFQUFXVSxZQUFZL2pFLFlBQVksWUFFbkM0akUsRUFBWXBxQixVQUVaZ0ssRUFBUzVsRCxHQUFHLFdBQVksV0FDdEIsR0FBSWluRSxHQUFnQnhCLEVBQVd5Qix3QkFFL0J6QixHQUFXUyxnQkFBaUIsRUFDNUJULEVBQVdVLGdCQUFjeDNFLEdBRXJCczRFLEdBQWVqQixFQUFZcHFCLGVBUXJDNnBCLEVBQVdVLFlBQVkvakUsWUFBWSxhQU12Qy9NLEVBQU1vdEIsaUJBQWlCa2pELEVBQVVuQixjQUFlZ0IsR0F4THBELEdBQUlILEdBQWlCbC9FLEVBQU80SyxTQUFTeUssY0FBYyxVQUMvQ3NxRSxFQUFtQjMvRSxFQUFPNEssU0FBU3lLLGNBQWMsV0FpU3JELFFBQ0UyVCxTQUFVLElBQ1Z1RyxVQUFVLEVBQ1YxRyxTQUFVLFNBQVUsV0FDcEJ4QyxNQUNFbU0sSUFBSyxTQUEwQnRqQixFQUFPMnRFLEVBQWU5MUUsRUFBTXN1RSxHQUl6REEsRUFBTSxHQUFHdUwsZUFBaUJyN0UsR0FFNUJrdEIsS0FBTXNzRCxNQW9MUmlDLElBQXdCLFVBQVcsZUFBZ0IsT0FBUSxTQUFTajNCLEVBQVM1K0IsRUFBY3RJLEdBQzdGLEdBQUlvK0QsR0FBUSxNQUNSQyxFQUFVLG9CQUVkLFFBQ0U3NkQsS0FBTSxTQUFTblgsRUFBTzdILEVBQVNOLEdBb0Q3QixRQUFTbzZFLEdBQWtCQyxHQUN6Qi81RSxFQUFRZ3lCLEtBQUsrbkQsR0FBVyxJQXBEMUIsR0FTSUMsR0FUQUMsRUFBWXY2RSxFQUFLK2tDLE1BQ2pCeTFDLEVBQVV4NkUsRUFBS2lsQixNQUFNaXZCLE1BQVE1ekMsRUFBUU4sS0FBS0EsRUFBS2lsQixNQUFNaXZCLE1BQ3JELzVCLEVBQVNuYSxFQUFLbWEsUUFBVSxFQUN4QnNnRSxFQUFRdHlFLEVBQU1teUMsTUFBTWtnQyxPQUNwQkUsS0FDQXpqRCxFQUFjN1MsRUFBYTZTLGNBQzNCQyxFQUFZOVMsRUFBYThTLFlBQ3pCeWpELEVBQW1CMWpELEVBQWNzakQsRUFBWSxJQUFNcGdFLEVBQVMrYyxFQUM1RDBqRCxFQUFlbnlFLEdBQVFqSyxJQUczQjlDLEdBQVFzRSxFQUFNLFNBQVMyNEIsRUFBWWtpRCxHQUNqQyxHQUFJQyxHQUFXWCxFQUFRM3JFLEtBQUtxc0UsRUFDNUIsSUFBSUMsRUFBVSxDQUNaLEdBQUlDLElBQVdELEVBQVMsR0FBSyxJQUFNLElBQU12NkUsR0FBVXU2RSxFQUFTLEdBQzVETCxHQUFNTSxHQUFXejZFLEVBQVFOLEtBQUtBLEVBQUtpbEIsTUFBTTQxRCxPQUc3Q24vRSxFQUFRKytFLEVBQU8sU0FBUzloRCxFQUFZOThCLEdBQ2xDNitFLEVBQVk3K0UsR0FBT3VvQixFQUFhdVUsRUFBV2grQixRQUFRdS9FLEVBQU9TLE1BSTVEeHlFLEVBQU1oSixPQUFPbzdFLEVBQVcsU0FBZ0NuL0QsR0FDdEQsR0FBSTJwQixHQUFRNmpCLFdBQVd4dEMsR0FDbkI0L0QsRUFBYXQyRSxHQUFZcWdDLEVBVTdCLElBUktpMkMsR0FBZ0JqMkMsSUFBUzAxQyxLQUc1QjExQyxFQUFRaWUsRUFBUWk0QixVQUFVbDJDLEVBQVE1cUIsTUFLL0I0cUIsSUFBVXUxQyxHQUFnQlUsR0FBY3QyRSxHQUFZNDFFLElBQWEsQ0FDcEVNLEdBQ0EsSUFBSU0sR0FBWVIsRUFBWTMxQyxFQUN4QmptQyxHQUFZbzhFLElBQ0EsTUFBVjkvRCxHQUNGVSxFQUFLK3VCLE1BQU0scUNBQXdDOUYsRUFBUSxRQUFXeTFDLEdBRXhFSSxFQUFlcDhFLEVBQ2Y0N0UsS0FFQVEsRUFBZXp5RSxFQUFNaEosT0FBTys3RSxFQUFXZCxHQUV6Q0UsRUFBWXYxQyxTQThWbEJvMkMsSUFBcUIsU0FBVSxXQUFZLFdBQVksU0FBUzcyRCxFQUFRRyxFQUFVd3JELEdBQ3BGLEdBQ0ltTCxHQUFpQnhoRixFQUFPLFlBRXhCeWhGLEVBQWMsU0FBU2x6RSxFQUFPdE4sRUFBT3lnRixFQUFpQjkrRSxFQUFPKytFLEVBQWUxL0UsRUFBSzIvRSxHQUVuRnJ6RSxFQUFNbXpFLEdBQW1COStFLEVBQ3JCKytFLElBQWVwekUsRUFBTW96RSxHQUFpQjEvRSxHQUMxQ3NNLEVBQU0ydUQsT0FBU2o4RCxFQUNmc04sRUFBTXN6RSxPQUFvQixJQUFWNWdGLEVBQ2hCc04sRUFBTXV6RSxNQUFTN2dGLElBQVcyZ0YsRUFBYyxFQUN4Q3J6RSxFQUFNd3pFLFVBQVl4ekUsRUFBTXN6RSxRQUFVdHpFLEVBQU11ekUsT0FFeEN2ekUsRUFBTXl6RSxPQUFTenpFLEVBQU0wekUsTUFBd0IsSUFBUCxFQUFSaGhGLEtBRzVCaWhGLEVBQWdCLFNBQVNwdkUsR0FDM0IsTUFBT0EsR0FBTTVPLE1BQU0sSUFHakJpK0UsRUFBYyxTQUFTcnZFLEdBQ3pCLE1BQU9BLEdBQU01TyxNQUFNNE8sRUFBTTVPLE1BQU0vQyxPQUFTLEdBSTFDLFFBQ0VrbkIsU0FBVSxJQUNWOE8sY0FBYyxFQUNkeE4sV0FBWSxVQUNaWCxTQUFVLElBQ1Y0RixVQUFVLEVBQ1ZvRyxPQUFPLEVBQ1B4bUIsUUFBUyxTQUF5QjZhLEVBQVVnQyxHQUMxQyxHQUFJMFQsR0FBYTFULEVBQU0rMkQsU0FDbkJDLEVBQXFCaE0sRUFBU2xoRCxnQkFBZ0IsZUFBZ0I0SixHQUU5RC85QixFQUFRKzlCLEVBQVcvOUIsTUFBTSw2RkFFN0IsS0FBS0EsRUFDSCxLQUFNd2dGLEdBQWUsT0FBUSx5RkFDekJ6aUQsRUFHTixJQUFJNnhDLEdBQU01dkUsRUFBTSxHQUNaMnZFLEVBQU0zdkUsRUFBTSxHQUNac2hGLEVBQVV0aEYsRUFBTSxHQUNoQnVoRixFQUFhdmhGLEVBQU0sRUFJdkIsTUFGQUEsRUFBUTR2RSxFQUFJNXZFLE1BQU0sd0RBR2hCLEtBQU13Z0YsR0FBZSxTQUFVLGdIQUMzQjVRLEVBRU4sSUFBSThRLEdBQWtCMWdGLEVBQU0sSUFBTUEsRUFBTSxHQUNwQzJnRixFQUFnQjNnRixFQUFNLEVBRTFCLElBQUlzaEYsS0FBYSw2QkFBNkJ0OEUsS0FBS3M4RSxJQUMvQyw0RkFBNEZ0OEUsS0FBS3M4RSxJQUNuRyxLQUFNZCxHQUFlLFdBQVkseUZBQy9CYyxFQUdKLElBQUlFLEdBQWtCQyxFQUFnQkMsRUFBa0JDLEVBQ3BEQyxHQUFnQm5tQyxJQUFLbGhDLEdBYXpCLE9BWElnbkUsR0FDRkMsRUFBbUI5M0QsRUFBTzYzRCxJQUUxQkcsRUFBbUIsU0FBU3pnRixFQUFLVyxHQUMvQixNQUFPMlksSUFBUTNZLElBRWpCKy9FLEVBQWlCLFNBQVMxZ0YsR0FDeEIsTUFBT0EsS0FJSixTQUFzQjQwQixFQUFReE4sRUFBVWdDLEVBQU9zbkMsRUFBTTc3QixHQUV0RDByRCxJQUNGQyxFQUFpQixTQUFTeGdGLEVBQUtXLEVBQU8zQixHQUtwQyxNQUhJMGdGLEtBQWVpQixFQUFhakIsR0FBaUIxL0UsR0FDakQyZ0YsRUFBYWxCLEdBQW1COStFLEVBQ2hDZ2dGLEVBQWExbEIsT0FBU2o4RCxFQUNmdWhGLEVBQWlCM3JELEVBQVErckQsSUFZcEMsSUFBSUMsR0FBZTE1RSxJQUduQjB0QixHQUFPOEUsaUJBQWlCZzFDLEVBQUssU0FBd0JqcEQsR0FDbkQsR0FBSXptQixHQUFPRSxFQUdQMmhGLEVBSUFDLEVBQ0E5Z0YsRUFBS1csRUFDTG9nRixFQUNBQyxFQUNBQyxFQUNBcHdFLEVBQ0Fxd0UsRUFDQXBwRCxFQWJBcXBELEVBQWUvNUQsRUFBUyxHQUt4Qmc2RCxFQUFlbDZFLElBY25CLElBSkltNUUsSUFDRnpyRCxFQUFPeXJELEdBQVc1NkQsR0FHaEJybUIsRUFBWXFtQixHQUNkdzdELEVBQWlCeDdELEVBQ2pCdTdELEVBQWNSLEdBQWtCQyxNQUMzQixDQUNMTyxFQUFjUixHQUFrQkUsRUFFaENPLElBQ0EsS0FBSyxHQUFJdEcsS0FBV2wxRCxHQUNkdmxCLEdBQWVDLEtBQUtzbEIsRUFBWWsxRCxJQUFrQyxNQUF0QkEsRUFBUXh6RSxPQUFPLElBQzdEODVFLEVBQWU1N0UsS0FBS3MxRSxHQVMxQixJQUpBbUcsRUFBbUJHLEVBQWUvaEYsT0FDbENnaUYsRUFBaUIsR0FBSXZoRixPQUFNbWhGLEdBR3RCOWhGLEVBQVEsRUFBR0EsRUFBUThoRixFQUFrQjloRixJQUl4QyxHQUhBZ0IsRUFBT3lsQixJQUFldzdELEVBQWtCamlGLEVBQVFpaUYsRUFBZWppRixHQUMvRDJCLEVBQVE4a0IsRUFBV3psQixHQUNuQitnRixFQUFZQyxFQUFZaGhGLEVBQUtXLEVBQU8zQixHQUNoQzRoRixFQUFhRyxHQUVmbHdFLEVBQVErdkUsRUFBYUcsU0FDZEgsR0FBYUcsR0FDcEJLLEVBQWFMLEdBQWFsd0UsRUFDMUJxd0UsRUFBZWxpRixHQUFTNlIsTUFDbkIsQ0FBQSxHQUFJdXdFLEVBQWFMLEdBS3RCLEtBSEFsaEYsR0FBUXFoRixFQUFnQixTQUFTcndFLEdBQzNCQSxHQUFTQSxFQUFNdkUsUUFBT3MwRSxFQUFhL3ZFLEVBQU1tVCxJQUFNblQsS0FFL0MwdUUsRUFBZSxRQUNqQixzSkFDQXppRCxFQUFZaWtELEVBQVdwZ0YsRUFHM0J1Z0YsR0FBZWxpRixJQUFVZ2xCLEdBQUkrOEQsRUFBV3owRSxVQUFPMUcsR0FBVzNELFVBQU8yRCxJQUNqRXc3RSxFQUFhTCxJQUFhLEVBSzlCLElBQUssR0FBSU0sS0FBWVQsR0FBYyxDQUlqQyxHQUhBL3ZFLEVBQVErdkUsRUFBYVMsR0FDckJ2cEQsRUFBbUJ4cEIsR0FBY3VDLEVBQU01TyxPQUN2QzJtQixFQUFTODdDLE1BQU01c0MsR0FDWEEsRUFBaUIsR0FBR3JrQixXQUd0QixJQUFLelUsRUFBUSxFQUFHRSxFQUFTNDRCLEVBQWlCNTRCLE9BQVFGLEVBQVFFLEVBQVFGLElBQ2hFODRCLEVBQWlCOTRCLEdBQWlCLGNBQUksQ0FHMUM2UixHQUFNdkUsTUFBTTRJLFdBSWQsSUFBS2xXLEVBQVEsRUFBR0EsRUFBUThoRixFQUFrQjloRixJQUt4QyxHQUpBZ0IsRUFBT3lsQixJQUFldzdELEVBQWtCamlGLEVBQVFpaUYsRUFBZWppRixHQUMvRDJCLEVBQVE4a0IsRUFBV3psQixHQUNuQjZRLEVBQVFxd0UsRUFBZWxpRixHQUVuQjZSLEVBQU12RSxNQUFPLENBSWZ1MEUsRUFBV00sQ0FHWCxJQUNFTixFQUFXQSxFQUFTbnlFLGtCQUNibXlFLEdBQVlBLEVBQW1CLGFBRXBDWixHQUFjcHZFLEtBQVdnd0UsR0FFM0JqNEQsRUFBUzY3QyxLQUFLbjJELEdBQWN1QyxFQUFNNU8sT0FBUSxLQUFNay9FLEdBRWxEQSxFQUFlakIsRUFBWXJ2RSxHQUMzQjJ1RSxFQUFZM3VFLEVBQU12RSxNQUFPdE4sRUFBT3lnRixFQUFpQjkrRSxFQUFPKytFLEVBQWUxL0UsRUFBSzhnRixPQUc1RWpzRCxHQUFZLFNBQTRCNXlCLEVBQU9xSyxHQUM3Q3VFLEVBQU12RSxNQUFRQSxDQUVkLElBQUltQyxHQUFVMnhFLEVBQW1CcitFLFdBQVUsRUFDM0NFLEdBQU1BLEVBQU0vQyxVQUFZdVAsRUFFeEJtYSxFQUFTNDdDLE1BQU12aUUsRUFBTyxLQUFNay9FLEdBQzVCQSxFQUFlMXlFLEVBSWZvQyxFQUFNNU8sTUFBUUEsRUFDZG0vRSxFQUFhdndFLEVBQU1tVCxJQUFNblQsRUFDekIydUUsRUFBWTN1RSxFQUFNdkUsTUFBT3ROLEVBQU95Z0YsRUFBaUI5K0UsRUFBTysrRSxFQUFlMS9FLEVBQUs4Z0YsSUFJbEZGLEdBQWVRLFNBZ01yQkUsSUFBbUIsV0FBWSxTQUFTMTRELEdBQzFDLE9BQ0V4QyxTQUFVLElBQ1Y4TyxjQUFjLEVBQ2R6UixLQUFNLFNBQVNuWCxFQUFPN0gsRUFBU04sR0FDN0JtSSxFQUFNaEosT0FBT2EsRUFBS285RSxPQUFRLFNBQTJCNWdGLEdBS25EaW9CLEVBQVNqb0IsRUFBUSxjQUFnQixZQUFZOEQsRUFuTWpDLFdBb01WcWdFLFlBbk1zQiwwQkFtWTVCMGMsSUFBbUIsV0FBWSxTQUFTNTRELEdBQzFDLE9BQ0V4QyxTQUFVLElBQ1Y4TyxjQUFjLEVBQ2R6UixLQUFNLFNBQVNuWCxFQUFPN0gsRUFBU04sR0FDN0JtSSxFQUFNaEosT0FBT2EsRUFBS3M5RSxPQUFRLFNBQTJCOWdGLEdBR25EaW9CLEVBQVNqb0IsRUFBUSxXQUFhLGVBQWU4RCxFQTVZakMsV0E2WVZxZ0UsWUE1WXNCLDBCQXNjNUI0YyxHQUFtQnh5QixHQUFZLFNBQVM1aUQsRUFBTzdILEVBQVNOLEdBQzFEbUksRUFBTWhKLE9BQU9hLEVBQUt3OUUsUUFBUyxTQUE0QkMsRUFBV0MsR0FDNURBLEdBQWNELElBQWNDLEdBQzlCaGlGLEVBQVFnaUYsRUFBVyxTQUFTOTVFLEVBQUswVyxHQUFTaGEsRUFBUXk3RCxJQUFJemhELEVBQU8sTUFFM0RtakUsR0FBV245RSxFQUFReTdELElBQUkwaEIsS0FDMUIsS0E0SURFLElBQXFCLFdBQVksV0FBWSxTQUFTbDVELEVBQVV3ckQsR0FDbEUsT0FDRW51RCxRQUFTLFdBR1R4VixZQUFhLFNBQVUsV0FDdEJOLEtBQUs0eEUsV0FFTnQrRCxLQUFNLFNBQVNuWCxFQUFPN0gsRUFBU04sRUFBTTY5RSxHQUNuQyxHQUFJQyxHQUFZOTlFLEVBQUsrOUUsVUFBWS85RSxFQUFLOFMsR0FDbENrckUsS0FDQUMsS0FDQUMsS0FDQUMsS0FFQUMsRUFBZ0IsU0FBUzM5RSxFQUFPNUYsR0FDaEMsTUFBTyxVQUFTNmlDLElBQ0csSUFBYkEsR0FBb0JqOUIsRUFBTUksT0FBT2hHLEVBQU8sSUFJbERzTixHQUFNaEosT0FBTzIrRSxFQUFXLFNBQTZCdGhGLEdBSW5ELElBSEEsR0FBSXZDLEdBQUdpRCxFQUdBZ2hGLEVBQXdCbmpGLFFBQzdCMHBCLEVBQVMvRixPQUFPdy9ELEVBQXdCL2hFLE1BRzFDLEtBQUtsaUIsRUFBSSxFQUFHaUQsRUFBS2loRixFQUFlcGpGLE9BQVFkLEVBQUlpRCxJQUFNakQsRUFBRyxDQUNuRCxHQUFJcWlFLEdBQVdueUQsR0FBYzh6RSxFQUFpQmhrRixHQUFHNkQsTUFDakRxZ0YsR0FBZWxrRixHQUFHOFcsWUFDTG10RSxFQUF3QmprRixHQUFLd3FCLEVBQVM4N0MsTUFBTWpFLElBQ2xEbjlCLEtBQUtpL0MsRUFBY0YsRUFBeUJqa0YsSUFHckRna0YsRUFBaUJsakYsT0FBUyxFQUMxQm9qRixFQUFlcGpGLE9BQVMsR0FFbkJpakYsRUFBc0JILEVBQW1CRCxNQUFNLElBQU1waEYsSUFBVXFoRixFQUFtQkQsTUFBTSxPQUMzRmxpRixFQUFRc2lGLEVBQXFCLFNBQVNLLEdBQ3BDQSxFQUFtQjk2RCxXQUFXLFNBQVMrNkQsRUFBYUMsR0FDbERKLEVBQWVqOUUsS0FBS3E5RSxFQUNwQixJQUFJQyxHQUFTSCxFQUFtQi85RSxPQUNoQ2crRSxHQUFZQSxFQUFZdmpGLFVBQVlrMUUsRUFBU2xoRCxnQkFBZ0IsbUJBQzdELElBQUlyaUIsSUFBVTVPLE1BQU93Z0YsRUFFckJMLEdBQWlCLzhFLEtBQUt3TCxHQUN0QitYLEVBQVM0N0MsTUFBTWllLEVBQWFFLEVBQU9uZ0YsU0FBVW1nRixhQVN2REMsR0FBd0IxekIsSUFDMUJ4bkMsV0FBWSxVQUNaWCxTQUFVLEtBQ1ZkLFFBQVMsWUFDVGlQLGNBQWMsRUFDZHpSLEtBQU0sU0FBU25YLEVBQU83SCxFQUFTNG5CLEVBQU9xa0MsRUFBTTc3QixHQU8xQ2gxQixFQUxZd3NCLEVBQU13MkQsYUFBYXQrRSxNQUFNOG5CLEVBQU15MkQsdUJBQXVCdGlGLE9BQU9nUSxPQUV2RSxTQUFTL0wsRUFBU3pGLEVBQU80RixHQUFTLE1BQU9BLEdBQU01RixFQUFRLEtBQU95RixJQUdqRCxTQUFTcytFLEdBQ3RCcnlCLEVBQUtxeEIsTUFBTSxJQUFNZ0IsR0FBYXJ5QixFQUFLcXhCLE1BQU0sSUFBTWdCLE9BQy9DcnlCLEVBQUtxeEIsTUFBTSxJQUFNZ0IsR0FBVTE5RSxNQUFPcWlCLFdBQVltTixFQUFhcHdCLFFBQVNBLFNBS3RFdStFLEdBQTJCOXpCLElBQzdCeG5DLFdBQVksVUFDWlgsU0FBVSxLQUNWZCxRQUFTLFlBQ1RpUCxjQUFjLEVBQ2R6UixLQUFNLFNBQVNuWCxFQUFPN0gsRUFBU04sRUFBTXVzRCxFQUFNNzdCLEdBQ3pDNjdCLEVBQUtxeEIsTUFBTSxLQUFRcnhCLEVBQUtxeEIsTUFBTSxTQUM5QnJ4QixFQUFLcXhCLE1BQU0sS0FBSzE4RSxNQUFPcWlCLFdBQVltTixFQUFhcHdCLFFBQVNBLE9Ba0t6RHcrRSxHQUFxQmxsRixFQUFPLGdCQUM1Qm1sRixJQUF5QixXQUFZLFNBQVM5TyxHQUNoRCxPQUNFaHVELFNBQVUsTUFDVnVHLFVBQVUsRUFDVnBnQixRQUFTLFNBQTZCMmEsR0FHcEMsR0FBSWk4RCxHQUFpQi9PLEVBQVNsdEQsRUFBU3VNLFdBR3ZDLE9BRkF2TSxHQUFTMWQsUUFFRixTQUE4Qm9yQixFQUFReE4sRUFBVUMsRUFBUTVXLEVBQVlva0IsR0F5QnpFLFFBQVN1dUQsR0FBMEJuaEYsRUFBTytxQixHQUNwQy9xQixFQUFNL0MsUUFBVW1rRixFQUFjcGhGLEdBQ2hDbWxCLEVBQVMxZCxPQUFPekgsSUFFaEJxaEYsSUFHQXQyRCxFQUFpQjlYLFlBSXJCLFFBQVNvdUUsS0FHUEgsRUFBZXZ1RCxFQUFRLFNBQVMzeUIsR0FDOUJtbEIsRUFBUzFkLE9BQU96SCxLQUlwQixRQUFTb2hGLEdBQWM5MEUsR0FDckIsSUFBSyxHQUFJblEsR0FBSSxFQUFHaUQsRUFBS2tOLEVBQU1yUCxPQUFRZCxFQUFJaUQsRUFBSWpELElBQUssQ0FDOUMsR0FBSTZGLEdBQU9zSyxFQUFNblEsRUFDakIsSUFBSTZGLEVBQUsyRixXQUFhQyxJQUFrQjVGLEVBQUs0b0IsVUFBVWhaLE9BQ3JELE9BQU8sR0E5Q2IsSUFBS2doQixFQUNILEtBQU1vdUQsSUFBbUIsU0FDekIsOEhBR0ExNUUsR0FBWTZkLEdBS1ZDLEdBQU9rOEQsZUFBaUJsOEQsRUFBTytCLE1BQU1tNkQsZUFDdkNsOEQsRUFBT2s4RCxhQUFlLEdBRXhCLElBQUloMkQsR0FBV2xHLEVBQU9rOEQsY0FBZ0JsOEQsRUFBT204RCxnQkFHN0MzdUQsR0FBWXV1RCxFQUEyQixLQUFNNzFELEdBR3pDQSxJQUFhc0gsRUFBWWxFLGFBQWFwRCxJQUN4QysxRCxTQW9FTkcsSUFBbUIsaUJBQWtCLFNBQVN4Z0MsR0FDaEQsT0FDRTc4QixTQUFVLElBQ1Z1RyxVQUFVLEVBQ1ZwZ0IsUUFBUyxTQUFTOUgsRUFBU04sR0FDekIsR0FBa0IscUJBQWRBLEVBQUtvQyxLQUE2QixDQUNwQyxHQUFJK2dCLEdBQWNuakIsRUFBSzZmLEdBQ25CeVMsRUFBT2h5QixFQUFRLEdBQUdneUIsSUFFdEJ3c0IsR0FBZTUrQixJQUFJaUQsRUFBYW1QLFFBUXBDaXRELElBQTBCenhCLGNBQWV0dkQsRUFBTWt3RCxRQUFTbHdELEdBb0l4RGdoRixJQUNLLFdBQVksU0FBdUIsU0FBU3Y4RCxFQUFVd04sR0EwTTdELFFBQVNndkQsS0FDSEMsSUFDSkEsR0FBa0IsRUFDbEJqdkQsRUFBTzZELGFBQWEsV0FDbEJvckQsR0FBa0IsRUFDbEJuOEUsRUFBS3UxRSxZQUFZcHFCLGFBS3JCLFFBQVNpeEIsR0FBd0JDLEdBQzNCQyxJQUVKQSxHQUFrQixFQUVsQnB2RCxFQUFPNkQsYUFBYSxXQUNkN0QsRUFBT29CLGNBRVhndUQsR0FBa0IsRUFDbEJ0OEUsRUFBS3UxRSxZQUFZaHJCLGNBQWN2cUQsRUFBS2kxRSxhQUNoQ29ILEdBQWFyOEUsRUFBS3UxRSxZQUFZcHFCLGNBNU50QyxHQUFJbnJELEdBQU95SSxLQUNQOHpFLEVBQWEsR0FBSXZtRSxHQUVyQmhXLEdBQUtxMEUsa0JBR0xyMEUsRUFBS3UxRSxZQUFjeUcsR0FDbkJoOEUsRUFBSzg0RCxVQUFXLEVBU2hCOTRELEVBQUt3OEUsY0FBZ0J6a0YsR0FBT3JDLEVBQU80SyxTQUFTeUssY0FBYyxXQVMxRC9LLEVBQUt5MUUsZ0JBQWlCLEVBQ3RCejFFLEVBQUswMUUsZ0JBQWN4M0UsR0FFbkI4QixFQUFLeThFLG9CQUFzQixTQUFTcDhFLEdBQ2xDLEdBQUlxOEUsR0FBYTE4RSxFQUFLNDFFLDJCQUEyQnYxRSxFQUNqREwsR0FBS3c4RSxjQUFjbjhFLElBQUlxOEUsR0FDdkJoOUQsRUFBU2s2QyxRQUFRNTVELEVBQUt3OEUsZUFDdEJ0bkIsR0FBd0JsMUQsRUFBS3c4RSxlQUFlLEdBQzVDOThELEVBQVNyZixJQUFJcThFLElBR2YxOEUsRUFBSzI4RSxvQkFBc0IsU0FBU3Q4RSxHQUNsQyxHQUFJcThFLEdBQWExOEUsRUFBSzQxRSwyQkFBMkJ2MUUsRUFDakRMLEdBQUt3OEUsY0FBY244RSxJQUFJcThFLEdBQ3ZCeG5CLEdBQXdCbDFELEVBQUt3OEUsZUFBZSxHQUM1Qzk4RCxFQUFTcmYsSUFBSXE4RSxJQUdmMThFLEVBQUs0MUUsMkJBQTZCLFNBQVN2MUUsR0FDekMsTUFBTyxLQUFPdVIsR0FBUXZSLEdBQU8sTUFHL0JMLEVBQUttMkUsb0JBQXNCLFdBQ3JCbjJFLEVBQUt3OEUsY0FBYzFoRixVQUFVa0YsRUFBS3c4RSxjQUFjNS9ELFVBR3RENWMsRUFBSzQ4RSxrQkFBb0IsV0FDbkI1OEUsRUFBSzAxRSxjQUNQaDJELEVBQVNyZixJQUFJLElBQ2I2MEQsR0FBd0JsMUQsRUFBSzAxRSxhQUFhLEtBSTlDMTFFLEVBQUtxMkUsb0JBQXNCLFdBQ3JCcjJFLEVBQUt5MUUsZ0JBQ1B2Z0IsR0FBd0JsMUQsRUFBSzAxRSxhQUFhLElBSTlDeG9ELEVBQU96RCxJQUFJLFdBQVksV0FFckJ6cEIsRUFBS3k4RSxvQkFBc0J4aEYsSUFLN0IrRSxFQUFLaTFFLFVBQVksV0FDZixHQUFJNTBFLEdBQU1xZixFQUFTcmYsTUFFZnc4RSxFQUFVeDhFLElBQU9MLEdBQUtxMEUsZUFBaUJyMEUsRUFBS3EwRSxlQUFlaDBFLEdBQU9BLENBRXRFLE9BQUlMLEdBQUs4OEUsVUFBVUQsR0FDVkEsRUFHRixNQU1UNzhFLEVBQUs2MUUsV0FBYSxTQUEwQjU4RSxHQUcxQyxHQUFJOGpGLEdBQTBCcjlELEVBQVMsR0FBR3JILFFBQVFxSCxFQUFTLEdBQUd3MkQsY0FHOUQsSUFGSTZHLEdBQXlCN25CLEdBQXdCbjlELEdBQU9nbEYsSUFBMEIsR0FFbEYvOEUsRUFBSzg4RSxVQUFVN2pGLEdBQVEsQ0FDekIrRyxFQUFLbTJFLHFCQUVMLElBQUk2RyxHQUFZcHJFLEdBQVEzWSxFQUN4QnltQixHQUFTcmYsSUFBSTI4RSxJQUFhaDlFLEdBQUtxMEUsZUFBaUIySSxFQUFZL2pGLEVBRzVELElBQUlnOUUsR0FBaUJ2MkQsRUFBUyxHQUFHckgsUUFBUXFILEVBQVMsR0FBR3cyRCxjQUNyRGhoQixJQUF3Qm45RCxHQUFPaytFLElBQWlCLE9BRWhEajJFLEdBQUtvMkUsMkJBQTJCbjlFLElBTXBDK0csRUFBS2k5RSxVQUFZLFNBQVNoa0YsRUFBTzhELEdBRS9CLEdBQUlBLEVBQVEsR0FBR21GLFdBQWE2a0IsR0FBNUIsQ0FFQXpnQixHQUF3QnJOLEVBQU8sa0JBQ2pCLEtBQVZBLElBQ0YrRyxFQUFLeTFFLGdCQUFpQixFQUN0QnoxRSxFQUFLMDFFLFlBQWMzNEUsRUFFckIsSUFBSXlrQyxHQUFRKzZDLEVBQVc1MkUsSUFBSTFNLElBQVUsQ0FDckNzakYsR0FBVzc5RSxJQUFJekYsRUFBT3VvQyxFQUFRLEdBRzlCMDZDLE1BSUZsOEUsRUFBS2s5RSxhQUFlLFNBQVNqa0YsR0FDM0IsR0FBSXVvQyxHQUFRKzZDLEVBQVc1MkUsSUFBSTFNLEVBQ3ZCdW9DLEtBQ1ksSUFBVkEsR0FDRis2QyxFQUFXdmhCLE9BQU8vaEUsR0FDSixLQUFWQSxJQUNGK0csRUFBS3kxRSxnQkFBaUIsRUFDdEJ6MUUsRUFBSzAxRSxnQkFBY3gzRSxLQUdyQnErRSxFQUFXNzlFLElBQUl6RixFQUFPdW9DLEVBQVEsS0FNcEN4aEMsRUFBSzg4RSxVQUFZLFNBQVM3akYsR0FDeEIsUUFBU3NqRixFQUFXNTJFLElBQUkxTSxJQWExQitHLEVBQUttOUUsZ0JBQWtCLFdBQ3JCLE1BQU9uOUUsR0FBS3kxRSxnQkFhZHoxRSxFQUFLbzlFLHlCQUEyQixXQUU5QixNQUFPMTlELEdBQVMsR0FBR3JILFFBQVEsS0FBT3JZLEVBQUt3OEUsY0FBYyxJQWF2RHg4RSxFQUFLeTJFLHVCQUF5QixXQUM1QixNQUFPejJFLEdBQUt5MUUsZ0JBQWtCLzFELEVBQVMsR0FBR3JILFFBQVFxSCxFQUFTLEdBQUd3MkQsaUJBQW1CbDJFLEVBQUswMUUsWUFBWSxJQUdwRzExRSxFQUFLbzJFLDJCQUE2QixTQUFTbjlFLEdBQzVCLE1BQVRBLEdBQWlCK0csRUFBSzAxRSxhQUN4QjExRSxFQUFLbTJFLHNCQUNMbjJFLEVBQUs0OEUscUJBQ0k1OEUsRUFBS3c4RSxjQUFjMWhGLFNBQVN0RCxPQUNyQ3dJLEVBQUsyOEUsb0JBQW9CMWpGLEdBRXpCK0csRUFBS3k4RSxvQkFBb0J4akYsR0FJN0IsSUFBSWtqRixJQUFrQixFQVVsQkcsR0FBa0IsQ0FnQnRCdDhFLEdBQUtzMkUsZUFBaUIsU0FBU0MsRUFBYTVCLEVBQWUwSSxFQUFhQyxFQUFvQkMsR0FFMUYsR0FBSUYsRUFBWTM3RCxNQUFNOHFELFFBQVMsQ0FFN0IsR0FBSTEwRCxHQUFRa2xFLEVBQVk5bUYsR0FDeEJtbkYsR0FBWTVyRCxTQUFTLFFBQVMsU0FBcUM1WixHQUVqRSxHQUFJMmxFLEdBQ0FDLEVBQXFCOUksRUFBY240RSxLQUFLLFdBRXhDekcsR0FBVWluRixLQUNaaDlFLEVBQUtrOUUsYUFBYXBsRSxTQUNYOVgsR0FBS3EwRSxlQUFlMkksR0FDM0JRLEdBQVUsR0FHWlIsRUFBWXByRSxHQUFRaUcsR0FDcEJDLEVBQVNELEVBQ1Q3WCxFQUFLcTBFLGVBQWUySSxHQUFhbmxFLEVBQ2pDN1gsRUFBS2k5RSxVQUFVcGxFLEVBQVE4OEQsR0FJdkJBLEVBQWNsNEUsS0FBSyxRQUFTdWdGLEdBRXhCUSxHQUFXQyxHQUNickIsVUFJS2tCLEdBRVRELEVBQVk1ckQsU0FBUyxRQUFTLFNBQXFDNVosR0FFakU3WCxFQUFLaTFFLFdBRUwsSUFBSXVJLEdBQ0FDLEVBQXFCOUksRUFBY240RSxLQUFLLFdBRXhDekcsR0FBVStoQixLQUNaOVgsRUFBS2s5RSxhQUFhcGxFLEdBQ2xCMGxFLEdBQVUsR0FFWjFsRSxFQUFTRCxFQUNUN1gsRUFBS2k5RSxVQUFVcGxFLEVBQVE4OEQsR0FFbkI2SSxHQUFXQyxHQUNickIsTUFHS21CLEVBRVRoSCxFQUFZMzZFLE9BQU8yaEYsRUFBbUIsU0FBZ0MxbEUsRUFBUUMsR0FDNUV1bEUsRUFBWTF2RCxLQUFLLFFBQVM5VixFQUMxQixJQUFJNGxFLEdBQXFCOUksRUFBY240RSxLQUFLLFdBQ3hDc2IsS0FBV0QsR0FDYjdYLEVBQUtrOUUsYUFBYXBsRSxHQUVwQjlYLEVBQUtpOUUsVUFBVXBsRSxFQUFRODhELEdBRW5CNzhELEdBQVUybEUsR0FDWnJCLE1BS0pwOEUsRUFBS2k5RSxVQUFVSSxFQUFZcGtGLE1BQU8wN0UsRUFJcEMwSSxHQUFZNXJELFNBQVMsV0FBWSxTQUFTNVosSUFLekIsU0FBWEEsR0FBcUJBLEdBQVU4OEQsRUFBY240RSxLQUFLLGVBQ2hEd0QsRUFBSzg0RCxTQUNQc2pCLEdBQXdCLElBRXhCcDhFLEVBQUt1MUUsWUFBWWhyQixjQUFjLE1BQy9CdnFELEVBQUt1MUUsWUFBWXBxQixjQUt2QndwQixFQUFjcGxFLEdBQUcsV0FBWSxXQUMzQixHQUFJc2hCLEdBQWU3d0IsRUFBS2kxRSxZQUNwQnlJLEVBQWNMLEVBQVlwa0YsS0FFOUIrRyxHQUFLazlFLGFBQWFRLEdBQ2xCeEIsS0FFSWw4RSxFQUFLODRELFVBQVlqb0MsSUFBdUQsSUFBdkNBLEVBQWF6ekIsUUFBUXNnRixJQUN0RDdzRCxJQUFpQjZzRCxJQUluQnRCLEdBQXdCLFFBZ1I1QnVCLEdBQWtCLFdBYXBCLFFBQVNDLEdBQWNoNUUsRUFBTzdILEVBQVNOLEVBQU1zdUUsR0FFekMsR0FBSWlLLEdBQWFqSyxFQUFNLEdBQ25Cd0ssRUFBY3hLLEVBQU0sRUFJeEIsS0FBS3dLLEVBRUgsWUFEQVAsRUFBV3NCLGVBQWlCcjdFLEVBcUI5QixJQWhCQSs1RSxFQUFXTyxZQUFjQSxFQUt6Qng0RSxFQUFRd1MsR0FBRyxTQUFVLFdBQ25CeWxFLEVBQVdtQixzQkFDWHZ4RSxFQUFNRSxPQUFPLFdBQ1h5d0UsRUFBWWhyQixjQUFjeXFCLEVBQVdDLGlCQVFyQ3g0RSxFQUFLcThELFNBQVUsQ0FDakJrYyxFQUFXbGMsVUFBVyxFQUd0QmtjLEVBQVdDLFVBQVksV0FDckIsR0FBSS8zRSxLQU9KLE9BTkEvRSxHQUFRNEUsRUFBUUwsS0FBSyxVQUFXLFNBQVMwNkQsR0FDdkMsR0FBSUEsRUFBTzJCLFdBQWEzQixFQUFPd2IsU0FBVSxDQUN2QyxHQUFJdnlFLEdBQU0rMkQsRUFBT24rRCxLQUNqQmlFLEdBQU1TLEtBQUswQyxJQUFPMjBFLEdBQVdYLGVBQWlCVyxFQUFXWCxlQUFlaDBFLEdBQU9BLE1BRzVFbkQsR0FJVDgzRSxFQUFXYSxXQUFhLFNBQTRCNThFLEdBQ2xEZCxFQUFRNEUsRUFBUUwsS0FBSyxVQUFXLFNBQVMwNkQsR0FDdkMsR0FBSXltQixLQUFxQjVrRixJQUFVZ0UsRUFBU2hFLEVBQU9tK0QsRUFBT24rRCxRQUN2QmdFLEVBQVNoRSxFQUFPKzdFLEVBQVdYLGVBQWVqZCxFQUFPbitELFFBVWhGNGtGLEtBVG9Cem1CLEVBQU8yQixVQVU3QjdELEdBQXdCbjlELEdBQU9xL0QsR0FBU3ltQixLQVE5QyxJQUFJQyxHQUFVQyxFQUFjN25GLEdBQzVCME8sR0FBTWhKLE9BQU8sV0FDUG1pRixJQUFnQnhJLEVBQVlsckIsWUFBZXByRCxFQUFPNitFLEVBQVV2SSxFQUFZbHJCLGNBQzFFeXpCLEVBQVcxMEUsR0FBWW1zRSxFQUFZbHJCLFlBQ25Da3JCLEVBQVlwcUIsV0FFZDR5QixFQUFjeEksRUFBWWxyQixhQUs1QmtyQixFQUFZeHJCLFNBQVcsU0FBUzl3RCxHQUM5QixPQUFRQSxHQUEwQixJQUFqQkEsRUFBTXpCLFNBTTdCLFFBQVN3bUYsR0FBZXA1RSxFQUFPN0gsRUFBUzRuQixFQUFPb21ELEdBRTdDLEdBQUl3SyxHQUFjeEssRUFBTSxFQUN4QixJQUFLd0ssRUFBTCxDQUVBLEdBQUlQLEdBQWFqSyxFQUFNLEVBT3ZCd0ssR0FBWXBxQixRQUFVLFdBQ3BCNnBCLEVBQVdhLFdBQVdOLEVBQVlsckIsY0E3R3hDLE9BQ0UzckMsU0FBVSxJQUNWSCxTQUFVLFNBQVUsWUFDcEJ4VixXQUFZa3pFLEdBQ1o1OEQsU0FBVSxFQUNWdEQsTUFDRW1NLElBQUswMUQsRUFDTHoxRCxLQUFNNjFELEtBK0dSQyxJQUFtQixlQUFnQixTQUFTcDlELEdBQzlDLE9BQ0VuQyxTQUFVLElBQ1ZXLFNBQVUsSUFDVnhhLFFBQVMsU0FBUzlILEVBQVNOLEdBQ3pCLEdBQUk2Z0YsR0FBb0JDLENBZ0J4QixPQWRJeG5GLEdBQVUwRyxFQUFLK3ZFLFdBRVJ6MkUsRUFBVTBHLEVBQUt4RCxPQUV4QnFrRixFQUFxQno4RCxFQUFhcGtCLEVBQUt4RCxPQUFPLElBSTlDc2tGLEVBQW9CMThELEVBQWE5akIsRUFBUWd5QixRQUFRLEtBRS9DdHlCLEVBQUtreEIsS0FBSyxRQUFTNXdCLEVBQVFneUIsU0FJeEIsU0FBU25xQixFQUFPN0gsRUFBU04sR0FHOUIsR0FDSTNCLEdBQVNpQyxFQUFRakMsU0FDakJrNkUsRUFBYWw2RSxFQUFPaUssS0FGSCxzQkFHZmpLLEVBQU9BLFNBQVNpSyxLQUhELG9CQUtqQml3RSxJQUNGQSxFQUFXc0IsZUFBZTF4RSxFQUFPN0gsRUFBU04sRUFBTTZnRixFQUFvQkMsUUFrRTFFVyxHQUFvQixXQUN0QixPQUNFeC9ELFNBQVUsSUFDVkgsUUFBUyxXQUNUeEMsS0FBTSxTQUFTblgsRUFBTzhTLEVBQUtqYixFQUFNdXNELEdBQzFCQSxJQUNMdnNELEVBQUswaEYsVUFBVyxFQUVoQm4xQixFQUFLeUUsWUFBWTB3QixTQUFXLFNBQVMvdUIsRUFBWWYsR0FDL0MsT0FBUTV4RCxFQUFLMGhGLFdBQWFuMUIsRUFBS2UsU0FBU3NFLElBRzFDNXhELEVBQUtnMUIsU0FBUyxXQUFZLFdBQ3hCdTNCLEVBQUswRSxrQkFpRlQwd0IsR0FBbUIsV0FDckIsT0FDRTEvRCxTQUFVLElBQ1ZILFFBQVMsV0FDVHhDLEtBQU0sU0FBU25YLEVBQU84UyxFQUFLamIsRUFBTXVzRCxHQUMvQixHQUFLQSxFQUFMLENBRUEsR0FBSTlvQyxHQUFRbStELEVBQWE1aEYsRUFBSzQ3RCxXQUFhNTdELEVBQUt5MkIsT0FDaER6MkIsR0FBS2cxQixTQUFTLFVBQVcsU0FBU29tQixHQUtoQyxHQUpJLy9DLEVBQVMrL0MsSUFBVUEsRUFBTXJnRCxPQUFTLElBQ3BDcWdELEVBQVEsR0FBSTE5QyxRQUFPLElBQU0wOUMsRUFBUSxNQUcvQkEsSUFBVUEsRUFBTXg3QyxLQUNsQixLQUFNaEcsR0FBTyxhQUFhLFdBQ3hCLHdEQUF5RGdvRixFQUN6RHhtQyxFQUFPaDJDLEdBQVk2VixHQUd2QndJLEdBQVMyM0IsT0FBUzM1QyxHQUNsQjhxRCxFQUFLMEUsY0FHUDFFLEVBQUt5RSxZQUFZdjZCLFFBQVUsU0FBU2s4QixFQUFZZixHQUU5QyxNQUFPckYsR0FBS2UsU0FBU3NFLElBQWM5eUQsRUFBWTJrQixJQUFXQSxFQUFPN2pCLEtBQUtneUQsUUF3RTFFaXdCLEdBQXFCLFdBQ3ZCLE9BQ0U1L0QsU0FBVSxJQUNWSCxRQUFTLFdBQ1R4QyxLQUFNLFNBQVNuWCxFQUFPOFMsRUFBS2piLEVBQU11c0QsR0FDL0IsR0FBS0EsRUFBTCxDQUVBLEdBQUl1MUIsSUFBYSxDQUNqQjloRixHQUFLZzFCLFNBQVMsWUFBYSxTQUFTeDRCLEdBQ2xDLEdBQUl1bEYsR0FBUzlqRixFQUFNekIsRUFDbkJzbEYsR0FBWXA5RSxHQUFZcTlFLElBQVcsRUFBSUEsRUFDdkN4MUIsRUFBSzBFLGNBRVAxRSxFQUFLeUUsWUFBWTh3QixVQUFZLFNBQVNudkIsRUFBWWYsR0FDaEQsTUFBUWt3QixHQUFZLEdBQU12MUIsRUFBS2UsU0FBU3NFLElBQWVBLEVBQVU3MkQsUUFBVSttRixPQXNFL0VFLEdBQXFCLFdBQ3ZCLE9BQ0UvL0QsU0FBVSxJQUNWSCxRQUFTLFdBQ1R4QyxLQUFNLFNBQVNuWCxFQUFPOFMsRUFBS2piLEVBQU11c0QsR0FDL0IsR0FBS0EsRUFBTCxDQUVBLEdBQUkwMUIsR0FBWSxDQUNoQmppRixHQUFLZzFCLFNBQVMsWUFBYSxTQUFTeDRCLEdBQ2xDeWxGLEVBQVloa0YsRUFBTXpCLElBQVUsRUFDNUIrdkQsRUFBSzBFLGNBRVAxRSxFQUFLeUUsWUFBWWl4QixVQUFZLFNBQVN0dkIsRUFBWWYsR0FDaEQsTUFBT3JGLEdBQUtlLFNBQVNzRSxJQUFjQSxFQUFVNzJELFFBQVVrbkYsTUFNL0QsSUFBSWhwRixFQUFPd1AsUUFBUTNCLFVBS2pCLFlBSEk3TixFQUFPcU8sU0FDVEEsUUFBUStqQyxJQUFJLG9EQXQ5OUJoQixXQUNFLEdBQUk2MkMsRUFFSixLQUFJbG9CLEdBQUosQ0FLQSxHQUFJbW9CLEdBQVM1b0IsSUFDYk4sSUFBU242RCxFQUFZcWpGLEdBQVVscEYsRUFBT2dnRSxPQUM1QmtwQixFQUNxQmxwRixFQUFPa3BGLE9BRFAxZ0YsR0FPM0J3M0QsSUFBVUEsR0FBT3oxRCxHQUFHc1AsSUFDdEJ4WCxHQUFTMjlELEdBQ1RsN0QsRUFBT2s3RCxHQUFPejFELElBQ1oyRSxNQUFPNGUsR0FBZ0I1ZSxNQUN2QnVaLGFBQWNxRixHQUFnQnJGLGFBQzlCcFYsV0FBNkIsR0FBa0JBLFdBQy9DM0UsU0FBVW9mLEdBQWdCcGYsU0FDMUIyb0IsY0FBZXZKLEdBQWdCdUosZ0JBTWpDNHhELEVBQW9CanBCLEdBQU9ocEQsVUFDM0JncEQsR0FBT2hwRCxVQUFZLFNBQVNteUUsR0FFMUIsSUFBSyxHQUREN3hFLEdBQ1krRCxFQUFQcmEsRUFBSSxFQUE4QixPQUFwQnFhLEVBQU84dEUsRUFBTW5vRixJQUFhQSxLQUMvQ3NXLEVBQVMwb0QsR0FBT3VCLE1BQU1sbUQsRUFBTSxZQUNkL0QsRUFBT1EsVUFDbkJrb0QsR0FBTzNrRCxHQUFNdXBELGVBQWUsV0FHaENxa0IsR0FBa0JFLEtBR3BCOW1GLEdBQVNrVSxHQUdYL0csR0FBUW5JLFFBQVVoRixHQUdsQjArRCxJQUFrQixNQWd0QnBCLFNBQTRCdnhELEdBQzFCMUssRUFBTzBLLEdBQ0x2UCxvQkFBdUJBLEVBQ3ZCNE4sVUFBYUEsR0FDYmhHLEtBQVFBLEVBQ1IvQyxPQUFVQSxFQUNWQyxNQUFTQSxFQUNUd0UsT0FBVUEsRUFDVmxDLFFBQVdoRixHQUNYSSxRQUFXQSxFQUNYaU0sU0FBWU0sR0FDWnpKLEtBQVFBLEVBQ1I4RSxLQUFRQSxFQUNSUSxPQUFVQSxFQUNWSSxTQUFZQSxFQUNaekYsU0FBWUEsRUFDWkssWUFBZUEsRUFDZnhGLFVBQWFBLEVBQ2IrQixTQUFZQSxFQUNaUyxXQUFjQSxFQUNkMUMsU0FBWUEsRUFDWk8sU0FBWUEsRUFDWmtFLFVBQWFBLEVBQ2J6QyxRQUFXQSxHQUNYNitELFFBQVdBLEdBQ1gzOEQsT0FBVUEsRUFDVmlELFVBQWFBLEdBQ2I0OUIsVUFBYUEsR0FDYitDLFdBQWNvaUMsVUFBVyxHQUN6QnQ2RCxlQUFrQkEsR0FDbEJILG9CQUF1QkEsR0FDdkIrQixTQUFZaFIsRUFDWnlvRixNQUFTcHpDLEdBQ1RxekMsbUJBQXNCLzdFLEdBQ3RCZzhFLGlCQUFvQmw4RSxHQUNwQm04RSxZQUFlditFLEtBR2pCbVUsR0FBZ0I1TixHQUFrQnZSLEdBRWxDbWYsR0FBYyxNQUFPLGFBQWMsV0FDakMsU0FBa0J0USxHQUVoQkEsRUFBU21ELFVBQ1B5WixjQUFlczJCLEtBRWpCbHpDLEVBQVNtRCxTQUFTLFdBQVl5VixJQUM1Qm5VLFdBQ0lqSyxFQUFHdXFFLEdBQ0gxakIsTUFBT3NtQixHQUNQZ1QsU0FBVWhULEdBQ1ZpVCxLQUFNalUsR0FDTm50QyxPQUFRZytDLEdBQ1JxRCxPQUFRekIsR0FDUnZtQixPQUFRNm1CLEdBQ1JyUixPQUFRSCxHQUNSUSxXQUFZRixHQUNaRCxlQUFnQkQsR0FDaEJ3UyxRQUFTL1IsR0FDVGdTLFlBQWE5UixHQUNiK1IsV0FBWWhTLEdBQ1ppUyxRQUFTL1IsR0FDVGdTLGFBQWMvUixHQUNkemxCLE9BQVFrakIsR0FDUjRPLE9BQVFELEdBQ1I3TCxLQUFNRixHQUNOTSxVQUFXSCxHQUNYZSxPQUFRRCxHQUNSMFEsY0FBZXpOLEdBQ2YwTixZQUFhakosR0FDYitCLFNBQVViLEdBQ1ZpQyxPQUFRRCxHQUNSSyxRQUFTRCxHQUNUUSxTQUFVSixHQUNWZSxhQUFjRCxHQUNkMEUsZ0JBQWlCdEUsR0FDakJwRyxVQUFXOUMsR0FDWHlKLGFBQWNMLEdBQ2R4bkIsUUFBUytjLEdBQ1Q1QixPQUFRRCxHQUNSN0IsU0FBVUQsR0FDVmw2QyxRQUFTa3JELEdBQ1QvbEIsVUFBVytsQixHQUNYRCxTQUFVRCxHQUNWMkIsV0FBWTNCLEdBQ1pRLFVBQVdELEdBQ1h0bUIsWUFBYXNtQixHQUNiRixVQUFXRCxHQUNYbG1CLFlBQWFrbUIsR0FDYjlSLFFBQVNKLEdBQ1Q0RixlQUFnQk4sS0FFcEIxb0UsV0FDRXFsRSxVQUFXVSxLQUViL2xFLFVBQVV3Z0UsSUFDVnhnRSxVQUFVMmtFLElBQ1pwcEUsRUFBU21ELFVBQ1B5bUUsY0FBZWo0RCxHQUNmZ0wsU0FBVWs3QyxHQUNWMGpCLFlBQWFqaEIsR0FDYmtoQixZQUFhNWtCLEdBQ2JzQixlQUFnQnJCLEdBQ2hCRSxnQkFBaUJvQyxHQUNqQkMsa0JBQW1CTixHQUNuQnJrQyxTQUFVM2QsR0FDVjRCLGNBQWUxQixHQUNmeUYsWUFBYThULEdBQ2J4WixVQUFXa2EsR0FDWG9vQyxtQkFBb0Jub0MsR0FDcEJ0VyxrQkFBbUIwVyxHQUNuQjBTLFFBQVNzVixHQUNUbWlDLGNBQWUzZ0IsR0FDZngrQyxhQUFjNGUsR0FDZHdnRCxVQUFXNStDLEdBQ1hqSSxNQUFPcEIsR0FDUGtvRCxxQkFBc0IvcEQsR0FDdEJncUQsMkJBQTRCOXBELEdBQzVCNEMsYUFBY29FLEdBQ2RFLFlBQWFKLEdBQ2JHLGdCQUFpQnFpQyxHQUNqQnJwRCxVQUFXbXZCLEdBQ1hsdEIsS0FBTTh1QixHQUNOdG1CLE9BQVE4cUIsR0FDUnQxQixXQUFZNjdCLEdBQ1pqWixHQUFJeVYsR0FDSnROLElBQUt5TixHQUNMOXRCLEtBQU0yNEIsR0FDTkMsYUFBY3RCLEdBQ2QvL0IsU0FBVTJoQyxHQUNWb0IsZUFBZ0J2K0IsR0FDaEI4RCxpQkFBa0J1NkIsR0FDbEIra0MsY0FBZXJrQyxHQUNmckssU0FBVW1MLEdBQ1Z4bUMsUUFBUzhtQyxHQUNUbWdCLE1BQU83ckIsR0FDUDR1QyxTQUFVL3VFLEdBQ1ZndkUsTUFBT3JsQixHQUNQL2hDLGVBQWdCMGtCLFFBSXJCcDJDLE1BQU8rNEUsZUFBZ0IsV0FpbDhCUHI3RSxJQUVuQkEsR0FBUTVPLE9BQU8sZUFBaUIsV0FBWSxTQUFTaU8sR0FFckQsUUFBU2k4RSxHQUFZMWtFLEdBQ25CQSxHQUFRLEVBQ1IsSUFBSXBsQixHQUFJb2xCLEVBQUUxZSxRQUFRLElBQ2xCLFFBQWMsR0FBTjFHLEVBQVcsRUFBSW9sQixFQUFFdGtCLE9BQVNkLEVBQUksRUFHeEMsUUFBUytwRixHQUFNM2tFLEVBQUc0a0UsR0FDaEIsR0FBSXpxRCxHQUFJeXFELE1BRUp4aUYsS0FBYyszQixJQUNoQkEsRUFBSXRKLEtBQUtzMEIsSUFBSXUvQixFQUFZMWtFLEdBQUksR0FHL0IsSUFBSTRuQixHQUFPL1csS0FBS3FpQyxJQUFJLEdBQUkvNEIsRUFFeEIsUUFBUUEsRUFBR0EsRUFBR3lxQyxHQURKNWtELEVBQUk0bkIsRUFBUSxHQUFLQSxHQWY3QixHQUFJaTlDLElBQW1CQyxLQUFNLE9BQVFDLElBQUssTUFBT0MsSUFBSyxNQUFPQyxJQUFLLE1BQU9DLEtBQU0sT0FBUUMsTUFBTyxRQW1COUYxOEUsR0FBU3RMLE1BQU0sV0FDYnNzRCxrQkFDRXBCLE9BQ0UsS0FDQSxNQUVGKzhCLEtBQ0UsU0FDQSxTQUNBLFVBQ0EsWUFDQSxXQUNBLFNBQ0EsWUFFRjM4QixVQUNFLGdCQUNBLGVBRUZGLE1BQ0UsS0FDQSxNQUVGODhCLGVBQWtCLEVBQ2xCQyxPQUNFLFVBQ0EsV0FDQSxRQUNBLFFBQ0EsTUFDQSxPQUNBLE9BQ0EsU0FDQSxZQUNBLFVBQ0EsV0FDQSxZQUVGQyxVQUNFLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE9BRUZDLFlBQ0UsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE1BQ0EsTUFDQSxNQUNBLE9BRUZDLGlCQUNFLFVBQ0EsV0FDQSxRQUNBLFFBQ0EsTUFDQSxPQUNBLE9BQ0EsU0FDQSxZQUNBLFVBQ0EsV0FDQSxZQUVGQyxjQUNFLEVBQ0EsR0FFRkMsU0FBWSxrQkFDWkMsU0FBWSxZQUNaQyxPQUFVLHFCQUNWQyxXQUFjLFdBQ2RDLFdBQWMsWUFDZEMsTUFBUyxnQkFDVEMsVUFBYSxTQUNiQyxVQUFhLFVBRWZyaUMsZ0JBQ0VJLGFBQWdCLElBQ2hCSyxZQUFlLElBQ2ZELFVBQWEsSUFDYkgsV0FFSW9DLE1BQVMsRUFDVEQsT0FBVSxFQUNWbEMsUUFBVyxFQUNYYyxRQUFXLEVBQ1hraEMsT0FBVSxFQUNWNS9CLE9BQVUsSUFDVkMsT0FBVSxHQUNWQyxPQUFVLEdBQ1ZDLE9BQVUsS0FHVkosTUFBUyxFQUNURCxPQUFVLEVBQ1ZsQyxRQUFXLEVBQ1hjLFFBQVcsRUFDWGtoQyxPQUFVLEVBQ1Y1L0IsT0FBVSxLQUNWQyxPQUFVLEdBQ1ZDLE9BQVUsSUFDVkMsT0FBVSxNQUloQmxtQyxHQUFNLFFBQ040bEUsU0FBWSxRQUNaeEssVUFBYSxTQUFTNTdELEVBQUc0a0UsR0FBa0IsR0FBSWhxRixHQUFRLEVBQUpvbEIsRUFBWXFtRSxFQUFLMUIsRUFBTTNrRSxFQUFHNGtFLEVBQWlCLE9BQVMsSUFBTGhxRixHQUFrQixHQUFSeXJGLEVBQUdsc0QsRUFBb0IwcUQsRUFBZ0JFLElBQWdCRixFQUFnQk0sWUFJbkxscEYsR0FBTyxXQUNMdUwsR0FBWTVOLEVBQU80SyxTQUFVaUQsT0FHOUI3TixTQUVGQSxPQUFPd1AsUUFBUTQ1RSxRQUFRL29CLGVBQWlCcmdFLE9BQU93UCxRQUFRbkksUUFBUXVELFNBQVM4aEYsTUFBTXhvQixRQUFRIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlIEFuZ3VsYXJKUyB2MS42LjZcbiAqIChjKSAyMDEwLTIwMTcgR29vZ2xlLCBJbmMuIGh0dHA6Ly9hbmd1bGFyanMub3JnXG4gKiBMaWNlbnNlOiBNSVRcbiAqL1xuKGZ1bmN0aW9uKHdpbmRvdykgeyd1c2Ugc3RyaWN0JztcblxuLyogZXhwb3J0ZWRcbiAgbWluRXJyQ29uZmlnLFxuICBlcnJvckhhbmRsaW5nQ29uZmlnLFxuICBpc1ZhbGlkT2JqZWN0TWF4RGVwdGhcbiovXG5cbnZhciBtaW5FcnJDb25maWcgPSB7XG4gIG9iamVjdE1heERlcHRoOiA1XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5lcnJvckhhbmRsaW5nQ29uZmlnXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29uZmlndXJlIHNldmVyYWwgYXNwZWN0cyBvZiBlcnJvciBoYW5kbGluZyBpbiBBbmd1bGFySlMgaWYgdXNlZCBhcyBhIHNldHRlciBvciByZXR1cm4gdGhlXG4gKiBjdXJyZW50IGNvbmZpZ3VyYXRpb24gaWYgdXNlZCBhcyBhIGdldHRlci4gVGhlIGZvbGxvd2luZyBvcHRpb25zIGFyZSBzdXBwb3J0ZWQ6XG4gKlxuICogLSAqKm9iamVjdE1heERlcHRoKio6IFRoZSBtYXhpbXVtIGRlcHRoIHRvIHdoaWNoIG9iamVjdHMgYXJlIHRyYXZlcnNlZCB3aGVuIHN0cmluZ2lmaWVkIGZvciBlcnJvciBtZXNzYWdlcy5cbiAqXG4gKiBPbWl0dGVkIG9yIHVuZGVmaW5lZCBvcHRpb25zIHdpbGwgbGVhdmUgdGhlIGNvcnJlc3BvbmRpbmcgY29uZmlndXJhdGlvbiB2YWx1ZXMgdW5jaGFuZ2VkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIC0gVGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LiBNYXkgb25seSBjb250YWluIHRoZSBvcHRpb25zIHRoYXQgbmVlZCB0byBiZVxuICogICAgIHVwZGF0ZWQuIFN1cHBvcnRlZCBrZXlzOlxuICpcbiAqICogYG9iamVjdE1heERlcHRoYCAgKip7TnVtYmVyfSoqIC0gVGhlIG1heCBkZXB0aCBmb3Igc3RyaW5naWZ5aW5nIG9iamVjdHMuIFNldHRpbmcgdG8gYVxuICogICBub24tcG9zaXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIHJlbW92ZXMgdGhlIG1heCBkZXB0aCBsaW1pdC5cbiAqICAgRGVmYXVsdDogNVxuICovXG5mdW5jdGlvbiBlcnJvckhhbmRsaW5nQ29uZmlnKGNvbmZpZykge1xuICBpZiAoaXNPYmplY3QoY29uZmlnKSkge1xuICAgIGlmIChpc0RlZmluZWQoY29uZmlnLm9iamVjdE1heERlcHRoKSkge1xuICAgICAgbWluRXJyQ29uZmlnLm9iamVjdE1heERlcHRoID0gaXNWYWxpZE9iamVjdE1heERlcHRoKGNvbmZpZy5vYmplY3RNYXhEZXB0aCkgPyBjb25maWcub2JqZWN0TWF4RGVwdGggOiBOYU47XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBtaW5FcnJDb25maWc7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IG1heERlcHRoXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1ZhbGlkT2JqZWN0TWF4RGVwdGgobWF4RGVwdGgpIHtcbiAgcmV0dXJuIGlzTnVtYmVyKG1heERlcHRoKSAmJiBtYXhEZXB0aCA+IDA7XG59XG5cbi8qKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhpcyBvYmplY3QgcHJvdmlkZXMgYSB1dGlsaXR5IGZvciBwcm9kdWNpbmcgcmljaCBFcnJvciBtZXNzYWdlcyB3aXRoaW5cbiAqIEFuZ3VsYXIuIEl0IGNhbiBiZSBjYWxsZWQgYXMgZm9sbG93czpcbiAqXG4gKiB2YXIgZXhhbXBsZU1pbkVyciA9IG1pbkVycignZXhhbXBsZScpO1xuICogdGhyb3cgZXhhbXBsZU1pbkVycignb25lJywgJ1RoaXMgezB9IGlzIHsxfScsIGZvbywgYmFyKTtcbiAqXG4gKiBUaGUgYWJvdmUgY3JlYXRlcyBhbiBpbnN0YW5jZSBvZiBtaW5FcnIgaW4gdGhlIGV4YW1wbGUgbmFtZXNwYWNlLiBUaGVcbiAqIHJlc3VsdGluZyBlcnJvciB3aWxsIGhhdmUgYSBuYW1lc3BhY2VkIGVycm9yIGNvZGUgb2YgZXhhbXBsZS5vbmUuICBUaGVcbiAqIHJlc3VsdGluZyBlcnJvciB3aWxsIHJlcGxhY2UgezB9IHdpdGggdGhlIHZhbHVlIG9mIGZvbywgYW5kIHsxfSB3aXRoIHRoZVxuICogdmFsdWUgb2YgYmFyLiBUaGUgb2JqZWN0IGlzIG5vdCByZXN0cmljdGVkIGluIHRoZSBudW1iZXIgb2YgYXJndW1lbnRzIGl0IGNhblxuICogdGFrZS5cbiAqXG4gKiBJZiBmZXdlciBhcmd1bWVudHMgYXJlIHNwZWNpZmllZCB0aGFuIG5lY2Vzc2FyeSBmb3IgaW50ZXJwb2xhdGlvbiwgdGhlIGV4dHJhXG4gKiBpbnRlcnBvbGF0aW9uIG1hcmtlcnMgd2lsbCBiZSBwcmVzZXJ2ZWQgaW4gdGhlIGZpbmFsIHN0cmluZy5cbiAqXG4gKiBTaW5jZSBkYXRhIHdpbGwgYmUgcGFyc2VkIHN0YXRpY2FsbHkgZHVyaW5nIGEgYnVpbGQgc3RlcCwgc29tZSByZXN0cmljdGlvbnNcbiAqIGFyZSBhcHBsaWVkIHdpdGggcmVzcGVjdCB0byBob3cgbWluRXJyIGluc3RhbmNlcyBhcmUgY3JlYXRlZCBhbmQgY2FsbGVkLlxuICogSW5zdGFuY2VzIHNob3VsZCBoYXZlIG5hbWVzIG9mIHRoZSBmb3JtIG5hbWVzcGFjZU1pbkVyciBmb3IgYSBtaW5FcnIgY3JlYXRlZFxuICogdXNpbmcgbWluRXJyKCduYW1lc3BhY2UnKSAuIEVycm9yIGNvZGVzLCBuYW1lc3BhY2VzIGFuZCB0ZW1wbGF0ZSBzdHJpbmdzXG4gKiBzaG91bGQgYWxsIGJlIHN0YXRpYyBzdHJpbmdzLCBub3QgdmFyaWFibGVzIG9yIGdlbmVyYWwgZXhwcmVzc2lvbnMuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZSBUaGUgbmFtZXNwYWNlIHRvIHVzZSBmb3IgdGhlIG5ldyBtaW5FcnIgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBFcnJvckNvbnN0cnVjdG9yIEN1c3RvbSBlcnJvciBjb25zdHJ1Y3RvciB0byBiZSBpbnN0YW50aWF0ZWQgd2hlbiByZXR1cm5pbmdcbiAqICAgZXJyb3IgZnJvbSByZXR1cm5lZCBmdW5jdGlvbiwgZm9yIGNhc2VzIHdoZW4gYSBwYXJ0aWN1bGFyIHR5cGUgb2YgZXJyb3IgaXMgdXNlZnVsLlxuICogQHJldHVybnMge2Z1bmN0aW9uKGNvZGU6c3RyaW5nLCB0ZW1wbGF0ZTpzdHJpbmcsIC4uLnRlbXBsYXRlQXJncyk6IEVycm9yfSBtaW5FcnIgaW5zdGFuY2VcbiAqL1xuXG5mdW5jdGlvbiBtaW5FcnIobW9kdWxlLCBFcnJvckNvbnN0cnVjdG9yKSB7XG4gIEVycm9yQ29uc3RydWN0b3IgPSBFcnJvckNvbnN0cnVjdG9yIHx8IEVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvZGUgPSBhcmd1bWVudHNbMF0sXG4gICAgICB0ZW1wbGF0ZSA9IGFyZ3VtZW50c1sxXSxcbiAgICAgIG1lc3NhZ2UgPSAnWycgKyAobW9kdWxlID8gbW9kdWxlICsgJzonIDogJycpICsgY29kZSArICddICcsXG4gICAgICB0ZW1wbGF0ZUFyZ3MgPSBzbGljZUFyZ3MoYXJndW1lbnRzLCAyKS5tYXAoZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0b0RlYnVnU3RyaW5nKGFyZywgbWluRXJyQ29uZmlnLm9iamVjdE1heERlcHRoKTtcbiAgICAgIH0pLFxuICAgICAgcGFyYW1QcmVmaXgsIGk7XG5cbiAgICBtZXNzYWdlICs9IHRlbXBsYXRlLnJlcGxhY2UoL1xce1xcZCtcXH0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICAgIHZhciBpbmRleCA9ICttYXRjaC5zbGljZSgxLCAtMSk7XG5cbiAgICAgIGlmIChpbmRleCA8IHRlbXBsYXRlQXJncy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlQXJnc1tpbmRleF07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIG1lc3NhZ2UgKz0gJ1xcbmh0dHA6Ly9lcnJvcnMuYW5ndWxhcmpzLm9yZy8xLjYuNi8nICtcbiAgICAgIChtb2R1bGUgPyBtb2R1bGUgKyAnLycgOiAnJykgKyBjb2RlO1xuXG4gICAgZm9yIChpID0gMCwgcGFyYW1QcmVmaXggPSAnPyc7IGkgPCB0ZW1wbGF0ZUFyZ3MubGVuZ3RoOyBpKyssIHBhcmFtUHJlZml4ID0gJyYnKSB7XG4gICAgICBtZXNzYWdlICs9IHBhcmFtUHJlZml4ICsgJ3AnICsgaSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh0ZW1wbGF0ZUFyZ3NbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRXJyb3JDb25zdHJ1Y3RvcihtZXNzYWdlKTtcbiAgfTtcbn1cblxuLyogV2UgbmVlZCB0byB0ZWxsIEVTTGludCB3aGF0IHZhcmlhYmxlcyBhcmUgYmVpbmcgZXhwb3J0ZWQgKi9cbi8qIGV4cG9ydGVkXG4gIGFuZ3VsYXIsXG4gIG1zaWUsXG4gIGpxTGl0ZSxcbiAgalF1ZXJ5LFxuICBzbGljZSxcbiAgc3BsaWNlLFxuICBwdXNoLFxuICB0b1N0cmluZyxcbiAgbWluRXJyQ29uZmlnLFxuICBlcnJvckhhbmRsaW5nQ29uZmlnLFxuICBpc1ZhbGlkT2JqZWN0TWF4RGVwdGgsXG4gIG5nTWluRXJyLFxuICBhbmd1bGFyTW9kdWxlLFxuICB1aWQsXG4gIFJFR0VYX1NUUklOR19SRUdFWFAsXG4gIFZBTElESVRZX1NUQVRFX1BST1BFUlRZLFxuXG4gIGxvd2VyY2FzZSxcbiAgdXBwZXJjYXNlLFxuICBtYW51YWxMb3dlcmNhc2UsXG4gIG1hbnVhbFVwcGVyY2FzZSxcbiAgbm9kZU5hbWVfLFxuICBpc0FycmF5TGlrZSxcbiAgZm9yRWFjaCxcbiAgZm9yRWFjaFNvcnRlZCxcbiAgcmV2ZXJzZVBhcmFtcyxcbiAgbmV4dFVpZCxcbiAgc2V0SGFzaEtleSxcbiAgZXh0ZW5kLFxuICB0b0ludCxcbiAgaW5oZXJpdCxcbiAgbWVyZ2UsXG4gIG5vb3AsXG4gIGlkZW50aXR5LFxuICB2YWx1ZUZuLFxuICBpc1VuZGVmaW5lZCxcbiAgaXNEZWZpbmVkLFxuICBpc09iamVjdCxcbiAgaXNCbGFua09iamVjdCxcbiAgaXNTdHJpbmcsXG4gIGlzTnVtYmVyLFxuICBpc051bWJlck5hTixcbiAgaXNEYXRlLFxuICBpc0Vycm9yLFxuICBpc0FycmF5LFxuICBpc0Z1bmN0aW9uLFxuICBpc1JlZ0V4cCxcbiAgaXNXaW5kb3csXG4gIGlzU2NvcGUsXG4gIGlzRmlsZSxcbiAgaXNGb3JtRGF0YSxcbiAgaXNCbG9iLFxuICBpc0Jvb2xlYW4sXG4gIGlzUHJvbWlzZUxpa2UsXG4gIHRyaW0sXG4gIGVzY2FwZUZvclJlZ2V4cCxcbiAgaXNFbGVtZW50LFxuICBtYWtlTWFwLFxuICBpbmNsdWRlcyxcbiAgYXJyYXlSZW1vdmUsXG4gIGNvcHksXG4gIHNpbXBsZUNvbXBhcmUsXG4gIGVxdWFscyxcbiAgY3NwLFxuICBqcSxcbiAgY29uY2F0LFxuICBzbGljZUFyZ3MsXG4gIGJpbmQsXG4gIHRvSnNvblJlcGxhY2VyLFxuICB0b0pzb24sXG4gIGZyb21Kc29uLFxuICBjb252ZXJ0VGltZXpvbmVUb0xvY2FsLFxuICB0aW1lem9uZVRvT2Zmc2V0LFxuICBzdGFydGluZ1RhZyxcbiAgdHJ5RGVjb2RlVVJJQ29tcG9uZW50LFxuICBwYXJzZUtleVZhbHVlLFxuICB0b0tleVZhbHVlLFxuICBlbmNvZGVVcmlTZWdtZW50LFxuICBlbmNvZGVVcmlRdWVyeSxcbiAgYW5ndWxhckluaXQsXG4gIGJvb3RzdHJhcCxcbiAgZ2V0VGVzdGFiaWxpdHksXG4gIHNuYWtlX2Nhc2UsXG4gIGJpbmRKUXVlcnksXG4gIGFzc2VydEFyZyxcbiAgYXNzZXJ0QXJnRm4sXG4gIGFzc2VydE5vdEhhc093blByb3BlcnR5LFxuICBnZXR0ZXIsXG4gIGdldEJsb2NrTm9kZXMsXG4gIGhhc093blByb3BlcnR5LFxuICBjcmVhdGVNYXAsXG4gIHN0cmluZ2lmeSxcblxuICBOT0RFX1RZUEVfRUxFTUVOVCxcbiAgTk9ERV9UWVBFX0FUVFJJQlVURSxcbiAgTk9ERV9UWVBFX1RFWFQsXG4gIE5PREVfVFlQRV9DT01NRU5ULFxuICBOT0RFX1RZUEVfRE9DVU1FTlQsXG4gIE5PREVfVFlQRV9ET0NVTUVOVF9GUkFHTUVOVFxuKi9cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgbmdcbiAqIEBtb2R1bGUgbmdcbiAqIEBpbnN0YWxsYXRpb25cbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqICMgbmcgKGNvcmUgbW9kdWxlKVxuICogVGhlIG5nIG1vZHVsZSBpcyBsb2FkZWQgYnkgZGVmYXVsdCB3aGVuIGFuIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbiBpcyBzdGFydGVkLiBUaGUgbW9kdWxlIGl0c2VsZlxuICogY29udGFpbnMgdGhlIGVzc2VudGlhbCBjb21wb25lbnRzIGZvciBhbiBBbmd1bGFySlMgYXBwbGljYXRpb24gdG8gZnVuY3Rpb24uIFRoZSB0YWJsZSBiZWxvd1xuICogbGlzdHMgYSBoaWdoIGxldmVsIGJyZWFrZG93biBvZiBlYWNoIG9mIHRoZSBzZXJ2aWNlcy9mYWN0b3JpZXMsIGZpbHRlcnMsIGRpcmVjdGl2ZXMgYW5kIHRlc3RpbmdcbiAqIGNvbXBvbmVudHMgYXZhaWxhYmxlIHdpdGhpbiB0aGlzIGNvcmUgbW9kdWxlLlxuICpcbiAqIDxkaXYgZG9jLW1vZHVsZS1jb21wb25lbnRzPVwibmdcIj48L2Rpdj5cbiAqL1xuXG52YXIgUkVHRVhfU1RSSU5HX1JFR0VYUCA9IC9eXFwvKC4rKVxcLyhbYS16XSopJC87XG5cbi8vIFRoZSBuYW1lIG9mIGEgZm9ybSBjb250cm9sJ3MgVmFsaWRpdHlTdGF0ZSBwcm9wZXJ0eS5cbi8vIFRoaXMgaXMgdXNlZCBzbyB0aGF0IGl0J3MgcG9zc2libGUgZm9yIGludGVybmFsIHRlc3RzIHRvIGNyZWF0ZSBtb2NrIFZhbGlkaXR5U3RhdGVzLlxudmFyIFZBTElESVRZX1NUQVRFX1BST1BFUlRZID0gJ3ZhbGlkaXR5JztcblxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5sb3dlcmNhc2VcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqIHNpbmNlVmVyc2lvbj1cIjEuNS4wXCJcbiAqIHJlbW92ZVZlcnNpb249XCIxLjcuMFwiXG4gKiBVc2UgW1N0cmluZy5wcm90b3R5cGUudG9Mb3dlckNhc2VdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy90b0xvd2VyQ2FzZSkgaW5zdGVhZC5cbiAqXG4gKiBAZGVzY3JpcHRpb24gQ29udmVydHMgdGhlIHNwZWNpZmllZCBzdHJpbmcgdG8gbG93ZXJjYXNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gYmUgY29udmVydGVkIHRvIGxvd2VyY2FzZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IExvd2VyY2FzZWQgc3RyaW5nLlxuICovXG52YXIgbG93ZXJjYXNlID0gZnVuY3Rpb24oc3RyaW5nKSB7cmV0dXJuIGlzU3RyaW5nKHN0cmluZykgPyBzdHJpbmcudG9Mb3dlckNhc2UoKSA6IHN0cmluZzt9O1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci51cHBlcmNhc2VcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlcHJlY2F0ZWRcbiAqIHNpbmNlVmVyc2lvbj1cIjEuNS4wXCJcbiAqIHJlbW92ZVZlcnNpb249XCIxLjcuMFwiXG4gKiBVc2UgW1N0cmluZy5wcm90b3R5cGUudG9VcHBlckNhc2VdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL1N0cmluZy90b1VwcGVyQ2FzZSkgaW5zdGVhZC5cbiAqXG4gKiBAZGVzY3JpcHRpb24gQ29udmVydHMgdGhlIHNwZWNpZmllZCBzdHJpbmcgdG8gdXBwZXJjYXNlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBTdHJpbmcgdG8gYmUgY29udmVydGVkIHRvIHVwcGVyY2FzZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFVwcGVyY2FzZWQgc3RyaW5nLlxuICovXG52YXIgdXBwZXJjYXNlID0gZnVuY3Rpb24oc3RyaW5nKSB7cmV0dXJuIGlzU3RyaW5nKHN0cmluZykgPyBzdHJpbmcudG9VcHBlckNhc2UoKSA6IHN0cmluZzt9O1xuXG5cbnZhciBtYW51YWxMb3dlcmNhc2UgPSBmdW5jdGlvbihzKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWJpdHdpc2UgKi9cbiAgcmV0dXJuIGlzU3RyaW5nKHMpXG4gICAgICA/IHMucmVwbGFjZSgvW0EtWl0vZywgZnVuY3Rpb24oY2gpIHtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShjaC5jaGFyQ29kZUF0KDApIHwgMzIpO30pXG4gICAgICA6IHM7XG4gIC8qIGVzbGludC1lbmFibGUgKi9cbn07XG52YXIgbWFudWFsVXBwZXJjYXNlID0gZnVuY3Rpb24ocykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1iaXR3aXNlICovXG4gIHJldHVybiBpc1N0cmluZyhzKVxuICAgICAgPyBzLnJlcGxhY2UoL1thLXpdL2csIGZ1bmN0aW9uKGNoKSB7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY2guY2hhckNvZGVBdCgwKSAmIH4zMik7fSlcbiAgICAgIDogcztcbiAgLyogZXNsaW50LWVuYWJsZSAqL1xufTtcblxuXG4vLyBTdHJpbmcjdG9Mb3dlckNhc2UgYW5kIFN0cmluZyN0b1VwcGVyQ2FzZSBkb24ndCBwcm9kdWNlIGNvcnJlY3QgcmVzdWx0cyBpbiBicm93c2VycyB3aXRoIFR1cmtpc2hcbi8vIGxvY2FsZSwgZm9yIHRoaXMgcmVhc29uIHdlIG5lZWQgdG8gZGV0ZWN0IHRoaXMgY2FzZSBhbmQgcmVkZWZpbmUgbG93ZXJjYXNlL3VwcGVyY2FzZSBtZXRob2RzXG4vLyB3aXRoIGNvcnJlY3QgYnV0IHNsb3dlciBhbHRlcm5hdGl2ZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xMTM4N1xuaWYgKCdpJyAhPT0gJ0knLnRvTG93ZXJDYXNlKCkpIHtcbiAgbG93ZXJjYXNlID0gbWFudWFsTG93ZXJjYXNlO1xuICB1cHBlcmNhc2UgPSBtYW51YWxVcHBlcmNhc2U7XG59XG5cblxudmFyXG4gICAgbXNpZSwgICAgICAgICAgICAgLy8gaG9sZHMgbWFqb3IgdmVyc2lvbiBudW1iZXIgZm9yIElFLCBvciBOYU4gaWYgVUEgaXMgbm90IElFLlxuICAgIGpxTGl0ZSwgICAgICAgICAgIC8vIGRlbGF5IGJpbmRpbmcgc2luY2UgalF1ZXJ5IGNvdWxkIGJlIGxvYWRlZCBhZnRlciB1cy5cbiAgICBqUXVlcnksICAgICAgICAgICAvLyBkZWxheSBiaW5kaW5nXG4gICAgc2xpY2UgICAgICAgICAgICAgPSBbXS5zbGljZSxcbiAgICBzcGxpY2UgICAgICAgICAgICA9IFtdLnNwbGljZSxcbiAgICBwdXNoICAgICAgICAgICAgICA9IFtdLnB1c2gsXG4gICAgdG9TdHJpbmcgICAgICAgICAgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLFxuICAgIGdldFByb3RvdHlwZU9mICAgID0gT2JqZWN0LmdldFByb3RvdHlwZU9mLFxuICAgIG5nTWluRXJyICAgICAgICAgID0gbWluRXJyKCduZycpLFxuXG4gICAgLyoqIEBuYW1lIGFuZ3VsYXIgKi9cbiAgICBhbmd1bGFyICAgICAgICAgICA9IHdpbmRvdy5hbmd1bGFyIHx8ICh3aW5kb3cuYW5ndWxhciA9IHt9KSxcbiAgICBhbmd1bGFyTW9kdWxlLFxuICAgIHVpZCAgICAgICAgICAgICAgID0gMDtcblxuLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG4vKipcbiAqIGRvY3VtZW50TW9kZSBpcyBhbiBJRS1vbmx5IHByb3BlcnR5XG4gKiBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvY2MxOTY5ODgodj12cy44NSkuYXNweFxuICovXG5tc2llID0gd2luZG93LmRvY3VtZW50LmRvY3VtZW50TW9kZTtcblxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IG9ialxuICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGBvYmpgIGlzIGFuIGFycmF5IG9yIGFycmF5LWxpa2Ugb2JqZWN0IChOb2RlTGlzdCwgQXJndW1lbnRzLFxuICogICAgICAgICAgICAgICAgICAgU3RyaW5nIC4uLilcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2Uob2JqKSB7XG5cbiAgLy8gYG51bGxgLCBgdW5kZWZpbmVkYCBhbmQgYHdpbmRvd2AgYXJlIG5vdCBhcnJheS1saWtlXG4gIGlmIChvYmogPT0gbnVsbCB8fCBpc1dpbmRvdyhvYmopKSByZXR1cm4gZmFsc2U7XG5cbiAgLy8gYXJyYXlzLCBzdHJpbmdzIGFuZCBqUXVlcnkvanFMaXRlIG9iamVjdHMgYXJlIGFycmF5IGxpa2VcbiAgLy8gKiBqcUxpdGUgaXMgZWl0aGVyIHRoZSBqUXVlcnkgb3IganFMaXRlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uXG4gIC8vICogd2UgaGF2ZSB0byBjaGVjayB0aGUgZXhpc3RlbmNlIG9mIGpxTGl0ZSBmaXJzdCBhcyB0aGlzIG1ldGhvZCBpcyBjYWxsZWRcbiAgLy8gICB2aWEgdGhlIGZvckVhY2ggbWV0aG9kIHdoZW4gY29uc3RydWN0aW5nIHRoZSBqcUxpdGUgb2JqZWN0IGluIHRoZSBmaXJzdCBwbGFjZVxuICBpZiAoaXNBcnJheShvYmopIHx8IGlzU3RyaW5nKG9iaikgfHwgKGpxTGl0ZSAmJiBvYmogaW5zdGFuY2VvZiBqcUxpdGUpKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBTdXBwb3J0OiBpT1MgOC4yIChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcbiAgLy8gXCJsZW5ndGhcIiBpbiBvYmogdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMTE1MDgpXG4gIHZhciBsZW5ndGggPSAnbGVuZ3RoJyBpbiBPYmplY3Qob2JqKSAmJiBvYmoubGVuZ3RoO1xuXG4gIC8vIE5vZGVMaXN0IG9iamVjdHMgKHdpdGggYGl0ZW1gIG1ldGhvZCkgYW5kXG4gIC8vIG90aGVyIG9iamVjdHMgd2l0aCBzdWl0YWJsZSBsZW5ndGggY2hhcmFjdGVyaXN0aWNzIGFyZSBhcnJheS1saWtlXG4gIHJldHVybiBpc051bWJlcihsZW5ndGgpICYmXG4gICAgKGxlbmd0aCA+PSAwICYmICgobGVuZ3RoIC0gMSkgaW4gb2JqIHx8IG9iaiBpbnN0YW5jZW9mIEFycmF5KSB8fCB0eXBlb2Ygb2JqLml0ZW0gPT09ICdmdW5jdGlvbicpO1xuXG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmZvckVhY2hcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBJbnZva2VzIHRoZSBgaXRlcmF0b3JgIGZ1bmN0aW9uIG9uY2UgZm9yIGVhY2ggaXRlbSBpbiBgb2JqYCBjb2xsZWN0aW9uLCB3aGljaCBjYW4gYmUgZWl0aGVyIGFuXG4gKiBvYmplY3Qgb3IgYW4gYXJyYXkuIFRoZSBgaXRlcmF0b3JgIGZ1bmN0aW9uIGlzIGludm9rZWQgd2l0aCBgaXRlcmF0b3IodmFsdWUsIGtleSwgb2JqKWAsIHdoZXJlIGB2YWx1ZWBcbiAqIGlzIHRoZSB2YWx1ZSBvZiBhbiBvYmplY3QgcHJvcGVydHkgb3IgYW4gYXJyYXkgZWxlbWVudCwgYGtleWAgaXMgdGhlIG9iamVjdCBwcm9wZXJ0eSBrZXkgb3JcbiAqIGFycmF5IGVsZW1lbnQgaW5kZXggYW5kIG9iaiBpcyB0aGUgYG9iamAgaXRzZWxmLiBTcGVjaWZ5aW5nIGEgYGNvbnRleHRgIGZvciB0aGUgZnVuY3Rpb24gaXMgb3B0aW9uYWwuXG4gKlxuICogSXQgaXMgd29ydGggbm90aW5nIHRoYXQgYC5mb3JFYWNoYCBkb2VzIG5vdCBpdGVyYXRlIG92ZXIgaW5oZXJpdGVkIHByb3BlcnRpZXMgYmVjYXVzZSBpdCBmaWx0ZXJzXG4gKiB1c2luZyB0aGUgYGhhc093blByb3BlcnR5YCBtZXRob2QuXG4gKlxuICogVW5saWtlIEVTMjYyJ3NcbiAqIFtBcnJheS5wcm90b3R5cGUuZm9yRWFjaF0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTE1LjQuNC4xOCksXG4gKiBwcm92aWRpbmcgJ3VuZGVmaW5lZCcgb3IgJ251bGwnIHZhbHVlcyBmb3IgYG9iamAgd2lsbCBub3QgdGhyb3cgYSBUeXBlRXJyb3IsIGJ1dCByYXRoZXIganVzdFxuICogcmV0dXJuIHRoZSB2YWx1ZSBwcm92aWRlZC5cbiAqXG4gICBgYGBqc1xuICAgICB2YXIgdmFsdWVzID0ge25hbWU6ICdtaXNrbycsIGdlbmRlcjogJ21hbGUnfTtcbiAgICAgdmFyIGxvZyA9IFtdO1xuICAgICBhbmd1bGFyLmZvckVhY2godmFsdWVzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgdGhpcy5wdXNoKGtleSArICc6ICcgKyB2YWx1ZSk7XG4gICAgIH0sIGxvZyk7XG4gICAgIGV4cGVjdChsb2cpLnRvRXF1YWwoWyduYW1lOiBtaXNrbycsICdnZW5kZXI6IG1hbGUnXSk7XG4gICBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIE9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRvciBJdGVyYXRvciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gY29udGV4dCBPYmplY3QgdG8gYmVjb21lIGNvbnRleHQgKGB0aGlzYCkgZm9yIHRoZSBpdGVyYXRvciBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R8QXJyYXl9IFJlZmVyZW5jZSB0byBgb2JqYC5cbiAqL1xuXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgdmFyIGtleSwgbGVuZ3RoO1xuICBpZiAob2JqKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqKSkge1xuICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChrZXkgIT09ICdwcm90b3R5cGUnICYmIGtleSAhPT0gJ2xlbmd0aCcgJiYga2V5ICE9PSAnbmFtZScgJiYgb2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqKSB8fCBpc0FycmF5TGlrZShvYmopKSB7XG4gICAgICB2YXIgaXNQcmltaXRpdmUgPSB0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JztcbiAgICAgIGZvciAoa2V5ID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsga2V5IDwgbGVuZ3RoOyBrZXkrKykge1xuICAgICAgICBpZiAoaXNQcmltaXRpdmUgfHwga2V5IGluIG9iaikge1xuICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2JqLmZvckVhY2ggJiYgb2JqLmZvckVhY2ggIT09IGZvckVhY2gpIHtcbiAgICAgICAgb2JqLmZvckVhY2goaXRlcmF0b3IsIGNvbnRleHQsIG9iaik7XG4gICAgfSBlbHNlIGlmIChpc0JsYW5rT2JqZWN0KG9iaikpIHtcbiAgICAgIC8vIGNyZWF0ZU1hcCgpIGZhc3QgcGF0aCAtLS0gU2FmZSB0byBhdm9pZCBoYXNPd25Qcm9wZXJ0eSBjaGVjayBiZWNhdXNlIHByb3RvdHlwZSBjaGFpbiBpcyBlbXB0eVxuICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmouaGFzT3duUHJvcGVydHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIFNsb3cgcGF0aCBmb3Igb2JqZWN0cyBpbmhlcml0aW5nIE9iamVjdC5wcm90b3R5cGUsIGhhc093blByb3BlcnR5IGNoZWNrIG5lZWRlZFxuICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTbG93IHBhdGggZm9yIG9iamVjdHMgd2hpY2ggZG8gbm90IGhhdmUgYSBtZXRob2QgYGhhc093blByb3BlcnR5YFxuICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBmb3JFYWNoU29ydGVkKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopLnNvcnQoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5c1tpXV0sIGtleXNbaV0pO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuXG5cbi8qKlxuICogd2hlbiB1c2luZyBmb3JFYWNoIHRoZSBwYXJhbXMgYXJlIHZhbHVlLCBrZXksIGJ1dCBpdCBpcyBvZnRlbiB1c2VmdWwgdG8gaGF2ZSBrZXksIHZhbHVlLlxuICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcsICopfSBpdGVyYXRvckZuXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oKiwgc3RyaW5nKX1cbiAqL1xuZnVuY3Rpb24gcmV2ZXJzZVBhcmFtcyhpdGVyYXRvckZuKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwga2V5KSB7aXRlcmF0b3JGbihrZXksIHZhbHVlKTt9O1xufVxuXG4vKipcbiAqIEEgY29uc2lzdGVudCB3YXkgb2YgY3JlYXRpbmcgdW5pcXVlIElEcyBpbiBhbmd1bGFyLlxuICpcbiAqIFVzaW5nIHNpbXBsZSBudW1iZXJzIGFsbG93cyB1cyB0byBnZW5lcmF0ZSAyOC42IG1pbGxpb24gdW5pcXVlIGlkcyBwZXIgc2Vjb25kIGZvciAxMCB5ZWFycyBiZWZvcmVcbiAqIHdlIGhpdCBudW1iZXIgcHJlY2lzaW9uIGlzc3VlcyBpbiBKYXZhU2NyaXB0LlxuICpcbiAqIE1hdGgucG93KDIsNTMpIC8gNjAgLyA2MCAvIDI0IC8gMzY1IC8gMTAgPSAyOC42TVxuICpcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFuIHVuaXF1ZSBhbHBoYS1udW1lcmljIHN0cmluZ1xuICovXG5mdW5jdGlvbiBuZXh0VWlkKCkge1xuICByZXR1cm4gKyt1aWQ7XG59XG5cblxuLyoqXG4gKiBTZXQgb3IgY2xlYXIgdGhlIGhhc2hrZXkgZm9yIGFuIG9iamVjdC5cbiAqIEBwYXJhbSBvYmogb2JqZWN0XG4gKiBAcGFyYW0gaCB0aGUgaGFzaGtleSAoIXRydXRoeSB0byBkZWxldGUgdGhlIGhhc2hrZXkpXG4gKi9cbmZ1bmN0aW9uIHNldEhhc2hLZXkob2JqLCBoKSB7XG4gIGlmIChoKSB7XG4gICAgb2JqLiQkaGFzaEtleSA9IGg7XG4gIH0gZWxzZSB7XG4gICAgZGVsZXRlIG9iai4kJGhhc2hLZXk7XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBiYXNlRXh0ZW5kKGRzdCwgb2JqcywgZGVlcCkge1xuICB2YXIgaCA9IGRzdC4kJGhhc2hLZXk7XG5cbiAgZm9yICh2YXIgaSA9IDAsIGlpID0gb2Jqcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgdmFyIG9iaiA9IG9ianNbaV07XG4gICAgaWYgKCFpc09iamVjdChvYmopICYmICFpc0Z1bmN0aW9uKG9iaikpIGNvbnRpbnVlO1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICBmb3IgKHZhciBqID0gMCwgamogPSBrZXlzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2pdO1xuICAgICAgdmFyIHNyYyA9IG9ialtrZXldO1xuXG4gICAgICBpZiAoZGVlcCAmJiBpc09iamVjdChzcmMpKSB7XG4gICAgICAgIGlmIChpc0RhdGUoc3JjKSkge1xuICAgICAgICAgIGRzdFtrZXldID0gbmV3IERhdGUoc3JjLnZhbHVlT2YoKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNSZWdFeHAoc3JjKSkge1xuICAgICAgICAgIGRzdFtrZXldID0gbmV3IFJlZ0V4cChzcmMpO1xuICAgICAgICB9IGVsc2UgaWYgKHNyYy5ub2RlTmFtZSkge1xuICAgICAgICAgIGRzdFtrZXldID0gc3JjLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0VsZW1lbnQoc3JjKSkge1xuICAgICAgICAgIGRzdFtrZXldID0gc3JjLmNsb25lKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFpc09iamVjdChkc3Rba2V5XSkpIGRzdFtrZXldID0gaXNBcnJheShzcmMpID8gW10gOiB7fTtcbiAgICAgICAgICBiYXNlRXh0ZW5kKGRzdFtrZXldLCBbc3JjXSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRzdFtrZXldID0gc3JjO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNldEhhc2hLZXkoZHN0LCBoKTtcbiAgcmV0dXJuIGRzdDtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZXh0ZW5kXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRXh0ZW5kcyB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGBkc3RgIGJ5IGNvcHlpbmcgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBmcm9tIHRoZSBgc3JjYCBvYmplY3QocylcbiAqIHRvIGBkc3RgLiBZb3UgY2FuIHNwZWNpZnkgbXVsdGlwbGUgYHNyY2Agb2JqZWN0cy4gSWYgeW91IHdhbnQgdG8gcHJlc2VydmUgb3JpZ2luYWwgb2JqZWN0cywgeW91IGNhbiBkbyBzb1xuICogYnkgcGFzc2luZyBhbiBlbXB0eSBvYmplY3QgYXMgdGhlIHRhcmdldDogYHZhciBvYmplY3QgPSBhbmd1bGFyLmV4dGVuZCh7fSwgb2JqZWN0MSwgb2JqZWN0MilgLlxuICpcbiAqICoqTm90ZToqKiBLZWVwIGluIG1pbmQgdGhhdCBgYW5ndWxhci5leHRlbmRgIGRvZXMgbm90IHN1cHBvcnQgcmVjdXJzaXZlIG1lcmdlIChkZWVwIGNvcHkpLiBVc2VcbiAqIHtAbGluayBhbmd1bGFyLm1lcmdlfSBmb3IgdGhpcy5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZHN0IERlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzcmMgU291cmNlIG9iamVjdChzKS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlZmVyZW5jZSB0byBgZHN0YC5cbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGRzdCkge1xuICByZXR1cm4gYmFzZUV4dGVuZChkc3QsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgZmFsc2UpO1xufVxuXG5cbi8qKlxuKiBAbmdkb2MgZnVuY3Rpb25cbiogQG5hbWUgYW5ndWxhci5tZXJnZVxuKiBAbW9kdWxlIG5nXG4qIEBraW5kIGZ1bmN0aW9uXG4qXG4qIEBkZXNjcmlwdGlvblxuKiBEZWVwbHkgZXh0ZW5kcyB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGBkc3RgIGJ5IGNvcHlpbmcgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBmcm9tIHRoZSBgc3JjYCBvYmplY3QocylcbiogdG8gYGRzdGAuIFlvdSBjYW4gc3BlY2lmeSBtdWx0aXBsZSBgc3JjYCBvYmplY3RzLiBJZiB5b3Ugd2FudCB0byBwcmVzZXJ2ZSBvcmlnaW5hbCBvYmplY3RzLCB5b3UgY2FuIGRvIHNvXG4qIGJ5IHBhc3NpbmcgYW4gZW1wdHkgb2JqZWN0IGFzIHRoZSB0YXJnZXQ6IGB2YXIgb2JqZWN0ID0gYW5ndWxhci5tZXJnZSh7fSwgb2JqZWN0MSwgb2JqZWN0MilgLlxuKlxuKiBVbmxpa2Uge0BsaW5rIGFuZ3VsYXIuZXh0ZW5kIGV4dGVuZCgpfSwgYG1lcmdlKClgIHJlY3Vyc2l2ZWx5IGRlc2NlbmRzIGludG8gb2JqZWN0IHByb3BlcnRpZXMgb2Ygc291cmNlXG4qIG9iamVjdHMsIHBlcmZvcm1pbmcgYSBkZWVwIGNvcHkuXG4qXG4qIEBkZXByZWNhdGVkXG4qIHNpbmNlVmVyc2lvbj1cIjEuNi41XCJcbiogVGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkLCBidXQgd2lsbCBub3QgYmUgcmVtb3ZlZCBpbiB0aGUgMS54IGxpZmVjeWNsZS5cbiogVGhlcmUgYXJlIGVkZ2UgY2FzZXMgKHNlZSB7QGxpbmsgYW5ndWxhci5tZXJnZSNrbm93bi1pc3N1ZXMga25vd24gaXNzdWVzfSkgdGhhdCBhcmUgbm90XG4qIHN1cHBvcnRlZCBieSB0aGlzIGZ1bmN0aW9uLiBXZSBzdWdnZXN0XG4qIHVzaW5nIFtsb2Rhc2gncyBtZXJnZSgpXShodHRwczovL2xvZGFzaC5jb20vZG9jcy80LjE3LjQjbWVyZ2UpIGluc3RlYWQuXG4qXG4qIEBrbm93bklzc3VlXG4qIFRoaXMgaXMgYSBsaXN0IG9mIChrbm93bikgb2JqZWN0IHR5cGVzIHRoYXQgYXJlIG5vdCBoYW5kbGVkIGNvcnJlY3RseSBieSB0aGlzIGZ1bmN0aW9uOlxuKiAtIFtgQmxvYmBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9CbG9iKVxuKiAtIFtgTWVkaWFTdHJlYW1gXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvTWVkaWFTdHJlYW0pXG4qIC0gW2BDYW52YXNHcmFkaWVudGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RvY3MvV2ViL0FQSS9DYW52YXNHcmFkaWVudClcbiogLSBBbmd1bGFySlMge0BsaW5rICRyb290U2NvcGUuU2NvcGUgc2NvcGVzfTtcbipcbiogQHBhcmFtIHtPYmplY3R9IGRzdCBEZXN0aW5hdGlvbiBvYmplY3QuXG4qIEBwYXJhbSB7Li4uT2JqZWN0fSBzcmMgU291cmNlIG9iamVjdChzKS5cbiogQHJldHVybnMge09iamVjdH0gUmVmZXJlbmNlIHRvIGBkc3RgLlxuKi9cbmZ1bmN0aW9uIG1lcmdlKGRzdCkge1xuICByZXR1cm4gYmFzZUV4dGVuZChkc3QsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSwgdHJ1ZSk7XG59XG5cblxuXG5mdW5jdGlvbiB0b0ludChzdHIpIHtcbiAgcmV0dXJuIHBhcnNlSW50KHN0ciwgMTApO1xufVxuXG52YXIgaXNOdW1iZXJOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gaXNOdW1iZXJOYU4obnVtKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgcmV0dXJuIG51bSAhPT0gbnVtO1xufTtcblxuXG5mdW5jdGlvbiBpbmhlcml0KHBhcmVudCwgZXh0cmEpIHtcbiAgcmV0dXJuIGV4dGVuZChPYmplY3QuY3JlYXRlKHBhcmVudCksIGV4dHJhKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIubm9vcFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBubyBvcGVyYXRpb25zLiBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VmdWwgd2hlbiB3cml0aW5nIGNvZGUgaW4gdGhlXG4gKiBmdW5jdGlvbmFsIHN0eWxlLlxuICAgYGBganNcbiAgICAgZnVuY3Rpb24gZm9vKGNhbGxiYWNrKSB7XG4gICAgICAgdmFyIHJlc3VsdCA9IGNhbGN1bGF0ZVJlc3VsdCgpO1xuICAgICAgIChjYWxsYmFjayB8fCBhbmd1bGFyLm5vb3ApKHJlc3VsdCk7XG4gICAgIH1cbiAgIGBgYFxuICovXG5mdW5jdGlvbiBub29wKCkge31cbm5vb3AuJGluamVjdCA9IFtdO1xuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlkZW50aXR5XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgaXRzIGZpcnN0IGFyZ3VtZW50LiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY29kZSBpbiB0aGVcbiAqIGZ1bmN0aW9uYWwgc3R5bGUuXG4gKlxuICAgYGBganNcbiAgIGZ1bmN0aW9uIHRyYW5zZm9ybWVyKHRyYW5zZm9ybWF0aW9uRm4sIHZhbHVlKSB7XG4gICAgIHJldHVybiAodHJhbnNmb3JtYXRpb25GbiB8fCBhbmd1bGFyLmlkZW50aXR5KSh2YWx1ZSk7XG4gICB9O1xuXG4gICAvLyBFLmcuXG4gICBmdW5jdGlvbiBnZXRSZXN1bHQoZm4sIGlucHV0KSB7XG4gICAgIHJldHVybiAoZm4gfHwgYW5ndWxhci5pZGVudGl0eSkoaW5wdXQpO1xuICAgfTtcblxuICAgZ2V0UmVzdWx0KGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gKiAyOyB9LCAyMSk7ICAgLy8gcmV0dXJucyA0MlxuICAgZ2V0UmVzdWx0KG51bGwsIDIxKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJucyAyMVxuICAgZ2V0UmVzdWx0KHVuZGVmaW5lZCwgMjEpOyAgICAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJucyAyMVxuICAgYGBgXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSB0byBiZSByZXR1cm5lZC5cbiAqIEByZXR1cm5zIHsqfSB0aGUgdmFsdWUgcGFzc2VkIGluLlxuICovXG5mdW5jdGlvbiBpZGVudGl0eSgkKSB7cmV0dXJuICQ7fVxuaWRlbnRpdHkuJGluamVjdCA9IFtdO1xuXG5cbmZ1bmN0aW9uIHZhbHVlRm4odmFsdWUpIHtyZXR1cm4gZnVuY3Rpb24gdmFsdWVSZWYoKSB7cmV0dXJuIHZhbHVlO307fVxuXG5mdW5jdGlvbiBoYXNDdXN0b21Ub1N0cmluZyhvYmopIHtcbiAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqLnRvU3RyaW5nKSAmJiBvYmoudG9TdHJpbmcgIT09IHRvU3RyaW5nO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzVW5kZWZpbmVkXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyB1bmRlZmluZWQuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIHVuZGVmaW5lZC5cbiAqL1xuZnVuY3Rpb24gaXNVbmRlZmluZWQodmFsdWUpIHtyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJzt9XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNEZWZpbmVkXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBkZWZpbmVkLlxuICovXG5mdW5jdGlvbiBpc0RlZmluZWQodmFsdWUpIHtyZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJzt9XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNPYmplY3RcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGFuIGBPYmplY3RgLiBVbmxpa2UgYHR5cGVvZmAgaW4gSmF2YVNjcmlwdCwgYG51bGxgcyBhcmUgbm90XG4gKiBjb25zaWRlcmVkIHRvIGJlIG9iamVjdHMuIE5vdGUgdGhhdCBKYXZhU2NyaXB0IGFycmF5cyBhcmUgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYW4gYE9iamVjdGAgYnV0IG5vdCBgbnVsbGAuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2lzb2JqZWN0NFxuICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jztcbn1cblxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIG9iamVjdCB3aXRoIGEgbnVsbCBwcm90b3R5cGVcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGBPYmplY3RgIHdpdGggYSBudWxsIHByb3RvdHlwZVxuICovXG5mdW5jdGlvbiBpc0JsYW5rT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmICFnZXRQcm90b3R5cGVPZih2YWx1ZSk7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuaXNTdHJpbmdcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYFN0cmluZ2AuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgYFN0cmluZ2AuXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7fVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzTnVtYmVyXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiBhIHJlZmVyZW5jZSBpcyBhIGBOdW1iZXJgLlxuICpcbiAqIFRoaXMgaW5jbHVkZXMgdGhlIFwic3BlY2lhbFwiIG51bWJlcnMgYE5hTmAsIGArSW5maW5pdHlgIGFuZCBgLUluZmluaXR5YC5cbiAqXG4gKiBJZiB5b3Ugd2lzaCB0byBleGNsdWRlIHRoZXNlIHRoZW4geW91IGNhbiB1c2UgdGhlIG5hdGl2ZVxuICogW2Bpc0Zpbml0ZSddKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL2lzRmluaXRlKVxuICogbWV0aG9kLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBOdW1iZXJgLlxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge3JldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInO31cblxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5pc0RhdGVcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYSBkYXRlLlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhIGBEYXRlYC5cbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbHVlKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzQXJyYXlcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGFuIGBBcnJheWAuIEFsaWFzIG9mIEFycmF5LmlzQXJyYXkuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIGBBcnJheWAuXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYW4gYEVycm9yYC5cbiAqIExvb3NlbHkgYmFzZWQgb24gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaXNlcnJvclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgUmVmZXJlbmNlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYHZhbHVlYCBpcyBhbiBgRXJyb3JgLlxuICovXG5mdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gIHZhciB0YWcgPSB0b1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlICdbb2JqZWN0IEVycm9yXSc6IHJldHVybiB0cnVlO1xuICAgIGNhc2UgJ1tvYmplY3QgRXhjZXB0aW9uXSc6IHJldHVybiB0cnVlO1xuICAgIGNhc2UgJ1tvYmplY3QgRE9NRXhjZXB0aW9uXSc6IHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIEVycm9yO1xuICB9XG59XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzRnVuY3Rpb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlcm1pbmVzIGlmIGEgcmVmZXJlbmNlIGlzIGEgYEZ1bmN0aW9uYC5cbiAqXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgRnVuY3Rpb25gLlxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7cmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJzt9XG5cblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgdmFsdWUgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFJlZmVyZW5jZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgYSBgUmVnRXhwYC5cbiAqL1xuZnVuY3Rpb24gaXNSZWdFeHAodmFsdWUpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBSZWdFeHBdJztcbn1cblxuXG4vKipcbiAqIENoZWNrcyBpZiBgb2JqYCBpcyBhIHdpbmRvdyBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gb2JqIE9iamVjdCB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgYG9iamAgaXMgYSB3aW5kb3cgb2JqLlxuICovXG5mdW5jdGlvbiBpc1dpbmRvdyhvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmoud2luZG93ID09PSBvYmo7XG59XG5cblxuZnVuY3Rpb24gaXNTY29wZShvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouJGV2YWxBc3luYyAmJiBvYmouJHdhdGNoO1xufVxuXG5cbmZ1bmN0aW9uIGlzRmlsZShvYmopIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG5cbmZ1bmN0aW9uIGlzRm9ybURhdGEob2JqKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEZvcm1EYXRhXSc7XG59XG5cblxuZnVuY3Rpb24gaXNCbG9iKG9iaikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cblxuZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbn1cblxuXG5mdW5jdGlvbiBpc1Byb21pc2VMaWtlKG9iaikge1xuICByZXR1cm4gb2JqICYmIGlzRnVuY3Rpb24ob2JqLnRoZW4pO1xufVxuXG5cbnZhciBUWVBFRF9BUlJBWV9SRUdFWFAgPSAvXlxcW29iamVjdCAoPzpVaW50OHxVaW50OENsYW1wZWR8VWludDE2fFVpbnQzMnxJbnQ4fEludDE2fEludDMyfEZsb2F0MzJ8RmxvYXQ2NClBcnJheV0kLztcbmZ1bmN0aW9uIGlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgJiYgaXNOdW1iZXIodmFsdWUubGVuZ3RoKSAmJiBUWVBFRF9BUlJBWV9SRUdFWFAudGVzdCh0b1N0cmluZy5jYWxsKHZhbHVlKSk7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIob2JqKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cblxudmFyIHRyaW0gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gdmFsdWUudHJpbSgpIDogdmFsdWU7XG59O1xuXG4vLyBDb3BpZWQgZnJvbTpcbi8vIGh0dHA6Ly9kb2NzLmNsb3N1cmUtbGlicmFyeS5nb29nbGVjb2RlLmNvbS9naXQvbG9jYWxfY2xvc3VyZV9nb29nX3N0cmluZ19zdHJpbmcuanMuc291cmNlLmh0bWwjbGluZTEwMjFcbi8vIFByZXJlcTogcyBpcyBhIHN0cmluZy5cbnZhciBlc2NhcGVGb3JSZWdleHAgPSBmdW5jdGlvbihzKSB7XG4gIHJldHVybiBzXG4gICAgLnJlcGxhY2UoLyhbLSgpW1xcXXt9Kz8qLiRefCw6IzwhXFxcXF0pL2csICdcXFxcJDEnKVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG4gICAgLnJlcGxhY2UoL1xceDA4L2csICdcXFxceDA4Jyk7XG59O1xuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmlzRWxlbWVudFxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERldGVybWluZXMgaWYgYSByZWZlcmVuY2UgaXMgYSBET00gZWxlbWVudCAob3Igd3JhcHBlZCBqUXVlcnkgZWxlbWVudCkuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBSZWZlcmVuY2UgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQgKG9yIHdyYXBwZWQgalF1ZXJ5IGVsZW1lbnQpLlxuICovXG5mdW5jdGlvbiBpc0VsZW1lbnQobm9kZSkge1xuICByZXR1cm4gISEobm9kZSAmJlxuICAgIChub2RlLm5vZGVOYW1lICAvLyBXZSBhcmUgYSBkaXJlY3QgZWxlbWVudC5cbiAgICB8fCAobm9kZS5wcm9wICYmIG5vZGUuYXR0ciAmJiBub2RlLmZpbmQpKSk7ICAvLyBXZSBoYXZlIGFuIG9uIGFuZCBmaW5kIG1ldGhvZCBwYXJ0IG9mIGpRdWVyeSBBUEkuXG59XG5cbi8qKlxuICogQHBhcmFtIHN0ciAna2V5MSxrZXkyLC4uLidcbiAqIEByZXR1cm5zIHtvYmplY3R9IGluIHRoZSBmb3JtIG9mIHtrZXkxOnRydWUsIGtleTI6dHJ1ZSwgLi4ufVxuICovXG5mdW5jdGlvbiBtYWtlTWFwKHN0cikge1xuICB2YXIgb2JqID0ge30sIGl0ZW1zID0gc3RyLnNwbGl0KCcsJyksIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgIG9ialtpdGVtc1tpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cblxuZnVuY3Rpb24gbm9kZU5hbWVfKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGxvd2VyY2FzZShlbGVtZW50Lm5vZGVOYW1lIHx8IChlbGVtZW50WzBdICYmIGVsZW1lbnRbMF0ubm9kZU5hbWUpKTtcbn1cblxuZnVuY3Rpb24gaW5jbHVkZXMoYXJyYXksIG9iaikge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhcnJheSwgb2JqKSAhPT0gLTE7XG59XG5cbmZ1bmN0aW9uIGFycmF5UmVtb3ZlKGFycmF5LCB2YWx1ZSkge1xuICB2YXIgaW5kZXggPSBhcnJheS5pbmRleE9mKHZhbHVlKTtcbiAgaWYgKGluZGV4ID49IDApIHtcbiAgICBhcnJheS5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG4gIHJldHVybiBpbmRleDtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuY29weVxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZXMgYSBkZWVwIGNvcHkgb2YgYHNvdXJjZWAsIHdoaWNoIHNob3VsZCBiZSBhbiBvYmplY3Qgb3IgYW4gYXJyYXkuXG4gKlxuICogKiBJZiBubyBkZXN0aW5hdGlvbiBpcyBzdXBwbGllZCwgYSBjb3B5IG9mIHRoZSBvYmplY3Qgb3IgYXJyYXkgaXMgY3JlYXRlZC5cbiAqICogSWYgYSBkZXN0aW5hdGlvbiBpcyBwcm92aWRlZCwgYWxsIG9mIGl0cyBlbGVtZW50cyAoZm9yIGFycmF5cykgb3IgcHJvcGVydGllcyAoZm9yIG9iamVjdHMpXG4gKiAgIGFyZSBkZWxldGVkIGFuZCB0aGVuIGFsbCBlbGVtZW50cy9wcm9wZXJ0aWVzIGZyb20gdGhlIHNvdXJjZSBhcmUgY29waWVkIHRvIGl0LlxuICogKiBJZiBgc291cmNlYCBpcyBub3QgYW4gb2JqZWN0IG9yIGFycmF5IChpbmMuIGBudWxsYCBhbmQgYHVuZGVmaW5lZGApLCBgc291cmNlYCBpcyByZXR1cm5lZC5cbiAqICogSWYgYHNvdXJjZWAgaXMgaWRlbnRpY2FsIHRvIGBkZXN0aW5hdGlvbmAgYW4gZXhjZXB0aW9uIHdpbGwgYmUgdGhyb3duLlxuICpcbiAqIDxiciAvPlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICAgT25seSBlbnVtZXJhYmxlIHByb3BlcnRpZXMgYXJlIHRha2VuIGludG8gYWNjb3VudC4gTm9uLWVudW1lcmFibGUgcHJvcGVydGllcyAoYm90aCBvbiBgc291cmNlYFxuICogICBhbmQgb24gYGRlc3RpbmF0aW9uYCkgd2lsbCBiZSBpZ25vcmVkLlxuICogPC9kaXY+XG4gKlxuICogQHBhcmFtIHsqfSBzb3VyY2UgVGhlIHNvdXJjZSB0aGF0IHdpbGwgYmUgdXNlZCB0byBtYWtlIGEgY29weS5cbiAqICAgICAgICAgICAgICAgICAgIENhbiBiZSBhbnkgdHlwZSwgaW5jbHVkaW5nIHByaW1pdGl2ZXMsIGBudWxsYCwgYW5kIGB1bmRlZmluZWRgLlxuICogQHBhcmFtIHsoT2JqZWN0fEFycmF5KT19IGRlc3RpbmF0aW9uIERlc3RpbmF0aW9uIGludG8gd2hpY2ggdGhlIHNvdXJjZSBpcyBjb3BpZWQuIElmXG4gKiAgICAgcHJvdmlkZWQsIG11c3QgYmUgb2YgdGhlIHNhbWUgdHlwZSBhcyBgc291cmNlYC5cbiAqIEByZXR1cm5zIHsqfSBUaGUgY29weSBvciB1cGRhdGVkIGBkZXN0aW5hdGlvbmAsIGlmIGBkZXN0aW5hdGlvbmAgd2FzIHNwZWNpZmllZC5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJjb3B5RXhhbXBsZVwiIG5hbWU9XCJhbmd1bGFyLWNvcHlcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPGZvcm0gbm92YWxpZGF0ZSBjbGFzcz1cInNpbXBsZS1mb3JtXCI+XG4gICAgICAgICAgPGxhYmVsPk5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXNlci5uYW1lXCIgLz48L2xhYmVsPjxiciAvPlxuICAgICAgICAgIDxsYWJlbD5BZ2U6ICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwidXNlci5hZ2VcIiAvPjwvbGFiZWw+PGJyIC8+XG4gICAgICAgICAgR2VuZGVyOiA8bGFiZWw+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwidXNlci5nZW5kZXJcIiB2YWx1ZT1cIm1hbGVcIiAvPm1hbGU8L2xhYmVsPlxuICAgICAgICAgICAgICAgICAgPGxhYmVsPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuZy1tb2RlbD1cInVzZXIuZ2VuZGVyXCIgdmFsdWU9XCJmZW1hbGVcIiAvPmZlbWFsZTwvbGFiZWw+PGJyIC8+XG4gICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInJlc2V0KClcIj5SRVNFVDwvYnV0dG9uPlxuICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJ1cGRhdGUodXNlcilcIj5TQVZFPC9idXR0b24+XG4gICAgICAgIDwvZm9ybT5cbiAgICAgICAgPHByZT5mb3JtID0ge3t1c2VyIHwganNvbn19PC9wcmU+XG4gICAgICAgIDxwcmU+bWFzdGVyID0ge3ttYXN0ZXIgfCBqc29ufX08L3ByZT5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAvLyBNb2R1bGU6IGNvcHlFeGFtcGxlXG4gICAgICBhbmd1bGFyLlxuICAgICAgICBtb2R1bGUoJ2NvcHlFeGFtcGxlJywgW10pLlxuICAgICAgICBjb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLm1hc3RlciA9IHt9O1xuXG4gICAgICAgICAgJHNjb3BlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBFeGFtcGxlIHdpdGggMSBhcmd1bWVudFxuICAgICAgICAgICAgJHNjb3BlLnVzZXIgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLm1hc3Rlcik7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgICRzY29wZS51cGRhdGUgPSBmdW5jdGlvbih1c2VyKSB7XG4gICAgICAgICAgICAvLyBFeGFtcGxlIHdpdGggMiBhcmd1bWVudHNcbiAgICAgICAgICAgIGFuZ3VsYXIuY29weSh1c2VyLCAkc2NvcGUubWFzdGVyKTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgJHNjb3BlLnJlc2V0KCk7XG4gICAgICAgIH1dKTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gY29weShzb3VyY2UsIGRlc3RpbmF0aW9uLCBtYXhEZXB0aCkge1xuICB2YXIgc3RhY2tTb3VyY2UgPSBbXTtcbiAgdmFyIHN0YWNrRGVzdCA9IFtdO1xuICBtYXhEZXB0aCA9IGlzVmFsaWRPYmplY3RNYXhEZXB0aChtYXhEZXB0aCkgPyBtYXhEZXB0aCA6IE5hTjtcblxuICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICBpZiAoaXNUeXBlZEFycmF5KGRlc3RpbmF0aW9uKSB8fCBpc0FycmF5QnVmZmVyKGRlc3RpbmF0aW9uKSkge1xuICAgICAgdGhyb3cgbmdNaW5FcnIoJ2NwdGEnLCAnQ2FuXFwndCBjb3B5ISBUeXBlZEFycmF5IGRlc3RpbmF0aW9uIGNhbm5vdCBiZSBtdXRhdGVkLicpO1xuICAgIH1cbiAgICBpZiAoc291cmNlID09PSBkZXN0aW5hdGlvbikge1xuICAgICAgdGhyb3cgbmdNaW5FcnIoJ2NwaScsICdDYW5cXCd0IGNvcHkhIFNvdXJjZSBhbmQgZGVzdGluYXRpb24gYXJlIGlkZW50aWNhbC4nKTtcbiAgICB9XG5cbiAgICAvLyBFbXB0eSB0aGUgZGVzdGluYXRpb24gb2JqZWN0XG4gICAgaWYgKGlzQXJyYXkoZGVzdGluYXRpb24pKSB7XG4gICAgICBkZXN0aW5hdGlvbi5sZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3JFYWNoKGRlc3RpbmF0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChrZXkgIT09ICckJGhhc2hLZXknKSB7XG4gICAgICAgICAgZGVsZXRlIGRlc3RpbmF0aW9uW2tleV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YWNrU291cmNlLnB1c2goc291cmNlKTtcbiAgICBzdGFja0Rlc3QucHVzaChkZXN0aW5hdGlvbik7XG4gICAgcmV0dXJuIGNvcHlSZWN1cnNlKHNvdXJjZSwgZGVzdGluYXRpb24sIG1heERlcHRoKTtcbiAgfVxuXG4gIHJldHVybiBjb3B5RWxlbWVudChzb3VyY2UsIG1heERlcHRoKTtcblxuICBmdW5jdGlvbiBjb3B5UmVjdXJzZShzb3VyY2UsIGRlc3RpbmF0aW9uLCBtYXhEZXB0aCkge1xuICAgIG1heERlcHRoLS07XG4gICAgaWYgKG1heERlcHRoIDwgMCkge1xuICAgICAgcmV0dXJuICcuLi4nO1xuICAgIH1cbiAgICB2YXIgaCA9IGRlc3RpbmF0aW9uLiQkaGFzaEtleTtcbiAgICB2YXIga2V5O1xuICAgIGlmIChpc0FycmF5KHNvdXJjZSkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHNvdXJjZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uLnB1c2goY29weUVsZW1lbnQoc291cmNlW2ldLCBtYXhEZXB0aCkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNCbGFua09iamVjdChzb3VyY2UpKSB7XG4gICAgICAvLyBjcmVhdGVNYXAoKSBmYXN0IHBhdGggLS0tIFNhZmUgdG8gYXZvaWQgaGFzT3duUHJvcGVydHkgY2hlY2sgYmVjYXVzZSBwcm90b3R5cGUgY2hhaW4gaXMgZW1wdHlcbiAgICAgIGZvciAoa2V5IGluIHNvdXJjZSkge1xuICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY29weUVsZW1lbnQoc291cmNlW2tleV0sIG1heERlcHRoKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNvdXJjZSAmJiB0eXBlb2Ygc291cmNlLmhhc093blByb3BlcnR5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBTbG93IHBhdGgsIHdoaWNoIG11c3QgcmVseSBvbiBoYXNPd25Qcm9wZXJ0eVxuICAgICAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjb3B5RWxlbWVudChzb3VyY2Vba2V5XSwgbWF4RGVwdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNsb3dlc3QgcGF0aCAtLS0gaGFzT3duUHJvcGVydHkgY2FuJ3QgYmUgY2FsbGVkIGFzIGEgbWV0aG9kXG4gICAgICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGNvcHlFbGVtZW50KHNvdXJjZVtrZXldLCBtYXhEZXB0aCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgc2V0SGFzaEtleShkZXN0aW5hdGlvbiwgaCk7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gY29weUVsZW1lbnQoc291cmNlLCBtYXhEZXB0aCkge1xuICAgIC8vIFNpbXBsZSB2YWx1ZXNcbiAgICBpZiAoIWlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfVxuXG4gICAgLy8gQWxyZWFkeSBjb3BpZWQgdmFsdWVzXG4gICAgdmFyIGluZGV4ID0gc3RhY2tTb3VyY2UuaW5kZXhPZihzb3VyY2UpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBzdGFja0Rlc3RbaW5kZXhdO1xuICAgIH1cblxuICAgIGlmIChpc1dpbmRvdyhzb3VyY2UpIHx8IGlzU2NvcGUoc291cmNlKSkge1xuICAgICAgdGhyb3cgbmdNaW5FcnIoJ2Nwd3MnLFxuICAgICAgICAnQ2FuXFwndCBjb3B5ISBNYWtpbmcgY29waWVzIG9mIFdpbmRvdyBvciBTY29wZSBpbnN0YW5jZXMgaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgICB9XG5cbiAgICB2YXIgbmVlZHNSZWN1cnNlID0gZmFsc2U7XG4gICAgdmFyIGRlc3RpbmF0aW9uID0gY29weVR5cGUoc291cmNlKTtcblxuICAgIGlmIChkZXN0aW5hdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBkZXN0aW5hdGlvbiA9IGlzQXJyYXkoc291cmNlKSA/IFtdIDogT2JqZWN0LmNyZWF0ZShnZXRQcm90b3R5cGVPZihzb3VyY2UpKTtcbiAgICAgIG5lZWRzUmVjdXJzZSA9IHRydWU7XG4gICAgfVxuXG4gICAgc3RhY2tTb3VyY2UucHVzaChzb3VyY2UpO1xuICAgIHN0YWNrRGVzdC5wdXNoKGRlc3RpbmF0aW9uKTtcblxuICAgIHJldHVybiBuZWVkc1JlY3Vyc2VcbiAgICAgID8gY29weVJlY3Vyc2Uoc291cmNlLCBkZXN0aW5hdGlvbiwgbWF4RGVwdGgpXG4gICAgICA6IGRlc3RpbmF0aW9uO1xuICB9XG5cbiAgZnVuY3Rpb24gY29weVR5cGUoc291cmNlKSB7XG4gICAgc3dpdGNoICh0b1N0cmluZy5jYWxsKHNvdXJjZSkpIHtcbiAgICAgIGNhc2UgJ1tvYmplY3QgSW50OEFycmF5XSc6XG4gICAgICBjYXNlICdbb2JqZWN0IEludDE2QXJyYXldJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgSW50MzJBcnJheV0nOlxuICAgICAgY2FzZSAnW29iamVjdCBGbG9hdDMyQXJyYXldJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSc6XG4gICAgICBjYXNlICdbb2JqZWN0IFVpbnQ4QXJyYXldJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgVWludDE2QXJyYXldJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgVWludDMyQXJyYXldJzpcbiAgICAgICAgcmV0dXJuIG5ldyBzb3VyY2UuY29uc3RydWN0b3IoY29weUVsZW1lbnQoc291cmNlLmJ1ZmZlciksIHNvdXJjZS5ieXRlT2Zmc2V0LCBzb3VyY2UubGVuZ3RoKTtcblxuICAgICAgY2FzZSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nOlxuICAgICAgICAvLyBTdXBwb3J0OiBJRTEwXG4gICAgICAgIGlmICghc291cmNlLnNsaWNlKSB7XG4gICAgICAgICAgLy8gSWYgd2UncmUgaW4gdGhpcyBjYXNlIHdlIGtub3cgdGhlIGVudmlyb25tZW50IHN1cHBvcnRzIEFycmF5QnVmZmVyXG4gICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbiAgICAgICAgICB2YXIgY29waWVkID0gbmV3IEFycmF5QnVmZmVyKHNvdXJjZS5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICBuZXcgVWludDhBcnJheShjb3BpZWQpLnNldChuZXcgVWludDhBcnJheShzb3VyY2UpKTtcbiAgICAgICAgICAvKiBlc2xpbnQtZW5hYmxlICovXG4gICAgICAgICAgcmV0dXJuIGNvcGllZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlLnNsaWNlKDApO1xuXG4gICAgICBjYXNlICdbb2JqZWN0IEJvb2xlYW5dJzpcbiAgICAgIGNhc2UgJ1tvYmplY3QgTnVtYmVyXSc6XG4gICAgICBjYXNlICdbb2JqZWN0IFN0cmluZ10nOlxuICAgICAgY2FzZSAnW29iamVjdCBEYXRlXSc6XG4gICAgICAgIHJldHVybiBuZXcgc291cmNlLmNvbnN0cnVjdG9yKHNvdXJjZS52YWx1ZU9mKCkpO1xuXG4gICAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOlxuICAgICAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKHNvdXJjZS5zb3VyY2UsIHNvdXJjZS50b1N0cmluZygpLm1hdGNoKC9bXi9dKiQvKVswXSk7XG4gICAgICAgIHJlLmxhc3RJbmRleCA9IHNvdXJjZS5sYXN0SW5kZXg7XG4gICAgICAgIHJldHVybiByZTtcblxuICAgICAgY2FzZSAnW29iamVjdCBCbG9iXSc6XG4gICAgICAgIHJldHVybiBuZXcgc291cmNlLmNvbnN0cnVjdG9yKFtzb3VyY2VdLCB7dHlwZTogc291cmNlLnR5cGV9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNGdW5jdGlvbihzb3VyY2UuY2xvbmVOb2RlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgfVxuICB9XG59XG5cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuZnVuY3Rpb24gc2ltcGxlQ29tcGFyZShhLCBiKSB7IHJldHVybiBhID09PSBiIHx8IChhICE9PSBhICYmIGIgIT09IGIpOyB9XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZXF1YWxzXG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGV0ZXJtaW5lcyBpZiB0d28gb2JqZWN0cyBvciB0d28gdmFsdWVzIGFyZSBlcXVpdmFsZW50LiBTdXBwb3J0cyB2YWx1ZSB0eXBlcywgcmVndWxhclxuICogZXhwcmVzc2lvbnMsIGFycmF5cyBhbmQgb2JqZWN0cy5cbiAqXG4gKiBUd28gb2JqZWN0cyBvciB2YWx1ZXMgYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudCBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZyBpcyB0cnVlOlxuICpcbiAqICogQm90aCBvYmplY3RzIG9yIHZhbHVlcyBwYXNzIGA9PT1gIGNvbXBhcmlzb24uXG4gKiAqIEJvdGggb2JqZWN0cyBvciB2YWx1ZXMgYXJlIG9mIHRoZSBzYW1lIHR5cGUgYW5kIGFsbCBvZiB0aGVpciBwcm9wZXJ0aWVzIGFyZSBlcXVhbCBieVxuICogICBjb21wYXJpbmcgdGhlbSB3aXRoIGBhbmd1bGFyLmVxdWFsc2AuXG4gKiAqIEJvdGggdmFsdWVzIGFyZSBOYU4uIChJbiBKYXZhU2NyaXB0LCBOYU4gPT0gTmFOID0+IGZhbHNlLiBCdXQgd2UgY29uc2lkZXIgdHdvIE5hTiBhcyBlcXVhbClcbiAqICogQm90aCB2YWx1ZXMgcmVwcmVzZW50IHRoZSBzYW1lIHJlZ3VsYXIgZXhwcmVzc2lvbiAoSW4gSmF2YVNjcmlwdCxcbiAqICAgL2FiYy8gPT0gL2FiYy8gPT4gZmFsc2UuIEJ1dCB3ZSBjb25zaWRlciB0d28gcmVndWxhciBleHByZXNzaW9ucyBhcyBlcXVhbCB3aGVuIHRoZWlyIHRleHR1YWxcbiAqICAgcmVwcmVzZW50YXRpb24gbWF0Y2hlcykuXG4gKlxuICogRHVyaW5nIGEgcHJvcGVydHkgY29tcGFyaXNvbiwgcHJvcGVydGllcyBvZiBgZnVuY3Rpb25gIHR5cGUgYW5kIHByb3BlcnRpZXMgd2l0aCBuYW1lc1xuICogdGhhdCBiZWdpbiB3aXRoIGAkYCBhcmUgaWdub3JlZC5cbiAqXG4gKiBTY29wZSBhbmQgRE9NV2luZG93IG9iamVjdHMgYXJlIGJlaW5nIGNvbXBhcmVkIG9ubHkgYnkgaWRlbnRpZnkgKGA9PT1gKS5cbiAqXG4gKiBAcGFyYW0geyp9IG8xIE9iamVjdCBvciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvMiBPYmplY3Qgb3IgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGFyZ3VtZW50cyBhcmUgZXF1YWwuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImVxdWFsc0V4YW1wbGVcIiBuYW1lPVwiZXF1YWxzRXhhbXBsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPGZvcm0gbm92YWxpZGF0ZT5cbiAgICAgICAgICA8aDM+VXNlciAxPC9oMz5cbiAgICAgICAgICBOYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInVzZXIxLm5hbWVcIj5cbiAgICAgICAgICBBZ2U6IDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJ1c2VyMS5hZ2VcIj5cblxuICAgICAgICAgIDxoMz5Vc2VyIDI8L2gzPlxuICAgICAgICAgIE5hbWU6IDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXNlcjIubmFtZVwiPlxuICAgICAgICAgIEFnZTogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cInVzZXIyLmFnZVwiPlxuXG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxici8+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiQ29tcGFyZVwiIG5nLWNsaWNrPVwiY29tcGFyZSgpXCI+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgVXNlciAxOiA8cHJlPnt7dXNlcjEgfCBqc29ufX08L3ByZT5cbiAgICAgICAgICBVc2VyIDI6IDxwcmU+e3t1c2VyMiB8IGpzb259fTwvcHJlPlxuICAgICAgICAgIEVxdWFsOiA8cHJlPnt7cmVzdWx0fX08L3ByZT5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2VxdWFsc0V4YW1wbGUnLCBbXSkuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS51c2VyMSA9IHt9O1xuICAgICAgICAgICRzY29wZS51c2VyMiA9IHt9O1xuICAgICAgICAgICRzY29wZS5jb21wYXJlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAkc2NvcGUucmVzdWx0ID0gYW5ndWxhci5lcXVhbHMoJHNjb3BlLnVzZXIxLCAkc2NvcGUudXNlcjIpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gZXF1YWxzKG8xLCBvMikge1xuICBpZiAobzEgPT09IG8yKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKG8xID09PSBudWxsIHx8IG8yID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgaWYgKG8xICE9PSBvMSAmJiBvMiAhPT0gbzIpIHJldHVybiB0cnVlOyAvLyBOYU4gPT09IE5hTlxuICB2YXIgdDEgPSB0eXBlb2YgbzEsIHQyID0gdHlwZW9mIG8yLCBsZW5ndGgsIGtleSwga2V5U2V0O1xuICBpZiAodDEgPT09IHQyICYmIHQxID09PSAnb2JqZWN0Jykge1xuICAgIGlmIChpc0FycmF5KG8xKSkge1xuICAgICAgaWYgKCFpc0FycmF5KG8yKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKChsZW5ndGggPSBvMS5sZW5ndGgpID09PSBvMi5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChrZXkgPSAwOyBrZXkgPCBsZW5ndGg7IGtleSsrKSB7XG4gICAgICAgICAgaWYgKCFlcXVhbHMobzFba2V5XSwgbzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRGF0ZShvMSkpIHtcbiAgICAgIGlmICghaXNEYXRlKG8yKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHNpbXBsZUNvbXBhcmUobzEuZ2V0VGltZSgpLCBvMi5nZXRUaW1lKCkpO1xuICAgIH0gZWxzZSBpZiAoaXNSZWdFeHAobzEpKSB7XG4gICAgICBpZiAoIWlzUmVnRXhwKG8yKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIG8xLnRvU3RyaW5nKCkgPT09IG8yLnRvU3RyaW5nKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1Njb3BlKG8xKSB8fCBpc1Njb3BlKG8yKSB8fCBpc1dpbmRvdyhvMSkgfHwgaXNXaW5kb3cobzIpIHx8XG4gICAgICAgIGlzQXJyYXkobzIpIHx8IGlzRGF0ZShvMikgfHwgaXNSZWdFeHAobzIpKSByZXR1cm4gZmFsc2U7XG4gICAgICBrZXlTZXQgPSBjcmVhdGVNYXAoKTtcbiAgICAgIGZvciAoa2V5IGluIG8xKSB7XG4gICAgICAgIGlmIChrZXkuY2hhckF0KDApID09PSAnJCcgfHwgaXNGdW5jdGlvbihvMVtrZXldKSkgY29udGludWU7XG4gICAgICAgIGlmICghZXF1YWxzKG8xW2tleV0sIG8yW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGtleVNldFtrZXldID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGZvciAoa2V5IGluIG8yKSB7XG4gICAgICAgIGlmICghKGtleSBpbiBrZXlTZXQpICYmXG4gICAgICAgICAgICBrZXkuY2hhckF0KDApICE9PSAnJCcgJiZcbiAgICAgICAgICAgIGlzRGVmaW5lZChvMltrZXldKSAmJlxuICAgICAgICAgICAgIWlzRnVuY3Rpb24obzJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciBjc3AgPSBmdW5jdGlvbigpIHtcbiAgaWYgKCFpc0RlZmluZWQoY3NwLnJ1bGVzKSkge1xuXG5cbiAgICB2YXIgbmdDc3BFbGVtZW50ID0gKHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbbmctY3NwXScpIHx8XG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1uZy1jc3BdJykpO1xuXG4gICAgaWYgKG5nQ3NwRWxlbWVudCkge1xuICAgICAgdmFyIG5nQ3NwQXR0cmlidXRlID0gbmdDc3BFbGVtZW50LmdldEF0dHJpYnV0ZSgnbmctY3NwJykgfHxcbiAgICAgICAgICAgICAgICAgICAgbmdDc3BFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1uZy1jc3AnKTtcbiAgICAgIGNzcC5ydWxlcyA9IHtcbiAgICAgICAgbm9VbnNhZmVFdmFsOiAhbmdDc3BBdHRyaWJ1dGUgfHwgKG5nQ3NwQXR0cmlidXRlLmluZGV4T2YoJ25vLXVuc2FmZS1ldmFsJykgIT09IC0xKSxcbiAgICAgICAgbm9JbmxpbmVTdHlsZTogIW5nQ3NwQXR0cmlidXRlIHx8IChuZ0NzcEF0dHJpYnV0ZS5pbmRleE9mKCduby1pbmxpbmUtc3R5bGUnKSAhPT0gLTEpXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3AucnVsZXMgPSB7XG4gICAgICAgIG5vVW5zYWZlRXZhbDogbm9VbnNhZmVFdmFsKCksXG4gICAgICAgIG5vSW5saW5lU3R5bGU6IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjc3AucnVsZXM7XG5cbiAgZnVuY3Rpb24gbm9VbnNhZmVFdmFsKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LCBuby1uZXctZnVuY1xuICAgICAgbmV3IEZ1bmN0aW9uKCcnKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG1vZHVsZSBuZ1xuICogQG5hbWUgbmdKcVxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0pxIHRoZSBuYW1lIG9mIHRoZSBsaWJyYXJ5IGF2YWlsYWJsZSB1bmRlciBgd2luZG93YFxuICogdG8gYmUgdXNlZCBmb3IgYW5ndWxhci5lbGVtZW50XG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGlzIGRpcmVjdGl2ZSB0byBmb3JjZSB0aGUgYW5ndWxhci5lbGVtZW50IGxpYnJhcnkuICBUaGlzIHNob3VsZCBiZVxuICogdXNlZCB0byBmb3JjZSBlaXRoZXIganFMaXRlIGJ5IGxlYXZpbmcgbmctanEgYmxhbmsgb3Igc2V0dGluZyB0aGUgbmFtZSBvZlxuICogdGhlIGpxdWVyeSB2YXJpYWJsZSB1bmRlciB3aW5kb3cgKGVnLiBqUXVlcnkpLlxuICpcbiAqIFNpbmNlIGFuZ3VsYXIgbG9va3MgZm9yIHRoaXMgZGlyZWN0aXZlIHdoZW4gaXQgaXMgbG9hZGVkIChkb2Vzbid0IHdhaXQgZm9yIHRoZVxuICogRE9NQ29udGVudExvYWRlZCBldmVudCksIGl0IG11c3QgYmUgcGxhY2VkIG9uIGFuIGVsZW1lbnQgdGhhdCBjb21lcyBiZWZvcmUgdGhlIHNjcmlwdFxuICogd2hpY2ggbG9hZHMgYW5ndWxhci4gQWxzbywgb25seSB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgYG5nLWpxYCB3aWxsIGJlIHVzZWQgYW5kIGFsbFxuICogb3RoZXJzIGlnbm9yZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gZm9yY2UganFMaXRlIHVzaW5nIHRoZSBgbmdKcWAgZGlyZWN0aXZlIHRvIHRoZSBgaHRtbGAgdGFnLlxuIGBgYGh0bWxcbiA8IWRvY3R5cGUgaHRtbD5cbiA8aHRtbCBuZy1hcHAgbmctanE+XG4gLi4uXG4gLi4uXG4gPC9odG1sPlxuIGBgYFxuICogQGV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gdXNlIGEgalF1ZXJ5IGJhc2VkIGxpYnJhcnkgb2YgYSBkaWZmZXJlbnQgbmFtZS5cbiAqIFRoZSBsaWJyYXJ5IG5hbWUgbXVzdCBiZSBhdmFpbGFibGUgYXQgdGhlIHRvcCBtb3N0ICd3aW5kb3cnLlxuIGBgYGh0bWxcbiA8IWRvY3R5cGUgaHRtbD5cbiA8aHRtbCBuZy1hcHAgbmctanE9XCJqUXVlcnlMaWJcIj5cbiAuLi5cbiAuLi5cbiA8L2h0bWw+XG4gYGBgXG4gKi9cbnZhciBqcSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoaXNEZWZpbmVkKGpxLm5hbWVfKSkgcmV0dXJuIGpxLm5hbWVfO1xuICB2YXIgZWw7XG4gIHZhciBpLCBpaSA9IG5nQXR0clByZWZpeGVzLmxlbmd0aCwgcHJlZml4LCBuYW1lO1xuICBmb3IgKGkgPSAwOyBpIDwgaWk7ICsraSkge1xuICAgIHByZWZpeCA9IG5nQXR0clByZWZpeGVzW2ldO1xuICAgIGVsID0gd2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1snICsgcHJlZml4LnJlcGxhY2UoJzonLCAnXFxcXDonKSArICdqcV0nKTtcbiAgICBpZiAoZWwpIHtcbiAgICAgIG5hbWUgPSBlbC5nZXRBdHRyaWJ1dGUocHJlZml4ICsgJ2pxJyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGpxLm5hbWVfID0gbmFtZSk7XG59O1xuXG5mdW5jdGlvbiBjb25jYXQoYXJyYXkxLCBhcnJheTIsIGluZGV4KSB7XG4gIHJldHVybiBhcnJheTEuY29uY2F0KHNsaWNlLmNhbGwoYXJyYXkyLCBpbmRleCkpO1xufVxuXG5mdW5jdGlvbiBzbGljZUFyZ3MoYXJncywgc3RhcnRJbmRleCkge1xuICByZXR1cm4gc2xpY2UuY2FsbChhcmdzLCBzdGFydEluZGV4IHx8IDApO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLmJpbmRcbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggY2FsbHMgZnVuY3Rpb24gYGZuYCBib3VuZCB0byBgc2VsZmAgKGBzZWxmYCBiZWNvbWVzIHRoZSBgdGhpc2AgZm9yXG4gKiBgZm5gKS4gWW91IGNhbiBzdXBwbHkgb3B0aW9uYWwgYGFyZ3NgIHRoYXQgYXJlIHByZWJvdW5kIHRvIHRoZSBmdW5jdGlvbi4gVGhpcyBmZWF0dXJlIGlzIGFsc29cbiAqIGtub3duIGFzIFtwYXJ0aWFsIGFwcGxpY2F0aW9uXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1BhcnRpYWxfYXBwbGljYXRpb24pLCBhc1xuICogZGlzdGluZ3Vpc2hlZCBmcm9tIFtmdW5jdGlvbiBjdXJyeWluZ10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DdXJyeWluZyNDb250cmFzdF93aXRoX3BhcnRpYWxfZnVuY3Rpb25fYXBwbGljYXRpb24pLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZWxmIENvbnRleHQgd2hpY2ggYGZuYCBzaG91bGQgYmUgZXZhbHVhdGVkIGluLlxuICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBGdW5jdGlvbiB0byBiZSBib3VuZC5cbiAqIEBwYXJhbSB7Li4uKn0gYXJncyBPcHRpb25hbCBhcmd1bWVudHMgdG8gYmUgcHJlYm91bmQgdG8gdGhlIGBmbmAgZnVuY3Rpb24gY2FsbC5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBGdW5jdGlvbiB0aGF0IHdyYXBzIHRoZSBgZm5gIHdpdGggYWxsIHRoZSBzcGVjaWZpZWQgYmluZGluZ3MuXG4gKi9cbmZ1bmN0aW9uIGJpbmQoc2VsZiwgZm4pIHtcbiAgdmFyIGN1cnJ5QXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gc2xpY2VBcmdzKGFyZ3VtZW50cywgMikgOiBbXTtcbiAgaWYgKGlzRnVuY3Rpb24oZm4pICYmICEoZm4gaW5zdGFuY2VvZiBSZWdFeHApKSB7XG4gICAgcmV0dXJuIGN1cnJ5QXJncy5sZW5ndGhcbiAgICAgID8gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgICAgID8gZm4uYXBwbHkoc2VsZiwgY29uY2F0KGN1cnJ5QXJncywgYXJndW1lbnRzLCAwKSlcbiAgICAgICAgICAgIDogZm4uYXBwbHkoc2VsZiwgY3VycnlBcmdzKTtcbiAgICAgICAgfVxuICAgICAgOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgICAgICAgPyBmbi5hcHBseShzZWxmLCBhcmd1bWVudHMpXG4gICAgICAgICAgICA6IGZuLmNhbGwoc2VsZik7XG4gICAgICAgIH07XG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gSUUsIG5hdGl2ZSBtZXRob2RzIGFyZSBub3QgZnVuY3Rpb25zIHNvIHRoZXkgY2Fubm90IGJlIGJvdW5kIChub3RlOiB0aGV5IGRvbid0IG5lZWQgdG8gYmUpLlxuICAgIHJldHVybiBmbjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHRvSnNvblJlcGxhY2VyKGtleSwgdmFsdWUpIHtcbiAgdmFyIHZhbCA9IHZhbHVlO1xuXG4gIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnJCcgJiYga2V5LmNoYXJBdCgxKSA9PT0gJyQnKSB7XG4gICAgdmFsID0gdW5kZWZpbmVkO1xuICB9IGVsc2UgaWYgKGlzV2luZG93KHZhbHVlKSkge1xuICAgIHZhbCA9ICckV0lORE9XJztcbiAgfSBlbHNlIGlmICh2YWx1ZSAmJiAgd2luZG93LmRvY3VtZW50ID09PSB2YWx1ZSkge1xuICAgIHZhbCA9ICckRE9DVU1FTlQnO1xuICB9IGVsc2UgaWYgKGlzU2NvcGUodmFsdWUpKSB7XG4gICAgdmFsID0gJyRTQ09QRSc7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbmFtZSBhbmd1bGFyLnRvSnNvblxuICogQG1vZHVsZSBuZ1xuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNlcmlhbGl6ZXMgaW5wdXQgaW50byBhIEpTT04tZm9ybWF0dGVkIHN0cmluZy4gUHJvcGVydGllcyB3aXRoIGxlYWRpbmcgJCQgY2hhcmFjdGVycyB3aWxsIGJlXG4gKiBzdHJpcHBlZCBzaW5jZSBhbmd1bGFyIHVzZXMgdGhpcyBub3RhdGlvbiBpbnRlcm5hbGx5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fERhdGV8c3RyaW5nfG51bWJlcnxib29sZWFufSBvYmogSW5wdXQgdG8gYmUgc2VyaWFsaXplZCBpbnRvIEpTT04uXG4gKiBAcGFyYW0ge2Jvb2xlYW58bnVtYmVyfSBbcHJldHR5PTJdIElmIHNldCB0byB0cnVlLCB0aGUgSlNPTiBvdXRwdXQgd2lsbCBjb250YWluIG5ld2xpbmVzIGFuZCB3aGl0ZXNwYWNlLlxuICogICAgSWYgc2V0IHRvIGFuIGludGVnZXIsIHRoZSBKU09OIG91dHB1dCB3aWxsIGNvbnRhaW4gdGhhdCBtYW55IHNwYWNlcyBwZXIgaW5kZW50YXRpb24uXG4gKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gSlNPTi1pZmllZCBzdHJpbmcgcmVwcmVzZW50aW5nIGBvYmpgLlxuICogQGtub3duSXNzdWVcbiAqXG4gKiBUaGUgU2FmYXJpIGJyb3dzZXIgdGhyb3dzIGEgYFJhbmdlRXJyb3JgIGluc3RlYWQgb2YgcmV0dXJuaW5nIGBudWxsYCB3aGVuIGl0IHRyaWVzIHRvIHN0cmluZ2lmeSBhIGBEYXRlYFxuICogb2JqZWN0IHdpdGggYW4gaW52YWxpZCBkYXRlIHZhbHVlLiBUaGUgb25seSByZWxpYWJsZSB3YXkgdG8gcHJldmVudCB0aGlzIGlzIHRvIG1vbmtleXBhdGNoIHRoZVxuICogYERhdGUucHJvdG90eXBlLnRvSlNPTmAgbWV0aG9kIGFzIGZvbGxvd3M6XG4gKlxuICogYGBgXG4gKiB2YXIgX0RhdGV0b0pTT04gPSBEYXRlLnByb3RvdHlwZS50b0pTT047XG4gKiBEYXRlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbigpIHtcbiAqICAgdHJ5IHtcbiAqICAgICByZXR1cm4gX0RhdGV0b0pTT04uY2FsbCh0aGlzKTtcbiAqICAgfSBjYXRjaChlKSB7XG4gKiAgICAgaWYgKGUgaW5zdGFuY2VvZiBSYW5nZUVycm9yKSB7XG4gKiAgICAgICByZXR1cm4gbnVsbDtcbiAqICAgICB9XG4gKiAgICAgdGhyb3cgZTtcbiAqICAgfVxuICogfTtcbiAqIGBgYFxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3B1bGwvMTQyMjEgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKi9cbmZ1bmN0aW9uIHRvSnNvbihvYmosIHByZXR0eSkge1xuICBpZiAoaXNVbmRlZmluZWQob2JqKSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgaWYgKCFpc051bWJlcihwcmV0dHkpKSB7XG4gICAgcHJldHR5ID0gcHJldHR5ID8gMiA6IG51bGw7XG4gIH1cbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgdG9Kc29uUmVwbGFjZXIsIHByZXR0eSk7XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIuZnJvbUpzb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEZXNlcmlhbGl6ZXMgYSBKU09OIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ganNvbiBKU09OIHN0cmluZyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm5zIHtPYmplY3R8QXJyYXl8c3RyaW5nfG51bWJlcn0gRGVzZXJpYWxpemVkIEpTT04gc3RyaW5nLlxuICovXG5mdW5jdGlvbiBmcm9tSnNvbihqc29uKSB7XG4gIHJldHVybiBpc1N0cmluZyhqc29uKVxuICAgICAgPyBKU09OLnBhcnNlKGpzb24pXG4gICAgICA6IGpzb247XG59XG5cblxudmFyIEFMTF9DT0xPTlMgPSAvOi9nO1xuZnVuY3Rpb24gdGltZXpvbmVUb09mZnNldCh0aW1lem9uZSwgZmFsbGJhY2spIHtcbiAgLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5LCBFZGdlIDEzLTE1K1xuICAvLyBJRS9FZGdlIGRvIG5vdCBcInVuZGVyc3RhbmRcIiBjb2xvbiAoYDpgKSBpbiB0aW1lem9uZVxuICB0aW1lem9uZSA9IHRpbWV6b25lLnJlcGxhY2UoQUxMX0NPTE9OUywgJycpO1xuICB2YXIgcmVxdWVzdGVkVGltZXpvbmVPZmZzZXQgPSBEYXRlLnBhcnNlKCdKYW4gMDEsIDE5NzAgMDA6MDA6MDAgJyArIHRpbWV6b25lKSAvIDYwMDAwO1xuICByZXR1cm4gaXNOdW1iZXJOYU4ocmVxdWVzdGVkVGltZXpvbmVPZmZzZXQpID8gZmFsbGJhY2sgOiByZXF1ZXN0ZWRUaW1lem9uZU9mZnNldDtcbn1cblxuXG5mdW5jdGlvbiBhZGREYXRlTWludXRlcyhkYXRlLCBtaW51dGVzKSB7XG4gIGRhdGUgPSBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSk7XG4gIGRhdGUuc2V0TWludXRlcyhkYXRlLmdldE1pbnV0ZXMoKSArIG1pbnV0ZXMpO1xuICByZXR1cm4gZGF0ZTtcbn1cblxuXG5mdW5jdGlvbiBjb252ZXJ0VGltZXpvbmVUb0xvY2FsKGRhdGUsIHRpbWV6b25lLCByZXZlcnNlKSB7XG4gIHJldmVyc2UgPSByZXZlcnNlID8gLTEgOiAxO1xuICB2YXIgZGF0ZVRpbWV6b25lT2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICB2YXIgdGltZXpvbmVPZmZzZXQgPSB0aW1lem9uZVRvT2Zmc2V0KHRpbWV6b25lLCBkYXRlVGltZXpvbmVPZmZzZXQpO1xuICByZXR1cm4gYWRkRGF0ZU1pbnV0ZXMoZGF0ZSwgcmV2ZXJzZSAqICh0aW1lem9uZU9mZnNldCAtIGRhdGVUaW1lem9uZU9mZnNldCkpO1xufVxuXG5cbi8qKlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBlbGVtZW50LlxuICovXG5mdW5jdGlvbiBzdGFydGluZ1RhZyhlbGVtZW50KSB7XG4gIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCkuY2xvbmUoKS5lbXB0eSgpO1xuICB2YXIgZWxlbUh0bWwgPSBqcUxpdGUoJzxkaXY+JykuYXBwZW5kKGVsZW1lbnQpLmh0bWwoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZWxlbWVudFswXS5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX1RFWFQgPyBsb3dlcmNhc2UoZWxlbUh0bWwpIDpcbiAgICAgICAgZWxlbUh0bWwuXG4gICAgICAgICAgbWF0Y2goL14oPFtePl0rPikvKVsxXS5cbiAgICAgICAgICByZXBsYWNlKC9ePChbXFx3LV0rKS8sIGZ1bmN0aW9uKG1hdGNoLCBub2RlTmFtZSkge3JldHVybiAnPCcgKyBsb3dlcmNhc2Uobm9kZU5hbWUpO30pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGxvd2VyY2FzZShlbGVtSHRtbCk7XG4gIH1cblxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBUcmllcyB0byBkZWNvZGUgdGhlIFVSSSBjb21wb25lbnQgd2l0aG91dCB0aHJvd2luZyBhbiBleGNlcHRpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSBzdHIgdmFsdWUgcG90ZW50aWFsIFVSSSBjb21wb25lbnQgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBgdmFsdWVgIGNhbiBiZSBkZWNvZGVkXG4gKiB3aXRoIHRoZSBkZWNvZGVVUklDb21wb25lbnQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRyeURlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSWdub3JlIGFueSBpbnZhbGlkIHVyaSBjb21wb25lbnQuXG4gIH1cbn1cblxuXG4vKipcbiAqIFBhcnNlcyBhbiBlc2NhcGVkIHVybCBxdWVyeSBzdHJpbmcgaW50byBrZXktdmFsdWUgcGFpcnMuXG4gKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsYm9vbGVhbnxBcnJheT59XG4gKi9cbmZ1bmN0aW9uIHBhcnNlS2V5VmFsdWUoLyoqc3RyaW5nKi9rZXlWYWx1ZSkge1xuICB2YXIgb2JqID0ge307XG4gIGZvckVhY2goKGtleVZhbHVlIHx8ICcnKS5zcGxpdCgnJicpLCBmdW5jdGlvbihrZXlWYWx1ZSkge1xuICAgIHZhciBzcGxpdFBvaW50LCBrZXksIHZhbDtcbiAgICBpZiAoa2V5VmFsdWUpIHtcbiAgICAgIGtleSA9IGtleVZhbHVlID0ga2V5VmFsdWUucmVwbGFjZSgvXFwrL2csJyUyMCcpO1xuICAgICAgc3BsaXRQb2ludCA9IGtleVZhbHVlLmluZGV4T2YoJz0nKTtcbiAgICAgIGlmIChzcGxpdFBvaW50ICE9PSAtMSkge1xuICAgICAgICBrZXkgPSBrZXlWYWx1ZS5zdWJzdHJpbmcoMCwgc3BsaXRQb2ludCk7XG4gICAgICAgIHZhbCA9IGtleVZhbHVlLnN1YnN0cmluZyhzcGxpdFBvaW50ICsgMSk7XG4gICAgICB9XG4gICAgICBrZXkgPSB0cnlEZWNvZGVVUklDb21wb25lbnQoa2V5KTtcbiAgICAgIGlmIChpc0RlZmluZWQoa2V5KSkge1xuICAgICAgICB2YWwgPSBpc0RlZmluZWQodmFsKSA/IHRyeURlY29kZVVSSUNvbXBvbmVudCh2YWwpIDogdHJ1ZTtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgIG9ialtrZXldID0gdmFsO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkob2JqW2tleV0pKSB7XG4gICAgICAgICAgb2JqW2tleV0ucHVzaCh2YWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9ialtrZXldID0gW29ialtrZXldLHZhbF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiB0b0tleVZhbHVlKG9iaikge1xuICB2YXIgcGFydHMgPSBbXTtcbiAgZm9yRWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uKGFycmF5VmFsdWUpIHtcbiAgICAgICAgcGFydHMucHVzaChlbmNvZGVVcmlRdWVyeShrZXksIHRydWUpICtcbiAgICAgICAgICAgICAgICAgICAoYXJyYXlWYWx1ZSA9PT0gdHJ1ZSA/ICcnIDogJz0nICsgZW5jb2RlVXJpUXVlcnkoYXJyYXlWYWx1ZSwgdHJ1ZSkpKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVVcmlRdWVyeShrZXksIHRydWUpICtcbiAgICAgICAgICAgICAgICh2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogJz0nICsgZW5jb2RlVXJpUXVlcnkodmFsdWUsIHRydWUpKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHBhcnRzLmxlbmd0aCA/IHBhcnRzLmpvaW4oJyYnKSA6ICcnO1xufVxuXG5cbi8qKlxuICogV2UgbmVlZCBvdXIgY3VzdG9tIG1ldGhvZCBiZWNhdXNlIGVuY29kZVVSSUNvbXBvbmVudCBpcyB0b28gYWdncmVzc2l2ZSBhbmQgZG9lc24ndCBmb2xsb3dcbiAqIGh0dHA6Ly93d3cuaWV0Zi5vcmcvcmZjL3JmYzM5ODYudHh0IHdpdGggcmVnYXJkcyB0byB0aGUgY2hhcmFjdGVyIHNldCAocGNoYXIpIGFsbG93ZWQgaW4gcGF0aFxuICogc2VnbWVudHM6XG4gKiAgICBzZWdtZW50ICAgICAgID0gKnBjaGFyXG4gKiAgICBwY2hhciAgICAgICAgID0gdW5yZXNlcnZlZCAvIHBjdC1lbmNvZGVkIC8gc3ViLWRlbGltcyAvIFwiOlwiIC8gXCJAXCJcbiAqICAgIHBjdC1lbmNvZGVkICAgPSBcIiVcIiBIRVhESUcgSEVYRElHXG4gKiAgICB1bnJlc2VydmVkICAgID0gQUxQSEEgLyBESUdJVCAvIFwiLVwiIC8gXCIuXCIgLyBcIl9cIiAvIFwiflwiXG4gKiAgICBzdWItZGVsaW1zICAgID0gXCIhXCIgLyBcIiRcIiAvIFwiJlwiIC8gXCInXCIgLyBcIihcIiAvIFwiKVwiXG4gKiAgICAgICAgICAgICAgICAgICAgIC8gXCIqXCIgLyBcIitcIiAvIFwiLFwiIC8gXCI7XCIgLyBcIj1cIlxuICovXG5mdW5jdGlvbiBlbmNvZGVVcmlTZWdtZW50KHZhbCkge1xuICByZXR1cm4gZW5jb2RlVXJpUXVlcnkodmFsLCB0cnVlKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lMjYvZ2ksICcmJykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTNEL2dpLCAnPScpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyQi9naSwgJysnKTtcbn1cblxuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIGZvciBlbmNvZGluZyAqa2V5KiBvciAqdmFsdWUqIHBhcnRzIG9mIHF1ZXJ5IGNvbXBvbmVudC4gV2UgbmVlZCBhIGN1c3RvbVxuICogbWV0aG9kIGJlY2F1c2UgZW5jb2RlVVJJQ29tcG9uZW50IGlzIHRvbyBhZ2dyZXNzaXZlIGFuZCBlbmNvZGVzIHN0dWZmIHRoYXQgZG9lc24ndCBoYXZlIHRvIGJlXG4gKiBlbmNvZGVkIHBlciBodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg2OlxuICogICAgcXVlcnkgICAgICAgICA9ICooIHBjaGFyIC8gXCIvXCIgLyBcIj9cIiApXG4gKiAgICBwY2hhciAgICAgICAgID0gdW5yZXNlcnZlZCAvIHBjdC1lbmNvZGVkIC8gc3ViLWRlbGltcyAvIFwiOlwiIC8gXCJAXCJcbiAqICAgIHVucmVzZXJ2ZWQgICAgPSBBTFBIQSAvIERJR0lUIC8gXCItXCIgLyBcIi5cIiAvIFwiX1wiIC8gXCJ+XCJcbiAqICAgIHBjdC1lbmNvZGVkICAgPSBcIiVcIiBIRVhESUcgSEVYRElHXG4gKiAgICBzdWItZGVsaW1zICAgID0gXCIhXCIgLyBcIiRcIiAvIFwiJlwiIC8gXCInXCIgLyBcIihcIiAvIFwiKVwiXG4gKiAgICAgICAgICAgICAgICAgICAgIC8gXCIqXCIgLyBcIitcIiAvIFwiLFwiIC8gXCI7XCIgLyBcIj1cIlxuICovXG5mdW5jdGlvbiBlbmNvZGVVcmlRdWVyeSh2YWwsIHBjdEVuY29kZVNwYWNlcykge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICAgICAgICAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgICAgICAgICAgcmVwbGFjZSgvJTNCL2dpLCAnOycpLlxuICAgICAgICAgICAgIHJlcGxhY2UoLyUyMC9nLCAocGN0RW5jb2RlU3BhY2VzID8gJyUyMCcgOiAnKycpKTtcbn1cblxudmFyIG5nQXR0clByZWZpeGVzID0gWyduZy0nLCAnZGF0YS1uZy0nLCAnbmc6JywgJ3gtbmctJ107XG5cbmZ1bmN0aW9uIGdldE5nQXR0cmlidXRlKGVsZW1lbnQsIG5nQXR0cikge1xuICB2YXIgYXR0ciwgaSwgaWkgPSBuZ0F0dHJQcmVmaXhlcy5sZW5ndGg7XG4gIGZvciAoaSA9IDA7IGkgPCBpaTsgKytpKSB7XG4gICAgYXR0ciA9IG5nQXR0clByZWZpeGVzW2ldICsgbmdBdHRyO1xuICAgIGlmIChpc1N0cmluZyhhdHRyID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cikpKSB7XG4gICAgICByZXR1cm4gYXR0cjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGFsbG93QXV0b0Jvb3RzdHJhcChkb2N1bWVudCkge1xuICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdDtcblxuICBpZiAoIXNjcmlwdCkge1xuICAgIC8vIFN1cHBvcnQ6IElFIDktMTEgb25seVxuICAgIC8vIElFIGRvZXMgbm90IGhhdmUgYGRvY3VtZW50LmN1cnJlbnRTY3JpcHRgXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBJZiB0aGUgYGN1cnJlbnRTY3JpcHRgIHByb3BlcnR5IGhhcyBiZWVuIGNsb2JiZXJlZCBqdXN0IHJldHVybiBmYWxzZSwgc2luY2UgdGhpcyBpbmRpY2F0ZXMgYSBwcm9iYWJsZSBhdHRhY2tcbiAgaWYgKCEoc2NyaXB0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxTY3JpcHRFbGVtZW50IHx8IHNjcmlwdCBpbnN0YW5jZW9mIHdpbmRvdy5TVkdTY3JpcHRFbGVtZW50KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBhdHRyaWJ1dGVzID0gc2NyaXB0LmF0dHJpYnV0ZXM7XG4gIHZhciBzcmNzID0gW2F0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdzcmMnKSwgYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2hyZWYnKSwgYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ3hsaW5rOmhyZWYnKV07XG5cbiAgcmV0dXJuIHNyY3MuZXZlcnkoZnVuY3Rpb24oc3JjKSB7XG4gICAgaWYgKCFzcmMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXNyYy52YWx1ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGxpbmsuaHJlZiA9IHNyYy52YWx1ZTtcblxuICAgIGlmIChkb2N1bWVudC5sb2NhdGlvbi5vcmlnaW4gPT09IGxpbmsub3JpZ2luKSB7XG4gICAgICAvLyBTYW1lLW9yaWdpbiByZXNvdXJjZXMgYXJlIGFsd2F5cyBhbGxvd2VkLCBldmVuIGZvciBub24td2hpdGVsaXN0ZWQgc2NoZW1lcy5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBEaXNhYmxlZCBib290c3RyYXBwaW5nIHVubGVzcyBhbmd1bGFyLmpzIHdhcyBsb2FkZWQgZnJvbSBhIGtub3duIHNjaGVtZSB1c2VkIG9uIHRoZSB3ZWIuXG4gICAgLy8gVGhpcyBpcyB0byBwcmV2ZW50IGFuZ3VsYXIuanMgYnVuZGxlZCB3aXRoIGJyb3dzZXIgZXh0ZW5zaW9ucyBmcm9tIGJlaW5nIHVzZWQgdG8gYnlwYXNzIHRoZVxuICAgIC8vIGNvbnRlbnQgc2VjdXJpdHkgcG9saWN5IGluIHdlYiBwYWdlcyBhbmQgb3RoZXIgYnJvd3NlciBleHRlbnNpb25zLlxuICAgIHN3aXRjaCAobGluay5wcm90b2NvbCkge1xuICAgICAgY2FzZSAnaHR0cDonOlxuICAgICAgY2FzZSAnaHR0cHM6JzpcbiAgICAgIGNhc2UgJ2Z0cDonOlxuICAgICAgY2FzZSAnYmxvYjonOlxuICAgICAgY2FzZSAnZmlsZTonOlxuICAgICAgY2FzZSAnZGF0YTonOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBDYWNoZWQgYXMgaXQgaGFzIHRvIHJ1biBkdXJpbmcgbG9hZGluZyBzbyB0aGF0IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQgaXMgYXZhaWxhYmxlLlxudmFyIGlzQXV0b0Jvb3RzdHJhcEFsbG93ZWQgPSBhbGxvd0F1dG9Cb290c3RyYXAod2luZG93LmRvY3VtZW50KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0FwcFxuICogQG1vZHVsZSBuZ1xuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHBhcmFtIHthbmd1bGFyLk1vZHVsZX0gbmdBcHAgYW4gb3B0aW9uYWwgYXBwbGljYXRpb25cbiAqICAge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZX0gbmFtZSB0byBsb2FkLlxuICogQHBhcmFtIHtib29sZWFuPX0gbmdTdHJpY3REaSBpZiB0aGlzIGF0dHJpYnV0ZSBpcyBwcmVzZW50IG9uIHRoZSBhcHAgZWxlbWVudCwgdGhlIGluamVjdG9yIHdpbGwgYmVcbiAqICAgY3JlYXRlZCBpbiBcInN0cmljdC1kaVwiIG1vZGUuIFRoaXMgbWVhbnMgdGhhdCB0aGUgYXBwbGljYXRpb24gd2lsbCBmYWlsIHRvIGludm9rZSBmdW5jdGlvbnMgd2hpY2hcbiAqICAgZG8gbm90IHVzZSBleHBsaWNpdCBmdW5jdGlvbiBhbm5vdGF0aW9uIChhbmQgYXJlIHRodXMgdW5zdWl0YWJsZSBmb3IgbWluaWZpY2F0aW9uKSwgYXMgZGVzY3JpYmVkXG4gKiAgIGluIHtAbGluayBndWlkZS9kaSB0aGUgRGVwZW5kZW5jeSBJbmplY3Rpb24gZ3VpZGV9LCBhbmQgdXNlZnVsIGRlYnVnZ2luZyBpbmZvIHdpbGwgYXNzaXN0IGluXG4gKiAgIHRyYWNraW5nIGRvd24gdGhlIHJvb3Qgb2YgdGhlc2UgYnVncy5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBVc2UgdGhpcyBkaXJlY3RpdmUgdG8gKiphdXRvLWJvb3RzdHJhcCoqIGFuIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbi4gVGhlIGBuZ0FwcGAgZGlyZWN0aXZlXG4gKiBkZXNpZ25hdGVzIHRoZSAqKnJvb3QgZWxlbWVudCoqIG9mIHRoZSBhcHBsaWNhdGlvbiBhbmQgaXMgdHlwaWNhbGx5IHBsYWNlZCBuZWFyIHRoZSByb290IGVsZW1lbnRcbiAqIG9mIHRoZSBwYWdlIC0gZS5nLiBvbiB0aGUgYDxib2R5PmAgb3IgYDxodG1sPmAgdGFncy5cbiAqXG4gKiBUaGVyZSBhcmUgYSBmZXcgdGhpbmdzIHRvIGtlZXAgaW4gbWluZCB3aGVuIHVzaW5nIGBuZ0FwcGA6XG4gKiAtIG9ubHkgb25lIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbiBjYW4gYmUgYXV0by1ib290c3RyYXBwZWQgcGVyIEhUTUwgZG9jdW1lbnQuIFRoZSBmaXJzdCBgbmdBcHBgXG4gKiAgIGZvdW5kIGluIHRoZSBkb2N1bWVudCB3aWxsIGJlIHVzZWQgdG8gZGVmaW5lIHRoZSByb290IGVsZW1lbnQgdG8gYXV0by1ib290c3RyYXAgYXMgYW5cbiAqICAgYXBwbGljYXRpb24uIFRvIHJ1biBtdWx0aXBsZSBhcHBsaWNhdGlvbnMgaW4gYW4gSFRNTCBkb2N1bWVudCB5b3UgbXVzdCBtYW51YWxseSBib290c3RyYXAgdGhlbSB1c2luZ1xuICogICB7QGxpbmsgYW5ndWxhci5ib290c3RyYXB9IGluc3RlYWQuXG4gKiAtIEFuZ3VsYXJKUyBhcHBsaWNhdGlvbnMgY2Fubm90IGJlIG5lc3RlZCB3aXRoaW4gZWFjaCBvdGhlci5cbiAqIC0gRG8gbm90IHVzZSBhIGRpcmVjdGl2ZSB0aGF0IHVzZXMge0BsaW5rIG5nLiRjb21waWxlI3RyYW5zY2x1c2lvbiB0cmFuc2NsdXNpb259IG9uIHRoZSBzYW1lIGVsZW1lbnQgYXMgYG5nQXBwYC5cbiAqICAgVGhpcyBpbmNsdWRlcyBkaXJlY3RpdmVzIHN1Y2ggYXMge0BsaW5rIG5nLm5nSWYgYG5nSWZgfSwge0BsaW5rIG5nLm5nSW5jbHVkZSBgbmdJbmNsdWRlYH0gYW5kXG4gKiAgIHtAbGluayBuZ1JvdXRlLm5nVmlldyBgbmdWaWV3YH0uXG4gKiAgIERvaW5nIHRoaXMgbWlzcGxhY2VzIHRoZSBhcHAge0BsaW5rIG5nLiRyb290RWxlbWVudCBgJHJvb3RFbGVtZW50YH0gYW5kIHRoZSBhcHAncyB7QGxpbmsgYXV0by4kaW5qZWN0b3IgaW5qZWN0b3J9LFxuICogICBjYXVzaW5nIGFuaW1hdGlvbnMgdG8gc3RvcCB3b3JraW5nIGFuZCBtYWtpbmcgdGhlIGluamVjdG9yIGluYWNjZXNzaWJsZSBmcm9tIG91dHNpZGUgdGhlIGFwcC5cbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgYW4gKipBbmd1bGFySlMgbW9kdWxlKiogdG8gYmUgdXNlZCBhcyB0aGUgcm9vdCBtb2R1bGUgZm9yIHRoZSBhcHBsaWNhdGlvbi4gIFRoaXNcbiAqIG1vZHVsZSB3aWxsIGJlIGxvYWRlZCBpbnRvIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3J9IHdoZW4gdGhlIGFwcGxpY2F0aW9uIGlzIGJvb3RzdHJhcHBlZC4gSXRcbiAqIHNob3VsZCBjb250YWluIHRoZSBhcHBsaWNhdGlvbiBjb2RlIG5lZWRlZCBvciBoYXZlIGRlcGVuZGVuY2llcyBvbiBvdGhlciBtb2R1bGVzIHRoYXQgd2lsbFxuICogY29udGFpbiB0aGUgY29kZS4gU2VlIHtAbGluayBhbmd1bGFyLm1vZHVsZX0gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gKlxuICogSW4gdGhlIGV4YW1wbGUgYmVsb3cgaWYgdGhlIGBuZ0FwcGAgZGlyZWN0aXZlIHdlcmUgbm90IHBsYWNlZCBvbiB0aGUgYGh0bWxgIGVsZW1lbnQgdGhlbiB0aGVcbiAqIGRvY3VtZW50IHdvdWxkIG5vdCBiZSBjb21waWxlZCwgdGhlIGBBcHBDb250cm9sbGVyYCB3b3VsZCBub3QgYmUgaW5zdGFudGlhdGVkIGFuZCB0aGUgYHt7IGErYiB9fWBcbiAqIHdvdWxkIG5vdCBiZSByZXNvbHZlZCB0byBgM2AuXG4gKlxuICogYG5nQXBwYCBpcyB0aGUgZWFzaWVzdCwgYW5kIG1vc3QgY29tbW9uIHdheSB0byBib290c3RyYXAgYW4gYXBwbGljYXRpb24uXG4gKlxuIDxleGFtcGxlIG1vZHVsZT1cIm5nQXBwRGVtb1wiIG5hbWU9XCJuZy1hcHBcIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJuZ0FwcERlbW9Db250cm9sbGVyXCI+XG4gICAgIEkgY2FuIGFkZDoge3thfX0gKyB7e2J9fSA9ICB7eyBhK2IgfX1cbiAgIDwvZGl2PlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgYW5ndWxhci5tb2R1bGUoJ25nQXBwRGVtbycsIFtdKS5jb250cm9sbGVyKCduZ0FwcERlbW9Db250cm9sbGVyJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICRzY29wZS5hID0gMTtcbiAgICAgJHNjb3BlLmIgPSAyO1xuICAgfSk7XG4gICA8L2ZpbGU+XG4gPC9leGFtcGxlPlxuICpcbiAqIFVzaW5nIGBuZ1N0cmljdERpYCwgeW91IHdvdWxkIHNlZSBzb21ldGhpbmcgbGlrZSB0aGlzOlxuICpcbiA8ZXhhbXBsZSBuZy1hcHAtaW5jbHVkZWQ9XCJ0cnVlXCIgbmFtZT1cInN0cmljdC1kaVwiPlxuICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgIDxkaXYgbmctYXBwPVwibmdBcHBTdHJpY3REZW1vXCIgbmctc3RyaWN0LWRpPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkdvb2RDb250cm9sbGVyMVwiPlxuICAgICAgICAgICBJIGNhbiBhZGQ6IHt7YX19ICsge3tifX0gPSAge3sgYStiIH19XG5cbiAgICAgICAgICAgPHA+VGhpcyByZW5kZXJzIGJlY2F1c2UgdGhlIGNvbnRyb2xsZXIgZG9lcyBub3QgZmFpbCB0b1xuICAgICAgICAgICAgICBpbnN0YW50aWF0ZSwgYnkgdXNpbmcgZXhwbGljaXQgYW5ub3RhdGlvbiBzdHlsZSAoc2VlXG4gICAgICAgICAgICAgIHNjcmlwdC5qcyBmb3IgZGV0YWlscylcbiAgICAgICAgICAgPC9wPlxuICAgICAgIDwvZGl2PlxuXG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiR29vZENvbnRyb2xsZXIyXCI+XG4gICAgICAgICAgIE5hbWU6IDxpbnB1dCBuZy1tb2RlbD1cIm5hbWVcIj48YnIgLz5cbiAgICAgICAgICAgSGVsbG8sIHt7bmFtZX19IVxuXG4gICAgICAgICAgIDxwPlRoaXMgcmVuZGVycyBiZWNhdXNlIHRoZSBjb250cm9sbGVyIGRvZXMgbm90IGZhaWwgdG9cbiAgICAgICAgICAgICAgaW5zdGFudGlhdGUsIGJ5IHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb24gc3R5bGVcbiAgICAgICAgICAgICAgKHNlZSBzY3JpcHQuanMgZm9yIGRldGFpbHMpXG4gICAgICAgICAgIDwvcD5cbiAgICAgICA8L2Rpdj5cblxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkJhZENvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgSSBjYW4gYWRkOiB7e2F9fSArIHt7Yn19ID0gIHt7IGErYiB9fVxuXG4gICAgICAgICAgIDxwPlRoZSBjb250cm9sbGVyIGNvdWxkIG5vdCBiZSBpbnN0YW50aWF0ZWQsIGR1ZSB0byByZWx5aW5nXG4gICAgICAgICAgICAgIG9uIGF1dG9tYXRpYyBmdW5jdGlvbiBhbm5vdGF0aW9ucyAod2hpY2ggYXJlIGRpc2FibGVkIGluXG4gICAgICAgICAgICAgIHN0cmljdCBtb2RlKS4gQXMgc3VjaCwgdGhlIGNvbnRlbnQgb2YgdGhpcyBzZWN0aW9uIGlzIG5vdFxuICAgICAgICAgICAgICBpbnRlcnBvbGF0ZWQsIGFuZCB0aGVyZSBzaG91bGQgYmUgYW4gZXJyb3IgaW4geW91ciB3ZWIgY29uc29sZS5cbiAgICAgICAgICAgPC9wPlxuICAgICAgIDwvZGl2PlxuICAgPC9kaXY+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICBhbmd1bGFyLm1vZHVsZSgnbmdBcHBTdHJpY3REZW1vJywgW10pXG4gICAgIC8vIEJhZENvbnRyb2xsZXIgd2lsbCBmYWlsIHRvIGluc3RhbnRpYXRlLCBkdWUgdG8gcmVseWluZyBvbiBhdXRvbWF0aWMgZnVuY3Rpb24gYW5ub3RhdGlvbixcbiAgICAgLy8gcmF0aGVyIHRoYW4gYW4gZXhwbGljaXQgYW5ub3RhdGlvblxuICAgICAuY29udHJvbGxlcignQmFkQ29udHJvbGxlcicsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICRzY29wZS5hID0gMTtcbiAgICAgICAkc2NvcGUuYiA9IDI7XG4gICAgIH0pXG4gICAgIC8vIFVubGlrZSBCYWRDb250cm9sbGVyLCBHb29kQ29udHJvbGxlcjEgYW5kIEdvb2RDb250cm9sbGVyMiB3aWxsIG5vdCBmYWlsIHRvIGJlIGluc3RhbnRpYXRlZCxcbiAgICAgLy8gZHVlIHRvIHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb25zIHVzaW5nIHRoZSBhcnJheSBzdHlsZSBhbmQgJGluamVjdCBwcm9wZXJ0eSwgcmVzcGVjdGl2ZWx5LlxuICAgICAuY29udHJvbGxlcignR29vZENvbnRyb2xsZXIxJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAkc2NvcGUuYSA9IDE7XG4gICAgICAgJHNjb3BlLmIgPSAyO1xuICAgICB9XSlcbiAgICAgLmNvbnRyb2xsZXIoJ0dvb2RDb250cm9sbGVyMicsIEdvb2RDb250cm9sbGVyMik7XG4gICAgIGZ1bmN0aW9uIEdvb2RDb250cm9sbGVyMigkc2NvcGUpIHtcbiAgICAgICAkc2NvcGUubmFtZSA9ICdXb3JsZCc7XG4gICAgIH1cbiAgICAgR29vZENvbnRyb2xsZXIyLiRpbmplY3QgPSBbJyRzY29wZSddO1xuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgZGl2W25nLWNvbnRyb2xsZXJdIHtcbiAgICAgICBtYXJnaW4tYm90dG9tOiAxZW07XG4gICAgICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgIGJvcmRlcjogMXB4IHNvbGlkO1xuICAgICAgIHBhZGRpbmc6IC41ZW07XG4gICB9XG4gICBkaXZbbmctY29udHJvbGxlcl49R29vZF0ge1xuICAgICAgIGJvcmRlci1jb2xvcjogI2Q2ZTljNjtcbiAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGZmMGQ4O1xuICAgICAgIGNvbG9yOiAjM2M3NjNkO1xuICAgfVxuICAgZGl2W25nLWNvbnRyb2xsZXJePUJhZF0ge1xuICAgICAgIGJvcmRlci1jb2xvcjogI2ViY2NkMTtcbiAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJkZWRlO1xuICAgICAgIGNvbG9yOiAjYTk0NDQyO1xuICAgICAgIG1hcmdpbi1ib3R0b206IDA7XG4gICB9XG4gICA8L2ZpbGU+XG4gPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiBhbmd1bGFySW5pdChlbGVtZW50LCBib290c3RyYXApIHtcbiAgdmFyIGFwcEVsZW1lbnQsXG4gICAgICBtb2R1bGUsXG4gICAgICBjb25maWcgPSB7fTtcblxuICAvLyBUaGUgZWxlbWVudCBgZWxlbWVudGAgaGFzIHByaW9yaXR5IG92ZXIgYW55IG90aGVyIGVsZW1lbnQuXG4gIGZvckVhY2gobmdBdHRyUHJlZml4ZXMsIGZ1bmN0aW9uKHByZWZpeCkge1xuICAgIHZhciBuYW1lID0gcHJlZml4ICsgJ2FwcCc7XG5cbiAgICBpZiAoIWFwcEVsZW1lbnQgJiYgZWxlbWVudC5oYXNBdHRyaWJ1dGUgJiYgZWxlbWVudC5oYXNBdHRyaWJ1dGUobmFtZSkpIHtcbiAgICAgIGFwcEVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgbW9kdWxlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgfVxuICB9KTtcbiAgZm9yRWFjaChuZ0F0dHJQcmVmaXhlcywgZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgdmFyIG5hbWUgPSBwcmVmaXggKyAnYXBwJztcbiAgICB2YXIgY2FuZGlkYXRlO1xuXG4gICAgaWYgKCFhcHBFbGVtZW50ICYmIChjYW5kaWRhdGUgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ1snICsgbmFtZS5yZXBsYWNlKCc6JywgJ1xcXFw6JykgKyAnXScpKSkge1xuICAgICAgYXBwRWxlbWVudCA9IGNhbmRpZGF0ZTtcbiAgICAgIG1vZHVsZSA9IGNhbmRpZGF0ZS5nZXRBdHRyaWJ1dGUobmFtZSk7XG4gICAgfVxuICB9KTtcbiAgaWYgKGFwcEVsZW1lbnQpIHtcbiAgICBpZiAoIWlzQXV0b0Jvb3RzdHJhcEFsbG93ZWQpIHtcbiAgICAgIHdpbmRvdy5jb25zb2xlLmVycm9yKCdBbmd1bGFyOiBkaXNhYmxpbmcgYXV0b21hdGljIGJvb3RzdHJhcC4gPHNjcmlwdD4gcHJvdG9jb2wgaW5kaWNhdGVzICcgK1xuICAgICAgICAgICdhbiBleHRlbnNpb24sIGRvY3VtZW50LmxvY2F0aW9uLmhyZWYgZG9lcyBub3QgbWF0Y2guJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbmZpZy5zdHJpY3REaSA9IGdldE5nQXR0cmlidXRlKGFwcEVsZW1lbnQsICdzdHJpY3QtZGknKSAhPT0gbnVsbDtcbiAgICBib290c3RyYXAoYXBwRWxlbWVudCwgbW9kdWxlID8gW21vZHVsZV0gOiBbXSwgY29uZmlnKTtcbiAgfVxufVxuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5ib290c3RyYXBcbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoaXMgZnVuY3Rpb24gdG8gbWFudWFsbHkgc3RhcnQgdXAgYW5ndWxhciBhcHBsaWNhdGlvbi5cbiAqXG4gKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSB7QGxpbmsgZ3VpZGUvYm9vdHN0cmFwIEJvb3RzdHJhcCBndWlkZX0uXG4gKlxuICogQW5ndWxhciB3aWxsIGRldGVjdCBpZiBpdCBoYXMgYmVlbiBsb2FkZWQgaW50byB0aGUgYnJvd3NlciBtb3JlIHRoYW4gb25jZSBhbmQgb25seSBhbGxvdyB0aGVcbiAqIGZpcnN0IGxvYWRlZCBzY3JpcHQgdG8gYmUgYm9vdHN0cmFwcGVkIGFuZCB3aWxsIHJlcG9ydCBhIHdhcm5pbmcgdG8gdGhlIGJyb3dzZXIgY29uc29sZSBmb3JcbiAqIGVhY2ggb2YgdGhlIHN1YnNlcXVlbnQgc2NyaXB0cy4gVGhpcyBwcmV2ZW50cyBzdHJhbmdlIHJlc3VsdHMgaW4gYXBwbGljYXRpb25zLCB3aGVyZSBvdGhlcndpc2VcbiAqIG11bHRpcGxlIGluc3RhbmNlcyBvZiBBbmd1bGFyIHRyeSB0byB3b3JrIG9uIHRoZSBET00uXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBQcm90cmFjdG9yIGJhc2VkIGVuZC10by1lbmQgdGVzdHMgY2Fubm90IHVzZSB0aGlzIGZ1bmN0aW9uIHRvIGJvb3RzdHJhcCBtYW51YWxseS5cbiAqIFRoZXkgbXVzdCB1c2Uge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0FwcCBuZ0FwcH0uXG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIERvIG5vdCBib290c3RyYXAgdGhlIGFwcCBvbiBhbiBlbGVtZW50IHdpdGggYSBkaXJlY3RpdmUgdGhhdCB1c2VzIHtAbGluayBuZy4kY29tcGlsZSN0cmFuc2NsdXNpb24gdHJhbnNjbHVzaW9ufSxcbiAqIHN1Y2ggYXMge0BsaW5rIG5nLm5nSWYgYG5nSWZgfSwge0BsaW5rIG5nLm5nSW5jbHVkZSBgbmdJbmNsdWRlYH0gYW5kIHtAbGluayBuZ1JvdXRlLm5nVmlldyBgbmdWaWV3YH0uXG4gKiBEb2luZyB0aGlzIG1pc3BsYWNlcyB0aGUgYXBwIHtAbGluayBuZy4kcm9vdEVsZW1lbnQgYCRyb290RWxlbWVudGB9IGFuZCB0aGUgYXBwJ3Mge0BsaW5rIGF1dG8uJGluamVjdG9yIGluamVjdG9yfSxcbiAqIGNhdXNpbmcgYW5pbWF0aW9ucyB0byBzdG9wIHdvcmtpbmcgYW5kIG1ha2luZyB0aGUgaW5qZWN0b3IgaW5hY2Nlc3NpYmxlIGZyb20gb3V0c2lkZSB0aGUgYXBwLlxuICogPC9kaXY+XG4gKlxuICogYGBgaHRtbFxuICogPCFkb2N0eXBlIGh0bWw+XG4gKiA8aHRtbD5cbiAqIDxib2R5PlxuICogPGRpdiBuZy1jb250cm9sbGVyPVwiV2VsY29tZUNvbnRyb2xsZXJcIj5cbiAqICAge3tncmVldGluZ319XG4gKiA8L2Rpdj5cbiAqXG4gKiA8c2NyaXB0IHNyYz1cImFuZ3VsYXIuanNcIj48L3NjcmlwdD5cbiAqIDxzY3JpcHQ+XG4gKiAgIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnZGVtbycsIFtdKVxuICogICAuY29udHJvbGxlcignV2VsY29tZUNvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICRzY29wZS5ncmVldGluZyA9ICdXZWxjb21lISc7XG4gKiAgIH0pO1xuICogICBhbmd1bGFyLmJvb3RzdHJhcChkb2N1bWVudCwgWydkZW1vJ10pO1xuICogPC9zY3JpcHQ+XG4gKiA8L2JvZHk+XG4gKiA8L2h0bWw+XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgRE9NIGVsZW1lbnQgd2hpY2ggaXMgdGhlIHJvb3Qgb2YgYW5ndWxhciBhcHBsaWNhdGlvbi5cbiAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nfEZ1bmN0aW9ufEFycmF5Pj19IG1vZHVsZXMgYW4gYXJyYXkgb2YgbW9kdWxlcyB0byBsb2FkIGludG8gdGhlIGFwcGxpY2F0aW9uLlxuICogICAgIEVhY2ggaXRlbSBpbiB0aGUgYXJyYXkgc2hvdWxkIGJlIHRoZSBuYW1lIG9mIGEgcHJlZGVmaW5lZCBtb2R1bGUgb3IgYSAoREkgYW5ub3RhdGVkKVxuICogICAgIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnZva2VkIGJ5IHRoZSBpbmplY3RvciBhcyBhIGBjb25maWdgIGJsb2NrLlxuICogICAgIFNlZToge0BsaW5rIGFuZ3VsYXIubW9kdWxlIG1vZHVsZXN9XG4gKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBhbiBvYmplY3QgZm9yIGRlZmluaW5nIGNvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGFwcGxpY2F0aW9uLiBUaGVcbiAqICAgICBmb2xsb3dpbmcga2V5cyBhcmUgc3VwcG9ydGVkOlxuICpcbiAqICogYHN0cmljdERpYCAtIGRpc2FibGUgYXV0b21hdGljIGZ1bmN0aW9uIGFubm90YXRpb24gZm9yIHRoZSBhcHBsaWNhdGlvbi4gVGhpcyBpcyBtZWFudCB0b1xuICogICBhc3Npc3QgaW4gZmluZGluZyBidWdzIHdoaWNoIGJyZWFrIG1pbmlmaWVkIGNvZGUuIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4gKlxuICogQHJldHVybnMge2F1dG8uJGluamVjdG9yfSBSZXR1cm5zIHRoZSBuZXdseSBjcmVhdGVkIGluamVjdG9yIGZvciB0aGlzIGFwcC5cbiAqL1xuZnVuY3Rpb24gYm9vdHN0cmFwKGVsZW1lbnQsIG1vZHVsZXMsIGNvbmZpZykge1xuICBpZiAoIWlzT2JqZWN0KGNvbmZpZykpIGNvbmZpZyA9IHt9O1xuICB2YXIgZGVmYXVsdENvbmZpZyA9IHtcbiAgICBzdHJpY3REaTogZmFsc2VcbiAgfTtcbiAgY29uZmlnID0gZXh0ZW5kKGRlZmF1bHRDb25maWcsIGNvbmZpZyk7XG4gIHZhciBkb0Jvb3RzdHJhcCA9IGZ1bmN0aW9uKCkge1xuICAgIGVsZW1lbnQgPSBqcUxpdGUoZWxlbWVudCk7XG5cbiAgICBpZiAoZWxlbWVudC5pbmplY3RvcigpKSB7XG4gICAgICB2YXIgdGFnID0gKGVsZW1lbnRbMF0gPT09IHdpbmRvdy5kb2N1bWVudCkgPyAnZG9jdW1lbnQnIDogc3RhcnRpbmdUYWcoZWxlbWVudCk7XG4gICAgICAvLyBFbmNvZGUgYW5nbGUgYnJhY2tldHMgdG8gcHJldmVudCBpbnB1dCBmcm9tIGJlaW5nIHNhbml0aXplZCB0byBlbXB0eSBzdHJpbmcgIzg2ODMuXG4gICAgICB0aHJvdyBuZ01pbkVycihcbiAgICAgICAgICAnYnRzdHJwZCcsXG4gICAgICAgICAgJ0FwcCBhbHJlYWR5IGJvb3RzdHJhcHBlZCB3aXRoIHRoaXMgZWxlbWVudCBcXCd7MH1cXCcnLFxuICAgICAgICAgIHRhZy5yZXBsYWNlKC88LywnJmx0OycpLnJlcGxhY2UoLz4vLCcmZ3Q7JykpO1xuICAgIH1cblxuICAgIG1vZHVsZXMgPSBtb2R1bGVzIHx8IFtdO1xuICAgIG1vZHVsZXMudW5zaGlmdChbJyRwcm92aWRlJywgZnVuY3Rpb24oJHByb3ZpZGUpIHtcbiAgICAgICRwcm92aWRlLnZhbHVlKCckcm9vdEVsZW1lbnQnLCBlbGVtZW50KTtcbiAgICB9XSk7XG5cbiAgICBpZiAoY29uZmlnLmRlYnVnSW5mb0VuYWJsZWQpIHtcbiAgICAgIC8vIFB1c2hpbmcgc28gdGhhdCB0aGlzIG92ZXJyaWRlcyBgZGVidWdJbmZvRW5hYmxlZGAgc2V0dGluZyBkZWZpbmVkIGluIHVzZXIncyBgbW9kdWxlc2AuXG4gICAgICBtb2R1bGVzLnB1c2goWyckY29tcGlsZVByb3ZpZGVyJywgZnVuY3Rpb24oJGNvbXBpbGVQcm92aWRlcikge1xuICAgICAgICAkY29tcGlsZVByb3ZpZGVyLmRlYnVnSW5mb0VuYWJsZWQodHJ1ZSk7XG4gICAgICB9XSk7XG4gICAgfVxuXG4gICAgbW9kdWxlcy51bnNoaWZ0KCduZycpO1xuICAgIHZhciBpbmplY3RvciA9IGNyZWF0ZUluamVjdG9yKG1vZHVsZXMsIGNvbmZpZy5zdHJpY3REaSk7XG4gICAgaW5qZWN0b3IuaW52b2tlKFsnJHJvb3RTY29wZScsICckcm9vdEVsZW1lbnQnLCAnJGNvbXBpbGUnLCAnJGluamVjdG9yJyxcbiAgICAgICBmdW5jdGlvbiBib290c3RyYXBBcHBseShzY29wZSwgZWxlbWVudCwgY29tcGlsZSwgaW5qZWN0b3IpIHtcbiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQuZGF0YSgnJGluamVjdG9yJywgaW5qZWN0b3IpO1xuICAgICAgICAgIGNvbXBpbGUoZWxlbWVudCkoc2NvcGUpO1xuICAgICAgICB9KTtcbiAgICAgIH1dXG4gICAgKTtcbiAgICByZXR1cm4gaW5qZWN0b3I7XG4gIH07XG5cbiAgdmFyIE5HX0VOQUJMRV9ERUJVR19JTkZPID0gL15OR19FTkFCTEVfREVCVUdfSU5GTyEvO1xuICB2YXIgTkdfREVGRVJfQk9PVFNUUkFQID0gL15OR19ERUZFUl9CT09UU1RSQVAhLztcblxuICBpZiAod2luZG93ICYmIE5HX0VOQUJMRV9ERUJVR19JTkZPLnRlc3Qod2luZG93Lm5hbWUpKSB7XG4gICAgY29uZmlnLmRlYnVnSW5mb0VuYWJsZWQgPSB0cnVlO1xuICAgIHdpbmRvdy5uYW1lID0gd2luZG93Lm5hbWUucmVwbGFjZShOR19FTkFCTEVfREVCVUdfSU5GTywgJycpO1xuICB9XG5cbiAgaWYgKHdpbmRvdyAmJiAhTkdfREVGRVJfQk9PVFNUUkFQLnRlc3Qod2luZG93Lm5hbWUpKSB7XG4gICAgcmV0dXJuIGRvQm9vdHN0cmFwKCk7XG4gIH1cblxuICB3aW5kb3cubmFtZSA9IHdpbmRvdy5uYW1lLnJlcGxhY2UoTkdfREVGRVJfQk9PVFNUUkFQLCAnJyk7XG4gIGFuZ3VsYXIucmVzdW1lQm9vdHN0cmFwID0gZnVuY3Rpb24oZXh0cmFNb2R1bGVzKSB7XG4gICAgZm9yRWFjaChleHRyYU1vZHVsZXMsIGZ1bmN0aW9uKG1vZHVsZSkge1xuICAgICAgbW9kdWxlcy5wdXNoKG1vZHVsZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGRvQm9vdHN0cmFwKCk7XG4gIH07XG5cbiAgaWYgKGlzRnVuY3Rpb24oYW5ndWxhci5yZXN1bWVEZWZlcnJlZEJvb3RzdHJhcCkpIHtcbiAgICBhbmd1bGFyLnJlc3VtZURlZmVycmVkQm9vdHN0cmFwKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAbmdkb2MgZnVuY3Rpb25cbiAqIEBuYW1lIGFuZ3VsYXIucmVsb2FkV2l0aERlYnVnSW5mb1xuICogQG1vZHVsZSBuZ1xuICogQGRlc2NyaXB0aW9uXG4gKiBVc2UgdGhpcyBmdW5jdGlvbiB0byByZWxvYWQgdGhlIGN1cnJlbnQgYXBwbGljYXRpb24gd2l0aCBkZWJ1ZyBpbmZvcm1hdGlvbiB0dXJuZWQgb24uXG4gKiBUaGlzIHRha2VzIHByZWNlZGVuY2Ugb3ZlciBhIGNhbGwgdG8gYCRjb21waWxlUHJvdmlkZXIuZGVidWdJbmZvRW5hYmxlZChmYWxzZSlgLlxuICpcbiAqIFNlZSB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkZWJ1Z0luZm9FbmFibGVkfSBmb3IgbW9yZS5cbiAqL1xuZnVuY3Rpb24gcmVsb2FkV2l0aERlYnVnSW5mbygpIHtcbiAgd2luZG93Lm5hbWUgPSAnTkdfRU5BQkxFX0RFQlVHX0lORk8hJyArIHdpbmRvdy5uYW1lO1xuICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG59XG5cbi8qKlxuICogQG5hbWUgYW5ndWxhci5nZXRUZXN0YWJpbGl0eVxuICogQG1vZHVsZSBuZ1xuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIHRlc3RhYmlsaXR5IHNlcnZpY2UgZm9yIHRoZSBpbnN0YW5jZSBvZiBBbmd1bGFyIG9uIHRoZSBnaXZlblxuICogZWxlbWVudC5cbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCBET00gZWxlbWVudCB3aGljaCBpcyB0aGUgcm9vdCBvZiBhbmd1bGFyIGFwcGxpY2F0aW9uLlxuICovXG5mdW5jdGlvbiBnZXRUZXN0YWJpbGl0eShyb290RWxlbWVudCkge1xuICB2YXIgaW5qZWN0b3IgPSBhbmd1bGFyLmVsZW1lbnQocm9vdEVsZW1lbnQpLmluamVjdG9yKCk7XG4gIGlmICghaW5qZWN0b3IpIHtcbiAgICB0aHJvdyBuZ01pbkVycigndGVzdCcsXG4gICAgICAnbm8gaW5qZWN0b3IgZm91bmQgZm9yIGVsZW1lbnQgYXJndW1lbnQgdG8gZ2V0VGVzdGFiaWxpdHknKTtcbiAgfVxuICByZXR1cm4gaW5qZWN0b3IuZ2V0KCckJHRlc3RhYmlsaXR5Jyk7XG59XG5cbnZhciBTTkFLRV9DQVNFX1JFR0VYUCA9IC9bQS1aXS9nO1xuZnVuY3Rpb24gc25ha2VfY2FzZShuYW1lLCBzZXBhcmF0b3IpIHtcbiAgc2VwYXJhdG9yID0gc2VwYXJhdG9yIHx8ICdfJztcbiAgcmV0dXJuIG5hbWUucmVwbGFjZShTTkFLRV9DQVNFX1JFR0VYUCwgZnVuY3Rpb24obGV0dGVyLCBwb3MpIHtcbiAgICByZXR1cm4gKHBvcyA/IHNlcGFyYXRvciA6ICcnKSArIGxldHRlci50b0xvd2VyQ2FzZSgpO1xuICB9KTtcbn1cblxudmFyIGJpbmRKUXVlcnlGaXJlZCA9IGZhbHNlO1xuZnVuY3Rpb24gYmluZEpRdWVyeSgpIHtcbiAgdmFyIG9yaWdpbmFsQ2xlYW5EYXRhO1xuXG4gIGlmIChiaW5kSlF1ZXJ5RmlyZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBiaW5kIHRvIGpRdWVyeSBpZiBwcmVzZW50O1xuICB2YXIganFOYW1lID0ganEoKTtcbiAgalF1ZXJ5ID0gaXNVbmRlZmluZWQoanFOYW1lKSA/IHdpbmRvdy5qUXVlcnkgOiAgIC8vIHVzZSBqUXVlcnkgKGlmIHByZXNlbnQpXG4gICAgICAgICAgICFqcU5hbWUgICAgICAgICAgICAgPyB1bmRlZmluZWQgICAgIDogICAvLyB1c2UganFMaXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dbanFOYW1lXTsgICAvLyB1c2UgalF1ZXJ5IHNwZWNpZmllZCBieSBgbmdKcWBcblxuICAvLyBVc2UgalF1ZXJ5IGlmIGl0IGV4aXN0cyB3aXRoIHByb3BlciBmdW5jdGlvbmFsaXR5LCBvdGhlcndpc2UgZGVmYXVsdCB0byB1cy5cbiAgLy8gQW5ndWxhciAxLjIrIHJlcXVpcmVzIGpRdWVyeSAxLjcrIGZvciBvbigpL29mZigpIHN1cHBvcnQuXG4gIC8vIEFuZ3VsYXIgMS4zKyB0ZWNobmljYWxseSByZXF1aXJlcyBhdCBsZWFzdCBqUXVlcnkgMi4xKyBidXQgaXQgbWF5IHdvcmsgd2l0aCBvbGRlclxuICAvLyB2ZXJzaW9ucy4gSXQgd2lsbCBub3Qgd29yayBmb3Igc3VyZSB3aXRoIGpRdWVyeSA8MS43LCB0aG91Z2guXG4gIGlmIChqUXVlcnkgJiYgalF1ZXJ5LmZuLm9uKSB7XG4gICAganFMaXRlID0galF1ZXJ5O1xuICAgIGV4dGVuZChqUXVlcnkuZm4sIHtcbiAgICAgIHNjb3BlOiBKUUxpdGVQcm90b3R5cGUuc2NvcGUsXG4gICAgICBpc29sYXRlU2NvcGU6IEpRTGl0ZVByb3RvdHlwZS5pc29sYXRlU2NvcGUsXG4gICAgICBjb250cm9sbGVyOiAvKiogQHR5cGUgez99ICovIChKUUxpdGVQcm90b3R5cGUpLmNvbnRyb2xsZXIsXG4gICAgICBpbmplY3RvcjogSlFMaXRlUHJvdG90eXBlLmluamVjdG9yLFxuICAgICAgaW5oZXJpdGVkRGF0YTogSlFMaXRlUHJvdG90eXBlLmluaGVyaXRlZERhdGFcbiAgICB9KTtcblxuICAgIC8vIEFsbCBub2RlcyByZW1vdmVkIGZyb20gdGhlIERPTSB2aWEgdmFyaW91cyBqUXVlcnkgQVBJcyBsaWtlIC5yZW1vdmUoKVxuICAgIC8vIGFyZSBwYXNzZWQgdGhyb3VnaCBqUXVlcnkuY2xlYW5EYXRhLiBNb25rZXktcGF0Y2ggdGhpcyBtZXRob2QgdG8gZmlyZVxuICAgIC8vIHRoZSAkZGVzdHJveSBldmVudCBvbiBhbGwgcmVtb3ZlZCBub2Rlcy5cbiAgICBvcmlnaW5hbENsZWFuRGF0YSA9IGpRdWVyeS5jbGVhbkRhdGE7XG4gICAgalF1ZXJ5LmNsZWFuRGF0YSA9IGZ1bmN0aW9uKGVsZW1zKSB7XG4gICAgICB2YXIgZXZlbnRzO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGVsZW07IChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKykge1xuICAgICAgICBldmVudHMgPSBqUXVlcnkuX2RhdGEoZWxlbSwgJ2V2ZW50cycpO1xuICAgICAgICBpZiAoZXZlbnRzICYmIGV2ZW50cy4kZGVzdHJveSkge1xuICAgICAgICAgIGpRdWVyeShlbGVtKS50cmlnZ2VySGFuZGxlcignJGRlc3Ryb3knKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3JpZ2luYWxDbGVhbkRhdGEoZWxlbXMpO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAganFMaXRlID0gSlFMaXRlO1xuICB9XG5cbiAgYW5ndWxhci5lbGVtZW50ID0ganFMaXRlO1xuXG4gIC8vIFByZXZlbnQgZG91YmxlLXByb3h5aW5nLlxuICBiaW5kSlF1ZXJ5RmlyZWQgPSB0cnVlO1xufVxuXG4vKipcbiAqIHRocm93IGVycm9yIGlmIHRoZSBhcmd1bWVudCBpcyBmYWxzeS5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0QXJnKGFyZywgbmFtZSwgcmVhc29uKSB7XG4gIGlmICghYXJnKSB7XG4gICAgdGhyb3cgbmdNaW5FcnIoJ2FyZXEnLCAnQXJndW1lbnQgXFwnezB9XFwnIGlzIHsxfScsIChuYW1lIHx8ICc/JyksIChyZWFzb24gfHwgJ3JlcXVpcmVkJykpO1xuICB9XG4gIHJldHVybiBhcmc7XG59XG5cbmZ1bmN0aW9uIGFzc2VydEFyZ0ZuKGFyZywgbmFtZSwgYWNjZXB0QXJyYXlBbm5vdGF0aW9uKSB7XG4gIGlmIChhY2NlcHRBcnJheUFubm90YXRpb24gJiYgaXNBcnJheShhcmcpKSB7XG4gICAgICBhcmcgPSBhcmdbYXJnLmxlbmd0aCAtIDFdO1xuICB9XG5cbiAgYXNzZXJ0QXJnKGlzRnVuY3Rpb24oYXJnKSwgbmFtZSwgJ25vdCBhIGZ1bmN0aW9uLCBnb3QgJyArXG4gICAgICAoYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnID8gYXJnLmNvbnN0cnVjdG9yLm5hbWUgfHwgJ09iamVjdCcgOiB0eXBlb2YgYXJnKSk7XG4gIHJldHVybiBhcmc7XG59XG5cbi8qKlxuICogdGhyb3cgZXJyb3IgaWYgdGhlIG5hbWUgZ2l2ZW4gaXMgaGFzT3duUHJvcGVydHlcbiAqIEBwYXJhbSAge1N0cmluZ30gbmFtZSAgICB0aGUgbmFtZSB0byB0ZXN0XG4gKiBAcGFyYW0gIHtTdHJpbmd9IGNvbnRleHQgdGhlIGNvbnRleHQgaW4gd2hpY2ggdGhlIG5hbWUgaXMgdXNlZCwgc3VjaCBhcyBtb2R1bGUgb3IgZGlyZWN0aXZlXG4gKi9cbmZ1bmN0aW9uIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsIGNvbnRleHQpIHtcbiAgaWYgKG5hbWUgPT09ICdoYXNPd25Qcm9wZXJ0eScpIHtcbiAgICB0aHJvdyBuZ01pbkVycignYmFkbmFtZScsICdoYXNPd25Qcm9wZXJ0eSBpcyBub3QgYSB2YWxpZCB7MH0gbmFtZScsIGNvbnRleHQpO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSB2YWx1ZSBhY2Nlc3NpYmxlIGZyb20gdGhlIG9iamVjdCBieSBwYXRoLiBBbnkgdW5kZWZpbmVkIHRyYXZlcnNhbHMgYXJlIGlnbm9yZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogc3RhcnRpbmcgb2JqZWN0XG4gKiBAcGFyYW0ge1N0cmluZ30gcGF0aCBwYXRoIHRvIHRyYXZlcnNlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtiaW5kRm5Ub1Njb3BlPXRydWVdXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB2YWx1ZSBhcyBhY2Nlc3NpYmxlIGJ5IHBhdGhcbiAqL1xuLy9UT0RPKG1pc2tvKTogdGhpcyBmdW5jdGlvbiBuZWVkcyB0byBiZSByZW1vdmVkXG5mdW5jdGlvbiBnZXR0ZXIob2JqLCBwYXRoLCBiaW5kRm5Ub1Njb3BlKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIG9iajtcbiAgdmFyIGtleXMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHZhciBrZXk7XG4gIHZhciBsYXN0SW5zdGFuY2UgPSBvYmo7XG4gIHZhciBsZW4gPSBrZXlzLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAob2JqKSB7XG4gICAgICBvYmogPSAobGFzdEluc3RhbmNlID0gb2JqKVtrZXldO1xuICAgIH1cbiAgfVxuICBpZiAoIWJpbmRGblRvU2NvcGUgJiYgaXNGdW5jdGlvbihvYmopKSB7XG4gICAgcmV0dXJuIGJpbmQobGFzdEluc3RhbmNlLCBvYmopO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBET00gc2libGluZ3MgYmV0d2VlbiB0aGUgZmlyc3QgYW5kIGxhc3Qgbm9kZSBpbiB0aGUgZ2l2ZW4gYXJyYXkuXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBsaWtlIG9iamVjdFxuICogQHJldHVybnMge0FycmF5fSB0aGUgaW5wdXR0ZWQgb2JqZWN0IG9yIGEganFMaXRlIGNvbGxlY3Rpb24gY29udGFpbmluZyB0aGUgbm9kZXNcbiAqL1xuZnVuY3Rpb24gZ2V0QmxvY2tOb2Rlcyhub2Rlcykge1xuICAvLyBUT0RPKHBlcmYpOiB1cGRhdGUgYG5vZGVzYCBpbnN0ZWFkIG9mIGNyZWF0aW5nIGEgbmV3IG9iamVjdD9cbiAgdmFyIG5vZGUgPSBub2Rlc1swXTtcbiAgdmFyIGVuZE5vZGUgPSBub2Rlc1tub2Rlcy5sZW5ndGggLSAxXTtcbiAgdmFyIGJsb2NrTm9kZXM7XG5cbiAgZm9yICh2YXIgaSA9IDE7IG5vZGUgIT09IGVuZE5vZGUgJiYgKG5vZGUgPSBub2RlLm5leHRTaWJsaW5nKTsgaSsrKSB7XG4gICAgaWYgKGJsb2NrTm9kZXMgfHwgbm9kZXNbaV0gIT09IG5vZGUpIHtcbiAgICAgIGlmICghYmxvY2tOb2Rlcykge1xuICAgICAgICBibG9ja05vZGVzID0ganFMaXRlKHNsaWNlLmNhbGwobm9kZXMsIDAsIGkpKTtcbiAgICAgIH1cbiAgICAgIGJsb2NrTm9kZXMucHVzaChub2RlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYmxvY2tOb2RlcyB8fCBub2Rlcztcbn1cblxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgb2JqZWN0IHdpdGhvdXQgYSBwcm90b3R5cGUuIFRoaXMgb2JqZWN0IGlzIHVzZWZ1bCBmb3IgbG9va3VwIHdpdGhvdXQgaGF2aW5nIHRvXG4gKiBndWFyZCBhZ2FpbnN0IHByb3RvdHlwaWNhbGx5IGluaGVyaXRlZCBwcm9wZXJ0aWVzIHZpYSBoYXNPd25Qcm9wZXJ0eS5cbiAqXG4gKiBSZWxhdGVkIG1pY3JvLWJlbmNobWFya3M6XG4gKiAtIGh0dHA6Ly9qc3BlcmYuY29tL29iamVjdC1jcmVhdGUyXG4gKiAtIGh0dHA6Ly9qc3BlcmYuY29tL3Byb3RvLW1hcC1sb29rdXAvMlxuICogLSBodHRwOi8vanNwZXJmLmNvbS9mb3ItaW4tdnMtb2JqZWN0LWtleXMyXG4gKlxuICogQHJldHVybnMge09iamVjdH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlTWFwKCkge1xuICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7IC8vIG51bGwgfHwgdW5kZWZpbmVkXG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICB2YWx1ZSA9ICcnICsgdmFsdWU7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKGhhc0N1c3RvbVRvU3RyaW5nKHZhbHVlKSAmJiAhaXNBcnJheSh2YWx1ZSkgJiYgIWlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSB0b0pzb24odmFsdWUpO1xuICAgICAgfVxuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuXG52YXIgTk9ERV9UWVBFX0VMRU1FTlQgPSAxO1xudmFyIE5PREVfVFlQRV9BVFRSSUJVVEUgPSAyO1xudmFyIE5PREVfVFlQRV9URVhUID0gMztcbnZhciBOT0RFX1RZUEVfQ09NTUVOVCA9IDg7XG52YXIgTk9ERV9UWVBFX0RPQ1VNRU5UID0gOTtcbnZhciBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQgPSAxMTtcblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgYW5ndWxhci5Nb2R1bGVcbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEludGVyZmFjZSBmb3IgY29uZmlndXJpbmcgYW5ndWxhciB7QGxpbmsgYW5ndWxhci5tb2R1bGUgbW9kdWxlc30uXG4gKi9cblxuZnVuY3Rpb24gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KSB7XG5cbiAgdmFyICRpbmplY3Rvck1pbkVyciA9IG1pbkVycignJGluamVjdG9yJyk7XG4gIHZhciBuZ01pbkVyciA9IG1pbkVycignbmcnKTtcblxuICBmdW5jdGlvbiBlbnN1cmUob2JqLCBuYW1lLCBmYWN0b3J5KSB7XG4gICAgcmV0dXJuIG9ialtuYW1lXSB8fCAob2JqW25hbWVdID0gZmFjdG9yeSgpKTtcbiAgfVxuXG4gIHZhciBhbmd1bGFyID0gZW5zdXJlKHdpbmRvdywgJ2FuZ3VsYXInLCBPYmplY3QpO1xuXG4gIC8vIFdlIG5lZWQgdG8gZXhwb3NlIGBhbmd1bGFyLiQkbWluRXJyYCB0byBtb2R1bGVzIHN1Y2ggYXMgYG5nUmVzb3VyY2VgIHRoYXQgcmVmZXJlbmNlIGl0IGR1cmluZyBib290c3RyYXBcbiAgYW5ndWxhci4kJG1pbkVyciA9IGFuZ3VsYXIuJCRtaW5FcnIgfHwgbWluRXJyO1xuXG4gIHJldHVybiBlbnN1cmUoYW5ndWxhciwgJ21vZHVsZScsIGZ1bmN0aW9uKCkge1xuICAgIC8qKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsIGFuZ3VsYXIuTW9kdWxlPn0gKi9cbiAgICB2YXIgbW9kdWxlcyA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgYW5ndWxhci5tb2R1bGVcbiAgICAgKiBAbW9kdWxlIG5nXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBUaGUgYGFuZ3VsYXIubW9kdWxlYCBpcyBhIGdsb2JhbCBwbGFjZSBmb3IgY3JlYXRpbmcsIHJlZ2lzdGVyaW5nIGFuZCByZXRyaWV2aW5nIEFuZ3VsYXJcbiAgICAgKiBtb2R1bGVzLlxuICAgICAqIEFsbCBtb2R1bGVzIChhbmd1bGFyIGNvcmUgb3IgM3JkIHBhcnR5KSB0aGF0IHNob3VsZCBiZSBhdmFpbGFibGUgdG8gYW4gYXBwbGljYXRpb24gbXVzdCBiZVxuICAgICAqIHJlZ2lzdGVyZWQgdXNpbmcgdGhpcyBtZWNoYW5pc20uXG4gICAgICpcbiAgICAgKiBQYXNzaW5nIG9uZSBhcmd1bWVudCByZXRyaWV2ZXMgYW4gZXhpc3Rpbmcge0BsaW5rIGFuZ3VsYXIuTW9kdWxlfSxcbiAgICAgKiB3aGVyZWFzIHBhc3NpbmcgbW9yZSB0aGFuIG9uZSBhcmd1bWVudCBjcmVhdGVzIGEgbmV3IHtAbGluayBhbmd1bGFyLk1vZHVsZX1cbiAgICAgKlxuICAgICAqXG4gICAgICogIyBNb2R1bGVcbiAgICAgKlxuICAgICAqIEEgbW9kdWxlIGlzIGEgY29sbGVjdGlvbiBvZiBzZXJ2aWNlcywgZGlyZWN0aXZlcywgY29udHJvbGxlcnMsIGZpbHRlcnMsIGFuZCBjb25maWd1cmF0aW9uIGluZm9ybWF0aW9uLlxuICAgICAqIGBhbmd1bGFyLm1vZHVsZWAgaXMgdXNlZCB0byBjb25maWd1cmUgdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAvLyBDcmVhdGUgYSBuZXcgbW9kdWxlXG4gICAgICogdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ215TW9kdWxlJywgW10pO1xuICAgICAqXG4gICAgICogLy8gcmVnaXN0ZXIgYSBuZXcgc2VydmljZVxuICAgICAqIG15TW9kdWxlLnZhbHVlKCdhcHBOYW1lJywgJ015Q29vbEFwcCcpO1xuICAgICAqXG4gICAgICogLy8gY29uZmlndXJlIGV4aXN0aW5nIHNlcnZpY2VzIGluc2lkZSBpbml0aWFsaXphdGlvbiBibG9ja3MuXG4gICAgICogbXlNb2R1bGUuY29uZmlnKFsnJGxvY2F0aW9uUHJvdmlkZXInLCBmdW5jdGlvbigkbG9jYXRpb25Qcm92aWRlcikge1xuICAgICAqICAgLy8gQ29uZmlndXJlIGV4aXN0aW5nIHByb3ZpZGVyc1xuICAgICAqICAgJGxvY2F0aW9uUHJvdmlkZXIuaGFzaFByZWZpeCgnIScpO1xuICAgICAqIH1dKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoZW4geW91IGNhbiBjcmVhdGUgYW4gaW5qZWN0b3IgYW5kIGxvYWQgeW91ciBtb2R1bGVzIGxpa2UgdGhpczpcbiAgICAgKlxuICAgICAqIGBgYGpzXG4gICAgICogdmFyIGluamVjdG9yID0gYW5ndWxhci5pbmplY3RvcihbJ25nJywgJ215TW9kdWxlJ10pXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBIb3dldmVyIGl0J3MgbW9yZSBsaWtlbHkgdGhhdCB5b3UnbGwganVzdCB1c2VcbiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQXBwIG5nQXBwfSBvclxuICAgICAqIHtAbGluayBhbmd1bGFyLmJvb3RzdHJhcH0gdG8gc2ltcGxpZnkgdGhpcyBwcm9jZXNzIGZvciB5b3UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyFzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIG1vZHVsZSB0byBjcmVhdGUgb3IgcmV0cmlldmUuXG4gICAgICogQHBhcmFtIHshQXJyYXkuPHN0cmluZz49fSByZXF1aXJlcyBJZiBzcGVjaWZpZWQgdGhlbiBuZXcgbW9kdWxlIGlzIGJlaW5nIGNyZWF0ZWQuIElmXG4gICAgICogICAgICAgIHVuc3BlY2lmaWVkIHRoZW4gdGhlIG1vZHVsZSBpcyBiZWluZyByZXRyaWV2ZWQgZm9yIGZ1cnRoZXIgY29uZmlndXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gY29uZmlnRm4gT3B0aW9uYWwgY29uZmlndXJhdGlvbiBmdW5jdGlvbiBmb3IgdGhlIG1vZHVsZS4gU2FtZSBhc1xuICAgICAqICAgICAgICB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjY29uZmlnIE1vZHVsZSNjb25maWcoKX0uXG4gICAgICogQHJldHVybnMge2FuZ3VsYXIuTW9kdWxlfSBuZXcgbW9kdWxlIHdpdGggdGhlIHtAbGluayBhbmd1bGFyLk1vZHVsZX0gYXBpLlxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBtb2R1bGUobmFtZSwgcmVxdWlyZXMsIGNvbmZpZ0ZuKSB7XG5cbiAgICAgIHZhciBpbmZvID0ge307XG5cbiAgICAgIHZhciBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSA9IGZ1bmN0aW9uKG5hbWUsIGNvbnRleHQpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdoYXNPd25Qcm9wZXJ0eScpIHtcbiAgICAgICAgICB0aHJvdyBuZ01pbkVycignYmFkbmFtZScsICdoYXNPd25Qcm9wZXJ0eSBpcyBub3QgYSB2YWxpZCB7MH0gbmFtZScsIGNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnbW9kdWxlJyk7XG4gICAgICBpZiAocmVxdWlyZXMgJiYgbW9kdWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICBtb2R1bGVzW25hbWVdID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbnN1cmUobW9kdWxlcywgbmFtZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICghcmVxdWlyZXMpIHtcbiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ25vbW9kJywgJ01vZHVsZSBcXCd7MH1cXCcgaXMgbm90IGF2YWlsYWJsZSEgWW91IGVpdGhlciBtaXNzcGVsbGVkICcgK1xuICAgICAgICAgICAgICd0aGUgbW9kdWxlIG5hbWUgb3IgZm9yZ290IHRvIGxvYWQgaXQuIElmIHJlZ2lzdGVyaW5nIGEgbW9kdWxlIGVuc3VyZSB0aGF0IHlvdSAnICtcbiAgICAgICAgICAgICAnc3BlY2lmeSB0aGUgZGVwZW5kZW5jaWVzIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuJywgbmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKiogQHR5cGUgeyFBcnJheS48QXJyYXkuPCo+Pn0gKi9cbiAgICAgICAgdmFyIGludm9rZVF1ZXVlID0gW107XG5cbiAgICAgICAgLyoqIEB0eXBlIHshQXJyYXkuPEZ1bmN0aW9uPn0gKi9cbiAgICAgICAgdmFyIGNvbmZpZ0Jsb2NrcyA9IFtdO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7IUFycmF5LjxGdW5jdGlvbj59ICovXG4gICAgICAgIHZhciBydW5CbG9ja3MgPSBbXTtcblxuICAgICAgICB2YXIgY29uZmlnID0gaW52b2tlTGF0ZXIoJyRpbmplY3RvcicsICdpbnZva2UnLCAncHVzaCcsIGNvbmZpZ0Jsb2Nrcyk7XG5cbiAgICAgICAgLyoqIEB0eXBlIHthbmd1bGFyLk1vZHVsZX0gKi9cbiAgICAgICAgdmFyIG1vZHVsZUluc3RhbmNlID0ge1xuICAgICAgICAgIC8vIFByaXZhdGUgc3RhdGVcbiAgICAgICAgICBfaW52b2tlUXVldWU6IGludm9rZVF1ZXVlLFxuICAgICAgICAgIF9jb25maWdCbG9ja3M6IGNvbmZpZ0Jsb2NrcyxcbiAgICAgICAgICBfcnVuQmxvY2tzOiBydW5CbG9ja3MsXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjaW5mb1xuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gaW5mbyBJbmZvcm1hdGlvbiBhYm91dCB0aGUgbW9kdWxlXG4gICAgICAgICAgICogQHJldHVybnMge09iamVjdHxNb2R1bGV9IFRoZSBjdXJyZW50IGluZm8gb2JqZWN0IGZvciB0aGlzIG1vZHVsZSBpZiBjYWxsZWQgYXMgYSBnZXR0ZXIsXG4gICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGB0aGlzYCBpZiBjYWxsZWQgYXMgYSBzZXR0ZXIuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBSZWFkIGFuZCB3cml0ZSBjdXN0b20gaW5mb3JtYXRpb24gYWJvdXQgdGhpcyBtb2R1bGUuXG4gICAgICAgICAgICogRm9yIGV4YW1wbGUgeW91IGNvdWxkIHB1dCB0aGUgdmVyc2lvbiBvZiB0aGUgbW9kdWxlIGluIGhlcmUuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBgYGBqc1xuICAgICAgICAgICAqIGFuZ3VsYXIubW9kdWxlKCdteU1vZHVsZScsIFtdKS5pbmZvKHsgdmVyc2lvbjogJzEuMC4wJyB9KTtcbiAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIFRoZSB2ZXJzaW9uIGNvdWxkIHRoZW4gYmUgcmVhZCBiYWNrIG91dCBieSBhY2Nlc3NpbmcgdGhlIG1vZHVsZSBlbHNld2hlcmU6XG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgKiB2YXIgdmVyc2lvbiA9IGFuZ3VsYXIubW9kdWxlKCdteU1vZHVsZScpLmluZm8oKS52ZXJzaW9uO1xuICAgICAgICAgICAqIGBgYFxuICAgICAgICAgICAqXG4gICAgICAgICAgICogWW91IGNhbiBhbHNvIHJldHJpZXZlIHRoaXMgaW5mb3JtYXRpb24gZHVyaW5nIHJ1bnRpbWUgdmlhIHRoZVxuICAgICAgICAgICAqIHtAbGluayAkaW5qZWN0b3IjbW9kdWxlcyBgJGluamVjdG9yLm1vZHVsZXNgfSBwcm9wZXJ0eTpcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIGBgYGpzXG4gICAgICAgICAgICogdmFyIHZlcnNpb24gPSAkaW5qZWN0b3IubW9kdWxlc1snbXlNb2R1bGUnXS5pbmZvKCkudmVyc2lvbjtcbiAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgKi9cbiAgICAgICAgICBpbmZvOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHRocm93IG5nTWluRXJyKCdhb2JqJywgJ0FyZ3VtZW50IFxcJ3swfVxcJyBtdXN0IGJlIGFuIG9iamVjdCcsICd2YWx1ZScpO1xuICAgICAgICAgICAgICBpbmZvID0gdmFsdWU7XG4gICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGluZm87XG4gICAgICAgICAgfSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI3JlcXVpcmVzXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogSG9sZHMgdGhlIGxpc3Qgb2YgbW9kdWxlcyB3aGljaCB0aGUgaW5qZWN0b3Igd2lsbCBsb2FkIGJlZm9yZSB0aGUgY3VycmVudCBtb2R1bGUgaXNcbiAgICAgICAgICAgKiBsb2FkZWQuXG4gICAgICAgICAgICovXG4gICAgICAgICAgcmVxdWlyZXM6IHJlcXVpcmVzLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjbmFtZVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIE5hbWUgb2YgdGhlIG1vZHVsZS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBuYW1lOiBuYW1lLFxuXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjcHJvdmlkZXJcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvdmlkZXJUeXBlIENvbnN0cnVjdGlvbiBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIHRoZVxuICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNwcm92aWRlciAkcHJvdmlkZS5wcm92aWRlcigpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBwcm92aWRlcjogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckcHJvdmlkZScsICdwcm92aWRlcicpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2ZhY3RvcnlcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgc2VydmljZSBuYW1lXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJvdmlkZXJGdW5jdGlvbiBGdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIHRoZSBzZXJ2aWNlLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNmYWN0b3J5ICRwcm92aWRlLmZhY3RvcnkoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgZmFjdG9yeTogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckcHJvdmlkZScsICdmYWN0b3J5JyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjc2VydmljZVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb25zdHJ1Y3RvciBBIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnN0YW50aWF0ZWQuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2UgJHByb3ZpZGUuc2VydmljZSgpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBzZXJ2aWNlOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRwcm92aWRlJywgJ3NlcnZpY2UnKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSN2YWx1ZVxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBzZXJ2aWNlIG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBTZXJ2aWNlIGluc3RhbmNlIG9iamVjdC5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIGF1dG8uJHByb3ZpZGUjdmFsdWUgJHByb3ZpZGUudmFsdWUoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgdmFsdWU6IGludm9rZUxhdGVyKCckcHJvdmlkZScsICd2YWx1ZScpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2NvbnN0YW50XG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIGNvbnN0YW50IG5hbWVcbiAgICAgICAgICAgKiBAcGFyYW0geyp9IG9iamVjdCBDb25zdGFudCB2YWx1ZS5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBCZWNhdXNlIHRoZSBjb25zdGFudHMgYXJlIGZpeGVkLCB0aGV5IGdldCBhcHBsaWVkIGJlZm9yZSBvdGhlciBwcm92aWRlIG1ldGhvZHMuXG4gICAgICAgICAgICogU2VlIHtAbGluayBhdXRvLiRwcm92aWRlI2NvbnN0YW50ICRwcm92aWRlLmNvbnN0YW50KCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGNvbnN0YW50OiBpbnZva2VMYXRlcignJHByb3ZpZGUnLCAnY29uc3RhbnQnLCAndW5zaGlmdCcpLFxuXG4gICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNkZWNvcmF0b3JcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gZGVjb3JhdGUuXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZGVjb3JGbiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aGVuIHRoZSBzZXJ2aWNlIG5lZWRzIHRvIGJlXG4gICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW50aWF0ZWQgYW5kIHNob3VsZCByZXR1cm4gdGhlIGRlY29yYXRlZCBzZXJ2aWNlIGluc3RhbmNlLlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNkZWNvcmF0b3IgJHByb3ZpZGUuZGVjb3JhdG9yKCl9LlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGRlY29yYXRvcjogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckcHJvdmlkZScsICdkZWNvcmF0b3InLCBjb25maWdCbG9ja3MpLFxuXG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgICAqIEBuYW1lIGFuZ3VsYXIuTW9kdWxlI2FuaW1hdGlvblxuICAgICAgICAgICAqIEBtb2R1bGUgbmdcbiAgICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBhbmltYXRpb24gbmFtZVxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFuaW1hdGlvbkZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIGFuXG4gICAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24uXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiAqKk5PVEUqKjogYW5pbWF0aW9ucyB0YWtlIGVmZmVjdCBvbmx5IGlmIHRoZSAqKm5nQW5pbWF0ZSoqIG1vZHVsZSBpcyBsb2FkZWQuXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIERlZmluZXMgYW4gYW5pbWF0aW9uIGhvb2sgdGhhdCBjYW4gYmUgbGF0ZXIgdXNlZCB3aXRoXG4gICAgICAgICAgICoge0BsaW5rICRhbmltYXRlICRhbmltYXRlfSBzZXJ2aWNlIGFuZCBkaXJlY3RpdmVzIHRoYXQgdXNlIHRoaXMgc2VydmljZS5cbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIGBgYGpzXG4gICAgICAgICAgICogbW9kdWxlLmFuaW1hdGlvbignLmFuaW1hdGlvbi1uYW1lJywgZnVuY3Rpb24oJGluamVjdDEsICRpbmplY3QyKSB7XG4gICAgICAgICAgICogICByZXR1cm4ge1xuICAgICAgICAgICAqICAgICBldmVudE5hbWUgOiBmdW5jdGlvbihlbGVtZW50LCBkb25lKSB7XG4gICAgICAgICAgICogICAgICAgLy9jb2RlIHRvIHJ1biB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICogICAgICAgLy9vbmNlIGNvbXBsZXRlLCB0aGVuIHJ1biBkb25lKClcbiAgICAgICAgICAgKiAgICAgICByZXR1cm4gZnVuY3Rpb24gY2FuY2VsbGF0aW9uRnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAqICAgICAgICAgLy9jb2RlIHRvIGNhbmNlbCB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICogICAgICAgfVxuICAgICAgICAgICAqICAgICB9XG4gICAgICAgICAgICogICB9XG4gICAgICAgICAgICogfSlcbiAgICAgICAgICAgKiBgYGBcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGFuaW1hdGVQcm92aWRlciNyZWdpc3RlciAkYW5pbWF0ZVByb3ZpZGVyLnJlZ2lzdGVyKCl9IGFuZFxuICAgICAgICAgICAqIHtAbGluayBuZ0FuaW1hdGUgbmdBbmltYXRlIG1vZHVsZX0gZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICAgICAgICovXG4gICAgICAgICAgYW5pbWF0aW9uOiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRhbmltYXRlUHJvdmlkZXInLCAncmVnaXN0ZXInKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNmaWx0ZXJcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRmlsdGVyIG5hbWUgLSB0aGlzIG11c3QgYmUgYSB2YWxpZCBhbmd1bGFyIGV4cHJlc3Npb24gaWRlbnRpZmllclxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbHRlckZhY3RvcnkgRmFjdG9yeSBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlIG9mIGZpbHRlci5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBTZWUge0BsaW5rIG5nLiRmaWx0ZXJQcm92aWRlciNyZWdpc3RlciAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoKX0uXG4gICAgICAgICAgICpcbiAgICAgICAgICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgICAgICAgICAqICoqTm90ZToqKiBGaWx0ZXIgbmFtZXMgbXVzdCBiZSB2YWxpZCBhbmd1bGFyIHtAbGluayBleHByZXNzaW9ufSBpZGVudGlmaWVycywgc3VjaCBhcyBgdXBwZXJjYXNlYCBvciBgb3JkZXJCeWAuXG4gICAgICAgICAgICogTmFtZXMgd2l0aCBzcGVjaWFsIGNoYXJhY3RlcnMsIHN1Y2ggYXMgaHlwaGVucyBhbmQgZG90cywgYXJlIG5vdCBhbGxvd2VkLiBJZiB5b3Ugd2lzaCB0byBuYW1lc3BhY2VcbiAgICAgICAgICAgKiB5b3VyIGZpbHRlcnMsIHRoZW4geW91IGNhbiB1c2UgY2FwaXRhbGl6YXRpb24gKGBteWFwcFN1YnNlY3Rpb25GaWx0ZXJ4YCkgb3IgdW5kZXJzY29yZXNcbiAgICAgICAgICAgKiAoYG15YXBwX3N1YnNlY3Rpb25fZmlsdGVyeGApLlxuICAgICAgICAgICAqIDwvZGl2PlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGZpbHRlcjogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckZmlsdGVyUHJvdmlkZXInLCAncmVnaXN0ZXInKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb250cm9sbGVyXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBDb250cm9sbGVyIG5hbWUsIG9yIGFuIG9iamVjdCBtYXAgb2YgY29udHJvbGxlcnMgd2hlcmUgdGhlXG4gICAgICAgICAgICogICAga2V5cyBhcmUgdGhlIG5hbWVzIGFuZCB0aGUgdmFsdWVzIGFyZSB0aGUgY29uc3RydWN0b3JzLlxuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyI3JlZ2lzdGVyICRjb250cm9sbGVyUHJvdmlkZXIucmVnaXN0ZXIoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29udHJvbGxlcjogaW52b2tlTGF0ZXJBbmRTZXRNb2R1bGVOYW1lKCckY29udHJvbGxlclByb3ZpZGVyJywgJ3JlZ2lzdGVyJyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjZGlyZWN0aXZlXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBEaXJlY3RpdmUgbmFtZSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBkaXJlY3RpdmVzIHdoZXJlIHRoZVxuICAgICAgICAgICAqICAgIGtleXMgYXJlIHRoZSBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGZhY3Rvcmllcy5cbiAgICAgICAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXJlY3RpdmVGYWN0b3J5IEZhY3RvcnkgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZSBvZlxuICAgICAgICAgICAqIGRpcmVjdGl2ZXMuXG4gICAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAgICogU2VlIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSgpfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBkaXJlY3RpdmU6IGludm9rZUxhdGVyQW5kU2V0TW9kdWxlTmFtZSgnJGNvbXBpbGVQcm92aWRlcicsICdkaXJlY3RpdmUnKSxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNjb21wb25lbnRcbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSBvZiB0aGUgY29tcG9uZW50IGluIGNhbWVsLWNhc2UgKGkuZS4gbXlDb21wIHdoaWNoIHdpbGwgbWF0Y2ggYXMgbXktY29tcClcbiAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBDb21wb25lbnQgZGVmaW5pdGlvbiBvYmplY3QgKGEgc2ltcGxpZmllZFxuICAgICAgICAgICAqICAgIHtAbGluayBuZy4kY29tcGlsZSNkaXJlY3RpdmUtZGVmaW5pdGlvbi1vYmplY3QgZGlyZWN0aXZlIGRlZmluaXRpb24gb2JqZWN0fSlcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgICAqIFNlZSB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNjb21wb25lbnQgJGNvbXBpbGVQcm92aWRlci5jb21wb25lbnQoKX0uXG4gICAgICAgICAgICovXG4gICAgICAgICAgY29tcG9uZW50OiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUoJyRjb21waWxlUHJvdmlkZXInLCAnY29tcG9uZW50JyksXG5cbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgICAgICogQG5hbWUgYW5ndWxhci5Nb2R1bGUjY29uZmlnXG4gICAgICAgICAgICogQG1vZHVsZSBuZ1xuICAgICAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbmZpZ0ZuIEV4ZWN1dGUgdGhpcyBmdW5jdGlvbiBvbiBtb2R1bGUgbG9hZC4gVXNlZnVsIGZvciBzZXJ2aWNlXG4gICAgICAgICAgICogICAgY29uZmlndXJhdGlvbi5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gcmVnaXN0ZXIgd29yayB3aGljaCBuZWVkcyB0byBiZSBwZXJmb3JtZWQgb24gbW9kdWxlIGxvYWRpbmcuXG4gICAgICAgICAgICogRm9yIG1vcmUgYWJvdXQgaG93IHRvIGNvbmZpZ3VyZSBzZXJ2aWNlcywgc2VlXG4gICAgICAgICAgICoge0BsaW5rIHByb3ZpZGVycyNwcm92aWRlci1yZWNpcGUgUHJvdmlkZXIgUmVjaXBlfS5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjb25maWc6IGNvbmZpZyxcblxuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICAgKiBAbmFtZSBhbmd1bGFyLk1vZHVsZSNydW5cbiAgICAgICAgICAgKiBAbW9kdWxlIG5nXG4gICAgICAgICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW5pdGlhbGl6YXRpb25GbiBFeGVjdXRlIHRoaXMgZnVuY3Rpb24gYWZ0ZXIgaW5qZWN0b3IgY3JlYXRpb24uXG4gICAgICAgICAgICogICAgVXNlZnVsIGZvciBhcHBsaWNhdGlvbiBpbml0aWFsaXphdGlvbi5cbiAgICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICAgKiBVc2UgdGhpcyBtZXRob2QgdG8gcmVnaXN0ZXIgd29yayB3aGljaCBzaG91bGQgYmUgcGVyZm9ybWVkIHdoZW4gdGhlIGluamVjdG9yIGlzIGRvbmVcbiAgICAgICAgICAgKiBsb2FkaW5nIGFsbCBtb2R1bGVzLlxuICAgICAgICAgICAqL1xuICAgICAgICAgIHJ1bjogZnVuY3Rpb24oYmxvY2spIHtcbiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKGJsb2NrKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoY29uZmlnRm4pIHtcbiAgICAgICAgICBjb25maWcoY29uZmlnRm4pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1vZHVsZUluc3RhbmNlO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvdmlkZXJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZFxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZz19IGluc2VydE1ldGhvZFxuICAgICAgICAgKiBAcmV0dXJucyB7YW5ndWxhci5Nb2R1bGV9XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBpbnZva2VMYXRlcihwcm92aWRlciwgbWV0aG9kLCBpbnNlcnRNZXRob2QsIHF1ZXVlKSB7XG4gICAgICAgICAgaWYgKCFxdWV1ZSkgcXVldWUgPSBpbnZva2VRdWV1ZTtcbiAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBxdWV1ZVtpbnNlcnRNZXRob2QgfHwgJ3B1c2gnXShbcHJvdmlkZXIsIG1ldGhvZCwgYXJndW1lbnRzXSk7XG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlSW5zdGFuY2U7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvdmlkZXJcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZFxuICAgICAgICAgKiBAcmV0dXJucyB7YW5ndWxhci5Nb2R1bGV9XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBpbnZva2VMYXRlckFuZFNldE1vZHVsZU5hbWUocHJvdmlkZXIsIG1ldGhvZCwgcXVldWUpIHtcbiAgICAgICAgICBpZiAoIXF1ZXVlKSBxdWV1ZSA9IGludm9rZVF1ZXVlO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihyZWNpcGVOYW1lLCBmYWN0b3J5RnVuY3Rpb24pIHtcbiAgICAgICAgICAgIGlmIChmYWN0b3J5RnVuY3Rpb24gJiYgaXNGdW5jdGlvbihmYWN0b3J5RnVuY3Rpb24pKSBmYWN0b3J5RnVuY3Rpb24uJCRtb2R1bGVOYW1lID0gbmFtZTtcbiAgICAgICAgICAgIHF1ZXVlLnB1c2goW3Byb3ZpZGVyLCBtZXRob2QsIGFyZ3VtZW50c10pO1xuICAgICAgICAgICAgcmV0dXJuIG1vZHVsZUluc3RhbmNlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gIH0pO1xuXG59XG5cbi8qIGdsb2JhbCBzaGFsbG93Q29weTogdHJ1ZSAqL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzaGFsbG93IGNvcHkgb2YgYW4gb2JqZWN0LCBhbiBhcnJheSBvciBhIHByaW1pdGl2ZS5cbiAqXG4gKiBBc3N1bWVzIHRoYXQgdGhlcmUgYXJlIG5vIHByb3RvIHByb3BlcnRpZXMgZm9yIG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dDb3B5KHNyYywgZHN0KSB7XG4gIGlmIChpc0FycmF5KHNyYykpIHtcbiAgICBkc3QgPSBkc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBzcmMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgZHN0W2ldID0gc3JjW2ldO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdChzcmMpKSB7XG4gICAgZHN0ID0gZHN0IHx8IHt9O1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNyYykge1xuICAgICAgaWYgKCEoa2V5LmNoYXJBdCgwKSA9PT0gJyQnICYmIGtleS5jaGFyQXQoMSkgPT09ICckJykpIHtcbiAgICAgICAgZHN0W2tleV0gPSBzcmNba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZHN0IHx8IHNyYztcbn1cblxuLyogZXhwb3J0ZWQgdG9EZWJ1Z1N0cmluZyAqL1xuXG5mdW5jdGlvbiBzZXJpYWxpemVPYmplY3Qob2JqLCBtYXhEZXB0aCkge1xuICB2YXIgc2VlbiA9IFtdO1xuXG4gIC8vIFRoZXJlIGlzIG5vIGRpcmVjdCB3YXkgdG8gc3RyaW5naWZ5IG9iamVjdCB1bnRpbCByZWFjaGluZyBhIHNwZWNpZmljIGRlcHRoXG4gIC8vIGFuZCBhIHZlcnkgZGVlcCBvYmplY3QgY2FuIGNhdXNlIGEgcGVyZm9ybWFuY2UgaXNzdWUsIHNvIHdlIGNvcHkgdGhlIG9iamVjdFxuICAvLyBiYXNlZCBvbiB0aGlzIHNwZWNpZmljIGRlcHRoIGFuZCB0aGVuIHN0cmluZ2lmeSBpdC5cbiAgaWYgKGlzVmFsaWRPYmplY3RNYXhEZXB0aChtYXhEZXB0aCkpIHtcbiAgICAvLyBUaGlzIGZpbGUgaXMgYWxzbyBpbmNsdWRlZCBpbiBgYW5ndWxhci1sb2FkZXJgLCBzbyBgY29weSgpYCBtaWdodCBub3QgYWx3YXlzIGJlIGF2YWlsYWJsZSBpblxuICAgIC8vIHRoZSBjbG9zdXJlLiBUaGVyZWZvcmUsIGl0IGlzIGxhemlseSByZXRyaWV2ZWQgYXMgYGFuZ3VsYXIuY29weSgpYCB3aGVuIG5lZWRlZC5cbiAgICBvYmogPSBhbmd1bGFyLmNvcHkob2JqLCBudWxsLCBtYXhEZXB0aCk7XG4gIH1cbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgZnVuY3Rpb24oa2V5LCB2YWwpIHtcbiAgICB2YWwgPSB0b0pzb25SZXBsYWNlcihrZXksIHZhbCk7XG4gICAgaWYgKGlzT2JqZWN0KHZhbCkpIHtcblxuICAgICAgaWYgKHNlZW4uaW5kZXhPZih2YWwpID49IDApIHJldHVybiAnLi4uJztcblxuICAgICAgc2Vlbi5wdXNoKHZhbCk7XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0b0RlYnVnU3RyaW5nKG9iaiwgbWF4RGVwdGgpIHtcbiAgaWYgKHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gb2JqLnRvU3RyaW5nKCkucmVwbGFjZSgvIFxce1tcXHNcXFNdKiQvLCAnJyk7XG4gIH0gZWxzZSBpZiAoaXNVbmRlZmluZWQob2JqKSkge1xuICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgfSBlbHNlIGlmICh0eXBlb2Ygb2JqICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBzZXJpYWxpemVPYmplY3Qob2JqLCBtYXhEZXB0aCk7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyogZ2xvYmFsIGFuZ3VsYXJNb2R1bGU6IHRydWUsXG4gIHZlcnNpb246IHRydWUsXG5cbiAgJENvbXBpbGVQcm92aWRlcixcblxuICBodG1sQW5jaG9yRGlyZWN0aXZlLFxuICBpbnB1dERpcmVjdGl2ZSxcbiAgaW5wdXREaXJlY3RpdmUsXG4gIGZvcm1EaXJlY3RpdmUsXG4gIHNjcmlwdERpcmVjdGl2ZSxcbiAgc2VsZWN0RGlyZWN0aXZlLFxuICBvcHRpb25EaXJlY3RpdmUsXG4gIG5nQmluZERpcmVjdGl2ZSxcbiAgbmdCaW5kSHRtbERpcmVjdGl2ZSxcbiAgbmdCaW5kVGVtcGxhdGVEaXJlY3RpdmUsXG4gIG5nQ2xhc3NEaXJlY3RpdmUsXG4gIG5nQ2xhc3NFdmVuRGlyZWN0aXZlLFxuICBuZ0NsYXNzT2RkRGlyZWN0aXZlLFxuICBuZ0Nsb2FrRGlyZWN0aXZlLFxuICBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUsXG4gIG5nRm9ybURpcmVjdGl2ZSxcbiAgbmdIaWRlRGlyZWN0aXZlLFxuICBuZ0lmRGlyZWN0aXZlLFxuICBuZ0luY2x1ZGVEaXJlY3RpdmUsXG4gIG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlLFxuICBuZ0luaXREaXJlY3RpdmUsXG4gIG5nTm9uQmluZGFibGVEaXJlY3RpdmUsXG4gIG5nUGx1cmFsaXplRGlyZWN0aXZlLFxuICBuZ1JlcGVhdERpcmVjdGl2ZSxcbiAgbmdTaG93RGlyZWN0aXZlLFxuICBuZ1N0eWxlRGlyZWN0aXZlLFxuICBuZ1N3aXRjaERpcmVjdGl2ZSxcbiAgbmdTd2l0Y2hXaGVuRGlyZWN0aXZlLFxuICBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUsXG4gIG5nT3B0aW9uc0RpcmVjdGl2ZSxcbiAgbmdUcmFuc2NsdWRlRGlyZWN0aXZlLFxuICBuZ01vZGVsRGlyZWN0aXZlLFxuICBuZ0xpc3REaXJlY3RpdmUsXG4gIG5nQ2hhbmdlRGlyZWN0aXZlLFxuICBwYXR0ZXJuRGlyZWN0aXZlLFxuICBwYXR0ZXJuRGlyZWN0aXZlLFxuICByZXF1aXJlZERpcmVjdGl2ZSxcbiAgcmVxdWlyZWREaXJlY3RpdmUsXG4gIG1pbmxlbmd0aERpcmVjdGl2ZSxcbiAgbWlubGVuZ3RoRGlyZWN0aXZlLFxuICBtYXhsZW5ndGhEaXJlY3RpdmUsXG4gIG1heGxlbmd0aERpcmVjdGl2ZSxcbiAgbmdWYWx1ZURpcmVjdGl2ZSxcbiAgbmdNb2RlbE9wdGlvbnNEaXJlY3RpdmUsXG4gIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzLFxuICBuZ0V2ZW50RGlyZWN0aXZlcyxcblxuICAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIsXG4gICRBbmltYXRlUHJvdmlkZXIsXG4gICRDb3JlQW5pbWF0ZUNzc1Byb3ZpZGVyLFxuICAkJENvcmVBbmltYXRlSnNQcm92aWRlcixcbiAgJCRDb3JlQW5pbWF0ZVF1ZXVlUHJvdmlkZXIsXG4gICQkQW5pbWF0ZVJ1bm5lckZhY3RvcnlQcm92aWRlcixcbiAgJCRBbmltYXRlQXN5bmNSdW5GYWN0b3J5UHJvdmlkZXIsXG4gICRCcm93c2VyUHJvdmlkZXIsXG4gICRDYWNoZUZhY3RvcnlQcm92aWRlcixcbiAgJENvbnRyb2xsZXJQcm92aWRlcixcbiAgJERhdGVQcm92aWRlcixcbiAgJERvY3VtZW50UHJvdmlkZXIsXG4gICQkSXNEb2N1bWVudEhpZGRlblByb3ZpZGVyLFxuICAkRXhjZXB0aW9uSGFuZGxlclByb3ZpZGVyLFxuICAkRmlsdGVyUHJvdmlkZXIsXG4gICQkRm9yY2VSZWZsb3dQcm92aWRlcixcbiAgJEludGVycG9sYXRlUHJvdmlkZXIsXG4gICRJbnRlcnZhbFByb3ZpZGVyLFxuICAkSHR0cFByb3ZpZGVyLFxuICAkSHR0cFBhcmFtU2VyaWFsaXplclByb3ZpZGVyLFxuICAkSHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZVByb3ZpZGVyLFxuICAkSHR0cEJhY2tlbmRQcm92aWRlcixcbiAgJHhockZhY3RvcnlQcm92aWRlcixcbiAgJGpzb25wQ2FsbGJhY2tzUHJvdmlkZXIsXG4gICRMb2NhdGlvblByb3ZpZGVyLFxuICAkTG9nUHJvdmlkZXIsXG4gICQkTWFwUHJvdmlkZXIsXG4gICRQYXJzZVByb3ZpZGVyLFxuICAkUm9vdFNjb3BlUHJvdmlkZXIsXG4gICRRUHJvdmlkZXIsXG4gICQkUVByb3ZpZGVyLFxuICAkJFNhbml0aXplVXJpUHJvdmlkZXIsXG4gICRTY2VQcm92aWRlcixcbiAgJFNjZURlbGVnYXRlUHJvdmlkZXIsXG4gICRTbmlmZmVyUHJvdmlkZXIsXG4gICRUZW1wbGF0ZUNhY2hlUHJvdmlkZXIsXG4gICRUZW1wbGF0ZVJlcXVlc3RQcm92aWRlcixcbiAgJCRUZXN0YWJpbGl0eVByb3ZpZGVyLFxuICAkVGltZW91dFByb3ZpZGVyLFxuICAkJFJBRlByb3ZpZGVyLFxuICAkV2luZG93UHJvdmlkZXIsXG4gICQkanFMaXRlUHJvdmlkZXIsXG4gICQkQ29va2llUmVhZGVyUHJvdmlkZXJcbiovXG5cblxuLyoqXG4gKiBAbmdkb2Mgb2JqZWN0XG4gKiBAbmFtZSBhbmd1bGFyLnZlcnNpb25cbiAqIEBtb2R1bGUgbmdcbiAqIEBkZXNjcmlwdGlvblxuICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgQW5ndWxhckpTIHZlcnNpb24uXG4gKlxuICogVGhpcyBvYmplY3QgaGFzIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAtIGBmdWxsYCDigJMgYHtzdHJpbmd9YCDigJMgRnVsbCB2ZXJzaW9uIHN0cmluZywgc3VjaCBhcyBcIjAuOS4xOFwiLlxuICogLSBgbWFqb3JgIOKAkyBge251bWJlcn1gIOKAkyBNYWpvciB2ZXJzaW9uIG51bWJlciwgc3VjaCBhcyBcIjBcIi5cbiAqIC0gYG1pbm9yYCDigJMgYHtudW1iZXJ9YCDigJMgTWlub3IgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgXCI5XCIuXG4gKiAtIGBkb3RgIOKAkyBge251bWJlcn1gIOKAkyBEb3QgdmVyc2lvbiBudW1iZXIsIHN1Y2ggYXMgXCIxOFwiLlxuICogLSBgY29kZU5hbWVgIOKAkyBge3N0cmluZ31gIOKAkyBDb2RlIG5hbWUgb2YgdGhlIHJlbGVhc2UsIHN1Y2ggYXMgXCJqaWdnbGluZy1hcm1mYXRcIi5cbiAqL1xudmFyIHZlcnNpb24gPSB7XG4gIC8vIFRoZXNlIHBsYWNlaG9sZGVyIHN0cmluZ3Mgd2lsbCBiZSByZXBsYWNlZCBieSBncnVudCdzIGBidWlsZGAgdGFzay5cbiAgLy8gVGhleSBuZWVkIHRvIGJlIGRvdWJsZS0gb3Igc2luZ2xlLXF1b3RlZC5cbiAgZnVsbDogJzEuNi42JyxcbiAgbWFqb3I6IDEsXG4gIG1pbm9yOiA2LFxuICBkb3Q6IDYsXG4gIGNvZGVOYW1lOiAnaW50ZXJkaW1lbnNpb25hbC1jYWJsZSdcbn07XG5cblxuZnVuY3Rpb24gcHVibGlzaEV4dGVybmFsQVBJKGFuZ3VsYXIpIHtcbiAgZXh0ZW5kKGFuZ3VsYXIsIHtcbiAgICAnZXJyb3JIYW5kbGluZ0NvbmZpZyc6IGVycm9ySGFuZGxpbmdDb25maWcsXG4gICAgJ2Jvb3RzdHJhcCc6IGJvb3RzdHJhcCxcbiAgICAnY29weSc6IGNvcHksXG4gICAgJ2V4dGVuZCc6IGV4dGVuZCxcbiAgICAnbWVyZ2UnOiBtZXJnZSxcbiAgICAnZXF1YWxzJzogZXF1YWxzLFxuICAgICdlbGVtZW50JzoganFMaXRlLFxuICAgICdmb3JFYWNoJzogZm9yRWFjaCxcbiAgICAnaW5qZWN0b3InOiBjcmVhdGVJbmplY3RvcixcbiAgICAnbm9vcCc6IG5vb3AsXG4gICAgJ2JpbmQnOiBiaW5kLFxuICAgICd0b0pzb24nOiB0b0pzb24sXG4gICAgJ2Zyb21Kc29uJzogZnJvbUpzb24sXG4gICAgJ2lkZW50aXR5JzogaWRlbnRpdHksXG4gICAgJ2lzVW5kZWZpbmVkJzogaXNVbmRlZmluZWQsXG4gICAgJ2lzRGVmaW5lZCc6IGlzRGVmaW5lZCxcbiAgICAnaXNTdHJpbmcnOiBpc1N0cmluZyxcbiAgICAnaXNGdW5jdGlvbic6IGlzRnVuY3Rpb24sXG4gICAgJ2lzT2JqZWN0JzogaXNPYmplY3QsXG4gICAgJ2lzTnVtYmVyJzogaXNOdW1iZXIsXG4gICAgJ2lzRWxlbWVudCc6IGlzRWxlbWVudCxcbiAgICAnaXNBcnJheSc6IGlzQXJyYXksXG4gICAgJ3ZlcnNpb24nOiB2ZXJzaW9uLFxuICAgICdpc0RhdGUnOiBpc0RhdGUsXG4gICAgJ2xvd2VyY2FzZSc6IGxvd2VyY2FzZSxcbiAgICAndXBwZXJjYXNlJzogdXBwZXJjYXNlLFxuICAgICdjYWxsYmFja3MnOiB7JCRjb3VudGVyOiAwfSxcbiAgICAnZ2V0VGVzdGFiaWxpdHknOiBnZXRUZXN0YWJpbGl0eSxcbiAgICAncmVsb2FkV2l0aERlYnVnSW5mbyc6IHJlbG9hZFdpdGhEZWJ1Z0luZm8sXG4gICAgJyQkbWluRXJyJzogbWluRXJyLFxuICAgICckJGNzcCc6IGNzcCxcbiAgICAnJCRlbmNvZGVVcmlTZWdtZW50JzogZW5jb2RlVXJpU2VnbWVudCxcbiAgICAnJCRlbmNvZGVVcmlRdWVyeSc6IGVuY29kZVVyaVF1ZXJ5LFxuICAgICckJHN0cmluZ2lmeSc6IHN0cmluZ2lmeVxuICB9KTtcblxuICBhbmd1bGFyTW9kdWxlID0gc2V0dXBNb2R1bGVMb2FkZXIod2luZG93KTtcblxuICBhbmd1bGFyTW9kdWxlKCduZycsIFsnbmdMb2NhbGUnXSwgWyckcHJvdmlkZScsXG4gICAgZnVuY3Rpb24gbmdNb2R1bGUoJHByb3ZpZGUpIHtcbiAgICAgIC8vICQkc2FuaXRpemVVcmlQcm92aWRlciBuZWVkcyB0byBiZSBiZWZvcmUgJGNvbXBpbGVQcm92aWRlciBhcyBpdCBpcyB1c2VkIGJ5IGl0LlxuICAgICAgJHByb3ZpZGUucHJvdmlkZXIoe1xuICAgICAgICAkJHNhbml0aXplVXJpOiAkJFNhbml0aXplVXJpUHJvdmlkZXJcbiAgICAgIH0pO1xuICAgICAgJHByb3ZpZGUucHJvdmlkZXIoJyRjb21waWxlJywgJENvbXBpbGVQcm92aWRlcikuXG4gICAgICAgIGRpcmVjdGl2ZSh7XG4gICAgICAgICAgICBhOiBodG1sQW5jaG9yRGlyZWN0aXZlLFxuICAgICAgICAgICAgaW5wdXQ6IGlucHV0RGlyZWN0aXZlLFxuICAgICAgICAgICAgdGV4dGFyZWE6IGlucHV0RGlyZWN0aXZlLFxuICAgICAgICAgICAgZm9ybTogZm9ybURpcmVjdGl2ZSxcbiAgICAgICAgICAgIHNjcmlwdDogc2NyaXB0RGlyZWN0aXZlLFxuICAgICAgICAgICAgc2VsZWN0OiBzZWxlY3REaXJlY3RpdmUsXG4gICAgICAgICAgICBvcHRpb246IG9wdGlvbkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQmluZDogbmdCaW5kRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdCaW5kSHRtbDogbmdCaW5kSHRtbERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQmluZFRlbXBsYXRlOiBuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ2xhc3M6IG5nQ2xhc3NEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NsYXNzRXZlbjogbmdDbGFzc0V2ZW5EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0NsYXNzT2RkOiBuZ0NsYXNzT2RkRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDbG9hazogbmdDbG9ha0RpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nQ29udHJvbGxlcjogbmdDb250cm9sbGVyRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdGb3JtOiBuZ0Zvcm1EaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0hpZGU6IG5nSGlkZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nSWY6IG5nSWZEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ0luY2x1ZGU6IG5nSW5jbHVkZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nSW5pdDogbmdJbml0RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdOb25CaW5kYWJsZTogbmdOb25CaW5kYWJsZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUGx1cmFsaXplOiBuZ1BsdXJhbGl6ZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUmVwZWF0OiBuZ1JlcGVhdERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU2hvdzogbmdTaG93RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdTdHlsZTogbmdTdHlsZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3dpdGNoOiBuZ1N3aXRjaERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nU3dpdGNoV2hlbjogbmdTd2l0Y2hXaGVuRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdTd2l0Y2hEZWZhdWx0OiBuZ1N3aXRjaERlZmF1bHREaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ09wdGlvbnM6IG5nT3B0aW9uc0RpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nVHJhbnNjbHVkZTogbmdUcmFuc2NsdWRlRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdNb2RlbDogbmdNb2RlbERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTGlzdDogbmdMaXN0RGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdDaGFuZ2U6IG5nQ2hhbmdlRGlyZWN0aXZlLFxuICAgICAgICAgICAgcGF0dGVybjogcGF0dGVybkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUGF0dGVybjogcGF0dGVybkRpcmVjdGl2ZSxcbiAgICAgICAgICAgIHJlcXVpcmVkOiByZXF1aXJlZERpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nUmVxdWlyZWQ6IHJlcXVpcmVkRGlyZWN0aXZlLFxuICAgICAgICAgICAgbWlubGVuZ3RoOiBtaW5sZW5ndGhEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ01pbmxlbmd0aDogbWlubGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbWF4bGVuZ3RoOiBtYXhsZW5ndGhEaXJlY3RpdmUsXG4gICAgICAgICAgICBuZ01heGxlbmd0aDogbWF4bGVuZ3RoRGlyZWN0aXZlLFxuICAgICAgICAgICAgbmdWYWx1ZTogbmdWYWx1ZURpcmVjdGl2ZSxcbiAgICAgICAgICAgIG5nTW9kZWxPcHRpb25zOiBuZ01vZGVsT3B0aW9uc0RpcmVjdGl2ZVxuICAgICAgICB9KS5cbiAgICAgICAgZGlyZWN0aXZlKHtcbiAgICAgICAgICBuZ0luY2x1ZGU6IG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlXG4gICAgICAgIH0pLlxuICAgICAgICBkaXJlY3RpdmUobmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXMpLlxuICAgICAgICBkaXJlY3RpdmUobmdFdmVudERpcmVjdGl2ZXMpO1xuICAgICAgJHByb3ZpZGUucHJvdmlkZXIoe1xuICAgICAgICAkYW5jaG9yU2Nyb2xsOiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIsXG4gICAgICAgICRhbmltYXRlOiAkQW5pbWF0ZVByb3ZpZGVyLFxuICAgICAgICAkYW5pbWF0ZUNzczogJENvcmVBbmltYXRlQ3NzUHJvdmlkZXIsXG4gICAgICAgICQkYW5pbWF0ZUpzOiAkJENvcmVBbmltYXRlSnNQcm92aWRlcixcbiAgICAgICAgJCRhbmltYXRlUXVldWU6ICQkQ29yZUFuaW1hdGVRdWV1ZVByb3ZpZGVyLFxuICAgICAgICAkJEFuaW1hdGVSdW5uZXI6ICQkQW5pbWF0ZVJ1bm5lckZhY3RvcnlQcm92aWRlcixcbiAgICAgICAgJCRhbmltYXRlQXN5bmNSdW46ICQkQW5pbWF0ZUFzeW5jUnVuRmFjdG9yeVByb3ZpZGVyLFxuICAgICAgICAkYnJvd3NlcjogJEJyb3dzZXJQcm92aWRlcixcbiAgICAgICAgJGNhY2hlRmFjdG9yeTogJENhY2hlRmFjdG9yeVByb3ZpZGVyLFxuICAgICAgICAkY29udHJvbGxlcjogJENvbnRyb2xsZXJQcm92aWRlcixcbiAgICAgICAgJGRvY3VtZW50OiAkRG9jdW1lbnRQcm92aWRlcixcbiAgICAgICAgJCRpc0RvY3VtZW50SGlkZGVuOiAkJElzRG9jdW1lbnRIaWRkZW5Qcm92aWRlcixcbiAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXI6ICRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIsXG4gICAgICAgICRmaWx0ZXI6ICRGaWx0ZXJQcm92aWRlcixcbiAgICAgICAgJCRmb3JjZVJlZmxvdzogJCRGb3JjZVJlZmxvd1Byb3ZpZGVyLFxuICAgICAgICAkaW50ZXJwb2xhdGU6ICRJbnRlcnBvbGF0ZVByb3ZpZGVyLFxuICAgICAgICAkaW50ZXJ2YWw6ICRJbnRlcnZhbFByb3ZpZGVyLFxuICAgICAgICAkaHR0cDogJEh0dHBQcm92aWRlcixcbiAgICAgICAgJGh0dHBQYXJhbVNlcmlhbGl6ZXI6ICRIdHRwUGFyYW1TZXJpYWxpemVyUHJvdmlkZXIsXG4gICAgICAgICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlOiAkSHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZVByb3ZpZGVyLFxuICAgICAgICAkaHR0cEJhY2tlbmQ6ICRIdHRwQmFja2VuZFByb3ZpZGVyLFxuICAgICAgICAkeGhyRmFjdG9yeTogJHhockZhY3RvcnlQcm92aWRlcixcbiAgICAgICAgJGpzb25wQ2FsbGJhY2tzOiAkanNvbnBDYWxsYmFja3NQcm92aWRlcixcbiAgICAgICAgJGxvY2F0aW9uOiAkTG9jYXRpb25Qcm92aWRlcixcbiAgICAgICAgJGxvZzogJExvZ1Byb3ZpZGVyLFxuICAgICAgICAkcGFyc2U6ICRQYXJzZVByb3ZpZGVyLFxuICAgICAgICAkcm9vdFNjb3BlOiAkUm9vdFNjb3BlUHJvdmlkZXIsXG4gICAgICAgICRxOiAkUVByb3ZpZGVyLFxuICAgICAgICAkJHE6ICQkUVByb3ZpZGVyLFxuICAgICAgICAkc2NlOiAkU2NlUHJvdmlkZXIsXG4gICAgICAgICRzY2VEZWxlZ2F0ZTogJFNjZURlbGVnYXRlUHJvdmlkZXIsXG4gICAgICAgICRzbmlmZmVyOiAkU25pZmZlclByb3ZpZGVyLFxuICAgICAgICAkdGVtcGxhdGVDYWNoZTogJFRlbXBsYXRlQ2FjaGVQcm92aWRlcixcbiAgICAgICAgJHRlbXBsYXRlUmVxdWVzdDogJFRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyLFxuICAgICAgICAkJHRlc3RhYmlsaXR5OiAkJFRlc3RhYmlsaXR5UHJvdmlkZXIsXG4gICAgICAgICR0aW1lb3V0OiAkVGltZW91dFByb3ZpZGVyLFxuICAgICAgICAkd2luZG93OiAkV2luZG93UHJvdmlkZXIsXG4gICAgICAgICQkckFGOiAkJFJBRlByb3ZpZGVyLFxuICAgICAgICAkJGpxTGl0ZTogJCRqcUxpdGVQcm92aWRlcixcbiAgICAgICAgJCRNYXA6ICQkTWFwUHJvdmlkZXIsXG4gICAgICAgICQkY29va2llUmVhZGVyOiAkJENvb2tpZVJlYWRlclByb3ZpZGVyXG4gICAgICB9KTtcbiAgICB9XG4gIF0pXG4gIC5pbmZvKHsgYW5ndWxhclZlcnNpb246ICcxLjYuNicgfSk7XG59XG5cbi8qICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbiAqICAgICBBbnkgY29tbWl0cyB0byB0aGlzIGZpbGUgc2hvdWxkIGJlIHJldmlld2VkIHdpdGggc2VjdXJpdHkgaW4gbWluZC4gICpcbiAqICAgQ2hhbmdlcyB0byB0aGlzIGZpbGUgY2FuIHBvdGVudGlhbGx5IGNyZWF0ZSBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMuICpcbiAqICAgICAgICAgIEFuIGFwcHJvdmFsIGZyb20gMiBDb3JlIG1lbWJlcnMgd2l0aCBoaXN0b3J5IG9mIG1vZGlmeWluZyAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZmlsZSBpcyByZXF1aXJlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICBEb2VzIHRoZSBjaGFuZ2Ugc29tZWhvdyBhbGxvdyBmb3IgYXJiaXRyYXJ5IGphdmFzY3JpcHQgdG8gYmUgZXhlY3V0ZWQ/ICpcbiAqICAgIE9yIGFsbG93cyBmb3Igc29tZW9uZSB0byBjaGFuZ2UgdGhlIHByb3RvdHlwZSBvZiBidWlsdC1pbiBvYmplY3RzPyAgICpcbiAqICAgICBPciBnaXZlcyB1bmRlc2lyZWQgYWNjZXNzIHRvIHZhcmlhYmxlcyBsaWtlcyBkb2N1bWVudCBvciB3aW5kb3c/ICAgICpcbiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICovXG5cbi8qIGdsb2JhbFxuICBKUUxpdGVQcm90b3R5cGU6IHRydWUsXG4gIEJPT0xFQU5fQVRUUjogdHJ1ZSxcbiAgQUxJQVNFRF9BVFRSOiB0cnVlXG4qL1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL0pRTGl0ZVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEBuZ2RvYyBmdW5jdGlvblxuICogQG5hbWUgYW5ndWxhci5lbGVtZW50XG4gKiBAbW9kdWxlIG5nXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogV3JhcHMgYSByYXcgRE9NIGVsZW1lbnQgb3IgSFRNTCBzdHJpbmcgYXMgYSBbalF1ZXJ5XShodHRwOi8vanF1ZXJ5LmNvbSkgZWxlbWVudC5cbiAqXG4gKiBJZiBqUXVlcnkgaXMgYXZhaWxhYmxlLCBgYW5ndWxhci5lbGVtZW50YCBpcyBhbiBhbGlhcyBmb3IgdGhlXG4gKiBbalF1ZXJ5XShodHRwOi8vYXBpLmpxdWVyeS5jb20valF1ZXJ5LykgZnVuY3Rpb24uIElmIGpRdWVyeSBpcyBub3QgYXZhaWxhYmxlLCBgYW5ndWxhci5lbGVtZW50YFxuICogZGVsZWdhdGVzIHRvIEFuZ3VsYXIncyBidWlsdC1pbiBzdWJzZXQgb2YgalF1ZXJ5LCBjYWxsZWQgXCJqUXVlcnkgbGl0ZVwiIG9yICoqanFMaXRlKiouXG4gKlxuICoganFMaXRlIGlzIGEgdGlueSwgQVBJLWNvbXBhdGlibGUgc3Vic2V0IG9mIGpRdWVyeSB0aGF0IGFsbG93c1xuICogQW5ndWxhciB0byBtYW5pcHVsYXRlIHRoZSBET00gaW4gYSBjcm9zcy1icm93c2VyIGNvbXBhdGlibGUgd2F5LiBqcUxpdGUgaW1wbGVtZW50cyBvbmx5IHRoZSBtb3N0XG4gKiBjb21tb25seSBuZWVkZWQgZnVuY3Rpb25hbGl0eSB3aXRoIHRoZSBnb2FsIG9mIGhhdmluZyBhIHZlcnkgc21hbGwgZm9vdHByaW50LlxuICpcbiAqIFRvIHVzZSBgalF1ZXJ5YCwgc2ltcGx5IGVuc3VyZSBpdCBpcyBsb2FkZWQgYmVmb3JlIHRoZSBgYW5ndWxhci5qc2AgZmlsZS4gWW91IGNhbiBhbHNvIHVzZSB0aGVcbiAqIHtAbGluayBuZ0pxIGBuZ0pxYH0gZGlyZWN0aXZlIHRvIHNwZWNpZnkgdGhhdCBqcWxpdGUgc2hvdWxkIGJlIHVzZWQgb3ZlciBqUXVlcnksIG9yIHRvIHVzZSBhXG4gKiBzcGVjaWZpYyB2ZXJzaW9uIG9mIGpRdWVyeSBpZiBtdWx0aXBsZSB2ZXJzaW9ucyBleGlzdCBvbiB0aGUgcGFnZS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPioqTm90ZToqKiBBbGwgZWxlbWVudCByZWZlcmVuY2VzIGluIEFuZ3VsYXIgYXJlIGFsd2F5cyB3cmFwcGVkIHdpdGggalF1ZXJ5IG9yXG4gKiBqcUxpdGUgKHN1Y2ggYXMgdGhlIGVsZW1lbnQgYXJndW1lbnQgaW4gYSBkaXJlY3RpdmUncyBjb21waWxlIC8gbGluayBmdW5jdGlvbikuIFRoZXkgYXJlIG5ldmVyIHJhdyBET00gcmVmZXJlbmNlcy48L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPioqTm90ZToqKiBLZWVwIGluIG1pbmQgdGhhdCB0aGlzIGZ1bmN0aW9uIHdpbGwgbm90IGZpbmQgZWxlbWVudHNcbiAqIGJ5IHRhZyBuYW1lIC8gQ1NTIHNlbGVjdG9yLiBGb3IgbG9va3VwcyBieSB0YWcgbmFtZSwgdHJ5IGluc3RlYWQgYGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudCkuZmluZCguLi4pYFxuICogb3IgYCRkb2N1bWVudC5maW5kKClgLCBvciB1c2UgdGhlIHN0YW5kYXJkIERPTSBBUElzLCBlLmcuIGBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKClgLjwvZGl2PlxuICpcbiAqICMjIEFuZ3VsYXIncyBqcUxpdGVcbiAqIGpxTGl0ZSBwcm92aWRlcyBvbmx5IHRoZSBmb2xsb3dpbmcgalF1ZXJ5IG1ldGhvZHM6XG4gKlxuICogLSBbYGFkZENsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYWRkQ2xhc3MvKSAtIERvZXMgbm90IHN1cHBvcnQgYSBmdW5jdGlvbiBhcyBmaXJzdCBhcmd1bWVudFxuICogLSBbYGFmdGVyKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYWZ0ZXIvKVxuICogLSBbYGFwcGVuZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2FwcGVuZC8pXG4gKiAtIFtgYXR0cigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2F0dHIvKSAtIERvZXMgbm90IHN1cHBvcnQgZnVuY3Rpb25zIGFzIHBhcmFtZXRlcnNcbiAqIC0gW2BiaW5kKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vYmluZC8pIChfZGVwcmVjYXRlZF8sIHVzZSBbYG9uKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vb24vKSkgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMsIHNlbGVjdG9ycyBvciBldmVudERhdGFcbiAqIC0gW2BjaGlsZHJlbigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2NoaWxkcmVuLykgLSBEb2VzIG5vdCBzdXBwb3J0IHNlbGVjdG9yc1xuICogLSBbYGNsb25lKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY2xvbmUvKVxuICogLSBbYGNvbnRlbnRzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vY29udGVudHMvKVxuICogLSBbYGNzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2Nzcy8pIC0gT25seSByZXRyaWV2ZXMgaW5saW5lLXN0eWxlcywgZG9lcyBub3QgY2FsbCBgZ2V0Q29tcHV0ZWRTdHlsZSgpYC5cbiAqICAgQXMgYSBzZXR0ZXIsIGRvZXMgbm90IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdzIG9yIGFwcGVuZCAncHgnLCBhbmQgYWxzbyBkb2VzIG5vdCBoYXZlIGF1dG9tYXRpYyBwcm9wZXJ0eSBwcmVmaXhpbmcuXG4gKiAtIFtgZGF0YSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2RhdGEvKVxuICogLSBbYGRldGFjaCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2RldGFjaC8pXG4gKiAtIFtgZW1wdHkoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9lbXB0eS8pXG4gKiAtIFtgZXEoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9lcS8pXG4gKiAtIFtgZmluZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2ZpbmQvKSAtIExpbWl0ZWQgdG8gbG9va3VwcyBieSB0YWcgbmFtZVxuICogLSBbYGhhc0NsYXNzKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vaGFzQ2xhc3MvKVxuICogLSBbYGh0bWwoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9odG1sLylcbiAqIC0gW2BuZXh0KClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vbmV4dC8pIC0gRG9lcyBub3Qgc3VwcG9ydCBzZWxlY3RvcnNcbiAqIC0gW2BvbigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL29uLykgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMsIHNlbGVjdG9ycyBvciBldmVudERhdGFcbiAqIC0gW2BvZmYoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vZmYvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcywgc2VsZWN0b3JzIG9yIGV2ZW50IG9iamVjdCBhcyBwYXJhbWV0ZXJcbiAqIC0gW2BvbmUoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vbmUvKSAtIERvZXMgbm90IHN1cHBvcnQgbmFtZXNwYWNlcyBvciBzZWxlY3RvcnNcbiAqIC0gW2BwYXJlbnQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9wYXJlbnQvKSAtIERvZXMgbm90IHN1cHBvcnQgc2VsZWN0b3JzXG4gKiAtIFtgcHJlcGVuZCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3ByZXBlbmQvKVxuICogLSBbYHByb3AoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9wcm9wLylcbiAqIC0gW2ByZWFkeSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlYWR5LykgKF9kZXByZWNhdGVkXywgdXNlIGBhbmd1bGFyLmVsZW1lbnQoY2FsbGJhY2spYCBpbnN0ZWFkIG9mIGBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQpLnJlYWR5KGNhbGxiYWNrKWApXG4gKiAtIFtgcmVtb3ZlKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlLylcbiAqIC0gW2ByZW1vdmVBdHRyKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVtb3ZlQXR0ci8pIC0gRG9lcyBub3Qgc3VwcG9ydCBtdWx0aXBsZSBhdHRyaWJ1dGVzXG4gKiAtIFtgcmVtb3ZlQ2xhc3MoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9yZW1vdmVDbGFzcy8pIC0gRG9lcyBub3Qgc3VwcG9ydCBhIGZ1bmN0aW9uIGFzIGZpcnN0IGFyZ3VtZW50XG4gKiAtIFtgcmVtb3ZlRGF0YSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3JlbW92ZURhdGEvKVxuICogLSBbYHJlcGxhY2VXaXRoKClgXShodHRwOi8vYXBpLmpxdWVyeS5jb20vcmVwbGFjZVdpdGgvKVxuICogLSBbYHRleHQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS90ZXh0LylcbiAqIC0gW2B0b2dnbGVDbGFzcygpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3RvZ2dsZUNsYXNzLykgLSBEb2VzIG5vdCBzdXBwb3J0IGEgZnVuY3Rpb24gYXMgZmlyc3QgYXJndW1lbnRcbiAqIC0gW2B0cmlnZ2VySGFuZGxlcigpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3RyaWdnZXJIYW5kbGVyLykgLSBQYXNzZXMgYSBkdW1teSBldmVudCBvYmplY3QgdG8gaGFuZGxlcnNcbiAqIC0gW2B1bmJpbmQoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS91bmJpbmQvKSAoX2RlcHJlY2F0ZWRfLCB1c2UgW2BvZmYoKWBdKGh0dHA6Ly9hcGkuanF1ZXJ5LmNvbS9vZmYvKSkgLSBEb2VzIG5vdCBzdXBwb3J0IG5hbWVzcGFjZXMgb3IgZXZlbnQgb2JqZWN0IGFzIHBhcmFtZXRlclxuICogLSBbYHZhbCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3ZhbC8pXG4gKiAtIFtgd3JhcCgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL3dyYXAvKVxuICpcbiAqICMjIGpRdWVyeS9qcUxpdGUgRXh0cmFzXG4gKiBBbmd1bGFyIGFsc28gcHJvdmlkZXMgdGhlIGZvbGxvd2luZyBhZGRpdGlvbmFsIG1ldGhvZHMgYW5kIGV2ZW50cyB0byBib3RoIGpRdWVyeSBhbmQganFMaXRlOlxuICpcbiAqICMjIyBFdmVudHNcbiAqIC0gYCRkZXN0cm95YCAtIEFuZ3VsYXJKUyBpbnRlcmNlcHRzIGFsbCBqcUxpdGUvalF1ZXJ5J3MgRE9NIGRlc3RydWN0aW9uIGFwaXMgYW5kIGZpcmVzIHRoaXMgZXZlbnRcbiAqICAgIG9uIGFsbCBET00gbm9kZXMgYmVpbmcgcmVtb3ZlZC4gIFRoaXMgY2FuIGJlIHVzZWQgdG8gY2xlYW4gdXAgYW55IDNyZCBwYXJ0eSBiaW5kaW5ncyB0byB0aGUgRE9NXG4gKiAgICBlbGVtZW50IGJlZm9yZSBpdCBpcyByZW1vdmVkLlxuICpcbiAqICMjIyBNZXRob2RzXG4gKiAtIGBjb250cm9sbGVyKG5hbWUpYCAtIHJldHJpZXZlcyB0aGUgY29udHJvbGxlciBvZiB0aGUgY3VycmVudCBlbGVtZW50IG9yIGl0cyBwYXJlbnQuIEJ5IGRlZmF1bHRcbiAqICAgcmV0cmlldmVzIGNvbnRyb2xsZXIgYXNzb2NpYXRlZCB3aXRoIHRoZSBgbmdDb250cm9sbGVyYCBkaXJlY3RpdmUuIElmIGBuYW1lYCBpcyBwcm92aWRlZCBhc1xuICogICBjYW1lbENhc2UgZGlyZWN0aXZlIG5hbWUsIHRoZW4gdGhlIGNvbnRyb2xsZXIgZm9yIHRoaXMgZGlyZWN0aXZlIHdpbGwgYmUgcmV0cmlldmVkIChlLmcuXG4gKiAgIGAnbmdNb2RlbCdgKS5cbiAqIC0gYGluamVjdG9yKClgIC0gcmV0cmlldmVzIHRoZSBpbmplY3RvciBvZiB0aGUgY3VycmVudCBlbGVtZW50IG9yIGl0cyBwYXJlbnQuXG4gKiAtIGBzY29wZSgpYCAtIHJldHJpZXZlcyB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9IG9mIHRoZSBjdXJyZW50XG4gKiAgIGVsZW1lbnQgb3IgaXRzIHBhcmVudC4gUmVxdWlyZXMge0BsaW5rIGd1aWRlL3Byb2R1Y3Rpb24jZGlzYWJsaW5nLWRlYnVnLWRhdGEgRGVidWcgRGF0YX0gdG9cbiAqICAgYmUgZW5hYmxlZC5cbiAqIC0gYGlzb2xhdGVTY29wZSgpYCAtIHJldHJpZXZlcyBhbiBpc29sYXRlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIHNjb3BlfSBpZiBvbmUgaXMgYXR0YWNoZWQgZGlyZWN0bHkgdG8gdGhlXG4gKiAgIGN1cnJlbnQgZWxlbWVudC4gVGhpcyBnZXR0ZXIgc2hvdWxkIGJlIHVzZWQgb25seSBvbiBlbGVtZW50cyB0aGF0IGNvbnRhaW4gYSBkaXJlY3RpdmUgd2hpY2ggc3RhcnRzIGEgbmV3IGlzb2xhdGVcbiAqICAgc2NvcGUuIENhbGxpbmcgYHNjb3BlKClgIG9uIHRoaXMgZWxlbWVudCBhbHdheXMgcmV0dXJucyB0aGUgb3JpZ2luYWwgbm9uLWlzb2xhdGUgc2NvcGUuXG4gKiAgIFJlcXVpcmVzIHtAbGluayBndWlkZS9wcm9kdWN0aW9uI2Rpc2FibGluZy1kZWJ1Zy1kYXRhIERlYnVnIERhdGF9IHRvIGJlIGVuYWJsZWQuXG4gKiAtIGBpbmhlcml0ZWREYXRhKClgIC0gc2FtZSBhcyBgZGF0YSgpYCwgYnV0IHdhbGtzIHVwIHRoZSBET00gdW50aWwgYSB2YWx1ZSBpcyBmb3VuZCBvciB0aGUgdG9wXG4gKiAgIHBhcmVudCBlbGVtZW50IGlzIHJlYWNoZWQuXG4gKlxuICogQGtub3duSXNzdWUgWW91IGNhbm5vdCBzcHkgb24gYGFuZ3VsYXIuZWxlbWVudGAgaWYgeW91IGFyZSB1c2luZyBKYXNtaW5lIHZlcnNpb24gMS54LiBTZWVcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzE0MjUxIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGVsZW1lbnQgSFRNTCBzdHJpbmcgb3IgRE9NRWxlbWVudCB0byBiZSB3cmFwcGVkIGludG8galF1ZXJ5LlxuICogQHJldHVybnMge09iamVjdH0galF1ZXJ5IG9iamVjdC5cbiAqL1xuXG5KUUxpdGUuZXhwYW5kbyA9ICduZzMzOSc7XG5cbnZhciBqcUNhY2hlID0gSlFMaXRlLmNhY2hlID0ge30sXG4gICAganFJZCA9IDE7XG5cbi8qXG4gKiAhISEgVGhpcyBpcyBhbiB1bmRvY3VtZW50ZWQgXCJwcml2YXRlXCIgZnVuY3Rpb24gISEhXG4gKi9cbkpRTGl0ZS5fZGF0YSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgLy9qUXVlcnkgYWx3YXlzIHJldHVybnMgYW4gb2JqZWN0IG9uIGNhY2hlIG1pc3NcbiAgcmV0dXJuIHRoaXMuY2FjaGVbbm9kZVt0aGlzLmV4cGFuZG9dXSB8fCB7fTtcbn07XG5cbmZ1bmN0aW9uIGpxTmV4dElkKCkgeyByZXR1cm4gKytqcUlkOyB9XG5cblxudmFyIERBU0hfTE9XRVJDQVNFX1JFR0VYUCA9IC8tKFthLXpdKS9nO1xudmFyIE1TX0hBQ0tfUkVHRVhQID0gL14tbXMtLztcbnZhciBNT1VTRV9FVkVOVF9NQVAgPSB7IG1vdXNlbGVhdmU6ICdtb3VzZW91dCcsIG1vdXNlZW50ZXI6ICdtb3VzZW92ZXInIH07XG52YXIganFMaXRlTWluRXJyID0gbWluRXJyKCdqcUxpdGUnKTtcblxuLyoqXG4gKiBDb252ZXJ0cyBrZWJhYi1jYXNlIHRvIGNhbWVsQ2FzZS5cbiAqIFRoZXJlIGlzIGFsc28gYSBzcGVjaWFsIGNhc2UgZm9yIHRoZSBtcyBwcmVmaXggc3RhcnRpbmcgd2l0aCBhIGxvd2VyY2FzZSBsZXR0ZXIuXG4gKiBAcGFyYW0gbmFtZSBOYW1lIHRvIG5vcm1hbGl6ZVxuICovXG5mdW5jdGlvbiBjc3NLZWJhYlRvQ2FtZWwobmFtZSkge1xuICAgIHJldHVybiBrZWJhYlRvQ2FtZWwobmFtZS5yZXBsYWNlKE1TX0hBQ0tfUkVHRVhQLCAnbXMtJykpO1xufVxuXG5mdW5jdGlvbiBmbkNhbWVsQ2FzZVJlcGxhY2UoYWxsLCBsZXR0ZXIpIHtcbiAgcmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGtlYmFiLWNhc2UgdG8gY2FtZWxDYXNlLlxuICogQHBhcmFtIG5hbWUgTmFtZSB0byBub3JtYWxpemVcbiAqL1xuZnVuY3Rpb24ga2ViYWJUb0NhbWVsKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWVcbiAgICAucmVwbGFjZShEQVNIX0xPV0VSQ0FTRV9SRUdFWFAsIGZuQ2FtZWxDYXNlUmVwbGFjZSk7XG59XG5cbnZhciBTSU5HTEVfVEFHX1JFR0VYUCA9IC9ePChbXFx3LV0rKVxccypcXC8/Pig/OjxcXC9cXDE+fCkkLztcbnZhciBIVE1MX1JFR0VYUCA9IC88fCYjP1xcdys7LztcbnZhciBUQUdfTkFNRV9SRUdFWFAgPSAvPChbXFx3Oi1dKykvO1xudmFyIFhIVE1MX1RBR19SRUdFWFAgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbXFx3Oi1dKylbXj5dKilcXC8+L2dpO1xuXG52YXIgd3JhcE1hcCA9IHtcbiAgJ29wdGlvbic6IFsxLCAnPHNlbGVjdCBtdWx0aXBsZT1cIm11bHRpcGxlXCI+JywgJzwvc2VsZWN0PiddLFxuXG4gICd0aGVhZCc6IFsxLCAnPHRhYmxlPicsICc8L3RhYmxlPiddLFxuICAnY29sJzogWzIsICc8dGFibGU+PGNvbGdyb3VwPicsICc8L2NvbGdyb3VwPjwvdGFibGU+J10sXG4gICd0cic6IFsyLCAnPHRhYmxlPjx0Ym9keT4nLCAnPC90Ym9keT48L3RhYmxlPiddLFxuICAndGQnOiBbMywgJzx0YWJsZT48dGJvZHk+PHRyPicsICc8L3RyPjwvdGJvZHk+PC90YWJsZT4nXSxcbiAgJ19kZWZhdWx0JzogWzAsICcnLCAnJ11cbn07XG5cbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBqcUxpdGVJc1RleHROb2RlKGh0bWwpIHtcbiAgcmV0dXJuICFIVE1MX1JFR0VYUC50ZXN0KGh0bWwpO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVBY2NlcHRzRGF0YShub2RlKSB7XG4gIC8vIFRoZSB3aW5kb3cgb2JqZWN0IGNhbiBhY2NlcHQgZGF0YSBidXQgaGFzIG5vIG5vZGVUeXBlXG4gIC8vIE90aGVyd2lzZSB3ZSBhcmUgb25seSBpbnRlcmVzdGVkIGluIGVsZW1lbnRzICgxKSBhbmQgZG9jdW1lbnRzICg5KVxuICB2YXIgbm9kZVR5cGUgPSBub2RlLm5vZGVUeXBlO1xuICByZXR1cm4gbm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UIHx8ICFub2RlVHlwZSB8fCBub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0RPQ1VNRU5UO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVIYXNEYXRhKG5vZGUpIHtcbiAgZm9yICh2YXIga2V5IGluIGpxQ2FjaGVbbm9kZS5uZzMzOV0pIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZUJ1aWxkRnJhZ21lbnQoaHRtbCwgY29udGV4dCkge1xuICB2YXIgdG1wLCB0YWcsIHdyYXAsXG4gICAgICBmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuICAgICAgbm9kZXMgPSBbXSwgaTtcblxuICBpZiAoanFMaXRlSXNUZXh0Tm9kZShodG1sKSkge1xuICAgIC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuICAgIG5vZGVzLnB1c2goY29udGV4dC5jcmVhdGVUZXh0Tm9kZShodG1sKSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG4gICAgdG1wID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoY29udGV4dC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XG4gICAgdGFnID0gKFRBR19OQU1FX1JFR0VYUC5leGVjKGh0bWwpIHx8IFsnJywgJyddKVsxXS50b0xvd2VyQ2FzZSgpO1xuICAgIHdyYXAgPSB3cmFwTWFwW3RhZ10gfHwgd3JhcE1hcC5fZGVmYXVsdDtcbiAgICB0bXAuaW5uZXJIVE1MID0gd3JhcFsxXSArIGh0bWwucmVwbGFjZShYSFRNTF9UQUdfUkVHRVhQLCAnPCQxPjwvJDI+JykgKyB3cmFwWzJdO1xuXG4gICAgLy8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG4gICAgaSA9IHdyYXBbMF07XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdG1wID0gdG1wLmxhc3RDaGlsZDtcbiAgICB9XG5cbiAgICBub2RlcyA9IGNvbmNhdChub2RlcywgdG1wLmNoaWxkTm9kZXMpO1xuXG4gICAgdG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcbiAgICB0bXAudGV4dENvbnRlbnQgPSAnJztcbiAgfVxuXG4gIC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcbiAgZnJhZ21lbnQudGV4dENvbnRlbnQgPSAnJztcbiAgZnJhZ21lbnQuaW5uZXJIVE1MID0gJyc7IC8vIENsZWFyIGlubmVyIEhUTUxcbiAgZm9yRWFjaChub2RlcywgZnVuY3Rpb24obm9kZSkge1xuICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICB9KTtcblxuICByZXR1cm4gZnJhZ21lbnQ7XG59XG5cbmZ1bmN0aW9uIGpxTGl0ZVBhcnNlSFRNTChodG1sLCBjb250ZXh0KSB7XG4gIGNvbnRleHQgPSBjb250ZXh0IHx8IHdpbmRvdy5kb2N1bWVudDtcbiAgdmFyIHBhcnNlZDtcblxuICBpZiAoKHBhcnNlZCA9IFNJTkdMRV9UQUdfUkVHRVhQLmV4ZWMoaHRtbCkpKSB7XG4gICAgcmV0dXJuIFtjb250ZXh0LmNyZWF0ZUVsZW1lbnQocGFyc2VkWzFdKV07XG4gIH1cblxuICBpZiAoKHBhcnNlZCA9IGpxTGl0ZUJ1aWxkRnJhZ21lbnQoaHRtbCwgY29udGV4dCkpKSB7XG4gICAgcmV0dXJuIHBhcnNlZC5jaGlsZE5vZGVzO1xuICB9XG5cbiAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiBqcUxpdGVXcmFwTm9kZShub2RlLCB3cmFwcGVyKSB7XG4gIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG5cbiAgaWYgKHBhcmVudCkge1xuICAgIHBhcmVudC5yZXBsYWNlQ2hpbGQod3JhcHBlciwgbm9kZSk7XG4gIH1cblxuICB3cmFwcGVyLmFwcGVuZENoaWxkKG5vZGUpO1xufVxuXG5cbi8vIElFOS0xMSBoYXMgbm8gbWV0aG9kIFwiY29udGFpbnNcIiBpbiBTVkcgZWxlbWVudCBhbmQgaW4gTm9kZS5wcm90b3R5cGUuIEJ1ZyAjMTAyNTkuXG52YXIganFMaXRlQ29udGFpbnMgPSB3aW5kb3cuTm9kZS5wcm90b3R5cGUuY29udGFpbnMgfHwgLyoqIEB0aGlzICovIGZ1bmN0aW9uKGFyZykge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICByZXR1cm4gISEodGhpcy5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihhcmcpICYgMTYpO1xufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5mdW5jdGlvbiBKUUxpdGUoZWxlbWVudCkge1xuICBpZiAoZWxlbWVudCBpbnN0YW5jZW9mIEpRTGl0ZSkge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgdmFyIGFyZ0lzU3RyaW5nO1xuXG4gIGlmIChpc1N0cmluZyhlbGVtZW50KSkge1xuICAgIGVsZW1lbnQgPSB0cmltKGVsZW1lbnQpO1xuICAgIGFyZ0lzU3RyaW5nID0gdHJ1ZTtcbiAgfVxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgSlFMaXRlKSkge1xuICAgIGlmIChhcmdJc1N0cmluZyAmJiBlbGVtZW50LmNoYXJBdCgwKSAhPT0gJzwnKSB7XG4gICAgICB0aHJvdyBqcUxpdGVNaW5FcnIoJ25vc2VsJywgJ0xvb2tpbmcgdXAgZWxlbWVudHMgdmlhIHNlbGVjdG9ycyBpcyBub3Qgc3VwcG9ydGVkIGJ5IGpxTGl0ZSEgU2VlOiBodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2FwaS9hbmd1bGFyLmVsZW1lbnQnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBKUUxpdGUoZWxlbWVudCk7XG4gIH1cblxuICBpZiAoYXJnSXNTdHJpbmcpIHtcbiAgICBqcUxpdGVBZGROb2Rlcyh0aGlzLCBqcUxpdGVQYXJzZUhUTUwoZWxlbWVudCkpO1xuICB9IGVsc2UgaWYgKGlzRnVuY3Rpb24oZWxlbWVudCkpIHtcbiAgICBqcUxpdGVSZWFkeShlbGVtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBqcUxpdGVBZGROb2Rlcyh0aGlzLCBlbGVtZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVDbG9uZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LmNsb25lTm9kZSh0cnVlKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlRGVhbG9jKGVsZW1lbnQsIG9ubHlEZXNjZW5kYW50cykge1xuICBpZiAoIW9ubHlEZXNjZW5kYW50cyAmJiBqcUxpdGVBY2NlcHRzRGF0YShlbGVtZW50KSkganFMaXRlLmNsZWFuRGF0YShbZWxlbWVudF0pO1xuXG4gIGlmIChlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwpIHtcbiAgICBqcUxpdGUuY2xlYW5EYXRhKGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnKicpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVPZmYoZWxlbWVudCwgdHlwZSwgZm4sIHVuc3VwcG9ydGVkKSB7XG4gIGlmIChpc0RlZmluZWQodW5zdXBwb3J0ZWQpKSB0aHJvdyBqcUxpdGVNaW5FcnIoJ29mZmFyZ3MnLCAnanFMaXRlI29mZigpIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBzZWxlY3RvcmAgYXJndW1lbnQnKTtcblxuICB2YXIgZXhwYW5kb1N0b3JlID0ganFMaXRlRXhwYW5kb1N0b3JlKGVsZW1lbnQpO1xuICB2YXIgZXZlbnRzID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5ldmVudHM7XG4gIHZhciBoYW5kbGUgPSBleHBhbmRvU3RvcmUgJiYgZXhwYW5kb1N0b3JlLmhhbmRsZTtcblxuICBpZiAoIWhhbmRsZSkgcmV0dXJuOyAvL25vIGxpc3RlbmVycyByZWdpc3RlcmVkXG5cbiAgaWYgKCF0eXBlKSB7XG4gICAgZm9yICh0eXBlIGluIGV2ZW50cykge1xuICAgICAgaWYgKHR5cGUgIT09ICckZGVzdHJveScpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZSk7XG4gICAgICB9XG4gICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgIH1cbiAgfSBlbHNlIHtcblxuICAgIHZhciByZW1vdmVIYW5kbGVyID0gZnVuY3Rpb24odHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVyRm5zID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGlzRGVmaW5lZChmbikpIHtcbiAgICAgICAgYXJyYXlSZW1vdmUobGlzdGVuZXJGbnMgfHwgW10sIGZuKTtcbiAgICAgIH1cbiAgICAgIGlmICghKGlzRGVmaW5lZChmbikgJiYgbGlzdGVuZXJGbnMgJiYgbGlzdGVuZXJGbnMubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZSk7XG4gICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvckVhY2godHlwZS5zcGxpdCgnICcpLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICByZW1vdmVIYW5kbGVyKHR5cGUpO1xuICAgICAgaWYgKE1PVVNFX0VWRU5UX01BUFt0eXBlXSkge1xuICAgICAgICByZW1vdmVIYW5kbGVyKE1PVVNFX0VWRU5UX01BUFt0eXBlXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlUmVtb3ZlRGF0YShlbGVtZW50LCBuYW1lKSB7XG4gIHZhciBleHBhbmRvSWQgPSBlbGVtZW50Lm5nMzM5O1xuICB2YXIgZXhwYW5kb1N0b3JlID0gZXhwYW5kb0lkICYmIGpxQ2FjaGVbZXhwYW5kb0lkXTtcblxuICBpZiAoZXhwYW5kb1N0b3JlKSB7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIGRlbGV0ZSBleHBhbmRvU3RvcmUuZGF0YVtuYW1lXTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXhwYW5kb1N0b3JlLmhhbmRsZSkge1xuICAgICAgaWYgKGV4cGFuZG9TdG9yZS5ldmVudHMuJGRlc3Ryb3kpIHtcbiAgICAgICAgZXhwYW5kb1N0b3JlLmhhbmRsZSh7fSwgJyRkZXN0cm95Jyk7XG4gICAgICB9XG4gICAgICBqcUxpdGVPZmYoZWxlbWVudCk7XG4gICAgfVxuICAgIGRlbGV0ZSBqcUNhY2hlW2V4cGFuZG9JZF07XG4gICAgZWxlbWVudC5uZzMzOSA9IHVuZGVmaW5lZDsgLy8gZG9uJ3QgZGVsZXRlIERPTSBleHBhbmRvcy4gSUUgYW5kIENocm9tZSBkb24ndCBsaWtlIGl0XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgY3JlYXRlSWZOZWNlc3NhcnkpIHtcbiAgdmFyIGV4cGFuZG9JZCA9IGVsZW1lbnQubmczMzksXG4gICAgICBleHBhbmRvU3RvcmUgPSBleHBhbmRvSWQgJiYganFDYWNoZVtleHBhbmRvSWRdO1xuXG4gIGlmIChjcmVhdGVJZk5lY2Vzc2FyeSAmJiAhZXhwYW5kb1N0b3JlKSB7XG4gICAgZWxlbWVudC5uZzMzOSA9IGV4cGFuZG9JZCA9IGpxTmV4dElkKCk7XG4gICAgZXhwYW5kb1N0b3JlID0ganFDYWNoZVtleHBhbmRvSWRdID0ge2V2ZW50czoge30sIGRhdGE6IHt9LCBoYW5kbGU6IHVuZGVmaW5lZH07XG4gIH1cblxuICByZXR1cm4gZXhwYW5kb1N0b3JlO1xufVxuXG5cbmZ1bmN0aW9uIGpxTGl0ZURhdGEoZWxlbWVudCwga2V5LCB2YWx1ZSkge1xuICBpZiAoanFMaXRlQWNjZXB0c0RhdGEoZWxlbWVudCkpIHtcbiAgICB2YXIgcHJvcDtcblxuICAgIHZhciBpc1NpbXBsZVNldHRlciA9IGlzRGVmaW5lZCh2YWx1ZSk7XG4gICAgdmFyIGlzU2ltcGxlR2V0dGVyID0gIWlzU2ltcGxlU2V0dGVyICYmIGtleSAmJiAhaXNPYmplY3Qoa2V5KTtcbiAgICB2YXIgbWFzc0dldHRlciA9ICFrZXk7XG4gICAgdmFyIGV4cGFuZG9TdG9yZSA9IGpxTGl0ZUV4cGFuZG9TdG9yZShlbGVtZW50LCAhaXNTaW1wbGVHZXR0ZXIpO1xuICAgIHZhciBkYXRhID0gZXhwYW5kb1N0b3JlICYmIGV4cGFuZG9TdG9yZS5kYXRhO1xuXG4gICAgaWYgKGlzU2ltcGxlU2V0dGVyKSB7IC8vIGRhdGEoJ2tleScsIHZhbHVlKVxuICAgICAgZGF0YVtrZWJhYlRvQ2FtZWwoa2V5KV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1hc3NHZXR0ZXIpIHsgIC8vIGRhdGEoKVxuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1NpbXBsZUdldHRlcikgeyAvLyBkYXRhKCdrZXknKVxuICAgICAgICAgIC8vIGRvbid0IGZvcmNlIGNyZWF0aW9uIG9mIGV4cGFuZG9TdG9yZSBpZiBpdCBkb2Vzbid0IGV4aXN0IHlldFxuICAgICAgICAgIHJldHVybiBkYXRhICYmIGRhdGFba2ViYWJUb0NhbWVsKGtleSldO1xuICAgICAgICB9IGVsc2UgeyAvLyBtYXNzLXNldHRlcjogZGF0YSh7a2V5MTogdmFsMSwga2V5MjogdmFsMn0pXG4gICAgICAgICAgZm9yIChwcm9wIGluIGtleSkge1xuICAgICAgICAgICAgZGF0YVtrZWJhYlRvQ2FtZWwocHJvcCldID0ga2V5W3Byb3BdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVIYXNDbGFzcyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICBpZiAoIWVsZW1lbnQuZ2V0QXR0cmlidXRlKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAoKCcgJyArIChlbGVtZW50LmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyAnICcpLnJlcGxhY2UoL1tcXG5cXHRdL2csICcgJykuXG4gICAgICBpbmRleE9mKCcgJyArIHNlbGVjdG9yICsgJyAnKSA+IC0xKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlUmVtb3ZlQ2xhc3MoZWxlbWVudCwgY3NzQ2xhc3Nlcykge1xuICBpZiAoY3NzQ2xhc3NlcyAmJiBlbGVtZW50LnNldEF0dHJpYnV0ZSkge1xuICAgIGZvckVhY2goY3NzQ2xhc3Nlcy5zcGxpdCgnICcpLCBmdW5jdGlvbihjc3NDbGFzcykge1xuICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdHJpbShcbiAgICAgICAgICAoJyAnICsgKGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArICcgJylcbiAgICAgICAgICAucmVwbGFjZSgvW1xcblxcdF0vZywgJyAnKVxuICAgICAgICAgIC5yZXBsYWNlKCcgJyArIHRyaW0oY3NzQ2xhc3MpICsgJyAnLCAnICcpKVxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVBZGRDbGFzcyhlbGVtZW50LCBjc3NDbGFzc2VzKSB7XG4gIGlmIChjc3NDbGFzc2VzICYmIGVsZW1lbnQuc2V0QXR0cmlidXRlKSB7XG4gICAgdmFyIGV4aXN0aW5nQ2xhc3NlcyA9ICgnICcgKyAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgJyAnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9bXFxuXFx0XS9nLCAnICcpO1xuXG4gICAgZm9yRWFjaChjc3NDbGFzc2VzLnNwbGl0KCcgJyksIGZ1bmN0aW9uKGNzc0NsYXNzKSB7XG4gICAgICBjc3NDbGFzcyA9IHRyaW0oY3NzQ2xhc3MpO1xuICAgICAgaWYgKGV4aXN0aW5nQ2xhc3Nlcy5pbmRleE9mKCcgJyArIGNzc0NsYXNzICsgJyAnKSA9PT0gLTEpIHtcbiAgICAgICAgZXhpc3RpbmdDbGFzc2VzICs9IGNzc0NsYXNzICsgJyAnO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdHJpbShleGlzdGluZ0NsYXNzZXMpKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIGpxTGl0ZUFkZE5vZGVzKHJvb3QsIGVsZW1lbnRzKSB7XG4gIC8vIFRISVMgQ09ERSBJUyBWRVJZIEhPVC4gRG9uJ3QgbWFrZSBjaGFuZ2VzIHdpdGhvdXQgYmVuY2htYXJraW5nLlxuXG4gIGlmIChlbGVtZW50cykge1xuXG4gICAgLy8gaWYgYSBOb2RlICh0aGUgbW9zdCBjb21tb24gY2FzZSlcbiAgICBpZiAoZWxlbWVudHMubm9kZVR5cGUpIHtcbiAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50cztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgLy8gaWYgYW4gQXJyYXkgb3IgTm9kZUxpc3QgYW5kIG5vdCBhIFdpbmRvd1xuICAgICAgaWYgKHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInICYmIGVsZW1lbnRzLndpbmRvdyAhPT0gZWxlbWVudHMpIHtcbiAgICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50c1tpXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3Rbcm9vdC5sZW5ndGgrK10gPSBlbGVtZW50cztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBqcUxpdGVDb250cm9sbGVyKGVsZW1lbnQsIG5hbWUpIHtcbiAgcmV0dXJuIGpxTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudCwgJyQnICsgKG5hbWUgfHwgJ25nQ29udHJvbGxlcicpICsgJ0NvbnRyb2xsZXInKTtcbn1cblxuZnVuY3Rpb24ganFMaXRlSW5oZXJpdGVkRGF0YShlbGVtZW50LCBuYW1lLCB2YWx1ZSkge1xuICAvLyBpZiBlbGVtZW50IGlzIHRoZSBkb2N1bWVudCBvYmplY3Qgd29yayB3aXRoIHRoZSBodG1sIGVsZW1lbnQgaW5zdGVhZFxuICAvLyB0aGlzIG1ha2VzICQoZG9jdW1lbnQpLnNjb3BlKCkgcG9zc2libGVcbiAgaWYgKGVsZW1lbnQubm9kZVR5cGUgPT09IE5PREVfVFlQRV9ET0NVTUVOVCkge1xuICAgIGVsZW1lbnQgPSBlbGVtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuICB2YXIgbmFtZXMgPSBpc0FycmF5KG5hbWUpID8gbmFtZSA6IFtuYW1lXTtcblxuICB3aGlsZSAoZWxlbWVudCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5hbWVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGlmIChpc0RlZmluZWQodmFsdWUgPSBqcUxpdGUuZGF0YShlbGVtZW50LCBuYW1lc1tpXSkpKSByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gSWYgZGVhbGluZyB3aXRoIGEgZG9jdW1lbnQgZnJhZ21lbnQgbm9kZSB3aXRoIGEgaG9zdCBlbGVtZW50LCBhbmQgbm8gcGFyZW50LCB1c2UgdGhlIGhvc3RcbiAgICAvLyBlbGVtZW50IGFzIHRoZSBwYXJlbnQuIFRoaXMgZW5hYmxlcyBkaXJlY3RpdmVzIHdpdGhpbiBhIFNoYWRvdyBET00gb3IgcG9seWZpbGxlZCBTaGFkb3cgRE9NXG4gICAgLy8gdG8gbG9va3VwIHBhcmVudCBjb250cm9sbGVycy5cbiAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlIHx8IChlbGVtZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQgJiYgZWxlbWVudC5ob3N0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVFbXB0eShlbGVtZW50KSB7XG4gIGpxTGl0ZURlYWxvYyhlbGVtZW50LCB0cnVlKTtcbiAgd2hpbGUgKGVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbWVudC5maXJzdENoaWxkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBqcUxpdGVSZW1vdmUoZWxlbWVudCwga2VlcERhdGEpIHtcbiAgaWYgKCFrZWVwRGF0YSkganFMaXRlRGVhbG9jKGVsZW1lbnQpO1xuICB2YXIgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG59XG5cblxuZnVuY3Rpb24ganFMaXRlRG9jdW1lbnRMb2FkZWQoYWN0aW9uLCB3aW4pIHtcbiAgd2luID0gd2luIHx8IHdpbmRvdztcbiAgaWYgKHdpbi5kb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgLy8gRm9yY2UgdGhlIGFjdGlvbiB0byBiZSBydW4gYXN5bmMgZm9yIGNvbnNpc3RlbnQgYmVoYXZpb3JcbiAgICAvLyBmcm9tIHRoZSBhY3Rpb24ncyBwb2ludCBvZiB2aWV3XG4gICAgLy8gaS5lLiBpdCB3aWxsIGRlZmluaXRlbHkgbm90IGJlIGluIGEgJGFwcGx5XG4gICAgd2luLnNldFRpbWVvdXQoYWN0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBObyBuZWVkIHRvIHVuYmluZCB0aGlzIGhhbmRsZXIgYXMgbG9hZCBpcyBvbmx5IGV2ZXIgY2FsbGVkIG9uY2VcbiAgICBqcUxpdGUod2luKS5vbignbG9hZCcsIGFjdGlvbik7XG4gIH1cbn1cblxuZnVuY3Rpb24ganFMaXRlUmVhZHkoZm4pIHtcbiAgZnVuY3Rpb24gdHJpZ2dlcigpIHtcbiAgICB3aW5kb3cuZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHRyaWdnZXIpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgdHJpZ2dlcik7XG4gICAgZm4oKTtcbiAgfVxuXG4gIC8vIGNoZWNrIGlmIGRvY3VtZW50IGlzIGFscmVhZHkgbG9hZGVkXG4gIGlmICh3aW5kb3cuZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgIHdpbmRvdy5zZXRUaW1lb3V0KGZuKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBXZSBjYW4gbm90IHVzZSBqcUxpdGUgc2luY2Ugd2UgYXJlIG5vdCBkb25lIGxvYWRpbmcgYW5kIGpRdWVyeSBjb3VsZCBiZSBsb2FkZWQgbGF0ZXIuXG5cbiAgICAvLyBXb3JrcyBmb3IgbW9kZXJuIGJyb3dzZXJzIGFuZCBJRTlcbiAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHRyaWdnZXIpO1xuXG4gICAgLy8gRmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCBmb3Igb3RoZXJzXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCB0cmlnZ2VyKTtcbiAgfVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEZ1bmN0aW9ucyB3aGljaCBhcmUgZGVjbGFyZWQgZGlyZWN0bHkuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbnZhciBKUUxpdGVQcm90b3R5cGUgPSBKUUxpdGUucHJvdG90eXBlID0ge1xuICByZWFkeToganFMaXRlUmVhZHksXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUgPSBbXTtcbiAgICBmb3JFYWNoKHRoaXMsIGZ1bmN0aW9uKGUpIHsgdmFsdWUucHVzaCgnJyArIGUpO30pO1xuICAgIHJldHVybiAnWycgKyB2YWx1ZS5qb2luKCcsICcpICsgJ10nO1xuICB9LFxuXG4gIGVxOiBmdW5jdGlvbihpbmRleCkge1xuICAgICAgcmV0dXJuIChpbmRleCA+PSAwKSA/IGpxTGl0ZSh0aGlzW2luZGV4XSkgOiBqcUxpdGUodGhpc1t0aGlzLmxlbmd0aCArIGluZGV4XSk7XG4gIH0sXG5cbiAgbGVuZ3RoOiAwLFxuICBwdXNoOiBwdXNoLFxuICBzb3J0OiBbXS5zb3J0LFxuICBzcGxpY2U6IFtdLnNwbGljZVxufTtcblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGdW5jdGlvbnMgaXRlcmF0aW5nIGdldHRlci9zZXR0ZXJzLlxuLy8gdGhlc2UgZnVuY3Rpb25zIHJldHVybiBzZWxmIG9uIHNldHRlciBhbmRcbi8vIHZhbHVlIG9uIGdldC5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xudmFyIEJPT0xFQU5fQVRUUiA9IHt9O1xuZm9yRWFjaCgnbXVsdGlwbGUsc2VsZWN0ZWQsY2hlY2tlZCxkaXNhYmxlZCxyZWFkT25seSxyZXF1aXJlZCxvcGVuJy5zcGxpdCgnLCcpLCBmdW5jdGlvbih2YWx1ZSkge1xuICBCT09MRUFOX0FUVFJbbG93ZXJjYXNlKHZhbHVlKV0gPSB2YWx1ZTtcbn0pO1xudmFyIEJPT0xFQU5fRUxFTUVOVFMgPSB7fTtcbmZvckVhY2goJ2lucHV0LHNlbGVjdCxvcHRpb24sdGV4dGFyZWEsYnV0dG9uLGZvcm0sZGV0YWlscycuc3BsaXQoJywnKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgQk9PTEVBTl9FTEVNRU5UU1t2YWx1ZV0gPSB0cnVlO1xufSk7XG52YXIgQUxJQVNFRF9BVFRSID0ge1xuICAnbmdNaW5sZW5ndGgnOiAnbWlubGVuZ3RoJyxcbiAgJ25nTWF4bGVuZ3RoJzogJ21heGxlbmd0aCcsXG4gICduZ01pbic6ICdtaW4nLFxuICAnbmdNYXgnOiAnbWF4JyxcbiAgJ25nUGF0dGVybic6ICdwYXR0ZXJuJyxcbiAgJ25nU3RlcCc6ICdzdGVwJ1xufTtcblxuZnVuY3Rpb24gZ2V0Qm9vbGVhbkF0dHJOYW1lKGVsZW1lbnQsIG5hbWUpIHtcbiAgLy8gY2hlY2sgZG9tIGxhc3Qgc2luY2Ugd2Ugd2lsbCBtb3N0IGxpa2VseSBmYWlsIG9uIG5hbWVcbiAgdmFyIGJvb2xlYW5BdHRyID0gQk9PTEVBTl9BVFRSW25hbWUudG9Mb3dlckNhc2UoKV07XG5cbiAgLy8gYm9vbGVhbkF0dHIgaXMgaGVyZSB0d2ljZSB0byBtaW5pbWl6ZSBET00gYWNjZXNzXG4gIHJldHVybiBib29sZWFuQXR0ciAmJiBCT09MRUFOX0VMRU1FTlRTW25vZGVOYW1lXyhlbGVtZW50KV0gJiYgYm9vbGVhbkF0dHI7XG59XG5cbmZ1bmN0aW9uIGdldEFsaWFzZWRBdHRyTmFtZShuYW1lKSB7XG4gIHJldHVybiBBTElBU0VEX0FUVFJbbmFtZV07XG59XG5cbmZvckVhY2goe1xuICBkYXRhOiBqcUxpdGVEYXRhLFxuICByZW1vdmVEYXRhOiBqcUxpdGVSZW1vdmVEYXRhLFxuICBoYXNEYXRhOiBqcUxpdGVIYXNEYXRhLFxuICBjbGVhbkRhdGE6IGZ1bmN0aW9uIGpxTGl0ZUNsZWFuRGF0YShub2Rlcykge1xuICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5vZGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgIGpxTGl0ZVJlbW92ZURhdGEobm9kZXNbaV0pO1xuICAgIH1cbiAgfVxufSwgZnVuY3Rpb24oZm4sIG5hbWUpIHtcbiAgSlFMaXRlW25hbWVdID0gZm47XG59KTtcblxuZm9yRWFjaCh7XG4gIGRhdGE6IGpxTGl0ZURhdGEsXG4gIGluaGVyaXRlZERhdGE6IGpxTGl0ZUluaGVyaXRlZERhdGEsXG5cbiAgc2NvcGU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAvLyBDYW4ndCB1c2UganFMaXRlRGF0YSBoZXJlIGRpcmVjdGx5IHNvIHdlIHN0YXkgY29tcGF0aWJsZSB3aXRoIGpRdWVyeSFcbiAgICByZXR1cm4ganFMaXRlLmRhdGEoZWxlbWVudCwgJyRzY29wZScpIHx8IGpxTGl0ZUluaGVyaXRlZERhdGEoZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQsIFsnJGlzb2xhdGVTY29wZScsICckc2NvcGUnXSk7XG4gIH0sXG5cbiAgaXNvbGF0ZVNjb3BlOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgLy8gQ2FuJ3QgdXNlIGpxTGl0ZURhdGEgaGVyZSBkaXJlY3RseSBzbyB3ZSBzdGF5IGNvbXBhdGlibGUgd2l0aCBqUXVlcnkhXG4gICAgcmV0dXJuIGpxTGl0ZS5kYXRhKGVsZW1lbnQsICckaXNvbGF0ZVNjb3BlJykgfHwganFMaXRlLmRhdGEoZWxlbWVudCwgJyRpc29sYXRlU2NvcGVOb1RlbXBsYXRlJyk7XG4gIH0sXG5cbiAgY29udHJvbGxlcjoganFMaXRlQ29udHJvbGxlcixcblxuICBpbmplY3RvcjogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBqcUxpdGVJbmhlcml0ZWREYXRhKGVsZW1lbnQsICckaW5qZWN0b3InKTtcbiAgfSxcblxuICByZW1vdmVBdHRyOiBmdW5jdGlvbihlbGVtZW50LCBuYW1lKSB7XG4gICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gIH0sXG5cbiAgaGFzQ2xhc3M6IGpxTGl0ZUhhc0NsYXNzLFxuXG4gIGNzczogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBuYW1lID0gY3NzS2ViYWJUb0NhbWVsKG5hbWUpO1xuXG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIGVsZW1lbnQuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVsZW1lbnQuc3R5bGVbbmFtZV07XG4gICAgfVxuICB9LFxuXG4gIGF0dHI6IGZ1bmN0aW9uKGVsZW1lbnQsIG5hbWUsIHZhbHVlKSB7XG4gICAgdmFyIHJldDtcbiAgICB2YXIgbm9kZVR5cGUgPSBlbGVtZW50Lm5vZGVUeXBlO1xuICAgIGlmIChub2RlVHlwZSA9PT0gTk9ERV9UWVBFX1RFWFQgfHwgbm9kZVR5cGUgPT09IE5PREVfVFlQRV9BVFRSSUJVVEUgfHwgbm9kZVR5cGUgPT09IE5PREVfVFlQRV9DT01NRU5UIHx8XG4gICAgICAhZWxlbWVudC5nZXRBdHRyaWJ1dGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbG93ZXJjYXNlZE5hbWUgPSBsb3dlcmNhc2UobmFtZSk7XG4gICAgdmFyIGlzQm9vbGVhbkF0dHIgPSBCT09MRUFOX0FUVFJbbG93ZXJjYXNlZE5hbWVdO1xuXG4gICAgaWYgKGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIC8vIHNldHRlclxuXG4gICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgKHZhbHVlID09PSBmYWxzZSAmJiBpc0Jvb2xlYW5BdHRyKSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIGlzQm9vbGVhbkF0dHIgPyBsb3dlcmNhc2VkTmFtZSA6IHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZ2V0dGVyXG5cbiAgICAgIHJldCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpO1xuXG4gICAgICBpZiAoaXNCb29sZWFuQXR0ciAmJiByZXQgIT09IG51bGwpIHtcbiAgICAgICAgcmV0ID0gbG93ZXJjYXNlZE5hbWU7XG4gICAgICB9XG4gICAgICAvLyBOb3JtYWxpemUgbm9uLWV4aXN0aW5nIGF0dHJpYnV0ZXMgdG8gdW5kZWZpbmVkIChhcyBqUXVlcnkpLlxuICAgICAgcmV0dXJuIHJldCA9PT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcbiAgICB9XG4gIH0sXG5cbiAgcHJvcDogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgZWxlbWVudFtuYW1lXSA9IHZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWxlbWVudFtuYW1lXTtcbiAgICB9XG4gIH0sXG5cbiAgdGV4dDogKGZ1bmN0aW9uKCkge1xuICAgIGdldFRleHQuJGR2ID0gJyc7XG4gICAgcmV0dXJuIGdldFRleHQ7XG5cbiAgICBmdW5jdGlvbiBnZXRUZXh0KGVsZW1lbnQsIHZhbHVlKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgIHZhciBub2RlVHlwZSA9IGVsZW1lbnQubm9kZVR5cGU7XG4gICAgICAgIHJldHVybiAobm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UIHx8IG5vZGVUeXBlID09PSBOT0RFX1RZUEVfVEVYVCkgPyBlbGVtZW50LnRleHRDb250ZW50IDogJyc7XG4gICAgICB9XG4gICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdmFsdWU7XG4gICAgfVxuICB9KSgpLFxuXG4gIHZhbDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICBpZiAoZWxlbWVudC5tdWx0aXBsZSAmJiBub2RlTmFtZV8oZWxlbWVudCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yRWFjaChlbGVtZW50Lm9wdGlvbnMsIGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG9wdGlvbi52YWx1ZSB8fCBvcHRpb24udGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbGVtZW50LnZhbHVlO1xuICAgIH1cbiAgICBlbGVtZW50LnZhbHVlID0gdmFsdWU7XG4gIH0sXG5cbiAgaHRtbDogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZWxlbWVudC5pbm5lckhUTUw7XG4gICAgfVxuICAgIGpxTGl0ZURlYWxvYyhlbGVtZW50LCB0cnVlKTtcbiAgICBlbGVtZW50LmlubmVySFRNTCA9IHZhbHVlO1xuICB9LFxuXG4gIGVtcHR5OiBqcUxpdGVFbXB0eVxufSwgZnVuY3Rpb24oZm4sIG5hbWUpIHtcbiAgLyoqXG4gICAqIFByb3BlcnRpZXM6IHdyaXRlcyByZXR1cm4gc2VsZWN0aW9uLCByZWFkcyByZXR1cm4gZmlyc3QgdmFsdWVcbiAgICovXG4gIEpRTGl0ZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhcmcxLCBhcmcyKSB7XG4gICAgdmFyIGksIGtleTtcbiAgICB2YXIgbm9kZUNvdW50ID0gdGhpcy5sZW5ndGg7XG5cbiAgICAvLyBqcUxpdGVIYXNDbGFzcyBoYXMgb25seSB0d28gYXJndW1lbnRzLCBidXQgaXMgYSBnZXR0ZXItb25seSBmbiwgc28gd2UgbmVlZCB0byBzcGVjaWFsLWNhc2UgaXRcbiAgICAvLyBpbiBhIHdheSB0aGF0IHN1cnZpdmVzIG1pbmlmaWNhdGlvbi5cbiAgICAvLyBqcUxpdGVFbXB0eSB0YWtlcyBubyBhcmd1bWVudHMgYnV0IGlzIGEgc2V0dGVyLlxuICAgIGlmIChmbiAhPT0ganFMaXRlRW1wdHkgJiZcbiAgICAgICAgKGlzVW5kZWZpbmVkKChmbi5sZW5ndGggPT09IDIgJiYgKGZuICE9PSBqcUxpdGVIYXNDbGFzcyAmJiBmbiAhPT0ganFMaXRlQ29udHJvbGxlcikpID8gYXJnMSA6IGFyZzIpKSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGFyZzEpKSB7XG5cbiAgICAgICAgLy8gd2UgYXJlIGEgd3JpdGUsIGJ1dCB0aGUgb2JqZWN0IHByb3BlcnRpZXMgYXJlIHRoZSBrZXkvdmFsdWVzXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBub2RlQ291bnQ7IGkrKykge1xuICAgICAgICAgIGlmIChmbiA9PT0ganFMaXRlRGF0YSkge1xuICAgICAgICAgICAgLy8gZGF0YSgpIHRha2VzIHRoZSB3aG9sZSBvYmplY3QgaW4galF1ZXJ5XG4gICAgICAgICAgICBmbih0aGlzW2ldLCBhcmcxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChrZXkgaW4gYXJnMSkge1xuICAgICAgICAgICAgICBmbih0aGlzW2ldLCBrZXksIGFyZzFba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHJldHVybiBzZWxmIGZvciBjaGFpbmluZ1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHdlIGFyZSBhIHJlYWQsIHNvIHJlYWQgdGhlIGZpcnN0IGNoaWxkLlxuICAgICAgICAvLyBUT0RPOiBkbyB3ZSBzdGlsbCBuZWVkIHRoaXM/XG4gICAgICAgIHZhciB2YWx1ZSA9IGZuLiRkdjtcbiAgICAgICAgLy8gT25seSBpZiB3ZSBoYXZlICRkdiBkbyB3ZSBpdGVyYXRlIG92ZXIgYWxsLCBvdGhlcndpc2UgaXQgaXMganVzdCB0aGUgZmlyc3QgZWxlbWVudC5cbiAgICAgICAgdmFyIGpqID0gKGlzVW5kZWZpbmVkKHZhbHVlKSkgPyBNYXRoLm1pbihub2RlQ291bnQsIDEpIDogbm9kZUNvdW50O1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICB2YXIgbm9kZVZhbHVlID0gZm4odGhpc1tqXSwgYXJnMSwgYXJnMik7XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZSA/IHZhbHVlICsgbm9kZVZhbHVlIDogbm9kZVZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gd2UgYXJlIGEgd3JpdGUsIHNvIGFwcGx5IHRvIGFsbCBjaGlsZHJlblxuICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGVDb3VudDsgaSsrKSB7XG4gICAgICAgIGZuKHRoaXNbaV0sIGFyZzEsIGFyZzIpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHNlbGYgZm9yIGNoYWluaW5nXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH07XG59KTtcblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50cykge1xuICB2YXIgZXZlbnRIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQsIHR5cGUpIHtcbiAgICAvLyBqUXVlcnkgc3BlY2lmaWMgYXBpXG4gICAgZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXZlbnQuZGVmYXVsdFByZXZlbnRlZDtcbiAgICB9O1xuXG4gICAgdmFyIGV2ZW50Rm5zID0gZXZlbnRzW3R5cGUgfHwgZXZlbnQudHlwZV07XG4gICAgdmFyIGV2ZW50Rm5zTGVuZ3RoID0gZXZlbnRGbnMgPyBldmVudEZucy5sZW5ndGggOiAwO1xuXG4gICAgaWYgKCFldmVudEZuc0xlbmd0aCkgcmV0dXJuO1xuXG4gICAgaWYgKGlzVW5kZWZpbmVkKGV2ZW50LmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCkpIHtcbiAgICAgIHZhciBvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjtcbiAgICAgIGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBldmVudC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChldmVudC5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcmlnaW5hbFN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbikge1xuICAgICAgICAgIG9yaWdpbmFsU3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uLmNhbGwoZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIGV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZXZlbnQuaW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID09PSB0cnVlO1xuICAgIH07XG5cbiAgICAvLyBTb21lIGV2ZW50cyBoYXZlIHNwZWNpYWwgaGFuZGxlcnMgdGhhdCB3cmFwIHRoZSByZWFsIGhhbmRsZXJcbiAgICB2YXIgaGFuZGxlcldyYXBwZXIgPSBldmVudEZucy5zcGVjaWFsSGFuZGxlcldyYXBwZXIgfHwgZGVmYXVsdEhhbmRsZXJXcmFwcGVyO1xuXG4gICAgLy8gQ29weSBldmVudCBoYW5kbGVycyBpbiBjYXNlIGV2ZW50IGhhbmRsZXJzIGFycmF5IGlzIG1vZGlmaWVkIGR1cmluZyBleGVjdXRpb24uXG4gICAgaWYgKChldmVudEZuc0xlbmd0aCA+IDEpKSB7XG4gICAgICBldmVudEZucyA9IHNoYWxsb3dDb3B5KGV2ZW50Rm5zKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV2ZW50Rm5zTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICBoYW5kbGVyV3JhcHBlcihlbGVtZW50LCBldmVudCwgZXZlbnRGbnNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvLyBUT0RPOiB0aGlzIGlzIGEgaGFjayBmb3IgYW5ndWxhck1vY2tzL2NsZWFyRGF0YUNhY2hlIHRoYXQgbWFrZXMgaXQgcG9zc2libGUgdG8gZGVyZWdpc3RlciBhbGxcbiAgLy8gICAgICAgZXZlbnRzIG9uIGBlbGVtZW50YFxuICBldmVudEhhbmRsZXIuZWxlbSA9IGVsZW1lbnQ7XG4gIHJldHVybiBldmVudEhhbmRsZXI7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRIYW5kbGVyV3JhcHBlcihlbGVtZW50LCBldmVudCwgaGFuZGxlcikge1xuICBoYW5kbGVyLmNhbGwoZWxlbWVudCwgZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBzcGVjaWFsTW91c2VIYW5kbGVyV3JhcHBlcih0YXJnZXQsIGV2ZW50LCBoYW5kbGVyKSB7XG4gIC8vIFJlZmVyIHRvIGpRdWVyeSdzIGltcGxlbWVudGF0aW9uIG9mIG1vdXNlZW50ZXIgJiBtb3VzZWxlYXZlXG4gIC8vIFJlYWQgYWJvdXQgbW91c2VlbnRlciBhbmQgbW91c2VsZWF2ZTpcbiAgLy8gaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfbW91c2UuaHRtbCNsaW5rOFxuICB2YXIgcmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gIC8vIEZvciBtb3VzZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cbiAgLy8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcbiAgaWYgKCFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpxTGl0ZUNvbnRhaW5zLmNhbGwodGFyZ2V0LCByZWxhdGVkKSkpIHtcbiAgICBoYW5kbGVyLmNhbGwodGFyZ2V0LCBldmVudCk7XG4gIH1cbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBGdW5jdGlvbnMgaXRlcmF0aW5nIHRyYXZlcnNhbC5cbi8vIFRoZXNlIGZ1bmN0aW9ucyBjaGFpbiByZXN1bHRzIGludG8gYSBzaW5nbGVcbi8vIHNlbGVjdG9yLlxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5mb3JFYWNoKHtcbiAgcmVtb3ZlRGF0YToganFMaXRlUmVtb3ZlRGF0YSxcblxuICBvbjogZnVuY3Rpb24ganFMaXRlT24oZWxlbWVudCwgdHlwZSwgZm4sIHVuc3VwcG9ydGVkKSB7XG4gICAgaWYgKGlzRGVmaW5lZCh1bnN1cHBvcnRlZCkpIHRocm93IGpxTGl0ZU1pbkVycignb25hcmdzJywgJ2pxTGl0ZSNvbigpIGRvZXMgbm90IHN1cHBvcnQgdGhlIGBzZWxlY3RvcmAgb3IgYGV2ZW50RGF0YWAgcGFyYW1ldGVycycpO1xuXG4gICAgLy8gRG8gbm90IGFkZCBldmVudCBoYW5kbGVycyB0byBub24tZWxlbWVudHMgYmVjYXVzZSB0aGV5IHdpbGwgbm90IGJlIGNsZWFuZWQgdXAuXG4gICAgaWYgKCFqcUxpdGVBY2NlcHRzRGF0YShlbGVtZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCwgdHJ1ZSk7XG4gICAgdmFyIGV2ZW50cyA9IGV4cGFuZG9TdG9yZS5ldmVudHM7XG4gICAgdmFyIGhhbmRsZSA9IGV4cGFuZG9TdG9yZS5oYW5kbGU7XG5cbiAgICBpZiAoIWhhbmRsZSkge1xuICAgICAgaGFuZGxlID0gZXhwYW5kb1N0b3JlLmhhbmRsZSA9IGNyZWF0ZUV2ZW50SGFuZGxlcihlbGVtZW50LCBldmVudHMpO1xuICAgIH1cblxuICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL3N0cmluZy1pbmRleG9mLXZzLXNwbGl0XG4gICAgdmFyIHR5cGVzID0gdHlwZS5pbmRleE9mKCcgJykgPj0gMCA/IHR5cGUuc3BsaXQoJyAnKSA6IFt0eXBlXTtcbiAgICB2YXIgaSA9IHR5cGVzLmxlbmd0aDtcblxuICAgIHZhciBhZGRIYW5kbGVyID0gZnVuY3Rpb24odHlwZSwgc3BlY2lhbEhhbmRsZXJXcmFwcGVyLCBub0V2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHZhciBldmVudEZucyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKCFldmVudEZucykge1xuICAgICAgICBldmVudEZucyA9IGV2ZW50c1t0eXBlXSA9IFtdO1xuICAgICAgICBldmVudEZucy5zcGVjaWFsSGFuZGxlcldyYXBwZXIgPSBzcGVjaWFsSGFuZGxlcldyYXBwZXI7XG4gICAgICAgIGlmICh0eXBlICE9PSAnJGRlc3Ryb3knICYmICFub0V2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBldmVudEZucy5wdXNoKGZuKTtcbiAgICB9O1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdHlwZSA9IHR5cGVzW2ldO1xuICAgICAgaWYgKE1PVVNFX0VWRU5UX01BUFt0eXBlXSkge1xuICAgICAgICBhZGRIYW5kbGVyKE1PVVNFX0VWRU5UX01BUFt0eXBlXSwgc3BlY2lhbE1vdXNlSGFuZGxlcldyYXBwZXIpO1xuICAgICAgICBhZGRIYW5kbGVyKHR5cGUsIHVuZGVmaW5lZCwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhZGRIYW5kbGVyKHR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBvZmY6IGpxTGl0ZU9mZixcblxuICBvbmU6IGZ1bmN0aW9uKGVsZW1lbnQsIHR5cGUsIGZuKSB7XG4gICAgZWxlbWVudCA9IGpxTGl0ZShlbGVtZW50KTtcblxuICAgIC8vYWRkIHRoZSBsaXN0ZW5lciB0d2ljZSBzbyB0aGF0IHdoZW4gaXQgaXMgY2FsbGVkXG4gICAgLy95b3UgY2FuIHJlbW92ZSB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gYW5kIHN0aWxsIGJlXG4gICAgLy9hYmxlIHRvIGNhbGwgZWxlbWVudC5vZmYoZXYsIGZuKSBub3JtYWxseVxuICAgIGVsZW1lbnQub24odHlwZSwgZnVuY3Rpb24gb25GbigpIHtcbiAgICAgIGVsZW1lbnQub2ZmKHR5cGUsIGZuKTtcbiAgICAgIGVsZW1lbnQub2ZmKHR5cGUsIG9uRm4pO1xuICAgIH0pO1xuICAgIGVsZW1lbnQub24odHlwZSwgZm4pO1xuICB9LFxuXG4gIHJlcGxhY2VXaXRoOiBmdW5jdGlvbihlbGVtZW50LCByZXBsYWNlTm9kZSkge1xuICAgIHZhciBpbmRleCwgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGpxTGl0ZURlYWxvYyhlbGVtZW50KTtcbiAgICBmb3JFYWNoKG5ldyBKUUxpdGUocmVwbGFjZU5vZGUpLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICBpZiAoaW5kZXgpIHtcbiAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBpbmRleC5uZXh0U2libGluZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnQucmVwbGFjZUNoaWxkKG5vZGUsIGVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgaW5kZXggPSBub2RlO1xuICAgIH0pO1xuICB9LFxuXG4gIGNoaWxkcmVuOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgZm9yRWFjaChlbGVtZW50LmNoaWxkTm9kZXMsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09PSBOT0RFX1RZUEVfRUxFTUVOVCkge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfSxcblxuICBjb250ZW50czogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgIHJldHVybiBlbGVtZW50LmNvbnRlbnREb2N1bWVudCB8fCBlbGVtZW50LmNoaWxkTm9kZXMgfHwgW107XG4gIH0sXG5cbiAgYXBwZW5kOiBmdW5jdGlvbihlbGVtZW50LCBub2RlKSB7XG4gICAgdmFyIG5vZGVUeXBlID0gZWxlbWVudC5ub2RlVHlwZTtcbiAgICBpZiAobm9kZVR5cGUgIT09IE5PREVfVFlQRV9FTEVNRU5UICYmIG5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRE9DVU1FTlRfRlJBR01FTlQpIHJldHVybjtcblxuICAgIG5vZGUgPSBuZXcgSlFMaXRlKG5vZGUpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbm9kZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBub2RlW2ldO1xuICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgfVxuICB9LFxuXG4gIHByZXBlbmQ6IGZ1bmN0aW9uKGVsZW1lbnQsIG5vZGUpIHtcbiAgICBpZiAoZWxlbWVudC5ub2RlVHlwZSA9PT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgIHZhciBpbmRleCA9IGVsZW1lbnQuZmlyc3RDaGlsZDtcbiAgICAgIGZvckVhY2gobmV3IEpRTGl0ZShub2RlKSwgZnVuY3Rpb24oY2hpbGQpIHtcbiAgICAgICAgZWxlbWVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIGluZGV4KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcblxuICB3cmFwOiBmdW5jdGlvbihlbGVtZW50LCB3cmFwTm9kZSkge1xuICAgIGpxTGl0ZVdyYXBOb2RlKGVsZW1lbnQsIGpxTGl0ZSh3cmFwTm9kZSkuZXEoMCkuY2xvbmUoKVswXSk7XG4gIH0sXG5cbiAgcmVtb3ZlOiBqcUxpdGVSZW1vdmUsXG5cbiAgZGV0YWNoOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAganFMaXRlUmVtb3ZlKGVsZW1lbnQsIHRydWUpO1xuICB9LFxuXG4gIGFmdGVyOiBmdW5jdGlvbihlbGVtZW50LCBuZXdFbGVtZW50KSB7XG4gICAgdmFyIGluZGV4ID0gZWxlbWVudCwgcGFyZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xuXG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgbmV3RWxlbWVudCA9IG5ldyBKUUxpdGUobmV3RWxlbWVudCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG5ld0VsZW1lbnQubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICB2YXIgbm9kZSA9IG5ld0VsZW1lbnRbaV07XG4gICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobm9kZSwgaW5kZXgubmV4dFNpYmxpbmcpO1xuICAgICAgICBpbmRleCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGFkZENsYXNzOiBqcUxpdGVBZGRDbGFzcyxcbiAgcmVtb3ZlQ2xhc3M6IGpxTGl0ZVJlbW92ZUNsYXNzLFxuXG4gIHRvZ2dsZUNsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBzZWxlY3RvciwgY29uZGl0aW9uKSB7XG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBmb3JFYWNoKHNlbGVjdG9yLnNwbGl0KCcgJyksIGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgICAgICB2YXIgY2xhc3NDb25kaXRpb24gPSBjb25kaXRpb247XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChjbGFzc0NvbmRpdGlvbikpIHtcbiAgICAgICAgICBjbGFzc0NvbmRpdGlvbiA9ICFqcUxpdGVIYXNDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIChjbGFzc0NvbmRpdGlvbiA/IGpxTGl0ZUFkZENsYXNzIDoganFMaXRlUmVtb3ZlQ2xhc3MpKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG5cbiAgcGFyZW50OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgdmFyIHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICByZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0RPQ1VNRU5UX0ZSQUdNRU5UID8gcGFyZW50IDogbnVsbDtcbiAgfSxcblxuICBuZXh0OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nO1xuICB9LFxuXG4gIGZpbmQ6IGZ1bmN0aW9uKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgaWYgKGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUpIHtcbiAgICAgIHJldHVybiBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHNlbGVjdG9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfSxcblxuICBjbG9uZToganFMaXRlQ2xvbmUsXG5cbiAgdHJpZ2dlckhhbmRsZXI6IGZ1bmN0aW9uKGVsZW1lbnQsIGV2ZW50LCBleHRyYVBhcmFtZXRlcnMpIHtcblxuICAgIHZhciBkdW1teUV2ZW50LCBldmVudEZuc0NvcHksIGhhbmRsZXJBcmdzO1xuICAgIHZhciBldmVudE5hbWUgPSBldmVudC50eXBlIHx8IGV2ZW50O1xuICAgIHZhciBleHBhbmRvU3RvcmUgPSBqcUxpdGVFeHBhbmRvU3RvcmUoZWxlbWVudCk7XG4gICAgdmFyIGV2ZW50cyA9IGV4cGFuZG9TdG9yZSAmJiBleHBhbmRvU3RvcmUuZXZlbnRzO1xuICAgIHZhciBldmVudEZucyA9IGV2ZW50cyAmJiBldmVudHNbZXZlbnROYW1lXTtcblxuICAgIGlmIChldmVudEZucykge1xuICAgICAgLy8gQ3JlYXRlIGEgZHVtbXkgZXZlbnQgdG8gcGFzcyB0byB0aGUgaGFuZGxlcnNcbiAgICAgIGR1bW15RXZlbnQgPSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHsgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTsgfSxcbiAgICAgICAgaXNEZWZhdWx0UHJldmVudGVkOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdHJ1ZTsgfSxcbiAgICAgICAgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHsgdGhpcy5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlOyB9LFxuICAgICAgICBpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzLmltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9PT0gdHJ1ZTsgfSxcbiAgICAgICAgc3RvcFByb3BhZ2F0aW9uOiBub29wLFxuICAgICAgICB0eXBlOiBldmVudE5hbWUsXG4gICAgICAgIHRhcmdldDogZWxlbWVudFxuICAgICAgfTtcblxuICAgICAgLy8gSWYgYSBjdXN0b20gZXZlbnQgd2FzIHByb3ZpZGVkIHRoZW4gZXh0ZW5kIG91ciBkdW1teSBldmVudCB3aXRoIGl0XG4gICAgICBpZiAoZXZlbnQudHlwZSkge1xuICAgICAgICBkdW1teUV2ZW50ID0gZXh0ZW5kKGR1bW15RXZlbnQsIGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gQ29weSBldmVudCBoYW5kbGVycyBpbiBjYXNlIGV2ZW50IGhhbmRsZXJzIGFycmF5IGlzIG1vZGlmaWVkIGR1cmluZyBleGVjdXRpb24uXG4gICAgICBldmVudEZuc0NvcHkgPSBzaGFsbG93Q29weShldmVudEZucyk7XG4gICAgICBoYW5kbGVyQXJncyA9IGV4dHJhUGFyYW1ldGVycyA/IFtkdW1teUV2ZW50XS5jb25jYXQoZXh0cmFQYXJhbWV0ZXJzKSA6IFtkdW1teUV2ZW50XTtcblxuICAgICAgZm9yRWFjaChldmVudEZuc0NvcHksIGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgIGlmICghZHVtbXlFdmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpKSB7XG4gICAgICAgICAgZm4uYXBwbHkoZWxlbWVudCwgaGFuZGxlckFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn0sIGZ1bmN0aW9uKGZuLCBuYW1lKSB7XG4gIC8qKlxuICAgKiBjaGFpbmluZyBmdW5jdGlvbnNcbiAgICovXG4gIEpRTGl0ZS5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgdmFyIHZhbHVlO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGlpID0gdGhpcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gZm4odGhpc1tpXSwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgLy8gYW55IGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSB2YWx1ZSBuZWVkcyB0byBiZSB3cmFwcGVkXG4gICAgICAgICAgdmFsdWUgPSBqcUxpdGUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBqcUxpdGVBZGROb2Rlcyh2YWx1ZSwgZm4odGhpc1tpXSwgYXJnMSwgYXJnMiwgYXJnMykpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaXNEZWZpbmVkKHZhbHVlKSA/IHZhbHVlIDogdGhpcztcbiAgfTtcbn0pO1xuXG4vLyBiaW5kIGxlZ2FjeSBiaW5kL3VuYmluZCB0byBvbi9vZmZcbkpRTGl0ZS5wcm90b3R5cGUuYmluZCA9IEpRTGl0ZS5wcm90b3R5cGUub247XG5KUUxpdGUucHJvdG90eXBlLnVuYmluZCA9IEpRTGl0ZS5wcm90b3R5cGUub2ZmO1xuXG5cbi8vIFByb3ZpZGVyIGZvciBwcml2YXRlICQkanFMaXRlIHNlcnZpY2Vcbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJCRqcUxpdGVQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24gJCRqcUxpdGUoKSB7XG4gICAgcmV0dXJuIGV4dGVuZChKUUxpdGUsIHtcbiAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbihub2RlLCBjbGFzc2VzKSB7XG4gICAgICAgIGlmIChub2RlLmF0dHIpIG5vZGUgPSBub2RlWzBdO1xuICAgICAgICByZXR1cm4ganFMaXRlSGFzQ2xhc3Mobm9kZSwgY2xhc3Nlcyk7XG4gICAgICB9LFxuICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uKG5vZGUsIGNsYXNzZXMpIHtcbiAgICAgICAgaWYgKG5vZGUuYXR0cikgbm9kZSA9IG5vZGVbMF07XG4gICAgICAgIHJldHVybiBqcUxpdGVBZGRDbGFzcyhub2RlLCBjbGFzc2VzKTtcbiAgICAgIH0sXG4gICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24obm9kZSwgY2xhc3Nlcykge1xuICAgICAgICBpZiAobm9kZS5hdHRyKSBub2RlID0gbm9kZVswXTtcbiAgICAgICAgcmV0dXJuIGpxTGl0ZVJlbW92ZUNsYXNzKG5vZGUsIGNsYXNzZXMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xufVxuXG4vKipcbiAqIENvbXB1dGVzIGEgaGFzaCBvZiBhbiAnb2JqJy5cbiAqIEhhc2ggb2YgYTpcbiAqICBzdHJpbmcgaXMgc3RyaW5nXG4gKiAgbnVtYmVyIGlzIG51bWJlciBhcyBzdHJpbmdcbiAqICBvYmplY3QgaXMgZWl0aGVyIHJlc3VsdCBvZiBjYWxsaW5nICQkaGFzaEtleSBmdW5jdGlvbiBvbiB0aGUgb2JqZWN0IG9yIHVuaXF1ZWx5IGdlbmVyYXRlZCBpZCxcbiAqICAgICAgICAgdGhhdCBpcyBhbHNvIGFzc2lnbmVkIHRvIHRoZSAkJGhhc2hLZXkgcHJvcGVydHkgb2YgdGhlIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gb2JqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBoYXNoIHN0cmluZyBzdWNoIHRoYXQgdGhlIHNhbWUgaW5wdXQgd2lsbCBoYXZlIHRoZSBzYW1lIGhhc2ggc3RyaW5nLlxuICogICAgICAgICBUaGUgcmVzdWx0aW5nIHN0cmluZyBrZXkgaXMgaW4gJ3R5cGU6aGFzaEtleScgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBoYXNoS2V5KG9iaiwgbmV4dFVpZEZuKSB7XG4gIHZhciBrZXkgPSBvYmogJiYgb2JqLiQkaGFzaEtleTtcblxuICBpZiAoa2V5KSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGtleSA9IG9iai4kJGhhc2hLZXkoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfVxuXG4gIHZhciBvYmpUeXBlID0gdHlwZW9mIG9iajtcbiAgaWYgKG9ialR5cGUgPT09ICdmdW5jdGlvbicgfHwgKG9ialR5cGUgPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbCkpIHtcbiAgICBrZXkgPSBvYmouJCRoYXNoS2V5ID0gb2JqVHlwZSArICc6JyArIChuZXh0VWlkRm4gfHwgbmV4dFVpZCkoKTtcbiAgfSBlbHNlIHtcbiAgICBrZXkgPSBvYmpUeXBlICsgJzonICsgb2JqO1xuICB9XG5cbiAgcmV0dXJuIGtleTtcbn1cblxuLy8gQSBtaW5pbWFsIEVTMjAxNSBNYXAgaW1wbGVtZW50YXRpb24uXG4vLyBTaG91bGQgYmUgYnVnL2ZlYXR1cmUgZXF1aXZhbGVudCB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9ucyBvZiBzdXBwb3J0ZWQgYnJvd3NlcnNcbi8vIChmb3IgdGhlIGZlYXR1cmVzIHJlcXVpcmVkIGluIEFuZ3VsYXIpLlxuLy8gU2VlIGh0dHBzOi8va2FuZ2F4LmdpdGh1Yi5pby9jb21wYXQtdGFibGUvZXM2LyN0ZXN0LU1hcFxudmFyIG5hbktleSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBOZ01hcFNoaW0oKSB7XG4gIHRoaXMuX2tleXMgPSBbXTtcbiAgdGhpcy5fdmFsdWVzID0gW107XG4gIHRoaXMuX2xhc3RLZXkgPSBOYU47XG4gIHRoaXMuX2xhc3RJbmRleCA9IC0xO1xufVxuTmdNYXBTaGltLnByb3RvdHlwZSA9IHtcbiAgX2lkeDogZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGtleSA9PT0gdGhpcy5fbGFzdEtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2xhc3RJbmRleDtcbiAgICB9XG4gICAgdGhpcy5fbGFzdEtleSA9IGtleTtcbiAgICB0aGlzLl9sYXN0SW5kZXggPSB0aGlzLl9rZXlzLmluZGV4T2Yoa2V5KTtcbiAgICByZXR1cm4gdGhpcy5fbGFzdEluZGV4O1xuICB9LFxuICBfdHJhbnNmb3JtS2V5OiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gaXNOdW1iZXJOYU4oa2V5KSA/IG5hbktleSA6IGtleTtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICBrZXkgPSB0aGlzLl90cmFuc2Zvcm1LZXkoa2V5KTtcbiAgICB2YXIgaWR4ID0gdGhpcy5faWR4KGtleSk7XG4gICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgIHJldHVybiB0aGlzLl92YWx1ZXNbaWR4XTtcbiAgICB9XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgIGtleSA9IHRoaXMuX3RyYW5zZm9ybUtleShrZXkpO1xuICAgIHZhciBpZHggPSB0aGlzLl9pZHgoa2V5KTtcbiAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgaWR4ID0gdGhpcy5fbGFzdEluZGV4ID0gdGhpcy5fa2V5cy5sZW5ndGg7XG4gICAgfVxuICAgIHRoaXMuX2tleXNbaWR4XSA9IGtleTtcbiAgICB0aGlzLl92YWx1ZXNbaWR4XSA9IHZhbHVlO1xuXG4gICAgLy8gU3VwcG9ydDogSUUxMVxuICAgIC8vIERvIG5vdCBgcmV0dXJuIHRoaXNgIHRvIHNpbXVsYXRlIHRoZSBwYXJ0aWFsIElFMTEgaW1wbGVtZW50YXRpb25cbiAgfSxcbiAgZGVsZXRlOiBmdW5jdGlvbihrZXkpIHtcbiAgICBrZXkgPSB0aGlzLl90cmFuc2Zvcm1LZXkoa2V5KTtcbiAgICB2YXIgaWR4ID0gdGhpcy5faWR4KGtleSk7XG4gICAgaWYgKGlkeCA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdGhpcy5fa2V5cy5zcGxpY2UoaWR4LCAxKTtcbiAgICB0aGlzLl92YWx1ZXMuc3BsaWNlKGlkeCwgMSk7XG4gICAgdGhpcy5fbGFzdEtleSA9IE5hTjtcbiAgICB0aGlzLl9sYXN0SW5kZXggPSAtMTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuLy8gRm9yIG5vdywgYWx3YXlzIHVzZSBgTmdNYXBTaGltYCwgZXZlbiBpZiBgd2luZG93Lk1hcGAgaXMgYXZhaWxhYmxlLiBTb21lIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnNcbi8vIGFyZSBzdGlsbCBidWdneSAob2Z0ZW4gaW4gc3VidGxlIHdheXMpIGFuZCBjYW4gY2F1c2UgaGFyZC10by1kZWJ1ZyBmYWlsdXJlcy4gV2hlbiBuYXRpdmUgYE1hcGBcbi8vIGltcGxlbWVudGF0aW9ucyBnZXQgbW9yZSBzdGFibGUsIHdlIGNhbiByZWNvbnNpZGVyIHN3aXRjaGluZyB0byBgd2luZG93Lk1hcGAgKHdoZW4gYXZhaWxhYmxlKS5cbnZhciBOZ01hcCA9IE5nTWFwU2hpbTtcblxudmFyICQkTWFwUHJvdmlkZXIgPSBbLyoqIEB0aGlzICovZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IFtmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gTmdNYXA7XG4gIH1dO1xufV07XG5cbi8qKlxuICogQG5nZG9jIGZ1bmN0aW9uXG4gKiBAbW9kdWxlIG5nXG4gKiBAbmFtZSBhbmd1bGFyLmluamVjdG9yXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ3JlYXRlcyBhbiBpbmplY3RvciBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBmb3IgcmV0cmlldmluZyBzZXJ2aWNlcyBhcyB3ZWxsIGFzIGZvclxuICogZGVwZW5kZW5jeSBpbmplY3Rpb24gKHNlZSB7QGxpbmsgZ3VpZGUvZGkgZGVwZW5kZW5jeSBpbmplY3Rpb259KS5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBtb2R1bGVzIEEgbGlzdCBvZiBtb2R1bGUgZnVuY3Rpb25zIG9yIHRoZWlyIGFsaWFzZXMuIFNlZVxuICogICAgIHtAbGluayBhbmd1bGFyLm1vZHVsZX0uIFRoZSBgbmdgIG1vZHVsZSBtdXN0IGJlIGV4cGxpY2l0bHkgYWRkZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBbc3RyaWN0RGk9ZmFsc2VdIFdoZXRoZXIgdGhlIGluamVjdG9yIHNob3VsZCBiZSBpbiBzdHJpY3QgbW9kZSwgd2hpY2hcbiAqICAgICBkaXNhbGxvd3MgYXJndW1lbnQgbmFtZSBhbm5vdGF0aW9uIGluZmVyZW5jZS5cbiAqIEByZXR1cm5zIHtpbmplY3Rvcn0gSW5qZWN0b3Igb2JqZWN0LiBTZWUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0uXG4gKlxuICogQGV4YW1wbGVcbiAqIFR5cGljYWwgdXNhZ2VcbiAqIGBgYGpzXG4gKiAgIC8vIGNyZWF0ZSBhbiBpbmplY3RvclxuICogICB2YXIgJGluamVjdG9yID0gYW5ndWxhci5pbmplY3RvcihbJ25nJ10pO1xuICpcbiAqICAgLy8gdXNlIHRoZSBpbmplY3RvciB0byBraWNrIG9mZiB5b3VyIGFwcGxpY2F0aW9uXG4gKiAgIC8vIHVzZSB0aGUgdHlwZSBpbmZlcmVuY2UgdG8gYXV0byBpbmplY3QgYXJndW1lbnRzLCBvciB1c2UgaW1wbGljaXQgaW5qZWN0aW9uXG4gKiAgICRpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJHJvb3RTY29wZSwgJGNvbXBpbGUsICRkb2N1bWVudCkge1xuICogICAgICRjb21waWxlKCRkb2N1bWVudCkoJHJvb3RTY29wZSk7XG4gKiAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogU29tZXRpbWVzIHlvdSB3YW50IHRvIGdldCBhY2Nlc3MgdG8gdGhlIGluamVjdG9yIG9mIGEgY3VycmVudGx5IHJ1bm5pbmcgQW5ndWxhciBhcHBcbiAqIGZyb20gb3V0c2lkZSBBbmd1bGFyLiBQZXJoYXBzLCB5b3Ugd2FudCB0byBpbmplY3QgYW5kIGNvbXBpbGUgc29tZSBtYXJrdXAgYWZ0ZXIgdGhlXG4gKiBhcHBsaWNhdGlvbiBoYXMgYmVlbiBib290c3RyYXBwZWQuIFlvdSBjYW4gZG8gdGhpcyB1c2luZyB0aGUgZXh0cmEgYGluamVjdG9yKClgIGFkZGVkXG4gKiB0byBKUXVlcnkvanFMaXRlIGVsZW1lbnRzLiBTZWUge0BsaW5rIGFuZ3VsYXIuZWxlbWVudH0uXG4gKlxuICogKlRoaXMgaXMgZmFpcmx5IHJhcmUgYnV0IGNvdWxkIGJlIHRoZSBjYXNlIGlmIGEgdGhpcmQgcGFydHkgbGlicmFyeSBpcyBpbmplY3RpbmcgdGhlXG4gKiBtYXJrdXAuKlxuICpcbiAqIEluIHRoZSBmb2xsb3dpbmcgZXhhbXBsZSBhIG5ldyBibG9jayBvZiBIVE1MIGNvbnRhaW5pbmcgYSBgbmctY29udHJvbGxlcmBcbiAqIGRpcmVjdGl2ZSBpcyBhZGRlZCB0byB0aGUgZW5kIG9mIHRoZSBkb2N1bWVudCBib2R5IGJ5IEpRdWVyeS4gV2UgdGhlbiBjb21waWxlIGFuZCBsaW5rXG4gKiBpdCBpbnRvIHRoZSBjdXJyZW50IEFuZ3VsYXJKUyBzY29wZS5cbiAqXG4gKiBgYGBqc1xuICogdmFyICRkaXYgPSAkKCc8ZGl2IG5nLWNvbnRyb2xsZXI9XCJNeUN0cmxcIj57e2NvbnRlbnQubGFiZWx9fTwvZGl2PicpO1xuICogJChkb2N1bWVudC5ib2R5KS5hcHBlbmQoJGRpdik7XG4gKlxuICogYW5ndWxhci5lbGVtZW50KGRvY3VtZW50KS5pbmplY3RvcigpLmludm9rZShmdW5jdGlvbigkY29tcGlsZSkge1xuICogICB2YXIgc2NvcGUgPSBhbmd1bGFyLmVsZW1lbnQoJGRpdikuc2NvcGUoKTtcbiAqICAgJGNvbXBpbGUoJGRpdikoc2NvcGUpO1xuICogfSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1vZHVsZVxuICogQG5hbWUgYXV0b1xuICogQGluc3RhbGxhdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogSW1wbGljaXQgbW9kdWxlIHdoaWNoIGdldHMgYXV0b21hdGljYWxseSBhZGRlZCB0byBlYWNoIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LlxuICovXG5cbnZhciBBUlJPV19BUkcgPSAvXihbXihdKz8pPT4vO1xudmFyIEZOX0FSR1MgPSAvXlteKF0qXFwoXFxzKihbXildKilcXCkvbTtcbnZhciBGTl9BUkdfU1BMSVQgPSAvLC87XG52YXIgRk5fQVJHID0gL15cXHMqKF8/KShcXFMrPylcXDFcXHMqJC87XG52YXIgU1RSSVBfQ09NTUVOVFMgPSAvKChcXC9cXC8uKiQpfChcXC9cXCpbXFxzXFxTXSo/XFwqXFwvKSkvbWc7XG52YXIgJGluamVjdG9yTWluRXJyID0gbWluRXJyKCckaW5qZWN0b3InKTtcblxuZnVuY3Rpb24gc3RyaW5naWZ5Rm4oZm4pIHtcbiAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGZuKTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdEFyZ3MoZm4pIHtcbiAgdmFyIGZuVGV4dCA9IHN0cmluZ2lmeUZuKGZuKS5yZXBsYWNlKFNUUklQX0NPTU1FTlRTLCAnJyksXG4gICAgICBhcmdzID0gZm5UZXh0Lm1hdGNoKEFSUk9XX0FSRykgfHwgZm5UZXh0Lm1hdGNoKEZOX0FSR1MpO1xuICByZXR1cm4gYXJncztcbn1cblxuZnVuY3Rpb24gYW5vbkZuKGZuKSB7XG4gIC8vIEZvciBhbm9ueW1vdXMgZnVuY3Rpb25zLCBzaG93aW5nIGF0IHRoZSB2ZXJ5IGxlYXN0IHRoZSBmdW5jdGlvbiBzaWduYXR1cmUgY2FuIGhlbHAgaW5cbiAgLy8gZGVidWdnaW5nLlxuICB2YXIgYXJncyA9IGV4dHJhY3RBcmdzKGZuKTtcbiAgaWYgKGFyZ3MpIHtcbiAgICByZXR1cm4gJ2Z1bmN0aW9uKCcgKyAoYXJnc1sxXSB8fCAnJykucmVwbGFjZSgvW1xcc1xcclxcbl0rLywgJyAnKSArICcpJztcbiAgfVxuICByZXR1cm4gJ2ZuJztcbn1cblxuZnVuY3Rpb24gYW5ub3RhdGUoZm4sIHN0cmljdERpLCBuYW1lKSB7XG4gIHZhciAkaW5qZWN0LFxuICAgICAgYXJnRGVjbCxcbiAgICAgIGxhc3Q7XG5cbiAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmICghKCRpbmplY3QgPSBmbi4kaW5qZWN0KSkge1xuICAgICAgJGluamVjdCA9IFtdO1xuICAgICAgaWYgKGZuLmxlbmd0aCkge1xuICAgICAgICBpZiAoc3RyaWN0RGkpIHtcbiAgICAgICAgICBpZiAoIWlzU3RyaW5nKG5hbWUpIHx8ICFuYW1lKSB7XG4gICAgICAgICAgICBuYW1lID0gZm4ubmFtZSB8fCBhbm9uRm4oZm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3N0cmljdGRpJyxcbiAgICAgICAgICAgICd7MH0gaXMgbm90IHVzaW5nIGV4cGxpY2l0IGFubm90YXRpb24gYW5kIGNhbm5vdCBiZSBpbnZva2VkIGluIHN0cmljdCBtb2RlJywgbmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgYXJnRGVjbCA9IGV4dHJhY3RBcmdzKGZuKTtcbiAgICAgICAgZm9yRWFjaChhcmdEZWNsWzFdLnNwbGl0KEZOX0FSR19TUExJVCksIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICAgIGFyZy5yZXBsYWNlKEZOX0FSRywgZnVuY3Rpb24oYWxsLCB1bmRlcnNjb3JlLCBuYW1lKSB7XG4gICAgICAgICAgICAkaW5qZWN0LnB1c2gobmFtZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgZm4uJGluamVjdCA9ICRpbmplY3Q7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzQXJyYXkoZm4pKSB7XG4gICAgbGFzdCA9IGZuLmxlbmd0aCAtIDE7XG4gICAgYXNzZXJ0QXJnRm4oZm5bbGFzdF0sICdmbicpO1xuICAgICRpbmplY3QgPSBmbi5zbGljZSgwLCBsYXN0KTtcbiAgfSBlbHNlIHtcbiAgICBhc3NlcnRBcmdGbihmbiwgJ2ZuJywgdHJ1ZSk7XG4gIH1cbiAgcmV0dXJuICRpbmplY3Q7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkaW5qZWN0b3JcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBgJGluamVjdG9yYCBpcyB1c2VkIHRvIHJldHJpZXZlIG9iamVjdCBpbnN0YW5jZXMgYXMgZGVmaW5lZCBieVxuICoge0BsaW5rIGF1dG8uJHByb3ZpZGUgcHJvdmlkZXJ9LCBpbnN0YW50aWF0ZSB0eXBlcywgaW52b2tlIG1ldGhvZHMsXG4gKiBhbmQgbG9hZCBtb2R1bGVzLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgYWx3YXlzIGhvbGRzIHRydWU6XG4gKlxuICogYGBganNcbiAqICAgdmFyICRpbmplY3RvciA9IGFuZ3VsYXIuaW5qZWN0b3IoKTtcbiAqICAgZXhwZWN0KCRpbmplY3Rvci5nZXQoJyRpbmplY3RvcicpKS50b0JlKCRpbmplY3Rvcik7XG4gKiAgIGV4cGVjdCgkaW5qZWN0b3IuaW52b2tlKGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuICogICAgIHJldHVybiAkaW5qZWN0b3I7XG4gKiAgIH0pKS50b0JlKCRpbmplY3Rvcik7XG4gKiBgYGBcbiAqXG4gKiAjIEluamVjdGlvbiBGdW5jdGlvbiBBbm5vdGF0aW9uXG4gKlxuICogSmF2YVNjcmlwdCBkb2VzIG5vdCBoYXZlIGFubm90YXRpb25zLCBhbmQgYW5ub3RhdGlvbnMgYXJlIG5lZWRlZCBmb3IgZGVwZW5kZW5jeSBpbmplY3Rpb24uIFRoZVxuICogZm9sbG93aW5nIGFyZSBhbGwgdmFsaWQgd2F5cyBvZiBhbm5vdGF0aW5nIGZ1bmN0aW9uIHdpdGggaW5qZWN0aW9uIGFyZ3VtZW50cyBhbmQgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogYGBganNcbiAqICAgLy8gaW5mZXJyZWQgKG9ubHkgd29ya3MgaWYgY29kZSBub3QgbWluaWZpZWQvb2JmdXNjYXRlZClcbiAqICAgJGluamVjdG9yLmludm9rZShmdW5jdGlvbihzZXJ2aWNlQSl7fSk7XG4gKlxuICogICAvLyBhbm5vdGF0ZWRcbiAqICAgZnVuY3Rpb24gZXhwbGljaXQoc2VydmljZUEpIHt9O1xuICogICBleHBsaWNpdC4kaW5qZWN0ID0gWydzZXJ2aWNlQSddO1xuICogICAkaW5qZWN0b3IuaW52b2tlKGV4cGxpY2l0KTtcbiAqXG4gKiAgIC8vIGlubGluZVxuICogICAkaW5qZWN0b3IuaW52b2tlKFsnc2VydmljZUEnLCBmdW5jdGlvbihzZXJ2aWNlQSl7fV0pO1xuICogYGBgXG4gKlxuICogIyMgSW5mZXJlbmNlXG4gKlxuICogSW4gSmF2YVNjcmlwdCBjYWxsaW5nIGB0b1N0cmluZygpYCBvbiBhIGZ1bmN0aW9uIHJldHVybnMgdGhlIGZ1bmN0aW9uIGRlZmluaXRpb24uIFRoZSBkZWZpbml0aW9uXG4gKiBjYW4gdGhlbiBiZSBwYXJzZWQgYW5kIHRoZSBmdW5jdGlvbiBhcmd1bWVudHMgY2FuIGJlIGV4dHJhY3RlZC4gVGhpcyBtZXRob2Qgb2YgZGlzY292ZXJpbmdcbiAqIGFubm90YXRpb25zIGlzIGRpc2FsbG93ZWQgd2hlbiB0aGUgaW5qZWN0b3IgaXMgaW4gc3RyaWN0IG1vZGUuXG4gKiAqTk9URToqIFRoaXMgZG9lcyBub3Qgd29yayB3aXRoIG1pbmlmaWNhdGlvbiwgYW5kIG9iZnVzY2F0aW9uIHRvb2xzIHNpbmNlIHRoZXNlIHRvb2xzIGNoYW5nZSB0aGVcbiAqIGFyZ3VtZW50IG5hbWVzLlxuICpcbiAqICMjIGAkaW5qZWN0YCBBbm5vdGF0aW9uXG4gKiBCeSBhZGRpbmcgYW4gYCRpbmplY3RgIHByb3BlcnR5IG9udG8gYSBmdW5jdGlvbiB0aGUgaW5qZWN0aW9uIHBhcmFtZXRlcnMgY2FuIGJlIHNwZWNpZmllZC5cbiAqXG4gKiAjIyBJbmxpbmVcbiAqIEFzIGFuIGFycmF5IG9mIGluamVjdGlvbiBuYW1lcywgd2hlcmUgdGhlIGxhc3QgaXRlbSBpbiB0aGUgYXJyYXkgaXMgdGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgcHJvcGVydHlcbiAqIEBuYW1lICRpbmplY3RvciNtb2R1bGVzXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQGRlc2NyaXB0aW9uXG4gKiBBIGhhc2ggY29udGFpbmluZyBhbGwgdGhlIG1vZHVsZXMgdGhhdCBoYXZlIGJlZW4gbG9hZGVkIGludG8gdGhlXG4gKiAkaW5qZWN0b3IuXG4gKlxuICogWW91IGNhbiB1c2UgdGhpcyBwcm9wZXJ0eSB0byBmaW5kIG91dCBpbmZvcm1hdGlvbiBhYm91dCBhIG1vZHVsZSB2aWEgdGhlXG4gKiB7QGxpbmsgYW5ndWxhci5Nb2R1bGUjaW5mbyBgbXlNb2R1bGUuaW5mbyguLi4pYH0gbWV0aG9kLlxuICpcbiAqIEZvciBleGFtcGxlOlxuICpcbiAqIGBgYFxuICogdmFyIGluZm8gPSAkaW5qZWN0b3IubW9kdWxlc1snbmdBbmltYXRlJ10uaW5mbygpO1xuICogYGBgXG4gKlxuICogKipEbyBub3QgdXNlIHRoaXMgcHJvcGVydHkgdG8gYXR0ZW1wdCB0byBtb2RpZnkgdGhlIG1vZHVsZXMgYWZ0ZXIgdGhlIGFwcGxpY2F0aW9uXG4gKiBoYXMgYmVlbiBib290c3RyYXBwZWQuKipcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2dldFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIGFuIGluc3RhbmNlIG9mIHRoZSBzZXJ2aWNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBpbnN0YW5jZSB0byByZXRyaWV2ZS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gY2FsbGVyIEFuIG9wdGlvbmFsIHN0cmluZyB0byBwcm92aWRlIHRoZSBvcmlnaW4gb2YgdGhlIGZ1bmN0aW9uIGNhbGwgZm9yIGVycm9yIG1lc3NhZ2VzLlxuICogQHJldHVybiB7Kn0gVGhlIGluc3RhbmNlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2ludm9rZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogSW52b2tlIHRoZSBtZXRob2QgYW5kIHN1cHBseSB0aGUgbWV0aG9kIGFyZ3VtZW50cyBmcm9tIHRoZSBgJGluamVjdG9yYC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBmbiBUaGUgaW5qZWN0YWJsZSBmdW5jdGlvbiB0byBpbnZva2UuIEZ1bmN0aW9uIHBhcmFtZXRlcnMgYXJlXG4gKiAgIGluamVjdGVkIGFjY29yZGluZyB0byB0aGUge0BsaW5rIGd1aWRlL2RpICRpbmplY3QgQW5ub3RhdGlvbn0gcnVsZXMuXG4gKiBAcGFyYW0ge09iamVjdD19IHNlbGYgVGhlIGB0aGlzYCBmb3IgdGhlIGludm9rZWQgbWV0aG9kLlxuICogQHBhcmFtIHtPYmplY3Q9fSBsb2NhbHMgT3B0aW9uYWwgb2JqZWN0LiBJZiBwcmVzZXQgdGhlbiBhbnkgYXJndW1lbnQgbmFtZXMgYXJlIHJlYWQgZnJvbSB0aGlzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QgZmlyc3QsIGJlZm9yZSB0aGUgYCRpbmplY3RvcmAgaXMgY29uc3VsdGVkLlxuICogQHJldHVybnMgeyp9IHRoZSB2YWx1ZSByZXR1cm5lZCBieSB0aGUgaW52b2tlZCBgZm5gIGZ1bmN0aW9uLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2hhc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQWxsb3dzIHRoZSB1c2VyIHRvIHF1ZXJ5IGlmIHRoZSBwYXJ0aWN1bGFyIHNlcnZpY2UgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIGluamVjdG9yIGhhcyBnaXZlbiBzZXJ2aWNlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJGluamVjdG9yI2luc3RhbnRpYXRlXG4gKiBAZGVzY3JpcHRpb25cbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBKUyB0eXBlLiBUaGUgbWV0aG9kIHRha2VzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24sIGludm9rZXMgdGhlIG5ld1xuICogb3BlcmF0b3IsIGFuZCBzdXBwbGllcyBhbGwgb2YgdGhlIGFyZ3VtZW50cyB0byB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24gYXMgc3BlY2lmaWVkIGJ5IHRoZVxuICogY29uc3RydWN0b3IgYW5ub3RhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBUeXBlIEFubm90YXRlZCBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gbG9jYWxzIE9wdGlvbmFsIG9iamVjdC4gSWYgcHJlc2V0IHRoZW4gYW55IGFyZ3VtZW50IG5hbWVzIGFyZSByZWFkIGZyb20gdGhpc1xuICogb2JqZWN0IGZpcnN0LCBiZWZvcmUgdGhlIGAkaW5qZWN0b3JgIGlzIGNvbnN1bHRlZC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IG5ldyBpbnN0YW5jZSBvZiBgVHlwZWAuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkaW5qZWN0b3IjYW5ub3RhdGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgYW4gYXJyYXkgb2Ygc2VydmljZSBuYW1lcyB3aGljaCB0aGUgZnVuY3Rpb24gaXMgcmVxdWVzdGluZyBmb3IgaW5qZWN0aW9uLiBUaGlzIEFQSSBpc1xuICogdXNlZCBieSB0aGUgaW5qZWN0b3IgdG8gZGV0ZXJtaW5lIHdoaWNoIHNlcnZpY2VzIG5lZWQgdG8gYmUgaW5qZWN0ZWQgaW50byB0aGUgZnVuY3Rpb24gd2hlbiB0aGVcbiAqIGZ1bmN0aW9uIGlzIGludm9rZWQuIFRoZXJlIGFyZSB0aHJlZSB3YXlzIGluIHdoaWNoIHRoZSBmdW5jdGlvbiBjYW4gYmUgYW5ub3RhdGVkIHdpdGggdGhlIG5lZWRlZFxuICogZGVwZW5kZW5jaWVzLlxuICpcbiAqICMgQXJndW1lbnQgbmFtZXNcbiAqXG4gKiBUaGUgc2ltcGxlc3QgZm9ybSBpcyB0byBleHRyYWN0IHRoZSBkZXBlbmRlbmNpZXMgZnJvbSB0aGUgYXJndW1lbnRzIG9mIHRoZSBmdW5jdGlvbi4gVGhpcyBpcyBkb25lXG4gKiBieSBjb252ZXJ0aW5nIHRoZSBmdW5jdGlvbiBpbnRvIGEgc3RyaW5nIHVzaW5nIGB0b1N0cmluZygpYCBtZXRob2QgYW5kIGV4dHJhY3RpbmcgdGhlIGFyZ3VtZW50XG4gKiBuYW1lcy5cbiAqIGBgYGpzXG4gKiAgIC8vIEdpdmVuXG4gKiAgIGZ1bmN0aW9uIE15Q29udHJvbGxlcigkc2NvcGUsICRyb3V0ZSkge1xuICogICAgIC8vIC4uLlxuICogICB9XG4gKlxuICogICAvLyBUaGVuXG4gKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShNeUNvbnRyb2xsZXIpKS50b0VxdWFsKFsnJHNjb3BlJywgJyRyb3V0ZSddKTtcbiAqIGBgYFxuICpcbiAqIFlvdSBjYW4gZGlzYWxsb3cgdGhpcyBtZXRob2QgYnkgdXNpbmcgc3RyaWN0IGluamVjdGlvbiBtb2RlLlxuICpcbiAqIFRoaXMgbWV0aG9kIGRvZXMgbm90IHdvcmsgd2l0aCBjb2RlIG1pbmlmaWNhdGlvbiAvIG9iZnVzY2F0aW9uLiBGb3IgdGhpcyByZWFzb24gdGhlIGZvbGxvd2luZ1xuICogYW5ub3RhdGlvbiBzdHJhdGVnaWVzIGFyZSBzdXBwb3J0ZWQuXG4gKlxuICogIyBUaGUgYCRpbmplY3RgIHByb3BlcnR5XG4gKlxuICogSWYgYSBmdW5jdGlvbiBoYXMgYW4gYCRpbmplY3RgIHByb3BlcnR5IGFuZCBpdHMgdmFsdWUgaXMgYW4gYXJyYXkgb2Ygc3RyaW5ncywgdGhlbiB0aGUgc3RyaW5nc1xuICogcmVwcmVzZW50IG5hbWVzIG9mIHNlcnZpY2VzIHRvIGJlIGluamVjdGVkIGludG8gdGhlIGZ1bmN0aW9uLlxuICogYGBganNcbiAqICAgLy8gR2l2ZW5cbiAqICAgdmFyIE15Q29udHJvbGxlciA9IGZ1bmN0aW9uKG9iZnVzY2F0ZWRTY29wZSwgb2JmdXNjYXRlZFJvdXRlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH1cbiAqICAgLy8gRGVmaW5lIGZ1bmN0aW9uIGRlcGVuZGVuY2llc1xuICogICBNeUNvbnRyb2xsZXJbJyRpbmplY3QnXSA9IFsnJHNjb3BlJywgJyRyb3V0ZSddO1xuICpcbiAqICAgLy8gVGhlblxuICogICBleHBlY3QoaW5qZWN0b3IuYW5ub3RhdGUoTXlDb250cm9sbGVyKSkudG9FcXVhbChbJyRzY29wZScsICckcm91dGUnXSk7XG4gKiBgYGBcbiAqXG4gKiAjIFRoZSBhcnJheSBub3RhdGlvblxuICpcbiAqIEl0IGlzIG9mdGVuIGRlc2lyYWJsZSB0byBpbmxpbmUgSW5qZWN0ZWQgZnVuY3Rpb25zIGFuZCB0aGF0J3Mgd2hlbiBzZXR0aW5nIHRoZSBgJGluamVjdGAgcHJvcGVydHlcbiAqIGlzIHZlcnkgaW5jb252ZW5pZW50LiBJbiB0aGVzZSBzaXR1YXRpb25zIHVzaW5nIHRoZSBhcnJheSBub3RhdGlvbiB0byBzcGVjaWZ5IHRoZSBkZXBlbmRlbmNpZXMgaW5cbiAqIGEgd2F5IHRoYXQgc3Vydml2ZXMgbWluaWZpY2F0aW9uIGlzIGEgYmV0dGVyIGNob2ljZTpcbiAqXG4gKiBgYGBqc1xuICogICAvLyBXZSB3aXNoIHRvIHdyaXRlIHRoaXMgKG5vdCBtaW5pZmljYXRpb24gLyBvYmZ1c2NhdGlvbiBzYWZlKVxuICogICBpbmplY3Rvci5pbnZva2UoZnVuY3Rpb24oJGNvbXBpbGUsICRyb290U2NvcGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfSk7XG4gKlxuICogICAvLyBXZSBhcmUgZm9yY2VkIHRvIHdyaXRlIGJyZWFrIGlubGluaW5nXG4gKiAgIHZhciB0bXBGbiA9IGZ1bmN0aW9uKG9iZnVzY2F0ZWRDb21waWxlLCBvYmZ1c2NhdGVkUm9vdFNjb3BlKSB7XG4gKiAgICAgLy8gLi4uXG4gKiAgIH07XG4gKiAgIHRtcEZuLiRpbmplY3QgPSBbJyRjb21waWxlJywgJyRyb290U2NvcGUnXTtcbiAqICAgaW5qZWN0b3IuaW52b2tlKHRtcEZuKTtcbiAqXG4gKiAgIC8vIFRvIGJldHRlciBzdXBwb3J0IGlubGluZSBmdW5jdGlvbiB0aGUgaW5saW5lIGFubm90YXRpb24gaXMgc3VwcG9ydGVkXG4gKiAgIGluamVjdG9yLmludm9rZShbJyRjb21waWxlJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbihvYmZDb21waWxlLCBvYmZSb290U2NvcGUpIHtcbiAqICAgICAvLyAuLi5cbiAqICAgfV0pO1xuICpcbiAqICAgLy8gVGhlcmVmb3JlXG4gKiAgIGV4cGVjdChpbmplY3Rvci5hbm5vdGF0ZShcbiAqICAgICAgWyckY29tcGlsZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24ob2JmdXNfJGNvbXBpbGUsIG9iZnVzXyRyb290U2NvcGUpIHt9XSlcbiAqICAgICkudG9FcXVhbChbJyRjb21waWxlJywgJyRyb290U2NvcGUnXSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBmbiBGdW5jdGlvbiBmb3Igd2hpY2ggZGVwZW5kZW50IHNlcnZpY2UgbmFtZXMgbmVlZCB0b1xuICogYmUgcmV0cmlldmVkIGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAqXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBbc3RyaWN0RGk9ZmFsc2VdIERpc2FsbG93IGFyZ3VtZW50IG5hbWUgYW5ub3RhdGlvbiBpbmZlcmVuY2UuXG4gKlxuICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fSBUaGUgbmFtZXMgb2YgdGhlIHNlcnZpY2VzIHdoaWNoIHRoZSBmdW5jdGlvbiByZXF1aXJlcy5cbiAqL1xuXG5cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHByb3ZpZGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGUge0BsaW5rIGF1dG8uJHByb3ZpZGUgJHByb3ZpZGV9IHNlcnZpY2UgaGFzIGEgbnVtYmVyIG9mIG1ldGhvZHMgZm9yIHJlZ2lzdGVyaW5nIGNvbXBvbmVudHNcbiAqIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBNYW55IG9mIHRoZXNlIGZ1bmN0aW9ucyBhcmUgYWxzbyBleHBvc2VkIG9uXG4gKiB7QGxpbmsgYW5ndWxhci5Nb2R1bGV9LlxuICpcbiAqIEFuIEFuZ3VsYXIgKipzZXJ2aWNlKiogaXMgYSBzaW5nbGV0b24gb2JqZWN0IGNyZWF0ZWQgYnkgYSAqKnNlcnZpY2UgZmFjdG9yeSoqLiAgVGhlc2UgKipzZXJ2aWNlXG4gKiBmYWN0b3JpZXMqKiBhcmUgZnVuY3Rpb25zIHdoaWNoLCBpbiB0dXJuLCBhcmUgY3JlYXRlZCBieSBhICoqc2VydmljZSBwcm92aWRlcioqLlxuICogVGhlICoqc2VydmljZSBwcm92aWRlcnMqKiBhcmUgY29uc3RydWN0b3IgZnVuY3Rpb25zLiBXaGVuIGluc3RhbnRpYXRlZCB0aGV5IG11c3QgY29udGFpbiBhXG4gKiBwcm9wZXJ0eSBjYWxsZWQgYCRnZXRgLCB3aGljaCBob2xkcyB0aGUgKipzZXJ2aWNlIGZhY3RvcnkqKiBmdW5jdGlvbi5cbiAqXG4gKiBXaGVuIHlvdSByZXF1ZXN0IGEgc2VydmljZSwgdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9IGlzIHJlc3BvbnNpYmxlIGZvciBmaW5kaW5nIHRoZVxuICogY29ycmVjdCAqKnNlcnZpY2UgcHJvdmlkZXIqKiwgaW5zdGFudGlhdGluZyBpdCBhbmQgdGhlbiBjYWxsaW5nIGl0cyBgJGdldGAgKipzZXJ2aWNlIGZhY3RvcnkqKlxuICogZnVuY3Rpb24gdG8gZ2V0IHRoZSBpbnN0YW5jZSBvZiB0aGUgKipzZXJ2aWNlKiouXG4gKlxuICogT2Z0ZW4gc2VydmljZXMgaGF2ZSBubyBjb25maWd1cmF0aW9uIG9wdGlvbnMgYW5kIHRoZXJlIGlzIG5vIG5lZWQgdG8gYWRkIG1ldGhvZHMgdG8gdGhlIHNlcnZpY2VcbiAqIHByb3ZpZGVyLiAgVGhlIHByb3ZpZGVyIHdpbGwgYmUgbm8gbW9yZSB0aGFuIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gd2l0aCBhIGAkZ2V0YCBwcm9wZXJ0eS4gRm9yXG4gKiB0aGVzZSBjYXNlcyB0aGUge0BsaW5rIGF1dG8uJHByb3ZpZGUgJHByb3ZpZGV9IHNlcnZpY2UgaGFzIGFkZGl0aW9uYWwgaGVscGVyIG1ldGhvZHMgdG8gcmVnaXN0ZXJcbiAqIHNlcnZpY2VzIHdpdGhvdXQgc3BlY2lmeWluZyBhIHByb3ZpZGVyLlxuICpcbiAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjcHJvdmlkZXIgcHJvdmlkZXIobmFtZSwgcHJvdmlkZXIpfSAtIHJlZ2lzdGVycyBhICoqc2VydmljZSBwcm92aWRlcioqIHdpdGggdGhlXG4gKiAgICAge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn1cbiAqICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjY29uc3RhbnQgY29uc3RhbnQobmFtZSwgb2JqKX0gLSByZWdpc3RlcnMgYSB2YWx1ZS9vYmplY3QgdGhhdCBjYW4gYmUgYWNjZXNzZWQgYnlcbiAqICAgICBwcm92aWRlcnMgYW5kIHNlcnZpY2VzLlxuICogKiB7QGxpbmsgYXV0by4kcHJvdmlkZSN2YWx1ZSB2YWx1ZShuYW1lLCBvYmopfSAtIHJlZ2lzdGVycyBhIHZhbHVlL29iamVjdCB0aGF0IGNhbiBvbmx5IGJlIGFjY2Vzc2VkIGJ5XG4gKiAgICAgc2VydmljZXMsIG5vdCBwcm92aWRlcnMuXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI2ZhY3RvcnkgZmFjdG9yeShuYW1lLCBmbil9IC0gcmVnaXN0ZXJzIGEgc2VydmljZSAqKmZhY3RvcnkgZnVuY3Rpb24qKlxuICogICAgIHRoYXQgd2lsbCBiZSB3cmFwcGVkIGluIGEgKipzZXJ2aWNlIHByb3ZpZGVyKiogb2JqZWN0LCB3aG9zZSBgJGdldGAgcHJvcGVydHkgd2lsbCBjb250YWluIHRoZVxuICogICAgIGdpdmVuIGZhY3RvcnkgZnVuY3Rpb24uXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2Ugc2VydmljZShuYW1lLCBGbil9IC0gcmVnaXN0ZXJzIGEgKipjb25zdHJ1Y3RvciBmdW5jdGlvbioqXG4gKiAgICAgdGhhdCB3aWxsIGJlIHdyYXBwZWQgaW4gYSAqKnNlcnZpY2UgcHJvdmlkZXIqKiBvYmplY3QsIHdob3NlIGAkZ2V0YCBwcm9wZXJ0eSB3aWxsIGluc3RhbnRpYXRlXG4gKiAgICAgIGEgbmV3IG9iamVjdCB1c2luZyB0aGUgZ2l2ZW4gY29uc3RydWN0b3IgZnVuY3Rpb24uXG4gKiAqIHtAbGluayBhdXRvLiRwcm92aWRlI2RlY29yYXRvciBkZWNvcmF0b3IobmFtZSwgZGVjb3JGbil9IC0gcmVnaXN0ZXJzIGEgKipkZWNvcmF0b3IgZnVuY3Rpb24qKiB0aGF0XG4gKiAgICAgIHdpbGwgYmUgYWJsZSB0byBtb2RpZnkgb3IgcmVwbGFjZSB0aGUgaW1wbGVtZW50YXRpb24gb2YgYW5vdGhlciBzZXJ2aWNlLlxuICpcbiAqIFNlZSB0aGUgaW5kaXZpZHVhbCBtZXRob2RzIGZvciBtb3JlIGluZm9ybWF0aW9uIGFuZCBleGFtcGxlcy5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRwcm92aWRlI3Byb3ZpZGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZWdpc3RlciBhICoqcHJvdmlkZXIgZnVuY3Rpb24qKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gUHJvdmlkZXIgZnVuY3Rpb25zXG4gKiBhcmUgY29uc3RydWN0b3IgZnVuY3Rpb25zLCB3aG9zZSBpbnN0YW5jZXMgYXJlIHJlc3BvbnNpYmxlIGZvciBcInByb3ZpZGluZ1wiIGEgZmFjdG9yeSBmb3IgYVxuICogc2VydmljZS5cbiAqXG4gKiBTZXJ2aWNlIHByb3ZpZGVyIG5hbWVzIHN0YXJ0IHdpdGggdGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgdGhleSBwcm92aWRlIGZvbGxvd2VkIGJ5IGBQcm92aWRlcmAuXG4gKiBGb3IgZXhhbXBsZSwgdGhlIHtAbGluayBuZy4kbG9nICRsb2d9IHNlcnZpY2UgaGFzIGEgcHJvdmlkZXIgY2FsbGVkXG4gKiB7QGxpbmsgbmcuJGxvZ1Byb3ZpZGVyICRsb2dQcm92aWRlcn0uXG4gKlxuICogU2VydmljZSBwcm92aWRlciBvYmplY3RzIGNhbiBoYXZlIGFkZGl0aW9uYWwgbWV0aG9kcyB3aGljaCBhbGxvdyBjb25maWd1cmF0aW9uIG9mIHRoZSBwcm92aWRlclxuICogYW5kIGl0cyBzZXJ2aWNlLiBJbXBvcnRhbnRseSwgeW91IGNhbiBjb25maWd1cmUgd2hhdCBraW5kIG9mIHNlcnZpY2UgaXMgY3JlYXRlZCBieSB0aGUgYCRnZXRgXG4gKiBtZXRob2QsIG9yIGhvdyB0aGF0IHNlcnZpY2Ugd2lsbCBhY3QuIEZvciBleGFtcGxlLCB0aGUge0BsaW5rIG5nLiRsb2dQcm92aWRlciAkbG9nUHJvdmlkZXJ9IGhhcyBhXG4gKiBtZXRob2Qge0BsaW5rIG5nLiRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWQgZGVidWdFbmFibGVkfVxuICogd2hpY2ggbGV0cyB5b3Ugc3BlY2lmeSB3aGV0aGVyIHRoZSB7QGxpbmsgbmcuJGxvZyAkbG9nfSBzZXJ2aWNlIHdpbGwgbG9nIGRlYnVnIG1lc3NhZ2VzIHRvIHRoZVxuICogY29uc29sZSBvciBub3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGluc3RhbmNlLiBOT1RFOiB0aGUgcHJvdmlkZXIgd2lsbCBiZSBhdmFpbGFibGUgdW5kZXIgYG5hbWUgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1Byb3ZpZGVyJ2Aga2V5LlxuICogQHBhcmFtIHsoT2JqZWN0fGZ1bmN0aW9uKCkpfSBwcm92aWRlciBJZiB0aGUgcHJvdmlkZXIgaXM6XG4gKlxuICogICAtIGBPYmplY3RgOiB0aGVuIGl0IHNob3VsZCBoYXZlIGEgYCRnZXRgIG1ldGhvZC4gVGhlIGAkZ2V0YCBtZXRob2Qgd2lsbCBiZSBpbnZva2VkIHVzaW5nXG4gKiAgICAge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSAkaW5qZWN0b3IuaW52b2tlKCl9IHdoZW4gYW4gaW5zdGFuY2UgbmVlZHMgdG8gYmUgY3JlYXRlZC5cbiAqICAgLSBgQ29uc3RydWN0b3JgOiBhIG5ldyBpbnN0YW5jZSBvZiB0aGUgcHJvdmlkZXIgd2lsbCBiZSBjcmVhdGVkIHVzaW5nXG4gKiAgICAge0BsaW5rIGF1dG8uJGluamVjdG9yI2luc3RhbnRpYXRlICRpbmplY3Rvci5pbnN0YW50aWF0ZSgpfSwgdGhlbiB0cmVhdGVkIGFzIGBvYmplY3RgLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcblxuICogQGV4YW1wbGVcbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIGNyZWF0ZSBhIHNpbXBsZSBldmVudCB0cmFja2luZyBzZXJ2aWNlIGFuZCByZWdpc3RlciBpdCB1c2luZ1xuICoge0BsaW5rIGF1dG8uJHByb3ZpZGUjcHJvdmlkZXIgJHByb3ZpZGUucHJvdmlkZXIoKX0uXG4gKlxuICogYGBganNcbiAqICAvLyBEZWZpbmUgdGhlIGV2ZW50VHJhY2tlciBwcm92aWRlclxuICogIGZ1bmN0aW9uIEV2ZW50VHJhY2tlclByb3ZpZGVyKCkge1xuICogICAgdmFyIHRyYWNraW5nVXJsID0gJy90cmFjayc7XG4gKlxuICogICAgLy8gQSBwcm92aWRlciBtZXRob2QgZm9yIGNvbmZpZ3VyaW5nIHdoZXJlIHRoZSB0cmFja2VkIGV2ZW50cyBzaG91bGQgYmVlbiBzYXZlZFxuICogICAgdGhpcy5zZXRUcmFja2luZ1VybCA9IGZ1bmN0aW9uKHVybCkge1xuICogICAgICB0cmFja2luZ1VybCA9IHVybDtcbiAqICAgIH07XG4gKlxuICogICAgLy8gVGhlIHNlcnZpY2UgZmFjdG9yeSBmdW5jdGlvblxuICogICAgdGhpcy4kZ2V0ID0gWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKSB7XG4gKiAgICAgIHZhciB0cmFja2VkRXZlbnRzID0ge307XG4gKiAgICAgIHJldHVybiB7XG4gKiAgICAgICAgLy8gQ2FsbCB0aGlzIHRvIHRyYWNrIGFuIGV2ZW50XG4gKiAgICAgICAgZXZlbnQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gKiAgICAgICAgICB2YXIgY291bnQgPSB0cmFja2VkRXZlbnRzW2V2ZW50XSB8fCAwO1xuICogICAgICAgICAgY291bnQgKz0gMTtcbiAqICAgICAgICAgIHRyYWNrZWRFdmVudHNbZXZlbnRdID0gY291bnQ7XG4gKiAgICAgICAgICByZXR1cm4gY291bnQ7XG4gKiAgICAgICAgfSxcbiAqICAgICAgICAvLyBDYWxsIHRoaXMgdG8gc2F2ZSB0aGUgdHJhY2tlZCBldmVudHMgdG8gdGhlIHRyYWNraW5nVXJsXG4gKiAgICAgICAgc2F2ZTogZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgICAkaHR0cC5wb3N0KHRyYWNraW5nVXJsLCB0cmFja2VkRXZlbnRzKTtcbiAqICAgICAgICB9XG4gKiAgICAgIH07XG4gKiAgICB9XTtcbiAqICB9XG4gKlxuICogIGRlc2NyaWJlKCdldmVudFRyYWNrZXInLCBmdW5jdGlvbigpIHtcbiAqICAgIHZhciBwb3N0U3B5O1xuICpcbiAqICAgIGJlZm9yZUVhY2gobW9kdWxlKGZ1bmN0aW9uKCRwcm92aWRlKSB7XG4gKiAgICAgIC8vIFJlZ2lzdGVyIHRoZSBldmVudFRyYWNrZXIgcHJvdmlkZXJcbiAqICAgICAgJHByb3ZpZGUucHJvdmlkZXIoJ2V2ZW50VHJhY2tlcicsIEV2ZW50VHJhY2tlclByb3ZpZGVyKTtcbiAqICAgIH0pKTtcbiAqXG4gKiAgICBiZWZvcmVFYWNoKG1vZHVsZShmdW5jdGlvbihldmVudFRyYWNrZXJQcm92aWRlcikge1xuICogICAgICAvLyBDb25maWd1cmUgZXZlbnRUcmFja2VyIHByb3ZpZGVyXG4gKiAgICAgIGV2ZW50VHJhY2tlclByb3ZpZGVyLnNldFRyYWNraW5nVXJsKCcvY3VzdG9tLXRyYWNrJyk7XG4gKiAgICB9KSk7XG4gKlxuICogICAgaXQoJ3RyYWNrcyBldmVudHMnLCBpbmplY3QoZnVuY3Rpb24oZXZlbnRUcmFja2VyKSB7XG4gKiAgICAgIGV4cGVjdChldmVudFRyYWNrZXIuZXZlbnQoJ2xvZ2luJykpLnRvRXF1YWwoMSk7XG4gKiAgICAgIGV4cGVjdChldmVudFRyYWNrZXIuZXZlbnQoJ2xvZ2luJykpLnRvRXF1YWwoMik7XG4gKiAgICB9KSk7XG4gKlxuICogICAgaXQoJ3NhdmVzIHRvIHRoZSB0cmFja2luZyB1cmwnLCBpbmplY3QoZnVuY3Rpb24oZXZlbnRUcmFja2VyLCAkaHR0cCkge1xuICogICAgICBwb3N0U3B5ID0gc3B5T24oJGh0dHAsICdwb3N0Jyk7XG4gKiAgICAgIGV2ZW50VHJhY2tlci5ldmVudCgnbG9naW4nKTtcbiAqICAgICAgZXZlbnRUcmFja2VyLnNhdmUoKTtcbiAqICAgICAgZXhwZWN0KHBvc3RTcHkpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAqICAgICAgZXhwZWN0KHBvc3RTcHkubW9zdFJlY2VudENhbGwuYXJnc1swXSkubm90LnRvRXF1YWwoJy90cmFjaycpO1xuICogICAgICBleHBlY3QocG9zdFNweS5tb3N0UmVjZW50Q2FsbC5hcmdzWzBdKS50b0VxdWFsKCcvY3VzdG9tLXRyYWNrJyk7XG4gKiAgICAgIGV4cGVjdChwb3N0U3B5Lm1vc3RSZWNlbnRDYWxsLmFyZ3NbMV0pLnRvRXF1YWwoeyAnbG9naW4nOiAxIH0pO1xuICogICAgfSkpO1xuICogIH0pO1xuICogYGBgXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSNmYWN0b3J5XG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZWdpc3RlciBhICoqc2VydmljZSBmYWN0b3J5KiosIHdoaWNoIHdpbGwgYmUgY2FsbGVkIHRvIHJldHVybiB0aGUgc2VydmljZSBpbnN0YW5jZS5cbiAqIFRoaXMgaXMgc2hvcnQgZm9yIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB3aGVyZSBpdHMgcHJvdmlkZXIgY29uc2lzdHMgb2Ygb25seSBhIGAkZ2V0YCBwcm9wZXJ0eSxcbiAqIHdoaWNoIGlzIHRoZSBnaXZlbiBzZXJ2aWNlIGZhY3RvcnkgZnVuY3Rpb24uXG4gKiBZb3Ugc2hvdWxkIHVzZSB7QGxpbmsgYXV0by4kcHJvdmlkZSNmYWN0b3J5ICRwcm92aWRlLmZhY3RvcnkoZ2V0Rm4pfSBpZiB5b3UgZG8gbm90IG5lZWQgdG9cbiAqIGNvbmZpZ3VyZSB5b3VyIHNlcnZpY2UgaW4gYSBwcm92aWRlci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSAkZ2V0Rm4gVGhlIGluamVjdGFibGUgJGdldEZuIGZvciB0aGUgaW5zdGFuY2UgY3JlYXRpb24uXG4gKiAgICAgICAgICAgICAgICAgICAgICBJbnRlcm5hbGx5IHRoaXMgaXMgYSBzaG9ydCBoYW5kIGZvciBgJHByb3ZpZGUucHJvdmlkZXIobmFtZSwgeyRnZXQ6ICRnZXRGbn0pYC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSBpcyBhbiBleGFtcGxlIG9mIHJlZ2lzdGVyaW5nIGEgc2VydmljZVxuICogYGBganNcbiAqICAgJHByb3ZpZGUuZmFjdG9yeSgncGluZycsIFsnJGh0dHAnLCBmdW5jdGlvbigkaHR0cCkge1xuICogICAgIHJldHVybiBmdW5jdGlvbiBwaW5nKCkge1xuICogICAgICAgcmV0dXJuICRodHRwLnNlbmQoJy9waW5nJyk7XG4gKiAgICAgfTtcbiAqICAgfV0pO1xuICogYGBgXG4gKiBZb3Ugd291bGQgdGhlbiBpbmplY3QgYW5kIHVzZSB0aGlzIHNlcnZpY2UgbGlrZSB0aGlzOlxuICogYGBganNcbiAqICAgc29tZU1vZHVsZS5jb250cm9sbGVyKCdDdHJsJywgWydwaW5nJywgZnVuY3Rpb24ocGluZykge1xuICogICAgIHBpbmcoKTtcbiAqICAgfV0pO1xuICogYGBgXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lICRwcm92aWRlI3NlcnZpY2VcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipzZXJ2aWNlIGNvbnN0cnVjdG9yKiosIHdoaWNoIHdpbGwgYmUgaW52b2tlZCB3aXRoIGBuZXdgIHRvIGNyZWF0ZSB0aGUgc2VydmljZVxuICogaW5zdGFuY2UuXG4gKiBUaGlzIGlzIHNob3J0IGZvciByZWdpc3RlcmluZyBhIHNlcnZpY2Ugd2hlcmUgaXRzIHByb3ZpZGVyJ3MgYCRnZXRgIHByb3BlcnR5IGlzIGEgZmFjdG9yeVxuICogZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFuIGluc3RhbmNlIGluc3RhbnRpYXRlZCBieSB0aGUgaW5qZWN0b3IgZnJvbSB0aGUgc2VydmljZSBjb25zdHJ1Y3RvclxuICogZnVuY3Rpb24uXG4gKlxuICogSW50ZXJuYWxseSBpdCBsb29rcyBhIGJpdCBsaWtlIHRoaXM6XG4gKlxuICogYGBgXG4gKiB7XG4gKiAgICRnZXQ6IGZ1bmN0aW9uKCkge1xuICogICAgIHJldHVybiAkaW5qZWN0b3IuaW5zdGFudGlhdGUoY29uc3RydWN0b3IpO1xuICogICB9XG4gKiB9XG4gKiBgYGBcbiAqXG4gKlxuICogWW91IHNob3VsZCB1c2Uge0BsaW5rIGF1dG8uJHByb3ZpZGUjc2VydmljZSAkcHJvdmlkZS5zZXJ2aWNlKGNsYXNzKX0gaWYgeW91IGRlZmluZSB5b3VyIHNlcnZpY2VcbiAqIGFzIGEgdHlwZS9jbGFzcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBjb25zdHJ1Y3RvciBBbiBpbmplY3RhYmxlIGNsYXNzIChjb25zdHJ1Y3RvciBmdW5jdGlvbilcbiAqICAgICB0aGF0IHdpbGwgYmUgaW5zdGFudGlhdGVkLlxuICogQHJldHVybnMge09iamVjdH0gcmVnaXN0ZXJlZCBwcm92aWRlciBpbnN0YW5jZVxuICpcbiAqIEBleGFtcGxlXG4gKiBIZXJlIGlzIGFuIGV4YW1wbGUgb2YgcmVnaXN0ZXJpbmcgYSBzZXJ2aWNlIHVzaW5nXG4gKiB7QGxpbmsgYXV0by4kcHJvdmlkZSNzZXJ2aWNlICRwcm92aWRlLnNlcnZpY2UoY2xhc3MpfS5cbiAqIGBgYGpzXG4gKiAgIHZhciBQaW5nID0gZnVuY3Rpb24oJGh0dHApIHtcbiAqICAgICB0aGlzLiRodHRwID0gJGh0dHA7XG4gKiAgIH07XG4gKlxuICogICBQaW5nLiRpbmplY3QgPSBbJyRodHRwJ107XG4gKlxuICogICBQaW5nLnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgcmV0dXJuIHRoaXMuJGh0dHAuZ2V0KCcvcGluZycpO1xuICogICB9O1xuICogICAkcHJvdmlkZS5zZXJ2aWNlKCdwaW5nJywgUGluZyk7XG4gKiBgYGBcbiAqIFlvdSB3b3VsZCB0aGVuIGluamVjdCBhbmQgdXNlIHRoaXMgc2VydmljZSBsaWtlIHRoaXM6XG4gKiBgYGBqc1xuICogICBzb21lTW9kdWxlLmNvbnRyb2xsZXIoJ0N0cmwnLCBbJ3BpbmcnLCBmdW5jdGlvbihwaW5nKSB7XG4gKiAgICAgcGluZy5zZW5kKCk7XG4gKiAgIH1dKTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSN2YWx1ZVxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVnaXN0ZXIgYSAqKnZhbHVlIHNlcnZpY2UqKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfSwgc3VjaCBhcyBhIHN0cmluZywgYVxuICogbnVtYmVyLCBhbiBhcnJheSwgYW4gb2JqZWN0IG9yIGEgZnVuY3Rpb24uIFRoaXMgaXMgc2hvcnQgZm9yIHJlZ2lzdGVyaW5nIGEgc2VydmljZSB3aGVyZSBpdHNcbiAqIHByb3ZpZGVyJ3MgYCRnZXRgIHByb3BlcnR5IGlzIGEgZmFjdG9yeSBmdW5jdGlvbiB0aGF0IHRha2VzIG5vIGFyZ3VtZW50cyBhbmQgcmV0dXJucyB0aGUgKip2YWx1ZVxuICogc2VydmljZSoqLiBUaGF0IGFsc28gbWVhbnMgaXQgaXMgbm90IHBvc3NpYmxlIHRvIGluamVjdCBvdGhlciBzZXJ2aWNlcyBpbnRvIGEgdmFsdWUgc2VydmljZS5cbiAqXG4gKiBWYWx1ZSBzZXJ2aWNlcyBhcmUgc2ltaWxhciB0byBjb25zdGFudCBzZXJ2aWNlcywgZXhjZXB0IHRoYXQgdGhleSBjYW5ub3QgYmUgaW5qZWN0ZWQgaW50byBhXG4gKiBtb2R1bGUgY29uZmlndXJhdGlvbiBmdW5jdGlvbiAoc2VlIHtAbGluayBhbmd1bGFyLk1vZHVsZSNjb25maWd9KSBidXQgdGhleSBjYW4gYmUgb3ZlcnJpZGRlbiBieVxuICogYW4gQW5ndWxhciB7QGxpbmsgYXV0by4kcHJvdmlkZSNkZWNvcmF0b3IgZGVjb3JhdG9yfS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgaW5zdGFuY2UuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IHJlZ2lzdGVyZWQgcHJvdmlkZXIgaW5zdGFuY2VcbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSBhcmUgc29tZSBleGFtcGxlcyBvZiBjcmVhdGluZyB2YWx1ZSBzZXJ2aWNlcy5cbiAqIGBgYGpzXG4gKiAgICRwcm92aWRlLnZhbHVlKCdBRE1JTl9VU0VSJywgJ2FkbWluJyk7XG4gKlxuICogICAkcHJvdmlkZS52YWx1ZSgnUm9sZUxvb2t1cCcsIHsgYWRtaW46IDAsIHdyaXRlcjogMSwgcmVhZGVyOiAyIH0pO1xuICpcbiAqICAgJHByb3ZpZGUudmFsdWUoJ2hhbGZPZicsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gKiAgICAgcmV0dXJuIHZhbHVlIC8gMjtcbiAqICAgfSk7XG4gKiBgYGBcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHByb3ZpZGUjY29uc3RhbnRcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipjb25zdGFudCBzZXJ2aWNlKiogd2l0aCB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0sIHN1Y2ggYXMgYSBzdHJpbmcsXG4gKiBhIG51bWJlciwgYW4gYXJyYXksIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLiBMaWtlIHRoZSB7QGxpbmsgYXV0by4kcHJvdmlkZSN2YWx1ZSB2YWx1ZX0sIGl0IGlzIG5vdFxuICogcG9zc2libGUgdG8gaW5qZWN0IG90aGVyIHNlcnZpY2VzIGludG8gYSBjb25zdGFudC5cbiAqXG4gKiBCdXQgdW5saWtlIHtAbGluayBhdXRvLiRwcm92aWRlI3ZhbHVlIHZhbHVlfSwgYSBjb25zdGFudCBjYW4gYmVcbiAqIGluamVjdGVkIGludG8gYSBtb2R1bGUgY29uZmlndXJhdGlvbiBmdW5jdGlvbiAoc2VlIHtAbGluayBhbmd1bGFyLk1vZHVsZSNjb25maWd9KSBhbmQgaXQgY2Fubm90XG4gKiBiZSBvdmVycmlkZGVuIGJ5IGFuIEFuZ3VsYXIge0BsaW5rIGF1dG8uJHByb3ZpZGUjZGVjb3JhdG9yIGRlY29yYXRvcn0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGNvbnN0YW50LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgY29uc3RhbnQgdmFsdWUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSByZWdpc3RlcmVkIGluc3RhbmNlXG4gKlxuICogQGV4YW1wbGVcbiAqIEhlcmUgYSBzb21lIGV4YW1wbGVzIG9mIGNyZWF0aW5nIGNvbnN0YW50czpcbiAqIGBgYGpzXG4gKiAgICRwcm92aWRlLmNvbnN0YW50KCdTSEFSRF9IRUlHSFQnLCAzMDYpO1xuICpcbiAqICAgJHByb3ZpZGUuY29uc3RhbnQoJ01ZX0NPTE9VUlMnLCBbJ3JlZCcsICdibHVlJywgJ2dyZXknXSk7XG4gKlxuICogICAkcHJvdmlkZS5jb25zdGFudCgnZG91YmxlJywgZnVuY3Rpb24odmFsdWUpIHtcbiAqICAgICByZXR1cm4gdmFsdWUgKiAyO1xuICogICB9KTtcbiAqIGBgYFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkcHJvdmlkZSNkZWNvcmF0b3JcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFJlZ2lzdGVyIGEgKipkZWNvcmF0b3IgZnVuY3Rpb24qKiB3aXRoIHRoZSB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfS4gQSBkZWNvcmF0b3IgZnVuY3Rpb25cbiAqIGludGVyY2VwdHMgdGhlIGNyZWF0aW9uIG9mIGEgc2VydmljZSwgYWxsb3dpbmcgaXQgdG8gb3ZlcnJpZGUgb3IgbW9kaWZ5IHRoZSBiZWhhdmlvciBvZiB0aGVcbiAqIHNlcnZpY2UuIFRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGRlY29yYXRvciBmdW5jdGlvbiBtYXkgYmUgdGhlIG9yaWdpbmFsIHNlcnZpY2UsIG9yIGEgbmV3IHNlcnZpY2VcbiAqIHRoYXQgcmVwbGFjZXMgKG9yIHdyYXBzIGFuZCBkZWxlZ2F0ZXMgdG8pIHRoZSBvcmlnaW5hbCBzZXJ2aWNlLlxuICpcbiAqIFlvdSBjYW4gZmluZCBvdXQgbW9yZSBhYm91dCB1c2luZyBkZWNvcmF0b3JzIGluIHRoZSB7QGxpbmsgZ3VpZGUvZGVjb3JhdG9yc30gZ3VpZGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHNlcnZpY2UgdG8gZGVjb3JhdGUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEFycmF5LjxzdHJpbmd8RnVuY3Rpb24+fSBkZWNvcmF0b3IgVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgc2VydmljZSBuZWVkcyB0byBiZVxuICogICAgcHJvdmlkZWQgYW5kIHNob3VsZCByZXR1cm4gdGhlIGRlY29yYXRlZCBzZXJ2aWNlIGluc3RhbmNlLiBUaGUgZnVuY3Rpb24gaXMgY2FsbGVkIHVzaW5nXG4gKiAgICB0aGUge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSBpbmplY3Rvci5pbnZva2V9IG1ldGhvZCBhbmQgaXMgdGhlcmVmb3JlIGZ1bGx5IGluamVjdGFibGUuXG4gKiAgICBMb2NhbCBpbmplY3Rpb24gYXJndW1lbnRzOlxuICpcbiAqICAgICogYCRkZWxlZ2F0ZWAgLSBUaGUgb3JpZ2luYWwgc2VydmljZSBpbnN0YW5jZSwgd2hpY2ggY2FuIGJlIHJlcGxhY2VkLCBtb25rZXkgcGF0Y2hlZCwgY29uZmlndXJlZCxcbiAqICAgICAgZGVjb3JhdGVkIG9yIGRlbGVnYXRlZCB0by5cbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSB3ZSBkZWNvcmF0ZSB0aGUge0BsaW5rIG5nLiRsb2cgJGxvZ30gc2VydmljZSB0byBjb252ZXJ0IHdhcm5pbmdzIHRvIGVycm9ycyBieSBpbnRlcmNlcHRpbmdcbiAqIGNhbGxzIHRvIHtAbGluayBuZy4kbG9nI2Vycm9yICRsb2cud2FybigpfS5cbiAqIGBgYGpzXG4gKiAgICRwcm92aWRlLmRlY29yYXRvcignJGxvZycsIFsnJGRlbGVnYXRlJywgZnVuY3Rpb24oJGRlbGVnYXRlKSB7XG4gKiAgICAgJGRlbGVnYXRlLndhcm4gPSAkZGVsZWdhdGUuZXJyb3I7XG4gKiAgICAgcmV0dXJuICRkZWxlZ2F0ZTtcbiAqICAgfV0pO1xuICogYGBgXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVJbmplY3Rvcihtb2R1bGVzVG9Mb2FkLCBzdHJpY3REaSkge1xuICBzdHJpY3REaSA9IChzdHJpY3REaSA9PT0gdHJ1ZSk7XG4gIHZhciBJTlNUQU5USUFUSU5HID0ge30sXG4gICAgICBwcm92aWRlclN1ZmZpeCA9ICdQcm92aWRlcicsXG4gICAgICBwYXRoID0gW10sXG4gICAgICBsb2FkZWRNb2R1bGVzID0gbmV3IE5nTWFwKCksXG4gICAgICBwcm92aWRlckNhY2hlID0ge1xuICAgICAgICAkcHJvdmlkZToge1xuICAgICAgICAgICAgcHJvdmlkZXI6IHN1cHBvcnRPYmplY3QocHJvdmlkZXIpLFxuICAgICAgICAgICAgZmFjdG9yeTogc3VwcG9ydE9iamVjdChmYWN0b3J5KSxcbiAgICAgICAgICAgIHNlcnZpY2U6IHN1cHBvcnRPYmplY3Qoc2VydmljZSksXG4gICAgICAgICAgICB2YWx1ZTogc3VwcG9ydE9iamVjdCh2YWx1ZSksXG4gICAgICAgICAgICBjb25zdGFudDogc3VwcG9ydE9iamVjdChjb25zdGFudCksXG4gICAgICAgICAgICBkZWNvcmF0b3I6IGRlY29yYXRvclxuICAgICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBwcm92aWRlckluamVjdG9yID0gKHByb3ZpZGVyQ2FjaGUuJGluamVjdG9yID1cbiAgICAgICAgICBjcmVhdGVJbnRlcm5hbEluamVjdG9yKHByb3ZpZGVyQ2FjaGUsIGZ1bmN0aW9uKHNlcnZpY2VOYW1lLCBjYWxsZXIpIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKGNhbGxlcikpIHtcbiAgICAgICAgICAgICAgcGF0aC5wdXNoKGNhbGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3VucHInLCAnVW5rbm93biBwcm92aWRlcjogezB9JywgcGF0aC5qb2luKCcgPC0gJykpO1xuICAgICAgICAgIH0pKSxcbiAgICAgIGluc3RhbmNlQ2FjaGUgPSB7fSxcbiAgICAgIHByb3RvSW5zdGFuY2VJbmplY3RvciA9XG4gICAgICAgICAgY3JlYXRlSW50ZXJuYWxJbmplY3RvcihpbnN0YW5jZUNhY2hlLCBmdW5jdGlvbihzZXJ2aWNlTmFtZSwgY2FsbGVyKSB7XG4gICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSBwcm92aWRlckluamVjdG9yLmdldChzZXJ2aWNlTmFtZSArIHByb3ZpZGVyU3VmZml4LCBjYWxsZXIpO1xuICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlSW5qZWN0b3IuaW52b2tlKFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyLiRnZXQsIHByb3ZpZGVyLCB1bmRlZmluZWQsIHNlcnZpY2VOYW1lKTtcbiAgICAgICAgICB9KSxcbiAgICAgIGluc3RhbmNlSW5qZWN0b3IgPSBwcm90b0luc3RhbmNlSW5qZWN0b3I7XG5cbiAgcHJvdmlkZXJDYWNoZVsnJGluamVjdG9yJyArIHByb3ZpZGVyU3VmZml4XSA9IHsgJGdldDogdmFsdWVGbihwcm90b0luc3RhbmNlSW5qZWN0b3IpIH07XG4gIGluc3RhbmNlSW5qZWN0b3IubW9kdWxlcyA9IHByb3ZpZGVySW5qZWN0b3IubW9kdWxlcyA9IGNyZWF0ZU1hcCgpO1xuICB2YXIgcnVuQmxvY2tzID0gbG9hZE1vZHVsZXMobW9kdWxlc1RvTG9hZCk7XG4gIGluc3RhbmNlSW5qZWN0b3IgPSBwcm90b0luc3RhbmNlSW5qZWN0b3IuZ2V0KCckaW5qZWN0b3InKTtcbiAgaW5zdGFuY2VJbmplY3Rvci5zdHJpY3REaSA9IHN0cmljdERpO1xuICBmb3JFYWNoKHJ1bkJsb2NrcywgZnVuY3Rpb24oZm4pIHsgaWYgKGZuKSBpbnN0YW5jZUluamVjdG9yLmludm9rZShmbik7IH0pO1xuXG4gIHJldHVybiBpbnN0YW5jZUluamVjdG9yO1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyAkcHJvdmlkZXJcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgZnVuY3Rpb24gc3VwcG9ydE9iamVjdChkZWxlZ2F0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xuICAgICAgICBmb3JFYWNoKGtleSwgcmV2ZXJzZVBhcmFtcyhkZWxlZ2F0ZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlbGVnYXRlKGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwcm92aWRlcihuYW1lLCBwcm92aWRlcl8pIHtcbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnc2VydmljZScpO1xuICAgIGlmIChpc0Z1bmN0aW9uKHByb3ZpZGVyXykgfHwgaXNBcnJheShwcm92aWRlcl8pKSB7XG4gICAgICBwcm92aWRlcl8gPSBwcm92aWRlckluamVjdG9yLmluc3RhbnRpYXRlKHByb3ZpZGVyXyk7XG4gICAgfVxuICAgIGlmICghcHJvdmlkZXJfLiRnZXQpIHtcbiAgICAgIHRocm93ICRpbmplY3Rvck1pbkVycigncGdldCcsICdQcm92aWRlciBcXCd7MH1cXCcgbXVzdCBkZWZpbmUgJGdldCBmYWN0b3J5IG1ldGhvZC4nLCBuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIChwcm92aWRlckNhY2hlW25hbWUgKyBwcm92aWRlclN1ZmZpeF0gPSBwcm92aWRlcl8pO1xuICB9XG5cbiAgZnVuY3Rpb24gZW5mb3JjZVJldHVyblZhbHVlKG5hbWUsIGZhY3RvcnkpIHtcbiAgICByZXR1cm4gLyoqIEB0aGlzICovIGZ1bmN0aW9uIGVuZm9yY2VkUmV0dXJuVmFsdWUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gaW5zdGFuY2VJbmplY3Rvci5pbnZva2UoZmFjdG9yeSwgdGhpcyk7XG4gICAgICBpZiAoaXNVbmRlZmluZWQocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ3VuZGVmJywgJ1Byb3ZpZGVyIFxcJ3swfVxcJyBtdXN0IHJldHVybiBhIHZhbHVlIGZyb20gJGdldCBmYWN0b3J5IG1ldGhvZC4nLCBuYW1lKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZhY3RvcnkobmFtZSwgZmFjdG9yeUZuLCBlbmZvcmNlKSB7XG4gICAgcmV0dXJuIHByb3ZpZGVyKG5hbWUsIHtcbiAgICAgICRnZXQ6IGVuZm9yY2UgIT09IGZhbHNlID8gZW5mb3JjZVJldHVyblZhbHVlKG5hbWUsIGZhY3RvcnlGbikgOiBmYWN0b3J5Rm5cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlcnZpY2UobmFtZSwgY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gZmFjdG9yeShuYW1lLCBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuICAgICAgcmV0dXJuICRpbmplY3Rvci5pbnN0YW50aWF0ZShjb25zdHJ1Y3Rvcik7XG4gICAgfV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gdmFsdWUobmFtZSwgdmFsKSB7IHJldHVybiBmYWN0b3J5KG5hbWUsIHZhbHVlRm4odmFsKSwgZmFsc2UpOyB9XG5cbiAgZnVuY3Rpb24gY29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eShuYW1lLCAnY29uc3RhbnQnKTtcbiAgICBwcm92aWRlckNhY2hlW25hbWVdID0gdmFsdWU7XG4gICAgaW5zdGFuY2VDYWNoZVtuYW1lXSA9IHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVjb3JhdG9yKHNlcnZpY2VOYW1lLCBkZWNvckZuKSB7XG4gICAgdmFyIG9yaWdQcm92aWRlciA9IHByb3ZpZGVySW5qZWN0b3IuZ2V0KHNlcnZpY2VOYW1lICsgcHJvdmlkZXJTdWZmaXgpLFxuICAgICAgICBvcmlnJGdldCA9IG9yaWdQcm92aWRlci4kZ2V0O1xuXG4gICAgb3JpZ1Byb3ZpZGVyLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcmlnSW5zdGFuY2UgPSBpbnN0YW5jZUluamVjdG9yLmludm9rZShvcmlnJGdldCwgb3JpZ1Byb3ZpZGVyKTtcbiAgICAgIHJldHVybiBpbnN0YW5jZUluamVjdG9yLmludm9rZShkZWNvckZuLCBudWxsLCB7JGRlbGVnYXRlOiBvcmlnSW5zdGFuY2V9KTtcbiAgICB9O1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIE1vZHVsZSBMb2FkaW5nXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBmdW5jdGlvbiBsb2FkTW9kdWxlcyhtb2R1bGVzVG9Mb2FkKSB7XG4gICAgYXNzZXJ0QXJnKGlzVW5kZWZpbmVkKG1vZHVsZXNUb0xvYWQpIHx8IGlzQXJyYXkobW9kdWxlc1RvTG9hZCksICdtb2R1bGVzVG9Mb2FkJywgJ25vdCBhbiBhcnJheScpO1xuICAgIHZhciBydW5CbG9ja3MgPSBbXSwgbW9kdWxlRm47XG4gICAgZm9yRWFjaChtb2R1bGVzVG9Mb2FkLCBmdW5jdGlvbihtb2R1bGUpIHtcbiAgICAgIGlmIChsb2FkZWRNb2R1bGVzLmdldChtb2R1bGUpKSByZXR1cm47XG4gICAgICBsb2FkZWRNb2R1bGVzLnNldChtb2R1bGUsIHRydWUpO1xuXG4gICAgICBmdW5jdGlvbiBydW5JbnZva2VRdWV1ZShxdWV1ZSkge1xuICAgICAgICB2YXIgaSwgaWk7XG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gcXVldWUubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIHZhciBpbnZva2VBcmdzID0gcXVldWVbaV0sXG4gICAgICAgICAgICAgIHByb3ZpZGVyID0gcHJvdmlkZXJJbmplY3Rvci5nZXQoaW52b2tlQXJnc1swXSk7XG5cbiAgICAgICAgICBwcm92aWRlcltpbnZva2VBcmdzWzFdXS5hcHBseShwcm92aWRlciwgaW52b2tlQXJnc1syXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKGlzU3RyaW5nKG1vZHVsZSkpIHtcbiAgICAgICAgICBtb2R1bGVGbiA9IGFuZ3VsYXJNb2R1bGUobW9kdWxlKTtcbiAgICAgICAgICBpbnN0YW5jZUluamVjdG9yLm1vZHVsZXNbbW9kdWxlXSA9IG1vZHVsZUZuO1xuICAgICAgICAgIHJ1bkJsb2NrcyA9IHJ1bkJsb2Nrcy5jb25jYXQobG9hZE1vZHVsZXMobW9kdWxlRm4ucmVxdWlyZXMpKS5jb25jYXQobW9kdWxlRm4uX3J1bkJsb2Nrcyk7XG4gICAgICAgICAgcnVuSW52b2tlUXVldWUobW9kdWxlRm4uX2ludm9rZVF1ZXVlKTtcbiAgICAgICAgICBydW5JbnZva2VRdWV1ZShtb2R1bGVGbi5fY29uZmlnQmxvY2tzKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKG1vZHVsZSkpIHtcbiAgICAgICAgICAgIHJ1bkJsb2Nrcy5wdXNoKHByb3ZpZGVySW5qZWN0b3IuaW52b2tlKG1vZHVsZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgICAgICAgcnVuQmxvY2tzLnB1c2gocHJvdmlkZXJJbmplY3Rvci5pbnZva2UobW9kdWxlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXNzZXJ0QXJnRm4obW9kdWxlLCAnbW9kdWxlJyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgICAgIG1vZHVsZSA9IG1vZHVsZVttb2R1bGUubGVuZ3RoIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGUubWVzc2FnZSAmJiBlLnN0YWNrICYmIGUuc3RhY2suaW5kZXhPZihlLm1lc3NhZ2UpID09PSAtMSkge1xuICAgICAgICAgIC8vIFNhZmFyaSAmIEZGJ3Mgc3RhY2sgdHJhY2VzIGRvbid0IGNvbnRhaW4gZXJyb3IubWVzc2FnZSBjb250ZW50XG4gICAgICAgICAgLy8gdW5saWtlIHRob3NlIG9mIENocm9tZSBhbmQgSUVcbiAgICAgICAgICAvLyBTbyBpZiBzdGFjayBkb2Vzbid0IGNvbnRhaW4gbWVzc2FnZSwgd2UgY3JlYXRlIGEgbmV3IHN0cmluZyB0aGF0IGNvbnRhaW5zIGJvdGguXG4gICAgICAgICAgLy8gU2luY2UgZXJyb3Iuc3RhY2sgaXMgcmVhZC1vbmx5IGluIFNhZmFyaSwgSSdtIG92ZXJyaWRpbmcgZSBhbmQgbm90IGUuc3RhY2sgaGVyZS5cbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXgtYXNzaWduXG4gICAgICAgICAgZSA9IGUubWVzc2FnZSArICdcXG4nICsgZS5zdGFjaztcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ21vZHVsZXJyJywgJ0ZhaWxlZCB0byBpbnN0YW50aWF0ZSBtb2R1bGUgezB9IGR1ZSB0bzpcXG57MX0nLFxuICAgICAgICAgICAgICAgICAgbW9kdWxlLCBlLnN0YWNrIHx8IGUubWVzc2FnZSB8fCBlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcnVuQmxvY2tzO1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIGludGVybmFsIEluamVjdG9yXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUludGVybmFsSW5qZWN0b3IoY2FjaGUsIGZhY3RvcnkpIHtcblxuICAgIGZ1bmN0aW9uIGdldFNlcnZpY2Uoc2VydmljZU5hbWUsIGNhbGxlcikge1xuICAgICAgaWYgKGNhY2hlLmhhc093blByb3BlcnR5KHNlcnZpY2VOYW1lKSkge1xuICAgICAgICBpZiAoY2FjaGVbc2VydmljZU5hbWVdID09PSBJTlNUQU5USUFUSU5HKSB7XG4gICAgICAgICAgdGhyb3cgJGluamVjdG9yTWluRXJyKCdjZGVwJywgJ0NpcmN1bGFyIGRlcGVuZGVuY3kgZm91bmQ6IHswfScsXG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lICsgJyA8LSAnICsgcGF0aC5qb2luKCcgPC0gJykpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjYWNoZVtzZXJ2aWNlTmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHBhdGgudW5zaGlmdChzZXJ2aWNlTmFtZSk7XG4gICAgICAgICAgY2FjaGVbc2VydmljZU5hbWVdID0gSU5TVEFOVElBVElORztcbiAgICAgICAgICBjYWNoZVtzZXJ2aWNlTmFtZV0gPSBmYWN0b3J5KHNlcnZpY2VOYW1lLCBjYWxsZXIpO1xuICAgICAgICAgIHJldHVybiBjYWNoZVtzZXJ2aWNlTmFtZV07XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGlmIChjYWNoZVtzZXJ2aWNlTmFtZV0gPT09IElOU1RBTlRJQVRJTkcpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjYWNoZVtzZXJ2aWNlTmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBwYXRoLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGluamVjdGlvbkFyZ3MoZm4sIGxvY2Fscywgc2VydmljZU5hbWUpIHtcbiAgICAgIHZhciBhcmdzID0gW10sXG4gICAgICAgICAgJGluamVjdCA9IGNyZWF0ZUluamVjdG9yLiQkYW5ub3RhdGUoZm4sIHN0cmljdERpLCBzZXJ2aWNlTmFtZSk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSAkaW5qZWN0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSAkaW5qZWN0W2ldO1xuICAgICAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0aHJvdyAkaW5qZWN0b3JNaW5FcnIoJ2l0a24nLFxuICAgICAgICAgICAgICAgICAgJ0luY29ycmVjdCBpbmplY3Rpb24gdG9rZW4hIEV4cGVjdGVkIHNlcnZpY2UgbmFtZSBhcyBzdHJpbmcsIGdvdCB7MH0nLCBrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGFyZ3MucHVzaChsb2NhbHMgJiYgbG9jYWxzLmhhc093blByb3BlcnR5KGtleSkgPyBsb2NhbHNba2V5XSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRTZXJ2aWNlKGtleSwgc2VydmljZU5hbWUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcmdzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQ2xhc3MoZnVuYykge1xuICAgICAgLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG4gICAgICAvLyBJRSA5LTExIGRvIG5vdCBzdXBwb3J0IGNsYXNzZXMgYW5kIElFOSBsZWFrcyB3aXRoIHRoZSBjb2RlIGJlbG93LlxuICAgICAgaWYgKG1zaWUgfHwgdHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IGZ1bmMuJCRuZ0lzQ2xhc3M7XG4gICAgICBpZiAoIWlzQm9vbGVhbihyZXN1bHQpKSB7XG4gICAgICAgIC8vIFN1cHBvcnQ6IEVkZ2UgMTItMTMgb25seVxuICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vaXNzdWVzLzYxNTYxMzUvXG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuJCRuZ0lzQ2xhc3MgPSAvXig/OmNsYXNzXFxifGNvbnN0cnVjdG9yXFwoKS8udGVzdChzdHJpbmdpZnlGbihmdW5jKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludm9rZShmbiwgc2VsZiwgbG9jYWxzLCBzZXJ2aWNlTmFtZSkge1xuICAgICAgaWYgKHR5cGVvZiBsb2NhbHMgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHNlcnZpY2VOYW1lID0gbG9jYWxzO1xuICAgICAgICBsb2NhbHMgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXJncyA9IGluamVjdGlvbkFyZ3MoZm4sIGxvY2Fscywgc2VydmljZU5hbWUpO1xuICAgICAgaWYgKGlzQXJyYXkoZm4pKSB7XG4gICAgICAgIGZuID0gZm5bZm4ubGVuZ3RoIC0gMV07XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNDbGFzcyhmbikpIHtcbiAgICAgICAgLy8gaHR0cDovL2pzcGVyZi5jb20vYW5ndWxhcmpzLWludm9rZS1hcHBseS12cy1zd2l0Y2hcbiAgICAgICAgLy8gIzUzODhcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJncy51bnNoaWZ0KG51bGwpO1xuICAgICAgICByZXR1cm4gbmV3IChGdW5jdGlvbi5wcm90b3R5cGUuYmluZC5hcHBseShmbiwgYXJncykpKCk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBpbnN0YW50aWF0ZShUeXBlLCBsb2NhbHMsIHNlcnZpY2VOYW1lKSB7XG4gICAgICAvLyBDaGVjayBpZiBUeXBlIGlzIGFubm90YXRlZCBhbmQgdXNlIGp1c3QgdGhlIGdpdmVuIGZ1bmN0aW9uIGF0IG4tMSBhcyBwYXJhbWV0ZXJcbiAgICAgIC8vIGUuZy4gc29tZU1vZHVsZS5mYWN0b3J5KCdncmVldGVyJywgWyckd2luZG93JywgZnVuY3Rpb24ocmVuYW1lZCR3aW5kb3cpIHt9XSk7XG4gICAgICB2YXIgY3RvciA9IChpc0FycmF5KFR5cGUpID8gVHlwZVtUeXBlLmxlbmd0aCAtIDFdIDogVHlwZSk7XG4gICAgICB2YXIgYXJncyA9IGluamVjdGlvbkFyZ3MoVHlwZSwgbG9jYWxzLCBzZXJ2aWNlTmFtZSk7XG4gICAgICAvLyBFbXB0eSBvYmplY3QgYXQgcG9zaXRpb24gMCBpcyBpZ25vcmVkIGZvciBpbnZvY2F0aW9uIHdpdGggYG5ld2AsIGJ1dCByZXF1aXJlZC5cbiAgICAgIGFyZ3MudW5zaGlmdChudWxsKTtcbiAgICAgIHJldHVybiBuZXcgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmFwcGx5KGN0b3IsIGFyZ3MpKSgpO1xuICAgIH1cblxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGludm9rZTogaW52b2tlLFxuICAgICAgaW5zdGFudGlhdGU6IGluc3RhbnRpYXRlLFxuICAgICAgZ2V0OiBnZXRTZXJ2aWNlLFxuICAgICAgYW5ub3RhdGU6IGNyZWF0ZUluamVjdG9yLiQkYW5ub3RhdGUsXG4gICAgICBoYXM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyQ2FjaGUuaGFzT3duUHJvcGVydHkobmFtZSArIHByb3ZpZGVyU3VmZml4KSB8fCBjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cbmNyZWF0ZUluamVjdG9yLiQkYW5ub3RhdGUgPSBhbm5vdGF0ZTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRhbmNob3JTY3JvbGxQcm92aWRlclxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSBgJGFuY2hvclNjcm9sbFByb3ZpZGVyYCB0byBkaXNhYmxlIGF1dG9tYXRpYyBzY3JvbGxpbmcgd2hlbmV2ZXJcbiAqIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiAkQW5jaG9yU2Nyb2xsUHJvdmlkZXIoKSB7XG5cbiAgdmFyIGF1dG9TY3JvbGxpbmdFbmFibGVkID0gdHJ1ZTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkYW5jaG9yU2Nyb2xsUHJvdmlkZXIjZGlzYWJsZUF1dG9TY3JvbGxpbmdcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEJ5IGRlZmF1bHQsIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsICRhbmNob3JTY3JvbGwoKX0gd2lsbCBhdXRvbWF0aWNhbGx5IGRldGVjdCBjaGFuZ2VzIHRvXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSBhbmQgc2Nyb2xsIHRvIHRoZSBlbGVtZW50IG1hdGNoaW5nIHRoZSBuZXcgaGFzaC48YnIgLz5cbiAgICogVXNlIHRoaXMgbWV0aG9kIHRvIGRpc2FibGUgYXV0b21hdGljIHNjcm9sbGluZy5cbiAgICpcbiAgICogSWYgYXV0b21hdGljIHNjcm9sbGluZyBpcyBkaXNhYmxlZCwgb25lIG11c3QgZXhwbGljaXRseSBjYWxsXG4gICAqIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsICRhbmNob3JTY3JvbGwoKX0gaW4gb3JkZXIgdG8gc2Nyb2xsIHRvIHRoZSBlbGVtZW50IHJlbGF0ZWQgdG8gdGhlXG4gICAqIGN1cnJlbnQgaGFzaC5cbiAgICovXG4gIHRoaXMuZGlzYWJsZUF1dG9TY3JvbGxpbmcgPSBmdW5jdGlvbigpIHtcbiAgICBhdXRvU2Nyb2xsaW5nRW5hYmxlZCA9IGZhbHNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2Mgc2VydmljZVxuICAgKiBAbmFtZSAkYW5jaG9yU2Nyb2xsXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqIEByZXF1aXJlcyAkd2luZG93XG4gICAqIEByZXF1aXJlcyAkbG9jYXRpb25cbiAgICogQHJlcXVpcmVzICRyb290U2NvcGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFdoZW4gY2FsbGVkLCBpdCBzY3JvbGxzIHRvIHRoZSBlbGVtZW50IHJlbGF0ZWQgdG8gdGhlIHNwZWNpZmllZCBgaGFzaGAgb3IgKGlmIG9taXR0ZWQpIHRvIHRoZVxuICAgKiBjdXJyZW50IHZhbHVlIG9mIHtAbGluayBuZy4kbG9jYXRpb24jaGFzaCAkbG9jYXRpb24uaGFzaCgpfSwgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBzcGVjaWZpZWRcbiAgICogaW4gdGhlXG4gICAqIFtIVE1MNSBzcGVjXShodHRwOi8vd3d3LnczLm9yZy9odG1sL3dnL2RyYWZ0cy9odG1sL21hc3Rlci9icm93c2Vycy5odG1sI2FuLWluZGljYXRlZC1wYXJ0LW9mLXRoZS1kb2N1bWVudCkuXG4gICAqXG4gICAqIEl0IGFsc28gd2F0Y2hlcyB0aGUge0BsaW5rIG5nLiRsb2NhdGlvbiNoYXNoICRsb2NhdGlvbi5oYXNoKCl9IGFuZCBhdXRvbWF0aWNhbGx5IHNjcm9sbHMgdG9cbiAgICogbWF0Y2ggYW55IGFuY2hvciB3aGVuZXZlciBpdCBjaGFuZ2VzLiBUaGlzIGNhbiBiZSBkaXNhYmxlZCBieSBjYWxsaW5nXG4gICAqIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsUHJvdmlkZXIjZGlzYWJsZUF1dG9TY3JvbGxpbmcgJGFuY2hvclNjcm9sbFByb3ZpZGVyLmRpc2FibGVBdXRvU2Nyb2xsaW5nKCl9LlxuICAgKlxuICAgKiBBZGRpdGlvbmFsbHksIHlvdSBjYW4gdXNlIGl0cyB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbCN5T2Zmc2V0IHlPZmZzZXR9IHByb3BlcnR5IHRvIHNwZWNpZnkgYVxuICAgKiB2ZXJ0aWNhbCBzY3JvbGwtb2Zmc2V0IChlaXRoZXIgZml4ZWQgb3IgZHluYW1pYykuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gaGFzaCBUaGUgaGFzaCBzcGVjaWZ5aW5nIHRoZSBlbGVtZW50IHRvIHNjcm9sbCB0by4gSWYgb21pdHRlZCwgdGhlIHZhbHVlIG9mXG4gICAqICAgICAgICAgICAgICAgICAgICAgICB7QGxpbmsgbmcuJGxvY2F0aW9uI2hhc2ggJGxvY2F0aW9uLmhhc2goKX0gd2lsbCBiZSB1c2VkLlxuICAgKlxuICAgKiBAcHJvcGVydHkgeyhudW1iZXJ8ZnVuY3Rpb258anFMaXRlKX0geU9mZnNldFxuICAgKiBJZiBzZXQsIHNwZWNpZmllcyBhIHZlcnRpY2FsIHNjcm9sbC1vZmZzZXQuIFRoaXMgaXMgb2Z0ZW4gdXNlZnVsIHdoZW4gdGhlcmUgYXJlIGZpeGVkXG4gICAqIHBvc2l0aW9uZWQgZWxlbWVudHMgYXQgdGhlIHRvcCBvZiB0aGUgcGFnZSwgc3VjaCBhcyBuYXZiYXJzLCBoZWFkZXJzIGV0Yy5cbiAgICpcbiAgICogYHlPZmZzZXRgIGNhbiBiZSBzcGVjaWZpZWQgaW4gdmFyaW91cyB3YXlzOlxuICAgKiAtICoqbnVtYmVyKio6IEEgZml4ZWQgbnVtYmVyIG9mIHBpeGVscyB0byBiZSB1c2VkIGFzIG9mZnNldC48YnIgLz48YnIgLz5cbiAgICogLSAqKmZ1bmN0aW9uKio6IEEgZ2V0dGVyIGZ1bmN0aW9uIGNhbGxlZCBldmVyeXRpbWUgYCRhbmNob3JTY3JvbGwoKWAgaXMgZXhlY3V0ZWQuIE11c3QgcmV0dXJuXG4gICAqICAgYSBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBvZmZzZXQgKGluIHBpeGVscykuPGJyIC8+PGJyIC8+XG4gICAqIC0gKipqcUxpdGUqKjogQSBqcUxpdGUvalF1ZXJ5IGVsZW1lbnQgdG8gYmUgdXNlZCBmb3Igc3BlY2lmeWluZyB0aGUgb2Zmc2V0LiBUaGUgZGlzdGFuY2UgZnJvbVxuICAgKiAgIHRoZSB0b3Agb2YgdGhlIHBhZ2UgdG8gdGhlIGVsZW1lbnQncyBib3R0b20gd2lsbCBiZSB1c2VkIGFzIG9mZnNldC48YnIgLz5cbiAgICogICAqKk5vdGUqKjogVGhlIGVsZW1lbnQgd2lsbCBiZSB0YWtlbiBpbnRvIGFjY291bnQgb25seSBhcyBsb25nIGFzIGl0cyBgcG9zaXRpb25gIGlzIHNldCB0b1xuICAgKiAgIGBmaXhlZGAuIFRoaXMgb3B0aW9uIGlzIHVzZWZ1bCwgd2hlbiBkZWFsaW5nIHdpdGggcmVzcG9uc2l2ZSBuYXZiYXJzL2hlYWRlcnMgdGhhdCBhZGp1c3RcbiAgICogICB0aGVpciBoZWlnaHQgYW5kL29yIHBvc2l0aW9uaW5nIGFjY29yZGluZyB0byB0aGUgdmlld3BvcnQncyBzaXplLlxuICAgKlxuICAgKiA8YnIgLz5cbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICogSW4gb3JkZXIgZm9yIGB5T2Zmc2V0YCB0byB3b3JrIHByb3Blcmx5LCBzY3JvbGxpbmcgc2hvdWxkIHRha2UgcGxhY2Ugb24gdGhlIGRvY3VtZW50J3Mgcm9vdCBhbmRcbiAgICogbm90IHNvbWUgY2hpbGQgZWxlbWVudC5cbiAgICogPC9kaXY+XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG1vZHVsZT1cImFuY2hvclNjcm9sbEV4YW1wbGVcIiBuYW1lPVwiYW5jaG9yLXNjcm9sbFwiPlxuICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8ZGl2IGlkPVwic2Nyb2xsQXJlYVwiIG5nLWNvbnRyb2xsZXI9XCJTY3JvbGxDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxhIG5nLWNsaWNrPVwiZ290b0JvdHRvbSgpXCI+R28gdG8gYm90dG9tPC9hPlxuICAgICAgICAgICA8YSBpZD1cImJvdHRvbVwiPjwvYT4gWW91J3JlIGF0IHRoZSBib3R0b20hXG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2ZpbGU+XG4gICAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2FuY2hvclNjcm9sbEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ1Njcm9sbENvbnRyb2xsZXInLCBbJyRzY29wZScsICckbG9jYXRpb24nLCAnJGFuY2hvclNjcm9sbCcsXG4gICAgICAgICAgICAgZnVuY3Rpb24oJHNjb3BlLCAkbG9jYXRpb24sICRhbmNob3JTY3JvbGwpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5nb3RvQm90dG9tID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgbG9jYXRpb24uaGFzaCB0byB0aGUgaWQgb2ZcbiAgICAgICAgICAgICAgICAgLy8gdGhlIGVsZW1lbnQgeW91IHdpc2ggdG8gc2Nyb2xsIHRvLlxuICAgICAgICAgICAgICAgICAkbG9jYXRpb24uaGFzaCgnYm90dG9tJyk7XG5cbiAgICAgICAgICAgICAgICAgLy8gY2FsbCAkYW5jaG9yU2Nyb2xsKClcbiAgICAgICAgICAgICAgICAgJGFuY2hvclNjcm9sbCgpO1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAgICNzY3JvbGxBcmVhIHtcbiAgICAgICAgICAgaGVpZ2h0OiAyODBweDtcbiAgICAgICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgICAgICB9XG5cbiAgICAgICAgICNib3R0b20ge1xuICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgbWFyZ2luLXRvcDogMjAwMHB4O1xuICAgICAgICAgfVxuICAgICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgKlxuICAgKiA8aHIgLz5cbiAgICogVGhlIGV4YW1wbGUgYmVsb3cgaWxsdXN0cmF0ZXMgdGhlIHVzZSBvZiBhIHZlcnRpY2FsIHNjcm9sbC1vZmZzZXQgKHNwZWNpZmllZCBhcyBhIGZpeGVkIHZhbHVlKS5cbiAgICogU2VlIHtAbGluayBuZy4kYW5jaG9yU2Nyb2xsI3lPZmZzZXQgJGFuY2hvclNjcm9sbC55T2Zmc2V0fSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICA8ZXhhbXBsZSBtb2R1bGU9XCJhbmNob3JTY3JvbGxPZmZzZXRFeGFtcGxlXCIgbmFtZT1cImFuY2hvci1zY3JvbGwtb2Zmc2V0XCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxkaXYgY2xhc3M9XCJmaXhlZC1oZWFkZXJcIiBuZy1jb250cm9sbGVyPVwiaGVhZGVyQ3RybFwiPlxuICAgICAgICAgICA8YSBocmVmPVwiXCIgbmctY2xpY2s9XCJnb3RvQW5jaG9yKHgpXCIgbmctcmVwZWF0PVwieCBpbiBbMSwyLDMsNCw1XVwiPlxuICAgICAgICAgICAgIEdvIHRvIGFuY2hvciB7e3h9fVxuICAgICAgICAgICA8L2E+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICAgIDxkaXYgaWQ9XCJhbmNob3J7e3h9fVwiIGNsYXNzPVwiYW5jaG9yXCIgbmctcmVwZWF0PVwieCBpbiBbMSwyLDMsNCw1XVwiPlxuICAgICAgICAgICBBbmNob3Ige3t4fX0gb2YgNVxuICAgICAgICAgPC9kaXY+XG4gICAgICAgPC9maWxlPlxuICAgICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdhbmNob3JTY3JvbGxPZmZzZXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5ydW4oWyckYW5jaG9yU2Nyb2xsJywgZnVuY3Rpb24oJGFuY2hvclNjcm9sbCkge1xuICAgICAgICAgICAgICRhbmNob3JTY3JvbGwueU9mZnNldCA9IDUwOyAgIC8vIGFsd2F5cyBzY3JvbGwgYnkgNTAgZXh0cmEgcGl4ZWxzXG4gICAgICAgICAgIH1dKVxuICAgICAgICAgICAuY29udHJvbGxlcignaGVhZGVyQ3RybCcsIFsnJGFuY2hvclNjcm9sbCcsICckbG9jYXRpb24nLCAnJHNjb3BlJyxcbiAgICAgICAgICAgICBmdW5jdGlvbigkYW5jaG9yU2Nyb2xsLCAkbG9jYXRpb24sICRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmdvdG9BbmNob3IgPSBmdW5jdGlvbih4KSB7XG4gICAgICAgICAgICAgICAgIHZhciBuZXdIYXNoID0gJ2FuY2hvcicgKyB4O1xuICAgICAgICAgICAgICAgICBpZiAoJGxvY2F0aW9uLmhhc2goKSAhPT0gbmV3SGFzaCkge1xuICAgICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgJGxvY2F0aW9uLmhhc2ggdG8gYG5ld0hhc2hgIGFuZFxuICAgICAgICAgICAgICAgICAgIC8vICRhbmNob3JTY3JvbGwgd2lsbCBhdXRvbWF0aWNhbGx5IHNjcm9sbCB0byBpdFxuICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5oYXNoKCdhbmNob3InICsgeCk7XG4gICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgLy8gY2FsbCAkYW5jaG9yU2Nyb2xsKCkgZXhwbGljaXRseSxcbiAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSAkbG9jYXRpb24uaGFzaCBoYXNuJ3QgY2hhbmdlZFxuICAgICAgICAgICAgICAgICAgICRhbmNob3JTY3JvbGwoKTtcbiAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgIF0pO1xuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICBib2R5IHtcbiAgICAgICAgICAgcGFkZGluZy10b3A6IDUwcHg7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC5hbmNob3Ige1xuICAgICAgICAgICBib3JkZXI6IDJweCBkYXNoZWQgRGFya09yY2hpZDtcbiAgICAgICAgICAgcGFkZGluZzogMTBweCAxMHB4IDIwMHB4IDEwcHg7XG4gICAgICAgICB9XG5cbiAgICAgICAgIC5maXhlZC1oZWFkZXIge1xuICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMik7XG4gICAgICAgICAgIGhlaWdodDogNTBweDtcbiAgICAgICAgICAgcG9zaXRpb246IGZpeGVkO1xuICAgICAgICAgICB0b3A6IDA7IGxlZnQ6IDA7IHJpZ2h0OiAwO1xuICAgICAgICAgfVxuXG4gICAgICAgICAuZml4ZWQtaGVhZGVyID4gYSB7XG4gICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgICAgbWFyZ2luOiA1cHggMTVweDtcbiAgICAgICAgIH1cbiAgICAgICA8L2ZpbGU+XG4gICAgIDwvZXhhbXBsZT5cbiAgICovXG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckbG9jYXRpb24nLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCR3aW5kb3csICRsb2NhdGlvbiwgJHJvb3RTY29wZSkge1xuICAgIHZhciBkb2N1bWVudCA9ICR3aW5kb3cuZG9jdW1lbnQ7XG5cbiAgICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IGZpcnN0IGFuY2hvciBmcm9tIGEgTm9kZUxpc3RcbiAgICAvLyAodXNpbmcgYEFycmF5I3NvbWUoKWAgaW5zdGVhZCBvZiBgYW5ndWxhciNmb3JFYWNoKClgIHNpbmNlIGl0J3MgbW9yZSBwZXJmb3JtYW50XG4gICAgLy8gIGFuZCB3b3JraW5nIGluIGFsbCBzdXBwb3J0ZWQgYnJvd3NlcnMuKVxuICAgIGZ1bmN0aW9uIGdldEZpcnN0QW5jaG9yKGxpc3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBudWxsO1xuICAgICAgQXJyYXkucHJvdG90eXBlLnNvbWUuY2FsbChsaXN0LCBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIGlmIChub2RlTmFtZV8oZWxlbWVudCkgPT09ICdhJykge1xuICAgICAgICAgIHJlc3VsdCA9IGVsZW1lbnQ7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRZT2Zmc2V0KCkge1xuXG4gICAgICB2YXIgb2Zmc2V0ID0gc2Nyb2xsLnlPZmZzZXQ7XG5cbiAgICAgIGlmIChpc0Z1bmN0aW9uKG9mZnNldCkpIHtcbiAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0KCk7XG4gICAgICB9IGVsc2UgaWYgKGlzRWxlbWVudChvZmZzZXQpKSB7XG4gICAgICAgIHZhciBlbGVtID0gb2Zmc2V0WzBdO1xuICAgICAgICB2YXIgc3R5bGUgPSAkd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbSk7XG4gICAgICAgIGlmIChzdHlsZS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xuICAgICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b207XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIWlzTnVtYmVyKG9mZnNldCkpIHtcbiAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzY3JvbGxUbyhlbGVtKSB7XG4gICAgICBpZiAoZWxlbSkge1xuICAgICAgICBlbGVtLnNjcm9sbEludG9WaWV3KCk7XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IGdldFlPZmZzZXQoKTtcblxuICAgICAgICBpZiAob2Zmc2V0KSB7XG4gICAgICAgICAgLy8gYG9mZnNldGAgaXMgdGhlIG51bWJlciBvZiBwaXhlbHMgd2Ugc2hvdWxkIHNjcm9sbCBVUCBpbiBvcmRlciB0byBhbGlnbiBgZWxlbWAgcHJvcGVybHkuXG4gICAgICAgICAgLy8gVGhpcyBpcyB0cnVlIE9OTFkgaWYgdGhlIGNhbGwgdG8gYGVsZW0uc2Nyb2xsSW50b1ZpZXcoKWAgaW5pdGlhbGx5IGFsaWducyBgZWxlbWAgYXQgdGhlXG4gICAgICAgICAgLy8gdG9wIG9mIHRoZSB2aWV3cG9ydC5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIElGIHRoZSBudW1iZXIgb2YgcGl4ZWxzIGZyb20gdGhlIHRvcCBvZiBgZWxlbWAgdG8gdGhlIGVuZCBvZiB0aGUgcGFnZSdzIGNvbnRlbnQgaXMgbGVzc1xuICAgICAgICAgIC8vIHRoYW4gdGhlIGhlaWdodCBvZiB0aGUgdmlld3BvcnQsIHRoZW4gYGVsZW0uc2Nyb2xsSW50b1ZpZXcoKWAgd2lsbCBhbGlnbiB0aGUgYGVsZW1gIHNvbWVcbiAgICAgICAgICAvLyB3YXkgZG93biB0aGUgcGFnZS5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIFRoaXMgaXMgb2Z0ZW4gdGhlIGNhc2UgZm9yIGVsZW1lbnRzIG5lYXIgdGhlIGJvdHRvbSBvZiB0aGUgcGFnZS5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIEluIHN1Y2ggY2FzZXMgd2UgZG8gbm90IG5lZWQgdG8gc2Nyb2xsIHRoZSB3aG9sZSBgb2Zmc2V0YCB1cCwganVzdCB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuXG4gICAgICAgICAgLy8gdGhlIHRvcCBvZiB0aGUgZWxlbWVudCBhbmQgdGhlIG9mZnNldCwgd2hpY2ggaXMgZW5vdWdoIHRvIGFsaWduIHRoZSB0b3Agb2YgYGVsZW1gIGF0IHRoZVxuICAgICAgICAgIC8vIGRlc2lyZWQgcG9zaXRpb24uXG4gICAgICAgICAgdmFyIGVsZW1Ub3AgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcDtcbiAgICAgICAgICAkd2luZG93LnNjcm9sbEJ5KDAsIGVsZW1Ub3AgLSBvZmZzZXQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjcm9sbChoYXNoKSB7XG4gICAgICAvLyBBbGxvdyBudW1lcmljIGhhc2hlc1xuICAgICAgaGFzaCA9IGlzU3RyaW5nKGhhc2gpID8gaGFzaCA6IGlzTnVtYmVyKGhhc2gpID8gaGFzaC50b1N0cmluZygpIDogJGxvY2F0aW9uLmhhc2goKTtcbiAgICAgIHZhciBlbG07XG5cbiAgICAgIC8vIGVtcHR5IGhhc2gsIHNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBwYWdlXG4gICAgICBpZiAoIWhhc2gpIHNjcm9sbFRvKG51bGwpO1xuXG4gICAgICAvLyBlbGVtZW50IHdpdGggZ2l2ZW4gaWRcbiAgICAgIGVsc2UgaWYgKChlbG0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChoYXNoKSkpIHNjcm9sbFRvKGVsbSk7XG5cbiAgICAgIC8vIGZpcnN0IGFuY2hvciB3aXRoIGdpdmVuIG5hbWUgOi1EXG4gICAgICBlbHNlIGlmICgoZWxtID0gZ2V0Rmlyc3RBbmNob3IoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoaGFzaCkpKSkgc2Nyb2xsVG8oZWxtKTtcblxuICAgICAgLy8gbm8gZWxlbWVudCBhbmQgaGFzaCA9PT0gJ3RvcCcsIHNjcm9sbCB0byB0aGUgdG9wIG9mIHRoZSBwYWdlXG4gICAgICBlbHNlIGlmIChoYXNoID09PSAndG9wJykgc2Nyb2xsVG8obnVsbCk7XG4gICAgfVxuXG4gICAgLy8gZG9lcyBub3Qgc2Nyb2xsIHdoZW4gdXNlciBjbGlja3Mgb24gYW5jaG9yIGxpbmsgdGhhdCBpcyBjdXJyZW50bHkgb25cbiAgICAvLyAobm8gdXJsIGNoYW5nZSwgbm8gJGxvY2F0aW9uLmhhc2goKSBjaGFuZ2UpLCBicm93c2VyIG5hdGl2ZSBkb2VzIHNjcm9sbFxuICAgIGlmIChhdXRvU2Nyb2xsaW5nRW5hYmxlZCkge1xuICAgICAgJHJvb3RTY29wZS4kd2F0Y2goZnVuY3Rpb24gYXV0b1Njcm9sbFdhdGNoKCkge3JldHVybiAkbG9jYXRpb24uaGFzaCgpO30sXG4gICAgICAgIGZ1bmN0aW9uIGF1dG9TY3JvbGxXYXRjaEFjdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICAgIC8vIHNraXAgdGhlIGluaXRpYWwgc2Nyb2xsIGlmICRsb2NhdGlvbi5oYXNoIGlzIGVtcHR5XG4gICAgICAgICAgaWYgKG5ld1ZhbCA9PT0gb2xkVmFsICYmIG5ld1ZhbCA9PT0gJycpIHJldHVybjtcblxuICAgICAgICAgIGpxTGl0ZURvY3VtZW50TG9hZGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kZXZhbEFzeW5jKHNjcm9sbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBzY3JvbGw7XG4gIH1dO1xufVxuXG52YXIgJGFuaW1hdGVNaW5FcnIgPSBtaW5FcnIoJyRhbmltYXRlJyk7XG52YXIgRUxFTUVOVF9OT0RFID0gMTtcbnZhciBOR19BTklNQVRFX0NMQVNTTkFNRSA9ICduZy1hbmltYXRlJztcblxuZnVuY3Rpb24gbWVyZ2VDbGFzc2VzKGEsYikge1xuICBpZiAoIWEgJiYgIWIpIHJldHVybiAnJztcbiAgaWYgKCFhKSByZXR1cm4gYjtcbiAgaWYgKCFiKSByZXR1cm4gYTtcbiAgaWYgKGlzQXJyYXkoYSkpIGEgPSBhLmpvaW4oJyAnKTtcbiAgaWYgKGlzQXJyYXkoYikpIGIgPSBiLmpvaW4oJyAnKTtcbiAgcmV0dXJuIGEgKyAnICcgKyBiO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0RWxlbWVudE5vZGUoZWxlbWVudCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnQubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWxtID0gZWxlbWVudFtpXTtcbiAgICBpZiAoZWxtLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgIHJldHVybiBlbG07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNwbGl0Q2xhc3NlcyhjbGFzc2VzKSB7XG4gIGlmIChpc1N0cmluZyhjbGFzc2VzKSkge1xuICAgIGNsYXNzZXMgPSBjbGFzc2VzLnNwbGl0KCcgJyk7XG4gIH1cblxuICAvLyBVc2UgY3JlYXRlTWFwKCkgdG8gcHJldmVudCBjbGFzcyBhc3N1bXB0aW9ucyBpbnZvbHZpbmcgcHJvcGVydHkgbmFtZXMgaW5cbiAgLy8gT2JqZWN0LnByb3RvdHlwZVxuICB2YXIgb2JqID0gY3JlYXRlTWFwKCk7XG4gIGZvckVhY2goY2xhc3NlcywgZnVuY3Rpb24oa2xhc3MpIHtcbiAgICAvLyBzb21ldGltZXMgdGhlIHNwbGl0IGxlYXZlcyBlbXB0eSBzdHJpbmcgdmFsdWVzXG4gICAgLy8gaW5jYXNlIGV4dHJhIHNwYWNlcyB3ZXJlIGFwcGxpZWQgdG8gdGhlIG9wdGlvbnNcbiAgICBpZiAoa2xhc3MubGVuZ3RoKSB7XG4gICAgICBvYmpba2xhc3NdID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2JqO1xufVxuXG4vLyBpZiBhbnkgb3RoZXIgdHlwZSBvZiBvcHRpb25zIHZhbHVlIGJlc2lkZXMgYW4gT2JqZWN0IHZhbHVlIGlzXG4vLyBwYXNzZWQgaW50byB0aGUgJGFuaW1hdGUubWV0aG9kKCkgYW5pbWF0aW9uIHRoZW4gdGhpcyBoZWxwZXIgY29kZVxuLy8gd2lsbCBiZSBydW4gd2hpY2ggd2lsbCBpZ25vcmUgaXQuIFdoaWxlIHRoaXMgcGF0Y2ggaXMgbm90IHRoZVxuLy8gZ3JlYXRlc3Qgc29sdXRpb24gdG8gdGhpcywgYSBsb3Qgb2YgZXhpc3RpbmcgcGx1Z2lucyBkZXBlbmQgb25cbi8vICRhbmltYXRlIHRvIGVpdGhlciBjYWxsIHRoZSBjYWxsYmFjayAoPCAxLjIpIG9yIHJldHVybiBhIHByb21pc2Vcbi8vIHRoYXQgY2FuIGJlIGNoYW5nZWQuIFRoaXMgaGVscGVyIGZ1bmN0aW9uIGVuc3VyZXMgdGhhdCB0aGUgb3B0aW9uc1xuLy8gYXJlIHdpcGVkIGNsZWFuIGluY2FzZSBhIGNhbGxiYWNrIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLlxuZnVuY3Rpb24gcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KG9wdGlvbnMpXG4gICAgICA/IG9wdGlvbnNcbiAgICAgIDoge307XG59XG5cbnZhciAkJENvcmVBbmltYXRlSnNQcm92aWRlciA9IC8qKiBAdGhpcyAqLyBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gbm9vcDtcbn07XG5cbi8vIHRoaXMgaXMgcHJlZml4ZWQgd2l0aCBDb3JlIHNpbmNlIGl0IGNvbmZsaWN0cyB3aXRoXG4vLyB0aGUgYW5pbWF0ZVF1ZXVlUHJvdmlkZXIgZGVmaW5lZCBpbiBuZ0FuaW1hdGUvYW5pbWF0ZVF1ZXVlLmpzXG52YXIgJCRDb3JlQW5pbWF0ZVF1ZXVlUHJvdmlkZXIgPSAvKiogQHRoaXMgKi8gZnVuY3Rpb24oKSB7XG4gIHZhciBwb3N0RGlnZXN0UXVldWUgPSBuZXcgTmdNYXAoKTtcbiAgdmFyIHBvc3REaWdlc3RFbGVtZW50cyA9IFtdO1xuXG4gIHRoaXMuJGdldCA9IFsnJCRBbmltYXRlUnVubmVyJywgJyRyb290U2NvcGUnLFxuICAgICAgIGZ1bmN0aW9uKCQkQW5pbWF0ZVJ1bm5lciwgICAkcm9vdFNjb3BlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVuYWJsZWQ6IG5vb3AsXG4gICAgICBvbjogbm9vcCxcbiAgICAgIG9mZjogbm9vcCxcbiAgICAgIHBpbjogbm9vcCxcblxuICAgICAgcHVzaDogZnVuY3Rpb24oZWxlbWVudCwgZXZlbnQsIG9wdGlvbnMsIGRvbU9wZXJhdGlvbikge1xuICAgICAgICBpZiAoZG9tT3BlcmF0aW9uKSB7XG4gICAgICAgICAgZG9tT3BlcmF0aW9uKCk7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZnJvbSkge1xuICAgICAgICAgIGVsZW1lbnQuY3NzKG9wdGlvbnMuZnJvbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMudG8pIHtcbiAgICAgICAgICBlbGVtZW50LmNzcyhvcHRpb25zLnRvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmFkZENsYXNzIHx8IG9wdGlvbnMucmVtb3ZlQ2xhc3MpIHtcbiAgICAgICAgICBhZGRSZW1vdmVDbGFzc2VzUG9zdERpZ2VzdChlbGVtZW50LCBvcHRpb25zLmFkZENsYXNzLCBvcHRpb25zLnJlbW92ZUNsYXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBydW5uZXIgPSBuZXcgJCRBbmltYXRlUnVubmVyKCk7XG5cbiAgICAgICAgLy8gc2luY2UgdGhlcmUgYXJlIG5vIGFuaW1hdGlvbnMgdG8gcnVuIHRoZSBydW5uZXIgbmVlZHMgdG8gYmVcbiAgICAgICAgLy8gbm90aWZpZWQgdGhhdCB0aGUgYW5pbWF0aW9uIGNhbGwgaXMgY29tcGxldGUuXG4gICAgICAgIHJ1bm5lci5jb21wbGV0ZSgpO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgfVxuICAgIH07XG5cblxuICAgIGZ1bmN0aW9uIHVwZGF0ZURhdGEoZGF0YSwgY2xhc3NlcywgdmFsdWUpIHtcbiAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG4gICAgICBpZiAoY2xhc3Nlcykge1xuICAgICAgICBjbGFzc2VzID0gaXNTdHJpbmcoY2xhc3NlcykgPyBjbGFzc2VzLnNwbGl0KCcgJykgOlxuICAgICAgICAgICAgICAgICAgaXNBcnJheShjbGFzc2VzKSA/IGNsYXNzZXMgOiBbXTtcbiAgICAgICAgZm9yRWFjaChjbGFzc2VzLCBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGRhdGFbY2xhc3NOYW1lXSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY2hhbmdlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVDU1NDbGFzc0NoYW5nZXMoKSB7XG4gICAgICBmb3JFYWNoKHBvc3REaWdlc3RFbGVtZW50cywgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICB2YXIgZGF0YSA9IHBvc3REaWdlc3RRdWV1ZS5nZXQoZWxlbWVudCk7XG4gICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgdmFyIGV4aXN0aW5nID0gc3BsaXRDbGFzc2VzKGVsZW1lbnQuYXR0cignY2xhc3MnKSk7XG4gICAgICAgICAgdmFyIHRvQWRkID0gJyc7XG4gICAgICAgICAgdmFyIHRvUmVtb3ZlID0gJyc7XG4gICAgICAgICAgZm9yRWFjaChkYXRhLCBmdW5jdGlvbihzdGF0dXMsIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgdmFyIGhhc0NsYXNzID0gISFleGlzdGluZ1tjbGFzc05hbWVdO1xuICAgICAgICAgICAgaWYgKHN0YXR1cyAhPT0gaGFzQ2xhc3MpIHtcbiAgICAgICAgICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICAgICAgICAgIHRvQWRkICs9ICh0b0FkZC5sZW5ndGggPyAnICcgOiAnJykgKyBjbGFzc05hbWU7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdG9SZW1vdmUgKz0gKHRvUmVtb3ZlLmxlbmd0aCA/ICcgJyA6ICcnKSArIGNsYXNzTmFtZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgZm9yRWFjaChlbGVtZW50LCBmdW5jdGlvbihlbG0pIHtcbiAgICAgICAgICAgIGlmICh0b0FkZCkge1xuICAgICAgICAgICAgICBqcUxpdGVBZGRDbGFzcyhlbG0sIHRvQWRkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0b1JlbW92ZSkge1xuICAgICAgICAgICAgICBqcUxpdGVSZW1vdmVDbGFzcyhlbG0sIHRvUmVtb3ZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwb3N0RGlnZXN0UXVldWUuZGVsZXRlKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHBvc3REaWdlc3RFbGVtZW50cy5sZW5ndGggPSAwO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gYWRkUmVtb3ZlQ2xhc3Nlc1Bvc3REaWdlc3QoZWxlbWVudCwgYWRkLCByZW1vdmUpIHtcbiAgICAgIHZhciBkYXRhID0gcG9zdERpZ2VzdFF1ZXVlLmdldChlbGVtZW50KSB8fCB7fTtcblxuICAgICAgdmFyIGNsYXNzZXNBZGRlZCA9IHVwZGF0ZURhdGEoZGF0YSwgYWRkLCB0cnVlKTtcbiAgICAgIHZhciBjbGFzc2VzUmVtb3ZlZCA9IHVwZGF0ZURhdGEoZGF0YSwgcmVtb3ZlLCBmYWxzZSk7XG5cbiAgICAgIGlmIChjbGFzc2VzQWRkZWQgfHwgY2xhc3Nlc1JlbW92ZWQpIHtcblxuICAgICAgICBwb3N0RGlnZXN0UXVldWUuc2V0KGVsZW1lbnQsIGRhdGEpO1xuICAgICAgICBwb3N0RGlnZXN0RWxlbWVudHMucHVzaChlbGVtZW50KTtcblxuICAgICAgICBpZiAocG9zdERpZ2VzdEVsZW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICRyb290U2NvcGUuJCRwb3N0RGlnZXN0KGhhbmRsZUNTU0NsYXNzQ2hhbmdlcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1dO1xufTtcblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXJcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERlZmF1bHQgaW1wbGVtZW50YXRpb24gb2YgJGFuaW1hdGUgdGhhdCBkb2Vzbid0IHBlcmZvcm0gYW55IGFuaW1hdGlvbnMsIGluc3RlYWQganVzdFxuICogc3luY2hyb25vdXNseSBwZXJmb3JtcyBET00gdXBkYXRlcyBhbmQgcmVzb2x2ZXMgdGhlIHJldHVybmVkIHJ1bm5lciBwcm9taXNlLlxuICpcbiAqIEluIG9yZGVyIHRvIGVuYWJsZSBhbmltYXRpb25zIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgaGFzIHRvIGJlIGxvYWRlZC5cbiAqXG4gKiBUbyBzZWUgdGhlIGZ1bmN0aW9uYWwgaW1wbGVtZW50YXRpb24gY2hlY2sgb3V0IGBzcmMvbmdBbmltYXRlL2FuaW1hdGUuanNgLlxuICovXG52YXIgJEFuaW1hdGVQcm92aWRlciA9IFsnJHByb3ZpZGUnLCAvKiogQHRoaXMgKi8gZnVuY3Rpb24oJHByb3ZpZGUpIHtcbiAgdmFyIHByb3ZpZGVyID0gdGhpcztcbiAgdmFyIGNsYXNzTmFtZUZpbHRlciA9IG51bGw7XG4gIHZhciBjdXN0b21GaWx0ZXIgPSBudWxsO1xuXG4gIHRoaXMuJCRyZWdpc3RlcmVkQW5pbWF0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXIjcmVnaXN0ZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVycyBhIG5ldyBpbmplY3RhYmxlIGFuaW1hdGlvbiBmYWN0b3J5IGZ1bmN0aW9uLiBUaGUgZmFjdG9yeSBmdW5jdGlvbiBwcm9kdWNlcyB0aGVcbiAgICogYW5pbWF0aW9uIG9iamVjdCB3aGljaCBjb250YWlucyBjYWxsYmFjayBmdW5jdGlvbnMgZm9yIGVhY2ggZXZlbnQgdGhhdCBpcyBleHBlY3RlZCB0byBiZVxuICAgKiBhbmltYXRlZC5cbiAgICpcbiAgICogICAqIGBldmVudEZuYDogYGZ1bmN0aW9uKGVsZW1lbnQsIC4uLiAsIGRvbmVGdW5jdGlvbiwgb3B0aW9ucylgXG4gICAqICAgVGhlIGVsZW1lbnQgdG8gYW5pbWF0ZSwgdGhlIGBkb25lRnVuY3Rpb25gIGFuZCB0aGUgb3B0aW9ucyBmZWQgaW50byB0aGUgYW5pbWF0aW9uLiBEZXBlbmRpbmdcbiAgICogICBvbiB0aGUgdHlwZSBvZiBhbmltYXRpb24gYWRkaXRpb25hbCBhcmd1bWVudHMgd2lsbCBiZSBpbmplY3RlZCBpbnRvIHRoZSBhbmltYXRpb24gZnVuY3Rpb24uIFRoZVxuICAgKiAgIGxpc3QgYmVsb3cgZXhwbGFpbnMgdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZXMgZm9yIHRoZSBkaWZmZXJlbnQgYW5pbWF0aW9uIG1ldGhvZHM6XG4gICAqXG4gICAqICAgLSBzZXRDbGFzczogZnVuY3Rpb24oZWxlbWVudCwgYWRkZWRDbGFzc2VzLCByZW1vdmVkQ2xhc3NlcywgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKVxuICAgKiAgIC0gYWRkQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGFkZGVkQ2xhc3NlcywgZG9uZUZ1bmN0aW9uLCBvcHRpb25zKVxuICAgKiAgIC0gcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIHJlbW92ZWRDbGFzc2VzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAqICAgLSBlbnRlciwgbGVhdmUsIG1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQsIGRvbmVGdW5jdGlvbiwgb3B0aW9ucylcbiAgICogICAtIGFuaW1hdGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGZyb21TdHlsZXMsIHRvU3R5bGVzLCBkb25lRnVuY3Rpb24sIG9wdGlvbnMpXG4gICAqXG4gICAqICAgTWFrZSBzdXJlIHRvIHRyaWdnZXIgdGhlIGBkb25lRnVuY3Rpb25gIG9uY2UgdGhlIGFuaW1hdGlvbiBpcyBmdWxseSBjb21wbGV0ZS5cbiAgICpcbiAgICogYGBganNcbiAgICogICByZXR1cm4ge1xuICAgKiAgICAgLy9lbnRlciwgbGVhdmUsIG1vdmUgc2lnbmF0dXJlXG4gICAqICAgICBldmVudEZuIDogZnVuY3Rpb24oZWxlbWVudCwgZG9uZSwgb3B0aW9ucykge1xuICAgKiAgICAgICAvL2NvZGUgdG8gcnVuIHRoZSBhbmltYXRpb25cbiAgICogICAgICAgLy9vbmNlIGNvbXBsZXRlLCB0aGVuIHJ1biBkb25lKClcbiAgICogICAgICAgcmV0dXJuIGZ1bmN0aW9uIGVuZEZ1bmN0aW9uKHdhc0NhbmNlbGxlZCkge1xuICAgKiAgICAgICAgIC8vY29kZSB0byBjYW5jZWwgdGhlIGFuaW1hdGlvblxuICAgKiAgICAgICB9XG4gICAqICAgICB9XG4gICAqICAgfVxuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGFuaW1hdGlvbiAodGhpcyBpcyB3aGF0IHRoZSBjbGFzcy1iYXNlZCBDU1MgdmFsdWUgd2lsbCBiZSBjb21wYXJlZCB0bykuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZhY3RvcnkgVGhlIGZhY3RvcnkgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGV4ZWN1dGVkIHRvIHJldHVybiB0aGUgYW5pbWF0aW9uXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LlxuICAgKi9cbiAgdGhpcy5yZWdpc3RlciA9IGZ1bmN0aW9uKG5hbWUsIGZhY3RvcnkpIHtcbiAgICBpZiAobmFtZSAmJiBuYW1lLmNoYXJBdCgwKSAhPT0gJy4nKSB7XG4gICAgICB0aHJvdyAkYW5pbWF0ZU1pbkVycignbm90Y3NlbCcsICdFeHBlY3RpbmcgY2xhc3Mgc2VsZWN0b3Igc3RhcnRpbmcgd2l0aCBcXCcuXFwnIGdvdCBcXCd7MH1cXCcuJywgbmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIGtleSA9IG5hbWUgKyAnLWFuaW1hdGlvbic7XG4gICAgcHJvdmlkZXIuJCRyZWdpc3RlcmVkQW5pbWF0aW9uc1tuYW1lLnN1YnN0cigxKV0gPSBrZXk7XG4gICAgJHByb3ZpZGUuZmFjdG9yeShrZXksIGZhY3RvcnkpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRhbmltYXRlUHJvdmlkZXIjY3VzdG9tRmlsdGVyXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIGFuZC9vciByZXR1cm5zIHRoZSBjdXN0b20gZmlsdGVyIGZ1bmN0aW9uIHRoYXQgaXMgdXNlZCB0byBcImZpbHRlclwiIGFuaW1hdGlvbnMsIGkuZS5cbiAgICogZGV0ZXJtaW5lIGlmIGFuIGFuaW1hdGlvbiBpcyBhbGxvd2VkIG9yIG5vdC4gV2hlbiBubyBmaWx0ZXIgaXMgc3BlY2lmaWVkICh0aGUgZGVmYXVsdCksIG5vXG4gICAqIGFuaW1hdGlvbiB3aWxsIGJlIGJsb2NrZWQuIFNldHRpbmcgdGhlIGBjdXN0b21GaWx0ZXJgIHZhbHVlIHdpbGwgb25seSBhbGxvdyBhbmltYXRpb25zIGZvclxuICAgKiB3aGljaCB0aGUgZmlsdGVyIGZ1bmN0aW9uJ3MgcmV0dXJuIHZhbHVlIGlzIHRydXRoeS5cbiAgICpcbiAgICogVGhpcyBhbGxvd3MgdG8gZWFzaWx5IGNyZWF0ZSBhcmJpdHJhcmlseSBjb21wbGV4IHJ1bGVzIGZvciBmaWx0ZXJpbmcgYW5pbWF0aW9ucywgc3VjaCBhc1xuICAgKiBhbGxvd2luZyBzcGVjaWZpYyBldmVudHMgb25seSwgb3IgZW5hYmxpbmcgYW5pbWF0aW9ucyBvbiBzcGVjaWZpYyBzdWJ0cmVlcyBvZiB0aGUgRE9NLCBldGMuXG4gICAqIEZpbHRlcmluZyBhbmltYXRpb25zIGNhbiBhbHNvIGJvb3N0IHBlcmZvcm1hbmNlIGZvciBsb3ctcG93ZXJlZCBkZXZpY2VzLCBhcyB3ZWxsIGFzXG4gICAqIGFwcGxpY2F0aW9ucyBjb250YWluaW5nIGEgbG90IG9mIHN0cnVjdHVyYWwgb3BlcmF0aW9ucy5cbiAgICpcbiAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3NcIj5cbiAgICogICAqKkJlc3QgUHJhY3RpY2U6KipcbiAgICogICBLZWVwIHRoZSBmaWx0ZXJpbmcgZnVuY3Rpb24gYXMgbGVhbiBhcyBwb3NzaWJsZSwgYmVjYXVzZSBpdCB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaCBET01cbiAgICogICBhY3Rpb24gKGUuZy4gaW5zZXJ0aW9uLCByZW1vdmFsLCBjbGFzcyBjaGFuZ2UpIHBlcmZvcm1lZCBieSBcImFuaW1hdGlvbi1hd2FyZVwiIGRpcmVjdGl2ZXMuXG4gICAqICAgU2VlIHtAbGluayBndWlkZS9hbmltYXRpb25zI3doaWNoLWRpcmVjdGl2ZXMtc3VwcG9ydC1hbmltYXRpb25zLSBoZXJlfSBmb3IgYSBsaXN0IG9mIGJ1aWx0LWluXG4gICAqICAgZGlyZWN0aXZlcyB0aGF0IHN1cHBvcnQgYW5pbWF0aW9ucy5cbiAgICogICBQZXJmb3JtaW5nIGNvbXB1dGF0aW9uYWxseSBleHBlbnNpdmUgb3IgdGltZS1jb25zdW1pbmcgb3BlcmF0aW9ucyBvbiBlYWNoIGNhbGwgb2YgdGhlXG4gICAqICAgZmlsdGVyaW5nIGZ1bmN0aW9uIGNhbiBtYWtlIHlvdXIgYW5pbWF0aW9ucyBzbHVnZ2lzaC5cbiAgICogPC9kaXY+XG4gICAqXG4gICAqICoqTm90ZToqKiBJZiBwcmVzZW50LCBgY3VzdG9tRmlsdGVyYCB3aWxsIGJlIGNoZWNrZWQgYmVmb3JlXG4gICAqIHtAbGluayAkYW5pbWF0ZVByb3ZpZGVyI2NsYXNzTmFtZUZpbHRlciBjbGFzc05hbWVGaWx0ZXJ9LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZmlsdGVyRm4gLSBUaGUgZmlsdGVyIGZ1bmN0aW9uIHdoaWNoIHdpbGwgYmUgdXNlZCB0byBmaWx0ZXIgYWxsIGFuaW1hdGlvbnMuXG4gICAqICAgSWYgYSBmYWxzeSB2YWx1ZSBpcyByZXR1cm5lZCwgbm8gYW5pbWF0aW9uIHdpbGwgYmUgcGVyZm9ybWVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWRcbiAgICogICB3aXRoIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzOlxuICAgKiAgIC0gKipub2RlKiogYHtET01FbGVtZW50fWAgLSBUaGUgRE9NIGVsZW1lbnQgdG8gYmUgYW5pbWF0ZWQuXG4gICAqICAgLSAqKmV2ZW50KiogYHtTdHJpbmd9YCAtIFRoZSBuYW1lIG9mIHRoZSBhbmltYXRpb24gZXZlbnQgKGUuZy4gYGVudGVyYCwgYGxlYXZlYCwgYGFkZENsYXNzYFxuICAgKiAgICAgZXRjKS5cbiAgICogICAtICoqb3B0aW9ucyoqIGB7T2JqZWN0fWAgLSBBIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdXNlZCBmb3IgdGhlIGFuaW1hdGlvbi5cbiAgICogQHJldHVybiB7RnVuY3Rpb259IFRoZSBjdXJyZW50IGZpbHRlciBmdW5jdGlvbiBvciBgbnVsbGAgaWYgdGhlcmUgaXMgbm9uZSBzZXQuXG4gICAqL1xuICB0aGlzLmN1c3RvbUZpbHRlciA9IGZ1bmN0aW9uKGZpbHRlckZuKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGN1c3RvbUZpbHRlciA9IGlzRnVuY3Rpb24oZmlsdGVyRm4pID8gZmlsdGVyRm4gOiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBjdXN0b21GaWx0ZXI7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGFuaW1hdGVQcm92aWRlciNjbGFzc05hbWVGaWx0ZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgYW5kL29yIHJldHVybnMgdGhlIENTUyBjbGFzcyByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyBjaGVja2VkIHdoZW4gcGVyZm9ybWluZ1xuICAgKiBhbiBhbmltYXRpb24uIFVwb24gYm9vdHN0cmFwIHRoZSBjbGFzc05hbWVGaWx0ZXIgdmFsdWUgaXMgbm90IHNldCBhdCBhbGwgYW5kIHdpbGxcbiAgICogdGhlcmVmb3JlIGVuYWJsZSAkYW5pbWF0ZSB0byBhdHRlbXB0IHRvIHBlcmZvcm0gYW4gYW5pbWF0aW9uIG9uIGFueSBlbGVtZW50IHRoYXQgaXMgdHJpZ2dlcmVkLlxuICAgKiBXaGVuIHNldHRpbmcgdGhlIGBjbGFzc05hbWVGaWx0ZXJgIHZhbHVlLCBhbmltYXRpb25zIHdpbGwgb25seSBiZSBwZXJmb3JtZWQgb24gZWxlbWVudHNcbiAgICogdGhhdCBzdWNjZXNzZnVsbHkgbWF0Y2ggdGhlIGZpbHRlciBleHByZXNzaW9uLiBUaGlzIGluIHR1cm4gY2FuIGJvb3N0IHBlcmZvcm1hbmNlXG4gICAqIGZvciBsb3ctcG93ZXJlZCBkZXZpY2VzIGFzIHdlbGwgYXMgYXBwbGljYXRpb25zIGNvbnRhaW5pbmcgYSBsb3Qgb2Ygc3RydWN0dXJhbCBvcGVyYXRpb25zLlxuICAgKlxuICAgKiAqKk5vdGU6KiogSWYgcHJlc2VudCwgYGNsYXNzTmFtZUZpbHRlcmAgd2lsbCBiZSBjaGVja2VkIGFmdGVyXG4gICAqIHtAbGluayAkYW5pbWF0ZVByb3ZpZGVyI2N1c3RvbUZpbHRlciBjdXN0b21GaWx0ZXJ9LiBJZiBgY3VzdG9tRmlsdGVyYCBpcyBwcmVzZW50IGFuZCByZXR1cm5zXG4gICAqIGZhbHNlLCBgY2xhc3NOYW1lRmlsdGVyYCB3aWxsIG5vdCBiZSBjaGVja2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IGV4cHJlc3Npb24gVGhlIGNsYXNzTmFtZSBleHByZXNzaW9uIHdoaWNoIHdpbGwgYmUgY2hlY2tlZCBhZ2FpbnN0IGFsbCBhbmltYXRpb25zXG4gICAqIEByZXR1cm4ge1JlZ0V4cH0gVGhlIGN1cnJlbnQgQ1NTIGNsYXNzTmFtZSBleHByZXNzaW9uIHZhbHVlLiBJZiBudWxsIHRoZW4gdGhlcmUgaXMgbm8gZXhwcmVzc2lvbiB2YWx1ZVxuICAgKi9cbiAgdGhpcy5jbGFzc05hbWVGaWx0ZXIgPSBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNsYXNzTmFtZUZpbHRlciA9IChleHByZXNzaW9uIGluc3RhbmNlb2YgUmVnRXhwKSA/IGV4cHJlc3Npb24gOiBudWxsO1xuICAgICAgaWYgKGNsYXNzTmFtZUZpbHRlcikge1xuICAgICAgICB2YXIgcmVzZXJ2ZWRSZWdleCA9IG5ldyBSZWdFeHAoJ1soXFxcXHN8XFxcXC8pXScgKyBOR19BTklNQVRFX0NMQVNTTkFNRSArICdbKFxcXFxzfFxcXFwvKV0nKTtcbiAgICAgICAgaWYgKHJlc2VydmVkUmVnZXgudGVzdChjbGFzc05hbWVGaWx0ZXIudG9TdHJpbmcoKSkpIHtcbiAgICAgICAgICBjbGFzc05hbWVGaWx0ZXIgPSBudWxsO1xuICAgICAgICAgIHRocm93ICRhbmltYXRlTWluRXJyKCdub25nY2xzJywgJyRhbmltYXRlUHJvdmlkZXIuY2xhc3NOYW1lRmlsdGVyKHJlZ2V4KSBwcm9oaWJpdHMgYWNjZXB0aW5nIGEgcmVnZXggdmFsdWUgd2hpY2ggbWF0Y2hlcy9jb250YWlucyB0aGUgXCJ7MH1cIiBDU1MgY2xhc3MuJywgTkdfQU5JTUFURV9DTEFTU05BTUUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjbGFzc05hbWVGaWx0ZXI7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gWyckJGFuaW1hdGVRdWV1ZScsIGZ1bmN0aW9uKCQkYW5pbWF0ZVF1ZXVlKSB7XG4gICAgZnVuY3Rpb24gZG9tSW5zZXJ0KGVsZW1lbnQsIHBhcmVudEVsZW1lbnQsIGFmdGVyRWxlbWVudCkge1xuICAgICAgLy8gaWYgZm9yIHNvbWUgcmVhc29uIHRoZSBwcmV2aW91cyBlbGVtZW50IHdhcyByZW1vdmVkXG4gICAgICAvLyBmcm9tIHRoZSBkb20gc29tZXRpbWUgYmVmb3JlIHRoaXMgY29kZSBydW5zIHRoZW4gbGV0J3NcbiAgICAgIC8vIGp1c3Qgc3RpY2sgdG8gdXNpbmcgdGhlIHBhcmVudCBlbGVtZW50IGFzIHRoZSBhbmNob3JcbiAgICAgIGlmIChhZnRlckVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGFmdGVyTm9kZSA9IGV4dHJhY3RFbGVtZW50Tm9kZShhZnRlckVsZW1lbnQpO1xuICAgICAgICBpZiAoYWZ0ZXJOb2RlICYmICFhZnRlck5vZGUucGFyZW50Tm9kZSAmJiAhYWZ0ZXJOb2RlLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICAgICAgICBhZnRlckVsZW1lbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYWZ0ZXJFbGVtZW50KSB7XG4gICAgICAgIGFmdGVyRWxlbWVudC5hZnRlcihlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudEVsZW1lbnQucHJlcGVuZChlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBuYW1lICRhbmltYXRlXG4gICAgICogQGRlc2NyaXB0aW9uIFRoZSAkYW5pbWF0ZSBzZXJ2aWNlIGV4cG9zZXMgYSBzZXJpZXMgb2YgRE9NIHV0aWxpdHkgbWV0aG9kcyB0aGF0IHByb3ZpZGUgc3VwcG9ydFxuICAgICAqIGZvciBhbmltYXRpb24gaG9va3MuIFRoZSBkZWZhdWx0IGJlaGF2aW9yIGlzIHRoZSBhcHBsaWNhdGlvbiBvZiBET00gb3BlcmF0aW9ucywgaG93ZXZlcixcbiAgICAgKiB3aGVuIGFuIGFuaW1hdGlvbiBpcyBkZXRlY3RlZCAoYW5kIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQpLCAkYW5pbWF0ZSB3aWxsIGRvIHRoZSBoZWF2eSBsaWZ0aW5nXG4gICAgICogdG8gZW5zdXJlIHRoYXQgYW5pbWF0aW9uIHJ1bnMgd2l0aCB0aGUgdHJpZ2dlcmVkIERPTSBvcGVyYXRpb24uXG4gICAgICpcbiAgICAgKiBCeSBkZWZhdWx0ICRhbmltYXRlIGRvZXNuJ3QgdHJpZ2dlciBhbnkgYW5pbWF0aW9ucy4gVGhpcyBpcyBiZWNhdXNlIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgaXNuJ3RcbiAgICAgKiBpbmNsdWRlZCBhbmQgb25seSB3aGVuIGl0IGlzIGFjdGl2ZSB0aGVuIHRoZSBhbmltYXRpb24gaG9va3MgdGhhdCBgJGFuaW1hdGVgIHRyaWdnZXJzIHdpbGwgYmVcbiAgICAgKiBmdW5jdGlvbmFsLiBPbmNlIGFjdGl2ZSB0aGVuIGFsbCBzdHJ1Y3R1cmFsIGBuZy1gIGRpcmVjdGl2ZXMgd2lsbCB0cmlnZ2VyIGFuaW1hdGlvbnMgYXMgdGhleSBwZXJmb3JtXG4gICAgICogdGhlaXIgRE9NLXJlbGF0ZWQgb3BlcmF0aW9ucyAoZW50ZXIsIGxlYXZlIGFuZCBtb3ZlKS4gT3RoZXIgZGlyZWN0aXZlcyBzdWNoIGFzIGBuZ0NsYXNzYCxcbiAgICAgKiBgbmdTaG93YCwgYG5nSGlkZWAgYW5kIGBuZ01lc3NhZ2VzYCBhbHNvIHByb3ZpZGUgc3VwcG9ydCBmb3IgYW5pbWF0aW9ucy5cbiAgICAgKlxuICAgICAqIEl0IGlzIHJlY29tbWVuZGVkIHRoYXQgdGhlYCRhbmltYXRlYCBzZXJ2aWNlIGlzIGFsd2F5cyB1c2VkIHdoZW4gZXhlY3V0aW5nIERPTS1yZWxhdGVkIHByb2NlZHVyZXMgd2l0aGluIGRpcmVjdGl2ZXMuXG4gICAgICpcbiAgICAgKiBUbyBsZWFybiBtb3JlIGFib3V0IGVuYWJsaW5nIGFuaW1hdGlvbiBzdXBwb3J0LCBjbGljayBoZXJlIHRvIHZpc2l0IHRoZVxuICAgICAqIHtAbGluayBuZ0FuaW1hdGUgbmdBbmltYXRlIG1vZHVsZSBwYWdlfS5cbiAgICAgKi9cbiAgICByZXR1cm4ge1xuICAgICAgLy8gd2UgZG9uJ3QgY2FsbCBpdCBkaXJlY3RseSBzaW5jZSBub24tZXhpc3RhbnQgYXJndW1lbnRzIG1heVxuICAgICAgLy8gYmUgaW50ZXJwcmV0ZWQgYXMgbnVsbCB3aXRoaW4gdGhlIHN1YiBlbmFibGVkIGZ1bmN0aW9uXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI29uXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIFNldHMgdXAgYW4gZXZlbnQgbGlzdGVuZXIgdG8gZmlyZSB3aGVuZXZlciB0aGUgYW5pbWF0aW9uIGV2ZW50IChlbnRlciwgbGVhdmUsIG1vdmUsIGV0Yy4uLilcbiAgICAgICAqICAgIGhhcyBmaXJlZCBvbiB0aGUgZ2l2ZW4gZWxlbWVudCBvciBhbW9uZyBhbnkgb2YgaXRzIGNoaWxkcmVuLiBPbmNlIHRoZSBsaXN0ZW5lciBpcyBmaXJlZCwgdGhlIHByb3ZpZGVkIGNhbGxiYWNrXG4gICAgICAgKiAgICBpcyBmaXJlZCB3aXRoIHRoZSBmb2xsb3dpbmcgcGFyYW1zOlxuICAgICAgICpcbiAgICAgICAqIGBgYGpzXG4gICAgICAgKiAkYW5pbWF0ZS5vbignZW50ZXInLCBjb250YWluZXIsXG4gICAgICAgKiAgICBmdW5jdGlvbiBjYWxsYmFjayhlbGVtZW50LCBwaGFzZSkge1xuICAgICAgICogICAgICAvLyBjb29sIHdlIGRldGVjdGVkIGFuIGVudGVyIGFuaW1hdGlvbiB3aXRoaW4gdGhlIGNvbnRhaW5lclxuICAgICAgICogICAgfVxuICAgICAgICogKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudCB0aGUgYW5pbWF0aW9uIGV2ZW50IHRoYXQgd2lsbCBiZSBjYXB0dXJlZCAoZS5nLiBlbnRlciwgbGVhdmUsIG1vdmUsIGFkZENsYXNzLCByZW1vdmVDbGFzcywgZXRjLi4uKVxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBjb250YWluZXIgdGhlIGNvbnRhaW5lciBlbGVtZW50IHRoYXQgd2lsbCBjYXB0dXJlIGVhY2ggb2YgdGhlIGFuaW1hdGlvbiBldmVudHMgdGhhdCBhcmUgZmlyZWQgb24gaXRzZWxmXG4gICAgICAgKiAgICAgYXMgd2VsbCBhcyBhbW9uZyBpdHMgY2hpbGRyZW5cbiAgICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIHRoZSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgZmlyZWQgd2hlbiB0aGUgbGlzdGVuZXIgaXMgdHJpZ2dlcmVkXG4gICAgICAgKlxuICAgICAgICogVGhlIGFyZ3VtZW50cyBwcmVzZW50IGluIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBhcmU6XG4gICAgICAgKiAqIGBlbGVtZW50YCAtIFRoZSBjYXB0dXJlZCBET00gZWxlbWVudCB0aGF0IHRoZSBhbmltYXRpb24gd2FzIGZpcmVkIG9uLlxuICAgICAgICogKiBgcGhhc2VgIC0gVGhlIHBoYXNlIG9mIHRoZSBhbmltYXRpb24uIFRoZSB0d28gcG9zc2libGUgcGhhc2VzIGFyZSAqKnN0YXJ0KiogKHdoZW4gdGhlIGFuaW1hdGlvbiBzdGFydHMpIGFuZCAqKmNsb3NlKiogKHdoZW4gaXQgZW5kcykuXG4gICAgICAgKi9cbiAgICAgIG9uOiAkJGFuaW1hdGVRdWV1ZS5vbixcblxuICAgICAgLyoqXG4gICAgICAgKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjb2ZmXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICogQGRlc2NyaXB0aW9uIERlcmVnaXN0ZXJzIGFuIGV2ZW50IGxpc3RlbmVyIGJhc2VkIG9uIHRoZSBldmVudCB3aGljaCBoYXMgYmVlbiBhc3NvY2lhdGVkIHdpdGggdGhlIHByb3ZpZGVkIGVsZW1lbnQuIFRoaXMgbWV0aG9kXG4gICAgICAgKiBjYW4gYmUgdXNlZCBpbiB0aHJlZSBkaWZmZXJlbnQgd2F5cyBkZXBlbmRpbmcgb24gdGhlIGFyZ3VtZW50czpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogLy8gcmVtb3ZlIGFsbCB0aGUgYW5pbWF0aW9uIGV2ZW50IGxpc3RlbmVycyBsaXN0ZW5pbmcgZm9yIGBlbnRlcmBcbiAgICAgICAqICRhbmltYXRlLm9mZignZW50ZXInKTtcbiAgICAgICAqXG4gICAgICAgKiAvLyByZW1vdmUgbGlzdGVuZXJzIGZvciBhbGwgYW5pbWF0aW9uIGV2ZW50cyBmcm9tIHRoZSBjb250YWluZXIgZWxlbWVudFxuICAgICAgICogJGFuaW1hdGUub2ZmKGNvbnRhaW5lcik7XG4gICAgICAgKlxuICAgICAgICogLy8gcmVtb3ZlIGFsbCB0aGUgYW5pbWF0aW9uIGV2ZW50IGxpc3RlbmVycyBsaXN0ZW5pbmcgZm9yIGBlbnRlcmAgb24gdGhlIGdpdmVuIGVsZW1lbnQgYW5kIGl0cyBjaGlsZHJlblxuICAgICAgICogJGFuaW1hdGUub2ZmKCdlbnRlcicsIGNvbnRhaW5lcik7XG4gICAgICAgKlxuICAgICAgICogLy8gcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lciBmdW5jdGlvbiBwcm92aWRlZCBieSBgY2FsbGJhY2tgIHRoYXQgaXMgc2V0XG4gICAgICAgKiAvLyB0byBsaXN0ZW4gZm9yIGBlbnRlcmAgb24gdGhlIGdpdmVuIGBjb250YWluZXJgIGFzIHdlbGwgYXMgaXRzIGNoaWxkcmVuXG4gICAgICAgKiAkYW5pbWF0ZS5vZmYoJ2VudGVyJywgY29udGFpbmVyLCBjYWxsYmFjayk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ3xET01FbGVtZW50fSBldmVudHxjb250YWluZXIgdGhlIGFuaW1hdGlvbiBldmVudCAoZS5nLiBlbnRlciwgbGVhdmUsIG1vdmUsXG4gICAgICAgKiBhZGRDbGFzcywgcmVtb3ZlQ2xhc3MsIGV0Yy4uLiksIG9yIHRoZSBjb250YWluZXIgZWxlbWVudC4gSWYgaXQgaXMgdGhlIGVsZW1lbnQsIGFsbCBvdGhlclxuICAgICAgICogYXJndW1lbnRzIGFyZSBpZ25vcmVkLlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50PX0gY29udGFpbmVyIHRoZSBjb250YWluZXIgZWxlbWVudCB0aGUgZXZlbnQgbGlzdGVuZXIgd2FzIHBsYWNlZCBvblxuICAgICAgICogQHBhcmFtIHtGdW5jdGlvbj19IGNhbGxiYWNrIHRoZSBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHdhcyByZWdpc3RlcmVkIGFzIHRoZSBsaXN0ZW5lclxuICAgICAgICovXG4gICAgICBvZmY6ICQkYW5pbWF0ZVF1ZXVlLm9mZixcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNwaW5cbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gQXNzb2NpYXRlcyB0aGUgcHJvdmlkZWQgZWxlbWVudCB3aXRoIGEgaG9zdCBwYXJlbnQgZWxlbWVudCB0byBhbGxvdyB0aGUgZWxlbWVudCB0byBiZSBhbmltYXRlZCBldmVuIGlmIGl0IGV4aXN0c1xuICAgICAgICogICAgb3V0c2lkZSBvZiB0aGUgRE9NIHN0cnVjdHVyZSBvZiB0aGUgQW5ndWxhciBhcHBsaWNhdGlvbi4gQnkgZG9pbmcgc28sIGFueSBhbmltYXRpb24gdHJpZ2dlcmVkIHZpYSBgJGFuaW1hdGVgIGNhbiBiZSBpc3N1ZWQgb24gdGhlXG4gICAgICAgKiAgICBlbGVtZW50IGRlc3BpdGUgYmVpbmcgb3V0c2lkZSB0aGUgcmVhbG0gb2YgdGhlIGFwcGxpY2F0aW9uIG9yIHdpdGhpbiBhbm90aGVyIGFwcGxpY2F0aW9uLiBTYXkgZm9yIGV4YW1wbGUgaWYgdGhlIGFwcGxpY2F0aW9uXG4gICAgICAgKiAgICB3YXMgYm9vdHN0cmFwcGVkIG9uIGFuIGVsZW1lbnQgdGhhdCBpcyBzb21ld2hlcmUgaW5zaWRlIG9mIHRoZSBgPGJvZHk+YCB0YWcsIGJ1dCB3ZSB3YW50ZWQgdG8gYWxsb3cgZm9yIGFuIGVsZW1lbnQgdG8gYmUgc2l0dWF0ZWRcbiAgICAgICAqICAgIGFzIGEgZGlyZWN0IGNoaWxkIG9mIGBkb2N1bWVudC5ib2R5YCwgdGhlbiB0aGlzIGNhbiBiZSBhY2hpZXZlZCBieSBwaW5uaW5nIHRoZSBlbGVtZW50IHZpYSBgJGFuaW1hdGUucGluKGVsZW1lbnQpYC4gS2VlcCBpbiBtaW5kXG4gICAgICAgKiAgICB0aGF0IGNhbGxpbmcgYCRhbmltYXRlLnBpbihlbGVtZW50LCBwYXJlbnRFbGVtZW50KWAgd2lsbCBub3QgYWN0dWFsbHkgaW5zZXJ0IGludG8gdGhlIERPTSBhbnl3aGVyZTsgaXQgd2lsbCBqdXN0IGNyZWF0ZSB0aGUgYXNzb2NpYXRpb24uXG4gICAgICAgKlxuICAgICAgICogICAgTm90ZSB0aGF0IHRoaXMgZmVhdHVyZSBpcyBvbmx5IGFjdGl2ZSB3aGVuIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgaXMgdXNlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGV4dGVybmFsIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHBpbm5lZFxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnRFbGVtZW50IHRoZSBob3N0IHBhcmVudCBlbGVtZW50IHRoYXQgd2lsbCBiZSBhc3NvY2lhdGVkIHdpdGggdGhlIGV4dGVybmFsIGVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgcGluOiAkJGFuaW1hdGVRdWV1ZS5waW4sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2VuYWJsZWRcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gVXNlZCB0byBnZXQgYW5kIHNldCB3aGV0aGVyIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQgb3Igbm90IG9uIHRoZSBlbnRpcmUgYXBwbGljYXRpb24gb3Igb24gYW4gZWxlbWVudCBhbmQgaXRzIGNoaWxkcmVuLiBUaGlzXG4gICAgICAgKiBmdW5jdGlvbiBjYW4gYmUgY2FsbGVkIGluIGZvdXIgd2F5czpcbiAgICAgICAqXG4gICAgICAgKiBgYGBqc1xuICAgICAgICogLy8gcmV0dXJucyB0cnVlIG9yIGZhbHNlXG4gICAgICAgKiAkYW5pbWF0ZS5lbmFibGVkKCk7XG4gICAgICAgKlxuICAgICAgICogLy8gY2hhbmdlcyB0aGUgZW5hYmxlZCBzdGF0ZSBmb3IgYWxsIGFuaW1hdGlvbnNcbiAgICAgICAqICRhbmltYXRlLmVuYWJsZWQoZmFsc2UpO1xuICAgICAgICogJGFuaW1hdGUuZW5hYmxlZCh0cnVlKTtcbiAgICAgICAqXG4gICAgICAgKiAvLyByZXR1cm5zIHRydWUgb3IgZmFsc2UgaWYgYW5pbWF0aW9ucyBhcmUgZW5hYmxlZCBmb3IgYW4gZWxlbWVudFxuICAgICAgICogJGFuaW1hdGUuZW5hYmxlZChlbGVtZW50KTtcbiAgICAgICAqXG4gICAgICAgKiAvLyBjaGFuZ2VzIHRoZSBlbmFibGVkIHN0YXRlIGZvciBhbiBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW5cbiAgICAgICAqICRhbmltYXRlLmVuYWJsZWQoZWxlbWVudCwgdHJ1ZSk7XG4gICAgICAgKiAkYW5pbWF0ZS5lbmFibGVkKGVsZW1lbnQsIGZhbHNlKTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19IGVsZW1lbnQgdGhlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIGNvbnNpZGVyZWQgZm9yIGNoZWNraW5nL3NldHRpbmcgdGhlIGVuYWJsZWQgc3RhdGVcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IGVuYWJsZWQgd2hldGhlciBvciBub3QgdGhlIGFuaW1hdGlvbnMgd2lsbCBiZSBlbmFibGVkIGZvciB0aGUgZWxlbWVudFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHdoZXRoZXIgb3Igbm90IGFuaW1hdGlvbnMgYXJlIGVuYWJsZWRcbiAgICAgICAqL1xuICAgICAgZW5hYmxlZDogJCRhbmltYXRlUXVldWUuZW5hYmxlZCxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkYW5pbWF0ZSNjYW5jZWxcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gQ2FuY2VscyB0aGUgcHJvdmlkZWQgYW5pbWF0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7UHJvbWlzZX0gYW5pbWF0aW9uUHJvbWlzZSBUaGUgYW5pbWF0aW9uIHByb21pc2UgdGhhdCBpcyByZXR1cm5lZCB3aGVuIGFuIGFuaW1hdGlvbiBpcyBzdGFydGVkLlxuICAgICAgICovXG4gICAgICBjYW5jZWw6IGZ1bmN0aW9uKHJ1bm5lcikge1xuICAgICAgICBpZiAocnVubmVyLmVuZCkge1xuICAgICAgICAgIHJ1bm5lci5lbmQoKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjZW50ZXJcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gSW5zZXJ0cyB0aGUgZWxlbWVudCBpbnRvIHRoZSBET00gZWl0aGVyIGFmdGVyIHRoZSBgYWZ0ZXJgIGVsZW1lbnQgKGlmIHByb3ZpZGVkKSBvclxuICAgICAgICogICBhcyB0aGUgZmlyc3QgY2hpbGQgd2l0aGluIHRoZSBgcGFyZW50YCBlbGVtZW50IGFuZCB0aGVuIHRyaWdnZXJzIGFuIGFuaW1hdGlvbi5cbiAgICAgICAqICAgQSBwcm9taXNlIGlzIHJldHVybmVkIHRoYXQgd2lsbCBiZSByZXNvbHZlZCBkdXJpbmcgdGhlIG5leHQgZGlnZXN0IG9uY2UgdGhlIGFuaW1hdGlvblxuICAgICAgICogICBoYXMgY29tcGxldGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB3aWxsIGJlIGluc2VydGVkIGludG8gdGhlIERPTVxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBwYXJlbnQgdGhlIHBhcmVudCBlbGVtZW50IHdoaWNoIHdpbGwgYXBwZW5kIHRoZSBlbGVtZW50IGFzXG4gICAgICAgKiAgIGEgY2hpbGQgKHNvIGxvbmcgYXMgdGhlIGFmdGVyIGVsZW1lbnQgaXMgbm90IHByZXNlbnQpXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSBhZnRlciB0aGUgc2libGluZyBlbGVtZW50IGFmdGVyIHdoaWNoIHRoZSBlbGVtZW50IHdpbGwgYmUgYXBwZW5kZWRcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogICBUaGUgb2JqZWN0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gKiphZGRDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byBhZGQgdG8gZWxlbWVudFxuICAgICAgICogICAtICoqZnJvbSoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYHRvYFxuICAgICAgICogICAtICoqcmVtb3ZlQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlIGZyb20gZWxlbWVudFxuICAgICAgICogICAtICoqdG8qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCBlbmQgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYGZyb21gXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIGVudGVyOiBmdW5jdGlvbihlbGVtZW50LCBwYXJlbnQsIGFmdGVyLCBvcHRpb25zKSB7XG4gICAgICAgIHBhcmVudCA9IHBhcmVudCAmJiBqcUxpdGUocGFyZW50KTtcbiAgICAgICAgYWZ0ZXIgPSBhZnRlciAmJiBqcUxpdGUoYWZ0ZXIpO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgfHwgYWZ0ZXIucGFyZW50KCk7XG4gICAgICAgIGRvbUluc2VydChlbGVtZW50LCBwYXJlbnQsIGFmdGVyKTtcbiAgICAgICAgcmV0dXJuICQkYW5pbWF0ZVF1ZXVlLnB1c2goZWxlbWVudCwgJ2VudGVyJywgcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICpcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI21vdmVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gSW5zZXJ0cyAobW92ZXMpIHRoZSBlbGVtZW50IGludG8gaXRzIG5ldyBwb3NpdGlvbiBpbiB0aGUgRE9NIGVpdGhlciBhZnRlclxuICAgICAgICogICB0aGUgYGFmdGVyYCBlbGVtZW50IChpZiBwcm92aWRlZCkgb3IgYXMgdGhlIGZpcnN0IGNoaWxkIHdpdGhpbiB0aGUgYHBhcmVudGAgZWxlbWVudFxuICAgICAgICogICBhbmQgdGhlbiB0cmlnZ2VycyBhbiBhbmltYXRpb24uIEEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWRcbiAgICAgICAqICAgZHVyaW5nIHRoZSBuZXh0IGRpZ2VzdCBvbmNlIHRoZSBhbmltYXRpb24gaGFzIGNvbXBsZXRlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsZW1lbnQgdGhlIGVsZW1lbnQgd2hpY2ggd2lsbCBiZSBtb3ZlZCBpbnRvIHRoZSBuZXcgRE9NIHBvc2l0aW9uXG4gICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IHBhcmVudCB0aGUgcGFyZW50IGVsZW1lbnQgd2hpY2ggd2lsbCBhcHBlbmQgdGhlIGVsZW1lbnQgYXNcbiAgICAgICAqICAgYSBjaGlsZCAoc28gbG9uZyBhcyB0aGUgYWZ0ZXIgZWxlbWVudCBpcyBub3QgcHJlc2VudClcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudD19IGFmdGVyIHRoZSBzaWJsaW5nIGVsZW1lbnQgYWZ0ZXIgd2hpY2ggdGhlIGVsZW1lbnQgd2lsbCBiZSBhcHBlbmRlZFxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgKiAgIFRoZSBvYmplY3QgY2FuIGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAgICpcbiAgICAgICAqICAgLSAqKmFkZENsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIGFkZCB0byBlbGVtZW50XG4gICAgICAgKiAgIC0gKipmcm9tKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgdGhlIGJlZ2lubmluZyBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgdG9gXG4gICAgICAgKiAgIC0gKipyZW1vdmVDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byByZW1vdmUgZnJvbSBlbGVtZW50XG4gICAgICAgKiAgIC0gKip0byoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IGVuZCBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgZnJvbWBcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAqL1xuICAgICAgbW92ZTogZnVuY3Rpb24oZWxlbWVudCwgcGFyZW50LCBhZnRlciwgb3B0aW9ucykge1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQgJiYganFMaXRlKHBhcmVudCk7XG4gICAgICAgIGFmdGVyID0gYWZ0ZXIgJiYganFMaXRlKGFmdGVyKTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50IHx8IGFmdGVyLnBhcmVudCgpO1xuICAgICAgICBkb21JbnNlcnQoZWxlbWVudCwgcGFyZW50LCBhZnRlcik7XG4gICAgICAgIHJldHVybiAkJGFuaW1hdGVRdWV1ZS5wdXNoKGVsZW1lbnQsICdtb3ZlJywgcHJlcGFyZUFuaW1hdGVPcHRpb25zKG9wdGlvbnMpKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjbGVhdmVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKiBAZGVzY3JpcHRpb24gVHJpZ2dlcnMgYW4gYW5pbWF0aW9uIGFuZCB0aGVuIHJlbW92ZXMgdGhlIGVsZW1lbnQgZnJvbSB0aGUgRE9NLlxuICAgICAgICogV2hlbiB0aGUgZnVuY3Rpb24gaXMgY2FsbGVkIGEgcHJvbWlzZSBpcyByZXR1cm5lZCB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgZHVyaW5nIHRoZSBuZXh0XG4gICAgICAgKiBkaWdlc3Qgb25jZSB0aGUgYW5pbWF0aW9uIGhhcyBjb21wbGV0ZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBET01cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogICBUaGUgb2JqZWN0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gKiphZGRDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byBhZGQgdG8gZWxlbWVudFxuICAgICAgICogICAtICoqZnJvbSoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYHRvYFxuICAgICAgICogICAtICoqcmVtb3ZlQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlIGZyb20gZWxlbWVudFxuICAgICAgICogICAtICoqdG8qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCBlbmQgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYGZyb21gXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIGxlYXZlOiBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiAkJGFuaW1hdGVRdWV1ZS5wdXNoKGVsZW1lbnQsICdsZWF2ZScsIHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRhbmltYXRlI2FkZENsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvbiBUcmlnZ2VycyBhbiBhZGRDbGFzcyBhbmltYXRpb24gc3Vycm91bmRpbmcgdGhlIGFkZGl0aW9uIG9mIHRoZSBwcm92aWRlZCBDU1MgY2xhc3MoZXMpLiBVcG9uXG4gICAgICAgKiAgIGV4ZWN1dGlvbiwgdGhlIGFkZENsYXNzIG9wZXJhdGlvbiB3aWxsIG9ubHkgYmUgaGFuZGxlZCBhZnRlciB0aGUgbmV4dCBkaWdlc3QgYW5kIGl0IHdpbGwgbm90IHRyaWdnZXIgYW5cbiAgICAgICAqICAgYW5pbWF0aW9uIGlmIGVsZW1lbnQgYWxyZWFkeSBjb250YWlucyB0aGUgQ1NTIGNsYXNzIG9yIGlmIHRoZSBjbGFzcyBpcyByZW1vdmVkIGF0IGEgbGF0ZXIgc3RlcC5cbiAgICAgICAqICAgTm90ZSB0aGF0IGNsYXNzLWJhc2VkIGFuaW1hdGlvbnMgYXJlIHRyZWF0ZWQgZGlmZmVyZW50bHkgY29tcGFyZWQgdG8gc3RydWN0dXJhbCBhbmltYXRpb25zXG4gICAgICAgKiAgIChsaWtlIGVudGVyLCBtb3ZlIGFuZCBsZWF2ZSkgc2luY2UgdGhlIENTUyBjbGFzc2VzIG1heSBiZSBhZGRlZC9yZW1vdmVkIGF0IGRpZmZlcmVudCBwb2ludHNcbiAgICAgICAqICAgZGVwZW5kaW5nIGlmIENTUyBvciBKYXZhU2NyaXB0IGFuaW1hdGlvbnMgYXJlIHVzZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHRoZSBDU1MgY2xhc3NlcyB3aWxsIGJlIGFwcGxpZWQgdG9cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgdGhlIENTUyBjbGFzcyhlcykgdGhhdCB3aWxsIGJlIGFkZGVkIChtdWx0aXBsZSBjbGFzc2VzIGFyZSBzZXBhcmF0ZWQgdmlhIHNwYWNlcylcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogICBUaGUgb2JqZWN0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gKiphZGRDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byBhZGQgdG8gZWxlbWVudFxuICAgICAgICogICAtICoqZnJvbSoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYHRvYFxuICAgICAgICogICAtICoqcmVtb3ZlQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlIGZyb20gZWxlbWVudFxuICAgICAgICogICAtICoqdG8qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCBlbmQgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYGZyb21gXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIGFkZENsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgb3B0aW9ucy5hZGRDbGFzcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLmFkZGNsYXNzLCBjbGFzc05hbWUpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnYWRkQ2xhc3MnLCBvcHRpb25zKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjcmVtb3ZlQ2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uIFRyaWdnZXJzIGEgcmVtb3ZlQ2xhc3MgYW5pbWF0aW9uIHN1cnJvdW5kaW5nIHRoZSByZW1vdmFsIG9mIHRoZSBwcm92aWRlZCBDU1MgY2xhc3MoZXMpLiBVcG9uXG4gICAgICAgKiAgIGV4ZWN1dGlvbiwgdGhlIHJlbW92ZUNsYXNzIG9wZXJhdGlvbiB3aWxsIG9ubHkgYmUgaGFuZGxlZCBhZnRlciB0aGUgbmV4dCBkaWdlc3QgYW5kIGl0IHdpbGwgbm90IHRyaWdnZXIgYW5cbiAgICAgICAqICAgYW5pbWF0aW9uIGlmIGVsZW1lbnQgZG9lcyBub3QgY29udGFpbiB0aGUgQ1NTIGNsYXNzIG9yIGlmIHRoZSBjbGFzcyBpcyBhZGRlZCBhdCBhIGxhdGVyIHN0ZXAuXG4gICAgICAgKiAgIE5vdGUgdGhhdCBjbGFzcy1iYXNlZCBhbmltYXRpb25zIGFyZSB0cmVhdGVkIGRpZmZlcmVudGx5IGNvbXBhcmVkIHRvIHN0cnVjdHVyYWwgYW5pbWF0aW9uc1xuICAgICAgICogICAobGlrZSBlbnRlciwgbW92ZSBhbmQgbGVhdmUpIHNpbmNlIHRoZSBDU1MgY2xhc3NlcyBtYXkgYmUgYWRkZWQvcmVtb3ZlZCBhdCBkaWZmZXJlbnQgcG9pbnRzXG4gICAgICAgKiAgIGRlcGVuZGluZyBpZiBDU1Mgb3IgSmF2YVNjcmlwdCBhbmltYXRpb25zIGFyZSB1c2VkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB0aGUgQ1NTIGNsYXNzZXMgd2lsbCBiZSBhcHBsaWVkIHRvXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2xhc3NOYW1lIHRoZSBDU1MgY2xhc3MoZXMpIHRoYXQgd2lsbCBiZSByZW1vdmVkIChtdWx0aXBsZSBjbGFzc2VzIGFyZSBzZXBhcmF0ZWQgdmlhIHNwYWNlcylcbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0PX0gb3B0aW9ucyBhbiBvcHRpb25hbCBjb2xsZWN0aW9uIG9mIG9wdGlvbnMvc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogICBUaGUgb2JqZWN0IGNhbiBoYXZlIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gKiphZGRDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byBhZGQgdG8gZWxlbWVudFxuICAgICAgICogICAtICoqZnJvbSoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IHRoZSBiZWdpbm5pbmcgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYHRvYFxuICAgICAgICogICAtICoqcmVtb3ZlQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gcmVtb3ZlIGZyb20gZWxlbWVudFxuICAgICAgICogICAtICoqdG8qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCBlbmQgb2YgYW5pbWF0aW9uLiBNdXN0IGhhdmUgbWF0Y2hpbmcgYGZyb21gXG4gICAgICAgKlxuICAgICAgICogQHJldHVybiB7UHJvbWlzZX0gdGhlIGFuaW1hdGlvbiBjYWxsYmFjayBwcm9taXNlXG4gICAgICAgKi9cbiAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbihlbGVtZW50LCBjbGFzc05hbWUsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IHByZXBhcmVBbmltYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgICAgICAgb3B0aW9ucy5yZW1vdmVDbGFzcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLnJlbW92ZUNsYXNzLCBjbGFzc05hbWUpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAncmVtb3ZlQ2xhc3MnLCBvcHRpb25zKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjc2V0Q2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uIFBlcmZvcm1zIGJvdGggdGhlIGFkZGl0aW9uIGFuZCByZW1vdmFsIG9mIGEgQ1NTIGNsYXNzZXMgb24gYW4gZWxlbWVudCBhbmQgKGR1cmluZyB0aGUgcHJvY2VzcylcbiAgICAgICAqICAgIHRyaWdnZXJzIGFuIGFuaW1hdGlvbiBzdXJyb3VuZGluZyB0aGUgY2xhc3MgYWRkaXRpb24vcmVtb3ZhbC4gTXVjaCBsaWtlIGAkYW5pbWF0ZS5hZGRDbGFzc2AgYW5kXG4gICAgICAgKiAgICBgJGFuaW1hdGUucmVtb3ZlQ2xhc3NgLCBgc2V0Q2xhc3NgIHdpbGwgb25seSBldmFsdWF0ZSB0aGUgY2xhc3NlcyBiZWluZyBhZGRlZC9yZW1vdmVkIG9uY2UgYSBkaWdlc3QgaGFzXG4gICAgICAgKiAgICBwYXNzZWQuIE5vdGUgdGhhdCBjbGFzcy1iYXNlZCBhbmltYXRpb25zIGFyZSB0cmVhdGVkIGRpZmZlcmVudGx5IGNvbXBhcmVkIHRvIHN0cnVjdHVyYWwgYW5pbWF0aW9uc1xuICAgICAgICogICAgKGxpa2UgZW50ZXIsIG1vdmUgYW5kIGxlYXZlKSBzaW5jZSB0aGUgQ1NTIGNsYXNzZXMgbWF5IGJlIGFkZGVkL3JlbW92ZWQgYXQgZGlmZmVyZW50IHBvaW50c1xuICAgICAgICogICAgZGVwZW5kaW5nIGlmIENTUyBvciBKYXZhU2NyaXB0IGFuaW1hdGlvbnMgYXJlIHVzZWQuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IHRoZSBlbGVtZW50IHdoaWNoIHRoZSBDU1MgY2xhc3NlcyB3aWxsIGJlIGFwcGxpZWQgdG9cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhZGQgdGhlIENTUyBjbGFzcyhlcykgdGhhdCB3aWxsIGJlIGFkZGVkIChtdWx0aXBsZSBjbGFzc2VzIGFyZSBzZXBhcmF0ZWQgdmlhIHNwYWNlcylcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZW1vdmUgdGhlIENTUyBjbGFzcyhlcykgdGhhdCB3aWxsIGJlIHJlbW92ZWQgKG11bHRpcGxlIGNsYXNzZXMgYXJlIHNlcGFyYXRlZCB2aWEgc3BhY2VzKVxuICAgICAgICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2Ygb3B0aW9ucy9zdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgKiAgIFRoZSBvYmplY3QgY2FuIGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAgICpcbiAgICAgICAqICAgLSAqKmFkZENsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIGFkZCB0byBlbGVtZW50XG4gICAgICAgKiAgIC0gKipmcm9tKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgdGhlIGJlZ2lubmluZyBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgdG9gXG4gICAgICAgKiAgIC0gKipyZW1vdmVDbGFzcyoqIC0gYHtzdHJpbmd9YCAtIHNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3NlcyB0byByZW1vdmUgZnJvbSBlbGVtZW50XG4gICAgICAgKiAgIC0gKip0byoqIC0gYHtPYmplY3R9YCAtIENTUyBwcm9wZXJ0aWVzICYgdmFsdWVzIGF0IGVuZCBvZiBhbmltYXRpb24uIE11c3QgaGF2ZSBtYXRjaGluZyBgZnJvbWBcbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSB0aGUgYW5pbWF0aW9uIGNhbGxiYWNrIHByb21pc2VcbiAgICAgICAqL1xuICAgICAgc2V0Q2xhc3M6IGZ1bmN0aW9uKGVsZW1lbnQsIGFkZCwgcmVtb3ZlLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMuYWRkQ2xhc3MgPSBtZXJnZUNsYXNzZXMob3B0aW9ucy5hZGRDbGFzcywgYWRkKTtcbiAgICAgICAgb3B0aW9ucy5yZW1vdmVDbGFzcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLnJlbW92ZUNsYXNzLCByZW1vdmUpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnc2V0Q2xhc3MnLCBvcHRpb25zKTtcbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGFuaW1hdGUjYW5pbWF0ZVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb24gUGVyZm9ybXMgYW4gaW5saW5lIGFuaW1hdGlvbiBvbiB0aGUgZWxlbWVudCB3aGljaCBhcHBsaWVzIHRoZSBwcm92aWRlZCB0byBhbmQgZnJvbSBDU1Mgc3R5bGVzIHRvIHRoZSBlbGVtZW50LlxuICAgICAgICogSWYgYW55IGRldGVjdGVkIENTUyB0cmFuc2l0aW9uLCBrZXlmcmFtZSBvciBKYXZhU2NyaXB0IG1hdGNoZXMgdGhlIHByb3ZpZGVkIGNsYXNzTmFtZSB2YWx1ZSwgdGhlbiB0aGUgYW5pbWF0aW9uIHdpbGwgdGFrZVxuICAgICAgICogb24gdGhlIHByb3ZpZGVkIHN0eWxlcy4gRm9yIGV4YW1wbGUsIGlmIGEgdHJhbnNpdGlvbiBhbmltYXRpb24gaXMgc2V0IGZvciB0aGUgZ2l2ZW4gY2xhc3NOYW1lLCB0aGVuIHRoZSBwcm92aWRlZCBgZnJvbWAgYW5kXG4gICAgICAgKiBgdG9gIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgYWxvbmdzaWRlIHRoZSBnaXZlbiB0cmFuc2l0aW9uLiBJZiB0aGUgQ1NTIHN0eWxlIHByb3ZpZGVkIGluIGBmcm9tYCBkb2VzIG5vdCBoYXZlIGEgY29ycmVzcG9uZGluZ1xuICAgICAgICogc3R5bGUgaW4gYHRvYCwgdGhlIHN0eWxlIGluIGBmcm9tYCBpcyBhcHBsaWVkIGltbWVkaWF0ZWx5LCBhbmQgbm8gYW5pbWF0aW9uIGlzIHJ1bi5cbiAgICAgICAqIElmIGEgSmF2YVNjcmlwdCBhbmltYXRpb24gaXMgZGV0ZWN0ZWQgdGhlbiB0aGUgcHJvdmlkZWQgc3R5bGVzIHdpbGwgYmUgZ2l2ZW4gaW4gYXMgZnVuY3Rpb24gcGFyYW1ldGVycyBpbnRvIHRoZSBgYW5pbWF0ZWBcbiAgICAgICAqIG1ldGhvZCAob3IgYXMgcGFydCBvZiB0aGUgYG9wdGlvbnNgIHBhcmFtZXRlcik6XG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqIG5nTW9kdWxlLmFuaW1hdGlvbignLm15LWlubGluZS1hbmltYXRpb24nLCBmdW5jdGlvbigpIHtcbiAgICAgICAqICAgcmV0dXJuIHtcbiAgICAgICAqICAgICBhbmltYXRlIDogZnVuY3Rpb24oZWxlbWVudCwgZnJvbSwgdG8sIGRvbmUsIG9wdGlvbnMpIHtcbiAgICAgICAqICAgICAgIC8vYW5pbWF0aW9uXG4gICAgICAgKiAgICAgICBkb25lKCk7XG4gICAgICAgKiAgICAgfVxuICAgICAgICogICB9XG4gICAgICAgKiB9KTtcbiAgICAgICAqIGBgYFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RE9NRWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aGljaCB0aGUgQ1NTIHN0eWxlcyB3aWxsIGJlIGFwcGxpZWQgdG9cbiAgICAgICAqIEBwYXJhbSB7b2JqZWN0fSBmcm9tIHRoZSBmcm9tIChzdGFydGluZykgQ1NTIHN0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudCBhbmQgYWNyb3NzIHRoZSBhbmltYXRpb24uXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gdG8gdGhlIHRvIChkZXN0aW5hdGlvbikgQ1NTIHN0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudCBhbmQgYWNyb3NzIHRoZSBhbmltYXRpb24uXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IGNsYXNzTmFtZSBhbiBvcHRpb25hbCBDU1MgY2xhc3MgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgYW5pbWF0aW9uLiBJZlxuICAgICAgICogICAgdGhpcyB2YWx1ZSBpcyBsZWZ0IGFzIGVtcHR5IHRoZW4gYSBDU1MgY2xhc3Mgb2YgYG5nLWlubGluZS1hbmltYXRlYCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnQuXG4gICAgICAgKiAgICAoTm90ZSB0aGF0IGlmIG5vIGFuaW1hdGlvbiBpcyBkZXRlY3RlZCB0aGVuIHRoaXMgdmFsdWUgd2lsbCBub3QgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC4pXG4gICAgICAgKiBAcGFyYW0ge29iamVjdD19IG9wdGlvbnMgYW4gb3B0aW9uYWwgY29sbGVjdGlvbiBvZiBvcHRpb25zL3N0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byB0aGUgZWxlbWVudC5cbiAgICAgICAqICAgVGhlIG9iamVjdCBjYW4gaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgKlxuICAgICAgICogICAtICoqYWRkQ2xhc3MqKiAtIGB7c3RyaW5nfWAgLSBzcGFjZS1zZXBhcmF0ZWQgQ1NTIGNsYXNzZXMgdG8gYWRkIHRvIGVsZW1lbnRcbiAgICAgICAqICAgLSAqKmZyb20qKiAtIGB7T2JqZWN0fWAgLSBDU1MgcHJvcGVydGllcyAmIHZhbHVlcyBhdCB0aGUgYmVnaW5uaW5nIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGB0b2BcbiAgICAgICAqICAgLSAqKnJlbW92ZUNsYXNzKiogLSBge3N0cmluZ31gIC0gc3BhY2Utc2VwYXJhdGVkIENTUyBjbGFzc2VzIHRvIHJlbW92ZSBmcm9tIGVsZW1lbnRcbiAgICAgICAqICAgLSAqKnRvKiogLSBge09iamVjdH1gIC0gQ1NTIHByb3BlcnRpZXMgJiB2YWx1ZXMgYXQgZW5kIG9mIGFuaW1hdGlvbi4gTXVzdCBoYXZlIG1hdGNoaW5nIGBmcm9tYFxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm4ge1Byb21pc2V9IHRoZSBhbmltYXRpb24gY2FsbGJhY2sgcHJvbWlzZVxuICAgICAgICovXG4gICAgICBhbmltYXRlOiBmdW5jdGlvbihlbGVtZW50LCBmcm9tLCB0bywgY2xhc3NOYW1lLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBwcmVwYXJlQW5pbWF0ZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnMuZnJvbSA9IG9wdGlvbnMuZnJvbSA/IGV4dGVuZChvcHRpb25zLmZyb20sIGZyb20pIDogZnJvbTtcbiAgICAgICAgb3B0aW9ucy50byAgID0gb3B0aW9ucy50byAgID8gZXh0ZW5kKG9wdGlvbnMudG8sIHRvKSAgICAgOiB0bztcblxuICAgICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUgfHwgJ25nLWlubGluZS1hbmltYXRlJztcbiAgICAgICAgb3B0aW9ucy50ZW1wQ2xhc3NlcyA9IG1lcmdlQ2xhc3NlcyhvcHRpb25zLnRlbXBDbGFzc2VzLCBjbGFzc05hbWUpO1xuICAgICAgICByZXR1cm4gJCRhbmltYXRlUXVldWUucHVzaChlbGVtZW50LCAnYW5pbWF0ZScsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH07XG4gIH1dO1xufV07XG5cbnZhciAkJEFuaW1hdGVBc3luY1J1bkZhY3RvcnlQcm92aWRlciA9IC8qKiBAdGhpcyAqLyBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckJHJBRicsIGZ1bmN0aW9uKCQkckFGKSB7XG4gICAgdmFyIHdhaXRRdWV1ZSA9IFtdO1xuXG4gICAgZnVuY3Rpb24gd2FpdEZvclRpY2soZm4pIHtcbiAgICAgIHdhaXRRdWV1ZS5wdXNoKGZuKTtcbiAgICAgIGlmICh3YWl0UXVldWUubGVuZ3RoID4gMSkgcmV0dXJuO1xuICAgICAgJCRyQUYoZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgd2FpdFF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgd2FpdFF1ZXVlW2ldKCk7XG4gICAgICAgIH1cbiAgICAgICAgd2FpdFF1ZXVlID0gW107XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcGFzc2VkID0gZmFsc2U7XG4gICAgICB3YWl0Rm9yVGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgcGFzc2VkID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChwYXNzZWQpIHtcbiAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhaXRGb3JUaWNrKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICB9XTtcbn07XG5cbnZhciAkJEFuaW1hdGVSdW5uZXJGYWN0b3J5UHJvdmlkZXIgPSAvKiogQHRoaXMgKi8gZnVuY3Rpb24oKSB7XG4gIHRoaXMuJGdldCA9IFsnJHEnLCAnJHNuaWZmZXInLCAnJCRhbmltYXRlQXN5bmNSdW4nLCAnJCRpc0RvY3VtZW50SGlkZGVuJywgJyR0aW1lb3V0JyxcbiAgICAgICBmdW5jdGlvbigkcSwgICAkc25pZmZlciwgICAkJGFuaW1hdGVBc3luY1J1biwgICAkJGlzRG9jdW1lbnRIaWRkZW4sICAgJHRpbWVvdXQpIHtcblxuICAgIHZhciBJTklUSUFMX1NUQVRFID0gMDtcbiAgICB2YXIgRE9ORV9QRU5ESU5HX1NUQVRFID0gMTtcbiAgICB2YXIgRE9ORV9DT01QTEVURV9TVEFURSA9IDI7XG5cbiAgICBBbmltYXRlUnVubmVyLmNoYWluID0gZnVuY3Rpb24oY2hhaW4sIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuXG4gICAgICBuZXh0KCk7XG4gICAgICBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICBpZiAoaW5kZXggPT09IGNoYWluLmxlbmd0aCkge1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoYWluW2luZGV4XShmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgIGlmIChyZXNwb25zZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBBbmltYXRlUnVubmVyLmFsbCA9IGZ1bmN0aW9uKHJ1bm5lcnMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgdmFyIHN0YXR1cyA9IHRydWU7XG4gICAgICBmb3JFYWNoKHJ1bm5lcnMsIGZ1bmN0aW9uKHJ1bm5lcikge1xuICAgICAgICBydW5uZXIuZG9uZShvblByb2dyZXNzKTtcbiAgICAgIH0pO1xuXG4gICAgICBmdW5jdGlvbiBvblByb2dyZXNzKHJlc3BvbnNlKSB7XG4gICAgICAgIHN0YXR1cyA9IHN0YXR1cyAmJiByZXNwb25zZTtcbiAgICAgICAgaWYgKCsrY291bnQgPT09IHJ1bm5lcnMubGVuZ3RoKSB7XG4gICAgICAgICAgY2FsbGJhY2soc3RhdHVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBBbmltYXRlUnVubmVyKGhvc3QpIHtcbiAgICAgIHRoaXMuc2V0SG9zdChob3N0KTtcblxuICAgICAgdmFyIHJhZlRpY2sgPSAkJGFuaW1hdGVBc3luY1J1bigpO1xuICAgICAgdmFyIHRpbWVvdXRUaWNrID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgJHRpbWVvdXQoZm4sIDAsIGZhbHNlKTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2RvbmVDYWxsYmFja3MgPSBbXTtcbiAgICAgIHRoaXMuX3RpY2sgPSBmdW5jdGlvbihmbikge1xuICAgICAgICBpZiAoJCRpc0RvY3VtZW50SGlkZGVuKCkpIHtcbiAgICAgICAgICB0aW1lb3V0VGljayhmbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmFmVGljayhmbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB0aGlzLl9zdGF0ZSA9IDA7XG4gICAgfVxuXG4gICAgQW5pbWF0ZVJ1bm5lci5wcm90b3R5cGUgPSB7XG4gICAgICBzZXRIb3N0OiBmdW5jdGlvbihob3N0KSB7XG4gICAgICAgIHRoaXMuaG9zdCA9IGhvc3QgfHwge307XG4gICAgICB9LFxuXG4gICAgICBkb25lOiBmdW5jdGlvbihmbikge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09IERPTkVfQ09NUExFVEVfU1RBVEUpIHtcbiAgICAgICAgICBmbigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX2RvbmVDYWxsYmFja3MucHVzaChmbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIHByb2dyZXNzOiBub29wLFxuXG4gICAgICBnZXRQcm9taXNlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLnByb21pc2UpIHtcbiAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgdGhpcy5wcm9taXNlID0gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBzZWxmLmRvbmUoZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5wcm9taXNlO1xuICAgICAgfSxcblxuICAgICAgdGhlbjogZnVuY3Rpb24ocmVzb2x2ZUhhbmRsZXIsIHJlamVjdEhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJvbWlzZSgpLnRoZW4ocmVzb2x2ZUhhbmRsZXIsIHJlamVjdEhhbmRsZXIpO1xuICAgICAgfSxcblxuICAgICAgJ2NhdGNoJzogZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRQcm9taXNlKClbJ2NhdGNoJ10oaGFuZGxlcik7XG4gICAgICB9LFxuXG4gICAgICAnZmluYWxseSc6IGZ1bmN0aW9uKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UHJvbWlzZSgpWydmaW5hbGx5J10oaGFuZGxlcik7XG4gICAgICB9LFxuXG4gICAgICBwYXVzZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmhvc3QucGF1c2UpIHtcbiAgICAgICAgICB0aGlzLmhvc3QucGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgcmVzdW1lOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuaG9zdC5yZXN1bWUpIHtcbiAgICAgICAgICB0aGlzLmhvc3QucmVzdW1lKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIGVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLmhvc3QuZW5kKSB7XG4gICAgICAgICAgdGhpcy5ob3N0LmVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Jlc29sdmUodHJ1ZSk7XG4gICAgICB9LFxuXG4gICAgICBjYW5jZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5ob3N0LmNhbmNlbCkge1xuICAgICAgICAgIHRoaXMuaG9zdC5jYW5jZWwoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZXNvbHZlKGZhbHNlKTtcbiAgICAgIH0sXG5cbiAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmIChzZWxmLl9zdGF0ZSA9PT0gSU5JVElBTF9TVEFURSkge1xuICAgICAgICAgIHNlbGYuX3N0YXRlID0gRE9ORV9QRU5ESU5HX1NUQVRFO1xuICAgICAgICAgIHNlbGYuX3RpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzZWxmLl9yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgX3Jlc29sdmU6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSAhPT0gRE9ORV9DT01QTEVURV9TVEFURSkge1xuICAgICAgICAgIGZvckVhY2godGhpcy5fZG9uZUNhbGxiYWNrcywgZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgIGZuKHJlc3BvbnNlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLl9kb25lQ2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgdGhpcy5fc3RhdGUgPSBET05FX0NPTVBMRVRFX1NUQVRFO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBBbmltYXRlUnVubmVyO1xuICB9XTtcbn07XG5cbi8qIGV4cG9ydGVkICRDb3JlQW5pbWF0ZUNzc1Byb3ZpZGVyICovXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRhbmltYXRlQ3NzXG4gKiBAa2luZCBvYmplY3RcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIGlzIHRoZSBjb3JlIHZlcnNpb24gb2YgYCRhbmltYXRlQ3NzYC4gQnkgZGVmYXVsdCwgb25seSB3aGVuIHRoZSBgbmdBbmltYXRlYCBpcyBpbmNsdWRlZCxcbiAqIHRoZW4gdGhlIGAkYW5pbWF0ZUNzc2Agc2VydmljZSB3aWxsIGFjdHVhbGx5IHBlcmZvcm0gYW5pbWF0aW9ucy5cbiAqXG4gKiBDbGljayBoZXJlIHtAbGluayBuZ0FuaW1hdGUuJGFuaW1hdGVDc3MgdG8gcmVhZCB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgJGFuaW1hdGVDc3N9LlxuICovXG52YXIgJENvcmVBbmltYXRlQ3NzUHJvdmlkZXIgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckJHJBRicsICckcScsICckJEFuaW1hdGVSdW5uZXInLCBmdW5jdGlvbigkJHJBRiwgJHEsICQkQW5pbWF0ZVJ1bm5lcikge1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGVsZW1lbnQsIGluaXRpYWxPcHRpb25zKSB7XG4gICAgICAvLyBhbGwgb2YgdGhlIGFuaW1hdGlvbiBmdW5jdGlvbnMgc2hvdWxkIGNyZWF0ZVxuICAgICAgLy8gYSBjb3B5IG9mIHRoZSBvcHRpb25zIGRhdGEsIGhvd2V2ZXIsIGlmIGFcbiAgICAgIC8vIHBhcmVudCBzZXJ2aWNlIGhhcyBhbHJlYWR5IGNyZWF0ZWQgYSBjb3B5IHRoZW5cbiAgICAgIC8vIHdlIHNob3VsZCBzdGljayB0byB1c2luZyB0aGF0XG4gICAgICB2YXIgb3B0aW9ucyA9IGluaXRpYWxPcHRpb25zIHx8IHt9O1xuICAgICAgaWYgKCFvcHRpb25zLiQkcHJlcGFyZWQpIHtcbiAgICAgICAgb3B0aW9ucyA9IGNvcHkob3B0aW9ucyk7XG4gICAgICB9XG5cbiAgICAgIC8vIHRoZXJlIGlzIG5vIHBvaW50IGluIGFwcGx5aW5nIHRoZSBzdHlsZXMgc2luY2VcbiAgICAgIC8vIHRoZXJlIGlzIG5vIGFuaW1hdGlvbiB0aGF0IGdvZXMgb24gYXQgYWxsIGluXG4gICAgICAvLyB0aGlzIHZlcnNpb24gb2YgJGFuaW1hdGVDc3MuXG4gICAgICBpZiAob3B0aW9ucy5jbGVhbnVwU3R5bGVzKSB7XG4gICAgICAgIG9wdGlvbnMuZnJvbSA9IG9wdGlvbnMudG8gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5mcm9tKSB7XG4gICAgICAgIGVsZW1lbnQuY3NzKG9wdGlvbnMuZnJvbSk7XG4gICAgICAgIG9wdGlvbnMuZnJvbSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBjbG9zZWQsIHJ1bm5lciA9IG5ldyAkJEFuaW1hdGVSdW5uZXIoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0OiBydW4sXG4gICAgICAgIGVuZDogcnVuXG4gICAgICB9O1xuXG4gICAgICBmdW5jdGlvbiBydW4oKSB7XG4gICAgICAgICQkckFGKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGFwcGx5QW5pbWF0aW9uQ29udGVudHMoKTtcbiAgICAgICAgICBpZiAoIWNsb3NlZCkge1xuICAgICAgICAgICAgcnVubmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNsb3NlZCA9IHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhcHBseUFuaW1hdGlvbkNvbnRlbnRzKCkge1xuICAgICAgICBpZiAob3B0aW9ucy5hZGRDbGFzcykge1xuICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3Mob3B0aW9ucy5hZGRDbGFzcyk7XG4gICAgICAgICAgb3B0aW9ucy5hZGRDbGFzcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMucmVtb3ZlQ2xhc3MpIHtcbiAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKG9wdGlvbnMucmVtb3ZlQ2xhc3MpO1xuICAgICAgICAgIG9wdGlvbnMucmVtb3ZlQ2xhc3MgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnRvKSB7XG4gICAgICAgICAgZWxlbWVudC5jc3Mob3B0aW9ucy50byk7XG4gICAgICAgICAgb3B0aW9ucy50byA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XTtcbn07XG5cbi8qIGdsb2JhbCBzdHJpcEhhc2g6IHRydWUgKi9cblxuLyoqXG4gKiAhIFRoaXMgaXMgYSBwcml2YXRlIHVuZG9jdW1lbnRlZCBzZXJ2aWNlICFcbiAqXG4gKiBAbmFtZSAkYnJvd3NlclxuICogQHJlcXVpcmVzICRsb2dcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBvYmplY3QgaGFzIHR3byBnb2FsczpcbiAqXG4gKiAtIGhpZGUgYWxsIHRoZSBnbG9iYWwgc3RhdGUgaW4gdGhlIGJyb3dzZXIgY2F1c2VkIGJ5IHRoZSB3aW5kb3cgb2JqZWN0XG4gKiAtIGFic3RyYWN0IGF3YXkgYWxsIHRoZSBicm93c2VyIHNwZWNpZmljIGZlYXR1cmVzIGFuZCBpbmNvbnNpc3RlbmNpZXNcbiAqXG4gKiBGb3IgdGVzdHMgd2UgcHJvdmlkZSB7QGxpbmsgbmdNb2NrLiRicm93c2VyIG1vY2sgaW1wbGVtZW50YXRpb259IG9mIHRoZSBgJGJyb3dzZXJgXG4gKiBzZXJ2aWNlLCB3aGljaCBjYW4gYmUgdXNlZCBmb3IgY29udmVuaWVudCB0ZXN0aW5nIG9mIHRoZSBhcHBsaWNhdGlvbiB3aXRob3V0IHRoZSBpbnRlcmFjdGlvbiB3aXRoXG4gKiB0aGUgcmVhbCBicm93c2VyIGFwaXMuXG4gKi9cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IHdpbmRvdyBUaGUgZ2xvYmFsIHdpbmRvdyBvYmplY3QuXG4gKiBAcGFyYW0ge29iamVjdH0gZG9jdW1lbnQgalF1ZXJ5IHdyYXBwZWQgZG9jdW1lbnQuXG4gKiBAcGFyYW0ge29iamVjdH0gJGxvZyB3aW5kb3cuY29uc29sZSBvciBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBpbnRlcmZhY2UuXG4gKiBAcGFyYW0ge29iamVjdH0gJHNuaWZmZXIgJHNuaWZmZXIgc2VydmljZVxuICovXG5mdW5jdGlvbiBCcm93c2VyKHdpbmRvdywgZG9jdW1lbnQsICRsb2csICRzbmlmZmVyKSB7XG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgaGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5LFxuICAgICAgc2V0VGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0LFxuICAgICAgY2xlYXJUaW1lb3V0ID0gd2luZG93LmNsZWFyVGltZW91dCxcbiAgICAgIHBlbmRpbmdEZWZlcklkcyA9IHt9O1xuXG4gIHNlbGYuaXNNb2NrID0gZmFsc2U7XG5cbiAgdmFyIG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID0gMDtcbiAgdmFyIG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcyA9IFtdO1xuXG4gIC8vIFRPRE8odm9qdGEpOiByZW1vdmUgdGhpcyB0ZW1wb3JhcnkgYXBpXG4gIHNlbGYuJCRjb21wbGV0ZU91dHN0YW5kaW5nUmVxdWVzdCA9IGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0O1xuICBzZWxmLiQkaW5jT3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPSBmdW5jdGlvbigpIHsgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQrKzsgfTtcblxuICAvKipcbiAgICogRXhlY3V0ZXMgdGhlIGBmbmAgZnVuY3Rpb24oc3VwcG9ydHMgY3VycnlpbmcpIGFuZCBkZWNyZW1lbnRzIHRoZSBgb3V0c3RhbmRpbmdSZXF1ZXN0Q2FsbGJhY2tzYFxuICAgKiBjb3VudGVyLiBJZiB0aGUgY291bnRlciByZWFjaGVzIDAsIGFsbCB0aGUgYG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrc2AgYXJlIGV4ZWN1dGVkLlxuICAgKi9cbiAgZnVuY3Rpb24gY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoZm4pIHtcbiAgICB0cnkge1xuICAgICAgZm4uYXBwbHkobnVsbCwgc2xpY2VBcmdzKGFyZ3VtZW50cywgMSkpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBvdXRzdGFuZGluZ1JlcXVlc3RDb3VudC0tO1xuICAgICAgaWYgKG91dHN0YW5kaW5nUmVxdWVzdENvdW50ID09PSAwKSB7XG4gICAgICAgIHdoaWxlIChvdXRzdGFuZGluZ1JlcXVlc3RDYWxsYmFja3MubGVuZ3RoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcy5wb3AoKSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRsb2cuZXJyb3IoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SGFzaCh1cmwpIHtcbiAgICB2YXIgaW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICAgIHJldHVybiBpbmRleCA9PT0gLTEgPyAnJyA6IHVybC5zdWJzdHIoaW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqIE5vdGU6IHRoaXMgbWV0aG9kIGlzIHVzZWQgb25seSBieSBzY2VuYXJpbyBydW5uZXJcbiAgICogVE9ETyh2b2p0YSk6IHByZWZpeCB0aGlzIG1ldGhvZCB3aXRoICQkID9cbiAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBjYWxsYmFjayBGdW5jdGlvbiB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW4gbm8gb3V0c3RhbmRpbmcgcmVxdWVzdFxuICAgKi9cbiAgc2VsZi5ub3RpZnlXaGVuTm9PdXRzdGFuZGluZ1JlcXVlc3RzID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICBpZiAob3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQgPT09IDApIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHN0YW5kaW5nUmVxdWVzdENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICB9XG4gIH07XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gVVJMIEFQSVxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4gIHZhciBjYWNoZWRTdGF0ZSwgbGFzdEhpc3RvcnlTdGF0ZSxcbiAgICAgIGxhc3RCcm93c2VyVXJsID0gbG9jYXRpb24uaHJlZixcbiAgICAgIGJhc2VFbGVtZW50ID0gZG9jdW1lbnQuZmluZCgnYmFzZScpLFxuICAgICAgcGVuZGluZ0xvY2F0aW9uID0gbnVsbCxcbiAgICAgIGdldEN1cnJlbnRTdGF0ZSA9ICEkc25pZmZlci5oaXN0b3J5ID8gbm9vcCA6IGZ1bmN0aW9uIGdldEN1cnJlbnRTdGF0ZSgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gaGlzdG9yeS5zdGF0ZTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIE1TSUUgY2FuIHJlcG9ydGVkbHkgdGhyb3cgd2hlbiB0aGVyZSBpcyBubyBzdGF0ZSAoVU5DT05GSVJNRUQpLlxuICAgICAgICB9XG4gICAgICB9O1xuXG4gIGNhY2hlU3RhdGUoKTtcblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjdXJsXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBHRVRURVI6XG4gICAqIFdpdGhvdXQgYW55IGFyZ3VtZW50LCB0aGlzIG1ldGhvZCBqdXN0IHJldHVybnMgY3VycmVudCB2YWx1ZSBvZiBsb2NhdGlvbi5ocmVmLlxuICAgKlxuICAgKiBTRVRURVI6XG4gICAqIFdpdGggYXQgbGVhc3Qgb25lIGFyZ3VtZW50LCB0aGlzIG1ldGhvZCBzZXRzIHVybCB0byBuZXcgdmFsdWUuXG4gICAqIElmIGh0bWw1IGhpc3RvcnkgYXBpIHN1cHBvcnRlZCwgcHVzaFN0YXRlL3JlcGxhY2VTdGF0ZSBpcyB1c2VkLCBvdGhlcndpc2VcbiAgICogbG9jYXRpb24uaHJlZi9sb2NhdGlvbi5yZXBsYWNlIGlzIHVzZWQuXG4gICAqIFJldHVybnMgaXRzIG93biBpbnN0YW5jZSB0byBhbGxvdyBjaGFpbmluZ1xuICAgKlxuICAgKiBOT1RFOiB0aGlzIGFwaSBpcyBpbnRlbmRlZCBmb3IgdXNlIG9ubHkgYnkgdGhlICRsb2NhdGlvbiBzZXJ2aWNlLiBQbGVhc2UgdXNlIHRoZVxuICAgKiB7QGxpbmsgbmcuJGxvY2F0aW9uICRsb2NhdGlvbiBzZXJ2aWNlfSB0byBjaGFuZ2UgdXJsLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIE5ldyB1cmwgKHdoZW4gdXNlZCBhcyBzZXR0ZXIpXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHJlcGxhY2UgU2hvdWxkIG5ldyB1cmwgcmVwbGFjZSBjdXJyZW50IGhpc3RvcnkgcmVjb3JkP1xuICAgKiBAcGFyYW0ge29iamVjdD19IHN0YXRlIG9iamVjdCB0byB1c2Ugd2l0aCBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlXG4gICAqL1xuICBzZWxmLnVybCA9IGZ1bmN0aW9uKHVybCwgcmVwbGFjZSwgc3RhdGUpIHtcbiAgICAvLyBJbiBtb2Rlcm4gYnJvd3NlcnMgYGhpc3Rvcnkuc3RhdGVgIGlzIGBudWxsYCBieSBkZWZhdWx0OyB0cmVhdGluZyBpdCBzZXBhcmF0ZWx5XG4gICAgLy8gZnJvbSBgdW5kZWZpbmVkYCB3b3VsZCBjYXVzZSBgJGJyb3dzZXIudXJsKCcvZm9vJylgIHRvIGNoYW5nZSBgaGlzdG9yeS5zdGF0ZWBcbiAgICAvLyB0byB1bmRlZmluZWQgdmlhIGBwdXNoU3RhdGVgLiBJbnN0ZWFkLCBsZXQncyBjaGFuZ2UgYHVuZGVmaW5lZGAgdG8gYG51bGxgIGhlcmUuXG4gICAgaWYgKGlzVW5kZWZpbmVkKHN0YXRlKSkge1xuICAgICAgc3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIEFuZHJvaWQgQnJvd3NlciBCRkNhY2hlIGNhdXNlcyBsb2NhdGlvbiwgaGlzdG9yeSByZWZlcmVuY2UgdG8gYmVjb21lIHN0YWxlLlxuICAgIGlmIChsb2NhdGlvbiAhPT0gd2luZG93LmxvY2F0aW9uKSBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICBpZiAoaGlzdG9yeSAhPT0gd2luZG93Lmhpc3RvcnkpIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcblxuICAgIC8vIHNldHRlclxuICAgIGlmICh1cmwpIHtcbiAgICAgIHZhciBzYW1lU3RhdGUgPSBsYXN0SGlzdG9yeVN0YXRlID09PSBzdGF0ZTtcblxuICAgICAgLy8gRG9uJ3QgY2hhbmdlIGFueXRoaW5nIGlmIHByZXZpb3VzIGFuZCBjdXJyZW50IFVSTHMgYW5kIHN0YXRlcyBtYXRjaC4gVGhpcyBhbHNvIHByZXZlbnRzXG4gICAgICAvLyBJRTwxMCBmcm9tIGdldHRpbmcgaW50byByZWRpcmVjdCBsb29wIHdoZW4gaW4gTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwgbW9kZS5cbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2NvbW1pdC9mZmIyNzAxXG4gICAgICBpZiAobGFzdEJyb3dzZXJVcmwgPT09IHVybCAmJiAoISRzbmlmZmVyLmhpc3RvcnkgfHwgc2FtZVN0YXRlKSkge1xuICAgICAgICByZXR1cm4gc2VsZjtcbiAgICAgIH1cbiAgICAgIHZhciBzYW1lQmFzZSA9IGxhc3RCcm93c2VyVXJsICYmIHN0cmlwSGFzaChsYXN0QnJvd3NlclVybCkgPT09IHN0cmlwSGFzaCh1cmwpO1xuICAgICAgbGFzdEJyb3dzZXJVcmwgPSB1cmw7XG4gICAgICBsYXN0SGlzdG9yeVN0YXRlID0gc3RhdGU7XG4gICAgICAvLyBEb24ndCB1c2UgaGlzdG9yeSBBUEkgaWYgb25seSB0aGUgaGFzaCBjaGFuZ2VkXG4gICAgICAvLyBkdWUgdG8gYSBidWcgaW4gSUUxMC9JRTExIHdoaWNoIGxlYWRzXG4gICAgICAvLyB0byBub3QgZmlyaW5nIGEgYGhhc2hjaGFuZ2VgIG5vciBgcG9wc3RhdGVgIGV2ZW50XG4gICAgICAvLyBpbiBzb21lIGNhc2VzIChzZWUgIzkxNDMpLlxuICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkgJiYgKCFzYW1lQmFzZSB8fCAhc2FtZVN0YXRlKSkge1xuICAgICAgICBoaXN0b3J5W3JlcGxhY2UgPyAncmVwbGFjZVN0YXRlJyA6ICdwdXNoU3RhdGUnXShzdGF0ZSwgJycsIHVybCk7XG4gICAgICAgIGNhY2hlU3RhdGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghc2FtZUJhc2UpIHtcbiAgICAgICAgICBwZW5kaW5nTG9jYXRpb24gPSB1cmw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICBsb2NhdGlvbi5yZXBsYWNlKHVybCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXNhbWVCYXNlKSB7XG4gICAgICAgICAgbG9jYXRpb24uaHJlZiA9IHVybDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2NhdGlvbi5oYXNoID0gZ2V0SGFzaCh1cmwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsb2NhdGlvbi5ocmVmICE9PSB1cmwpIHtcbiAgICAgICAgICBwZW5kaW5nTG9jYXRpb24gPSB1cmw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgICAgcGVuZGluZ0xvY2F0aW9uID0gdXJsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgLy8gZ2V0dGVyXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIC0gcGVuZGluZ0xvY2F0aW9uIGlzIG5lZWRlZCBhcyBicm93c2VycyBkb24ndCBhbGxvdyB0byByZWFkIG91dFxuICAgICAgLy8gICB0aGUgbmV3IGxvY2F0aW9uLmhyZWYgaWYgYSByZWxvYWQgaGFwcGVuZWQgb3IgaWYgdGhlcmUgaXMgYSBidWcgbGlrZSBpbiBpT1MgOSAoc2VlXG4gICAgICAvLyAgIGh0dHBzOi8vb3BlbnJhZGFyLmFwcHNwb3QuY29tLzIyMTg2MTA5KS5cbiAgICAgIC8vIC0gdGhlIHJlcGxhY2VtZW50IGlzIGEgd29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NDA3MTcyXG4gICAgICByZXR1cm4gcGVuZGluZ0xvY2F0aW9uIHx8IGxvY2F0aW9uLmhyZWYucmVwbGFjZSgvJTI3L2csJ1xcJycpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjc3RhdGVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGEgZ2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gaGlzdG9yeS5zdGF0ZSBvciBudWxsIGlmIGhpc3Rvcnkuc3RhdGUgaXMgdW5kZWZpbmVkLlxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBzdGF0ZVxuICAgKi9cbiAgc2VsZi5zdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjYWNoZWRTdGF0ZTtcbiAgfTtcblxuICB2YXIgdXJsQ2hhbmdlTGlzdGVuZXJzID0gW10sXG4gICAgICB1cmxDaGFuZ2VJbml0ID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UoKSB7XG4gICAgcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcbiAgICBmaXJlU3RhdGVPclVybENoYW5nZSgpO1xuICB9XG5cbiAgLy8gVGhpcyB2YXJpYWJsZSBzaG91bGQgYmUgdXNlZCAqb25seSogaW5zaWRlIHRoZSBjYWNoZVN0YXRlIGZ1bmN0aW9uLlxuICB2YXIgbGFzdENhY2hlZFN0YXRlID0gbnVsbDtcbiAgZnVuY3Rpb24gY2FjaGVTdGF0ZSgpIHtcbiAgICAvLyBUaGlzIHNob3VsZCBiZSB0aGUgb25seSBwbGFjZSBpbiAkYnJvd3NlciB3aGVyZSBgaGlzdG9yeS5zdGF0ZWAgaXMgcmVhZC5cbiAgICBjYWNoZWRTdGF0ZSA9IGdldEN1cnJlbnRTdGF0ZSgpO1xuICAgIGNhY2hlZFN0YXRlID0gaXNVbmRlZmluZWQoY2FjaGVkU3RhdGUpID8gbnVsbCA6IGNhY2hlZFN0YXRlO1xuXG4gICAgLy8gUHJldmVudCBjYWxsYmFja3MgZm8gZmlyZSB0d2ljZSBpZiBib3RoIGhhc2hjaGFuZ2UgJiBwb3BzdGF0ZSB3ZXJlIGZpcmVkLlxuICAgIGlmIChlcXVhbHMoY2FjaGVkU3RhdGUsIGxhc3RDYWNoZWRTdGF0ZSkpIHtcbiAgICAgIGNhY2hlZFN0YXRlID0gbGFzdENhY2hlZFN0YXRlO1xuICAgIH1cblxuICAgIGxhc3RDYWNoZWRTdGF0ZSA9IGNhY2hlZFN0YXRlO1xuICAgIGxhc3RIaXN0b3J5U3RhdGUgPSBjYWNoZWRTdGF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpcmVTdGF0ZU9yVXJsQ2hhbmdlKCkge1xuICAgIHZhciBwcmV2TGFzdEhpc3RvcnlTdGF0ZSA9IGxhc3RIaXN0b3J5U3RhdGU7XG4gICAgY2FjaGVTdGF0ZSgpO1xuXG4gICAgaWYgKGxhc3RCcm93c2VyVXJsID09PSBzZWxmLnVybCgpICYmIHByZXZMYXN0SGlzdG9yeVN0YXRlID09PSBjYWNoZWRTdGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxhc3RCcm93c2VyVXJsID0gc2VsZi51cmwoKTtcbiAgICBsYXN0SGlzdG9yeVN0YXRlID0gY2FjaGVkU3RhdGU7XG4gICAgZm9yRWFjaCh1cmxDaGFuZ2VMaXN0ZW5lcnMsIGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG4gICAgICBsaXN0ZW5lcihzZWxmLnVybCgpLCBjYWNoZWRTdGF0ZSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQG5hbWUgJGJyb3dzZXIjb25VcmxDaGFuZ2VcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVyIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQsIHdoZW4gdXJsIGNoYW5nZXMuXG4gICAqXG4gICAqIEl0J3Mgb25seSBjYWxsZWQgd2hlbiB0aGUgdXJsIGlzIGNoYW5nZWQgZnJvbSBvdXRzaWRlIG9mIGFuZ3VsYXI6XG4gICAqIC0gdXNlciB0eXBlcyBkaWZmZXJlbnQgdXJsIGludG8gYWRkcmVzcyBiYXJcbiAgICogLSB1c2VyIGNsaWNrcyBvbiBoaXN0b3J5IChmb3J3YXJkL2JhY2spIGJ1dHRvblxuICAgKiAtIHVzZXIgY2xpY2tzIG9uIGEgbGlua1xuICAgKlxuICAgKiBJdCdzIG5vdCBjYWxsZWQgd2hlbiB1cmwgaXMgY2hhbmdlZCBieSAkYnJvd3Nlci51cmwoKSBtZXRob2RcbiAgICpcbiAgICogVGhlIGxpc3RlbmVyIGdldHMgY2FsbGVkIHdpdGggbmV3IHVybCBhcyBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIE5PVEU6IHRoaXMgYXBpIGlzIGludGVuZGVkIGZvciB1c2Ugb25seSBieSB0aGUgJGxvY2F0aW9uIHNlcnZpY2UuIFBsZWFzZSB1c2UgdGhlXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24gJGxvY2F0aW9uIHNlcnZpY2V9IHRvIG1vbml0b3IgdXJsIGNoYW5nZXMgaW4gYW5ndWxhciBhcHBzLlxuICAgKlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyl9IGxpc3RlbmVyIExpc3RlbmVyIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHVybCBjaGFuZ2VzLlxuICAgKiBAcmV0dXJuIHtmdW5jdGlvbihzdHJpbmcpfSBSZXR1cm5zIHRoZSByZWdpc3RlcmVkIGxpc3RlbmVyIGZuIC0gaGFuZHkgaWYgdGhlIGZuIGlzIGFub255bW91cy5cbiAgICovXG4gIHNlbGYub25VcmxDaGFuZ2UgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIC8vIFRPRE8odm9qdGEpOiByZWZhY3RvciB0byB1c2Ugbm9kZSdzIHN5bnRheCBmb3IgZXZlbnRzXG4gICAgaWYgKCF1cmxDaGFuZ2VJbml0KSB7XG4gICAgICAvLyBXZSBsaXN0ZW4gb24gYm90aCAoaGFzaGNoYW5nZS9wb3BzdGF0ZSkgd2hlbiBhdmFpbGFibGUsIGFzIHNvbWUgYnJvd3NlcnMgZG9uJ3RcbiAgICAgIC8vIGZpcmUgcG9wc3RhdGUgd2hlbiB1c2VyIGNoYW5nZXMgdGhlIGFkZHJlc3MgYmFyIGFuZCBkb24ndCBmaXJlIGhhc2hjaGFuZ2Ugd2hlbiB1cmxcbiAgICAgIC8vIGNoYW5nZWQgYnkgcHVzaC9yZXBsYWNlU3RhdGVcblxuICAgICAgLy8gaHRtbDUgaGlzdG9yeSBhcGkgLSBwb3BzdGF0ZSBldmVudFxuICAgICAgaWYgKCRzbmlmZmVyLmhpc3RvcnkpIGpxTGl0ZSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGNhY2hlU3RhdGVBbmRGaXJlVXJsQ2hhbmdlKTtcbiAgICAgIC8vIGhhc2hjaGFuZ2UgZXZlbnRcbiAgICAgIGpxTGl0ZSh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlJywgY2FjaGVTdGF0ZUFuZEZpcmVVcmxDaGFuZ2UpO1xuXG4gICAgICB1cmxDaGFuZ2VJbml0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB1cmxDaGFuZ2VMaXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG4gICAgcmV0dXJuIGNhbGxiYWNrO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBSZW1vdmUgcG9wc3RhdGUgYW5kIGhhc2hjaGFuZ2UgaGFuZGxlciBmcm9tIHdpbmRvdy5cbiAgICpcbiAgICogTk9URTogdGhpcyBhcGkgaXMgaW50ZW5kZWQgZm9yIHVzZSBvbmx5IGJ5ICRyb290U2NvcGUuXG4gICAqL1xuICBzZWxmLiQkYXBwbGljYXRpb25EZXN0cm95ZWQgPSBmdW5jdGlvbigpIHtcbiAgICBqcUxpdGUod2luZG93KS5vZmYoJ2hhc2hjaGFuZ2UgcG9wc3RhdGUnLCBjYWNoZVN0YXRlQW5kRmlyZVVybENoYW5nZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIHRoZSB1cmwgaGFzIGNoYW5nZWQgb3V0c2lkZSBvZiBBbmd1bGFyLlxuICAgKiBOZWVkcyB0byBiZSBleHBvcnRlZCB0byBiZSBhYmxlIHRvIGNoZWNrIGZvciBjaGFuZ2VzIHRoYXQgaGF2ZSBiZWVuIGRvbmUgaW4gc3luYyxcbiAgICogYXMgaGFzaGNoYW5nZS9wb3BzdGF0ZSBldmVudHMgZmlyZSBpbiBhc3luYy5cbiAgICovXG4gIHNlbGYuJCRjaGVja1VybENoYW5nZSA9IGZpcmVTdGF0ZU9yVXJsQ2hhbmdlO1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIE1pc2MgQVBJXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI2Jhc2VIcmVmXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXR1cm5zIGN1cnJlbnQgPGJhc2UgaHJlZj5cbiAgICogKGFsd2F5cyByZWxhdGl2ZSAtIHdpdGhvdXQgZG9tYWluKVxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY3VycmVudCBiYXNlIGhyZWZcbiAgICovXG4gIHNlbGYuYmFzZUhyZWYgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaHJlZiA9IGJhc2VFbGVtZW50LmF0dHIoJ2hyZWYnKTtcbiAgICByZXR1cm4gaHJlZiA/IGhyZWYucmVwbGFjZSgvXihodHRwcz86KT9cXC9cXC9bXi9dKi8sICcnKSA6ICcnO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmFtZSAkYnJvd3NlciNkZWZlclxuICAgKiBAcGFyYW0ge2Z1bmN0aW9uKCl9IGZuIEEgZnVuY3Rpb24sIHdobydzIGV4ZWN1dGlvbiBzaG91bGQgYmUgZGVmZXJyZWQuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gW2RlbGF5PTBdIG9mIG1pbGxpc2Vjb25kcyB0byBkZWZlciB0aGUgZnVuY3Rpb24gZXhlY3V0aW9uLlxuICAgKiBAcmV0dXJucyB7Kn0gRGVmZXJJZCB0aGF0IGNhbiBiZSB1c2VkIHRvIGNhbmNlbCB0aGUgdGFzayB2aWEgYCRicm93c2VyLmRlZmVyLmNhbmNlbCgpYC5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEV4ZWN1dGVzIGEgZm4gYXN5bmNocm9ub3VzbHkgdmlhIGBzZXRUaW1lb3V0KGZuLCBkZWxheSlgLlxuICAgKlxuICAgKiBVbmxpa2Ugd2hlbiBjYWxsaW5nIGBzZXRUaW1lb3V0YCBkaXJlY3RseSwgaW4gdGVzdCB0aGlzIGZ1bmN0aW9uIGlzIG1vY2tlZCBhbmQgaW5zdGVhZCBvZiB1c2luZ1xuICAgKiBgc2V0VGltZW91dGAgaW4gdGVzdHMsIHRoZSBmbnMgYXJlIHF1ZXVlZCBpbiBhbiBhcnJheSwgd2hpY2ggY2FuIGJlIHByb2dyYW1tYXRpY2FsbHkgZmx1c2hlZFxuICAgKiB2aWEgYCRicm93c2VyLmRlZmVyLmZsdXNoKClgLlxuICAgKlxuICAgKi9cbiAgc2VsZi5kZWZlciA9IGZ1bmN0aW9uKGZuLCBkZWxheSkge1xuICAgIHZhciB0aW1lb3V0SWQ7XG4gICAgb3V0c3RhbmRpbmdSZXF1ZXN0Q291bnQrKztcbiAgICB0aW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgZGVsZXRlIHBlbmRpbmdEZWZlcklkc1t0aW1lb3V0SWRdO1xuICAgICAgY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3QoZm4pO1xuICAgIH0sIGRlbGF5IHx8IDApO1xuICAgIHBlbmRpbmdEZWZlcklkc1t0aW1lb3V0SWRdID0gdHJ1ZTtcbiAgICByZXR1cm4gdGltZW91dElkO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuYW1lICRicm93c2VyI2RlZmVyLmNhbmNlbFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2FuY2VscyBhIGRlZmVycmVkIHRhc2sgaWRlbnRpZmllZCB3aXRoIGBkZWZlcklkYC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSBkZWZlcklkIFRva2VuIHJldHVybmVkIGJ5IHRoZSBgJGJyb3dzZXIuZGVmZXJgIGZ1bmN0aW9uLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgaGFzbid0IGV4ZWN1dGVkIHlldCBhbmQgd2FzIHN1Y2Nlc3NmdWxseVxuICAgKiAgICAgICAgICAgICAgICAgICAgY2FuY2VsZWQuXG4gICAqL1xuICBzZWxmLmRlZmVyLmNhbmNlbCA9IGZ1bmN0aW9uKGRlZmVySWQpIHtcbiAgICBpZiAocGVuZGluZ0RlZmVySWRzW2RlZmVySWRdKSB7XG4gICAgICBkZWxldGUgcGVuZGluZ0RlZmVySWRzW2RlZmVySWRdO1xuICAgICAgY2xlYXJUaW1lb3V0KGRlZmVySWQpO1xuICAgICAgY29tcGxldGVPdXRzdGFuZGluZ1JlcXVlc3Qobm9vcCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG59XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJEJyb3dzZXJQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyRsb2cnLCAnJHNuaWZmZXInLCAnJGRvY3VtZW50JyxcbiAgICAgIGZ1bmN0aW9uKCR3aW5kb3csICRsb2csICRzbmlmZmVyLCAkZG9jdW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBCcm93c2VyKCR3aW5kb3csICRkb2N1bWVudCwgJGxvZywgJHNuaWZmZXIpO1xuICAgICAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRjYWNoZUZhY3RvcnlcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBGYWN0b3J5IHRoYXQgY29uc3RydWN0cyB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0cyBhbmQgZ2l2ZXMgYWNjZXNzIHRvXG4gKiB0aGVtLlxuICpcbiAqIGBgYGpzXG4gKlxuICogIHZhciBjYWNoZSA9ICRjYWNoZUZhY3RvcnkoJ2NhY2hlSWQnKTtcbiAqICBleHBlY3QoJGNhY2hlRmFjdG9yeS5nZXQoJ2NhY2hlSWQnKSkudG9CZShjYWNoZSk7XG4gKiAgZXhwZWN0KCRjYWNoZUZhY3RvcnkuZ2V0KCdub1N1Y2hDYWNoZUlkJykpLm5vdC50b0JlRGVmaW5lZCgpO1xuICpcbiAqICBjYWNoZS5wdXQoXCJrZXlcIiwgXCJ2YWx1ZVwiKTtcbiAqICBjYWNoZS5wdXQoXCJhbm90aGVyIGtleVwiLCBcImFub3RoZXIgdmFsdWVcIik7XG4gKlxuICogIC8vIFdlJ3ZlIHNwZWNpZmllZCBubyBvcHRpb25zIG9uIGNyZWF0aW9uXG4gKiAgZXhwZWN0KGNhY2hlLmluZm8oKSkudG9FcXVhbCh7aWQ6ICdjYWNoZUlkJywgc2l6ZTogMn0pO1xuICpcbiAqIGBgYFxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY2FjaGVJZCBOYW1lIG9yIGlkIG9mIHRoZSBuZXdseSBjcmVhdGVkIGNhY2hlLlxuICogQHBhcmFtIHtvYmplY3Q9fSBvcHRpb25zIE9wdGlvbnMgb2JqZWN0IHRoYXQgc3BlY2lmaWVzIHRoZSBjYWNoZSBiZWhhdmlvci4gUHJvcGVydGllczpcbiAqXG4gKiAgIC0gYHtudW1iZXI9fWAgYGNhcGFjaXR5YCDigJQgdHVybnMgdGhlIGNhY2hlIGludG8gTFJVIGNhY2hlLlxuICpcbiAqIEByZXR1cm5zIHtvYmplY3R9IE5ld2x5IGNyZWF0ZWQgY2FjaGUgb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBzZXQgb2YgbWV0aG9kczpcbiAqXG4gKiAtIGB7b2JqZWN0fWAgYGluZm8oKWAg4oCUIFJldHVybnMgaWQsIHNpemUsIGFuZCBvcHRpb25zIG9mIGNhY2hlLlxuICogLSBge3sqfX1gIGBwdXQoe3N0cmluZ30ga2V5LCB7Kn0gdmFsdWUpYCDigJQgUHV0cyBhIG5ldyBrZXktdmFsdWUgcGFpciBpbnRvIHRoZSBjYWNoZSBhbmQgcmV0dXJuc1xuICogICBpdC5cbiAqIC0gYHt7Kn19YCBgZ2V0KHtzdHJpbmd9IGtleSlgIOKAlCBSZXR1cm5zIGNhY2hlZCB2YWx1ZSBmb3IgYGtleWAgb3IgdW5kZWZpbmVkIGZvciBjYWNoZSBtaXNzLlxuICogLSBge3ZvaWR9YCBgcmVtb3ZlKHtzdHJpbmd9IGtleSlgIOKAlCBSZW1vdmVzIGEga2V5LXZhbHVlIHBhaXIgZnJvbSB0aGUgY2FjaGUuXG4gKiAtIGB7dm9pZH1gIGByZW1vdmVBbGwoKWAg4oCUIFJlbW92ZXMgYWxsIGNhY2hlZCB2YWx1ZXMuXG4gKiAtIGB7dm9pZH1gIGBkZXN0cm95KClgIOKAlCBSZW1vdmVzIHJlZmVyZW5jZXMgdG8gdGhpcyBjYWNoZSBmcm9tICRjYWNoZUZhY3RvcnkuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImNhY2hlRXhhbXBsZUFwcFwiIG5hbWU9XCJjYWNoZS1mYWN0b3J5XCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiQ2FjaGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJuZXdDYWNoZUtleVwiIHBsYWNlaG9sZGVyPVwiS2V5XCI+XG4gICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJuZXdDYWNoZVZhbHVlXCIgcGxhY2Vob2xkZXI9XCJWYWx1ZVwiPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInB1dChuZXdDYWNoZUtleSwgbmV3Q2FjaGVWYWx1ZSlcIj5DYWNoZTwvYnV0dG9uPlxuXG4gICAgICAgICA8cCBuZy1pZj1cImtleXMubGVuZ3RoXCI+Q2FjaGVkIFZhbHVlczwvcD5cbiAgICAgICAgIDxkaXYgbmctcmVwZWF0PVwia2V5IGluIGtleXNcIj5cbiAgICAgICAgICAgPHNwYW4gbmctYmluZD1cImtleVwiPjwvc3Bhbj5cbiAgICAgICAgICAgPHNwYW4+OiA8L3NwYW4+XG4gICAgICAgICAgIDxiIG5nLWJpbmQ9XCJjYWNoZS5nZXQoa2V5KVwiPjwvYj5cbiAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICA8cD5DYWNoZSBJbmZvPC9wPlxuICAgICAgICAgPGRpdiBuZy1yZXBlYXQ9XCIoa2V5LCB2YWx1ZSkgaW4gY2FjaGUuaW5mbygpXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWJpbmQ9XCJrZXlcIj48L3NwYW4+XG4gICAgICAgICAgIDxzcGFuPjogPC9zcGFuPlxuICAgICAgICAgICA8YiBuZy1iaW5kPVwidmFsdWVcIj48L2I+XG4gICAgICAgICA8L2Rpdj5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2NhY2hlRXhhbXBsZUFwcCcsIFtdKS5cbiAgICAgICAgIGNvbnRyb2xsZXIoJ0NhY2hlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRjYWNoZUZhY3RvcnknLCBmdW5jdGlvbigkc2NvcGUsICRjYWNoZUZhY3RvcnkpIHtcbiAgICAgICAgICAgJHNjb3BlLmtleXMgPSBbXTtcbiAgICAgICAgICAgJHNjb3BlLmNhY2hlID0gJGNhY2hlRmFjdG9yeSgnY2FjaGVJZCcpO1xuICAgICAgICAgICAkc2NvcGUucHV0ID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzVW5kZWZpbmVkKCRzY29wZS5jYWNoZS5nZXQoa2V5KSkpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5rZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgJHNjb3BlLmNhY2hlLnB1dChrZXksIGFuZ3VsYXIuaXNVbmRlZmluZWQodmFsdWUpID8gbnVsbCA6IHZhbHVlKTtcbiAgICAgICAgICAgfTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgcCB7XG4gICAgICAgICBtYXJnaW46IDEwcHggMCAzcHg7XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbmZ1bmN0aW9uICRDYWNoZUZhY3RvcnlQcm92aWRlcigpIHtcblxuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2FjaGVzID0ge307XG5cbiAgICBmdW5jdGlvbiBjYWNoZUZhY3RvcnkoY2FjaGVJZCwgb3B0aW9ucykge1xuICAgICAgaWYgKGNhY2hlSWQgaW4gY2FjaGVzKSB7XG4gICAgICAgIHRocm93IG1pbkVycignJGNhY2hlRmFjdG9yeScpKCdpaWQnLCAnQ2FjaGVJZCBcXCd7MH1cXCcgaXMgYWxyZWFkeSB0YWtlbiEnLCBjYWNoZUlkKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNpemUgPSAwLFxuICAgICAgICAgIHN0YXRzID0gZXh0ZW5kKHt9LCBvcHRpb25zLCB7aWQ6IGNhY2hlSWR9KSxcbiAgICAgICAgICBkYXRhID0gY3JlYXRlTWFwKCksXG4gICAgICAgICAgY2FwYWNpdHkgPSAob3B0aW9ucyAmJiBvcHRpb25zLmNhcGFjaXR5KSB8fCBOdW1iZXIuTUFYX1ZBTFVFLFxuICAgICAgICAgIGxydUhhc2ggPSBjcmVhdGVNYXAoKSxcbiAgICAgICAgICBmcmVzaEVuZCA9IG51bGwsXG4gICAgICAgICAgc3RhbGVFbmQgPSBudWxsO1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyB0eXBlXG4gICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBIGNhY2hlIG9iamVjdCB1c2VkIHRvIHN0b3JlIGFuZCByZXRyaWV2ZSBkYXRhLCBwcmltYXJpbHkgdXNlZCBieVxuICAgICAgICoge0BsaW5rICRodHRwICRodHRwfSBhbmQgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6c2NyaXB0IHNjcmlwdH0gZGlyZWN0aXZlIHRvIGNhY2hlXG4gICAgICAgKiB0ZW1wbGF0ZXMgYW5kIG90aGVyIGRhdGEuXG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqICBhbmd1bGFyLm1vZHVsZSgnc3VwZXJDYWNoZScpXG4gICAgICAgKiAgICAuZmFjdG9yeSgnc3VwZXJDYWNoZScsIFsnJGNhY2hlRmFjdG9yeScsIGZ1bmN0aW9uKCRjYWNoZUZhY3RvcnkpIHtcbiAgICAgICAqICAgICAgcmV0dXJuICRjYWNoZUZhY3RvcnkoJ3N1cGVyLWNhY2hlJyk7XG4gICAgICAgKiAgICB9XSk7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKiBFeGFtcGxlIHRlc3Q6XG4gICAgICAgKlxuICAgICAgICogYGBganNcbiAgICAgICAqICBpdCgnc2hvdWxkIGJlaGF2ZSBsaWtlIGEgY2FjaGUnLCBpbmplY3QoZnVuY3Rpb24oc3VwZXJDYWNoZSkge1xuICAgICAgICogICAgc3VwZXJDYWNoZS5wdXQoJ2tleScsICd2YWx1ZScpO1xuICAgICAgICogICAgc3VwZXJDYWNoZS5wdXQoJ2Fub3RoZXIga2V5JywgJ2Fub3RoZXIgdmFsdWUnKTtcbiAgICAgICAqXG4gICAgICAgKiAgICBleHBlY3Qoc3VwZXJDYWNoZS5pbmZvKCkpLnRvRXF1YWwoe1xuICAgICAgICogICAgICBpZDogJ3N1cGVyLWNhY2hlJyxcbiAgICAgICAqICAgICAgc2l6ZTogMlxuICAgICAgICogICAgfSk7XG4gICAgICAgKlxuICAgICAgICogICAgc3VwZXJDYWNoZS5yZW1vdmUoJ2Fub3RoZXIga2V5Jyk7XG4gICAgICAgKiAgICBleHBlY3Qoc3VwZXJDYWNoZS5nZXQoJ2Fub3RoZXIga2V5JykpLnRvQmVVbmRlZmluZWQoKTtcbiAgICAgICAqXG4gICAgICAgKiAgICBzdXBlckNhY2hlLnJlbW92ZUFsbCgpO1xuICAgICAgICogICAgZXhwZWN0KHN1cGVyQ2FjaGUuaW5mbygpKS50b0VxdWFsKHtcbiAgICAgICAqICAgICAgaWQ6ICdzdXBlci1jYWNoZScsXG4gICAgICAgKiAgICAgIHNpemU6IDBcbiAgICAgICAqICAgIH0pO1xuICAgICAgICogIH0pKTtcbiAgICAgICAqIGBgYFxuICAgICAgICovXG4gICAgICByZXR1cm4gKGNhY2hlc1tjYWNoZUlkXSA9IHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI3B1dFxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogSW5zZXJ0cyBhIG5hbWVkIGVudHJ5IGludG8gdGhlIHtAbGluayAkY2FjaGVGYWN0b3J5LkNhY2hlIENhY2hlfSBvYmplY3QgdG8gYmVcbiAgICAgICAgICogcmV0cmlldmVkIGxhdGVyLCBhbmQgaW5jcmVtZW50aW5nIHRoZSBzaXplIG9mIHRoZSBjYWNoZSBpZiB0aGUga2V5IHdhcyBub3QgYWxyZWFkeVxuICAgICAgICAgKiBwcmVzZW50IGluIHRoZSBjYWNoZS4gSWYgYmVoYXZpbmcgbGlrZSBhbiBMUlUgY2FjaGUsIGl0IHdpbGwgYWxzbyByZW1vdmUgc3RhbGVcbiAgICAgICAgICogZW50cmllcyBmcm9tIHRoZSBzZXQuXG4gICAgICAgICAqXG4gICAgICAgICAqIEl0IHdpbGwgbm90IGluc2VydCB1bmRlZmluZWQgdmFsdWVzIGludG8gdGhlIGNhY2hlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgdW5kZXIgd2hpY2ggdGhlIGNhY2hlZCBkYXRhIGlzIHN0b3JlZC5cbiAgICAgICAgICogQHBhcmFtIHsqfSB2YWx1ZSB0aGUgdmFsdWUgdG8gc3RvcmUgYWxvbmdzaWRlIHRoZSBrZXkuIElmIGl0IGlzIHVuZGVmaW5lZCwgdGhlIGtleVxuICAgICAgICAgKiAgICB3aWxsIG5vdCBiZSBzdG9yZWQuXG4gICAgICAgICAqIEByZXR1cm5zIHsqfSB0aGUgdmFsdWUgc3RvcmVkLlxuICAgICAgICAgKi9cbiAgICAgICAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICAgIGlmIChjYXBhY2l0eSA8IE51bWJlci5NQVhfVkFMVUUpIHtcbiAgICAgICAgICAgIHZhciBscnVFbnRyeSA9IGxydUhhc2hba2V5XSB8fCAobHJ1SGFzaFtrZXldID0ge2tleToga2V5fSk7XG5cbiAgICAgICAgICAgIHJlZnJlc2gobHJ1RW50cnkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghKGtleSBpbiBkYXRhKSkgc2l6ZSsrO1xuICAgICAgICAgIGRhdGFba2V5XSA9IHZhbHVlO1xuXG4gICAgICAgICAgaWYgKHNpemUgPiBjYXBhY2l0eSkge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmUoc3RhbGVFbmQua2V5KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNnZXRcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJldHJpZXZlcyBuYW1lZCBkYXRhIHN0b3JlZCBpbiB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdC5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSB0aGUga2V5IG9mIHRoZSBkYXRhIHRvIGJlIHJldHJpZXZlZFxuICAgICAgICAgKiBAcmV0dXJucyB7Kn0gdGhlIHZhbHVlIHN0b3JlZC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgaWYgKGNhcGFjaXR5IDwgTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICAgICAgdmFyIGxydUVudHJ5ID0gbHJ1SGFzaFtrZXldO1xuXG4gICAgICAgICAgICBpZiAoIWxydUVudHJ5KSByZXR1cm47XG5cbiAgICAgICAgICAgIHJlZnJlc2gobHJ1RW50cnkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBkYXRhW2tleV07XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI3JlbW92ZVxuICAgICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogUmVtb3ZlcyBhbiBlbnRyeSBmcm9tIHRoZSB7QGxpbmsgJGNhY2hlRmFjdG9yeS5DYWNoZSBDYWNoZX0gb2JqZWN0LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IHRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGJlIHJlbW92ZWRcbiAgICAgICAgICovXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgaWYgKGNhcGFjaXR5IDwgTnVtYmVyLk1BWF9WQUxVRSkge1xuICAgICAgICAgICAgdmFyIGxydUVudHJ5ID0gbHJ1SGFzaFtrZXldO1xuXG4gICAgICAgICAgICBpZiAoIWxydUVudHJ5KSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChscnVFbnRyeSA9PT0gZnJlc2hFbmQpIGZyZXNoRW5kID0gbHJ1RW50cnkucDtcbiAgICAgICAgICAgIGlmIChscnVFbnRyeSA9PT0gc3RhbGVFbmQpIHN0YWxlRW5kID0gbHJ1RW50cnkubjtcbiAgICAgICAgICAgIGxpbmsobHJ1RW50cnkubixscnVFbnRyeS5wKTtcblxuICAgICAgICAgICAgZGVsZXRlIGxydUhhc2hba2V5XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIShrZXkgaW4gZGF0YSkpIHJldHVybjtcblxuICAgICAgICAgIGRlbGV0ZSBkYXRhW2tleV07XG4gICAgICAgICAgc2l6ZS0tO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNyZW1vdmVBbGxcbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIENsZWFycyB0aGUgY2FjaGUgb2JqZWN0IG9mIGFueSBlbnRyaWVzLlxuICAgICAgICAgKi9cbiAgICAgICAgcmVtb3ZlQWxsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkYXRhID0gY3JlYXRlTWFwKCk7XG4gICAgICAgICAgc2l6ZSA9IDA7XG4gICAgICAgICAgbHJ1SGFzaCA9IGNyZWF0ZU1hcCgpO1xuICAgICAgICAgIGZyZXNoRW5kID0gc3RhbGVFbmQgPSBudWxsO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAgICogQG5hbWUgJGNhY2hlRmFjdG9yeS5DYWNoZSNkZXN0cm95XG4gICAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgICAqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICAgKiBEZXN0cm95cyB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9IG9iamVjdCBlbnRpcmVseSxcbiAgICAgICAgICogcmVtb3ZpbmcgaXQgZnJvbSB0aGUge0BsaW5rICRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0gc2V0LlxuICAgICAgICAgKi9cbiAgICAgICAgZGVzdHJveTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZGF0YSA9IG51bGw7XG4gICAgICAgICAgc3RhdHMgPSBudWxsO1xuICAgICAgICAgIGxydUhhc2ggPSBudWxsO1xuICAgICAgICAgIGRlbGV0ZSBjYWNoZXNbY2FjaGVJZF07XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5LkNhY2hlI2luZm9cbiAgICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAgICpcbiAgICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgICAqIFJldHJpZXZlIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBhIHBhcnRpY3VsYXIge0BsaW5rICRjYWNoZUZhY3RvcnkuQ2FjaGUgQ2FjaGV9LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcmV0dXJucyB7b2JqZWN0fSBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICAgICAqICAgPHVsPlxuICAgICAgICAgKiAgICAgPGxpPioqaWQqKjogdGhlIGlkIG9mIHRoZSBjYWNoZSBpbnN0YW5jZTwvbGk+XG4gICAgICAgICAqICAgICA8bGk+KipzaXplKio6IHRoZSBudW1iZXIgb2YgZW50cmllcyBrZXB0IGluIHRoZSBjYWNoZSBpbnN0YW5jZTwvbGk+XG4gICAgICAgICAqICAgICA8bGk+KiouLi4qKjogYW55IGFkZGl0aW9uYWwgcHJvcGVydGllcyBmcm9tIHRoZSBvcHRpb25zIG9iamVjdCB3aGVuIGNyZWF0aW5nIHRoZVxuICAgICAgICAgKiAgICAgICBjYWNoZS48L2xpPlxuICAgICAgICAgKiAgIDwvdWw+XG4gICAgICAgICAqL1xuICAgICAgICBpbmZvOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBzdGF0cywge3NpemU6IHNpemV9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBtYWtlcyB0aGUgYGVudHJ5YCB0aGUgZnJlc2hFbmQgb2YgdGhlIExSVSBsaW5rZWQgbGlzdFxuICAgICAgICovXG4gICAgICBmdW5jdGlvbiByZWZyZXNoKGVudHJ5KSB7XG4gICAgICAgIGlmIChlbnRyeSAhPT0gZnJlc2hFbmQpIHtcbiAgICAgICAgICBpZiAoIXN0YWxlRW5kKSB7XG4gICAgICAgICAgICBzdGFsZUVuZCA9IGVudHJ5O1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhbGVFbmQgPT09IGVudHJ5KSB7XG4gICAgICAgICAgICBzdGFsZUVuZCA9IGVudHJ5Lm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbGluayhlbnRyeS5uLCBlbnRyeS5wKTtcbiAgICAgICAgICBsaW5rKGVudHJ5LCBmcmVzaEVuZCk7XG4gICAgICAgICAgZnJlc2hFbmQgPSBlbnRyeTtcbiAgICAgICAgICBmcmVzaEVuZC5uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG5cbiAgICAgIC8qKlxuICAgICAgICogYmlkaXJlY3Rpb25hbGx5IGxpbmtzIHR3byBlbnRyaWVzIG9mIHRoZSBMUlUgbGlua2VkIGxpc3RcbiAgICAgICAqL1xuICAgICAgZnVuY3Rpb24gbGluayhuZXh0RW50cnksIHByZXZFbnRyeSkge1xuICAgICAgICBpZiAobmV4dEVudHJ5ICE9PSBwcmV2RW50cnkpIHtcbiAgICAgICAgICBpZiAobmV4dEVudHJ5KSBuZXh0RW50cnkucCA9IHByZXZFbnRyeTsgLy9wIHN0YW5kcyBmb3IgcHJldmlvdXMsICdwcmV2JyBkaWRuJ3QgbWluaWZ5XG4gICAgICAgICAgaWYgKHByZXZFbnRyeSkgcHJldkVudHJ5Lm4gPSBuZXh0RW50cnk7IC8vbiBzdGFuZHMgZm9yIG5leHQsICduZXh0JyBkaWRuJ3QgbWluaWZ5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY2FjaGVGYWN0b3J5I2luZm9cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhbGwgdGhlIGNhY2hlcyB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IC0ga2V5LXZhbHVlIG1hcCBvZiBgY2FjaGVJZGAgdG8gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIGBjYWNoZSNpbmZvYFxuICAgKi9cbiAgICBjYWNoZUZhY3RvcnkuaW5mbyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGluZm8gPSB7fTtcbiAgICAgIGZvckVhY2goY2FjaGVzLCBmdW5jdGlvbihjYWNoZSwgY2FjaGVJZCkge1xuICAgICAgICBpbmZvW2NhY2hlSWRdID0gY2FjaGUuaW5mbygpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNhY2hlRmFjdG9yeSNnZXRcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEdldCBhY2Nlc3MgdG8gYSBjYWNoZSBvYmplY3QgYnkgdGhlIGBjYWNoZUlkYCB1c2VkIHdoZW4gaXQgd2FzIGNyZWF0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjYWNoZUlkIE5hbWUgb3IgaWQgb2YgYSBjYWNoZSB0byBhY2Nlc3MuXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IENhY2hlIG9iamVjdCBpZGVudGlmaWVkIGJ5IHRoZSBjYWNoZUlkIG9yIHVuZGVmaW5lZCBpZiBubyBzdWNoIGNhY2hlLlxuICAgKi9cbiAgICBjYWNoZUZhY3RvcnkuZ2V0ID0gZnVuY3Rpb24oY2FjaGVJZCkge1xuICAgICAgcmV0dXJuIGNhY2hlc1tjYWNoZUlkXTtcbiAgICB9O1xuXG5cbiAgICByZXR1cm4gY2FjaGVGYWN0b3J5O1xuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkdGVtcGxhdGVDYWNoZVxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBmaXJzdCB0aW1lIGEgdGVtcGxhdGUgaXMgdXNlZCwgaXQgaXMgbG9hZGVkIGluIHRoZSB0ZW1wbGF0ZSBjYWNoZSBmb3IgcXVpY2sgcmV0cmlldmFsLiBZb3VcbiAqIGNhbiBsb2FkIHRlbXBsYXRlcyBkaXJlY3RseSBpbnRvIHRoZSBjYWNoZSBpbiBhIGBzY3JpcHRgIHRhZywgb3IgYnkgY29uc3VtaW5nIHRoZVxuICogYCR0ZW1wbGF0ZUNhY2hlYCBzZXJ2aWNlIGRpcmVjdGx5LlxuICpcbiAqIEFkZGluZyB2aWEgdGhlIGBzY3JpcHRgIHRhZzpcbiAqXG4gKiBgYGBodG1sXG4gKiAgIDxzY3JpcHQgdHlwZT1cInRleHQvbmctdGVtcGxhdGVcIiBpZD1cInRlbXBsYXRlSWQuaHRtbFwiPlxuICogICAgIDxwPlRoaXMgaXMgdGhlIGNvbnRlbnQgb2YgdGhlIHRlbXBsYXRlPC9wPlxuICogICA8L3NjcmlwdD5cbiAqIGBgYFxuICpcbiAqICoqTm90ZToqKiB0aGUgYHNjcmlwdGAgdGFnIGNvbnRhaW5pbmcgdGhlIHRlbXBsYXRlIGRvZXMgbm90IG5lZWQgdG8gYmUgaW5jbHVkZWQgaW4gdGhlIGBoZWFkYCBvZlxuICogdGhlIGRvY3VtZW50LCBidXQgaXQgbXVzdCBiZSBhIGRlc2NlbmRlbnQgb2YgdGhlIHtAbGluayBuZy4kcm9vdEVsZW1lbnQgJHJvb3RFbGVtZW50fSAoSUUsXG4gKiBlbGVtZW50IHdpdGggbmctYXBwIGF0dHJpYnV0ZSksIG90aGVyd2lzZSB0aGUgdGVtcGxhdGUgd2lsbCBiZSBpZ25vcmVkLlxuICpcbiAqIEFkZGluZyB2aWEgdGhlIGAkdGVtcGxhdGVDYWNoZWAgc2VydmljZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIG15QXBwID0gYW5ndWxhci5tb2R1bGUoJ215QXBwJywgW10pO1xuICogbXlBcHAucnVuKGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gKiAgICR0ZW1wbGF0ZUNhY2hlLnB1dCgndGVtcGxhdGVJZC5odG1sJywgJ1RoaXMgaXMgdGhlIGNvbnRlbnQgb2YgdGhlIHRlbXBsYXRlJyk7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIFRvIHJldHJpZXZlIHRoZSB0ZW1wbGF0ZSBsYXRlciwgc2ltcGx5IHVzZSBpdCBpbiB5b3VyIGNvbXBvbmVudDpcbiAqIGBgYGpzXG4gKiBteUFwcC5jb21wb25lbnQoJ215Q29tcG9uZW50Jywge1xuICogICAgdGVtcGxhdGVVcmw6ICd0ZW1wbGF0ZUlkLmh0bWwnXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIG9yIGdldCBpdCB2aWEgdGhlIGAkdGVtcGxhdGVDYWNoZWAgc2VydmljZTpcbiAqIGBgYGpzXG4gKiAkdGVtcGxhdGVDYWNoZS5nZXQoJ3RlbXBsYXRlSWQuaHRtbCcpXG4gKiBgYGBcbiAqXG4gKiBTZWUge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgJGNhY2hlRmFjdG9yeX0uXG4gKlxuICovXG5mdW5jdGlvbiAkVGVtcGxhdGVDYWNoZVByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRjYWNoZUZhY3RvcnknLCBmdW5jdGlvbigkY2FjaGVGYWN0b3J5KSB7XG4gICAgcmV0dXJuICRjYWNoZUZhY3RvcnkoJ3RlbXBsYXRlcycpO1xuICB9XTtcbn1cblxuLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICogICAgIEFueSBjb21taXRzIHRvIHRoaXMgZmlsZSBzaG91bGQgYmUgcmV2aWV3ZWQgd2l0aCBzZWN1cml0eSBpbiBtaW5kLiAgKlxuICogICBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBjYW4gcG90ZW50aWFsbHkgY3JlYXRlIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4gKlxuICogICAgICAgICAgQW4gYXBwcm92YWwgZnJvbSAyIENvcmUgbWVtYmVycyB3aXRoIGhpc3Rvcnkgb2YgbW9kaWZ5aW5nICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBmaWxlIGlzIHJlcXVpcmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogIERvZXMgdGhlIGNoYW5nZSBzb21laG93IGFsbG93IGZvciBhcmJpdHJhcnkgamF2YXNjcmlwdCB0byBiZSBleGVjdXRlZD8gKlxuICogICAgT3IgYWxsb3dzIGZvciBzb21lb25lIHRvIGNoYW5nZSB0aGUgcHJvdG90eXBlIG9mIGJ1aWx0LWluIG9iamVjdHM/ICAgKlxuICogICAgIE9yIGdpdmVzIHVuZGVzaXJlZCBhY2Nlc3MgdG8gdmFyaWFibGVzIGxpa2UgZG9jdW1lbnQgb3Igd2luZG93PyAgICAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG4vKiAhIFZBUklBQkxFL0ZVTkNUSU9OIE5BTUlORyBDT05WRU5USU9OUyBUSEFUIEFQUExZIFRPIFRISVMgRklMRSFcbiAqXG4gKiBET00tcmVsYXRlZCB2YXJpYWJsZXM6XG4gKlxuICogLSBcIm5vZGVcIiAtIERPTSBOb2RlXG4gKiAtIFwiZWxlbWVudFwiIC0gRE9NIEVsZW1lbnQgb3IgTm9kZVxuICogLSBcIiRub2RlXCIgb3IgXCIkZWxlbWVudFwiIC0ganFMaXRlLXdyYXBwZWQgbm9kZSBvciBlbGVtZW50XG4gKlxuICpcbiAqIENvbXBpbGVyIHJlbGF0ZWQgc3R1ZmY6XG4gKlxuICogLSBcImxpbmtGblwiIC0gbGlua2luZyBmbiBvZiBhIHNpbmdsZSBkaXJlY3RpdmVcbiAqIC0gXCJub2RlTGlua0ZuXCIgLSBmdW5jdGlvbiB0aGF0IGFnZ3JlZ2F0ZXMgYWxsIGxpbmtpbmcgZm5zIGZvciBhIHBhcnRpY3VsYXIgbm9kZVxuICogLSBcImNoaWxkTGlua0ZuXCIgLSAgZnVuY3Rpb24gdGhhdCBhZ2dyZWdhdGVzIGFsbCBsaW5raW5nIGZucyBmb3IgY2hpbGQgbm9kZXMgb2YgYSBwYXJ0aWN1bGFyIG5vZGVcbiAqIC0gXCJjb21wb3NpdGVMaW5rRm5cIiAtIGZ1bmN0aW9uIHRoYXQgYWdncmVnYXRlcyBhbGwgbGlua2luZyBmbnMgZm9yIGEgY29tcGlsYXRpb24gcm9vdCAobm9kZUxpc3QpXG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkY29tcGlsZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbXBpbGVzIGFuIEhUTUwgc3RyaW5nIG9yIERPTSBpbnRvIGEgdGVtcGxhdGUgYW5kIHByb2R1Y2VzIGEgdGVtcGxhdGUgZnVuY3Rpb24sIHdoaWNoXG4gKiBjYW4gdGhlbiBiZSB1c2VkIHRvIGxpbmsge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgYHNjb3BlYH0gYW5kIHRoZSB0ZW1wbGF0ZSB0b2dldGhlci5cbiAqXG4gKiBUaGUgY29tcGlsYXRpb24gaXMgYSBwcm9jZXNzIG9mIHdhbGtpbmcgdGhlIERPTSB0cmVlIGFuZCBtYXRjaGluZyBET00gZWxlbWVudHMgdG9cbiAqIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIFRoaXMgZG9jdW1lbnQgaXMgYW4gaW4tZGVwdGggcmVmZXJlbmNlIG9mIGFsbCBkaXJlY3RpdmUgb3B0aW9ucy5cbiAqIEZvciBhIGdlbnRsZSBpbnRyb2R1Y3Rpb24gdG8gZGlyZWN0aXZlcyB3aXRoIGV4YW1wbGVzIG9mIGNvbW1vbiB1c2UgY2FzZXMsXG4gKiBzZWUgdGhlIHtAbGluayBndWlkZS9kaXJlY3RpdmUgZGlyZWN0aXZlIGd1aWRlfS5cbiAqIDwvZGl2PlxuICpcbiAqICMjIENvbXByZWhlbnNpdmUgRGlyZWN0aXZlIEFQSVxuICpcbiAqIFRoZXJlIGFyZSBtYW55IGRpZmZlcmVudCBvcHRpb25zIGZvciBhIGRpcmVjdGl2ZS5cbiAqXG4gKiBUaGUgZGlmZmVyZW5jZSByZXNpZGVzIGluIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZhY3RvcnkgZnVuY3Rpb24uXG4gKiBZb3UgY2FuIGVpdGhlciByZXR1cm4gYSB7QGxpbmsgJGNvbXBpbGUjZGlyZWN0aXZlLWRlZmluaXRpb24tb2JqZWN0IERpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdCAoc2VlIGJlbG93KX1cbiAqIHRoYXQgZGVmaW5lcyB0aGUgZGlyZWN0aXZlIHByb3BlcnRpZXMsIG9yIGp1c3QgdGhlIGBwb3N0TGlua2AgZnVuY3Rpb24gKGFsbCBvdGhlciBwcm9wZXJ0aWVzIHdpbGwgaGF2ZVxuICogdGhlIGRlZmF1bHQgdmFsdWVzKS5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtc3VjY2Vzc1wiPlxuICogKipCZXN0IFByYWN0aWNlOioqIEl0J3MgcmVjb21tZW5kZWQgdG8gdXNlIHRoZSBcImRpcmVjdGl2ZSBkZWZpbml0aW9uIG9iamVjdFwiIGZvcm0uXG4gKiA8L2Rpdj5cbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBkaXJlY3RpdmUgZGVjbGFyZWQgd2l0aCBhIERpcmVjdGl2ZSBEZWZpbml0aW9uIE9iamVjdDpcbiAqXG4gKiBgYGBqc1xuICogICB2YXIgbXlNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSguLi4pO1xuICpcbiAqICAgbXlNb2R1bGUuZGlyZWN0aXZlKCdkaXJlY3RpdmVOYW1lJywgZnVuY3Rpb24gZmFjdG9yeShpbmplY3RhYmxlcykge1xuICogICAgIHZhciBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0ID0ge1xuICogICAgICAge0BsaW5rICRjb21waWxlIy1wcmlvcml0eS0gcHJpb3JpdHl9OiAwLFxuICogICAgICAge0BsaW5rICRjb21waWxlIy10ZW1wbGF0ZS0gdGVtcGxhdGV9OiAnPGRpdj48L2Rpdj4nLCAvLyBvciAvLyBmdW5jdGlvbih0RWxlbWVudCwgdEF0dHJzKSB7IC4uLiB9LFxuICogICAgICAgLy8gb3JcbiAqICAgICAgIC8vIHtAbGluayAkY29tcGlsZSMtdGVtcGxhdGV1cmwtIHRlbXBsYXRlVXJsfTogJ2RpcmVjdGl2ZS5odG1sJywgLy8gb3IgLy8gZnVuY3Rpb24odEVsZW1lbnQsIHRBdHRycykgeyAuLi4gfSxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtdHJhbnNjbHVkZS0gdHJhbnNjbHVkZX06IGZhbHNlLFxuICogICAgICAge0BsaW5rICRjb21waWxlIy1yZXN0cmljdC0gcmVzdHJpY3R9OiAnQScsXG4gKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLXRlbXBsYXRlbmFtZXNwYWNlLSB0ZW1wbGF0ZU5hbWVzcGFjZX06ICdodG1sJyxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtc2NvcGUtIHNjb3BlfTogZmFsc2UsXG4gKiAgICAgICB7QGxpbmsgJGNvbXBpbGUjLWNvbnRyb2xsZXItIGNvbnRyb2xsZXJ9OiBmdW5jdGlvbigkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsICR0cmFuc2NsdWRlLCBvdGhlckluamVjdGFibGVzKSB7IC4uLiB9LFxuICogICAgICAge0BsaW5rICRjb21waWxlIy1jb250cm9sbGVyYXMtIGNvbnRyb2xsZXJBc306ICdzdHJpbmdJZGVudGlmaWVyJyxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtYmluZHRvY29udHJvbGxlci0gYmluZFRvQ29udHJvbGxlcn06IGZhbHNlLFxuICogICAgICAge0BsaW5rICRjb21waWxlIy1yZXF1aXJlLSByZXF1aXJlfTogJ3NpYmxpbmdEaXJlY3RpdmVOYW1lJywgLy8gb3IgLy8gWydecGFyZW50RGlyZWN0aXZlTmFtZScsICc/b3B0aW9uYWxEaXJlY3RpdmVOYW1lJywgJz9eb3B0aW9uYWxQYXJlbnQnXSxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtbXVsdGllbGVtZW50LSBtdWx0aUVsZW1lbnR9OiBmYWxzZSxcbiAqICAgICAgIHtAbGluayAkY29tcGlsZSMtY29tcGlsZS0gY29tcGlsZX06IGZ1bmN0aW9uIGNvbXBpbGUodEVsZW1lbnQsIHRBdHRycywgdHJhbnNjbHVkZSkge1xuICogICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgICB7QGxpbmsgJGNvbXBpbGUjcHJlLWxpbmtpbmctZnVuY3Rpb24gcHJlfTogZnVuY3Rpb24gcHJlTGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycywgY29udHJvbGxlcikgeyAuLi4gfSxcbiAqICAgICAgICAgICAge0BsaW5rICRjb21waWxlI3Bvc3QtbGlua2luZy1mdW5jdGlvbiBwb3N0fTogZnVuY3Rpb24gcG9zdExpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIpIHsgLi4uIH1cbiAqICAgICAgICAgfVxuICogICAgICAgICAvLyBvclxuICogICAgICAgICAvLyByZXR1cm4gZnVuY3Rpb24gcG9zdExpbmsoIC4uLiApIHsgLi4uIH1cbiAqICAgICAgIH0sXG4gKiAgICAgICAvLyBvclxuICogICAgICAgLy8ge0BsaW5rICRjb21waWxlIy1saW5rLSBsaW5rfToge1xuICogICAgICAgLy8gIHtAbGluayAkY29tcGlsZSNwcmUtbGlua2luZy1mdW5jdGlvbiBwcmV9OiBmdW5jdGlvbiBwcmVMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9LFxuICogICAgICAgLy8gIHtAbGluayAkY29tcGlsZSNwb3N0LWxpbmtpbmctZnVuY3Rpb24gcG9zdH06IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzLCBjb250cm9sbGVyKSB7IC4uLiB9XG4gKiAgICAgICAvLyB9XG4gKiAgICAgICAvLyBvclxuICogICAgICAgLy8ge0BsaW5rICRjb21waWxlIy1saW5rLSBsaW5rfTogZnVuY3Rpb24gcG9zdExpbmsoIC4uLiApIHsgLi4uIH1cbiAqICAgICB9O1xuICogICAgIHJldHVybiBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0O1xuICogICB9KTtcbiAqIGBgYFxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogQW55IHVuc3BlY2lmaWVkIG9wdGlvbnMgd2lsbCB1c2UgdGhlIGRlZmF1bHQgdmFsdWUuIFlvdSBjYW4gc2VlIHRoZSBkZWZhdWx0IHZhbHVlcyBiZWxvdy5cbiAqIDwvZGl2PlxuICpcbiAqIFRoZXJlZm9yZSB0aGUgYWJvdmUgY2FuIGJlIHNpbXBsaWZpZWQgYXM6XG4gKlxuICogYGBganNcbiAqICAgdmFyIG15TW9kdWxlID0gYW5ndWxhci5tb2R1bGUoLi4uKTtcbiAqXG4gKiAgIG15TW9kdWxlLmRpcmVjdGl2ZSgnZGlyZWN0aXZlTmFtZScsIGZ1bmN0aW9uIGZhY3RvcnkoaW5qZWN0YWJsZXMpIHtcbiAqICAgICB2YXIgZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdCA9IHtcbiAqICAgICAgIGxpbms6IGZ1bmN0aW9uIHBvc3RMaW5rKHNjb3BlLCBpRWxlbWVudCwgaUF0dHJzKSB7IC4uLiB9XG4gKiAgICAgfTtcbiAqICAgICByZXR1cm4gZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdDtcbiAqICAgICAvLyBvclxuICogICAgIC8vIHJldHVybiBmdW5jdGlvbiBwb3N0TGluayhzY29wZSwgaUVsZW1lbnQsIGlBdHRycykgeyAuLi4gfVxuICogICB9KTtcbiAqIGBgYFxuICpcbiAqICMjIyBMaWZlLWN5Y2xlIGhvb2tzXG4gKiBEaXJlY3RpdmUgY29udHJvbGxlcnMgY2FuIHByb3ZpZGUgdGhlIGZvbGxvd2luZyBtZXRob2RzIHRoYXQgYXJlIGNhbGxlZCBieSBBbmd1bGFyIGF0IHBvaW50cyBpbiB0aGUgbGlmZS1jeWNsZSBvZiB0aGVcbiAqIGRpcmVjdGl2ZTpcbiAqICogYCRvbkluaXQoKWAgLSBDYWxsZWQgb24gZWFjaCBjb250cm9sbGVyIGFmdGVyIGFsbCB0aGUgY29udHJvbGxlcnMgb24gYW4gZWxlbWVudCBoYXZlIGJlZW4gY29uc3RydWN0ZWQgYW5kXG4gKiAgIGhhZCB0aGVpciBiaW5kaW5ncyBpbml0aWFsaXplZCAoYW5kIGJlZm9yZSB0aGUgcHJlICZhbXA7IHBvc3QgbGlua2luZyBmdW5jdGlvbnMgZm9yIHRoZSBkaXJlY3RpdmVzIG9uXG4gKiAgIHRoaXMgZWxlbWVudCkuIFRoaXMgaXMgYSBnb29kIHBsYWNlIHRvIHB1dCBpbml0aWFsaXphdGlvbiBjb2RlIGZvciB5b3VyIGNvbnRyb2xsZXIuXG4gKiAqIGAkb25DaGFuZ2VzKGNoYW5nZXNPYmopYCAtIENhbGxlZCB3aGVuZXZlciBvbmUtd2F5IChgPGApIG9yIGludGVycG9sYXRpb24gKGBAYCkgYmluZGluZ3MgYXJlIHVwZGF0ZWQuIFRoZVxuICogICBgY2hhbmdlc09iamAgaXMgYSBoYXNoIHdob3NlIGtleXMgYXJlIHRoZSBuYW1lcyBvZiB0aGUgYm91bmQgcHJvcGVydGllcyB0aGF0IGhhdmUgY2hhbmdlZCwgYW5kIHRoZSB2YWx1ZXMgYXJlIGFuXG4gKiAgIG9iamVjdCBvZiB0aGUgZm9ybSBgeyBjdXJyZW50VmFsdWUsIHByZXZpb3VzVmFsdWUsIGlzRmlyc3RDaGFuZ2UoKSB9YC4gVXNlIHRoaXMgaG9vayB0byB0cmlnZ2VyIHVwZGF0ZXMgd2l0aGluIGFcbiAqICAgY29tcG9uZW50IHN1Y2ggYXMgY2xvbmluZyB0aGUgYm91bmQgdmFsdWUgdG8gcHJldmVudCBhY2NpZGVudGFsIG11dGF0aW9uIG9mIHRoZSBvdXRlciB2YWx1ZS4gTm90ZSB0aGF0IHRoaXMgd2lsbFxuICogICBhbHNvIGJlIGNhbGxlZCB3aGVuIHlvdXIgYmluZGluZ3MgYXJlIGluaXRpYWxpemVkLlxuICogKiBgJGRvQ2hlY2soKWAgLSBDYWxsZWQgb24gZWFjaCB0dXJuIG9mIHRoZSBkaWdlc3QgY3ljbGUuIFByb3ZpZGVzIGFuIG9wcG9ydHVuaXR5IHRvIGRldGVjdCBhbmQgYWN0IG9uXG4gKiAgIGNoYW5nZXMuIEFueSBhY3Rpb25zIHRoYXQgeW91IHdpc2ggdG8gdGFrZSBpbiByZXNwb25zZSB0byB0aGUgY2hhbmdlcyB0aGF0IHlvdSBkZXRlY3QgbXVzdCBiZVxuICogICBpbnZva2VkIGZyb20gdGhpcyBob29rOyBpbXBsZW1lbnRpbmcgdGhpcyBoYXMgbm8gZWZmZWN0IG9uIHdoZW4gYCRvbkNoYW5nZXNgIGlzIGNhbGxlZC4gRm9yIGV4YW1wbGUsIHRoaXMgaG9va1xuICogICBjb3VsZCBiZSB1c2VmdWwgaWYgeW91IHdpc2ggdG8gcGVyZm9ybSBhIGRlZXAgZXF1YWxpdHkgY2hlY2ssIG9yIHRvIGNoZWNrIGEgRGF0ZSBvYmplY3QsIGNoYW5nZXMgdG8gd2hpY2ggd291bGQgbm90XG4gKiAgIGJlIGRldGVjdGVkIGJ5IEFuZ3VsYXIncyBjaGFuZ2UgZGV0ZWN0b3IgYW5kIHRodXMgbm90IHRyaWdnZXIgYCRvbkNoYW5nZXNgLiBUaGlzIGhvb2sgaXMgaW52b2tlZCB3aXRoIG5vIGFyZ3VtZW50cztcbiAqICAgaWYgZGV0ZWN0aW5nIGNoYW5nZXMsIHlvdSBtdXN0IHN0b3JlIHRoZSBwcmV2aW91cyB2YWx1ZShzKSBmb3IgY29tcGFyaXNvbiB0byB0aGUgY3VycmVudCB2YWx1ZXMuXG4gKiAqIGAkb25EZXN0cm95KClgIC0gQ2FsbGVkIG9uIGEgY29udHJvbGxlciB3aGVuIGl0cyBjb250YWluaW5nIHNjb3BlIGlzIGRlc3Ryb3llZC4gVXNlIHRoaXMgaG9vayBmb3IgcmVsZWFzaW5nXG4gKiAgIGV4dGVybmFsIHJlc291cmNlcywgd2F0Y2hlcyBhbmQgZXZlbnQgaGFuZGxlcnMuIE5vdGUgdGhhdCBjb21wb25lbnRzIGhhdmUgdGhlaXIgYCRvbkRlc3Ryb3koKWAgaG9va3MgY2FsbGVkIGluXG4gKiAgIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBgJHNjb3BlLiRicm9hZGNhc3RgIGV2ZW50cyBhcmUgdHJpZ2dlcmVkLCB3aGljaCBpcyB0b3AgZG93bi4gVGhpcyBtZWFucyB0aGF0IHBhcmVudFxuICogICBjb21wb25lbnRzIHdpbGwgaGF2ZSB0aGVpciBgJG9uRGVzdHJveSgpYCBob29rIGNhbGxlZCBiZWZvcmUgY2hpbGQgY29tcG9uZW50cy5cbiAqICogYCRwb3N0TGluaygpYCAtIENhbGxlZCBhZnRlciB0aGlzIGNvbnRyb2xsZXIncyBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW4gaGF2ZSBiZWVuIGxpbmtlZC4gU2ltaWxhciB0byB0aGUgcG9zdC1saW5rXG4gKiAgIGZ1bmN0aW9uIHRoaXMgaG9vayBjYW4gYmUgdXNlZCB0byBzZXQgdXAgRE9NIGV2ZW50IGhhbmRsZXJzIGFuZCBkbyBkaXJlY3QgRE9NIG1hbmlwdWxhdGlvbi5cbiAqICAgTm90ZSB0aGF0IGNoaWxkIGVsZW1lbnRzIHRoYXQgY29udGFpbiBgdGVtcGxhdGVVcmxgIGRpcmVjdGl2ZXMgd2lsbCBub3QgaGF2ZSBiZWVuIGNvbXBpbGVkIGFuZCBsaW5rZWQgc2luY2VcbiAqICAgdGhleSBhcmUgd2FpdGluZyBmb3IgdGhlaXIgdGVtcGxhdGUgdG8gbG9hZCBhc3luY2hyb25vdXNseSBhbmQgdGhlaXIgb3duIGNvbXBpbGF0aW9uIGFuZCBsaW5raW5nIGhhcyBiZWVuXG4gKiAgIHN1c3BlbmRlZCB1bnRpbCB0aGF0IG9jY3Vycy5cbiAqXG4gKiAjIyMjIENvbXBhcmlzb24gd2l0aCBBbmd1bGFyIDIgbGlmZS1jeWNsZSBob29rc1xuICogQW5ndWxhciAyIGFsc28gdXNlcyBsaWZlLWN5Y2xlIGhvb2tzIGZvciBpdHMgY29tcG9uZW50cy4gV2hpbGUgdGhlIEFuZ3VsYXIgMSBsaWZlLWN5Y2xlIGhvb2tzIGFyZSBzaW1pbGFyIHRoZXJlIGFyZVxuICogc29tZSBkaWZmZXJlbmNlcyB0aGF0IHlvdSBzaG91bGQgYmUgYXdhcmUgb2YsIGVzcGVjaWFsbHkgd2hlbiBpdCBjb21lcyB0byBtb3ZpbmcgeW91ciBjb2RlIGZyb20gQW5ndWxhciAxIHRvIEFuZ3VsYXIgMjpcbiAqXG4gKiAqIEFuZ3VsYXIgMSBob29rcyBhcmUgcHJlZml4ZWQgd2l0aCBgJGAsIHN1Y2ggYXMgYCRvbkluaXRgLiBBbmd1bGFyIDIgaG9va3MgYXJlIHByZWZpeGVkIHdpdGggYG5nYCwgc3VjaCBhcyBgbmdPbkluaXRgLlxuICogKiBBbmd1bGFyIDEgaG9va3MgY2FuIGJlIGRlZmluZWQgb24gdGhlIGNvbnRyb2xsZXIgcHJvdG90eXBlIG9yIGFkZGVkIHRvIHRoZSBjb250cm9sbGVyIGluc2lkZSBpdHMgY29uc3RydWN0b3IuXG4gKiAgIEluIEFuZ3VsYXIgMiB5b3UgY2FuIG9ubHkgZGVmaW5lIGhvb2tzIG9uIHRoZSBwcm90b3R5cGUgb2YgdGhlIENvbXBvbmVudCBjbGFzcy5cbiAqICogRHVlIHRvIHRoZSBkaWZmZXJlbmNlcyBpbiBjaGFuZ2UtZGV0ZWN0aW9uLCB5b3UgbWF5IGdldCBtYW55IG1vcmUgY2FsbHMgdG8gYCRkb0NoZWNrYCBpbiBBbmd1bGFyIDEgdGhhbiB5b3Ugd291bGQgdG9cbiAqICAgYG5nRG9DaGVja2AgaW4gQW5ndWxhciAyXG4gKiAqIENoYW5nZXMgdG8gdGhlIG1vZGVsIGluc2lkZSBgJGRvQ2hlY2tgIHdpbGwgdHJpZ2dlciBuZXcgdHVybnMgb2YgdGhlIGRpZ2VzdCBsb29wLCB3aGljaCB3aWxsIGNhdXNlIHRoZSBjaGFuZ2VzIHRvIGJlXG4gKiAgIHByb3BhZ2F0ZWQgdGhyb3VnaG91dCB0aGUgYXBwbGljYXRpb24uXG4gKiAgIEFuZ3VsYXIgMiBkb2VzIG5vdCBhbGxvdyB0aGUgYG5nRG9DaGVja2AgaG9vayB0byB0cmlnZ2VyIGEgY2hhbmdlIG91dHNpZGUgb2YgdGhlIGNvbXBvbmVudC4gSXQgd2lsbCBlaXRoZXIgdGhyb3cgYW5cbiAqICAgZXJyb3Igb3IgZG8gbm90aGluZyBkZXBlbmRpbmcgdXBvbiB0aGUgc3RhdGUgb2YgYGVuYWJsZVByb2RNb2RlKClgLlxuICpcbiAqICMjIyMgTGlmZS1jeWNsZSBob29rIGV4YW1wbGVzXG4gKlxuICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB5b3UgY2FuIGNoZWNrIGZvciBtdXRhdGlvbnMgdG8gYSBEYXRlIG9iamVjdCBldmVuIHRob3VnaCB0aGUgaWRlbnRpdHkgb2YgdGhlIG9iamVjdFxuICogaGFzIG5vdCBjaGFuZ2VkLlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJkb0NoZWNrRGF0ZUV4YW1wbGVcIiBtb2R1bGU9XCJkby1jaGVjay1tb2R1bGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgIGFuZ3VsYXIubW9kdWxlKCdkby1jaGVjay1tb2R1bGUnLCBbXSlcbiAqICAgICAgIC5jb21wb25lbnQoJ2FwcCcsIHtcbiAqICAgICAgICAgdGVtcGxhdGU6XG4gKiAgICAgICAgICAgJ01vbnRoOiA8aW5wdXQgbmctbW9kZWw9XCIkY3RybC5tb250aFwiIG5nLWNoYW5nZT1cIiRjdHJsLnVwZGF0ZURhdGUoKVwiPicgK1xuICogICAgICAgICAgICdEYXRlOiB7eyAkY3RybC5kYXRlIH19JyArXG4gKiAgICAgICAgICAgJzx0ZXN0IGRhdGU9XCIkY3RybC5kYXRlXCI+PC90ZXN0PicsXG4gKiAgICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgIHRoaXMuZGF0ZSA9IG5ldyBEYXRlKCk7XG4gKiAgICAgICAgICAgdGhpcy5tb250aCA9IHRoaXMuZGF0ZS5nZXRNb250aCgpO1xuICogICAgICAgICAgIHRoaXMudXBkYXRlRGF0ZSA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgdGhpcy5kYXRlLnNldE1vbnRoKHRoaXMubW9udGgpO1xuICogICAgICAgICAgIH07XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH0pXG4gKiAgICAgICAuY29tcG9uZW50KCd0ZXN0Jywge1xuICogICAgICAgICBiaW5kaW5nczogeyBkYXRlOiAnPCcgfSxcbiAqICAgICAgICAgdGVtcGxhdGU6XG4gKiAgICAgICAgICAgJzxwcmU+e3sgJGN0cmwubG9nIHwganNvbiB9fTwvcHJlPicsXG4gKiAgICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgIHZhciBwcmV2aW91c1ZhbHVlO1xuICogICAgICAgICAgIHRoaXMubG9nID0gW107XG4gKiAgICAgICAgICAgdGhpcy4kZG9DaGVjayA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IHRoaXMuZGF0ZSAmJiB0aGlzLmRhdGUudmFsdWVPZigpO1xuICogICAgICAgICAgICAgaWYgKHByZXZpb3VzVmFsdWUgIT09IGN1cnJlbnRWYWx1ZSkge1xuICogICAgICAgICAgICAgICB0aGlzLmxvZy5wdXNoKCdkb0NoZWNrOiBkYXRlIG11dGF0ZWQ6ICcgKyB0aGlzLmRhdGUpO1xuICogICAgICAgICAgICAgICBwcmV2aW91c1ZhbHVlID0gY3VycmVudFZhbHVlO1xuICogICAgICAgICAgICAgfVxuICogICAgICAgICAgIH07XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPGFwcD48L2FwcD5cbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIFRoaXMgZXhhbXBsZSBzaG93IGhvdyB5b3UgbWlnaHQgdXNlIGAkZG9DaGVja2AgdG8gdHJpZ2dlciBjaGFuZ2VzIGluIHlvdXIgY29tcG9uZW50J3MgaW5wdXRzIGV2ZW4gaWYgdGhlXG4gKiBhY3R1YWwgaWRlbnRpdHkgb2YgdGhlIGNvbXBvbmVudCBkb2Vzbid0IGNoYW5nZS4gKEJlIGF3YXJlIHRoYXQgY2xvbmluZyBhbmQgZGVlcCBlcXVhbGl0eSBjaGVja3Mgb24gbGFyZ2VcbiAqIGFycmF5cyBvciBvYmplY3RzIGNhbiBoYXZlIGEgbmVnYXRpdmUgaW1wYWN0IG9uIHlvdXIgYXBwbGljYXRpb24gcGVyZm9ybWFuY2UpXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cImRvQ2hlY2tBcnJheUV4YW1wbGVcIiBtb2R1bGU9XCJkby1jaGVjay1tb2R1bGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8ZGl2IG5nLWluaXQ9XCJpdGVtcyA9IFtdXCI+XG4gKiAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiaXRlbXMucHVzaChpdGVtcy5sZW5ndGgpXCI+QWRkIEl0ZW08L2J1dHRvbj5cbiAqICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJpdGVtcyA9IFtdXCI+UmVzZXQgSXRlbXM8L2J1dHRvbj5cbiAqICAgICAgIDxwcmU+e3sgaXRlbXMgfX08L3ByZT5cbiAqICAgICAgIDx0ZXN0IGl0ZW1zPVwiaXRlbXNcIj48L3Rlc3Q+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgICBhbmd1bGFyLm1vZHVsZSgnZG8tY2hlY2stbW9kdWxlJywgW10pXG4gKiAgICAgICAgLmNvbXBvbmVudCgndGVzdCcsIHtcbiAqICAgICAgICAgIGJpbmRpbmdzOiB7IGl0ZW1zOiAnPCcgfSxcbiAqICAgICAgICAgIHRlbXBsYXRlOlxuICogICAgICAgICAgICAnPHByZT57eyAkY3RybC5sb2cgfCBqc29uIH19PC9wcmU+JyxcbiAqICAgICAgICAgIGNvbnRyb2xsZXI6IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICB0aGlzLmxvZyA9IFtdO1xuICpcbiAqICAgICAgICAgICAgdGhpcy4kZG9DaGVjayA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgICAgIGlmICh0aGlzLml0ZW1zX3JlZiAhPT0gdGhpcy5pdGVtcykge1xuICogICAgICAgICAgICAgICAgdGhpcy5sb2cucHVzaCgnZG9DaGVjazogaXRlbXMgY2hhbmdlZCcpO1xuICogICAgICAgICAgICAgICAgdGhpcy5pdGVtc19yZWYgPSB0aGlzLml0ZW1zO1xuICogICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuZXF1YWxzKHRoaXMuaXRlbXNfY2xvbmUsIHRoaXMuaXRlbXMpKSB7XG4gKiAgICAgICAgICAgICAgICB0aGlzLmxvZy5wdXNoKCdkb0NoZWNrOiBpdGVtcyBtdXRhdGVkJyk7XG4gKiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zX2Nsb25lID0gYW5ndWxhci5jb3B5KHRoaXMuaXRlbXMpO1xuICogICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICAgfTtcbiAqICAgICAgICAgIH1cbiAqICAgICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqXG4gKiAjIyMgRGlyZWN0aXZlIERlZmluaXRpb24gT2JqZWN0XG4gKlxuICogVGhlIGRpcmVjdGl2ZSBkZWZpbml0aW9uIG9iamVjdCBwcm92aWRlcyBpbnN0cnVjdGlvbnMgdG8gdGhlIHtAbGluayBuZy4kY29tcGlsZVxuICogY29tcGlsZXJ9LiBUaGUgYXR0cmlidXRlcyBhcmU6XG4gKlxuICogIyMjIyBgbXVsdGlFbGVtZW50YFxuICogV2hlbiB0aGlzIHByb3BlcnR5IGlzIHNldCB0byB0cnVlIChkZWZhdWx0IGlzIGBmYWxzZWApLCB0aGUgSFRNTCBjb21waWxlciB3aWxsIGNvbGxlY3QgRE9NIG5vZGVzIGJldHdlZW5cbiAqIG5vZGVzIHdpdGggdGhlIGF0dHJpYnV0ZXMgYGRpcmVjdGl2ZS1uYW1lLXN0YXJ0YCBhbmQgYGRpcmVjdGl2ZS1uYW1lLWVuZGAsIGFuZCBncm91cCB0aGVtXG4gKiB0b2dldGhlciBhcyB0aGUgZGlyZWN0aXZlIGVsZW1lbnRzLiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IHRoaXMgZmVhdHVyZSBiZSB1c2VkIG9uIGRpcmVjdGl2ZXNcbiAqIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgYmVoYXZpb3JhbCAoc3VjaCBhcyB7QGxpbmsgbmdDbGlja30pLCBhbmQgd2hpY2hcbiAqIGRvIG5vdCBtYW5pcHVsYXRlIG9yIHJlcGxhY2UgY2hpbGQgbm9kZXMgKHN1Y2ggYXMge0BsaW5rIG5nSW5jbHVkZX0pLlxuICpcbiAqICMjIyMgYHByaW9yaXR5YFxuICogV2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUgZGlyZWN0aXZlcyBkZWZpbmVkIG9uIGEgc2luZ2xlIERPTSBlbGVtZW50LCBzb21ldGltZXMgaXRcbiAqIGlzIG5lY2Vzc2FyeSB0byBzcGVjaWZ5IHRoZSBvcmRlciBpbiB3aGljaCB0aGUgZGlyZWN0aXZlcyBhcmUgYXBwbGllZC4gVGhlIGBwcmlvcml0eWAgaXMgdXNlZFxuICogdG8gc29ydCB0aGUgZGlyZWN0aXZlcyBiZWZvcmUgdGhlaXIgYGNvbXBpbGVgIGZ1bmN0aW9ucyBnZXQgY2FsbGVkLiBQcmlvcml0eSBpcyBkZWZpbmVkIGFzIGFcbiAqIG51bWJlci4gRGlyZWN0aXZlcyB3aXRoIGdyZWF0ZXIgbnVtZXJpY2FsIGBwcmlvcml0eWAgYXJlIGNvbXBpbGVkIGZpcnN0LiBQcmUtbGluayBmdW5jdGlvbnNcbiAqIGFyZSBhbHNvIHJ1biBpbiBwcmlvcml0eSBvcmRlciwgYnV0IHBvc3QtbGluayBmdW5jdGlvbnMgYXJlIHJ1biBpbiByZXZlcnNlIG9yZGVyLiBUaGUgb3JkZXJcbiAqIG9mIGRpcmVjdGl2ZXMgd2l0aCB0aGUgc2FtZSBwcmlvcml0eSBpcyB1bmRlZmluZWQuIFRoZSBkZWZhdWx0IHByaW9yaXR5IGlzIGAwYC5cbiAqXG4gKiAjIyMjIGB0ZXJtaW5hbGBcbiAqIElmIHNldCB0byB0cnVlIHRoZW4gdGhlIGN1cnJlbnQgYHByaW9yaXR5YCB3aWxsIGJlIHRoZSBsYXN0IHNldCBvZiBkaXJlY3RpdmVzXG4gKiB3aGljaCB3aWxsIGV4ZWN1dGUgKGFueSBkaXJlY3RpdmVzIGF0IHRoZSBjdXJyZW50IHByaW9yaXR5IHdpbGwgc3RpbGwgZXhlY3V0ZVxuICogYXMgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiBvbiBzYW1lIGBwcmlvcml0eWAgaXMgdW5kZWZpbmVkKS4gTm90ZSB0aGF0IGV4cHJlc3Npb25zXG4gKiBhbmQgb3RoZXIgZGlyZWN0aXZlcyB1c2VkIGluIHRoZSBkaXJlY3RpdmUncyB0ZW1wbGF0ZSB3aWxsIGFsc28gYmUgZXhjbHVkZWQgZnJvbSBleGVjdXRpb24uXG4gKlxuICogIyMjIyBgc2NvcGVgXG4gKiBUaGUgc2NvcGUgcHJvcGVydHkgY2FuIGJlIGBmYWxzZWAsIGB0cnVlYCwgb3IgYW4gb2JqZWN0OlxuICpcbiAqICogKipgZmFsc2VgIChkZWZhdWx0KToqKiBObyBzY29wZSB3aWxsIGJlIGNyZWF0ZWQgZm9yIHRoZSBkaXJlY3RpdmUuIFRoZSBkaXJlY3RpdmUgd2lsbCB1c2UgaXRzXG4gKiBwYXJlbnQncyBzY29wZS5cbiAqXG4gKiAqICoqYHRydWVgOioqIEEgbmV3IGNoaWxkIHNjb3BlIHRoYXQgcHJvdG90eXBpY2FsbHkgaW5oZXJpdHMgZnJvbSBpdHMgcGFyZW50IHdpbGwgYmUgY3JlYXRlZCBmb3JcbiAqIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50LiBJZiBtdWx0aXBsZSBkaXJlY3RpdmVzIG9uIHRoZSBzYW1lIGVsZW1lbnQgcmVxdWVzdCBhIG5ldyBzY29wZSxcbiAqIG9ubHkgb25lIG5ldyBzY29wZSBpcyBjcmVhdGVkLlxuICpcbiAqICogKipgey4uLn1gIChhbiBvYmplY3QgaGFzaCk6KiogQSBuZXcgXCJpc29sYXRlXCIgc2NvcGUgaXMgY3JlYXRlZCBmb3IgdGhlIGRpcmVjdGl2ZSdzIHRlbXBsYXRlLlxuICogVGhlICdpc29sYXRlJyBzY29wZSBkaWZmZXJzIGZyb20gbm9ybWFsIHNjb3BlIGluIHRoYXQgaXQgZG9lcyBub3QgcHJvdG90eXBpY2FsbHlcbiAqIGluaGVyaXQgZnJvbSBpdHMgcGFyZW50IHNjb3BlLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGNyZWF0aW5nIHJldXNhYmxlIGNvbXBvbmVudHMsIHdoaWNoIHNob3VsZCBub3RcbiAqIGFjY2lkZW50YWxseSByZWFkIG9yIG1vZGlmeSBkYXRhIGluIHRoZSBwYXJlbnQgc2NvcGUuIE5vdGUgdGhhdCBhbiBpc29sYXRlIHNjb3BlXG4gKiBkaXJlY3RpdmUgd2l0aG91dCBhIGB0ZW1wbGF0ZWAgb3IgYHRlbXBsYXRlVXJsYCB3aWxsIG5vdCBhcHBseSB0aGUgaXNvbGF0ZSBzY29wZVxuICogdG8gaXRzIGNoaWxkcmVuIGVsZW1lbnRzLlxuICpcbiAqIFRoZSAnaXNvbGF0ZScgc2NvcGUgb2JqZWN0IGhhc2ggZGVmaW5lcyBhIHNldCBvZiBsb2NhbCBzY29wZSBwcm9wZXJ0aWVzIGRlcml2ZWQgZnJvbSBhdHRyaWJ1dGVzIG9uIHRoZVxuICogZGlyZWN0aXZlJ3MgZWxlbWVudC4gVGhlc2UgbG9jYWwgcHJvcGVydGllcyBhcmUgdXNlZnVsIGZvciBhbGlhc2luZyB2YWx1ZXMgZm9yIHRlbXBsYXRlcy4gVGhlIGtleXMgaW5cbiAqIHRoZSBvYmplY3QgaGFzaCBtYXAgdG8gdGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IG9uIHRoZSBpc29sYXRlIHNjb3BlOyB0aGUgdmFsdWVzIGRlZmluZSBob3cgdGhlIHByb3BlcnR5XG4gKiBpcyBib3VuZCB0byB0aGUgcGFyZW50IHNjb3BlLCB2aWEgbWF0Y2hpbmcgYXR0cmlidXRlcyBvbiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudDpcbiAqXG4gKiAqIGBAYCBvciBgQGF0dHJgIC0gYmluZCBhIGxvY2FsIHNjb3BlIHByb3BlcnR5IHRvIHRoZSB2YWx1ZSBvZiBET00gYXR0cmlidXRlLiBUaGUgcmVzdWx0IGlzXG4gKiAgIGFsd2F5cyBhIHN0cmluZyBzaW5jZSBET00gYXR0cmlidXRlcyBhcmUgc3RyaW5ncy4gSWYgbm8gYGF0dHJgIG5hbWUgaXMgc3BlY2lmaWVkIHRoZW4gdGhlXG4gKiAgIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlIGxvY2FsIG5hbWUuIEdpdmVuIGA8bXktY29tcG9uZW50XG4gKiAgIG15LWF0dHI9XCJoZWxsbyB7e25hbWV9fVwiPmAgYW5kIHRoZSBpc29sYXRlIHNjb3BlIGRlZmluaXRpb24gYHNjb3BlOiB7IGxvY2FsTmFtZTonQG15QXR0cicgfWAsXG4gKiAgIHRoZSBkaXJlY3RpdmUncyBzY29wZSBwcm9wZXJ0eSBgbG9jYWxOYW1lYCB3aWxsIHJlZmxlY3QgdGhlIGludGVycG9sYXRlZCB2YWx1ZSBvZiBgaGVsbG9cbiAqICAge3tuYW1lfX1gLiBBcyB0aGUgYG5hbWVgIGF0dHJpYnV0ZSBjaGFuZ2VzIHNvIHdpbGwgdGhlIGBsb2NhbE5hbWVgIHByb3BlcnR5IG9uIHRoZSBkaXJlY3RpdmUnc1xuICogICBzY29wZS4gVGhlIGBuYW1lYCBpcyByZWFkIGZyb20gdGhlIHBhcmVudCBzY29wZSAobm90IHRoZSBkaXJlY3RpdmUncyBzY29wZSkuXG4gKlxuICogKiBgPWAgb3IgYD1hdHRyYCAtIHNldCB1cCBhIGJpZGlyZWN0aW9uYWwgYmluZGluZyBiZXR3ZWVuIGEgbG9jYWwgc2NvcGUgcHJvcGVydHkgYW5kIGFuIGV4cHJlc3Npb25cbiAqICAgcGFzc2VkIHZpYSB0aGUgYXR0cmlidXRlIGBhdHRyYC4gVGhlIGV4cHJlc3Npb24gaXMgZXZhbHVhdGVkIGluIHRoZSBjb250ZXh0IG9mIHRoZSBwYXJlbnQgc2NvcGUuXG4gKiAgIElmIG5vIGBhdHRyYCBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBsb2NhbFxuICogICBuYW1lLiBHaXZlbiBgPG15LWNvbXBvbmVudCBteS1hdHRyPVwicGFyZW50TW9kZWxcIj5gIGFuZCB0aGUgaXNvbGF0ZSBzY29wZSBkZWZpbml0aW9uIGBzY29wZToge1xuICogICBsb2NhbE1vZGVsOiAnPW15QXR0cicgfWAsIHRoZSBwcm9wZXJ0eSBgbG9jYWxNb2RlbGAgb24gdGhlIGRpcmVjdGl2ZSdzIHNjb3BlIHdpbGwgcmVmbGVjdCB0aGVcbiAqICAgdmFsdWUgb2YgYHBhcmVudE1vZGVsYCBvbiB0aGUgcGFyZW50IHNjb3BlLiBDaGFuZ2VzIHRvIGBwYXJlbnRNb2RlbGAgd2lsbCBiZSByZWZsZWN0ZWQgaW5cbiAqICAgYGxvY2FsTW9kZWxgIGFuZCB2aWNlIHZlcnNhLiBPcHRpb25hbCBhdHRyaWJ1dGVzIHNob3VsZCBiZSBtYXJrZWQgYXMgc3VjaCB3aXRoIGEgcXVlc3Rpb24gbWFyazpcbiAqICAgYD0/YCBvciBgPT9hdHRyYC4gSWYgdGhlIGJpbmRpbmcgZXhwcmVzc2lvbiBpcyBub24tYXNzaWduYWJsZSwgb3IgaWYgdGhlIGF0dHJpYnV0ZSBpc24ndFxuICogICBvcHRpb25hbCBhbmQgZG9lc24ndCBleGlzdCwgYW4gZXhjZXB0aW9uICh7QGxpbmsgZXJyb3IvJGNvbXBpbGUvbm9uYXNzaWduIGAkY29tcGlsZTpub25hc3NpZ25gfSlcbiAqICAgd2lsbCBiZSB0aHJvd24gdXBvbiBkaXNjb3ZlcmluZyBjaGFuZ2VzIHRvIHRoZSBsb2NhbCB2YWx1ZSwgc2luY2UgaXQgd2lsbCBiZSBpbXBvc3NpYmxlIHRvIHN5bmNcbiAqICAgdGhlbSBiYWNrIHRvIHRoZSBwYXJlbnQgc2NvcGUuIEJ5IGRlZmF1bHQsIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggYCR3YXRjaGB9XG4gKiAgIG1ldGhvZCBpcyB1c2VkIGZvciB0cmFja2luZyBjaGFuZ2VzLCBhbmQgdGhlIGVxdWFsaXR5IGNoZWNrIGlzIGJhc2VkIG9uIG9iamVjdCBpZGVudGl0eS5cbiAqICAgSG93ZXZlciwgaWYgYW4gb2JqZWN0IGxpdGVyYWwgb3IgYW4gYXJyYXkgbGl0ZXJhbCBpcyBwYXNzZWQgYXMgdGhlIGJpbmRpbmcgZXhwcmVzc2lvbiwgdGhlXG4gKiAgIGVxdWFsaXR5IGNoZWNrIGlzIGRvbmUgYnkgdmFsdWUgKHVzaW5nIHRoZSB7QGxpbmsgYW5ndWxhci5lcXVhbHN9IGZ1bmN0aW9uKS4gSXQncyBhbHNvIHBvc3NpYmxlXG4gKiAgIHRvIHdhdGNoIHRoZSBldmFsdWF0ZWQgdmFsdWUgc2hhbGxvd2x5IHdpdGgge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoQ29sbGVjdGlvblxuICogICBgJHdhdGNoQ29sbGVjdGlvbmB9OiB1c2UgYD0qYCBvciBgPSphdHRyYCAoYD0qP2Agb3IgYD0qP2F0dHJgIGlmIHRoZSBhdHRyaWJ1dGUgaXMgb3B0aW9uYWwpLlxuICpcbiAgKiAqIGA8YCBvciBgPGF0dHJgIC0gc2V0IHVwIGEgb25lLXdheSAob25lLWRpcmVjdGlvbmFsKSBiaW5kaW5nIGJldHdlZW4gYSBsb2NhbCBzY29wZSBwcm9wZXJ0eSBhbmQgYW5cbiAqICAgZXhwcmVzc2lvbiBwYXNzZWQgdmlhIHRoZSBhdHRyaWJ1dGUgYGF0dHJgLiBUaGUgZXhwcmVzc2lvbiBpcyBldmFsdWF0ZWQgaW4gdGhlIGNvbnRleHQgb2YgdGhlXG4gKiAgIHBhcmVudCBzY29wZS4gSWYgbm8gYGF0dHJgIG5hbWUgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGF0dHJpYnV0ZSBuYW1lIGlzIGFzc3VtZWQgdG8gYmUgdGhlIHNhbWUgYXMgdGhlXG4gKiAgIGxvY2FsIG5hbWUuIFlvdSBjYW4gYWxzbyBtYWtlIHRoZSBiaW5kaW5nIG9wdGlvbmFsIGJ5IGFkZGluZyBgP2A6IGA8P2Agb3IgYDw/YXR0cmAuXG4gKlxuICogICBGb3IgZXhhbXBsZSwgZ2l2ZW4gYDxteS1jb21wb25lbnQgbXktYXR0cj1cInBhcmVudE1vZGVsXCI+YCBhbmQgZGlyZWN0aXZlIGRlZmluaXRpb24gb2ZcbiAqICAgYHNjb3BlOiB7IGxvY2FsTW9kZWw6JzxteUF0dHInIH1gLCB0aGVuIHRoZSBpc29sYXRlZCBzY29wZSBwcm9wZXJ0eSBgbG9jYWxNb2RlbGAgd2lsbCByZWZsZWN0IHRoZVxuICogICB2YWx1ZSBvZiBgcGFyZW50TW9kZWxgIG9uIHRoZSBwYXJlbnQgc2NvcGUuIEFueSBjaGFuZ2VzIHRvIGBwYXJlbnRNb2RlbGAgd2lsbCBiZSByZWZsZWN0ZWRcbiAqICAgaW4gYGxvY2FsTW9kZWxgLCBidXQgY2hhbmdlcyBpbiBgbG9jYWxNb2RlbGAgd2lsbCBub3QgcmVmbGVjdCBpbiBgcGFyZW50TW9kZWxgLiBUaGVyZSBhcmUgaG93ZXZlclxuICogICB0d28gY2F2ZWF0czpcbiAqICAgICAxLiBvbmUtd2F5IGJpbmRpbmcgZG9lcyBub3QgY29weSB0aGUgdmFsdWUgZnJvbSB0aGUgcGFyZW50IHRvIHRoZSBpc29sYXRlIHNjb3BlLCBpdCBzaW1wbHlcbiAqICAgICBzZXRzIHRoZSBzYW1lIHZhbHVlLiBUaGF0IG1lYW5zIGlmIHlvdXIgYm91bmQgdmFsdWUgaXMgYW4gb2JqZWN0LCBjaGFuZ2VzIHRvIGl0cyBwcm9wZXJ0aWVzXG4gKiAgICAgaW4gdGhlIGlzb2xhdGVkIHNjb3BlIHdpbGwgYmUgcmVmbGVjdGVkIGluIHRoZSBwYXJlbnQgc2NvcGUgKGJlY2F1c2UgYm90aCByZWZlcmVuY2UgdGhlIHNhbWUgb2JqZWN0KS5cbiAqICAgICAyLiBvbmUtd2F5IGJpbmRpbmcgd2F0Y2hlcyBjaGFuZ2VzIHRvIHRoZSAqKmlkZW50aXR5Kiogb2YgdGhlIHBhcmVudCB2YWx1ZS4gVGhhdCBtZWFucyB0aGVcbiAqICAgICB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggYCR3YXRjaGB9IG9uIHRoZSBwYXJlbnQgdmFsdWUgb25seSBmaXJlcyBpZiB0aGUgcmVmZXJlbmNlXG4gKiAgICAgdG8gdGhlIHZhbHVlIGhhcyBjaGFuZ2VkLiBJbiBtb3N0IGNhc2VzLCB0aGlzIHNob3VsZCBub3QgYmUgb2YgY29uY2VybiwgYnV0IGNhbiBiZSBpbXBvcnRhbnRcbiAqICAgICB0byBrbm93IGlmIHlvdSBvbmUtd2F5IGJpbmQgdG8gYW4gb2JqZWN0LCBhbmQgdGhlbiByZXBsYWNlIHRoYXQgb2JqZWN0IGluIHRoZSBpc29sYXRlZCBzY29wZS5cbiAqICAgICBJZiB5b3Ugbm93IGNoYW5nZSBhIHByb3BlcnR5IG9mIHRoZSBvYmplY3QgaW4geW91ciBwYXJlbnQgc2NvcGUsIHRoZSBjaGFuZ2Ugd2lsbCBub3QgYmVcbiAqICAgICBwcm9wYWdhdGVkIHRvIHRoZSBpc29sYXRlZCBzY29wZSwgYmVjYXVzZSB0aGUgaWRlbnRpdHkgb2YgdGhlIG9iamVjdCBvbiB0aGUgcGFyZW50IHNjb3BlXG4gKiAgICAgaGFzIG5vdCBjaGFuZ2VkLiBJbnN0ZWFkIHlvdSBtdXN0IGFzc2lnbiBhIG5ldyBvYmplY3QuXG4gKlxuICogICBPbmUtd2F5IGJpbmRpbmcgaXMgdXNlZnVsIGlmIHlvdSBkbyBub3QgcGxhbiB0byBwcm9wYWdhdGUgY2hhbmdlcyB0byB5b3VyIGlzb2xhdGVkIHNjb3BlIGJpbmRpbmdzXG4gKiAgIGJhY2sgdG8gdGhlIHBhcmVudC4gSG93ZXZlciwgaXQgZG9lcyBub3QgbWFrZSB0aGlzIGNvbXBsZXRlbHkgaW1wb3NzaWJsZS5cbiAqXG4gKiAqIGAmYCBvciBgJmF0dHJgIC0gcHJvdmlkZXMgYSB3YXkgdG8gZXhlY3V0ZSBhbiBleHByZXNzaW9uIGluIHRoZSBjb250ZXh0IG9mIHRoZSBwYXJlbnQgc2NvcGUuIElmXG4gKiAgIG5vIGBhdHRyYCBuYW1lIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBhdHRyaWJ1dGUgbmFtZSBpcyBhc3N1bWVkIHRvIGJlIHRoZSBzYW1lIGFzIHRoZSBsb2NhbCBuYW1lLlxuICogICBHaXZlbiBgPG15LWNvbXBvbmVudCBteS1hdHRyPVwiY291bnQgPSBjb3VudCArIHZhbHVlXCI+YCBhbmQgdGhlIGlzb2xhdGUgc2NvcGUgZGVmaW5pdGlvbiBgc2NvcGU6IHtcbiAqICAgbG9jYWxGbjonJm15QXR0cicgfWAsIHRoZSBpc29sYXRlIHNjb3BlIHByb3BlcnR5IGBsb2NhbEZuYCB3aWxsIHBvaW50IHRvIGEgZnVuY3Rpb24gd3JhcHBlciBmb3JcbiAqICAgdGhlIGBjb3VudCA9IGNvdW50ICsgdmFsdWVgIGV4cHJlc3Npb24uIE9mdGVuIGl0J3MgZGVzaXJhYmxlIHRvIHBhc3MgZGF0YSBmcm9tIHRoZSBpc29sYXRlZCBzY29wZVxuICogICB2aWEgYW4gZXhwcmVzc2lvbiB0byB0aGUgcGFyZW50IHNjb3BlLiBUaGlzIGNhbiBiZSBkb25lIGJ5IHBhc3NpbmcgYSBtYXAgb2YgbG9jYWwgdmFyaWFibGUgbmFtZXNcbiAqICAgYW5kIHZhbHVlcyBpbnRvIHRoZSBleHByZXNzaW9uIHdyYXBwZXIgZm4uIEZvciBleGFtcGxlLCBpZiB0aGUgZXhwcmVzc2lvbiBpcyBgaW5jcmVtZW50KGFtb3VudClgXG4gKiAgIHRoZW4gd2UgY2FuIHNwZWNpZnkgdGhlIGFtb3VudCB2YWx1ZSBieSBjYWxsaW5nIHRoZSBgbG9jYWxGbmAgYXMgYGxvY2FsRm4oe2Ftb3VudDogMjJ9KWAuXG4gKlxuICogSW4gZ2VuZXJhbCBpdCdzIHBvc3NpYmxlIHRvIGFwcGx5IG1vcmUgdGhhbiBvbmUgZGlyZWN0aXZlIHRvIG9uZSBlbGVtZW50LCBidXQgdGhlcmUgbWlnaHQgYmUgbGltaXRhdGlvbnNcbiAqIGRlcGVuZGluZyBvbiB0aGUgdHlwZSBvZiBzY29wZSByZXF1aXJlZCBieSB0aGUgZGlyZWN0aXZlcy4gVGhlIGZvbGxvd2luZyBwb2ludHMgd2lsbCBoZWxwIGV4cGxhaW4gdGhlc2UgbGltaXRhdGlvbnMuXG4gKiBGb3Igc2ltcGxpY2l0eSBvbmx5IHR3byBkaXJlY3RpdmVzIGFyZSB0YWtlbiBpbnRvIGFjY291bnQsIGJ1dCBpdCBpcyBhbHNvIGFwcGxpY2FibGUgZm9yIHNldmVyYWwgZGlyZWN0aXZlczpcbiAqXG4gKiAqICoqbm8gc2NvcGUqKiArICoqbm8gc2NvcGUqKiA9PiBUd28gZGlyZWN0aXZlcyB3aGljaCBkb24ndCByZXF1aXJlIHRoZWlyIG93biBzY29wZSB3aWxsIHVzZSB0aGVpciBwYXJlbnQncyBzY29wZVxuICogKiAqKmNoaWxkIHNjb3BlKiogKyAqKm5vIHNjb3BlKiogPT4gIEJvdGggZGlyZWN0aXZlcyB3aWxsIHNoYXJlIG9uZSBzaW5nbGUgY2hpbGQgc2NvcGVcbiAqICogKipjaGlsZCBzY29wZSoqICsgKipjaGlsZCBzY29wZSoqID0+ICBCb3RoIGRpcmVjdGl2ZXMgd2lsbCBzaGFyZSBvbmUgc2luZ2xlIGNoaWxkIHNjb3BlXG4gKiAqICoqaXNvbGF0ZWQgc2NvcGUqKiArICoqbm8gc2NvcGUqKiA9PiAgVGhlIGlzb2xhdGVkIGRpcmVjdGl2ZSB3aWxsIHVzZSBpdCdzIG93biBjcmVhdGVkIGlzb2xhdGVkIHNjb3BlLiBUaGUgb3RoZXIgZGlyZWN0aXZlIHdpbGwgdXNlXG4gKiBpdHMgcGFyZW50J3Mgc2NvcGVcbiAqICogKippc29sYXRlZCBzY29wZSoqICsgKipjaGlsZCBzY29wZSoqID0+ICAqKldvbid0IHdvcmshKiogT25seSBvbmUgc2NvcGUgY2FuIGJlIHJlbGF0ZWQgdG8gb25lIGVsZW1lbnQuIFRoZXJlZm9yZSB0aGVzZSBkaXJlY3RpdmVzIGNhbm5vdFxuICogYmUgYXBwbGllZCB0byB0aGUgc2FtZSBlbGVtZW50LlxuICogKiAqKmlzb2xhdGVkIHNjb3BlKiogKyAqKmlzb2xhdGVkIHNjb3BlKiogID0+ICAqKldvbid0IHdvcmshKiogT25seSBvbmUgc2NvcGUgY2FuIGJlIHJlbGF0ZWQgdG8gb25lIGVsZW1lbnQuIFRoZXJlZm9yZSB0aGVzZSBkaXJlY3RpdmVzXG4gKiBjYW5ub3QgYmUgYXBwbGllZCB0byB0aGUgc2FtZSBlbGVtZW50LlxuICpcbiAqXG4gKiAjIyMjIGBiaW5kVG9Db250cm9sbGVyYFxuICogVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIHRvIGJpbmQgc2NvcGUgcHJvcGVydGllcyBkaXJlY3RseSB0byB0aGUgY29udHJvbGxlci4gSXQgY2FuIGJlIGVpdGhlclxuICogYHRydWVgIG9yIGFuIG9iamVjdCBoYXNoIHdpdGggdGhlIHNhbWUgZm9ybWF0IGFzIHRoZSBgc2NvcGVgIHByb3BlcnR5LlxuICpcbiAqIFdoZW4gYW4gaXNvbGF0ZSBzY29wZSBpcyB1c2VkIGZvciBhIGRpcmVjdGl2ZSAoc2VlIGFib3ZlKSwgYGJpbmRUb0NvbnRyb2xsZXI6IHRydWVgIHdpbGxcbiAqIGFsbG93IGEgY29tcG9uZW50IHRvIGhhdmUgaXRzIHByb3BlcnRpZXMgYm91bmQgdG8gdGhlIGNvbnRyb2xsZXIsIHJhdGhlciB0aGFuIHRvIHNjb3BlLlxuICpcbiAqIEFmdGVyIHRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZCwgdGhlIGluaXRpYWwgdmFsdWVzIG9mIHRoZSBpc29sYXRlIHNjb3BlIGJpbmRpbmdzIHdpbGwgYmUgYm91bmQgdG8gdGhlIGNvbnRyb2xsZXJcbiAqIHByb3BlcnRpZXMuIFlvdSBjYW4gYWNjZXNzIHRoZXNlIGJpbmRpbmdzIG9uY2UgdGhleSBoYXZlIGJlZW4gaW5pdGlhbGl6ZWQgYnkgcHJvdmlkaW5nIGEgY29udHJvbGxlciBtZXRob2QgY2FsbGVkXG4gKiBgJG9uSW5pdGAsIHdoaWNoIGlzIGNhbGxlZCBhZnRlciBhbGwgdGhlIGNvbnRyb2xsZXJzIG9uIGFuIGVsZW1lbnQgaGF2ZSBiZWVuIGNvbnN0cnVjdGVkIGFuZCBoYWQgdGhlaXIgYmluZGluZ3NcbiAqIGluaXRpYWxpemVkLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKkRlcHJlY2F0aW9uIHdhcm5pbmc6KiogaWYgYCRjb21waWxlUHJvY3ZpZGVyLnByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZCh0cnVlKWAgd2FzIGNhbGxlZCwgYmluZGluZ3MgZm9yIG5vbi1FUzYgY2xhc3NcbiAqIGNvbnRyb2xsZXJzIGFyZSBib3VuZCB0byBgdGhpc2AgYmVmb3JlIHRoZSBjb250cm9sbGVyIGNvbnN0cnVjdG9yIGlzIGNhbGxlZCBidXQgdGhpcyB1c2UgaXMgbm93IGRlcHJlY2F0ZWQuIFBsZWFzZVxuICogcGxhY2UgaW5pdGlhbGl6YXRpb24gY29kZSB0aGF0IHJlbGllcyB1cG9uIGJpbmRpbmdzIGluc2lkZSBhIGAkb25Jbml0YCBtZXRob2Qgb24gdGhlIGNvbnRyb2xsZXIsIGluc3RlYWQuXG4gKiA8L2Rpdj5cbiAqXG4gKiBJdCBpcyBhbHNvIHBvc3NpYmxlIHRvIHNldCBgYmluZFRvQ29udHJvbGxlcmAgdG8gYW4gb2JqZWN0IGhhc2ggd2l0aCB0aGUgc2FtZSBmb3JtYXQgYXMgdGhlIGBzY29wZWAgcHJvcGVydHkuXG4gKiBUaGlzIHdpbGwgc2V0IHVwIHRoZSBzY29wZSBiaW5kaW5ncyB0byB0aGUgY29udHJvbGxlciBkaXJlY3RseS4gTm90ZSB0aGF0IGBzY29wZWAgY2FuIHN0aWxsIGJlIHVzZWRcbiAqIHRvIGRlZmluZSB3aGljaCBraW5kIG9mIHNjb3BlIGlzIGNyZWF0ZWQuIEJ5IGRlZmF1bHQsIG5vIHNjb3BlIGlzIGNyZWF0ZWQuIFVzZSBgc2NvcGU6IHt9YCB0byBjcmVhdGUgYW4gaXNvbGF0ZVxuICogc2NvcGUgKHVzZWZ1bCBmb3IgY29tcG9uZW50IGRpcmVjdGl2ZXMpLlxuICpcbiAqIElmIGJvdGggYGJpbmRUb0NvbnRyb2xsZXJgIGFuZCBgc2NvcGVgIGFyZSBkZWZpbmVkIGFuZCBoYXZlIG9iamVjdCBoYXNoZXMsIGBiaW5kVG9Db250cm9sbGVyYCBvdmVycmlkZXMgYHNjb3BlYC5cbiAqXG4gKlxuICogIyMjIyBgY29udHJvbGxlcmBcbiAqIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uIFRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZCBiZWZvcmUgdGhlXG4gKiBwcmUtbGlua2luZyBwaGFzZSBhbmQgY2FuIGJlIGFjY2Vzc2VkIGJ5IG90aGVyIGRpcmVjdGl2ZXMgKHNlZVxuICogYHJlcXVpcmVgIGF0dHJpYnV0ZSkuIFRoaXMgYWxsb3dzIHRoZSBkaXJlY3RpdmVzIHRvIGNvbW11bmljYXRlIHdpdGggZWFjaCBvdGhlciBhbmQgYXVnbWVudFxuICogZWFjaCBvdGhlcidzIGJlaGF2aW9yLiBUaGUgY29udHJvbGxlciBpcyBpbmplY3RhYmxlIChhbmQgc3VwcG9ydHMgYnJhY2tldCBub3RhdGlvbikgd2l0aCB0aGUgZm9sbG93aW5nIGxvY2FsczpcbiAqXG4gKiAqIGAkc2NvcGVgIC0gQ3VycmVudCBzY29wZSBhc3NvY2lhdGVkIHdpdGggdGhlIGVsZW1lbnRcbiAqICogYCRlbGVtZW50YCAtIEN1cnJlbnQgZWxlbWVudFxuICogKiBgJGF0dHJzYCAtIEN1cnJlbnQgYXR0cmlidXRlcyBvYmplY3QgZm9yIHRoZSBlbGVtZW50XG4gKiAqIGAkdHJhbnNjbHVkZWAgLSBBIHRyYW5zY2x1ZGUgbGlua2luZyBmdW5jdGlvbiBwcmUtYm91bmQgdG8gdGhlIGNvcnJlY3QgdHJhbnNjbHVzaW9uIHNjb3BlOlxuICogICBgZnVuY3Rpb24oW3Njb3BlXSwgY2xvbmVMaW5raW5nRm4sIGZ1dHVyZVBhcmVudEVsZW1lbnQsIHNsb3ROYW1lKWA6XG4gKiAgICAqIGBzY29wZWA6IChvcHRpb25hbCkgb3ZlcnJpZGUgdGhlIHNjb3BlLlxuICogICAgKiBgY2xvbmVMaW5raW5nRm5gOiAob3B0aW9uYWwpIGFyZ3VtZW50IHRvIGNyZWF0ZSBjbG9uZXMgb2YgdGhlIG9yaWdpbmFsIHRyYW5zY2x1ZGVkIGNvbnRlbnQuXG4gKiAgICAqIGBmdXR1cmVQYXJlbnRFbGVtZW50YCAob3B0aW9uYWwpOlxuICogICAgICAgICogZGVmaW5lcyB0aGUgcGFyZW50IHRvIHdoaWNoIHRoZSBgY2xvbmVMaW5raW5nRm5gIHdpbGwgYWRkIHRoZSBjbG9uZWQgZWxlbWVudHMuXG4gKiAgICAgICAgKiBkZWZhdWx0OiBgJGVsZW1lbnQucGFyZW50KClgIHJlc3AuIGAkZWxlbWVudGAgZm9yIGB0cmFuc2NsdWRlOidlbGVtZW50J2AgcmVzcC4gYHRyYW5zY2x1ZGU6dHJ1ZWAuXG4gKiAgICAgICAgKiBvbmx5IG5lZWRlZCBmb3IgdHJhbnNjbHVkZXMgdGhhdCBhcmUgYWxsb3dlZCB0byBjb250YWluIG5vbiBodG1sIGVsZW1lbnRzIChlLmcuIFNWRyBlbGVtZW50cylcbiAqICAgICAgICAgIGFuZCB3aGVuIHRoZSBgY2xvbmVMaW5raW5nRm5gIGlzIHBhc3NlZCxcbiAqICAgICAgICAgIGFzIHRob3NlIGVsZW1lbnRzIG5lZWQgdG8gY3JlYXRlZCBhbmQgY2xvbmVkIGluIGEgc3BlY2lhbCB3YXkgd2hlbiB0aGV5IGFyZSBkZWZpbmVkIG91dHNpZGUgdGhlaXJcbiAqICAgICAgICAgIHVzdWFsIGNvbnRhaW5lcnMgKGUuZy4gbGlrZSBgPHN2Zz5gKS5cbiAqICAgICAgICAqIFNlZSBhbHNvIHRoZSBgZGlyZWN0aXZlLnRlbXBsYXRlTmFtZXNwYWNlYCBwcm9wZXJ0eS5cbiAqICAgICogYHNsb3ROYW1lYDogKG9wdGlvbmFsKSB0aGUgbmFtZSBvZiB0aGUgc2xvdCB0byB0cmFuc2NsdWRlLiBJZiBmYWxzeSAoZS5nLiBgbnVsbGAsIGB1bmRlZmluZWRgIG9yIGAnJ2ApXG4gKiAgICAgIHRoZW4gdGhlIGRlZmF1bHQgdHJhbnNjbHVzaW9uIGlzIHByb3ZpZGVkLlxuICogICAgVGhlIGAkdHJhbnNjbHVkZWAgZnVuY3Rpb24gYWxzbyBoYXMgYSBtZXRob2Qgb24gaXQsIGAkdHJhbnNjbHVkZS5pc1Nsb3RGaWxsZWQoc2xvdE5hbWUpYCwgd2hpY2ggcmV0dXJuc1xuICogICAgYHRydWVgIGlmIHRoZSBzcGVjaWZpZWQgc2xvdCBjb250YWlucyBjb250ZW50IChpLmUuIG9uZSBvciBtb3JlIERPTSBub2RlcykuXG4gKlxuICogIyMjIyBgcmVxdWlyZWBcbiAqIFJlcXVpcmUgYW5vdGhlciBkaXJlY3RpdmUgYW5kIGluamVjdCBpdHMgY29udHJvbGxlciBhcyB0aGUgZm91cnRoIGFyZ3VtZW50IHRvIHRoZSBsaW5raW5nIGZ1bmN0aW9uLiBUaGVcbiAqIGByZXF1aXJlYCBwcm9wZXJ0eSBjYW4gYmUgYSBzdHJpbmcsIGFuIGFycmF5IG9yIGFuIG9iamVjdDpcbiAqICogYSAqKnN0cmluZyoqIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIGRpcmVjdGl2ZSB0byBwYXNzIHRvIHRoZSBsaW5raW5nIGZ1bmN0aW9uXG4gKiAqIGFuICoqYXJyYXkqKiBjb250YWluaW5nIHRoZSBuYW1lcyBvZiBkaXJlY3RpdmVzIHRvIHBhc3MgdG8gdGhlIGxpbmtpbmcgZnVuY3Rpb24uIFRoZSBhcmd1bWVudCBwYXNzZWQgdG8gdGhlXG4gKiBsaW5raW5nIGZ1bmN0aW9uIHdpbGwgYmUgYW4gYXJyYXkgb2YgY29udHJvbGxlcnMgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIG5hbWVzIGluIHRoZSBgcmVxdWlyZWAgcHJvcGVydHlcbiAqICogYW4gKipvYmplY3QqKiB3aG9zZSBwcm9wZXJ0eSB2YWx1ZXMgYXJlIHRoZSBuYW1lcyBvZiB0aGUgZGlyZWN0aXZlcyB0byBwYXNzIHRvIHRoZSBsaW5raW5nIGZ1bmN0aW9uLiBUaGUgYXJndW1lbnRcbiAqIHBhc3NlZCB0byB0aGUgbGlua2luZyBmdW5jdGlvbiB3aWxsIGFsc28gYmUgYW4gb2JqZWN0IHdpdGggbWF0Y2hpbmcga2V5cywgd2hvc2UgdmFsdWVzIHdpbGwgaG9sZCB0aGUgY29ycmVzcG9uZGluZ1xuICogY29udHJvbGxlcnMuXG4gKlxuICogSWYgdGhlIGByZXF1aXJlYCBwcm9wZXJ0eSBpcyBhbiBvYmplY3QgYW5kIGBiaW5kVG9Db250cm9sbGVyYCBpcyB0cnV0aHksIHRoZW4gdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXJzIGFyZVxuICogYm91bmQgdG8gdGhlIGNvbnRyb2xsZXIgdXNpbmcgdGhlIGtleXMgb2YgdGhlIGByZXF1aXJlYCBwcm9wZXJ0eS4gVGhpcyBiaW5kaW5nIG9jY3VycyBhZnRlciBhbGwgdGhlIGNvbnRyb2xsZXJzXG4gKiBoYXZlIGJlZW4gY29uc3RydWN0ZWQgYnV0IGJlZm9yZSBgJG9uSW5pdGAgaXMgY2FsbGVkLlxuICogSWYgdGhlIG5hbWUgb2YgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgaXMgdGhlIHNhbWUgYXMgdGhlIGxvY2FsIG5hbWUgKHRoZSBrZXkpLCB0aGUgbmFtZSBjYW4gYmVcbiAqIG9taXR0ZWQuIEZvciBleGFtcGxlLCBge3BhcmVudERpcjogJ15eJ31gIGlzIGVxdWl2YWxlbnQgdG8gYHtwYXJlbnREaXI6ICdeXnBhcmVudERpcid9YC5cbiAqIFNlZSB0aGUge0BsaW5rICRjb21waWxlUHJvdmlkZXIjY29tcG9uZW50fSBoZWxwZXIgZm9yIGFuIGV4YW1wbGUgb2YgaG93IHRoaXMgY2FuIGJlIHVzZWQuXG4gKiBJZiBubyBzdWNoIHJlcXVpcmVkIGRpcmVjdGl2ZShzKSBjYW4gYmUgZm91bmQsIG9yIGlmIHRoZSBkaXJlY3RpdmUgZG9lcyBub3QgaGF2ZSBhIGNvbnRyb2xsZXIsIHRoZW4gYW4gZXJyb3IgaXNcbiAqIHJhaXNlZCAodW5sZXNzIG5vIGxpbmsgZnVuY3Rpb24gaXMgc3BlY2lmaWVkIGFuZCB0aGUgcmVxdWlyZWQgY29udHJvbGxlcnMgYXJlIG5vdCBiZWluZyBib3VuZCB0byB0aGUgZGlyZWN0aXZlXG4gKiBjb250cm9sbGVyLCBpbiB3aGljaCBjYXNlIGVycm9yIGNoZWNraW5nIGlzIHNraXBwZWQpLiBUaGUgbmFtZSBjYW4gYmUgcHJlZml4ZWQgd2l0aDpcbiAqXG4gKiAqIChubyBwcmVmaXgpIC0gTG9jYXRlIHRoZSByZXF1aXJlZCBjb250cm9sbGVyIG9uIHRoZSBjdXJyZW50IGVsZW1lbnQuIFRocm93IGFuIGVycm9yIGlmIG5vdCBmb3VuZC5cbiAqICogYD9gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgb3IgcGFzcyBgbnVsbGAgdG8gdGhlIGBsaW5rYCBmbiBpZiBub3QgZm91bmQuXG4gKiAqIGBeYCAtIExvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBieSBzZWFyY2hpbmcgdGhlIGVsZW1lbnQgYW5kIGl0cyBwYXJlbnRzLiBUaHJvdyBhbiBlcnJvciBpZiBub3QgZm91bmQuXG4gKiAqIGBeXmAgLSBMb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50J3MgcGFyZW50cy4gVGhyb3cgYW4gZXJyb3IgaWYgbm90IGZvdW5kLlxuICogKiBgP15gIC0gQXR0ZW1wdCB0byBsb2NhdGUgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXIgYnkgc2VhcmNoaW5nIHRoZSBlbGVtZW50IGFuZCBpdHMgcGFyZW50cyBvciBwYXNzXG4gKiAgIGBudWxsYCB0byB0aGUgYGxpbmtgIGZuIGlmIG5vdCBmb3VuZC5cbiAqICogYD9eXmAgLSBBdHRlbXB0IHRvIGxvY2F0ZSB0aGUgcmVxdWlyZWQgY29udHJvbGxlciBieSBzZWFyY2hpbmcgdGhlIGVsZW1lbnQncyBwYXJlbnRzLCBvciBwYXNzXG4gKiAgIGBudWxsYCB0byB0aGUgYGxpbmtgIGZuIGlmIG5vdCBmb3VuZC5cbiAqXG4gKlxuICogIyMjIyBgY29udHJvbGxlckFzYFxuICogSWRlbnRpZmllciBuYW1lIGZvciBhIHJlZmVyZW5jZSB0byB0aGUgY29udHJvbGxlciBpbiB0aGUgZGlyZWN0aXZlJ3Mgc2NvcGUuXG4gKiBUaGlzIGFsbG93cyB0aGUgY29udHJvbGxlciB0byBiZSByZWZlcmVuY2VkIGZyb20gdGhlIGRpcmVjdGl2ZSB0ZW1wbGF0ZS4gVGhpcyBpcyBlc3BlY2lhbGx5XG4gKiB1c2VmdWwgd2hlbiBhIGRpcmVjdGl2ZSBpcyB1c2VkIGFzIGNvbXBvbmVudCwgaS5lLiB3aXRoIGFuIGBpc29sYXRlYCBzY29wZS4gSXQncyBhbHNvIHBvc3NpYmxlXG4gKiB0byB1c2UgaXQgaW4gYSBkaXJlY3RpdmUgd2l0aG91dCBhbiBgaXNvbGF0ZWAgLyBgbmV3YCBzY29wZSwgYnV0IHlvdSBuZWVkIHRvIGJlIGF3YXJlIHRoYXQgdGhlXG4gKiBgY29udHJvbGxlckFzYCByZWZlcmVuY2UgbWlnaHQgb3ZlcndyaXRlIGEgcHJvcGVydHkgdGhhdCBhbHJlYWR5IGV4aXN0cyBvbiB0aGUgcGFyZW50IHNjb3BlLlxuICpcbiAqXG4gKiAjIyMjIGByZXN0cmljdGBcbiAqIFN0cmluZyBvZiBzdWJzZXQgb2YgYEVBQ01gIHdoaWNoIHJlc3RyaWN0cyB0aGUgZGlyZWN0aXZlIHRvIGEgc3BlY2lmaWMgZGlyZWN0aXZlXG4gKiBkZWNsYXJhdGlvbiBzdHlsZS4gSWYgb21pdHRlZCwgdGhlIGRlZmF1bHRzIChlbGVtZW50cyBhbmQgYXR0cmlidXRlcykgYXJlIHVzZWQuXG4gKlxuICogKiBgRWAgLSBFbGVtZW50IG5hbWUgKGRlZmF1bHQpOiBgPG15LWRpcmVjdGl2ZT48L215LWRpcmVjdGl2ZT5gXG4gKiAqIGBBYCAtIEF0dHJpYnV0ZSAoZGVmYXVsdCk6IGA8ZGl2IG15LWRpcmVjdGl2ZT1cImV4cFwiPjwvZGl2PmBcbiAqICogYENgIC0gQ2xhc3M6IGA8ZGl2IGNsYXNzPVwibXktZGlyZWN0aXZlOiBleHA7XCI+PC9kaXY+YFxuICogKiBgTWAgLSBDb21tZW50OiBgPCEtLSBkaXJlY3RpdmU6IG15LWRpcmVjdGl2ZSBleHAgLS0+YFxuICpcbiAqXG4gKiAjIyMjIGB0ZW1wbGF0ZU5hbWVzcGFjZWBcbiAqIFN0cmluZyByZXByZXNlbnRpbmcgdGhlIGRvY3VtZW50IHR5cGUgdXNlZCBieSB0aGUgbWFya3VwIGluIHRoZSB0ZW1wbGF0ZS5cbiAqIEFuZ3VsYXJKUyBuZWVkcyB0aGlzIGluZm9ybWF0aW9uIGFzIHRob3NlIGVsZW1lbnRzIG5lZWQgdG8gYmUgY3JlYXRlZCBhbmQgY2xvbmVkXG4gKiBpbiBhIHNwZWNpYWwgd2F5IHdoZW4gdGhleSBhcmUgZGVmaW5lZCBvdXRzaWRlIHRoZWlyIHVzdWFsIGNvbnRhaW5lcnMgbGlrZSBgPHN2Zz5gIGFuZCBgPG1hdGg+YC5cbiAqXG4gKiAqIGBodG1sYCAtIEFsbCByb290IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSBhcmUgSFRNTC4gUm9vdCBub2RlcyBtYXkgYWxzbyBiZVxuICogICB0b3AtbGV2ZWwgZWxlbWVudHMgc3VjaCBhcyBgPHN2Zz5gIG9yIGA8bWF0aD5gLlxuICogKiBgc3ZnYCAtIFRoZSByb290IG5vZGVzIGluIHRoZSB0ZW1wbGF0ZSBhcmUgU1ZHIGVsZW1lbnRzIChleGNsdWRpbmcgYDxtYXRoPmApLlxuICogKiBgbWF0aGAgLSBUaGUgcm9vdCBub2RlcyBpbiB0aGUgdGVtcGxhdGUgYXJlIE1hdGhNTCBlbGVtZW50cyAoZXhjbHVkaW5nIGA8c3ZnPmApLlxuICpcbiAqIElmIG5vIGB0ZW1wbGF0ZU5hbWVzcGFjZWAgaXMgc3BlY2lmaWVkLCB0aGVuIHRoZSBuYW1lc3BhY2UgaXMgY29uc2lkZXJlZCB0byBiZSBgaHRtbGAuXG4gKlxuICogIyMjIyBgdGVtcGxhdGVgXG4gKiBIVE1MIG1hcmt1cCB0aGF0IG1heTpcbiAqICogUmVwbGFjZSB0aGUgY29udGVudHMgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQgKGRlZmF1bHQpLlxuICogKiBSZXBsYWNlIHRoZSBkaXJlY3RpdmUncyBlbGVtZW50IGl0c2VsZiAoaWYgYHJlcGxhY2VgIGlzIHRydWUgLSBERVBSRUNBVEVEKS5cbiAqICogV3JhcCB0aGUgY29udGVudHMgb2YgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQgKGlmIGB0cmFuc2NsdWRlYCBpcyB0cnVlKS5cbiAqXG4gKiBWYWx1ZSBtYXkgYmU6XG4gKlxuICogKiBBIHN0cmluZy4gRm9yIGV4YW1wbGUgYDxkaXYgcmVkLW9uLWhvdmVyPnt7ZGVsZXRlX3N0cn19PC9kaXY+YC5cbiAqICogQSBmdW5jdGlvbiB3aGljaCB0YWtlcyB0d28gYXJndW1lbnRzIGB0RWxlbWVudGAgYW5kIGB0QXR0cnNgIChkZXNjcmliZWQgaW4gdGhlIGBjb21waWxlYFxuICogICBmdW5jdGlvbiBhcGkgYmVsb3cpIGFuZCByZXR1cm5zIGEgc3RyaW5nIHZhbHVlLlxuICpcbiAqXG4gKiAjIyMjIGB0ZW1wbGF0ZVVybGBcbiAqIFRoaXMgaXMgc2ltaWxhciB0byBgdGVtcGxhdGVgIGJ1dCB0aGUgdGVtcGxhdGUgaXMgbG9hZGVkIGZyb20gdGhlIHNwZWNpZmllZCBVUkwsIGFzeW5jaHJvbm91c2x5LlxuICpcbiAqIEJlY2F1c2UgdGVtcGxhdGUgbG9hZGluZyBpcyBhc3luY2hyb25vdXMgdGhlIGNvbXBpbGVyIHdpbGwgc3VzcGVuZCBjb21waWxhdGlvbiBvZiBkaXJlY3RpdmVzIG9uIHRoYXQgZWxlbWVudFxuICogZm9yIGxhdGVyIHdoZW4gdGhlIHRlbXBsYXRlIGhhcyBiZWVuIHJlc29sdmVkLiAgSW4gdGhlIG1lYW50aW1lIGl0IHdpbGwgY29udGludWUgdG8gY29tcGlsZSBhbmQgbGlua1xuICogc2libGluZyBhbmQgcGFyZW50IGVsZW1lbnRzIGFzIHRob3VnaCB0aGlzIGVsZW1lbnQgaGFkIG5vdCBjb250YWluZWQgYW55IGRpcmVjdGl2ZXMuXG4gKlxuICogVGhlIGNvbXBpbGVyIGRvZXMgbm90IHN1c3BlbmQgdGhlIGVudGlyZSBjb21waWxhdGlvbiB0byB3YWl0IGZvciB0ZW1wbGF0ZXMgdG8gYmUgbG9hZGVkIGJlY2F1c2UgdGhpc1xuICogd291bGQgcmVzdWx0IGluIHRoZSB3aG9sZSBhcHAgXCJzdGFsbGluZ1wiIHVudGlsIGFsbCB0ZW1wbGF0ZXMgYXJlIGxvYWRlZCBhc3luY2hyb25vdXNseSAtIGV2ZW4gaW4gdGhlXG4gKiBjYXNlIHdoZW4gb25seSBvbmUgZGVlcGx5IG5lc3RlZCBkaXJlY3RpdmUgaGFzIGB0ZW1wbGF0ZVVybGAuXG4gKlxuICogVGVtcGxhdGUgbG9hZGluZyBpcyBhc3luY2hyb25vdXMgZXZlbiBpZiB0aGUgdGVtcGxhdGUgaGFzIGJlZW4gcHJlbG9hZGVkIGludG8gdGhlIHtAbGluayAkdGVtcGxhdGVDYWNoZX1cbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgYHRlbXBsYXRlVXJsYCBhcyBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIFVSTCBvciBhcyBhIGZ1bmN0aW9uIHdoaWNoIHRha2VzIHR3b1xuICogYXJndW1lbnRzIGB0RWxlbWVudGAgYW5kIGB0QXR0cnNgIChkZXNjcmliZWQgaW4gdGhlIGBjb21waWxlYCBmdW5jdGlvbiBhcGkgYmVsb3cpIGFuZCByZXR1cm5zXG4gKiBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIHVybC4gIEluIGVpdGhlciBjYXNlLCB0aGUgdGVtcGxhdGUgVVJMIGlzIHBhc3NlZCB0aHJvdWdoIHtAbGlua1xuICogJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmwgJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmx9LlxuICpcbiAqXG4gKiAjIyMjIGByZXBsYWNlYCAoWypERVBSRUNBVEVEKiFdLCB3aWxsIGJlIHJlbW92ZWQgaW4gbmV4dCBtYWpvciByZWxlYXNlIC0gaS5lLiB2Mi4wKVxuICogc3BlY2lmeSB3aGF0IHRoZSB0ZW1wbGF0ZSBzaG91bGQgcmVwbGFjZS4gRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAqXG4gKiAqIGB0cnVlYCAtIHRoZSB0ZW1wbGF0ZSB3aWxsIHJlcGxhY2UgdGhlIGRpcmVjdGl2ZSdzIGVsZW1lbnQuXG4gKiAqIGBmYWxzZWAgLSB0aGUgdGVtcGxhdGUgd2lsbCByZXBsYWNlIHRoZSBjb250ZW50cyBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC5cbiAqXG4gKiBUaGUgcmVwbGFjZW1lbnQgcHJvY2VzcyBtaWdyYXRlcyBhbGwgb2YgdGhlIGF0dHJpYnV0ZXMgLyBjbGFzc2VzIGZyb20gdGhlIG9sZCBlbGVtZW50IHRvIHRoZSBuZXdcbiAqIG9uZS4gU2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI3RlbXBsYXRlLWV4cGFuZGluZy1kaXJlY3RpdmVcbiAqIERpcmVjdGl2ZXMgR3VpZGV9IGZvciBhbiBleGFtcGxlLlxuICpcbiAqIFRoZXJlIGFyZSB2ZXJ5IGZldyBzY2VuYXJpb3Mgd2hlcmUgZWxlbWVudCByZXBsYWNlbWVudCBpcyByZXF1aXJlZCBmb3IgdGhlIGFwcGxpY2F0aW9uIGZ1bmN0aW9uLFxuICogdGhlIG1haW4gb25lIGJlaW5nIHJldXNhYmxlIGN1c3RvbSBjb21wb25lbnRzIHRoYXQgYXJlIHVzZWQgd2l0aGluIFNWRyBjb250ZXh0c1xuICogKGJlY2F1c2UgU1ZHIGRvZXNuJ3Qgd29yayB3aXRoIGN1c3RvbSBlbGVtZW50cyBpbiB0aGUgRE9NIHRyZWUpLlxuICpcbiAqICMjIyMgYHRyYW5zY2x1ZGVgXG4gKiBFeHRyYWN0IHRoZSBjb250ZW50cyBvZiB0aGUgZWxlbWVudCB3aGVyZSB0aGUgZGlyZWN0aXZlIGFwcGVhcnMgYW5kIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBkaXJlY3RpdmUuXG4gKiBUaGUgY29udGVudHMgYXJlIGNvbXBpbGVkIGFuZCBwcm92aWRlZCB0byB0aGUgZGlyZWN0aXZlIGFzIGEgKip0cmFuc2NsdXNpb24gZnVuY3Rpb24qKi4gU2VlIHRoZVxuICoge0BsaW5rICRjb21waWxlI3RyYW5zY2x1c2lvbiBUcmFuc2NsdXNpb259IHNlY3Rpb24gYmVsb3cuXG4gKlxuICpcbiAqICMjIyMgYGNvbXBpbGVgXG4gKlxuICogYGBganNcbiAqICAgZnVuY3Rpb24gY29tcGlsZSh0RWxlbWVudCwgdEF0dHJzLCB0cmFuc2NsdWRlKSB7IC4uLiB9XG4gKiBgYGBcbiAqXG4gKiBUaGUgY29tcGlsZSBmdW5jdGlvbiBkZWFscyB3aXRoIHRyYW5zZm9ybWluZyB0aGUgdGVtcGxhdGUgRE9NLiBTaW5jZSBtb3N0IGRpcmVjdGl2ZXMgZG8gbm90IGRvXG4gKiB0ZW1wbGF0ZSB0cmFuc2Zvcm1hdGlvbiwgaXQgaXMgbm90IHVzZWQgb2Z0ZW4uIFRoZSBjb21waWxlIGZ1bmN0aW9uIHRha2VzIHRoZSBmb2xsb3dpbmcgYXJndW1lbnRzOlxuICpcbiAqICAgKiBgdEVsZW1lbnRgIC0gdGVtcGxhdGUgZWxlbWVudCAtIFRoZSBlbGVtZW50IHdoZXJlIHRoZSBkaXJlY3RpdmUgaGFzIGJlZW4gZGVjbGFyZWQuIEl0IGlzXG4gKiAgICAgc2FmZSB0byBkbyB0ZW1wbGF0ZSB0cmFuc2Zvcm1hdGlvbiBvbiB0aGUgZWxlbWVudCBhbmQgY2hpbGQgZWxlbWVudHMgb25seS5cbiAqXG4gKiAgICogYHRBdHRyc2AgLSB0ZW1wbGF0ZSBhdHRyaWJ1dGVzIC0gTm9ybWFsaXplZCBsaXN0IG9mIGF0dHJpYnV0ZXMgZGVjbGFyZWQgb24gdGhpcyBlbGVtZW50IHNoYXJlZFxuICogICAgIGJldHdlZW4gYWxsIGRpcmVjdGl2ZSBjb21waWxlIGZ1bmN0aW9ucy5cbiAqXG4gKiAgICogYHRyYW5zY2x1ZGVgIC0gIFsqREVQUkVDQVRFRCohXSBBIHRyYW5zY2x1ZGUgbGlua2luZyBmdW5jdGlvbjogYGZ1bmN0aW9uKHNjb3BlLCBjbG9uZUxpbmtpbmdGbilgXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBUaGUgdGVtcGxhdGUgaW5zdGFuY2UgYW5kIHRoZSBsaW5rIGluc3RhbmNlIG1heSBiZSBkaWZmZXJlbnQgb2JqZWN0cyBpZiB0aGUgdGVtcGxhdGUgaGFzXG4gKiBiZWVuIGNsb25lZC4gRm9yIHRoaXMgcmVhc29uIGl0IGlzICoqbm90Kiogc2FmZSB0byBkbyBhbnl0aGluZyBvdGhlciB0aGFuIERPTSB0cmFuc2Zvcm1hdGlvbnMgdGhhdFxuICogYXBwbHkgdG8gYWxsIGNsb25lZCBET00gbm9kZXMgd2l0aGluIHRoZSBjb21waWxlIGZ1bmN0aW9uLiBTcGVjaWZpY2FsbHksIERPTSBsaXN0ZW5lciByZWdpc3RyYXRpb25cbiAqIHNob3VsZCBiZSBkb25lIGluIGEgbGlua2luZyBmdW5jdGlvbiByYXRoZXIgdGhhbiBpbiBhIGNvbXBpbGUgZnVuY3Rpb24uXG4gKiA8L2Rpdj5cblxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBUaGUgY29tcGlsZSBmdW5jdGlvbiBjYW5ub3QgaGFuZGxlIGRpcmVjdGl2ZXMgdGhhdCByZWN1cnNpdmVseSB1c2UgdGhlbXNlbHZlcyBpbiB0aGVpclxuICogb3duIHRlbXBsYXRlcyBvciBjb21waWxlIGZ1bmN0aW9ucy4gQ29tcGlsaW5nIHRoZXNlIGRpcmVjdGl2ZXMgcmVzdWx0cyBpbiBhbiBpbmZpbml0ZSBsb29wIGFuZFxuICogc3RhY2sgb3ZlcmZsb3cgZXJyb3JzLlxuICpcbiAqIFRoaXMgY2FuIGJlIGF2b2lkZWQgYnkgbWFudWFsbHkgdXNpbmcgJGNvbXBpbGUgaW4gdGhlIHBvc3RMaW5rIGZ1bmN0aW9uIHRvIGltcGVyYXRpdmVseSBjb21waWxlXG4gKiBhIGRpcmVjdGl2ZSdzIHRlbXBsYXRlIGluc3RlYWQgb2YgcmVseWluZyBvbiBhdXRvbWF0aWMgdGVtcGxhdGUgY29tcGlsYXRpb24gdmlhIGB0ZW1wbGF0ZWAgb3JcbiAqIGB0ZW1wbGF0ZVVybGAgZGVjbGFyYXRpb24gb3IgbWFudWFsIGNvbXBpbGF0aW9uIGluc2lkZSB0aGUgY29tcGlsZSBmdW5jdGlvbi5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXJcIj5cbiAqICoqTm90ZToqKiBUaGUgYHRyYW5zY2x1ZGVgIGZ1bmN0aW9uIHRoYXQgaXMgcGFzc2VkIHRvIHRoZSBjb21waWxlIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQsIGFzIGl0XG4gKiAgIGUuZy4gZG9lcyBub3Qga25vdyBhYm91dCB0aGUgcmlnaHQgb3V0ZXIgc2NvcGUuIFBsZWFzZSB1c2UgdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gdGhhdCBpcyBwYXNzZWRcbiAqICAgdG8gdGhlIGxpbmsgZnVuY3Rpb24gaW5zdGVhZC5cbiAqIDwvZGl2PlxuXG4gKiBBIGNvbXBpbGUgZnVuY3Rpb24gY2FuIGhhdmUgYSByZXR1cm4gdmFsdWUgd2hpY2ggY2FuIGJlIGVpdGhlciBhIGZ1bmN0aW9uIG9yIGFuIG9iamVjdC5cbiAqXG4gKiAqIHJldHVybmluZyBhIChwb3N0LWxpbmspIGZ1bmN0aW9uIC0gaXMgZXF1aXZhbGVudCB0byByZWdpc3RlcmluZyB0aGUgbGlua2luZyBmdW5jdGlvbiB2aWEgdGhlXG4gKiAgIGBsaW5rYCBwcm9wZXJ0eSBvZiB0aGUgY29uZmlnIG9iamVjdCB3aGVuIHRoZSBjb21waWxlIGZ1bmN0aW9uIGlzIGVtcHR5LlxuICpcbiAqICogcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGZ1bmN0aW9uKHMpIHJlZ2lzdGVyZWQgdmlhIGBwcmVgIGFuZCBgcG9zdGAgcHJvcGVydGllcyAtIGFsbG93cyB5b3UgdG9cbiAqICAgY29udHJvbCB3aGVuIGEgbGlua2luZyBmdW5jdGlvbiBzaG91bGQgYmUgY2FsbGVkIGR1cmluZyB0aGUgbGlua2luZyBwaGFzZS4gU2VlIGluZm8gYWJvdXRcbiAqICAgcHJlLWxpbmtpbmcgYW5kIHBvc3QtbGlua2luZyBmdW5jdGlvbnMgYmVsb3cuXG4gKlxuICpcbiAqICMjIyMgYGxpbmtgXG4gKiBUaGlzIHByb3BlcnR5IGlzIHVzZWQgb25seSBpZiB0aGUgYGNvbXBpbGVgIHByb3BlcnR5IGlzIG5vdCBkZWZpbmVkLlxuICpcbiAqIGBgYGpzXG4gKiAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGlFbGVtZW50LCBpQXR0cnMsIGNvbnRyb2xsZXIsIHRyYW5zY2x1ZGVGbikgeyAuLi4gfVxuICogYGBgXG4gKlxuICogVGhlIGxpbmsgZnVuY3Rpb24gaXMgcmVzcG9uc2libGUgZm9yIHJlZ2lzdGVyaW5nIERPTSBsaXN0ZW5lcnMgYXMgd2VsbCBhcyB1cGRhdGluZyB0aGUgRE9NLiBJdCBpc1xuICogZXhlY3V0ZWQgYWZ0ZXIgdGhlIHRlbXBsYXRlIGhhcyBiZWVuIGNsb25lZC4gVGhpcyBpcyB3aGVyZSBtb3N0IG9mIHRoZSBkaXJlY3RpdmUgbG9naWMgd2lsbCBiZVxuICogcHV0LlxuICpcbiAqICAgKiBgc2NvcGVgIC0ge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgU2NvcGV9IC0gVGhlIHNjb3BlIHRvIGJlIHVzZWQgYnkgdGhlXG4gKiAgICAgZGlyZWN0aXZlIGZvciByZWdpc3RlcmluZyB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlc30uXG4gKlxuICogICAqIGBpRWxlbWVudGAgLSBpbnN0YW5jZSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgd2hlcmUgdGhlIGRpcmVjdGl2ZSBpcyB0byBiZSB1c2VkLiBJdCBpcyBzYWZlIHRvXG4gKiAgICAgbWFuaXB1bGF0ZSB0aGUgY2hpbGRyZW4gb2YgdGhlIGVsZW1lbnQgb25seSBpbiBgcG9zdExpbmtgIGZ1bmN0aW9uIHNpbmNlIHRoZSBjaGlsZHJlbiBoYXZlXG4gKiAgICAgYWxyZWFkeSBiZWVuIGxpbmtlZC5cbiAqXG4gKiAgICogYGlBdHRyc2AgLSBpbnN0YW5jZSBhdHRyaWJ1dGVzIC0gTm9ybWFsaXplZCBsaXN0IG9mIGF0dHJpYnV0ZXMgZGVjbGFyZWQgb24gdGhpcyBlbGVtZW50IHNoYXJlZFxuICogICAgIGJldHdlZW4gYWxsIGRpcmVjdGl2ZSBsaW5raW5nIGZ1bmN0aW9ucy5cbiAqXG4gKiAgICogYGNvbnRyb2xsZXJgIC0gdGhlIGRpcmVjdGl2ZSdzIHJlcXVpcmVkIGNvbnRyb2xsZXIgaW5zdGFuY2UocykgLSBJbnN0YW5jZXMgYXJlIHNoYXJlZFxuICogICAgIGFtb25nIGFsbCBkaXJlY3RpdmVzLCB3aGljaCBhbGxvd3MgdGhlIGRpcmVjdGl2ZXMgdG8gdXNlIHRoZSBjb250cm9sbGVycyBhcyBhIGNvbW11bmljYXRpb25cbiAqICAgICBjaGFubmVsLiBUaGUgZXhhY3QgdmFsdWUgZGVwZW5kcyBvbiB0aGUgZGlyZWN0aXZlJ3MgYHJlcXVpcmVgIHByb3BlcnR5OlxuICogICAgICAgKiBubyBjb250cm9sbGVyKHMpIHJlcXVpcmVkOiB0aGUgZGlyZWN0aXZlJ3Mgb3duIGNvbnRyb2xsZXIsIG9yIGB1bmRlZmluZWRgIGlmIGl0IGRvZXNuJ3QgaGF2ZSBvbmVcbiAqICAgICAgICogYHN0cmluZ2A6IHRoZSBjb250cm9sbGVyIGluc3RhbmNlXG4gKiAgICAgICAqIGBhcnJheWA6IGFycmF5IG9mIGNvbnRyb2xsZXIgaW5zdGFuY2VzXG4gKlxuICogICAgIElmIGEgcmVxdWlyZWQgY29udHJvbGxlciBjYW5ub3QgYmUgZm91bmQsIGFuZCBpdCBpcyBvcHRpb25hbCwgdGhlIGluc3RhbmNlIGlzIGBudWxsYCxcbiAqICAgICBvdGhlcndpc2UgdGhlIHtAbGluayBlcnJvcjokY29tcGlsZTpjdHJlcSBNaXNzaW5nIFJlcXVpcmVkIENvbnRyb2xsZXJ9IGVycm9yIGlzIHRocm93bi5cbiAqXG4gKiAgICAgTm90ZSB0aGF0IHlvdSBjYW4gYWxzbyByZXF1aXJlIHRoZSBkaXJlY3RpdmUncyBvd24gY29udHJvbGxlciAtIGl0IHdpbGwgYmUgbWFkZSBhdmFpbGFibGUgbGlrZVxuICogICAgIGFueSBvdGhlciBjb250cm9sbGVyLlxuICpcbiAqICAgKiBgdHJhbnNjbHVkZUZuYCAtIEEgdHJhbnNjbHVkZSBsaW5raW5nIGZ1bmN0aW9uIHByZS1ib3VuZCB0byB0aGUgY29ycmVjdCB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKiAgICAgVGhpcyBpcyB0aGUgc2FtZSBhcyB0aGUgYCR0cmFuc2NsdWRlYCBwYXJhbWV0ZXIgb2YgZGlyZWN0aXZlIGNvbnRyb2xsZXJzLFxuICogICAgIHNlZSB7QGxpbmsgbmcuJGNvbXBpbGUjLWNvbnRyb2xsZXItIHRoZSBjb250cm9sbGVyIHNlY3Rpb24gZm9yIGRldGFpbHN9LlxuICogICAgIGBmdW5jdGlvbihbc2NvcGVdLCBjbG9uZUxpbmtpbmdGbiwgZnV0dXJlUGFyZW50RWxlbWVudClgLlxuICpcbiAqICMjIyMgUHJlLWxpbmtpbmcgZnVuY3Rpb25cbiAqXG4gKiBFeGVjdXRlZCBiZWZvcmUgdGhlIGNoaWxkIGVsZW1lbnRzIGFyZSBsaW5rZWQuIE5vdCBzYWZlIHRvIGRvIERPTSB0cmFuc2Zvcm1hdGlvbiBzaW5jZSB0aGVcbiAqIGNvbXBpbGVyIGxpbmtpbmcgZnVuY3Rpb24gd2lsbCBmYWlsIHRvIGxvY2F0ZSB0aGUgY29ycmVjdCBlbGVtZW50cyBmb3IgbGlua2luZy5cbiAqXG4gKiAjIyMjIFBvc3QtbGlua2luZyBmdW5jdGlvblxuICpcbiAqIEV4ZWN1dGVkIGFmdGVyIHRoZSBjaGlsZCBlbGVtZW50cyBhcmUgbGlua2VkLlxuICpcbiAqIE5vdGUgdGhhdCBjaGlsZCBlbGVtZW50cyB0aGF0IGNvbnRhaW4gYHRlbXBsYXRlVXJsYCBkaXJlY3RpdmVzIHdpbGwgbm90IGhhdmUgYmVlbiBjb21waWxlZFxuICogYW5kIGxpbmtlZCBzaW5jZSB0aGV5IGFyZSB3YWl0aW5nIGZvciB0aGVpciB0ZW1wbGF0ZSB0byBsb2FkIGFzeW5jaHJvbm91c2x5IGFuZCB0aGVpciBvd25cbiAqIGNvbXBpbGF0aW9uIGFuZCBsaW5raW5nIGhhcyBiZWVuIHN1c3BlbmRlZCB1bnRpbCB0aGF0IG9jY3Vycy5cbiAqXG4gKiBJdCBpcyBzYWZlIHRvIGRvIERPTSB0cmFuc2Zvcm1hdGlvbiBpbiB0aGUgcG9zdC1saW5raW5nIGZ1bmN0aW9uIG9uIGVsZW1lbnRzIHRoYXQgYXJlIG5vdCB3YWl0aW5nXG4gKiBmb3IgdGhlaXIgYXN5bmMgdGVtcGxhdGVzIHRvIGJlIHJlc29sdmVkLlxuICpcbiAqXG4gKiAjIyMgVHJhbnNjbHVzaW9uXG4gKlxuICogVHJhbnNjbHVzaW9uIGlzIHRoZSBwcm9jZXNzIG9mIGV4dHJhY3RpbmcgYSBjb2xsZWN0aW9uIG9mIERPTSBlbGVtZW50cyBmcm9tIG9uZSBwYXJ0IG9mIHRoZSBET00gYW5kXG4gKiBjb3B5aW5nIHRoZW0gdG8gYW5vdGhlciBwYXJ0IG9mIHRoZSBET00sIHdoaWxlIG1haW50YWluaW5nIHRoZWlyIGNvbm5lY3Rpb24gdG8gdGhlIG9yaWdpbmFsIEFuZ3VsYXJKU1xuICogc2NvcGUgZnJvbSB3aGVyZSB0aGV5IHdlcmUgdGFrZW4uXG4gKlxuICogVHJhbnNjbHVzaW9uIGlzIHVzZWQgKG9mdGVuIHdpdGgge0BsaW5rIG5nVHJhbnNjbHVkZX0pIHRvIGluc2VydCB0aGVcbiAqIG9yaWdpbmFsIGNvbnRlbnRzIG9mIGEgZGlyZWN0aXZlJ3MgZWxlbWVudCBpbnRvIGEgc3BlY2lmaWVkIHBsYWNlIGluIHRoZSB0ZW1wbGF0ZSBvZiB0aGUgZGlyZWN0aXZlLlxuICogVGhlIGJlbmVmaXQgb2YgdHJhbnNjbHVzaW9uLCBvdmVyIHNpbXBseSBtb3ZpbmcgdGhlIERPTSBlbGVtZW50cyBtYW51YWxseSwgaXMgdGhhdCB0aGUgdHJhbnNjbHVkZWRcbiAqIGNvbnRlbnQgaGFzIGFjY2VzcyB0byB0aGUgcHJvcGVydGllcyBvbiB0aGUgc2NvcGUgZnJvbSB3aGljaCBpdCB3YXMgdGFrZW4sIGV2ZW4gaWYgdGhlIGRpcmVjdGl2ZVxuICogaGFzIGlzb2xhdGVkIHNjb3BlLlxuICogU2VlIHRoZSB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlI2NyZWF0aW5nLWEtZGlyZWN0aXZlLXRoYXQtd3JhcHMtb3RoZXItZWxlbWVudHMgRGlyZWN0aXZlcyBHdWlkZX0uXG4gKlxuICogVGhpcyBtYWtlcyBpdCBwb3NzaWJsZSBmb3IgdGhlIHdpZGdldCB0byBoYXZlIHByaXZhdGUgc3RhdGUgZm9yIGl0cyB0ZW1wbGF0ZSwgd2hpbGUgdGhlIHRyYW5zY2x1ZGVkXG4gKiBjb250ZW50IGhhcyBhY2Nlc3MgdG8gaXRzIG9yaWdpbmF0aW5nIHNjb3BlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGU6KiogV2hlbiB0ZXN0aW5nIGFuIGVsZW1lbnQgdHJhbnNjbHVkZSBkaXJlY3RpdmUgeW91IG11c3Qgbm90IHBsYWNlIHRoZSBkaXJlY3RpdmUgYXQgdGhlIHJvb3Qgb2YgdGhlXG4gKiBET00gZnJhZ21lbnQgdGhhdCBpcyBiZWluZyBjb21waWxlZC4gU2VlIHtAbGluayBndWlkZS91bml0LXRlc3RpbmcjdGVzdGluZy10cmFuc2NsdXNpb24tZGlyZWN0aXZlc1xuICogVGVzdGluZyBUcmFuc2NsdXNpb24gRGlyZWN0aXZlc30uXG4gKiA8L2Rpdj5cbiAqXG4gKiBUaGVyZSBhcmUgdGhyZWUga2luZHMgb2YgdHJhbnNjbHVzaW9uIGRlcGVuZGluZyB1cG9uIHdoZXRoZXIgeW91IHdhbnQgdG8gdHJhbnNjbHVkZSBqdXN0IHRoZSBjb250ZW50cyBvZiB0aGVcbiAqIGRpcmVjdGl2ZSdzIGVsZW1lbnQsIHRoZSBlbnRpcmUgZWxlbWVudCBvciBtdWx0aXBsZSBwYXJ0cyBvZiB0aGUgZWxlbWVudCBjb250ZW50czpcbiAqXG4gKiAqIGB0cnVlYCAtIHRyYW5zY2x1ZGUgdGhlIGNvbnRlbnQgKGkuZS4gdGhlIGNoaWxkIG5vZGVzKSBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudC5cbiAqICogYCdlbGVtZW50J2AgLSB0cmFuc2NsdWRlIHRoZSB3aG9sZSBvZiB0aGUgZGlyZWN0aXZlJ3MgZWxlbWVudCBpbmNsdWRpbmcgYW55IGRpcmVjdGl2ZXMgb24gdGhpc1xuICogICBlbGVtZW50IHRoYXQgZGVmaW5lZCBhdCBhIGxvd2VyIHByaW9yaXR5IHRoYW4gdGhpcyBkaXJlY3RpdmUuIFdoZW4gdXNlZCwgdGhlIGB0ZW1wbGF0ZWBcbiAqICAgcHJvcGVydHkgaXMgaWdub3JlZC5cbiAqICogKipgey4uLn1gIChhbiBvYmplY3QgaGFzaCk6KiogLSBtYXAgZWxlbWVudHMgb2YgdGhlIGNvbnRlbnQgb250byB0cmFuc2NsdXNpb24gXCJzbG90c1wiIGluIHRoZSB0ZW1wbGF0ZS5cbiAqXG4gKiAqKk11bHQtc2xvdCB0cmFuc2NsdXNpb24qKiBpcyBkZWNsYXJlZCBieSBwcm92aWRpbmcgYW4gb2JqZWN0IGZvciB0aGUgYHRyYW5zY2x1ZGVgIHByb3BlcnR5LlxuICpcbiAqIFRoaXMgb2JqZWN0IGlzIGEgbWFwIHdoZXJlIHRoZSBrZXlzIGFyZSB0aGUgbmFtZSBvZiB0aGUgc2xvdCB0byBmaWxsIGFuZCB0aGUgdmFsdWUgaXMgYW4gZWxlbWVudCBzZWxlY3RvclxuICogdXNlZCB0byBtYXRjaCB0aGUgSFRNTCB0byB0aGUgc2xvdC4gVGhlIGVsZW1lbnQgc2VsZWN0b3Igc2hvdWxkIGJlIGluIG5vcm1hbGl6ZWQgZm9ybSAoZS5nLiBgbXlFbGVtZW50YClcbiAqIGFuZCB3aWxsIG1hdGNoIHRoZSBzdGFuZGFyZCBlbGVtZW50IHZhcmlhbnRzIChlLmcuIGBteS1lbGVtZW50YCwgYG15OmVsZW1lbnRgLCBgZGF0YS1teS1lbGVtZW50YCwgZXRjKS5cbiAqXG4gKiBGb3IgZnVydGhlciBpbmZvcm1hdGlvbiBjaGVjayBvdXQgdGhlIGd1aWRlIG9uIHtAbGluayBndWlkZS9kaXJlY3RpdmUjbWF0Y2hpbmctZGlyZWN0aXZlcyBNYXRjaGluZyBEaXJlY3RpdmVzfVxuICpcbiAqIElmIHRoZSBlbGVtZW50IHNlbGVjdG9yIGlzIHByZWZpeGVkIHdpdGggYSBgP2AgdGhlbiB0aGF0IHNsb3QgaXMgb3B0aW9uYWwuXG4gKlxuICogRm9yIGV4YW1wbGUsIHRoZSB0cmFuc2NsdWRlIG9iamVjdCBgeyBzbG90QTogJz9teUN1c3RvbUVsZW1lbnQnIH1gIG1hcHMgYDxteS1jdXN0b20tZWxlbWVudD5gIGVsZW1lbnRzIHRvXG4gKiB0aGUgYHNsb3RBYCBzbG90LCB3aGljaCBjYW4gYmUgYWNjZXNzZWQgdmlhIHRoZSBgJHRyYW5zY2x1ZGVgIGZ1bmN0aW9uIG9yIHZpYSB0aGUge0BsaW5rIG5nVHJhbnNjbHVkZX0gZGlyZWN0aXZlLlxuICpcbiAqIFNsb3RzIHRoYXQgYXJlIG5vdCBtYXJrZWQgYXMgb3B0aW9uYWwgKGA/YCkgd2lsbCB0cmlnZ2VyIGEgY29tcGlsZSB0aW1lIGVycm9yIGlmIHRoZXJlIGFyZSBubyBtYXRjaGluZyBlbGVtZW50c1xuICogaW4gdGhlIHRyYW5zY2x1ZGUgY29udGVudC4gSWYgeW91IHdpc2ggdG8ga25vdyBpZiBhbiBvcHRpb25hbCBzbG90IHdhcyBmaWxsZWQgd2l0aCBjb250ZW50LCB0aGVuIHlvdSBjYW4gY2FsbFxuICogYCR0cmFuc2NsdWRlLmlzU2xvdEZpbGxlZChzbG90TmFtZSlgIG9uIHRoZSB0cmFuc2NsdWRlIGZ1bmN0aW9uIHBhc3NlZCB0byB0aGUgZGlyZWN0aXZlJ3MgbGluayBmdW5jdGlvbiBhbmRcbiAqIGluamVjdGFibGUgaW50byB0aGUgZGlyZWN0aXZlJ3MgY29udHJvbGxlci5cbiAqXG4gKlxuICogIyMjIyBUcmFuc2NsdXNpb24gRnVuY3Rpb25zXG4gKlxuICogV2hlbiBhIGRpcmVjdGl2ZSByZXF1ZXN0cyB0cmFuc2NsdXNpb24sIHRoZSBjb21waWxlciBleHRyYWN0cyBpdHMgY29udGVudHMgYW5kIHByb3ZpZGVzIGEgKip0cmFuc2NsdXNpb25cbiAqIGZ1bmN0aW9uKiogdG8gdGhlIGRpcmVjdGl2ZSdzIGBsaW5rYCBmdW5jdGlvbiBhbmQgYGNvbnRyb2xsZXJgLiBUaGlzIHRyYW5zY2x1c2lvbiBmdW5jdGlvbiBpcyBhIHNwZWNpYWxcbiAqICoqbGlua2luZyBmdW5jdGlvbioqIHRoYXQgd2lsbCByZXR1cm4gdGhlIGNvbXBpbGVkIGNvbnRlbnRzIGxpbmtlZCB0byBhIG5ldyB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqIElmIHlvdSBhcmUganVzdCB1c2luZyB7QGxpbmsgbmdUcmFuc2NsdWRlfSB0aGVuIHlvdSBkb24ndCBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoaXMgZnVuY3Rpb24sIHNpbmNlXG4gKiBuZ1RyYW5zY2x1ZGUgd2lsbCBkZWFsIHdpdGggaXQgZm9yIHVzLlxuICogPC9kaXY+XG4gKlxuICogSWYgeW91IHdhbnQgdG8gbWFudWFsbHkgY29udHJvbCB0aGUgaW5zZXJ0aW9uIGFuZCByZW1vdmFsIG9mIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGluIHlvdXIgZGlyZWN0aXZlXG4gKiB0aGVuIHlvdSBtdXN0IHVzZSB0aGlzIHRyYW5zY2x1ZGUgZnVuY3Rpb24uIFdoZW4geW91IGNhbGwgYSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGl0IHJldHVybnMgYSBhIGpxTGl0ZS9KUXVlcnlcbiAqIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBjb21waWxlZCBET00sIHdoaWNoIGlzIGxpbmtlZCB0byB0aGUgY29ycmVjdCB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKlxuICogV2hlbiB5b3UgY2FsbCBhIHRyYW5zY2x1c2lvbiBmdW5jdGlvbiB5b3UgY2FuIHBhc3MgaW4gYSAqKmNsb25lIGF0dGFjaCBmdW5jdGlvbioqLiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHNcbiAqIHR3byBwYXJhbWV0ZXJzLCBgZnVuY3Rpb24oY2xvbmUsIHNjb3BlKSB7IC4uLiB9YCwgd2hlcmUgdGhlIGBjbG9uZWAgaXMgYSBmcmVzaCBjb21waWxlZCBjb3B5IG9mIHlvdXIgdHJhbnNjbHVkZWRcbiAqIGNvbnRlbnQgYW5kIHRoZSBgc2NvcGVgIGlzIHRoZSBuZXdseSBjcmVhdGVkIHRyYW5zY2x1c2lvbiBzY29wZSwgd2hpY2ggdGhlIGNsb25lIHdpbGwgYmUgbGlua2VkIHRvLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiAqKkJlc3QgUHJhY3RpY2UqKjogQWx3YXlzIHByb3ZpZGUgYSBgY2xvbmVGbmAgKGNsb25lIGF0dGFjaCBmdW5jdGlvbikgd2hlbiB5b3UgY2FsbCBhIHRyYW5zY2x1ZGUgZnVuY3Rpb25cbiAqIHNpbmNlIHlvdSB0aGVuIGdldCBhIGZyZXNoIGNsb25lIG9mIHRoZSBvcmlnaW5hbCBET00gYW5kIGFsc28gaGF2ZSBhY2Nlc3MgdG8gdGhlIG5ldyB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKiA8L2Rpdj5cbiAqXG4gKiBJdCBpcyBub3JtYWwgcHJhY3RpY2UgdG8gYXR0YWNoIHlvdXIgdHJhbnNjbHVkZWQgY29udGVudCAoYGNsb25lYCkgdG8gdGhlIERPTSBpbnNpZGUgeW91ciAqKmNsb25lXG4gKiBhdHRhY2ggZnVuY3Rpb24qKjpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHRyYW5zY2x1ZGVkQ29udGVudCwgdHJhbnNjbHVzaW9uU2NvcGU7XG4gKlxuICogJHRyYW5zY2x1ZGUoZnVuY3Rpb24oY2xvbmUsIHNjb3BlKSB7XG4gKiAgIGVsZW1lbnQuYXBwZW5kKGNsb25lKTtcbiAqICAgdHJhbnNjbHVkZWRDb250ZW50ID0gY2xvbmU7XG4gKiAgIHRyYW5zY2x1c2lvblNjb3BlID0gc2NvcGU7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIExhdGVyLCBpZiB5b3Ugd2FudCB0byByZW1vdmUgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgZnJvbSB5b3VyIERPTSB0aGVuIHlvdSBzaG91bGQgYWxzbyBkZXN0cm95IHRoZVxuICogYXNzb2NpYXRlZCB0cmFuc2NsdXNpb24gc2NvcGU6XG4gKlxuICogYGBganNcbiAqIHRyYW5zY2x1ZGVkQ29udGVudC5yZW1vdmUoKTtcbiAqIHRyYW5zY2x1c2lvblNjb3BlLiRkZXN0cm95KCk7XG4gKiBgYGBcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogKipCZXN0IFByYWN0aWNlKio6IGlmIHlvdSBpbnRlbmQgdG8gYWRkIGFuZCByZW1vdmUgdHJhbnNjbHVkZWQgY29udGVudCBtYW51YWxseSBpbiB5b3VyIGRpcmVjdGl2ZVxuICogKGJ5IGNhbGxpbmcgdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBET00gYW5kIGNhbGxpbmcgYGVsZW1lbnQucmVtb3ZlKClgIHRvIHJlbW92ZSBpdCksXG4gKiB0aGVuIHlvdSBhcmUgYWxzbyByZXNwb25zaWJsZSBmb3IgY2FsbGluZyBgJGRlc3Ryb3lgIG9uIHRoZSB0cmFuc2NsdXNpb24gc2NvcGUuXG4gKiA8L2Rpdj5cbiAqXG4gKiBUaGUgYnVpbHQtaW4gRE9NIG1hbmlwdWxhdGlvbiBkaXJlY3RpdmVzLCBzdWNoIGFzIHtAbGluayBuZ0lmfSwge0BsaW5rIG5nU3dpdGNofSBhbmQge0BsaW5rIG5nUmVwZWF0fVxuICogYXV0b21hdGljYWxseSBkZXN0cm95IHRoZWlyIHRyYW5zY2x1ZGVkIGNsb25lcyBhcyBuZWNlc3Nhcnkgc28geW91IGRvIG5vdCBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoaXMgaWZcbiAqIHlvdSBhcmUgc2ltcGx5IHVzaW5nIHtAbGluayBuZ1RyYW5zY2x1ZGV9IHRvIGluamVjdCB0aGUgdHJhbnNjbHVzaW9uIGludG8geW91ciBkaXJlY3RpdmUuXG4gKlxuICpcbiAqICMjIyMgVHJhbnNjbHVzaW9uIFNjb3Blc1xuICpcbiAqIFdoZW4geW91IGNhbGwgYSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGl0IHJldHVybnMgYSBET00gZnJhZ21lbnQgdGhhdCBpcyBwcmUtYm91bmQgdG8gYSAqKnRyYW5zY2x1c2lvblxuICogc2NvcGUqKi4gVGhpcyBzY29wZSBpcyBzcGVjaWFsLCBpbiB0aGF0IGl0IGlzIGEgY2hpbGQgb2YgdGhlIGRpcmVjdGl2ZSdzIHNjb3BlIChhbmQgc28gZ2V0cyBkZXN0cm95ZWRcbiAqIHdoZW4gdGhlIGRpcmVjdGl2ZSdzIHNjb3BlIGdldHMgZGVzdHJveWVkKSBidXQgaXQgaW5oZXJpdHMgdGhlIHByb3BlcnRpZXMgb2YgdGhlIHNjb3BlIGZyb20gd2hpY2ggaXRcbiAqIHdhcyB0YWtlbi5cbiAqXG4gKiBGb3IgZXhhbXBsZSBjb25zaWRlciBhIGRpcmVjdGl2ZSB0aGF0IHVzZXMgdHJhbnNjbHVzaW9uIGFuZCBpc29sYXRlZCBzY29wZS4gVGhlIERPTSBoaWVyYXJjaHkgbWlnaHQgbG9va1xuICogbGlrZSB0aGlzOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxkaXYgbmctYXBwPlxuICogICA8ZGl2IGlzb2xhdGU+XG4gKiAgICAgPGRpdiB0cmFuc2NsdXNpb24+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBUaGUgYCRwYXJlbnRgIHNjb3BlIGhpZXJhcmNoeSB3aWxsIGxvb2sgbGlrZSB0aGlzOlxuICpcbiAgIGBgYFxuICAgLSAkcm9vdFNjb3BlXG4gICAgIC0gaXNvbGF0ZVxuICAgICAgIC0gdHJhbnNjbHVzaW9uXG4gICBgYGBcbiAqXG4gKiBidXQgdGhlIHNjb3BlcyB3aWxsIGluaGVyaXQgcHJvdG90eXBpY2FsbHkgZnJvbSBkaWZmZXJlbnQgc2NvcGVzIHRvIHRoZWlyIGAkcGFyZW50YC5cbiAqXG4gICBgYGBcbiAgIC0gJHJvb3RTY29wZVxuICAgICAtIHRyYW5zY2x1c2lvblxuICAgLSBpc29sYXRlXG4gICBgYGBcbiAqXG4gKlxuICogIyMjIEF0dHJpYnV0ZXNcbiAqXG4gKiBUaGUge0BsaW5rIG5nLiRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIEF0dHJpYnV0ZXN9IG9iamVjdCAtIHBhc3NlZCBhcyBhIHBhcmFtZXRlciBpbiB0aGVcbiAqIGBsaW5rKClgIG9yIGBjb21waWxlKClgIGZ1bmN0aW9ucy4gSXQgaGFzIGEgdmFyaWV0eSBvZiB1c2VzLlxuICpcbiAqICogKkFjY2Vzc2luZyBub3JtYWxpemVkIGF0dHJpYnV0ZSBuYW1lczoqIERpcmVjdGl2ZXMgbGlrZSAnbmdCaW5kJyBjYW4gYmUgZXhwcmVzc2VkIGluIG1hbnkgd2F5czpcbiAqICAgJ25nOmJpbmQnLCBgZGF0YS1uZy1iaW5kYCwgb3IgJ3gtbmctYmluZCcuIFRoZSBhdHRyaWJ1dGVzIG9iamVjdCBhbGxvd3MgZm9yIG5vcm1hbGl6ZWQgYWNjZXNzXG4gKiAgIHRvIHRoZSBhdHRyaWJ1dGVzLlxuICpcbiAqICogKkRpcmVjdGl2ZSBpbnRlci1jb21tdW5pY2F0aW9uOiogQWxsIGRpcmVjdGl2ZXMgc2hhcmUgdGhlIHNhbWUgaW5zdGFuY2Ugb2YgdGhlIGF0dHJpYnV0ZXNcbiAqICAgb2JqZWN0IHdoaWNoIGFsbG93cyB0aGUgZGlyZWN0aXZlcyB0byB1c2UgdGhlIGF0dHJpYnV0ZXMgb2JqZWN0IGFzIGludGVyIGRpcmVjdGl2ZVxuICogICBjb21tdW5pY2F0aW9uLlxuICpcbiAqICogKlN1cHBvcnRzIGludGVycG9sYXRpb246KiBJbnRlcnBvbGF0aW9uIGF0dHJpYnV0ZXMgYXJlIGFzc2lnbmVkIHRvIHRoZSBhdHRyaWJ1dGUgb2JqZWN0XG4gKiAgIGFsbG93aW5nIG90aGVyIGRpcmVjdGl2ZXMgdG8gcmVhZCB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlLlxuICpcbiAqICogKk9ic2VydmluZyBpbnRlcnBvbGF0ZWQgYXR0cmlidXRlczoqIFVzZSBgJG9ic2VydmVgIHRvIG9ic2VydmUgdGhlIHZhbHVlIGNoYW5nZXMgb2YgYXR0cmlidXRlc1xuICogICB0aGF0IGNvbnRhaW4gaW50ZXJwb2xhdGlvbiAoZS5nLiBgc3JjPVwie3tiYXJ9fVwiYCkuIE5vdCBvbmx5IGlzIHRoaXMgdmVyeSBlZmZpY2llbnQgYnV0IGl0J3MgYWxzb1xuICogICB0aGUgb25seSB3YXkgdG8gZWFzaWx5IGdldCB0aGUgYWN0dWFsIHZhbHVlIGJlY2F1c2UgZHVyaW5nIHRoZSBsaW5raW5nIHBoYXNlIHRoZSBpbnRlcnBvbGF0aW9uXG4gKiAgIGhhc24ndCBiZWVuIGV2YWx1YXRlZCB5ZXQgYW5kIHNvIHRoZSB2YWx1ZSBpcyBhdCB0aGlzIHRpbWUgc2V0IHRvIGB1bmRlZmluZWRgLlxuICpcbiAqIGBgYGpzXG4gKiBmdW5jdGlvbiBsaW5raW5nRm4oc2NvcGUsIGVsbSwgYXR0cnMsIGN0cmwpIHtcbiAqICAgLy8gZ2V0IHRoZSBhdHRyaWJ1dGUgdmFsdWVcbiAqICAgY29uc29sZS5sb2coYXR0cnMubmdNb2RlbCk7XG4gKlxuICogICAvLyBjaGFuZ2UgdGhlIGF0dHJpYnV0ZVxuICogICBhdHRycy4kc2V0KCduZ01vZGVsJywgJ25ldyB2YWx1ZScpO1xuICpcbiAqICAgLy8gb2JzZXJ2ZSBjaGFuZ2VzIHRvIGludGVycG9sYXRlZCBhdHRyaWJ1dGVcbiAqICAgYXR0cnMuJG9ic2VydmUoJ25nTW9kZWwnLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICAgIGNvbnNvbGUubG9nKCduZ01vZGVsIGhhcyBjaGFuZ2VkIHZhbHVlIHRvICcgKyB2YWx1ZSk7XG4gKiAgIH0pO1xuICogfVxuICogYGBgXG4gKlxuICogIyMgRXhhbXBsZVxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGUqKjogVHlwaWNhbGx5IGRpcmVjdGl2ZXMgYXJlIHJlZ2lzdGVyZWQgd2l0aCBgbW9kdWxlLmRpcmVjdGl2ZWAuIFRoZSBleGFtcGxlIGJlbG93IGlzXG4gKiB0byBpbGx1c3RyYXRlIGhvdyBgJGNvbXBpbGVgIHdvcmtzLlxuICogPC9kaXY+XG4gKlxuIDxleGFtcGxlIG1vZHVsZT1cImNvbXBpbGVFeGFtcGxlXCIgbmFtZT1cImNvbXBpbGVcIj5cbiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgPHNjcmlwdD5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdjb21waWxlRXhhbXBsZScsIFtdLCBmdW5jdGlvbigkY29tcGlsZVByb3ZpZGVyKSB7XG4gICAgICAgIC8vIGNvbmZpZ3VyZSBuZXcgJ2NvbXBpbGUnIGRpcmVjdGl2ZSBieSBwYXNzaW5nIGEgZGlyZWN0aXZlXG4gICAgICAgIC8vIGZhY3RvcnkgZnVuY3Rpb24uIFRoZSBmYWN0b3J5IGZ1bmN0aW9uIGluamVjdHMgdGhlICckY29tcGlsZSdcbiAgICAgICAgJGNvbXBpbGVQcm92aWRlci5kaXJlY3RpdmUoJ2NvbXBpbGUnLCBmdW5jdGlvbigkY29tcGlsZSkge1xuICAgICAgICAgIC8vIGRpcmVjdGl2ZSBmYWN0b3J5IGNyZWF0ZXMgYSBsaW5rIGZ1bmN0aW9uXG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKFxuICAgICAgICAgICAgICBmdW5jdGlvbihzY29wZSkge1xuICAgICAgICAgICAgICAgICAvLyB3YXRjaCB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gZm9yIGNoYW5nZXNcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGUuJGV2YWwoYXR0cnMuY29tcGlsZSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgJ2NvbXBpbGUnIGV4cHJlc3Npb24gY2hhbmdlc1xuICAgICAgICAgICAgICAgIC8vIGFzc2lnbiBpdCBpbnRvIHRoZSBjdXJyZW50IERPTVxuICAgICAgICAgICAgICAgIGVsZW1lbnQuaHRtbCh2YWx1ZSk7XG5cbiAgICAgICAgICAgICAgICAvLyBjb21waWxlIHRoZSBuZXcgRE9NIGFuZCBsaW5rIGl0IHRvIHRoZSBjdXJyZW50XG4gICAgICAgICAgICAgICAgLy8gc2NvcGUuXG4gICAgICAgICAgICAgICAgLy8gTk9URTogd2Ugb25seSBjb21waWxlIC5jaGlsZE5vZGVzIHNvIHRoYXRcbiAgICAgICAgICAgICAgICAvLyB3ZSBkb24ndCBnZXQgaW50byBpbmZpbml0ZSBsb29wIGNvbXBpbGluZyBvdXJzZWx2ZXNcbiAgICAgICAgICAgICAgICAkY29tcGlsZShlbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAuY29udHJvbGxlcignR3JlZXRlckNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAkc2NvcGUubmFtZSA9ICdBbmd1bGFyJztcbiAgICAgICAgJHNjb3BlLmh0bWwgPSAnSGVsbG8ge3tuYW1lfX0nO1xuICAgICAgfV0pO1xuICAgIDwvc2NyaXB0PlxuICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkdyZWV0ZXJDb250cm9sbGVyXCI+XG4gICAgICA8aW5wdXQgbmctbW9kZWw9XCJuYW1lXCI+IDxici8+XG4gICAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJodG1sXCI+PC90ZXh0YXJlYT4gPGJyLz5cbiAgICAgIDxkaXYgY29tcGlsZT1cImh0bWxcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgIDwvZmlsZT5cbiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgaXQoJ3Nob3VsZCBhdXRvIGNvbXBpbGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICB2YXIgdGV4dGFyZWEgPSAkKCd0ZXh0YXJlYScpO1xuICAgICAgIHZhciBvdXRwdXQgPSAkKCdkaXZbY29tcGlsZV0nKTtcbiAgICAgICAvLyBUaGUgaW5pdGlhbCBzdGF0ZSByZWFkcyAnSGVsbG8gQW5ndWxhcicuXG4gICAgICAgZXhwZWN0KG91dHB1dC5nZXRUZXh0KCkpLnRvQmUoJ0hlbGxvIEFuZ3VsYXInKTtcbiAgICAgICB0ZXh0YXJlYS5jbGVhcigpO1xuICAgICAgIHRleHRhcmVhLnNlbmRLZXlzKCd7e25hbWV9fSEnKTtcbiAgICAgICBleHBlY3Qob3V0cHV0LmdldFRleHQoKSkudG9CZSgnQW5ndWxhciEnKTtcbiAgICAgfSk7XG4gICA8L2ZpbGU+XG4gPC9leGFtcGxlPlxuXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfERPTUVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCBvciBIVE1MIHN0cmluZyB0byBjb21waWxlIGludG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oYW5ndWxhci5TY29wZSwgY2xvbmVBdHRhY2hGbj0pfSB0cmFuc2NsdWRlIGZ1bmN0aW9uIGF2YWlsYWJsZSB0byBkaXJlY3RpdmVzIC0gREVQUkVDQVRFRC5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtZGFuZ2VyXCI+XG4gKiAqKk5vdGU6KiogUGFzc2luZyBhIGB0cmFuc2NsdWRlYCBmdW5jdGlvbiB0byB0aGUgJGNvbXBpbGUgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCwgYXMgaXRcbiAqICAgZS5nLiB3aWxsIG5vdCB1c2UgdGhlIHJpZ2h0IG91dGVyIHNjb3BlLiBQbGVhc2UgcGFzcyB0aGUgdHJhbnNjbHVkZSBmdW5jdGlvbiBhcyBhXG4gKiAgIGBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbmAgdG8gdGhlIGxpbmsgZnVuY3Rpb24gaW5zdGVhZC5cbiAqIDwvZGl2PlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhQcmlvcml0eSBvbmx5IGFwcGx5IGRpcmVjdGl2ZXMgbG93ZXIgdGhhbiBnaXZlbiBwcmlvcml0eSAoT25seSBlZmZlY3RzIHRoZVxuICogICAgICAgICAgICAgICAgIHJvb3QgZWxlbWVudChzKSwgbm90IHRoZWlyIGNoaWxkcmVuKVxuICogQHJldHVybnMge2Z1bmN0aW9uKHNjb3BlLCBjbG9uZUF0dGFjaEZuPSwgb3B0aW9ucz0pfSBhIGxpbmsgZnVuY3Rpb24gd2hpY2ggaXMgdXNlZCB0byBiaW5kIHRlbXBsYXRlXG4gKiAoYSBET00gZWxlbWVudC90cmVlKSB0byBhIHNjb3BlLiBXaGVyZTpcbiAqXG4gKiAgKiBgc2NvcGVgIC0gQSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBTY29wZX0gdG8gYmluZCB0by5cbiAqICAqIGBjbG9uZUF0dGFjaEZuYCAtIElmIGBjbG9uZUF0dGFjaEZuYCBpcyBwcm92aWRlZCwgdGhlbiB0aGUgbGluayBmdW5jdGlvbiB3aWxsIGNsb25lIHRoZVxuICogIGB0ZW1wbGF0ZWAgYW5kIGNhbGwgdGhlIGBjbG9uZUF0dGFjaEZuYCBmdW5jdGlvbiBhbGxvd2luZyB0aGUgY2FsbGVyIHRvIGF0dGFjaCB0aGVcbiAqICBjbG9uZWQgZWxlbWVudHMgdG8gdGhlIERPTSBkb2N1bWVudCBhdCB0aGUgYXBwcm9wcmlhdGUgcGxhY2UuIFRoZSBgY2xvbmVBdHRhY2hGbmAgaXNcbiAqICBjYWxsZWQgYXM6IDxici8+IGBjbG9uZUF0dGFjaEZuKGNsb25lZEVsZW1lbnQsIHNjb3BlKWAgd2hlcmU6XG4gKlxuICogICAgICAqIGBjbG9uZWRFbGVtZW50YCAtIGlzIGEgY2xvbmUgb2YgdGhlIG9yaWdpbmFsIGBlbGVtZW50YCBwYXNzZWQgaW50byB0aGUgY29tcGlsZXIuXG4gKiAgICAgICogYHNjb3BlYCAtIGlzIHRoZSBjdXJyZW50IHNjb3BlIHdpdGggd2hpY2ggdGhlIGxpbmtpbmcgZnVuY3Rpb24gaXMgd29ya2luZyB3aXRoLlxuICpcbiAqICAqIGBvcHRpb25zYCAtIEFuIG9wdGlvbmFsIG9iamVjdCBoYXNoIHdpdGggbGlua2luZyBvcHRpb25zLiBJZiBgb3B0aW9uc2AgaXMgcHJvdmlkZWQsIHRoZW4gdGhlIGZvbGxvd2luZ1xuICogIGtleXMgbWF5IGJlIHVzZWQgdG8gY29udHJvbCBsaW5raW5nIGJlaGF2aW9yOlxuICpcbiAqICAgICAgKiBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIC0gdGhlIHRyYW5zY2x1ZGUgZnVuY3Rpb24gbWFkZSBhdmFpbGFibGUgdG9cbiAqICAgICAgICBkaXJlY3RpdmVzOyBpZiBnaXZlbiwgaXQgd2lsbCBiZSBwYXNzZWQgdGhyb3VnaCB0byB0aGUgbGluayBmdW5jdGlvbnMgb2ZcbiAqICAgICAgICBkaXJlY3RpdmVzIGZvdW5kIGluIGBlbGVtZW50YCBkdXJpbmcgY29tcGlsYXRpb24uXG4gKiAgICAgICogYHRyYW5zY2x1ZGVDb250cm9sbGVyc2AgLSBhbiBvYmplY3QgaGFzaCB3aXRoIGtleXMgdGhhdCBtYXAgY29udHJvbGxlciBuYW1lc1xuICogICAgICAgIHRvIGEgaGFzaCB3aXRoIHRoZSBrZXkgYGluc3RhbmNlYCwgd2hpY2ggbWFwcyB0byB0aGUgY29udHJvbGxlciBpbnN0YW5jZTtcbiAqICAgICAgICBpZiBnaXZlbiwgaXQgd2lsbCBtYWtlIHRoZSBjb250cm9sbGVycyBhdmFpbGFibGUgdG8gZGlyZWN0aXZlcyBvbiB0aGUgY29tcGlsZU5vZGU6XG4gKiAgICAgICAgYGBgXG4gKiAgICAgICAge1xuICogICAgICAgICAgcGFyZW50OiB7XG4gKiAgICAgICAgICAgIGluc3RhbmNlOiBwYXJlbnRDb250cm9sbGVySW5zdGFuY2VcbiAqICAgICAgICAgIH1cbiAqICAgICAgICB9XG4gKiAgICAgICAgYGBgXG4gKiAgICAgICogYGZ1dHVyZVBhcmVudEVsZW1lbnRgIC0gZGVmaW5lcyB0aGUgcGFyZW50IHRvIHdoaWNoIHRoZSBgY2xvbmVBdHRhY2hGbmAgd2lsbCBhZGRcbiAqICAgICAgICB0aGUgY2xvbmVkIGVsZW1lbnRzOyBvbmx5IG5lZWRlZCBmb3IgdHJhbnNjbHVkZXMgdGhhdCBhcmUgYWxsb3dlZCB0byBjb250YWluIG5vbiBodG1sXG4gKiAgICAgICAgZWxlbWVudHMgKGUuZy4gU1ZHIGVsZW1lbnRzKS4gU2VlIGFsc28gdGhlIGRpcmVjdGl2ZS5jb250cm9sbGVyIHByb3BlcnR5LlxuICpcbiAqIENhbGxpbmcgdGhlIGxpbmtpbmcgZnVuY3Rpb24gcmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgdGVtcGxhdGUuIEl0IGlzIGVpdGhlciB0aGUgb3JpZ2luYWxcbiAqIGVsZW1lbnQgcGFzc2VkIGluLCBvciB0aGUgY2xvbmUgb2YgdGhlIGVsZW1lbnQgaWYgdGhlIGBjbG9uZUF0dGFjaEZuYCBpcyBwcm92aWRlZC5cbiAqXG4gKiBBZnRlciBsaW5raW5nIHRoZSB2aWV3IGlzIG5vdCB1cGRhdGVkIHVudGlsIGFmdGVyIGEgY2FsbCB0byAkZGlnZXN0IHdoaWNoIHR5cGljYWxseSBpcyBkb25lIGJ5XG4gKiBBbmd1bGFyIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogSWYgeW91IG5lZWQgYWNjZXNzIHRvIHRoZSBib3VuZCB2aWV3LCB0aGVyZSBhcmUgdHdvIHdheXMgdG8gZG8gaXQ6XG4gKlxuICogLSBJZiB5b3UgYXJlIG5vdCBhc2tpbmcgdGhlIGxpbmtpbmcgZnVuY3Rpb24gdG8gY2xvbmUgdGhlIHRlbXBsYXRlLCBjcmVhdGUgdGhlIERPTSBlbGVtZW50KHMpXG4gKiAgIGJlZm9yZSB5b3Ugc2VuZCB0aGVtIHRvIHRoZSBjb21waWxlciBhbmQga2VlcCB0aGlzIHJlZmVyZW5jZSBhcm91bmQuXG4gKiAgIGBgYGpzXG4gKiAgICAgdmFyIGVsZW1lbnQgPSAkY29tcGlsZSgnPHA+e3t0b3RhbH19PC9wPicpKHNjb3BlKTtcbiAqICAgYGBgXG4gKlxuICogLSBpZiBvbiB0aGUgb3RoZXIgaGFuZCwgeW91IG5lZWQgdGhlIGVsZW1lbnQgdG8gYmUgY2xvbmVkLCB0aGUgdmlldyByZWZlcmVuY2UgZnJvbSB0aGUgb3JpZ2luYWxcbiAqICAgZXhhbXBsZSB3b3VsZCBub3QgcG9pbnQgdG8gdGhlIGNsb25lLCBidXQgcmF0aGVyIHRvIHRoZSBvcmlnaW5hbCB0ZW1wbGF0ZSB0aGF0IHdhcyBjbG9uZWQuIEluXG4gKiAgIHRoaXMgY2FzZSwgeW91IGNhbiBhY2Nlc3MgdGhlIGNsb25lIHZpYSB0aGUgY2xvbmVBdHRhY2hGbjpcbiAqICAgYGBganNcbiAqICAgICB2YXIgdGVtcGxhdGVFbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KCc8cD57e3RvdGFsfX08L3A+JyksXG4gKiAgICAgICAgIHNjb3BlID0gLi4uLjtcbiAqXG4gKiAgICAgdmFyIGNsb25lZEVsZW1lbnQgPSAkY29tcGlsZSh0ZW1wbGF0ZUVsZW1lbnQpKHNjb3BlLCBmdW5jdGlvbihjbG9uZWRFbGVtZW50LCBzY29wZSkge1xuICogICAgICAgLy9hdHRhY2ggdGhlIGNsb25lIHRvIERPTSBkb2N1bWVudCBhdCB0aGUgcmlnaHQgcGxhY2VcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgLy9ub3cgd2UgaGF2ZSByZWZlcmVuY2UgdG8gdGhlIGNsb25lZCBET00gdmlhIGBjbG9uZWRFbGVtZW50YFxuICogICBgYGBcbiAqXG4gKlxuICogRm9yIGluZm9ybWF0aW9uIG9uIGhvdyB0aGUgY29tcGlsZXIgd29ya3MsIHNlZSB0aGVcbiAqIHtAbGluayBndWlkZS9jb21waWxlciBBbmd1bGFyIEhUTUwgQ29tcGlsZXJ9IHNlY3Rpb24gb2YgdGhlIERldmVsb3BlciBHdWlkZS5cbiAqXG4gKiBAa25vd25Jc3N1ZVxuICpcbiAqICMjIyBEb3VibGUgQ29tcGlsYXRpb25cbiAqXG4gICBEb3VibGUgY29tcGlsYXRpb24gb2NjdXJzIHdoZW4gYW4gYWxyZWFkeSBjb21waWxlZCBwYXJ0IG9mIHRoZSBET00gZ2V0c1xuICAgY29tcGlsZWQgYWdhaW4uIFRoaXMgaXMgYW4gdW5kZXNpcmVkIGVmZmVjdCBhbmQgY2FuIGxlYWQgdG8gbWlzYmVoYXZpbmcgZGlyZWN0aXZlcywgcGVyZm9ybWFuY2UgaXNzdWVzLFxuICAgYW5kIG1lbW9yeSBsZWFrcy4gUmVmZXIgdG8gdGhlIENvbXBpbGVyIEd1aWRlIHtAbGluayBndWlkZS9jb21waWxlciNkb3VibGUtY29tcGlsYXRpb24tYW5kLWhvdy10by1hdm9pZC1pdFxuICAgc2VjdGlvbiBvbiBkb3VibGUgY29tcGlsYXRpb259IGZvciBhbiBpbi1kZXB0aCBleHBsYW5hdGlvbiBhbmQgd2F5cyB0byBhdm9pZCBpdC5cbiAqXG4gKi9cblxudmFyICRjb21waWxlTWluRXJyID0gbWluRXJyKCckY29tcGlsZScpO1xuXG5mdW5jdGlvbiBVTklOSVRJQUxJWkVEX1ZBTFVFKCkge31cbnZhciBfVU5JTklUSUFMSVpFRF9WQUxVRSA9IG5ldyBVTklOSVRJQUxJWkVEX1ZBTFVFKCk7XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKi9cbiRDb21waWxlUHJvdmlkZXIuJGluamVjdCA9IFsnJHByb3ZpZGUnLCAnJCRzYW5pdGl6ZVVyaVByb3ZpZGVyJ107XG4vKiogQHRoaXMgKi9cbmZ1bmN0aW9uICRDb21waWxlUHJvdmlkZXIoJHByb3ZpZGUsICQkc2FuaXRpemVVcmlQcm92aWRlcikge1xuICB2YXIgaGFzRGlyZWN0aXZlcyA9IHt9LFxuICAgICAgU3VmZml4ID0gJ0RpcmVjdGl2ZScsXG4gICAgICBDT01NRU5UX0RJUkVDVElWRV9SRUdFWFAgPSAvXlxccypkaXJlY3RpdmU6XFxzKihbXFx3LV0rKVxccysoLiopJC8sXG4gICAgICBDTEFTU19ESVJFQ1RJVkVfUkVHRVhQID0gLygoW1xcdy1dKykoPzo6KFteO10rKSk/Oz8pLyxcbiAgICAgIEFMTF9PUl9OT1RISU5HX0FUVFJTID0gbWFrZU1hcCgnbmdTcmMsbmdTcmNzZXQsc3JjLHNyY3NldCcpLFxuICAgICAgUkVRVUlSRV9QUkVGSVhfUkVHRVhQID0gL14oPzooXFxeXFxePyk/KFxcPyk/KFxcXlxcXj8pPyk/LztcblxuICAvLyBSZWY6IGh0dHA6Ly9kZXZlbG9wZXJzLndoYXR3Zy5vcmcvd2ViYXBwYXBpcy5odG1sI2V2ZW50LWhhbmRsZXItaWRsLWF0dHJpYnV0ZXNcbiAgLy8gVGhlIGFzc3VtcHRpb24gaXMgdGhhdCBmdXR1cmUgRE9NIGV2ZW50IGF0dHJpYnV0ZSBuYW1lcyB3aWxsIGJlZ2luIHdpdGhcbiAgLy8gJ29uJyBhbmQgYmUgY29tcG9zZWQgb2Ygb25seSBFbmdsaXNoIGxldHRlcnMuXG4gIHZhciBFVkVOVF9IQU5ETEVSX0FUVFJfUkVHRVhQID0gL14ob25bYS16XSt8Zm9ybWFjdGlvbikkLztcbiAgdmFyIGJpbmRpbmdDYWNoZSA9IGNyZWF0ZU1hcCgpO1xuXG4gIGZ1bmN0aW9uIHBhcnNlSXNvbGF0ZUJpbmRpbmdzKHNjb3BlLCBkaXJlY3RpdmVOYW1lLCBpc0NvbnRyb2xsZXIpIHtcbiAgICB2YXIgTE9DQUxfUkVHRVhQID0gL15cXHMqKFtAJjxdfD0oXFwqPykpKFxcPz8pXFxzKihbXFx3JF0qKVxccyokLztcblxuICAgIHZhciBiaW5kaW5ncyA9IGNyZWF0ZU1hcCgpO1xuXG4gICAgZm9yRWFjaChzY29wZSwgZnVuY3Rpb24oZGVmaW5pdGlvbiwgc2NvcGVOYW1lKSB7XG4gICAgICBpZiAoZGVmaW5pdGlvbiBpbiBiaW5kaW5nQ2FjaGUpIHtcbiAgICAgICAgYmluZGluZ3Nbc2NvcGVOYW1lXSA9IGJpbmRpbmdDYWNoZVtkZWZpbml0aW9uXTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIG1hdGNoID0gZGVmaW5pdGlvbi5tYXRjaChMT0NBTF9SRUdFWFApO1xuXG4gICAgICBpZiAoIW1hdGNoKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdpc2NwJyxcbiAgICAgICAgICAgICdJbnZhbGlkIHszfSBmb3IgZGlyZWN0aXZlIFxcJ3swfVxcJy4nICtcbiAgICAgICAgICAgICcgRGVmaW5pdGlvbjogey4uLiB7MX06IFxcJ3syfVxcJyAuLi59JyxcbiAgICAgICAgICAgIGRpcmVjdGl2ZU5hbWUsIHNjb3BlTmFtZSwgZGVmaW5pdGlvbixcbiAgICAgICAgICAgIChpc0NvbnRyb2xsZXIgPyAnY29udHJvbGxlciBiaW5kaW5ncyBkZWZpbml0aW9uJyA6XG4gICAgICAgICAgICAnaXNvbGF0ZSBzY29wZSBkZWZpbml0aW9uJykpO1xuICAgICAgfVxuXG4gICAgICBiaW5kaW5nc1tzY29wZU5hbWVdID0ge1xuICAgICAgICBtb2RlOiBtYXRjaFsxXVswXSxcbiAgICAgICAgY29sbGVjdGlvbjogbWF0Y2hbMl0gPT09ICcqJyxcbiAgICAgICAgb3B0aW9uYWw6IG1hdGNoWzNdID09PSAnPycsXG4gICAgICAgIGF0dHJOYW1lOiBtYXRjaFs0XSB8fCBzY29wZU5hbWVcbiAgICAgIH07XG4gICAgICBpZiAobWF0Y2hbNF0pIHtcbiAgICAgICAgYmluZGluZ0NhY2hlW2RlZmluaXRpb25dID0gYmluZGluZ3Nbc2NvcGVOYW1lXTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBiaW5kaW5ncztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRGlyZWN0aXZlQmluZGluZ3MoZGlyZWN0aXZlLCBkaXJlY3RpdmVOYW1lKSB7XG4gICAgdmFyIGJpbmRpbmdzID0ge1xuICAgICAgaXNvbGF0ZVNjb3BlOiBudWxsLFxuICAgICAgYmluZFRvQ29udHJvbGxlcjogbnVsbFxuICAgIH07XG4gICAgaWYgKGlzT2JqZWN0KGRpcmVjdGl2ZS5zY29wZSkpIHtcbiAgICAgIGlmIChkaXJlY3RpdmUuYmluZFRvQ29udHJvbGxlciA9PT0gdHJ1ZSkge1xuICAgICAgICBiaW5kaW5ncy5iaW5kVG9Db250cm9sbGVyID0gcGFyc2VJc29sYXRlQmluZGluZ3MoZGlyZWN0aXZlLnNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgdHJ1ZSk7XG4gICAgICAgIGJpbmRpbmdzLmlzb2xhdGVTY29wZSA9IHt9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmluZGluZ3MuaXNvbGF0ZVNjb3BlID0gcGFyc2VJc29sYXRlQmluZGluZ3MoZGlyZWN0aXZlLnNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVOYW1lLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc09iamVjdChkaXJlY3RpdmUuYmluZFRvQ29udHJvbGxlcikpIHtcbiAgICAgIGJpbmRpbmdzLmJpbmRUb0NvbnRyb2xsZXIgPVxuICAgICAgICAgIHBhcnNlSXNvbGF0ZUJpbmRpbmdzKGRpcmVjdGl2ZS5iaW5kVG9Db250cm9sbGVyLCBkaXJlY3RpdmVOYW1lLCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKGJpbmRpbmdzLmJpbmRUb0NvbnRyb2xsZXIgJiYgIWRpcmVjdGl2ZS5jb250cm9sbGVyKSB7XG4gICAgICAvLyBUaGVyZSBpcyBubyBjb250cm9sbGVyXG4gICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbm9jdHJsJyxcbiAgICAgICAgICAgICdDYW5ub3QgYmluZCB0byBjb250cm9sbGVyIHdpdGhvdXQgZGlyZWN0aXZlIFxcJ3swfVxcJ3MgY29udHJvbGxlci4nLFxuICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSk7XG4gICAgfVxuICAgIHJldHVybiBiaW5kaW5ncztcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydFZhbGlkRGlyZWN0aXZlTmFtZShuYW1lKSB7XG4gICAgdmFyIGxldHRlciA9IG5hbWUuY2hhckF0KDApO1xuICAgIGlmICghbGV0dGVyIHx8IGxldHRlciAhPT0gbG93ZXJjYXNlKGxldHRlcikpIHtcbiAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdiYWRkaXInLCAnRGlyZWN0aXZlL0NvbXBvbmVudCBuYW1lIFxcJ3swfVxcJyBpcyBpbnZhbGlkLiBUaGUgZmlyc3QgY2hhcmFjdGVyIG11c3QgYmUgYSBsb3dlcmNhc2UgbGV0dGVyJywgbmFtZSk7XG4gICAgfVxuICAgIGlmIChuYW1lICE9PSBuYW1lLnRyaW0oKSkge1xuICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2JhZGRpcicsXG4gICAgICAgICAgICAnRGlyZWN0aXZlL0NvbXBvbmVudCBuYW1lIFxcJ3swfVxcJyBpcyBpbnZhbGlkLiBUaGUgbmFtZSBzaG91bGQgbm90IGNvbnRhaW4gbGVhZGluZyBvciB0cmFpbGluZyB3aGl0ZXNwYWNlcycsXG4gICAgICAgICAgICBuYW1lKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXREaXJlY3RpdmVSZXF1aXJlKGRpcmVjdGl2ZSkge1xuICAgIHZhciByZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmUgfHwgKGRpcmVjdGl2ZS5jb250cm9sbGVyICYmIGRpcmVjdGl2ZS5uYW1lKTtcblxuICAgIGlmICghaXNBcnJheShyZXF1aXJlKSAmJiBpc09iamVjdChyZXF1aXJlKSkge1xuICAgICAgZm9yRWFjaChyZXF1aXJlLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHZhbHVlLm1hdGNoKFJFUVVJUkVfUFJFRklYX1JFR0VYUCk7XG4gICAgICAgIHZhciBuYW1lID0gdmFsdWUuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgIGlmICghbmFtZSkgcmVxdWlyZVtrZXldID0gbWF0Y2hbMF0gKyBrZXk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVxdWlyZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERpcmVjdGl2ZVJlc3RyaWN0KHJlc3RyaWN0LCBuYW1lKSB7XG4gICAgaWYgKHJlc3RyaWN0ICYmICEoaXNTdHJpbmcocmVzdHJpY3QpICYmIC9bRUFDTV0vLnRlc3QocmVzdHJpY3QpKSkge1xuICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2JhZHJlc3RyaWN0JyxcbiAgICAgICAgICAnUmVzdHJpY3QgcHJvcGVydHkgXFwnezB9XFwnIG9mIGRpcmVjdGl2ZSBcXCd7MX1cXCcgaXMgaW52YWxpZCcsXG4gICAgICAgICAgcmVzdHJpY3QsXG4gICAgICAgICAgbmFtZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3RyaWN0IHx8ICdFQSc7XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZVxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXIgYSBuZXcgZGlyZWN0aXZlIHdpdGggdGhlIGNvbXBpbGVyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgTmFtZSBvZiB0aGUgZGlyZWN0aXZlIGluIGNhbWVsLWNhc2UgKGkuZS4gPGNvZGU+bmdCaW5kPC9jb2RlPiB3aGljaFxuICAgKiAgICB3aWxsIG1hdGNoIGFzIDxjb2RlPm5nLWJpbmQ8L2NvZGU+KSwgb3IgYW4gb2JqZWN0IG1hcCBvZiBkaXJlY3RpdmVzIHdoZXJlIHRoZSBrZXlzIGFyZSB0aGVcbiAgICogICAgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBmYWN0b3JpZXMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXl9IGRpcmVjdGl2ZUZhY3RvcnkgQW4gaW5qZWN0YWJsZSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbi4gU2VlIHRoZVxuICAgKiAgICB7QGxpbmsgZ3VpZGUvZGlyZWN0aXZlIGRpcmVjdGl2ZSBndWlkZX0gYW5kIHRoZSB7QGxpbmsgJGNvbXBpbGUgY29tcGlsZSBBUEl9IGZvciBtb3JlIGluZm8uXG4gICAqIEByZXR1cm5zIHtuZy4kY29tcGlsZVByb3ZpZGVyfSBTZWxmIGZvciBjaGFpbmluZy5cbiAgICovXG4gIHRoaXMuZGlyZWN0aXZlID0gZnVuY3Rpb24gcmVnaXN0ZXJEaXJlY3RpdmUobmFtZSwgZGlyZWN0aXZlRmFjdG9yeSkge1xuICAgIGFzc2VydEFyZyhuYW1lLCAnbmFtZScpO1xuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdkaXJlY3RpdmUnKTtcbiAgICBpZiAoaXNTdHJpbmcobmFtZSkpIHtcbiAgICAgIGFzc2VydFZhbGlkRGlyZWN0aXZlTmFtZShuYW1lKTtcbiAgICAgIGFzc2VydEFyZyhkaXJlY3RpdmVGYWN0b3J5LCAnZGlyZWN0aXZlRmFjdG9yeScpO1xuICAgICAgaWYgKCFoYXNEaXJlY3RpdmVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIGhhc0RpcmVjdGl2ZXNbbmFtZV0gPSBbXTtcbiAgICAgICAgJHByb3ZpZGUuZmFjdG9yeShuYW1lICsgU3VmZml4LCBbJyRpbmplY3RvcicsICckZXhjZXB0aW9uSGFuZGxlcicsXG4gICAgICAgICAgZnVuY3Rpb24oJGluamVjdG9yLCAkZXhjZXB0aW9uSGFuZGxlcikge1xuICAgICAgICAgICAgdmFyIGRpcmVjdGl2ZXMgPSBbXTtcbiAgICAgICAgICAgIGZvckVhY2goaGFzRGlyZWN0aXZlc1tuYW1lXSwgZnVuY3Rpb24oZGlyZWN0aXZlRmFjdG9yeSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aXZlID0gJGluamVjdG9yLmludm9rZShkaXJlY3RpdmVGYWN0b3J5KTtcbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihkaXJlY3RpdmUpKSB7XG4gICAgICAgICAgICAgICAgICBkaXJlY3RpdmUgPSB7IGNvbXBpbGU6IHZhbHVlRm4oZGlyZWN0aXZlKSB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWRpcmVjdGl2ZS5jb21waWxlICYmIGRpcmVjdGl2ZS5saW5rKSB7XG4gICAgICAgICAgICAgICAgICBkaXJlY3RpdmUuY29tcGlsZSA9IHZhbHVlRm4oZGlyZWN0aXZlLmxpbmspO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUucHJpb3JpdHkgPSBkaXJlY3RpdmUucHJpb3JpdHkgfHwgMDtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUuaW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUubmFtZSA9IGRpcmVjdGl2ZS5uYW1lIHx8IG5hbWU7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlcXVpcmUgPSBnZXREaXJlY3RpdmVSZXF1aXJlKGRpcmVjdGl2ZSk7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlLnJlc3RyaWN0ID0gZ2V0RGlyZWN0aXZlUmVzdHJpY3QoZGlyZWN0aXZlLnJlc3RyaWN0LCBuYW1lKTtcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmUuJCRtb2R1bGVOYW1lID0gZGlyZWN0aXZlRmFjdG9yeS4kJG1vZHVsZU5hbWU7XG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlcy5wdXNoKGRpcmVjdGl2ZSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gZGlyZWN0aXZlcztcbiAgICAgICAgICB9XSk7XG4gICAgICB9XG4gICAgICBoYXNEaXJlY3RpdmVzW25hbWVdLnB1c2goZGlyZWN0aXZlRmFjdG9yeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvckVhY2gobmFtZSwgcmV2ZXJzZVBhcmFtcyhyZWdpc3RlckRpcmVjdGl2ZSkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI2NvbXBvbmVudFxuICAgKiBAbW9kdWxlIG5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBOYW1lIG9mIHRoZSBjb21wb25lbnQgaW4gY2FtZWxDYXNlIChpLmUuIGBteUNvbXBgIHdoaWNoIHdpbGwgbWF0Y2ggYDxteS1jb21wPmApLFxuICAgKiAgICBvciBhbiBvYmplY3QgbWFwIG9mIGNvbXBvbmVudHMgd2hlcmUgdGhlIGtleXMgYXJlIHRoZSBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uIG9iamVjdHMuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIENvbXBvbmVudCBkZWZpbml0aW9uIG9iamVjdCAoYSBzaW1wbGlmaWVkXG4gICAqICAgIHtAbGluayBuZy4kY29tcGlsZSNkaXJlY3RpdmUtZGVmaW5pdGlvbi1vYmplY3QgZGlyZWN0aXZlIGRlZmluaXRpb24gb2JqZWN0fSksXG4gICAqICAgIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIChhbGwgb3B0aW9uYWwpOlxuICAgKlxuICAgKiAgICAtIGBjb250cm9sbGVyYCDigJMgYHsoc3RyaW5nfGZ1bmN0aW9uKCk9fWAg4oCTIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmVcbiAgICogICAgICBhc3NvY2lhdGVkIHdpdGggbmV3bHkgY3JlYXRlZCBzY29wZSBvciB0aGUgbmFtZSBvZiBhIHtAbGluayBuZy4kY29tcGlsZSMtY29udHJvbGxlci1cbiAgICogICAgICByZWdpc3RlcmVkIGNvbnRyb2xsZXJ9IGlmIHBhc3NlZCBhcyBhIHN0cmluZy4gQW4gZW1wdHkgYG5vb3BgIGZ1bmN0aW9uIGJ5IGRlZmF1bHQuXG4gICAqICAgIC0gYGNvbnRyb2xsZXJBc2Ag4oCTIGB7c3RyaW5nPX1gIOKAkyBpZGVudGlmaWVyIG5hbWUgZm9yIHRvIHJlZmVyZW5jZSB0aGUgY29udHJvbGxlciBpbiB0aGUgY29tcG9uZW50J3Mgc2NvcGUuXG4gICAqICAgICAgSWYgcHJlc2VudCwgdGhlIGNvbnRyb2xsZXIgd2lsbCBiZSBwdWJsaXNoZWQgdG8gc2NvcGUgdW5kZXIgdGhlIGBjb250cm9sbGVyQXNgIG5hbWUuXG4gICAqICAgICAgSWYgbm90IHByZXNlbnQsIHRoaXMgd2lsbCBkZWZhdWx0IHRvIGJlIGAkY3RybGAuXG4gICAqICAgIC0gYHRlbXBsYXRlYCDigJMgYHtzdHJpbmc9fGZ1bmN0aW9uKCk9fWAg4oCTIGh0bWwgdGVtcGxhdGUgYXMgYSBzdHJpbmcgb3IgYSBmdW5jdGlvbiB0aGF0XG4gICAqICAgICAgcmV0dXJucyBhbiBodG1sIHRlbXBsYXRlIGFzIGEgc3RyaW5nIHdoaWNoIHNob3VsZCBiZSB1c2VkIGFzIHRoZSBjb250ZW50cyBvZiB0aGlzIGNvbXBvbmVudC5cbiAgICogICAgICBFbXB0eSBzdHJpbmcgYnkgZGVmYXVsdC5cbiAgICpcbiAgICogICAgICBJZiBgdGVtcGxhdGVgIGlzIGEgZnVuY3Rpb24sIHRoZW4gaXQgaXMge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSBpbmplY3RlZH0gd2l0aFxuICAgKiAgICAgIHRoZSBmb2xsb3dpbmcgbG9jYWxzOlxuICAgKlxuICAgKiAgICAgIC0gYCRlbGVtZW50YCAtIEN1cnJlbnQgZWxlbWVudFxuICAgKiAgICAgIC0gYCRhdHRyc2AgLSBDdXJyZW50IGF0dHJpYnV0ZXMgb2JqZWN0IGZvciB0aGUgZWxlbWVudFxuICAgKlxuICAgKiAgICAtIGB0ZW1wbGF0ZVVybGAg4oCTIGB7c3RyaW5nPXxmdW5jdGlvbigpPX1gIOKAkyBwYXRoIG9yIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHBhdGggdG8gYW4gaHRtbFxuICAgKiAgICAgIHRlbXBsYXRlIHRoYXQgc2hvdWxkIGJlIHVzZWQgIGFzIHRoZSBjb250ZW50cyBvZiB0aGlzIGNvbXBvbmVudC5cbiAgICpcbiAgICogICAgICBJZiBgdGVtcGxhdGVVcmxgIGlzIGEgZnVuY3Rpb24sIHRoZW4gaXQgaXMge0BsaW5rIGF1dG8uJGluamVjdG9yI2ludm9rZSBpbmplY3RlZH0gd2l0aFxuICAgKiAgICAgIHRoZSBmb2xsb3dpbmcgbG9jYWxzOlxuICAgKlxuICAgKiAgICAgIC0gYCRlbGVtZW50YCAtIEN1cnJlbnQgZWxlbWVudFxuICAgKiAgICAgIC0gYCRhdHRyc2AgLSBDdXJyZW50IGF0dHJpYnV0ZXMgb2JqZWN0IGZvciB0aGUgZWxlbWVudFxuICAgKlxuICAgKiAgICAtIGBiaW5kaW5nc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBkZWZpbmVzIGJpbmRpbmdzIGJldHdlZW4gRE9NIGF0dHJpYnV0ZXMgYW5kIGNvbXBvbmVudCBwcm9wZXJ0aWVzLlxuICAgKiAgICAgIENvbXBvbmVudCBwcm9wZXJ0aWVzIGFyZSBhbHdheXMgYm91bmQgdG8gdGhlIGNvbXBvbmVudCBjb250cm9sbGVyIGFuZCBub3QgdG8gdGhlIHNjb3BlLlxuICAgKiAgICAgIFNlZSB7QGxpbmsgbmcuJGNvbXBpbGUjLWJpbmR0b2NvbnRyb2xsZXItIGBiaW5kVG9Db250cm9sbGVyYH0uXG4gICAqICAgIC0gYHRyYW5zY2x1ZGVgIOKAkyBge2Jvb2xlYW49fWAg4oCTIHdoZXRoZXIge0BsaW5rICRjb21waWxlI3RyYW5zY2x1c2lvbiBjb250ZW50IHRyYW5zY2x1c2lvbn0gaXMgZW5hYmxlZC5cbiAgICogICAgICBEaXNhYmxlZCBieSBkZWZhdWx0LlxuICAgKiAgICAtIGByZXF1aXJlYCAtIGB7T2JqZWN0PHN0cmluZywgc3RyaW5nPj19YCAtIHJlcXVpcmVzIHRoZSBjb250cm9sbGVycyBvZiBvdGhlciBkaXJlY3RpdmVzIGFuZCBiaW5kcyB0aGVtIHRvXG4gICAqICAgICAgdGhpcyBjb21wb25lbnQncyBjb250cm9sbGVyLiBUaGUgb2JqZWN0IGtleXMgc3BlY2lmeSB0aGUgcHJvcGVydHkgbmFtZXMgdW5kZXIgd2hpY2ggdGhlIHJlcXVpcmVkXG4gICAqICAgICAgY29udHJvbGxlcnMgKG9iamVjdCB2YWx1ZXMpIHdpbGwgYmUgYm91bmQuIFNlZSB7QGxpbmsgbmcuJGNvbXBpbGUjLXJlcXVpcmUtIGByZXF1aXJlYH0uXG4gICAqICAgIC0gYCQuLi5gIOKAkyBhZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYXR0YWNoIHRvIHRoZSBkaXJlY3RpdmUgZmFjdG9yeSBmdW5jdGlvbiBhbmQgdGhlIGNvbnRyb2xsZXJcbiAgICogICAgICBjb25zdHJ1Y3RvciBmdW5jdGlvbi4gKFRoaXMgaXMgdXNlZCBieSB0aGUgY29tcG9uZW50IHJvdXRlciB0byBhbm5vdGF0ZSlcbiAgICpcbiAgICogQHJldHVybnMge25nLiRjb21waWxlUHJvdmlkZXJ9IHRoZSBjb21waWxlIHByb3ZpZGVyIGl0c2VsZiwgZm9yIGNoYWluaW5nIG9mIGZ1bmN0aW9uIGNhbGxzLlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmVnaXN0ZXIgYSAqKmNvbXBvbmVudCBkZWZpbml0aW9uKiogd2l0aCB0aGUgY29tcGlsZXIuIFRoaXMgaXMgYSBzaG9ydGhhbmQgZm9yIHJlZ2lzdGVyaW5nIGEgc3BlY2lhbFxuICAgKiB0eXBlIG9mIGRpcmVjdGl2ZSwgd2hpY2ggcmVwcmVzZW50cyBhIHNlbGYtY29udGFpbmVkIFVJIGNvbXBvbmVudCBpbiB5b3VyIGFwcGxpY2F0aW9uLiBTdWNoIGNvbXBvbmVudHNcbiAgICogYXJlIGFsd2F5cyBpc29sYXRlZCAoaS5lLiBgc2NvcGU6IHt9YCkgYW5kIGFyZSBhbHdheXMgcmVzdHJpY3RlZCB0byBlbGVtZW50cyAoaS5lLiBgcmVzdHJpY3Q6ICdFJ2ApLlxuICAgKlxuICAgKiBDb21wb25lbnQgZGVmaW5pdGlvbnMgYXJlIHZlcnkgc2ltcGxlIGFuZCBkbyBub3QgcmVxdWlyZSBhcyBtdWNoIGNvbmZpZ3VyYXRpb24gYXMgZGVmaW5pbmcgZ2VuZXJhbFxuICAgKiBkaXJlY3RpdmVzLiBDb21wb25lbnQgZGVmaW5pdGlvbnMgdXN1YWxseSBjb25zaXN0IG9ubHkgb2YgYSB0ZW1wbGF0ZSBhbmQgYSBjb250cm9sbGVyIGJhY2tpbmcgaXQuXG4gICAqXG4gICAqIEluIG9yZGVyIHRvIG1ha2UgdGhlIGRlZmluaXRpb24gZWFzaWVyLCBjb21wb25lbnRzIGVuZm9yY2UgYmVzdCBwcmFjdGljZXMgbGlrZSB1c2Ugb2YgYGNvbnRyb2xsZXJBc2AsXG4gICAqIGBiaW5kVG9Db250cm9sbGVyYC4gVGhleSBhbHdheXMgaGF2ZSAqKmlzb2xhdGUgc2NvcGUqKiBhbmQgYXJlIHJlc3RyaWN0ZWQgdG8gZWxlbWVudHMuXG4gICAqXG4gICAqIEhlcmUgYXJlIGEgZmV3IGV4YW1wbGVzIG9mIGhvdyB5b3Ugd291bGQgdXN1YWxseSBkZWZpbmUgY29tcG9uZW50czpcbiAgICpcbiAgICogYGBganNcbiAgICogICB2YXIgbXlNb2QgPSBhbmd1bGFyLm1vZHVsZSguLi4pO1xuICAgKiAgIG15TW9kLmNvbXBvbmVudCgnbXlDb21wJywge1xuICAgKiAgICAgdGVtcGxhdGU6ICc8ZGl2Pk15IG5hbWUgaXMge3skY3RybC5uYW1lfX08L2Rpdj4nLFxuICAgKiAgICAgY29udHJvbGxlcjogZnVuY3Rpb24oKSB7XG4gICAqICAgICAgIHRoaXMubmFtZSA9ICdzaGFoYXInO1xuICAgKiAgICAgfVxuICAgKiAgIH0pO1xuICAgKlxuICAgKiAgIG15TW9kLmNvbXBvbmVudCgnbXlDb21wJywge1xuICAgKiAgICAgdGVtcGxhdGU6ICc8ZGl2Pk15IG5hbWUgaXMge3skY3RybC5uYW1lfX08L2Rpdj4nLFxuICAgKiAgICAgYmluZGluZ3M6IHtuYW1lOiAnQCd9XG4gICAqICAgfSk7XG4gICAqXG4gICAqICAgbXlNb2QuY29tcG9uZW50KCdteUNvbXAnLCB7XG4gICAqICAgICB0ZW1wbGF0ZVVybDogJ3ZpZXdzL215LWNvbXAuaHRtbCcsXG4gICAqICAgICBjb250cm9sbGVyOiAnTXlDdHJsJyxcbiAgICogICAgIGNvbnRyb2xsZXJBczogJ2N0cmwnLFxuICAgKiAgICAgYmluZGluZ3M6IHtuYW1lOiAnQCd9XG4gICAqICAgfSk7XG4gICAqXG4gICAqIGBgYFxuICAgKiBGb3IgbW9yZSBleGFtcGxlcywgYW5kIGFuIGluLWRlcHRoIGd1aWRlLCBzZWUgdGhlIHtAbGluayBndWlkZS9jb21wb25lbnQgY29tcG9uZW50IGd1aWRlfS5cbiAgICpcbiAgICogPGJyIC8+XG4gICAqIFNlZSBhbHNvIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSAkY29tcGlsZVByb3ZpZGVyLmRpcmVjdGl2ZSgpfS5cbiAgICovXG4gIHRoaXMuY29tcG9uZW50ID0gZnVuY3Rpb24gcmVnaXN0ZXJDb21wb25lbnQobmFtZSwgb3B0aW9ucykge1xuICAgIGlmICghaXNTdHJpbmcobmFtZSkpIHtcbiAgICAgIGZvckVhY2gobmFtZSwgcmV2ZXJzZVBhcmFtcyhiaW5kKHRoaXMsIHJlZ2lzdGVyQ29tcG9uZW50KSkpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRyb2xsZXIgPSBvcHRpb25zLmNvbnRyb2xsZXIgfHwgZnVuY3Rpb24oKSB7fTtcblxuICAgIGZ1bmN0aW9uIGZhY3RvcnkoJGluamVjdG9yKSB7XG4gICAgICBmdW5jdGlvbiBtYWtlSW5qZWN0YWJsZShmbikge1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihmbikgfHwgaXNBcnJheShmbikpIHtcbiAgICAgICAgICByZXR1cm4gLyoqIEB0aGlzICovIGZ1bmN0aW9uKHRFbGVtZW50LCB0QXR0cnMpIHtcbiAgICAgICAgICAgIHJldHVybiAkaW5qZWN0b3IuaW52b2tlKGZuLCB0aGlzLCB7JGVsZW1lbnQ6IHRFbGVtZW50LCAkYXR0cnM6IHRBdHRyc30pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB0ZW1wbGF0ZSA9ICghb3B0aW9ucy50ZW1wbGF0ZSAmJiAhb3B0aW9ucy50ZW1wbGF0ZVVybCA/ICcnIDogb3B0aW9ucy50ZW1wbGF0ZSk7XG4gICAgICB2YXIgZGRvID0ge1xuICAgICAgICBjb250cm9sbGVyOiBjb250cm9sbGVyLFxuICAgICAgICBjb250cm9sbGVyQXM6IGlkZW50aWZpZXJGb3JDb250cm9sbGVyKG9wdGlvbnMuY29udHJvbGxlcikgfHwgb3B0aW9ucy5jb250cm9sbGVyQXMgfHwgJyRjdHJsJyxcbiAgICAgICAgdGVtcGxhdGU6IG1ha2VJbmplY3RhYmxlKHRlbXBsYXRlKSxcbiAgICAgICAgdGVtcGxhdGVVcmw6IG1ha2VJbmplY3RhYmxlKG9wdGlvbnMudGVtcGxhdGVVcmwpLFxuICAgICAgICB0cmFuc2NsdWRlOiBvcHRpb25zLnRyYW5zY2x1ZGUsXG4gICAgICAgIHNjb3BlOiB7fSxcbiAgICAgICAgYmluZFRvQ29udHJvbGxlcjogb3B0aW9ucy5iaW5kaW5ncyB8fCB7fSxcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgcmVxdWlyZTogb3B0aW9ucy5yZXF1aXJlXG4gICAgICB9O1xuXG4gICAgICAvLyBDb3B5IGFubm90YXRpb25zIChzdGFydGluZyB3aXRoICQpIG92ZXIgdG8gdGhlIERET1xuICAgICAgZm9yRWFjaChvcHRpb25zLCBmdW5jdGlvbih2YWwsIGtleSkge1xuICAgICAgICBpZiAoa2V5LmNoYXJBdCgwKSA9PT0gJyQnKSBkZG9ba2V5XSA9IHZhbDtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZGRvO1xuICAgIH1cblxuICAgIC8vIFRPRE8ocGV0ZSkgcmVtb3ZlIHRoZSBmb2xsb3dpbmcgYGZvckVhY2hgIGJlZm9yZSB3ZSByZWxlYXNlIDEuNi4wXG4gICAgLy8gVGhlIGNvbXBvbmVudC1yb3V0ZXJAMC4yLjAgbG9va3MgZm9yIHRoZSBhbm5vdGF0aW9ucyBvbiB0aGUgY29udHJvbGxlciBjb25zdHJ1Y3RvclxuICAgIC8vIE5vdGhpbmcgaW4gQW5ndWxhciBsb29rcyBmb3IgYW5ub3RhdGlvbnMgb24gdGhlIGZhY3RvcnkgZnVuY3Rpb24gYnV0IHdlIGNhbid0IHJlbW92ZVxuICAgIC8vIGl0IGZyb20gMS41LnggeWV0LlxuXG4gICAgLy8gQ29weSBhbnkgYW5ub3RhdGlvbiBwcm9wZXJ0aWVzIChzdGFydGluZyB3aXRoICQpIG92ZXIgdG8gdGhlIGZhY3RvcnkgYW5kIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb25zXG4gICAgLy8gVGhlc2UgY291bGQgYmUgdXNlZCBieSBsaWJyYXJpZXMgc3VjaCBhcyB0aGUgbmV3IGNvbXBvbmVudCByb3V0ZXJcbiAgICBmb3JFYWNoKG9wdGlvbnMsIGZ1bmN0aW9uKHZhbCwga2V5KSB7XG4gICAgICBpZiAoa2V5LmNoYXJBdCgwKSA9PT0gJyQnKSB7XG4gICAgICAgIGZhY3Rvcnlba2V5XSA9IHZhbDtcbiAgICAgICAgLy8gRG9uJ3QgdHJ5IHRvIGNvcHkgb3ZlciBhbm5vdGF0aW9ucyB0byBuYW1lZCBjb250cm9sbGVyXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRyb2xsZXIpKSBjb250cm9sbGVyW2tleV0gPSB2YWw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBmYWN0b3J5LiRpbmplY3QgPSBbJyRpbmplY3RvciddO1xuXG4gICAgcmV0dXJuIHRoaXMuZGlyZWN0aXZlKG5hbWUsIGZhY3RvcnkpO1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdFxuICAgKiBAa2luZCBmdW5jdGlvblxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZVxuICAgKiB1cmxzIGR1cmluZyBhW2hyZWZdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudGluZyBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBhW2hyZWZdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0YFxuICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSxcbiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguXG4gICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcbiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgdGhpcy5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0KHJlZ2V4cCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICQkc2FuaXRpemVVcmlQcm92aWRlci5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCgpO1xuICAgIH1cbiAgfTtcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjb21waWxlUHJvdmlkZXIjaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAqIHVybHMgZHVyaW5nIGltZ1tzcmNdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBpbWdbc3JjXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvXG4gICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAqL1xuICB0aGlzLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgJCRzYW5pdGl6ZVVyaVByb3ZpZGVyLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdChyZWdleHApO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAkJHNhbml0aXplVXJpUHJvdmlkZXIuaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0KCk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICAkY29tcGlsZVByb3ZpZGVyI2RlYnVnSW5mb0VuYWJsZWRcbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gZW5hYmxlZCB1cGRhdGUgdGhlIGRlYnVnSW5mb0VuYWJsZWQgc3RhdGUgaWYgcHJvdmlkZWQsIG90aGVyd2lzZSBqdXN0IHJldHVybiB0aGVcbiAgICogY3VycmVudCBkZWJ1Z0luZm9FbmFibGVkIHN0YXRlXG4gICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIHRvIGVuYWJsZS9kaXNhYmxlIHZhcmlvdXMgZGVidWcgcnVudGltZSBpbmZvcm1hdGlvbiBpbiB0aGUgY29tcGlsZXIgc3VjaCBhcyBhZGRpbmdcbiAgICogYmluZGluZyBpbmZvcm1hdGlvbiBhbmQgYSByZWZlcmVuY2UgdG8gdGhlIGN1cnJlbnQgc2NvcGUgb24gdG8gRE9NIGVsZW1lbnRzLlxuICAgKiBJZiBlbmFibGVkLCB0aGUgY29tcGlsZXIgd2lsbCBhZGQgdGhlIGZvbGxvd2luZyB0byBET00gZWxlbWVudHMgdGhhdCBoYXZlIGJlZW4gYm91bmQgdG8gdGhlIHNjb3BlXG4gICAqICogYG5nLWJpbmRpbmdgIENTUyBjbGFzc1xuICAgKiAqIGAkYmluZGluZ2AgZGF0YSBwcm9wZXJ0eSBjb250YWluaW5nIGFuIGFycmF5IG9mIHRoZSBiaW5kaW5nIGV4cHJlc3Npb25zXG4gICAqXG4gICAqIFlvdSBtYXkgd2FudCB0byBkaXNhYmxlIHRoaXMgaW4gcHJvZHVjdGlvbiBmb3IgYSBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBib29zdC4gU2VlXG4gICAqIHtAbGluayBndWlkZS9wcm9kdWN0aW9uI2Rpc2FibGluZy1kZWJ1Zy1kYXRhIERpc2FibGluZyBEZWJ1ZyBEYXRhfSBmb3IgbW9yZS5cbiAgICpcbiAgICogVGhlIGRlZmF1bHQgdmFsdWUgaXMgdHJ1ZS5cbiAgICovXG4gIHZhciBkZWJ1Z0luZm9FbmFibGVkID0gdHJ1ZTtcbiAgdGhpcy5kZWJ1Z0luZm9FbmFibGVkID0gZnVuY3Rpb24oZW5hYmxlZCkge1xuICAgIGlmIChpc0RlZmluZWQoZW5hYmxlZCkpIHtcbiAgICAgIGRlYnVnSW5mb0VuYWJsZWQgPSBlbmFibGVkO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBkZWJ1Z0luZm9FbmFibGVkO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICAkY29tcGlsZVByb3ZpZGVyI3ByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZFxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBlbmFibGVkIHVwZGF0ZSB0aGUgcHJlQXNzaWduQmluZGluZ3NFbmFibGVkIHN0YXRlIGlmIHByb3ZpZGVkLCBvdGhlcndpc2UganVzdCByZXR1cm4gdGhlXG4gICAqIGN1cnJlbnQgcHJlQXNzaWduQmluZGluZ3NFbmFibGVkIHN0YXRlXG4gICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIHRvIGVuYWJsZS9kaXNhYmxlIHdoZXRoZXIgZGlyZWN0aXZlIGNvbnRyb2xsZXJzIGFyZSBhc3NpZ25lZCBiaW5kaW5ncyBiZWZvcmVcbiAgICogY2FsbGluZyB0aGUgY29udHJvbGxlcidzIGNvbnN0cnVjdG9yLlxuICAgKiBJZiBlbmFibGVkICh0cnVlKSwgdGhlIGNvbXBpbGVyIGFzc2lnbnMgdGhlIHZhbHVlIG9mIGVhY2ggb2YgdGhlIGJpbmRpbmdzIHRvIHRoZVxuICAgKiBwcm9wZXJ0aWVzIG9mIHRoZSBjb250cm9sbGVyIG9iamVjdCBiZWZvcmUgdGhlIGNvbnN0cnVjdG9yIG9mIHRoaXMgb2JqZWN0IGlzIGNhbGxlZC5cbiAgICpcbiAgICogSWYgZGlzYWJsZWQgKGZhbHNlKSwgdGhlIGNvbXBpbGVyIGNhbGxzIHRoZSBjb25zdHJ1Y3RvciBmaXJzdCBiZWZvcmUgYXNzaWduaW5nIGJpbmRpbmdzLlxuICAgKlxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyBmYWxzZS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWRcbiAgICogc2luY2VWZXJzaW9uPVwiMS42LjBcIlxuICAgKiByZW1vdmVWZXJzaW9uPVwiMS43LjBcIlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBhbmQgdGhlIG9wdGlvbiB0byBhc3NpZ24gdGhlIGJpbmRpbmdzIGJlZm9yZSBjYWxsaW5nIHRoZSBjb250cm9sbGVyJ3MgY29uc3RydWN0b3JcbiAgICogd2lsbCBiZSByZW1vdmVkIGluIHYxLjcuMC5cbiAgICovXG4gIHZhciBwcmVBc3NpZ25CaW5kaW5nc0VuYWJsZWQgPSBmYWxzZTtcbiAgdGhpcy5wcmVBc3NpZ25CaW5kaW5nc0VuYWJsZWQgPSBmdW5jdGlvbihlbmFibGVkKSB7XG4gICAgaWYgKGlzRGVmaW5lZChlbmFibGVkKSkge1xuICAgICAgcHJlQXNzaWduQmluZGluZ3NFbmFibGVkID0gZW5hYmxlZDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gcHJlQXNzaWduQmluZGluZ3NFbmFibGVkO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICAkY29tcGlsZVByb3ZpZGVyI3N0cmljdENvbXBvbmVudEJpbmRpbmdzRW5hYmxlZFxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBlbmFibGVkIHVwZGF0ZSB0aGUgc3RyaWN0Q29tcG9uZW50QmluZGluZ3NFbmFibGVkIHN0YXRlIGlmIHByb3ZpZGVkLCBvdGhlcndpc2UganVzdCByZXR1cm4gdGhlXG4gICAqIGN1cnJlbnQgc3RyaWN0Q29tcG9uZW50QmluZGluZ3NFbmFibGVkIHN0YXRlXG4gICAqIEByZXR1cm5zIHsqfSBjdXJyZW50IHZhbHVlIGlmIHVzZWQgYXMgZ2V0dGVyIG9yIGl0c2VsZiAoY2hhaW5pbmcpIGlmIHVzZWQgYXMgc2V0dGVyXG4gICAqXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDYWxsIHRoaXMgbWV0aG9kIHRvIGVuYWJsZS9kaXNhYmxlIHN0cmljdCBjb21wb25lbnQgYmluZGluZ3MgY2hlY2suIElmIGVuYWJsZWQsIHRoZSBjb21waWxlciB3aWxsIGVuZm9yY2UgdGhhdFxuICAgKiBmb3IgYWxsIGJpbmRpbmdzIG9mIGEgY29tcG9uZW50IHRoYXQgYXJlIG5vdCBzZXQgYXMgb3B0aW9uYWwgd2l0aCBgP2AsIGFuIGF0dHJpYnV0ZSBuZWVkcyB0byBiZSBwcm92aWRlZFxuICAgKiBvbiB0aGUgY29tcG9uZW50J3MgSFRNTCB0YWcuXG4gICAqXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIGZhbHNlLlxuICAgKi9cbiAgdmFyIHN0cmljdENvbXBvbmVudEJpbmRpbmdzRW5hYmxlZCA9IGZhbHNlO1xuICB0aGlzLnN0cmljdENvbXBvbmVudEJpbmRpbmdzRW5hYmxlZCA9IGZ1bmN0aW9uKGVuYWJsZWQpIHtcbiAgICBpZiAoaXNEZWZpbmVkKGVuYWJsZWQpKSB7XG4gICAgICBzdHJpY3RDb21wb25lbnRCaW5kaW5nc0VuYWJsZWQgPSBlbmFibGVkO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBzdHJpY3RDb21wb25lbnRCaW5kaW5nc0VuYWJsZWQ7XG4gIH07XG5cbiAgdmFyIFRUTCA9IDEwO1xuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29tcGlsZVByb3ZpZGVyI29uQ2hhbmdlc1R0bFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogU2V0cyB0aGUgbnVtYmVyIG9mIHRpbWVzIGAkb25DaGFuZ2VzYCBob29rcyBjYW4gdHJpZ2dlciBuZXcgY2hhbmdlcyBiZWZvcmUgZ2l2aW5nIHVwIGFuZFxuICAgKiBhc3N1bWluZyB0aGF0IHRoZSBtb2RlbCBpcyB1bnN0YWJsZS5cbiAgICpcbiAgICogVGhlIGN1cnJlbnQgZGVmYXVsdCBpcyAxMCBpdGVyYXRpb25zLlxuICAgKlxuICAgKiBJbiBjb21wbGV4IGFwcGxpY2F0aW9ucyBpdCdzIHBvc3NpYmxlIHRoYXQgZGVwZW5kZW5jaWVzIGJldHdlZW4gYCRvbkNoYW5nZXNgIGhvb2tzIGFuZCBiaW5kaW5ncyB3aWxsIHJlc3VsdFxuICAgKiBpbiBzZXZlcmFsIGl0ZXJhdGlvbnMgb2YgY2FsbHMgdG8gdGhlc2UgaG9va3MuIEhvd2V2ZXIgaWYgYW4gYXBwbGljYXRpb24gbmVlZHMgbW9yZSB0aGFuIHRoZSBkZWZhdWx0IDEwXG4gICAqIGl0ZXJhdGlvbnMgdG8gc3RhYmlsaXplIHRoZW4geW91IHNob3VsZCBpbnZlc3RpZ2F0ZSB3aGF0IGlzIGNhdXNpbmcgdGhlIG1vZGVsIHRvIGNvbnRpbnVvdXNseSBjaGFuZ2UgZHVyaW5nXG4gICAqIHRoZSBgJG9uQ2hhbmdlc2AgaG9vayBleGVjdXRpb24uXG4gICAqXG4gICAqIEluY3JlYXNpbmcgdGhlIFRUTCBjb3VsZCBoYXZlIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucywgc28geW91IHNob3VsZCBub3QgY2hhbmdlIGl0IHdpdGhvdXQgcHJvcGVyIGp1c3RpZmljYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCBUaGUgbnVtYmVyIG9mIGAkb25DaGFuZ2VzYCBob29rIGl0ZXJhdGlvbnMuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ8b2JqZWN0fSB0aGUgY3VycmVudCBsaW1pdCAob3IgYHRoaXNgIGlmIGNhbGxlZCBhcyBhIHNldHRlciBmb3IgY2hhaW5pbmcpXG4gICAqL1xuICB0aGlzLm9uQ2hhbmdlc1R0bCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIFRUTCA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBUVEw7XG4gIH07XG5cbiAgdmFyIGNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZENvbmZpZyA9IHRydWU7XG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRjb21waWxlUHJvdmlkZXIjY29tbWVudERpcmVjdGl2ZXNFbmFibGVkXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBJdCBpbmRpY2F0ZXMgdG8gdGhlIGNvbXBpbGVyXG4gICAqIHdoZXRoZXIgb3Igbm90IGRpcmVjdGl2ZXMgb24gY29tbWVudHMgc2hvdWxkIGJlIGNvbXBpbGVkLlxuICAgKiBEZWZhdWx0cyB0byBgdHJ1ZWAuXG4gICAqXG4gICAqIENhbGxpbmcgdGhpcyBmdW5jdGlvbiB3aXRoIGZhbHNlIGRpc2FibGVzIHRoZSBjb21waWxhdGlvbiBvZiBkaXJlY3RpdmVzXG4gICAqIG9uIGNvbW1lbnRzIGZvciB0aGUgd2hvbGUgYXBwbGljYXRpb24uXG4gICAqIFRoaXMgcmVzdWx0cyBpbiBhIGNvbXBpbGF0aW9uIHBlcmZvcm1hbmNlIGdhaW4sXG4gICAqIGFzIHRoZSBjb21waWxlciBkb2Vzbid0IGhhdmUgdG8gY2hlY2sgY29tbWVudHMgd2hlbiBsb29raW5nIGZvciBkaXJlY3RpdmVzLlxuICAgKiBUaGlzIHNob3VsZCBob3dldmVyIG9ubHkgYmUgdXNlZCBpZiB5b3UgYXJlIHN1cmUgdGhhdCBubyBjb21tZW50IGRpcmVjdGl2ZXMgYXJlIHVzZWQgaW5cbiAgICogdGhlIGFwcGxpY2F0aW9uIChpbmNsdWRpbmcgYW55IDNyZCBwYXJ0eSBkaXJlY3RpdmVzKS5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFufSBlbmFibGVkIGBmYWxzZWAgaWYgdGhlIGNvbXBpbGVyIG1heSBpZ25vcmUgZGlyZWN0aXZlcyBvbiBjb21tZW50c1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxvYmplY3R9IHRoZSBjdXJyZW50IHZhbHVlIChvciBgdGhpc2AgaWYgY2FsbGVkIGFzIGEgc2V0dGVyIGZvciBjaGFpbmluZylcbiAgICovXG4gIHRoaXMuY29tbWVudERpcmVjdGl2ZXNFbmFibGVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY29tbWVudERpcmVjdGl2ZXNFbmFibGVkQ29uZmlnID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGNvbW1lbnREaXJlY3RpdmVzRW5hYmxlZENvbmZpZztcbiAgfTtcblxuXG4gIHZhciBjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkQ29uZmlnID0gdHJ1ZTtcbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbXBpbGVQcm92aWRlciNjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBJdCBpbmRpY2F0ZXMgdG8gdGhlIGNvbXBpbGVyXG4gICAqIHdoZXRoZXIgb3Igbm90IGRpcmVjdGl2ZXMgb24gZWxlbWVudCBjbGFzc2VzIHNob3VsZCBiZSBjb21waWxlZC5cbiAgICogRGVmYXVsdHMgdG8gYHRydWVgLlxuICAgKlxuICAgKiBDYWxsaW5nIHRoaXMgZnVuY3Rpb24gd2l0aCBmYWxzZSBkaXNhYmxlcyB0aGUgY29tcGlsYXRpb24gb2YgZGlyZWN0aXZlc1xuICAgKiBvbiBlbGVtZW50IGNsYXNzZXMgZm9yIHRoZSB3aG9sZSBhcHBsaWNhdGlvbi5cbiAgICogVGhpcyByZXN1bHRzIGluIGEgY29tcGlsYXRpb24gcGVyZm9ybWFuY2UgZ2FpbixcbiAgICogYXMgdGhlIGNvbXBpbGVyIGRvZXNuJ3QgaGF2ZSB0byBjaGVjayBlbGVtZW50IGNsYXNzZXMgd2hlbiBsb29raW5nIGZvciBkaXJlY3RpdmVzLlxuICAgKiBUaGlzIHNob3VsZCBob3dldmVyIG9ubHkgYmUgdXNlZCBpZiB5b3UgYXJlIHN1cmUgdGhhdCBubyBjbGFzcyBkaXJlY3RpdmVzIGFyZSB1c2VkIGluXG4gICAqIHRoZSBhcHBsaWNhdGlvbiAoaW5jbHVkaW5nIGFueSAzcmQgcGFydHkgZGlyZWN0aXZlcykuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZCBgZmFsc2VgIGlmIHRoZSBjb21waWxlciBtYXkgaWdub3JlIGRpcmVjdGl2ZXMgb24gZWxlbWVudCBjbGFzc2VzXG4gICAqIEByZXR1cm5zIHtib29sZWFufG9iamVjdH0gdGhlIGN1cnJlbnQgdmFsdWUgKG9yIGB0aGlzYCBpZiBjYWxsZWQgYXMgYSBzZXR0ZXIgZm9yIGNoYWluaW5nKVxuICAgKi9cbiAgdGhpcy5jc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY3NzQ2xhc3NEaXJlY3RpdmVzRW5hYmxlZENvbmZpZyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkQ29uZmlnO1xuICB9O1xuXG4gIHRoaXMuJGdldCA9IFtcbiAgICAgICAgICAgICckaW5qZWN0b3InLCAnJGludGVycG9sYXRlJywgJyRleGNlcHRpb25IYW5kbGVyJywgJyR0ZW1wbGF0ZVJlcXVlc3QnLCAnJHBhcnNlJyxcbiAgICAgICAgICAgICckY29udHJvbGxlcicsICckcm9vdFNjb3BlJywgJyRzY2UnLCAnJGFuaW1hdGUnLCAnJCRzYW5pdGl6ZVVyaScsXG4gICAgZnVuY3Rpb24oJGluamVjdG9yLCAgICRpbnRlcnBvbGF0ZSwgICAkZXhjZXB0aW9uSGFuZGxlciwgICAkdGVtcGxhdGVSZXF1ZXN0LCAgICRwYXJzZSxcbiAgICAgICAgICAgICAkY29udHJvbGxlciwgICAkcm9vdFNjb3BlLCAgICRzY2UsICAgJGFuaW1hdGUsICAgJCRzYW5pdGl6ZVVyaSkge1xuXG4gICAgdmFyIFNJTVBMRV9BVFRSX05BTUUgPSAvXlxcdy87XG4gICAgdmFyIHNwZWNpYWxBdHRySG9sZGVyID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG5cbiAgICB2YXIgY29tbWVudERpcmVjdGl2ZXNFbmFibGVkID0gY29tbWVudERpcmVjdGl2ZXNFbmFibGVkQ29uZmlnO1xuICAgIHZhciBjc3NDbGFzc0RpcmVjdGl2ZXNFbmFibGVkID0gY3NzQ2xhc3NEaXJlY3RpdmVzRW5hYmxlZENvbmZpZztcblxuXG4gICAgdmFyIG9uQ2hhbmdlc1R0bCA9IFRUTDtcbiAgICAvLyBUaGUgb25DaGFuZ2VzIGhvb2tzIHNob3VsZCBhbGwgYmUgcnVuIHRvZ2V0aGVyIGluIGEgc2luZ2xlIGRpZ2VzdFxuICAgIC8vIFdoZW4gY2hhbmdlcyBvY2N1ciwgdGhlIGNhbGwgdG8gdHJpZ2dlciB0aGVpciBob29rcyB3aWxsIGJlIGFkZGVkIHRvIHRoaXMgcXVldWVcbiAgICB2YXIgb25DaGFuZ2VzUXVldWU7XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBpbiBhICQkcG9zdERpZ2VzdCB0byB0cmlnZ2VyIGFsbCB0aGUgb25DaGFuZ2VzIGhvb2tzIGluIGEgc2luZ2xlIGRpZ2VzdFxuICAgIGZ1bmN0aW9uIGZsdXNoT25DaGFuZ2VzUXVldWUoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoISgtLW9uQ2hhbmdlc1R0bCkpIHtcbiAgICAgICAgICAvLyBXZSBoYXZlIGhpdCB0aGUgVFRMIGxpbWl0IHNvIHJlc2V0IGV2ZXJ5dGhpbmdcbiAgICAgICAgICBvbkNoYW5nZXNRdWV1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignaW5mY2huZycsICd7MH0gJG9uQ2hhbmdlcygpIGl0ZXJhdGlvbnMgcmVhY2hlZC4gQWJvcnRpbmchXFxuJywgVFRMKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBtdXN0IHJ1biB0aGlzIGhvb2sgaW4gYW4gYXBwbHkgc2luY2UgdGhlICQkcG9zdERpZ2VzdCBydW5zIG91dHNpZGUgYXBwbHlcbiAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIGVycm9ycyA9IFtdO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG9uQ2hhbmdlc1F1ZXVlLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIG9uQ2hhbmdlc1F1ZXVlW2ldKCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGVycm9ycy5wdXNoKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBSZXNldCB0aGUgcXVldWUgdG8gdHJpZ2dlciBhIG5ldyBzY2hlZHVsZSBuZXh0IHRpbWUgdGhlcmUgaXMgYSBjaGFuZ2VcbiAgICAgICAgICBvbkNoYW5nZXNRdWV1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3JzO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBvbkNoYW5nZXNUdGwrKztcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIEF0dHJpYnV0ZXMoZWxlbWVudCwgYXR0cmlidXRlc1RvQ29weSkge1xuICAgICAgaWYgKGF0dHJpYnV0ZXNUb0NvcHkpIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzVG9Db3B5KTtcbiAgICAgICAgdmFyIGksIGwsIGtleTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIHRoaXNba2V5XSA9IGF0dHJpYnV0ZXNUb0NvcHlba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy4kYXR0ciA9IHt9O1xuICAgICAgfVxuXG4gICAgICB0aGlzLiQkZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgQXR0cmlidXRlcy5wcm90b3R5cGUgPSB7XG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRjb21waWxlLmRpcmVjdGl2ZS5BdHRyaWJ1dGVzIyRub3JtYWxpemVcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBDb252ZXJ0cyBhbiBhdHRyaWJ1dGUgbmFtZSAoZS5nLiBkYXNoL2NvbG9uL3VuZGVyc2NvcmUtZGVsaW1pdGVkIHN0cmluZywgb3B0aW9uYWxseSBwcmVmaXhlZCB3aXRoIGB4LWAgb3JcbiAgICAgICAqIGBkYXRhLWApIHRvIGl0cyBub3JtYWxpemVkLCBjYW1lbENhc2UgZm9ybS5cbiAgICAgICAqXG4gICAgICAgKiBBbHNvIHRoZXJlIGlzIHNwZWNpYWwgY2FzZSBmb3IgTW96IHByZWZpeCBzdGFydGluZyB3aXRoIHVwcGVyIGNhc2UgbGV0dGVyLlxuICAgICAgICpcbiAgICAgICAqIEZvciBmdXJ0aGVyIGluZm9ybWF0aW9uIGNoZWNrIG91dCB0aGUgZ3VpZGUgb24ge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSNtYXRjaGluZy1kaXJlY3RpdmVzIE1hdGNoaW5nIERpcmVjdGl2ZXN9XG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTmFtZSB0byBub3JtYWxpemVcbiAgICAgICAqL1xuICAgICAgJG5vcm1hbGl6ZTogZGlyZWN0aXZlTm9ybWFsaXplLFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJGFkZENsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQWRkcyB0aGUgQ1NTIGNsYXNzIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgY2xhc3NWYWwgcGFyYW1ldGVyIHRvIHRoZSBlbGVtZW50LiBJZiBhbmltYXRpb25zXG4gICAgICAgKiBhcmUgZW5hYmxlZCB0aGVuIGFuIGFuaW1hdGlvbiB3aWxsIGJlIHRyaWdnZXJlZCBmb3IgdGhlIGNsYXNzIGFkZGl0aW9uLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1ZhbCBUaGUgY2xhc3NOYW1lIHZhbHVlIHRoYXQgd2lsbCBiZSBhZGRlZCB0byB0aGUgZWxlbWVudFxuICAgICAgICovXG4gICAgICAkYWRkQ2xhc3M6IGZ1bmN0aW9uKGNsYXNzVmFsKSB7XG4gICAgICAgIGlmIChjbGFzc1ZhbCAmJiBjbGFzc1ZhbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIGNsYXNzVmFsKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkcmVtb3ZlQ2xhc3NcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBSZW1vdmVzIHRoZSBDU1MgY2xhc3MgdmFsdWUgc3BlY2lmaWVkIGJ5IHRoZSBjbGFzc1ZhbCBwYXJhbWV0ZXIgZnJvbSB0aGUgZWxlbWVudC4gSWZcbiAgICAgICAqIGFuaW1hdGlvbnMgYXJlIGVuYWJsZWQgdGhlbiBhbiBhbmltYXRpb24gd2lsbCBiZSB0cmlnZ2VyZWQgZm9yIHRoZSBjbGFzcyByZW1vdmFsLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc1ZhbCBUaGUgY2xhc3NOYW1lIHZhbHVlIHRoYXQgd2lsbCBiZSByZW1vdmVkIGZyb20gdGhlIGVsZW1lbnRcbiAgICAgICAqL1xuICAgICAgJHJlbW92ZUNsYXNzOiBmdW5jdGlvbihjbGFzc1ZhbCkge1xuICAgICAgICBpZiAoY2xhc3NWYWwgJiYgY2xhc3NWYWwubGVuZ3RoID4gMCkge1xuICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCBjbGFzc1ZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXMjJHVwZGF0ZUNsYXNzXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogQWRkcyBhbmQgcmVtb3ZlcyB0aGUgYXBwcm9wcmlhdGUgQ1NTIGNsYXNzIHZhbHVlcyB0byB0aGUgZWxlbWVudCBiYXNlZCBvbiB0aGUgZGlmZmVyZW5jZVxuICAgICAgICogYmV0d2VlbiB0aGUgbmV3IGFuZCBvbGQgQ1NTIGNsYXNzIHZhbHVlcyAoc3BlY2lmaWVkIGFzIG5ld0NsYXNzZXMgYW5kIG9sZENsYXNzZXMpLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdDbGFzc2VzIFRoZSBjdXJyZW50IENTUyBjbGFzc05hbWUgdmFsdWVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBvbGRDbGFzc2VzIFRoZSBmb3JtZXIgQ1NTIGNsYXNzTmFtZSB2YWx1ZVxuICAgICAgICovXG4gICAgICAkdXBkYXRlQ2xhc3M6IGZ1bmN0aW9uKG5ld0NsYXNzZXMsIG9sZENsYXNzZXMpIHtcbiAgICAgICAgdmFyIHRvQWRkID0gdG9rZW5EaWZmZXJlbmNlKG5ld0NsYXNzZXMsIG9sZENsYXNzZXMpO1xuICAgICAgICBpZiAodG9BZGQgJiYgdG9BZGQubGVuZ3RoKSB7XG4gICAgICAgICAgJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIHRvQWRkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b1JlbW92ZSA9IHRva2VuRGlmZmVyZW5jZShvbGRDbGFzc2VzLCBuZXdDbGFzc2VzKTtcbiAgICAgICAgaWYgKHRvUmVtb3ZlICYmIHRvUmVtb3ZlLmxlbmd0aCkge1xuICAgICAgICAgICRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCB0b1JlbW92ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxuICAgICAgICogU2V0IGEgbm9ybWFsaXplZCBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgaW4gYSB3YXkgc3VjaCB0aGF0IGFsbCBkaXJlY3RpdmVzXG4gICAgICAgKiBjYW4gc2hhcmUgdGhlIGF0dHJpYnV0ZS4gVGhpcyBmdW5jdGlvbiBwcm9wZXJseSBoYW5kbGVzIGJvb2xlYW4gYXR0cmlidXRlcy5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgTm9ybWFsaXplZCBrZXkuIChpZSBuZ0F0dHJpYnV0ZSlcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfGJvb2xlYW59IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuIElmIGBudWxsYCBhdHRyaWJ1dGUgd2lsbCBiZSBkZWxldGVkLlxuICAgICAgICogQHBhcmFtIHtib29sZWFuPX0gd3JpdGVBdHRyIElmIGZhbHNlLCBkb2VzIG5vdCB3cml0ZSB0aGUgdmFsdWUgdG8gRE9NIGVsZW1lbnQgYXR0cmlidXRlLlxuICAgICAgICogICAgIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZz19IGF0dHJOYW1lIE9wdGlvbmFsIG5vbmUgbm9ybWFsaXplZCBuYW1lLiBEZWZhdWx0cyB0byBrZXkuXG4gICAgICAgKi9cbiAgICAgICRzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUsIHdyaXRlQXR0ciwgYXR0ck5hbWUpIHtcbiAgICAgICAgLy8gVE9ETzogZGVjaWRlIHdoZXRoZXIgb3Igbm90IHRvIHRocm93IGFuIGVycm9yIGlmIFwiY2xhc3NcIlxuICAgICAgICAvL2lzIHNldCB0aHJvdWdoIHRoaXMgZnVuY3Rpb24gc2luY2UgaXQgbWF5IGNhdXNlICR1cGRhdGVDbGFzcyB0b1xuICAgICAgICAvL2JlY29tZSB1bnN0YWJsZS5cblxuICAgICAgICB2YXIgbm9kZSA9IHRoaXMuJCRlbGVtZW50WzBdLFxuICAgICAgICAgICAgYm9vbGVhbktleSA9IGdldEJvb2xlYW5BdHRyTmFtZShub2RlLCBrZXkpLFxuICAgICAgICAgICAgYWxpYXNlZEtleSA9IGdldEFsaWFzZWRBdHRyTmFtZShrZXkpLFxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBrZXksXG4gICAgICAgICAgICBub2RlTmFtZTtcblxuICAgICAgICBpZiAoYm9vbGVhbktleSkge1xuICAgICAgICAgIHRoaXMuJCRlbGVtZW50LnByb3Aoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgYXR0ck5hbWUgPSBib29sZWFuS2V5O1xuICAgICAgICB9IGVsc2UgaWYgKGFsaWFzZWRLZXkpIHtcbiAgICAgICAgICB0aGlzW2FsaWFzZWRLZXldID0gdmFsdWU7XG4gICAgICAgICAgb2JzZXJ2ZXIgPSBhbGlhc2VkS2V5O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XG5cbiAgICAgICAgLy8gdHJhbnNsYXRlIG5vcm1hbGl6ZWQga2V5IHRvIGFjdHVhbCBrZXlcbiAgICAgICAgaWYgKGF0dHJOYW1lKSB7XG4gICAgICAgICAgdGhpcy4kYXR0cltrZXldID0gYXR0ck5hbWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXR0ck5hbWUgPSB0aGlzLiRhdHRyW2tleV07XG4gICAgICAgICAgaWYgKCFhdHRyTmFtZSkge1xuICAgICAgICAgICAgdGhpcy4kYXR0cltrZXldID0gYXR0ck5hbWUgPSBzbmFrZV9jYXNlKGtleSwgJy0nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBub2RlTmFtZSA9IG5vZGVOYW1lXyh0aGlzLiQkZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKChub2RlTmFtZSA9PT0gJ2EnICYmIChrZXkgPT09ICdocmVmJyB8fCBrZXkgPT09ICd4bGlua0hyZWYnKSkgfHxcbiAgICAgICAgICAgIChub2RlTmFtZSA9PT0gJ2ltZycgJiYga2V5ID09PSAnc3JjJykpIHtcbiAgICAgICAgICAvLyBzYW5pdGl6ZSBhW2hyZWZdIGFuZCBpbWdbc3JjXSB2YWx1ZXNcbiAgICAgICAgICB0aGlzW2tleV0gPSB2YWx1ZSA9ICQkc2FuaXRpemVVcmkodmFsdWUsIGtleSA9PT0gJ3NyYycpO1xuICAgICAgICB9IGVsc2UgaWYgKG5vZGVOYW1lID09PSAnaW1nJyAmJiBrZXkgPT09ICdzcmNzZXQnICYmIGlzRGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAvLyBzYW5pdGl6ZSBpbWdbc3Jjc2V0XSB2YWx1ZXNcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgICAgICAgICAvLyBmaXJzdCBjaGVjayBpZiB0aGVyZSBhcmUgc3BhY2VzIGJlY2F1c2UgaXQncyBub3QgdGhlIHNhbWUgcGF0dGVyblxuICAgICAgICAgIHZhciB0cmltbWVkU3Jjc2V0ID0gdHJpbSh2YWx1ZSk7XG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgKCAgIDk5OXggICAsfCAgIDk5OXcgICAsfCAgICx8LCAgIClcbiAgICAgICAgICB2YXIgc3JjUGF0dGVybiA9IC8oXFxzK1xcZCt4XFxzKix8XFxzK1xcZCt3XFxzKix8XFxzKyx8LFxccyspLztcbiAgICAgICAgICB2YXIgcGF0dGVybiA9IC9cXHMvLnRlc3QodHJpbW1lZFNyY3NldCkgPyBzcmNQYXR0ZXJuIDogLygsKS87XG5cbiAgICAgICAgICAvLyBzcGxpdCBzcmNzZXQgaW50byB0dXBsZSBvZiB1cmkgYW5kIGRlc2NyaXB0b3IgZXhjZXB0IGZvciB0aGUgbGFzdCBpdGVtXG4gICAgICAgICAgdmFyIHJhd1VyaXMgPSB0cmltbWVkU3Jjc2V0LnNwbGl0KHBhdHRlcm4pO1xuXG4gICAgICAgICAgLy8gZm9yIGVhY2ggdHVwbGVzXG4gICAgICAgICAgdmFyIG5iclVyaXNXaXRoMnBhcnRzID0gTWF0aC5mbG9vcihyYXdVcmlzLmxlbmd0aCAvIDIpO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmJyVXJpc1dpdGgycGFydHM7IGkrKykge1xuICAgICAgICAgICAgdmFyIGlubmVySWR4ID0gaSAqIDI7XG4gICAgICAgICAgICAvLyBzYW5pdGl6ZSB0aGUgdXJpXG4gICAgICAgICAgICByZXN1bHQgKz0gJCRzYW5pdGl6ZVVyaSh0cmltKHJhd1VyaXNbaW5uZXJJZHhdKSwgdHJ1ZSk7XG4gICAgICAgICAgICAvLyBhZGQgdGhlIGRlc2NyaXB0b3JcbiAgICAgICAgICAgIHJlc3VsdCArPSAoJyAnICsgdHJpbShyYXdVcmlzW2lubmVySWR4ICsgMV0pKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBzcGxpdCB0aGUgbGFzdCBpdGVtIGludG8gdXJpIGFuZCBkZXNjcmlwdG9yXG4gICAgICAgICAgdmFyIGxhc3RUdXBsZSA9IHRyaW0ocmF3VXJpc1tpICogMl0pLnNwbGl0KC9cXHMvKTtcblxuICAgICAgICAgIC8vIHNhbml0aXplIHRoZSBsYXN0IHVyaVxuICAgICAgICAgIHJlc3VsdCArPSAkJHNhbml0aXplVXJpKHRyaW0obGFzdFR1cGxlWzBdKSwgdHJ1ZSk7XG5cbiAgICAgICAgICAvLyBhbmQgYWRkIHRoZSBsYXN0IGRlc2NyaXB0b3IgaWYgYW55XG4gICAgICAgICAgaWYgKGxhc3RUdXBsZS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSAoJyAnICsgdHJpbShsYXN0VHVwbGVbMV0pKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpc1trZXldID0gdmFsdWUgPSByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod3JpdGVBdHRyICE9PSBmYWxzZSkge1xuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCBpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuJCRlbGVtZW50LnJlbW92ZUF0dHIoYXR0ck5hbWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoU0lNUExFX0FUVFJfTkFNRS50ZXN0KGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICB0aGlzLiQkZWxlbWVudC5hdHRyKGF0dHJOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZXRTcGVjaWFsQXR0cih0aGlzLiQkZWxlbWVudFswXSwgYXR0ck5hbWUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaXJlIG9ic2VydmVyc1xuICAgICAgICB2YXIgJCRvYnNlcnZlcnMgPSB0aGlzLiQkb2JzZXJ2ZXJzO1xuICAgICAgICBpZiAoJCRvYnNlcnZlcnMpIHtcbiAgICAgICAgICBmb3JFYWNoKCQkb2JzZXJ2ZXJzW29ic2VydmVyXSwgZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGZuKHZhbHVlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkb2JzZXJ2ZVxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIE9ic2VydmVzIGFuIGludGVycG9sYXRlZCBhdHRyaWJ1dGUuXG4gICAgICAgKlxuICAgICAgICogVGhlIG9ic2VydmVyIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCBvbmNlIGR1cmluZyB0aGUgbmV4dCBgJGRpZ2VzdGAgZm9sbG93aW5nXG4gICAgICAgKiBjb21waWxhdGlvbi4gVGhlIG9ic2VydmVyIGlzIHRoZW4gaW52b2tlZCB3aGVuZXZlciB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlXG4gICAgICAgKiBjaGFuZ2VzLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgTm9ybWFsaXplZCBrZXkuIChpZSBuZ0F0dHJpYnV0ZSkgLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihpbnRlcnBvbGF0ZWRWYWx1ZSl9IGZuIEZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2hlbmV2ZXJcbiAgICAgICAgICAgICAgICB0aGUgaW50ZXJwb2xhdGVkIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgY2hhbmdlcy5cbiAgICAgICAqICAgICAgICBTZWUgdGhlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uI2hvdy10ZXh0LWFuZC1hdHRyaWJ1dGUtYmluZGluZ3Mtd29yayBJbnRlcnBvbGF0aW9uXG4gICAgICAgKiAgICAgICAgZ3VpZGV9IGZvciBtb3JlIGluZm8uXG4gICAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oKX0gUmV0dXJucyBhIGRlcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIG9ic2VydmVyLlxuICAgICAgICovXG4gICAgICAkb2JzZXJ2ZTogZnVuY3Rpb24oa2V5LCBmbikge1xuICAgICAgICB2YXIgYXR0cnMgPSB0aGlzLFxuICAgICAgICAgICAgJCRvYnNlcnZlcnMgPSAoYXR0cnMuJCRvYnNlcnZlcnMgfHwgKGF0dHJzLiQkb2JzZXJ2ZXJzID0gY3JlYXRlTWFwKCkpKSxcbiAgICAgICAgICAgIGxpc3RlbmVycyA9ICgkJG9ic2VydmVyc1trZXldIHx8ICgkJG9ic2VydmVyc1trZXldID0gW10pKTtcblxuICAgICAgICBsaXN0ZW5lcnMucHVzaChmbik7XG4gICAgICAgICRyb290U2NvcGUuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoIWxpc3RlbmVycy4kJGludGVyICYmIGF0dHJzLmhhc093blByb3BlcnR5KGtleSkgJiYgIWlzVW5kZWZpbmVkKGF0dHJzW2tleV0pKSB7XG4gICAgICAgICAgICAvLyBubyBvbmUgcmVnaXN0ZXJlZCBhdHRyaWJ1dGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiwgc28gbGV0cyBjYWxsIGl0IG1hbnVhbGx5XG4gICAgICAgICAgICBmbihhdHRyc1trZXldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICBhcnJheVJlbW92ZShsaXN0ZW5lcnMsIGZuKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gc2V0U3BlY2lhbEF0dHIoZWxlbWVudCwgYXR0ck5hbWUsIHZhbHVlKSB7XG4gICAgICAvLyBBdHRyaWJ1dGVzIG5hbWVzIHRoYXQgZG8gbm90IHN0YXJ0IHdpdGggbGV0dGVycyAoc3VjaCBhcyBgKGNsaWNrKWApIGNhbm5vdCBiZSBzZXQgdXNpbmcgYHNldEF0dHJpYnV0ZWBcbiAgICAgIC8vIHNvIHdlIGhhdmUgdG8ganVtcCB0aHJvdWdoIHNvbWUgaG9vcHMgdG8gZ2V0IHN1Y2ggYW4gYXR0cmlidXRlXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL3B1bGwvMTMzMThcbiAgICAgIHNwZWNpYWxBdHRySG9sZGVyLmlubmVySFRNTCA9ICc8c3BhbiAnICsgYXR0ck5hbWUgKyAnPic7XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IHNwZWNpYWxBdHRySG9sZGVyLmZpcnN0Q2hpbGQuYXR0cmlidXRlcztcbiAgICAgIHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzWzBdO1xuICAgICAgLy8gV2UgaGF2ZSB0byByZW1vdmUgdGhlIGF0dHJpYnV0ZSBmcm9tIGl0cyBjb250YWluZXIgZWxlbWVudCBiZWZvcmUgd2UgY2FuIGFkZCBpdCB0byB0aGUgZGVzdGluYXRpb24gZWxlbWVudFxuICAgICAgYXR0cmlidXRlcy5yZW1vdmVOYW1lZEl0ZW0oYXR0cmlidXRlLm5hbWUpO1xuICAgICAgYXR0cmlidXRlLnZhbHVlID0gdmFsdWU7XG4gICAgICBlbGVtZW50LmF0dHJpYnV0ZXMuc2V0TmFtZWRJdGVtKGF0dHJpYnV0ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2FmZUFkZENsYXNzKCRlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgICRlbGVtZW50LmFkZENsYXNzKGNsYXNzTmFtZSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlnbm9yZSwgc2luY2UgaXQgbWVhbnMgdGhhdCB3ZSBhcmUgdHJ5aW5nIHRvIHNldCBjbGFzcyBvblxuICAgICAgICAvLyBTVkcgZWxlbWVudCwgd2hlcmUgY2xhc3MgbmFtZSBpcyByZWFkLW9ubHkuXG4gICAgICB9XG4gICAgfVxuXG5cbiAgICB2YXIgc3RhcnRTeW1ib2wgPSAkaW50ZXJwb2xhdGUuc3RhcnRTeW1ib2woKSxcbiAgICAgICAgZW5kU3ltYm9sID0gJGludGVycG9sYXRlLmVuZFN5bWJvbCgpLFxuICAgICAgICBkZW5vcm1hbGl6ZVRlbXBsYXRlID0gKHN0YXJ0U3ltYm9sID09PSAne3snICYmIGVuZFN5bWJvbCAgPT09ICd9fScpXG4gICAgICAgICAgICA/IGlkZW50aXR5XG4gICAgICAgICAgICA6IGZ1bmN0aW9uIGRlbm9ybWFsaXplVGVtcGxhdGUodGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlLnJlcGxhY2UoL1xce1xcey9nLCBzdGFydFN5bWJvbCkucmVwbGFjZSgvfX0vZywgZW5kU3ltYm9sKTtcbiAgICAgICAgfSxcbiAgICAgICAgTkdfQVRUUl9CSU5ESU5HID0gL15uZ0F0dHJbQS1aXS87XG4gICAgdmFyIE1VTFRJX0VMRU1FTlRfRElSX1JFID0gL14oLispU3RhcnQkLztcblxuICAgIGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZEJpbmRpbmdJbmZvKCRlbGVtZW50LCBiaW5kaW5nKSB7XG4gICAgICB2YXIgYmluZGluZ3MgPSAkZWxlbWVudC5kYXRhKCckYmluZGluZycpIHx8IFtdO1xuXG4gICAgICBpZiAoaXNBcnJheShiaW5kaW5nKSkge1xuICAgICAgICBiaW5kaW5ncyA9IGJpbmRpbmdzLmNvbmNhdChiaW5kaW5nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJpbmRpbmdzLnB1c2goYmluZGluZyk7XG4gICAgICB9XG5cbiAgICAgICRlbGVtZW50LmRhdGEoJyRiaW5kaW5nJywgYmluZGluZ3MpO1xuICAgIH0gOiBub29wO1xuXG4gICAgY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZEJpbmRpbmdDbGFzcygkZWxlbWVudCkge1xuICAgICAgc2FmZUFkZENsYXNzKCRlbGVtZW50LCAnbmctYmluZGluZycpO1xuICAgIH0gOiBub29wO1xuXG4gICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbyA9IGRlYnVnSW5mb0VuYWJsZWQgPyBmdW5jdGlvbiAkJGFkZFNjb3BlSW5mbygkZWxlbWVudCwgc2NvcGUsIGlzb2xhdGVkLCBub1RlbXBsYXRlKSB7XG4gICAgICB2YXIgZGF0YU5hbWUgPSBpc29sYXRlZCA/IChub1RlbXBsYXRlID8gJyRpc29sYXRlU2NvcGVOb1RlbXBsYXRlJyA6ICckaXNvbGF0ZVNjb3BlJykgOiAnJHNjb3BlJztcbiAgICAgICRlbGVtZW50LmRhdGEoZGF0YU5hbWUsIHNjb3BlKTtcbiAgICB9IDogbm9vcDtcblxuICAgIGNvbXBpbGUuJCRhZGRTY29wZUNsYXNzID0gZGVidWdJbmZvRW5hYmxlZCA/IGZ1bmN0aW9uICQkYWRkU2NvcGVDbGFzcygkZWxlbWVudCwgaXNvbGF0ZWQpIHtcbiAgICAgIHNhZmVBZGRDbGFzcygkZWxlbWVudCwgaXNvbGF0ZWQgPyAnbmctaXNvbGF0ZS1zY29wZScgOiAnbmctc2NvcGUnKTtcbiAgICB9IDogbm9vcDtcblxuICAgIGNvbXBpbGUuJCRjcmVhdGVDb21tZW50ID0gZnVuY3Rpb24oZGlyZWN0aXZlTmFtZSwgY29tbWVudCkge1xuICAgICAgdmFyIGNvbnRlbnQgPSAnJztcbiAgICAgIGlmIChkZWJ1Z0luZm9FbmFibGVkKSB7XG4gICAgICAgIGNvbnRlbnQgPSAnICcgKyAoZGlyZWN0aXZlTmFtZSB8fCAnJykgKyAnOiAnO1xuICAgICAgICBpZiAoY29tbWVudCkgY29udGVudCArPSBjb21tZW50ICsgJyAnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVDb21tZW50KGNvbnRlbnQpO1xuICAgIH07XG5cbiAgICByZXR1cm4gY29tcGlsZTtcblxuICAgIC8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIGZ1bmN0aW9uIGNvbXBpbGUoJGNvbXBpbGVOb2RlcywgdHJhbnNjbHVkZUZuLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgaWYgKCEoJGNvbXBpbGVOb2RlcyBpbnN0YW5jZW9mIGpxTGl0ZSkpIHtcbiAgICAgICAgLy8ganF1ZXJ5IGFsd2F5cyByZXdyYXBzLCB3aGVyZWFzIHdlIG5lZWQgdG8gcHJlc2VydmUgdGhlIG9yaWdpbmFsIHNlbGVjdG9yIHNvIHRoYXQgd2UgY2FuXG4gICAgICAgIC8vIG1vZGlmeSBpdC5cbiAgICAgICAgJGNvbXBpbGVOb2RlcyA9IGpxTGl0ZSgkY29tcGlsZU5vZGVzKTtcbiAgICAgIH1cbiAgICAgIHZhciBjb21wb3NpdGVMaW5rRm4gPVxuICAgICAgICAgICAgICBjb21waWxlTm9kZXMoJGNvbXBpbGVOb2RlcywgdHJhbnNjbHVkZUZuLCAkY29tcGlsZU5vZGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgcHJldmlvdXNDb21waWxlQ29udGV4dCk7XG4gICAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcygkY29tcGlsZU5vZGVzKTtcbiAgICAgIHZhciBuYW1lc3BhY2UgPSBudWxsO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHB1YmxpY0xpbmtGbihzY29wZSwgY2xvbmVDb25uZWN0Rm4sIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCEkY29tcGlsZU5vZGVzKSB7XG4gICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ211bHRpbGluaycsICdUaGlzIGVsZW1lbnQgaGFzIGFscmVhZHkgYmVlbiBsaW5rZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0QXJnKHNjb3BlLCAnc2NvcGUnKTtcblxuICAgICAgICBpZiAocHJldmlvdXNDb21waWxlQ29udGV4dCAmJiBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5lZWRzTmV3U2NvcGUpIHtcbiAgICAgICAgICAvLyBBIHBhcmVudCBkaXJlY3RpdmUgZGlkIGEgcmVwbGFjZSBhbmQgYSBkaXJlY3RpdmUgb24gdGhpcyBlbGVtZW50IGFza2VkXG4gICAgICAgICAgLy8gZm9yIHRyYW5zY2x1c2lvbiwgd2hpY2ggY2F1c2VkIHVzIHRvIGxvc2UgYSBsYXllciBvZiBlbGVtZW50IG9uIHdoaWNoXG4gICAgICAgICAgLy8gd2UgY291bGQgaG9sZCB0aGUgbmV3IHRyYW5zY2x1c2lvbiBzY29wZSwgc28gd2Ugd2lsbCBjcmVhdGUgaXQgbWFudWFsbHlcbiAgICAgICAgICAvLyBoZXJlLlxuICAgICAgICAgIHNjb3BlID0gc2NvcGUuJHBhcmVudC4kbmV3KCk7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFyIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuID0gb3B0aW9ucy5wYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbixcbiAgICAgICAgICB0cmFuc2NsdWRlQ29udHJvbGxlcnMgPSBvcHRpb25zLnRyYW5zY2x1ZGVDb250cm9sbGVycyxcbiAgICAgICAgICBmdXR1cmVQYXJlbnRFbGVtZW50ID0gb3B0aW9ucy5mdXR1cmVQYXJlbnRFbGVtZW50O1xuXG4gICAgICAgIC8vIFdoZW4gYHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuYCBpcyBwYXNzZWQsIGl0IGlzIGFcbiAgICAgICAgLy8gYGNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlYCBmdW5jdGlvbiAoaXQgd2FzIHByZXZpb3VzbHkgcGFzc2VkXG4gICAgICAgIC8vIGFzIGB0cmFuc2NsdWRlYCB0byBkaXJlY3RpdmUubGluaykgc28gd2UgbXVzdCB1bndyYXAgaXQgdG8gZ2V0XG4gICAgICAgIC8vIGl0cyBgYm91bmRUcmFuc2NsdWRlRm5gXG4gICAgICAgIGlmIChwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbiAmJiBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbi4kJGJvdW5kVHJhbnNjbHVkZSkge1xuICAgICAgICAgIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuID0gcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4uJCRib3VuZFRyYW5zY2x1ZGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW5hbWVzcGFjZSkge1xuICAgICAgICAgIG5hbWVzcGFjZSA9IGRldGVjdE5hbWVzcGFjZUZvckNoaWxkRWxlbWVudHMoZnV0dXJlUGFyZW50RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyICRsaW5rTm9kZTtcbiAgICAgICAgaWYgKG5hbWVzcGFjZSAhPT0gJ2h0bWwnKSB7XG4gICAgICAgICAgLy8gV2hlbiB1c2luZyBhIGRpcmVjdGl2ZSB3aXRoIHJlcGxhY2U6dHJ1ZSBhbmQgdGVtcGxhdGVVcmwgdGhlICRjb21waWxlTm9kZXNcbiAgICAgICAgICAvLyAob3IgYSBjaGlsZCBlbGVtZW50IGluc2lkZSBvZiB0aGVtKVxuICAgICAgICAgIC8vIG1pZ2h0IGNoYW5nZSwgc28gd2UgbmVlZCB0byByZWNyZWF0ZSB0aGUgbmFtZXNwYWNlIGFkYXB0ZWQgY29tcGlsZU5vZGVzXG4gICAgICAgICAgLy8gZm9yIGNhbGwgdG8gdGhlIGxpbmsgZnVuY3Rpb24uXG4gICAgICAgICAgLy8gTm90ZTogVGhpcyB3aWxsIGFscmVhZHkgY2xvbmUgdGhlIG5vZGVzLi4uXG4gICAgICAgICAgJGxpbmtOb2RlID0ganFMaXRlKFxuICAgICAgICAgICAgd3JhcFRlbXBsYXRlKG5hbWVzcGFjZSwganFMaXRlKCc8ZGl2PicpLmFwcGVuZCgkY29tcGlsZU5vZGVzKS5odG1sKCkpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChjbG9uZUNvbm5lY3RGbikge1xuICAgICAgICAgIC8vIGltcG9ydGFudCEhOiB3ZSBtdXN0IGNhbGwgb3VyIGpxTGl0ZS5jbG9uZSgpIHNpbmNlIHRoZSBqUXVlcnkgb25lIGlzIHRyeWluZyB0byBiZSBzbWFydFxuICAgICAgICAgIC8vIGFuZCBzb21ldGltZXMgY2hhbmdlcyB0aGUgc3RydWN0dXJlIG9mIHRoZSBET00uXG4gICAgICAgICAgJGxpbmtOb2RlID0gSlFMaXRlUHJvdG90eXBlLmNsb25lLmNhbGwoJGNvbXBpbGVOb2Rlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGxpbmtOb2RlID0gJGNvbXBpbGVOb2RlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFuc2NsdWRlQ29udHJvbGxlcnMpIHtcbiAgICAgICAgICBmb3IgKHZhciBjb250cm9sbGVyTmFtZSBpbiB0cmFuc2NsdWRlQ29udHJvbGxlcnMpIHtcbiAgICAgICAgICAgICRsaW5rTm9kZS5kYXRhKCckJyArIGNvbnRyb2xsZXJOYW1lICsgJ0NvbnRyb2xsZXInLCB0cmFuc2NsdWRlQ29udHJvbGxlcnNbY29udHJvbGxlck5hbWVdLmluc3RhbmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVJbmZvKCRsaW5rTm9kZSwgc2NvcGUpO1xuXG4gICAgICAgIGlmIChjbG9uZUNvbm5lY3RGbikgY2xvbmVDb25uZWN0Rm4oJGxpbmtOb2RlLCBzY29wZSk7XG4gICAgICAgIGlmIChjb21wb3NpdGVMaW5rRm4pIGNvbXBvc2l0ZUxpbmtGbihzY29wZSwgJGxpbmtOb2RlLCAkbGlua05vZGUsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKTtcblxuICAgICAgICBpZiAoIWNsb25lQ29ubmVjdEZuKSB7XG4gICAgICAgICAgJGNvbXBpbGVOb2RlcyA9IGNvbXBvc2l0ZUxpbmtGbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRsaW5rTm9kZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGV0ZWN0TmFtZXNwYWNlRm9yQ2hpbGRFbGVtZW50cyhwYXJlbnRFbGVtZW50KSB7XG4gICAgICAvLyBUT0RPOiBNYWtlIHRoaXMgZGV0ZWN0IE1hdGhNTCBhcyB3ZWxsLi4uXG4gICAgICB2YXIgbm9kZSA9IHBhcmVudEVsZW1lbnQgJiYgcGFyZW50RWxlbWVudFswXTtcbiAgICAgIGlmICghbm9kZSkge1xuICAgICAgICByZXR1cm4gJ2h0bWwnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5vZGVOYW1lXyhub2RlKSAhPT0gJ2ZvcmVpZ25vYmplY3QnICYmIHRvU3RyaW5nLmNhbGwobm9kZSkubWF0Y2goL1NWRy8pID8gJ3N2ZycgOiAnaHRtbCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcGlsZSBmdW5jdGlvbiBtYXRjaGVzIGVhY2ggbm9kZSBpbiBub2RlTGlzdCBhZ2FpbnN0IHRoZSBkaXJlY3RpdmVzLiBPbmNlIGFsbCBkaXJlY3RpdmVzXG4gICAgICogZm9yIGEgcGFydGljdWxhciBub2RlIGFyZSBjb2xsZWN0ZWQgdGhlaXIgY29tcGlsZSBmdW5jdGlvbnMgYXJlIGV4ZWN1dGVkLiBUaGUgY29tcGlsZVxuICAgICAqIGZ1bmN0aW9ucyByZXR1cm4gdmFsdWVzIC0gdGhlIGxpbmtpbmcgZnVuY3Rpb25zIC0gYXJlIGNvbWJpbmVkIGludG8gYSBjb21wb3NpdGUgbGlua2luZ1xuICAgICAqIGZ1bmN0aW9uLCB3aGljaCBpcyB0aGUgYSBsaW5raW5nIGZ1bmN0aW9uIGZvciB0aGUgbm9kZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Tm9kZUxpc3R9IG5vZGVMaXN0IGFuIGFycmF5IG9mIG5vZGVzIG9yIE5vZGVMaXN0IHRvIGNvbXBpbGVcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKGFuZ3VsYXIuU2NvcGUsIGNsb25lQXR0YWNoRm49KX0gdHJhbnNjbHVkZUZuIEEgbGlua2luZyBmdW5jdGlvbiwgd2hlcmUgdGhlXG4gICAgICogICAgICAgIHNjb3BlIGFyZ3VtZW50IGlzIGF1dG8tZ2VuZXJhdGVkIHRvIHRoZSBuZXcgY2hpbGQgb2YgdGhlIHRyYW5zY2x1ZGVkIHBhcmVudCBzY29wZS5cbiAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnQ9fSAkcm9vdEVsZW1lbnQgSWYgdGhlIG5vZGVMaXN0IGlzIHRoZSByb290IG9mIHRoZSBjb21waWxhdGlvbiB0cmVlIHRoZW5cbiAgICAgKiAgICAgICAgdGhlIHJvb3RFbGVtZW50IG11c3QgYmUgc2V0IHRoZSBqcUxpdGUgY29sbGVjdGlvbiBvZiB0aGUgY29tcGlsZSByb290LiBUaGlzIGlzXG4gICAgICogICAgICAgIG5lZWRlZCBzbyB0aGF0IHRoZSBqcUxpdGUgY29sbGVjdGlvbiBpdGVtcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCB3aWRnZXRzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyPX0gbWF4UHJpb3JpdHkgTWF4IGRpcmVjdGl2ZSBwcmlvcml0eS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgY29tcG9zaXRlIGxpbmtpbmcgZnVuY3Rpb24gb2YgYWxsIG9mIHRoZSBtYXRjaGVkIGRpcmVjdGl2ZXMgb3IgbnVsbC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21waWxlTm9kZXMobm9kZUxpc3QsIHRyYW5zY2x1ZGVGbiwgJHJvb3RFbGVtZW50LCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgIHZhciBsaW5rRm5zID0gW10sXG4gICAgICAgICAgLy8gYG5vZGVMaXN0YCBjYW4gYmUgZWl0aGVyIGFuIGVsZW1lbnQncyBgLmNoaWxkTm9kZXNgIChsaXZlIE5vZGVMaXN0KVxuICAgICAgICAgIC8vIG9yIGEganFMaXRlL2pRdWVyeSBjb2xsZWN0aW9uIG9yIGFuIGFycmF5XG4gICAgICAgICAgbm90TGl2ZUxpc3QgPSBpc0FycmF5KG5vZGVMaXN0KSB8fCAobm9kZUxpc3QgaW5zdGFuY2VvZiBqcUxpdGUpLFxuICAgICAgICAgIGF0dHJzLCBkaXJlY3RpdmVzLCBub2RlTGlua0ZuLCBjaGlsZE5vZGVzLCBjaGlsZExpbmtGbiwgbGlua0ZuRm91bmQsIG5vZGVMaW5rRm5Gb3VuZDtcblxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGF0dHJzID0gbmV3IEF0dHJpYnV0ZXMoKTtcblxuICAgICAgICAvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG4gICAgICAgIC8vIFdvcmthcm91bmQgZm9yICMxMTc4MSBhbmQgIzE0OTI0XG4gICAgICAgIGlmIChtc2llID09PSAxMSkge1xuICAgICAgICAgIG1lcmdlQ29uc2VjdXRpdmVUZXh0Tm9kZXMobm9kZUxpc3QsIGksIG5vdExpdmVMaXN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdlIG11c3QgYWx3YXlzIHJlZmVyIHRvIGBub2RlTGlzdFtpXWAgaGVyZWFmdGVyLFxuICAgICAgICAvLyBzaW5jZSB0aGUgbm9kZXMgY2FuIGJlIHJlcGxhY2VkIHVuZGVybmVhdGggdXMuXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBjb2xsZWN0RGlyZWN0aXZlcyhub2RlTGlzdFtpXSwgW10sIGF0dHJzLCBpID09PSAwID8gbWF4UHJpb3JpdHkgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWdub3JlRGlyZWN0aXZlKTtcblxuICAgICAgICBub2RlTGlua0ZuID0gKGRpcmVjdGl2ZXMubGVuZ3RoKVxuICAgICAgICAgICAgPyBhcHBseURpcmVjdGl2ZXNUb05vZGUoZGlyZWN0aXZlcywgbm9kZUxpc3RbaV0sIGF0dHJzLCB0cmFuc2NsdWRlRm4sICRyb290RWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCwgW10sIFtdLCBwcmV2aW91c0NvbXBpbGVDb250ZXh0KVxuICAgICAgICAgICAgOiBudWxsO1xuXG4gICAgICAgIGlmIChub2RlTGlua0ZuICYmIG5vZGVMaW5rRm4uc2NvcGUpIHtcbiAgICAgICAgICBjb21waWxlLiQkYWRkU2NvcGVDbGFzcyhhdHRycy4kJGVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGRMaW5rRm4gPSAobm9kZUxpbmtGbiAmJiBub2RlTGlua0ZuLnRlcm1pbmFsIHx8XG4gICAgICAgICAgICAgICAgICAgICAgIShjaGlsZE5vZGVzID0gbm9kZUxpc3RbaV0uY2hpbGROb2RlcykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAhY2hpbGROb2Rlcy5sZW5ndGgpXG4gICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgIDogY29tcGlsZU5vZGVzKGNoaWxkTm9kZXMsXG4gICAgICAgICAgICAgICAgIG5vZGVMaW5rRm4gPyAoXG4gICAgICAgICAgICAgICAgICAobm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCB8fCAhbm9kZUxpbmtGbi50ZW1wbGF0ZU9uVGhpc0VsZW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAmJiBub2RlTGlua0ZuLnRyYW5zY2x1ZGUpIDogdHJhbnNjbHVkZUZuKTtcblxuICAgICAgICBpZiAobm9kZUxpbmtGbiB8fCBjaGlsZExpbmtGbikge1xuICAgICAgICAgIGxpbmtGbnMucHVzaChpLCBub2RlTGlua0ZuLCBjaGlsZExpbmtGbik7XG4gICAgICAgICAgbGlua0ZuRm91bmQgPSB0cnVlO1xuICAgICAgICAgIG5vZGVMaW5rRm5Gb3VuZCA9IG5vZGVMaW5rRm5Gb3VuZCB8fCBub2RlTGlua0ZuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy91c2UgdGhlIHByZXZpb3VzIGNvbnRleHQgb25seSBmb3IgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHZpcnR1YWwgZ3JvdXBcbiAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIHJldHVybiBhIGxpbmtpbmcgZnVuY3Rpb24gaWYgd2UgaGF2ZSBmb3VuZCBhbnl0aGluZywgbnVsbCBvdGhlcndpc2VcbiAgICAgIHJldHVybiBsaW5rRm5Gb3VuZCA/IGNvbXBvc2l0ZUxpbmtGbiA6IG51bGw7XG5cbiAgICAgIGZ1bmN0aW9uIGNvbXBvc2l0ZUxpbmtGbihzY29wZSwgbm9kZUxpc3QsICRyb290RWxlbWVudCwgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgdmFyIG5vZGVMaW5rRm4sIGNoaWxkTGlua0ZuLCBub2RlLCBjaGlsZFNjb3BlLCBpLCBpaSwgaWR4LCBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuO1xuICAgICAgICB2YXIgc3RhYmxlTm9kZUxpc3Q7XG5cblxuICAgICAgICBpZiAobm9kZUxpbmtGbkZvdW5kKSB7XG4gICAgICAgICAgLy8gY29weSBub2RlTGlzdCBzbyB0aGF0IGlmIGEgbm9kZUxpbmtGbiByZW1vdmVzIG9yIGFkZHMgYW4gZWxlbWVudCBhdCB0aGlzIERPTSBsZXZlbCBvdXJcbiAgICAgICAgICAvLyBvZmZzZXRzIGRvbid0IGdldCBzY3Jld2VkIHVwXG4gICAgICAgICAgdmFyIG5vZGVMaXN0TGVuZ3RoID0gbm9kZUxpc3QubGVuZ3RoO1xuICAgICAgICAgIHN0YWJsZU5vZGVMaXN0ID0gbmV3IEFycmF5KG5vZGVMaXN0TGVuZ3RoKTtcblxuICAgICAgICAgIC8vIGNyZWF0ZSBhIHNwYXJzZSBhcnJheSBieSBvbmx5IGNvcHlpbmcgdGhlIGVsZW1lbnRzIHdoaWNoIGhhdmUgYSBsaW5rRm5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGlua0Zucy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICAgICAgaWR4ID0gbGlua0Zuc1tpXTtcbiAgICAgICAgICAgIHN0YWJsZU5vZGVMaXN0W2lkeF0gPSBub2RlTGlzdFtpZHhdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGFibGVOb2RlTGlzdCA9IG5vZGVMaXN0O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBsaW5rRm5zLmxlbmd0aDsgaSA8IGlpOykge1xuICAgICAgICAgIG5vZGUgPSBzdGFibGVOb2RlTGlzdFtsaW5rRm5zW2krK11dO1xuICAgICAgICAgIG5vZGVMaW5rRm4gPSBsaW5rRm5zW2krK107XG4gICAgICAgICAgY2hpbGRMaW5rRm4gPSBsaW5rRm5zW2krK107XG5cbiAgICAgICAgICBpZiAobm9kZUxpbmtGbikge1xuICAgICAgICAgICAgaWYgKG5vZGVMaW5rRm4uc2NvcGUpIHtcbiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IHNjb3BlLiRuZXcoKTtcbiAgICAgICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlSW5mbyhqcUxpdGUobm9kZSksIGNoaWxkU2NvcGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hpbGRTY29wZSA9IHNjb3BlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCkge1xuICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oXG4gICAgICAgICAgICAgICAgICBzY29wZSwgbm9kZUxpbmtGbi50cmFuc2NsdWRlLCBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIW5vZGVMaW5rRm4udGVtcGxhdGVPblRoaXNFbGVtZW50ICYmIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbjtcblxuICAgICAgICAgICAgfSBlbHNlIGlmICghcGFyZW50Qm91bmRUcmFuc2NsdWRlRm4gJiYgdHJhbnNjbHVkZUZuKSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgdHJhbnNjbHVkZUZuKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5vZGVMaW5rRm4oY2hpbGRMaW5rRm4sIGNoaWxkU2NvcGUsIG5vZGUsICRyb290RWxlbWVudCwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkTGlua0ZuKSB7XG4gICAgICAgICAgICBjaGlsZExpbmtGbihzY29wZSwgbm9kZS5jaGlsZE5vZGVzLCB1bmRlZmluZWQsIHBhcmVudEJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZXJnZUNvbnNlY3V0aXZlVGV4dE5vZGVzKG5vZGVMaXN0LCBpZHgsIG5vdExpdmVMaXN0KSB7XG4gICAgICB2YXIgbm9kZSA9IG5vZGVMaXN0W2lkeF07XG4gICAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgdmFyIHNpYmxpbmc7XG5cbiAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfVEVYVCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHNpYmxpbmcgPSBwYXJlbnQgPyBub2RlLm5leHRTaWJsaW5nIDogbm9kZUxpc3RbaWR4ICsgMV07XG4gICAgICAgIGlmICghc2libGluZyB8fCBzaWJsaW5nLm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfVEVYVCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZS5ub2RlVmFsdWUgPSBub2RlLm5vZGVWYWx1ZSArIHNpYmxpbmcubm9kZVZhbHVlO1xuXG4gICAgICAgIGlmIChzaWJsaW5nLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBzaWJsaW5nLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2libGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vdExpdmVMaXN0ICYmIHNpYmxpbmcgPT09IG5vZGVMaXN0W2lkeCArIDFdKSB7XG4gICAgICAgICAgbm9kZUxpc3Quc3BsaWNlKGlkeCArIDEsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlQm91bmRUcmFuc2NsdWRlRm4oc2NvcGUsIHRyYW5zY2x1ZGVGbiwgcHJldmlvdXNCb3VuZFRyYW5zY2x1ZGVGbikge1xuICAgICAgZnVuY3Rpb24gYm91bmRUcmFuc2NsdWRlRm4odHJhbnNjbHVkZWRTY29wZSwgY2xvbmVGbiwgY29udHJvbGxlcnMsIGZ1dHVyZVBhcmVudEVsZW1lbnQsIGNvbnRhaW5pbmdTY29wZSkge1xuXG4gICAgICAgIGlmICghdHJhbnNjbHVkZWRTY29wZSkge1xuICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUgPSBzY29wZS4kbmV3KGZhbHNlLCBjb250YWluaW5nU2NvcGUpO1xuICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUuJCR0cmFuc2NsdWRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJhbnNjbHVkZUZuKHRyYW5zY2x1ZGVkU2NvcGUsIGNsb25lRm4sIHtcbiAgICAgICAgICBwYXJlbnRCb3VuZFRyYW5zY2x1ZGVGbjogcHJldmlvdXNCb3VuZFRyYW5zY2x1ZGVGbixcbiAgICAgICAgICB0cmFuc2NsdWRlQ29udHJvbGxlcnM6IGNvbnRyb2xsZXJzLFxuICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQ6IGZ1dHVyZVBhcmVudEVsZW1lbnRcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdlIG5lZWQgIHRvIGF0dGFjaCB0aGUgdHJhbnNjbHVzaW9uIHNsb3RzIG9udG8gdGhlIGBib3VuZFRyYW5zY2x1ZGVGbmBcbiAgICAgIC8vIHNvIHRoYXQgdGhleSBhcmUgYXZhaWxhYmxlIGluc2lkZSB0aGUgYGNvbnRyb2xsZXJzQm91bmRUcmFuc2NsdWRlYCBmdW5jdGlvblxuICAgICAgdmFyIGJvdW5kU2xvdHMgPSBib3VuZFRyYW5zY2x1ZGVGbi4kJHNsb3RzID0gY3JlYXRlTWFwKCk7XG4gICAgICBmb3IgKHZhciBzbG90TmFtZSBpbiB0cmFuc2NsdWRlRm4uJCRzbG90cykge1xuICAgICAgICBpZiAodHJhbnNjbHVkZUZuLiQkc2xvdHNbc2xvdE5hbWVdKSB7XG4gICAgICAgICAgYm91bmRTbG90c1tzbG90TmFtZV0gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgdHJhbnNjbHVkZUZuLiQkc2xvdHNbc2xvdE5hbWVdLCBwcmV2aW91c0JvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBib3VuZFNsb3RzW3Nsb3ROYW1lXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJvdW5kVHJhbnNjbHVkZUZuO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvb2tzIGZvciBkaXJlY3RpdmVzIG9uIHRoZSBnaXZlbiBub2RlIGFuZCBhZGRzIHRoZW0gdG8gdGhlIGRpcmVjdGl2ZSBjb2xsZWN0aW9uIHdoaWNoIGlzXG4gICAgICogc29ydGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5vZGUgTm9kZSB0byBzZWFyY2guXG4gICAgICogQHBhcmFtIGRpcmVjdGl2ZXMgQW4gYXJyYXkgdG8gd2hpY2ggdGhlIGRpcmVjdGl2ZXMgYXJlIGFkZGVkIHRvLiBUaGlzIGFycmF5IGlzIHNvcnRlZCBiZWZvcmVcbiAgICAgKiAgICAgICAgdGhlIGZ1bmN0aW9uIHJldHVybnMuXG4gICAgICogQHBhcmFtIGF0dHJzIFRoZSBzaGFyZWQgYXR0cnMgb2JqZWN0IHdoaWNoIGlzIHVzZWQgdG8gcG9wdWxhdGUgdGhlIG5vcm1hbGl6ZWQgYXR0cmlidXRlcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcj19IG1heFByaW9yaXR5IE1heCBkaXJlY3RpdmUgcHJpb3JpdHkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29sbGVjdERpcmVjdGl2ZXMobm9kZSwgZGlyZWN0aXZlcywgYXR0cnMsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpIHtcbiAgICAgIHZhciBub2RlVHlwZSA9IG5vZGUubm9kZVR5cGUsXG4gICAgICAgICAgYXR0cnNNYXAgPSBhdHRycy4kYXR0cixcbiAgICAgICAgICBtYXRjaCxcbiAgICAgICAgICBub2RlTmFtZSxcbiAgICAgICAgICBjbGFzc05hbWU7XG5cbiAgICAgIHN3aXRjaCAobm9kZVR5cGUpIHtcbiAgICAgICAgY2FzZSBOT0RFX1RZUEVfRUxFTUVOVDogLyogRWxlbWVudCAqL1xuXG4gICAgICAgICAgbm9kZU5hbWUgPSBub2RlTmFtZV8obm9kZSk7XG5cbiAgICAgICAgICAvLyB1c2UgdGhlIG5vZGUgbmFtZTogPGRpcmVjdGl2ZT5cbiAgICAgICAgICBhZGREaXJlY3RpdmUoZGlyZWN0aXZlcyxcbiAgICAgICAgICAgICAgZGlyZWN0aXZlTm9ybWFsaXplKG5vZGVOYW1lKSwgJ0UnLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlKTtcblxuICAgICAgICAgIC8vIGl0ZXJhdGUgb3ZlciB0aGUgYXR0cmlidXRlc1xuICAgICAgICAgIGZvciAodmFyIGF0dHIsIG5hbWUsIG5OYW1lLCBuZ0F0dHJOYW1lLCB2YWx1ZSwgaXNOZ0F0dHIsIG5BdHRycyA9IG5vZGUuYXR0cmlidXRlcyxcbiAgICAgICAgICAgICAgICAgICBqID0gMCwgamogPSBuQXR0cnMgJiYgbkF0dHJzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHtcbiAgICAgICAgICAgIHZhciBhdHRyU3RhcnROYW1lID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgYXR0ckVuZE5hbWUgPSBmYWxzZTtcblxuICAgICAgICAgICAgYXR0ciA9IG5BdHRyc1tqXTtcbiAgICAgICAgICAgIG5hbWUgPSBhdHRyLm5hbWU7XG4gICAgICAgICAgICB2YWx1ZSA9IGF0dHIudmFsdWU7XG5cbiAgICAgICAgICAgIC8vIHN1cHBvcnQgbmdBdHRyIGF0dHJpYnV0ZSBiaW5kaW5nXG4gICAgICAgICAgICBuZ0F0dHJOYW1lID0gZGlyZWN0aXZlTm9ybWFsaXplKG5hbWUpO1xuICAgICAgICAgICAgaXNOZ0F0dHIgPSBOR19BVFRSX0JJTkRJTkcudGVzdChuZ0F0dHJOYW1lKTtcbiAgICAgICAgICAgIGlmIChpc05nQXR0cikge1xuICAgICAgICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKFBSRUZJWF9SRUdFWFAsICcnKVxuICAgICAgICAgICAgICAgIC5zdWJzdHIoOCkucmVwbGFjZSgvXyguKS9nLCBmdW5jdGlvbihtYXRjaCwgbGV0dGVyKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBtdWx0aUVsZW1lbnRNYXRjaCA9IG5nQXR0ck5hbWUubWF0Y2goTVVMVElfRUxFTUVOVF9ESVJfUkUpO1xuICAgICAgICAgICAgaWYgKG11bHRpRWxlbWVudE1hdGNoICYmIGRpcmVjdGl2ZUlzTXVsdGlFbGVtZW50KG11bHRpRWxlbWVudE1hdGNoWzFdKSkge1xuICAgICAgICAgICAgICBhdHRyU3RhcnROYW1lID0gbmFtZTtcbiAgICAgICAgICAgICAgYXR0ckVuZE5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDUpICsgJ2VuZCc7XG4gICAgICAgICAgICAgIG5hbWUgPSBuYW1lLnN1YnN0cigwLCBuYW1lLmxlbmd0aCAtIDYpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZShuYW1lLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgICAgICAgYXR0cnNNYXBbbk5hbWVdID0gbmFtZTtcbiAgICAgICAgICAgIGlmIChpc05nQXR0ciB8fCAhYXR0cnMuaGFzT3duUHJvcGVydHkobk5hbWUpKSB7XG4gICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKGdldEJvb2xlYW5BdHRyTmFtZShub2RlLCBuTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRydWU7IC8vIHByZXNlbmNlIG1lYW5zIHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZGRBdHRySW50ZXJwb2xhdGVEaXJlY3RpdmUobm9kZSwgZGlyZWN0aXZlcywgdmFsdWUsIG5OYW1lLCBpc05nQXR0cik7XG4gICAgICAgICAgICBhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdBJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgYXR0clN0YXJ0TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ckVuZE5hbWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChub2RlTmFtZSA9PT0gJ2lucHV0JyAmJiBub2RlLmdldEF0dHJpYnV0ZSgndHlwZScpID09PSAnaGlkZGVuJykge1xuICAgICAgICAgICAgLy8gSGlkZGVuIGlucHV0IGVsZW1lbnRzIGNhbiBoYXZlIHN0cmFuZ2UgYmVoYXZpb3VyIHdoZW4gbmF2aWdhdGluZyBiYWNrIHRvIHRoZSBwYWdlXG4gICAgICAgICAgICAvLyBUaGlzIHRlbGxzIHRoZSBicm93c2VyIG5vdCB0byB0cnkgdG8gY2FjaGUgYW5kIHJlaW5zdGF0ZSBwcmV2aW91cyB2YWx1ZXNcbiAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdhdXRvY29tcGxldGUnLCAnb2ZmJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gdXNlIGNsYXNzIGFzIGRpcmVjdGl2ZVxuICAgICAgICAgIGlmICghY3NzQ2xhc3NEaXJlY3RpdmVzRW5hYmxlZCkgYnJlYWs7XG4gICAgICAgICAgY2xhc3NOYW1lID0gbm9kZS5jbGFzc05hbWU7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KGNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgICAgLy8gTWF5YmUgU1ZHQW5pbWF0ZWRTdHJpbmdcbiAgICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLmFuaW1WYWw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1N0cmluZyhjbGFzc05hbWUpICYmIGNsYXNzTmFtZSAhPT0gJycpIHtcbiAgICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBDTEFTU19ESVJFQ1RJVkVfUkVHRVhQLmV4ZWMoY2xhc3NOYW1lKSkpIHtcbiAgICAgICAgICAgICAgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobWF0Y2hbMl0pO1xuICAgICAgICAgICAgICBpZiAoYWRkRGlyZWN0aXZlKGRpcmVjdGl2ZXMsIG5OYW1lLCAnQycsIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUpKSB7XG4gICAgICAgICAgICAgICAgYXR0cnNbbk5hbWVdID0gdHJpbShtYXRjaFszXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2xhc3NOYW1lID0gY2xhc3NOYW1lLnN1YnN0cihtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE5PREVfVFlQRV9URVhUOiAvKiBUZXh0IE5vZGUgKi9cbiAgICAgICAgICBhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUoZGlyZWN0aXZlcywgbm9kZS5ub2RlVmFsdWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIE5PREVfVFlQRV9DT01NRU5UOiAvKiBDb21tZW50ICovXG4gICAgICAgICAgaWYgKCFjb21tZW50RGlyZWN0aXZlc0VuYWJsZWQpIGJyZWFrO1xuICAgICAgICAgIGNvbGxlY3RDb21tZW50RGlyZWN0aXZlcyhub2RlLCBkaXJlY3RpdmVzLCBhdHRycywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGRpcmVjdGl2ZXMuc29ydChieVByaW9yaXR5KTtcbiAgICAgIHJldHVybiBkaXJlY3RpdmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbGxlY3RDb21tZW50RGlyZWN0aXZlcyhub2RlLCBkaXJlY3RpdmVzLCBhdHRycywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkge1xuICAgICAgLy8gZnVuY3Rpb24gY3JlYXRlZCBiZWNhdXNlIG9mIHBlcmZvcm1hbmNlLCB0cnkvY2F0Y2ggZGlzYWJsZXNcbiAgICAgIC8vIHRoZSBvcHRpbWl6YXRpb24gb2YgdGhlIHdob2xlIGZ1bmN0aW9uICMxNDg0OFxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG1hdGNoID0gQ09NTUVOVF9ESVJFQ1RJVkVfUkVHRVhQLmV4ZWMobm9kZS5ub2RlVmFsdWUpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICB2YXIgbk5hbWUgPSBkaXJlY3RpdmVOb3JtYWxpemUobWF0Y2hbMV0pO1xuICAgICAgICAgIGlmIChhZGREaXJlY3RpdmUoZGlyZWN0aXZlcywgbk5hbWUsICdNJywgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSkpIHtcbiAgICAgICAgICAgIGF0dHJzW25OYW1lXSA9IHRyaW0obWF0Y2hbMl0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyB0dXJucyBvdXQgdGhhdCB1bmRlciBzb21lIGNpcmN1bXN0YW5jZXMgSUU5IHRocm93cyBlcnJvcnMgd2hlbiBvbmUgYXR0ZW1wdHMgdG8gcmVhZFxuICAgICAgICAvLyBjb21tZW50J3Mgbm9kZSB2YWx1ZS5cbiAgICAgICAgLy8gSnVzdCBpZ25vcmUgaXQgYW5kIGNvbnRpbnVlLiAoQ2FuJ3Qgc2VlbSB0byByZXByb2R1Y2UgaW4gdGVzdCBjYXNlLilcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIG5vZGUgd2l0aCBhIGRpcmVjdGl2ZS1zdGFydCBpdCBjb2xsZWN0cyBhbGwgb2YgdGhlIHNpYmxpbmdzIHVudGlsIGl0IGZpbmRzXG4gICAgICogZGlyZWN0aXZlLWVuZC5cbiAgICAgKiBAcGFyYW0gbm9kZVxuICAgICAqIEBwYXJhbSBhdHRyU3RhcnRcbiAgICAgKiBAcGFyYW0gYXR0ckVuZFxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdyb3VwU2Nhbihub2RlLCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcbiAgICAgIHZhciBub2RlcyA9IFtdO1xuICAgICAgdmFyIGRlcHRoID0gMDtcbiAgICAgIGlmIChhdHRyU3RhcnQgJiYgbm9kZS5oYXNBdHRyaWJ1dGUgJiYgbm9kZS5oYXNBdHRyaWJ1dGUoYXR0clN0YXJ0KSkge1xuICAgICAgICBkbyB7XG4gICAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndXRlcmRpcicsXG4gICAgICAgICAgICAgICAgICAgICAgJ1VudGVybWluYXRlZCBhdHRyaWJ1dGUsIGZvdW5kIFxcJ3swfVxcJyBidXQgbm8gbWF0Y2hpbmcgXFwnezF9XFwnIGZvdW5kLicsXG4gICAgICAgICAgICAgICAgICAgICAgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5PREVfVFlQRV9FTEVNRU5UKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoYXR0clN0YXJ0KSkgZGVwdGgrKztcbiAgICAgICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZShhdHRyRW5kKSkgZGVwdGgtLTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfSB3aGlsZSAoZGVwdGggPiAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBqcUxpdGUobm9kZXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdyYXBwZXIgZm9yIGxpbmtpbmcgZnVuY3Rpb24gd2hpY2ggY29udmVydHMgbm9ybWFsIGxpbmtpbmcgZnVuY3Rpb24gaW50byBhIGdyb3VwZWRcbiAgICAgKiBsaW5raW5nIGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSBsaW5rRm5cbiAgICAgKiBAcGFyYW0gYXR0clN0YXJ0XG4gICAgICogQHBhcmFtIGF0dHJFbmRcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gICAgICovXG4gICAgZnVuY3Rpb24gZ3JvdXBFbGVtZW50c0xpbmtGbldyYXBwZXIobGlua0ZuLCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBncm91cGVkRWxlbWVudHNMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbikge1xuICAgICAgICBlbGVtZW50ID0gZ3JvdXBTY2FuKGVsZW1lbnRbMF0sIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgIHJldHVybiBsaW5rRm4oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBmdW5jdGlvbiBnZW5lcmF0b3IgdGhhdCBpcyB1c2VkIHRvIHN1cHBvcnQgYm90aCBlYWdlciBhbmQgbGF6eSBjb21waWxhdGlvblxuICAgICAqIGxpbmtpbmcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIGVhZ2VyXG4gICAgICogQHBhcmFtICRjb21waWxlTm9kZXNcbiAgICAgKiBAcGFyYW0gdHJhbnNjbHVkZUZuXG4gICAgICogQHBhcmFtIG1heFByaW9yaXR5XG4gICAgICogQHBhcmFtIGlnbm9yZURpcmVjdGl2ZVxuICAgICAqIEBwYXJhbSBwcmV2aW91c0NvbXBpbGVDb250ZXh0XG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBpbGF0aW9uR2VuZXJhdG9yKGVhZ2VyLCAkY29tcGlsZU5vZGVzLCB0cmFuc2NsdWRlRm4sIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgIHZhciBjb21waWxlZDtcblxuICAgICAgaWYgKGVhZ2VyKSB7XG4gICAgICAgIHJldHVybiBjb21waWxlKCRjb21waWxlTm9kZXMsIHRyYW5zY2x1ZGVGbiwgbWF4UHJpb3JpdHksIGlnbm9yZURpcmVjdGl2ZSwgcHJldmlvdXNDb21waWxlQ29udGV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gLyoqIEB0aGlzICovIGZ1bmN0aW9uIGxhenlDb21waWxhdGlvbigpIHtcbiAgICAgICAgaWYgKCFjb21waWxlZCkge1xuICAgICAgICAgIGNvbXBpbGVkID0gY29tcGlsZSgkY29tcGlsZU5vZGVzLCB0cmFuc2NsdWRlRm4sIG1heFByaW9yaXR5LCBpZ25vcmVEaXJlY3RpdmUsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpO1xuXG4gICAgICAgICAgLy8gTnVsbCBvdXQgYWxsIG9mIHRoZXNlIHJlZmVyZW5jZXMgaW4gb3JkZXIgdG8gbWFrZSB0aGVtIGVsaWdpYmxlIGZvciBnYXJiYWdlIGNvbGxlY3Rpb25cbiAgICAgICAgICAvLyBzaW5jZSB0aGlzIGlzIGEgcG90ZW50aWFsbHkgbG9uZyBsaXZlZCBjbG9zdXJlXG4gICAgICAgICAgJGNvbXBpbGVOb2RlcyA9IHRyYW5zY2x1ZGVGbiA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21waWxlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPbmNlIHRoZSBkaXJlY3RpdmVzIGhhdmUgYmVlbiBjb2xsZWN0ZWQsIHRoZWlyIGNvbXBpbGUgZnVuY3Rpb25zIGFyZSBleGVjdXRlZC4gVGhpcyBtZXRob2RcbiAgICAgKiBpcyByZXNwb25zaWJsZSBmb3IgaW5saW5pbmcgZGlyZWN0aXZlIHRlbXBsYXRlcyBhcyB3ZWxsIGFzIHRlcm1pbmF0aW5nIHRoZSBhcHBsaWNhdGlvblxuICAgICAqIG9mIHRoZSBkaXJlY3RpdmVzIGlmIHRoZSB0ZXJtaW5hbCBkaXJlY3RpdmUgaGFzIGJlZW4gcmVhY2hlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGRpcmVjdGl2ZXMgQXJyYXkgb2YgY29sbGVjdGVkIGRpcmVjdGl2ZXMgdG8gZXhlY3V0ZSB0aGVpciBjb21waWxlIGZ1bmN0aW9uLlxuICAgICAqICAgICAgICB0aGlzIG5lZWRzIHRvIGJlIHByZS1zb3J0ZWQgYnkgcHJpb3JpdHkgb3JkZXIuXG4gICAgICogQHBhcmFtIHtOb2RlfSBjb21waWxlTm9kZSBUaGUgcmF3IERPTSBub2RlIHRvIGFwcGx5IHRoZSBjb21waWxlIGZ1bmN0aW9ucyB0b1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0ZW1wbGF0ZUF0dHJzIFRoZSBzaGFyZWQgYXR0cmlidXRlIGZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbihhbmd1bGFyLlNjb3BlLCBjbG9uZUF0dGFjaEZuPSl9IHRyYW5zY2x1ZGVGbiBBIGxpbmtpbmcgZnVuY3Rpb24sIHdoZXJlIHRoZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZSBhcmd1bWVudCBpcyBhdXRvLWdlbmVyYXRlZCB0byB0aGUgbmV3XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkIG9mIHRoZSB0cmFuc2NsdWRlZCBwYXJlbnQgc2NvcGUuXG4gICAgICogQHBhcmFtIHtKUUxpdGV9IGpxQ29sbGVjdGlvbiBJZiB3ZSBhcmUgd29ya2luZyBvbiB0aGUgcm9vdCBvZiB0aGUgY29tcGlsZSB0cmVlIHRoZW4gdGhpc1xuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnQgaGFzIHRoZSByb290IGpxTGl0ZSBhcnJheSBzbyB0aGF0IHdlIGNhbiByZXBsYWNlIG5vZGVzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbiBpdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdD19IG9yaWdpbmFsUmVwbGFjZURpcmVjdGl2ZSBBbiBvcHRpb25hbCBkaXJlY3RpdmUgdGhhdCB3aWxsIGJlIGlnbm9yZWQgd2hlblxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBpbGluZyB0aGUgdHJhbnNjbHVzaW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXkuPEZ1bmN0aW9uPn0gcHJlTGlua0Zuc1xuICAgICAqIEBwYXJhbSB7QXJyYXkuPEZ1bmN0aW9uPn0gcG9zdExpbmtGbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJldmlvdXNDb21waWxlQ29udGV4dCBDb250ZXh0IHVzZWQgZm9yIHByZXZpb3VzIGNvbXBpbGF0aW9uIG9mIHRoZSBjdXJyZW50XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gbGlua0ZuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXBwbHlEaXJlY3RpdmVzVG9Ob2RlKGRpcmVjdGl2ZXMsIGNvbXBpbGVOb2RlLCB0ZW1wbGF0ZUF0dHJzLCB0cmFuc2NsdWRlRm4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpxQ29sbGVjdGlvbiwgb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCkge1xuICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQgfHwge307XG5cbiAgICAgIHZhciB0ZXJtaW5hbFByaW9yaXR5ID0gLU51bWJlci5NQVhfVkFMVUUsXG4gICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5ld1Njb3BlRGlyZWN0aXZlLFxuICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzID0gcHJldmlvdXNDb21waWxlQ29udGV4dC5jb250cm9sbGVyRGlyZWN0aXZlcyxcbiAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPSBwcmV2aW91c0NvbXBpbGVDb250ZXh0Lm5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQudGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgICAgICAgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQubm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZSxcbiAgICAgICAgICBoYXNUcmFuc2NsdWRlRGlyZWN0aXZlID0gZmFsc2UsXG4gICAgICAgICAgaGFzVGVtcGxhdGUgPSBmYWxzZSxcbiAgICAgICAgICBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA9IHByZXZpb3VzQ29tcGlsZUNvbnRleHQuaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUsXG4gICAgICAgICAgJGNvbXBpbGVOb2RlID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQgPSBqcUxpdGUoY29tcGlsZU5vZGUpLFxuICAgICAgICAgIGRpcmVjdGl2ZSxcbiAgICAgICAgICBkaXJlY3RpdmVOYW1lLFxuICAgICAgICAgICR0ZW1wbGF0ZSxcbiAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gb3JpZ2luYWxSZXBsYWNlRGlyZWN0aXZlLFxuICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuID0gdHJhbnNjbHVkZUZuLFxuICAgICAgICAgIGxpbmtGbixcbiAgICAgICAgICBkaWRTY2FuRm9yTXVsdGlwbGVUcmFuc2NsdXNpb24gPSBmYWxzZSxcbiAgICAgICAgICBtaWdodEhhdmVNdWx0aXBsZVRyYW5zY2x1c2lvbkVycm9yID0gZmFsc2UsXG4gICAgICAgICAgZGlyZWN0aXZlVmFsdWU7XG5cbiAgICAgIC8vIGV4ZWN1dGVzIGFsbCBkaXJlY3RpdmVzIG9uIHRoZSBjdXJyZW50IGVsZW1lbnRcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBkaXJlY3RpdmUgPSBkaXJlY3RpdmVzW2ldO1xuICAgICAgICB2YXIgYXR0clN0YXJ0ID0gZGlyZWN0aXZlLiQkc3RhcnQ7XG4gICAgICAgIHZhciBhdHRyRW5kID0gZGlyZWN0aXZlLiQkZW5kO1xuXG4gICAgICAgIC8vIGNvbGxlY3QgbXVsdGlibG9jayBzZWN0aW9uc1xuICAgICAgICBpZiAoYXR0clN0YXJ0KSB7XG4gICAgICAgICAgJGNvbXBpbGVOb2RlID0gZ3JvdXBTY2FuKGNvbXBpbGVOb2RlLCBhdHRyU3RhcnQsIGF0dHJFbmQpO1xuICAgICAgICB9XG4gICAgICAgICR0ZW1wbGF0ZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAodGVybWluYWxQcmlvcml0eSA+IGRpcmVjdGl2ZS5wcmlvcml0eSkge1xuICAgICAgICAgIGJyZWFrOyAvLyBwcmV2ZW50IGZ1cnRoZXIgcHJvY2Vzc2luZyBvZiBkaXJlY3RpdmVzXG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS5zY29wZTtcblxuICAgICAgICBpZiAoZGlyZWN0aXZlVmFsdWUpIHtcblxuICAgICAgICAgIC8vIHNraXAgdGhlIGNoZWNrIGZvciBkaXJlY3RpdmVzIHdpdGggYXN5bmMgdGVtcGxhdGVzLCB3ZSdsbCBjaGVjayB0aGUgZGVyaXZlZCBzeW5jXG4gICAgICAgICAgLy8gZGlyZWN0aXZlIHdoZW4gdGhlIHRlbXBsYXRlIGFycml2ZXNcbiAgICAgICAgICBpZiAoIWRpcmVjdGl2ZS50ZW1wbGF0ZVVybCkge1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGRpcmVjdGl2ZVZhbHVlKSkge1xuICAgICAgICAgICAgICAvLyBUaGlzIGRpcmVjdGl2ZSBpcyB0cnlpbmcgdG8gYWRkIGFuIGlzb2xhdGVkIHNjb3BlLlxuICAgICAgICAgICAgICAvLyBDaGVjayB0aGF0IHRoZXJlIGlzIG5vIHNjb3BlIG9mIGFueSBraW5kIGFscmVhZHlcbiAgICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ25ldy9pc29sYXRlZCBzY29wZScsIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fCBuZXdTY29wZURpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBUaGlzIGRpcmVjdGl2ZSBpcyB0cnlpbmcgdG8gYWRkIGEgY2hpbGQgc2NvcGUuXG4gICAgICAgICAgICAgIC8vIENoZWNrIHRoYXQgdGhlcmUgaXMgbm8gaXNvbGF0ZWQgc2NvcGUgYWxyZWFkeVxuICAgICAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgnbmV3L2lzb2xhdGVkIHNjb3BlJywgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLCBkaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV3U2NvcGVEaXJlY3RpdmUgPSBuZXdTY29wZURpcmVjdGl2ZSB8fCBkaXJlY3RpdmU7XG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlLm5hbWU7XG5cbiAgICAgICAgLy8gSWYgd2UgZW5jb3VudGVyIGEgY29uZGl0aW9uIHRoYXQgY2FuIHJlc3VsdCBpbiB0cmFuc2NsdXNpb24gb24gdGhlIGRpcmVjdGl2ZSxcbiAgICAgICAgLy8gdGhlbiBzY2FuIGFoZWFkIGluIHRoZSByZW1haW5pbmcgZGlyZWN0aXZlcyBmb3Igb3RoZXJzIHRoYXQgbWF5IGNhdXNlIGEgbXVsdGlwbGVcbiAgICAgICAgLy8gdHJhbnNjbHVzaW9uIGVycm9yIHRvIGJlIHRocm93biBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uIHByb2Nlc3MuICBJZiBhIG1hdGNoaW5nIGRpcmVjdGl2ZVxuICAgICAgICAvLyBpcyBmb3VuZCwgdGhlbiB3ZSBrbm93IHRoYXQgd2hlbiB3ZSBlbmNvdW50ZXIgYSB0cmFuc2NsdWRlZCBkaXJlY3RpdmUsIHdlIG5lZWQgdG8gZWFnZXJseVxuICAgICAgICAvLyBjb21waWxlIHRoZSBgdHJhbnNjbHVkZWAgZnVuY3Rpb24gcmF0aGVyIHRoYW4gZG9pbmcgaXQgbGF6aWx5IGluIG9yZGVyIHRvIHRocm93XG4gICAgICAgIC8vIGV4Y2VwdGlvbnMgYXQgdGhlIGNvcnJlY3QgdGltZVxuICAgICAgICBpZiAoIWRpZFNjYW5Gb3JNdWx0aXBsZVRyYW5zY2x1c2lvbiAmJiAoKGRpcmVjdGl2ZS5yZXBsYWNlICYmIChkaXJlY3RpdmUudGVtcGxhdGVVcmwgfHwgZGlyZWN0aXZlLnRlbXBsYXRlKSlcbiAgICAgICAgICAgIHx8IChkaXJlY3RpdmUudHJhbnNjbHVkZSAmJiAhZGlyZWN0aXZlLiQkdGxiKSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2FuZGlkYXRlRGlyZWN0aXZlO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc2Nhbm5pbmdJbmRleCA9IGkgKyAxOyAoY2FuZGlkYXRlRGlyZWN0aXZlID0gZGlyZWN0aXZlc1tzY2FubmluZ0luZGV4KytdKTspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKChjYW5kaWRhdGVEaXJlY3RpdmUudHJhbnNjbHVkZSAmJiAhY2FuZGlkYXRlRGlyZWN0aXZlLiQkdGxiKVxuICAgICAgICAgICAgICAgICAgICAgICAgfHwgKGNhbmRpZGF0ZURpcmVjdGl2ZS5yZXBsYWNlICYmIChjYW5kaWRhdGVEaXJlY3RpdmUudGVtcGxhdGVVcmwgfHwgY2FuZGlkYXRlRGlyZWN0aXZlLnRlbXBsYXRlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pZ2h0SGF2ZU11bHRpcGxlVHJhbnNjbHVzaW9uRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkaWRTY2FuRm9yTXVsdGlwbGVUcmFuc2NsdXNpb24gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkaXJlY3RpdmUudGVtcGxhdGVVcmwgJiYgZGlyZWN0aXZlLmNvbnRyb2xsZXIpIHtcbiAgICAgICAgICBjb250cm9sbGVyRGlyZWN0aXZlcyA9IGNvbnRyb2xsZXJEaXJlY3RpdmVzIHx8IGNyZWF0ZU1hcCgpO1xuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCdcXCcnICsgZGlyZWN0aXZlTmFtZSArICdcXCcgY29udHJvbGxlcicsXG4gICAgICAgICAgICAgIGNvbnRyb2xsZXJEaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0gPSBkaXJlY3RpdmU7XG4gICAgICAgIH1cblxuICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRpcmVjdGl2ZS50cmFuc2NsdWRlO1xuXG4gICAgICAgIGlmIChkaXJlY3RpdmVWYWx1ZSkge1xuICAgICAgICAgIGhhc1RyYW5zY2x1ZGVEaXJlY3RpdmUgPSB0cnVlO1xuXG4gICAgICAgICAgLy8gU3BlY2lhbCBjYXNlIG5nSWYgYW5kIG5nUmVwZWF0IHNvIHRoYXQgd2UgZG9uJ3QgY29tcGxhaW4gYWJvdXQgZHVwbGljYXRlIHRyYW5zY2x1c2lvbi5cbiAgICAgICAgICAvLyBUaGlzIG9wdGlvbiBzaG91bGQgb25seSBiZSB1c2VkIGJ5IGRpcmVjdGl2ZXMgdGhhdCBrbm93IGhvdyB0byBzYWZlbHkgaGFuZGxlIGVsZW1lbnQgdHJhbnNjbHVzaW9uLFxuICAgICAgICAgIC8vIHdoZXJlIHRoZSB0cmFuc2NsdWRlZCBub2RlcyBhcmUgYWRkZWQgb3IgcmVwbGFjZWQgYWZ0ZXIgbGlua2luZy5cbiAgICAgICAgICBpZiAoIWRpcmVjdGl2ZS4kJHRsYikge1xuICAgICAgICAgICAgYXNzZXJ0Tm9EdXBsaWNhdGUoJ3RyYW5zY2x1c2lvbicsIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUsIGRpcmVjdGl2ZSwgJGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZVZhbHVlID09PSAnZWxlbWVudCcpIHtcbiAgICAgICAgICAgIGhhc0VsZW1lbnRUcmFuc2NsdWRlRGlyZWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHRlcm1pbmFsUHJpb3JpdHkgPSBkaXJlY3RpdmUucHJpb3JpdHk7XG4gICAgICAgICAgICAkdGVtcGxhdGUgPSAkY29tcGlsZU5vZGU7XG4gICAgICAgICAgICAkY29tcGlsZU5vZGUgPSB0ZW1wbGF0ZUF0dHJzLiQkZWxlbWVudCA9XG4gICAgICAgICAgICAgICAganFMaXRlKGNvbXBpbGUuJCRjcmVhdGVDb21tZW50KGRpcmVjdGl2ZU5hbWUsIHRlbXBsYXRlQXR0cnNbZGlyZWN0aXZlTmFtZV0pKTtcbiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gJGNvbXBpbGVOb2RlWzBdO1xuICAgICAgICAgICAgcmVwbGFjZVdpdGgoanFDb2xsZWN0aW9uLCBzbGljZUFyZ3MoJHRlbXBsYXRlKSwgY29tcGlsZU5vZGUpO1xuXG4gICAgICAgICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPCA1MFxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTQwNDFcblxuICAgICAgICAgICAgLy8gSW4gdGhlIHZlcnNpb25zIG9mIFY4IHByaW9yIHRvIENocm9tZSA1MCwgdGhlIGRvY3VtZW50IGZyYWdtZW50IHRoYXQgaXMgY3JlYXRlZFxuICAgICAgICAgICAgLy8gaW4gdGhlIGByZXBsYWNlV2l0aGAgZnVuY3Rpb24gaXMgaW1wcm9wZXJseSBnYXJiYWdlIGNvbGxlY3RlZCBkZXNwaXRlIHN0aWxsXG4gICAgICAgICAgICAvLyBiZWluZyByZWZlcmVuY2VkIGJ5IHRoZSBgcGFyZW50Tm9kZWAgcHJvcGVydHkgb2YgYWxsIG9mIHRoZSBjaGlsZCBub2Rlcy4gIEJ5IGFkZGluZ1xuICAgICAgICAgICAgLy8gYSByZWZlcmVuY2UgdG8gdGhlIGZyYWdtZW50IHZpYSBhIGRpZmZlcmVudCBwcm9wZXJ0eSwgd2UgY2FuIGF2b2lkIHRoYXQgaW5jb3JyZWN0XG4gICAgICAgICAgICAvLyBiZWhhdmlvci5cbiAgICAgICAgICAgIC8vIFRPRE86IHJlbW92ZSB0aGlzIGxpbmUgYWZ0ZXIgQ2hyb21lIDUwIGhhcyBiZWVuIHJlbGVhc2VkXG4gICAgICAgICAgICAkdGVtcGxhdGVbMF0uJCRwYXJlbnROb2RlID0gJHRlbXBsYXRlWzBdLnBhcmVudE5vZGU7XG5cbiAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuID0gY29tcGlsYXRpb25HZW5lcmF0b3IobWlnaHRIYXZlTXVsdGlwbGVUcmFuc2NsdXNpb25FcnJvciwgJHRlbXBsYXRlLCB0cmFuc2NsdWRlRm4sIHRlcm1pbmFsUHJpb3JpdHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZURpcmVjdGl2ZSAmJiByZXBsYWNlRGlyZWN0aXZlLm5hbWUsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIERvbid0IHBhc3MgaW46XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAtIGNvbnRyb2xsZXJEaXJlY3RpdmVzIC0gb3RoZXJ3aXNlIHdlJ2xsIGNyZWF0ZSBkdXBsaWNhdGVzIGNvbnRyb2xsZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAtIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSBvciB0ZW1wbGF0ZURpcmVjdGl2ZSAtIGNvbWJpbmluZyB0ZW1wbGF0ZXMgd2l0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBlbGVtZW50IHRyYW5zY2x1c2lvbiBkb2Vzbid0IG1ha2Ugc2Vuc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCBvbmx5IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmUgc28gdGhhdCB3ZSBwcmV2ZW50IHB1dHRpbmcgdHJhbnNjbHVzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvbiB0aGUgc2FtZSBlbGVtZW50IG1vcmUgdGhhbiBvbmNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZTogbm9uVGxiVHJhbnNjbHVkZURpcmVjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIHZhciBzbG90cyA9IGNyZWF0ZU1hcCgpO1xuXG4gICAgICAgICAgICBpZiAoIWlzT2JqZWN0KGRpcmVjdGl2ZVZhbHVlKSkge1xuICAgICAgICAgICAgICAkdGVtcGxhdGUgPSBqcUxpdGUoanFMaXRlQ2xvbmUoY29tcGlsZU5vZGUpKS5jb250ZW50cygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAvLyBXZSBoYXZlIHRyYW5zY2x1c2lvbiBzbG90cyxcbiAgICAgICAgICAgICAgLy8gY29sbGVjdCB0aGVtIHVwLCBjb21waWxlIHRoZW0gYW5kIHN0b3JlIHRoZWlyIHRyYW5zY2x1c2lvbiBmdW5jdGlvbnNcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gW107XG5cbiAgICAgICAgICAgICAgdmFyIHNsb3RNYXAgPSBjcmVhdGVNYXAoKTtcbiAgICAgICAgICAgICAgdmFyIGZpbGxlZFNsb3RzID0gY3JlYXRlTWFwKCk7XG5cbiAgICAgICAgICAgICAgLy8gUGFyc2UgdGhlIGVsZW1lbnQgc2VsZWN0b3JzXG4gICAgICAgICAgICAgIGZvckVhY2goZGlyZWN0aXZlVmFsdWUsIGZ1bmN0aW9uKGVsZW1lbnRTZWxlY3Rvciwgc2xvdE5hbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBhbiBlbGVtZW50IHNlbGVjdG9yIHN0YXJ0cyB3aXRoIGEgPyB0aGVuIGl0IGlzIG9wdGlvbmFsXG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbmFsID0gKGVsZW1lbnRTZWxlY3Rvci5jaGFyQXQoMCkgPT09ICc/Jyk7XG4gICAgICAgICAgICAgICAgZWxlbWVudFNlbGVjdG9yID0gb3B0aW9uYWwgPyBlbGVtZW50U2VsZWN0b3Iuc3Vic3RyaW5nKDEpIDogZWxlbWVudFNlbGVjdG9yO1xuXG4gICAgICAgICAgICAgICAgc2xvdE1hcFtlbGVtZW50U2VsZWN0b3JdID0gc2xvdE5hbWU7XG5cbiAgICAgICAgICAgICAgICAvLyBXZSBleHBsaWNpdGx5IGFzc2lnbiBgbnVsbGAgc2luY2UgdGhpcyBpbXBsaWVzIHRoYXQgYSBzbG90IHdhcyBkZWZpbmVkIGJ1dCBub3QgZmlsbGVkLlxuICAgICAgICAgICAgICAgIC8vIExhdGVyIHdoZW4gY2FsbGluZyBib3VuZFRyYW5zY2x1c2lvbiBmdW5jdGlvbnMgd2l0aCBhIHNsb3QgbmFtZSB3ZSBvbmx5IGVycm9yIGlmIHRoZVxuICAgICAgICAgICAgICAgIC8vIHNsb3QgaXMgYHVuZGVmaW5lZGBcbiAgICAgICAgICAgICAgICBzbG90c1tzbG90TmFtZV0gPSBudWxsO1xuXG4gICAgICAgICAgICAgICAgLy8gZmlsbGVkU2xvdHMgY29udGFpbnMgYHRydWVgIGZvciBhbGwgc2xvdHMgdGhhdCBhcmUgZWl0aGVyIG9wdGlvbmFsIG9yIGhhdmUgYmVlblxuICAgICAgICAgICAgICAgIC8vIGZpbGxlZC4gVGhpcyBpcyB1c2VkIHRvIGNoZWNrIHRoYXQgd2UgaGF2ZSBub3QgbWlzc2VkIGFueSByZXF1aXJlZCBzbG90c1xuICAgICAgICAgICAgICAgIGZpbGxlZFNsb3RzW3Nsb3ROYW1lXSA9IG9wdGlvbmFsO1xuICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAvLyBBZGQgdGhlIG1hdGNoaW5nIGVsZW1lbnRzIGludG8gdGhlaXIgc2xvdFxuICAgICAgICAgICAgICBmb3JFYWNoKCRjb21waWxlTm9kZS5jb250ZW50cygpLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNsb3ROYW1lID0gc2xvdE1hcFtkaXJlY3RpdmVOb3JtYWxpemUobm9kZU5hbWVfKG5vZGUpKV07XG4gICAgICAgICAgICAgICAgaWYgKHNsb3ROYW1lKSB7XG4gICAgICAgICAgICAgICAgICBmaWxsZWRTbG90c1tzbG90TmFtZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgc2xvdHNbc2xvdE5hbWVdID0gc2xvdHNbc2xvdE5hbWVdIHx8IFtdO1xuICAgICAgICAgICAgICAgICAgc2xvdHNbc2xvdE5hbWVdLnB1c2gobm9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICR0ZW1wbGF0ZS5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIHJlcXVpcmVkIHNsb3RzIHRoYXQgd2VyZSBub3QgZmlsbGVkXG4gICAgICAgICAgICAgIGZvckVhY2goZmlsbGVkU2xvdHMsIGZ1bmN0aW9uKGZpbGxlZCwgc2xvdE5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWZpbGxlZCkge1xuICAgICAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3JlcXNsb3QnLCAnUmVxdWlyZWQgdHJhbnNjbHVzaW9uIHNsb3QgYHswfWAgd2FzIG5vdCBmaWxsZWQuJywgc2xvdE5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgZm9yICh2YXIgc2xvdE5hbWUgaW4gc2xvdHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xvdHNbc2xvdE5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAvLyBPbmx5IGRlZmluZSBhIHRyYW5zY2x1c2lvbiBmdW5jdGlvbiBpZiB0aGUgc2xvdCB3YXMgZmlsbGVkXG4gICAgICAgICAgICAgICAgICBzbG90c1tzbG90TmFtZV0gPSBjb21waWxhdGlvbkdlbmVyYXRvcihtaWdodEhhdmVNdWx0aXBsZVRyYW5zY2x1c2lvbkVycm9yLCBzbG90c1tzbG90TmFtZV0sIHRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRjb21waWxlTm9kZS5lbXB0eSgpOyAvLyBjbGVhciBjb250ZW50c1xuICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4gPSBjb21waWxhdGlvbkdlbmVyYXRvcihtaWdodEhhdmVNdWx0aXBsZVRyYW5zY2x1c2lvbkVycm9yLCAkdGVtcGxhdGUsIHRyYW5zY2x1ZGVGbiwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCwgeyBuZWVkc05ld1Njb3BlOiBkaXJlY3RpdmUuJCRpc29sYXRlU2NvcGUgfHwgZGlyZWN0aXZlLiQkbmV3U2NvcGV9KTtcbiAgICAgICAgICAgIGNoaWxkVHJhbnNjbHVkZUZuLiQkc2xvdHMgPSBzbG90cztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGlyZWN0aXZlLnRlbXBsYXRlKSB7XG4gICAgICAgICAgaGFzVGVtcGxhdGUgPSB0cnVlO1xuICAgICAgICAgIGFzc2VydE5vRHVwbGljYXRlKCd0ZW1wbGF0ZScsIHRlbXBsYXRlRGlyZWN0aXZlLCBkaXJlY3RpdmUsICRjb21waWxlTm9kZSk7XG4gICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmUgPSBkaXJlY3RpdmU7XG5cbiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IChpc0Z1bmN0aW9uKGRpcmVjdGl2ZS50ZW1wbGF0ZSkpXG4gICAgICAgICAgICAgID8gZGlyZWN0aXZlLnRlbXBsYXRlKCRjb21waWxlTm9kZSwgdGVtcGxhdGVBdHRycylcbiAgICAgICAgICAgICAgOiBkaXJlY3RpdmUudGVtcGxhdGU7XG5cbiAgICAgICAgICBkaXJlY3RpdmVWYWx1ZSA9IGRlbm9ybWFsaXplVGVtcGxhdGUoZGlyZWN0aXZlVmFsdWUpO1xuXG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZS5yZXBsYWNlKSB7XG4gICAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuICAgICAgICAgICAgaWYgKGpxTGl0ZUlzVGV4dE5vZGUoZGlyZWN0aXZlVmFsdWUpKSB7XG4gICAgICAgICAgICAgICR0ZW1wbGF0ZSA9IFtdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgJHRlbXBsYXRlID0gcmVtb3ZlQ29tbWVudHMod3JhcFRlbXBsYXRlKGRpcmVjdGl2ZS50ZW1wbGF0ZU5hbWVzcGFjZSwgdHJpbShkaXJlY3RpdmVWYWx1ZSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbXBpbGVOb2RlID0gJHRlbXBsYXRlWzBdO1xuXG4gICAgICAgICAgICBpZiAoJHRlbXBsYXRlLmxlbmd0aCAhPT0gMSB8fCBjb21waWxlTm9kZS5ub2RlVHlwZSAhPT0gTk9ERV9UWVBFX0VMRU1FTlQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ3RwbHJ0JyxcbiAgICAgICAgICAgICAgICAgICdUZW1wbGF0ZSBmb3IgZGlyZWN0aXZlIFxcJ3swfVxcJyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgcm9vdCBlbGVtZW50LiB7MX0nLFxuICAgICAgICAgICAgICAgICAgZGlyZWN0aXZlTmFtZSwgJycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXBsYWNlV2l0aChqcUNvbGxlY3Rpb24sICRjb21waWxlTm9kZSwgY29tcGlsZU5vZGUpO1xuXG4gICAgICAgICAgICB2YXIgbmV3VGVtcGxhdGVBdHRycyA9IHskYXR0cjoge319O1xuXG4gICAgICAgICAgICAvLyBjb21iaW5lIGRpcmVjdGl2ZXMgZnJvbSB0aGUgb3JpZ2luYWwgbm9kZSBhbmQgZnJvbSB0aGUgdGVtcGxhdGU6XG4gICAgICAgICAgICAvLyAtIHRha2UgdGhlIGFycmF5IG9mIGRpcmVjdGl2ZXMgZm9yIHRoaXMgZWxlbWVudFxuICAgICAgICAgICAgLy8gLSBzcGxpdCBpdCBpbnRvIHR3byBwYXJ0cywgdGhvc2UgdGhhdCBhbHJlYWR5IGFwcGxpZWQgKHByb2Nlc3NlZCkgYW5kIHRob3NlIHRoYXQgd2VyZW4ndCAodW5wcm9jZXNzZWQpXG4gICAgICAgICAgICAvLyAtIGNvbGxlY3QgZGlyZWN0aXZlcyBmcm9tIHRoZSB0ZW1wbGF0ZSBhbmQgc29ydCB0aGVtIGJ5IHByaW9yaXR5XG4gICAgICAgICAgICAvLyAtIGNvbWJpbmUgZGlyZWN0aXZlcyBhczogcHJvY2Vzc2VkICsgdGVtcGxhdGUgKyB1bnByb2Nlc3NlZFxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlRGlyZWN0aXZlcyA9IGNvbGxlY3REaXJlY3RpdmVzKGNvbXBpbGVOb2RlLCBbXSwgbmV3VGVtcGxhdGVBdHRycyk7XG4gICAgICAgICAgICB2YXIgdW5wcm9jZXNzZWREaXJlY3RpdmVzID0gZGlyZWN0aXZlcy5zcGxpY2UoaSArIDEsIGRpcmVjdGl2ZXMubGVuZ3RoIC0gKGkgKyAxKSk7XG5cbiAgICAgICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUgfHwgbmV3U2NvcGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgICAgLy8gVGhlIG9yaWdpbmFsIGRpcmVjdGl2ZSBjYXVzZWQgdGhlIGN1cnJlbnQgZWxlbWVudCB0byBiZSByZXBsYWNlZCBidXQgdGhpcyBlbGVtZW50XG4gICAgICAgICAgICAgIC8vIGFsc28gbmVlZHMgdG8gaGF2ZSBhIG5ldyBzY29wZSwgc28gd2UgbmVlZCB0byB0ZWxsIHRoZSB0ZW1wbGF0ZSBkaXJlY3RpdmVzXG4gICAgICAgICAgICAgIC8vIHRoYXQgdGhleSB3b3VsZCBuZWVkIHRvIGdldCB0aGVpciBzY29wZSBmcm9tIGZ1cnRoZXIgdXAsIGlmIHRoZXkgcmVxdWlyZSB0cmFuc2NsdXNpb25cbiAgICAgICAgICAgICAgbWFya0RpcmVjdGl2ZVNjb3BlKHRlbXBsYXRlRGlyZWN0aXZlcywgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLCBuZXdTY29wZURpcmVjdGl2ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXJlY3RpdmVzID0gZGlyZWN0aXZlcy5jb25jYXQodGVtcGxhdGVEaXJlY3RpdmVzKS5jb25jYXQodW5wcm9jZXNzZWREaXJlY3RpdmVzKTtcbiAgICAgICAgICAgIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKHRlbXBsYXRlQXR0cnMsIG5ld1RlbXBsYXRlQXR0cnMpO1xuXG4gICAgICAgICAgICBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkY29tcGlsZU5vZGUuaHRtbChkaXJlY3RpdmVWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZW1wbGF0ZVVybCkge1xuICAgICAgICAgIGhhc1RlbXBsYXRlID0gdHJ1ZTtcbiAgICAgICAgICBhc3NlcnROb0R1cGxpY2F0ZSgndGVtcGxhdGUnLCB0ZW1wbGF0ZURpcmVjdGl2ZSwgZGlyZWN0aXZlLCAkY29tcGlsZU5vZGUpO1xuICAgICAgICAgIHRlbXBsYXRlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuXG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZS5yZXBsYWNlKSB7XG4gICAgICAgICAgICByZXBsYWNlRGlyZWN0aXZlID0gZGlyZWN0aXZlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1mdW5jLWFzc2lnblxuICAgICAgICAgIG5vZGVMaW5rRm4gPSBjb21waWxlVGVtcGxhdGVVcmwoZGlyZWN0aXZlcy5zcGxpY2UoaSwgZGlyZWN0aXZlcy5sZW5ndGggLSBpKSwgJGNvbXBpbGVOb2RlLFxuICAgICAgICAgICAgICB0ZW1wbGF0ZUF0dHJzLCBqcUNvbGxlY3Rpb24sIGhhc1RyYW5zY2x1ZGVEaXJlY3RpdmUgJiYgY2hpbGRUcmFuc2NsdWRlRm4sIHByZUxpbmtGbnMsIHBvc3RMaW5rRm5zLCB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlckRpcmVjdGl2ZXM6IGNvbnRyb2xsZXJEaXJlY3RpdmVzLFxuICAgICAgICAgICAgICAgIG5ld1Njb3BlRGlyZWN0aXZlOiAobmV3U2NvcGVEaXJlY3RpdmUgIT09IGRpcmVjdGl2ZSkgJiYgbmV3U2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlOiBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVEaXJlY3RpdmU6IHRlbXBsYXRlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmU6IG5vblRsYlRyYW5zY2x1ZGVEaXJlY3RpdmVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgaWkgPSBkaXJlY3RpdmVzLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3RpdmUuY29tcGlsZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsaW5rRm4gPSBkaXJlY3RpdmUuY29tcGlsZSgkY29tcGlsZU5vZGUsIHRlbXBsYXRlQXR0cnMsIGNoaWxkVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gZGlyZWN0aXZlLiQkb3JpZ2luYWxEaXJlY3RpdmUgfHwgZGlyZWN0aXZlO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlua0ZuKSkge1xuICAgICAgICAgICAgICBhZGRMaW5rRm5zKG51bGwsIGJpbmQoY29udGV4dCwgbGlua0ZuKSwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGlua0ZuKSB7XG4gICAgICAgICAgICAgIGFkZExpbmtGbnMoYmluZChjb250ZXh0LCBsaW5rRm4ucHJlKSwgYmluZChjb250ZXh0LCBsaW5rRm4ucG9zdCksIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSwgc3RhcnRpbmdUYWcoJGNvbXBpbGVOb2RlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRpcmVjdGl2ZS50ZXJtaW5hbCkge1xuICAgICAgICAgIG5vZGVMaW5rRm4udGVybWluYWwgPSB0cnVlO1xuICAgICAgICAgIHRlcm1pbmFsUHJpb3JpdHkgPSBNYXRoLm1heCh0ZXJtaW5hbFByaW9yaXR5LCBkaXJlY3RpdmUucHJpb3JpdHkpO1xuICAgICAgICB9XG5cbiAgICAgIH1cblxuICAgICAgbm9kZUxpbmtGbi5zY29wZSA9IG5ld1Njb3BlRGlyZWN0aXZlICYmIG5ld1Njb3BlRGlyZWN0aXZlLnNjb3BlID09PSB0cnVlO1xuICAgICAgbm9kZUxpbmtGbi50cmFuc2NsdWRlT25UaGlzRWxlbWVudCA9IGhhc1RyYW5zY2x1ZGVEaXJlY3RpdmU7XG4gICAgICBub2RlTGlua0ZuLnRlbXBsYXRlT25UaGlzRWxlbWVudCA9IGhhc1RlbXBsYXRlO1xuICAgICAgbm9kZUxpbmtGbi50cmFuc2NsdWRlID0gY2hpbGRUcmFuc2NsdWRlRm47XG5cbiAgICAgIHByZXZpb3VzQ29tcGlsZUNvbnRleHQuaGFzRWxlbWVudFRyYW5zY2x1ZGVEaXJlY3RpdmUgPSBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZTtcblxuICAgICAgLy8gbWlnaHQgYmUgbm9ybWFsIG9yIGRlbGF5ZWQgbm9kZUxpbmtGbiBkZXBlbmRpbmcgb24gaWYgdGVtcGxhdGVVcmwgaXMgcHJlc2VudFxuICAgICAgcmV0dXJuIG5vZGVMaW5rRm47XG5cbiAgICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgICAgIGZ1bmN0aW9uIGFkZExpbmtGbnMocHJlLCBwb3N0LCBhdHRyU3RhcnQsIGF0dHJFbmQpIHtcbiAgICAgICAgaWYgKHByZSkge1xuICAgICAgICAgIGlmIChhdHRyU3RhcnQpIHByZSA9IGdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyKHByZSwgYXR0clN0YXJ0LCBhdHRyRW5kKTtcbiAgICAgICAgICBwcmUucmVxdWlyZSA9IGRpcmVjdGl2ZS5yZXF1aXJlO1xuICAgICAgICAgIHByZS5kaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTmFtZTtcbiAgICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID09PSBkaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlKSB7XG4gICAgICAgICAgICBwcmUgPSBjbG9uZUFuZEFubm90YXRlRm4ocHJlLCB7aXNvbGF0ZVNjb3BlOiB0cnVlfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHByZUxpbmtGbnMucHVzaChwcmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb3N0KSB7XG4gICAgICAgICAgaWYgKGF0dHJTdGFydCkgcG9zdCA9IGdyb3VwRWxlbWVudHNMaW5rRm5XcmFwcGVyKHBvc3QsIGF0dHJTdGFydCwgYXR0ckVuZCk7XG4gICAgICAgICAgcG9zdC5yZXF1aXJlID0gZGlyZWN0aXZlLnJlcXVpcmU7XG4gICAgICAgICAgcG9zdC5kaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTmFtZTtcbiAgICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlID09PSBkaXJlY3RpdmUgfHwgZGlyZWN0aXZlLiQkaXNvbGF0ZVNjb3BlKSB7XG4gICAgICAgICAgICBwb3N0ID0gY2xvbmVBbmRBbm5vdGF0ZUZuKHBvc3QsIHtpc29sYXRlU2NvcGU6IHRydWV9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcG9zdExpbmtGbnMucHVzaChwb3N0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBub2RlTGlua0ZuKGNoaWxkTGlua0ZuLCBzY29wZSwgbGlua05vZGUsICRyb290RWxlbWVudCwgYm91bmRUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgdmFyIGksIGlpLCBsaW5rRm4sIGlzb2xhdGVTY29wZSwgY29udHJvbGxlclNjb3BlLCBlbGVtZW50Q29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbiwgJGVsZW1lbnQsXG4gICAgICAgICAgICBhdHRycywgc2NvcGVCaW5kaW5nSW5mbztcblxuICAgICAgICBpZiAoY29tcGlsZU5vZGUgPT09IGxpbmtOb2RlKSB7XG4gICAgICAgICAgYXR0cnMgPSB0ZW1wbGF0ZUF0dHJzO1xuICAgICAgICAgICRlbGVtZW50ID0gdGVtcGxhdGVBdHRycy4kJGVsZW1lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGVsZW1lbnQgPSBqcUxpdGUobGlua05vZGUpO1xuICAgICAgICAgIGF0dHJzID0gbmV3IEF0dHJpYnV0ZXMoJGVsZW1lbnQsIHRlbXBsYXRlQXR0cnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udHJvbGxlclNjb3BlID0gc2NvcGU7XG4gICAgICAgIGlmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpIHtcbiAgICAgICAgICBpc29sYXRlU2NvcGUgPSBzY29wZS4kbmV3KHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKG5ld1Njb3BlRGlyZWN0aXZlKSB7XG4gICAgICAgICAgY29udHJvbGxlclNjb3BlID0gc2NvcGUuJHBhcmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib3VuZFRyYW5zY2x1ZGVGbikge1xuICAgICAgICAgIC8vIHRyYWNrIGBib3VuZFRyYW5zY2x1ZGVGbmAgc28gaXQgY2FuIGJlIHVud3JhcHBlZCBpZiBgdHJhbnNjbHVkZUZuYFxuICAgICAgICAgIC8vIGlzIGxhdGVyIHBhc3NlZCBhcyBgcGFyZW50Qm91bmRUcmFuc2NsdWRlRm5gIHRvIGBwdWJsaWNMaW5rRm5gXG4gICAgICAgICAgdHJhbnNjbHVkZUZuID0gY29udHJvbGxlcnNCb3VuZFRyYW5zY2x1ZGU7XG4gICAgICAgICAgdHJhbnNjbHVkZUZuLiQkYm91bmRUcmFuc2NsdWRlID0gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgICAgICAgLy8gZXhwb3NlIHRoZSBzbG90cyBvbiB0aGUgYCR0cmFuc2NsdWRlYCBmdW5jdGlvblxuICAgICAgICAgIHRyYW5zY2x1ZGVGbi5pc1Nsb3RGaWxsZWQgPSBmdW5jdGlvbihzbG90TmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuICEhYm91bmRUcmFuc2NsdWRlRm4uJCRzbG90c1tzbG90TmFtZV07XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250cm9sbGVyRGlyZWN0aXZlcykge1xuICAgICAgICAgIGVsZW1lbnRDb250cm9sbGVycyA9IHNldHVwQ29udHJvbGxlcnMoJGVsZW1lbnQsIGF0dHJzLCB0cmFuc2NsdWRlRm4sIGNvbnRyb2xsZXJEaXJlY3RpdmVzLCBpc29sYXRlU2NvcGUsIHNjb3BlLCBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSkge1xuICAgICAgICAgIC8vIEluaXRpYWxpemUgaXNvbGF0ZSBzY29wZSBiaW5kaW5ncyBmb3IgbmV3IGlzb2xhdGUgc2NvcGUgZGlyZWN0aXZlLlxuICAgICAgICAgIGNvbXBpbGUuJCRhZGRTY29wZUluZm8oJGVsZW1lbnQsIGlzb2xhdGVTY29wZSwgdHJ1ZSwgISh0ZW1wbGF0ZURpcmVjdGl2ZSAmJiAodGVtcGxhdGVEaXJlY3RpdmUgPT09IG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZSB8fFxuICAgICAgICAgICAgICB0ZW1wbGF0ZURpcmVjdGl2ZSA9PT0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLiQkb3JpZ2luYWxEaXJlY3RpdmUpKSk7XG4gICAgICAgICAgY29tcGlsZS4kJGFkZFNjb3BlQ2xhc3MoJGVsZW1lbnQsIHRydWUpO1xuICAgICAgICAgIGlzb2xhdGVTY29wZS4kJGlzb2xhdGVCaW5kaW5ncyA9XG4gICAgICAgICAgICAgIG5ld0lzb2xhdGVTY29wZURpcmVjdGl2ZS4kJGlzb2xhdGVCaW5kaW5ncztcbiAgICAgICAgICBzY29wZUJpbmRpbmdJbmZvID0gaW5pdGlhbGl6ZURpcmVjdGl2ZUJpbmRpbmdzKHNjb3BlLCBhdHRycywgaXNvbGF0ZVNjb3BlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzb2xhdGVTY29wZS4kJGlzb2xhdGVCaW5kaW5ncyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUpO1xuICAgICAgICAgIGlmIChzY29wZUJpbmRpbmdJbmZvLnJlbW92ZVdhdGNoZXMpIHtcbiAgICAgICAgICAgIGlzb2xhdGVTY29wZS4kb24oJyRkZXN0cm95Jywgc2NvcGVCaW5kaW5nSW5mby5yZW1vdmVXYXRjaGVzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbml0aWFsaXplIGJpbmRUb0NvbnRyb2xsZXIgYmluZGluZ3NcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBlbGVtZW50Q29udHJvbGxlcnMpIHtcbiAgICAgICAgICB2YXIgY29udHJvbGxlckRpcmVjdGl2ZSA9IGNvbnRyb2xsZXJEaXJlY3RpdmVzW25hbWVdO1xuICAgICAgICAgIHZhciBjb250cm9sbGVyID0gZWxlbWVudENvbnRyb2xsZXJzW25hbWVdO1xuICAgICAgICAgIHZhciBiaW5kaW5ncyA9IGNvbnRyb2xsZXJEaXJlY3RpdmUuJCRiaW5kaW5ncy5iaW5kVG9Db250cm9sbGVyO1xuXG4gICAgICAgICAgaWYgKHByZUFzc2lnbkJpbmRpbmdzRW5hYmxlZCkge1xuICAgICAgICAgICAgaWYgKGJpbmRpbmdzKSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXIuYmluZGluZ0luZm8gPVxuICAgICAgICAgICAgICAgIGluaXRpYWxpemVEaXJlY3RpdmVCaW5kaW5ncyhjb250cm9sbGVyU2NvcGUsIGF0dHJzLCBjb250cm9sbGVyLmluc3RhbmNlLCBiaW5kaW5ncywgY29udHJvbGxlckRpcmVjdGl2ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb250cm9sbGVyLmJpbmRpbmdJbmZvID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjb250cm9sbGVyUmVzdWx0ID0gY29udHJvbGxlcigpO1xuICAgICAgICAgICAgaWYgKGNvbnRyb2xsZXJSZXN1bHQgIT09IGNvbnRyb2xsZXIuaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgLy8gSWYgdGhlIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgaGFzIGEgcmV0dXJuIHZhbHVlLCBvdmVyd3JpdGUgdGhlIGluc3RhbmNlXG4gICAgICAgICAgICAgIC8vIGZyb20gc2V0dXBDb250cm9sbGVyc1xuICAgICAgICAgICAgICBjb250cm9sbGVyLmluc3RhbmNlID0gY29udHJvbGxlclJlc3VsdDtcbiAgICAgICAgICAgICAgJGVsZW1lbnQuZGF0YSgnJCcgKyBjb250cm9sbGVyRGlyZWN0aXZlLm5hbWUgKyAnQ29udHJvbGxlcicsIGNvbnRyb2xsZXJSZXN1bHQpO1xuICAgICAgICAgICAgICBpZiAoY29udHJvbGxlci5iaW5kaW5nSW5mby5yZW1vdmVXYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5iaW5kaW5nSW5mby5yZW1vdmVXYXRjaGVzKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29udHJvbGxlci5iaW5kaW5nSW5mbyA9XG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6ZURpcmVjdGl2ZUJpbmRpbmdzKGNvbnRyb2xsZXJTY29wZSwgYXR0cnMsIGNvbnRyb2xsZXIuaW5zdGFuY2UsIGJpbmRpbmdzLCBjb250cm9sbGVyRGlyZWN0aXZlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udHJvbGxlci5pbnN0YW5jZSA9IGNvbnRyb2xsZXIoKTtcbiAgICAgICAgICAgICRlbGVtZW50LmRhdGEoJyQnICsgY29udHJvbGxlckRpcmVjdGl2ZS5uYW1lICsgJ0NvbnRyb2xsZXInLCBjb250cm9sbGVyLmluc3RhbmNlKTtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuYmluZGluZ0luZm8gPVxuICAgICAgICAgICAgICBpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3MoY29udHJvbGxlclNjb3BlLCBhdHRycywgY29udHJvbGxlci5pbnN0YW5jZSwgYmluZGluZ3MsIGNvbnRyb2xsZXJEaXJlY3RpdmUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJpbmQgdGhlIHJlcXVpcmVkIGNvbnRyb2xsZXJzIHRvIHRoZSBjb250cm9sbGVyLCBpZiBgcmVxdWlyZWAgaXMgYW4gb2JqZWN0IGFuZCBgYmluZFRvQ29udHJvbGxlcmAgaXMgdHJ1dGh5XG4gICAgICAgIGZvckVhY2goY29udHJvbGxlckRpcmVjdGl2ZXMsIGZ1bmN0aW9uKGNvbnRyb2xsZXJEaXJlY3RpdmUsIG5hbWUpIHtcbiAgICAgICAgICB2YXIgcmVxdWlyZSA9IGNvbnRyb2xsZXJEaXJlY3RpdmUucmVxdWlyZTtcbiAgICAgICAgICBpZiAoY29udHJvbGxlckRpcmVjdGl2ZS5iaW5kVG9Db250cm9sbGVyICYmICFpc0FycmF5KHJlcXVpcmUpICYmIGlzT2JqZWN0KHJlcXVpcmUpKSB7XG4gICAgICAgICAgICBleHRlbmQoZWxlbWVudENvbnRyb2xsZXJzW25hbWVdLmluc3RhbmNlLCBnZXRDb250cm9sbGVycyhuYW1lLCByZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBIYW5kbGUgdGhlIGluaXQgYW5kIGRlc3Ryb3kgbGlmZWN5Y2xlIGhvb2tzIG9uIGFsbCBjb250cm9sbGVycyB0aGF0IGhhdmUgdGhlbVxuICAgICAgICBmb3JFYWNoKGVsZW1lbnRDb250cm9sbGVycywgZnVuY3Rpb24oY29udHJvbGxlcikge1xuICAgICAgICAgIHZhciBjb250cm9sbGVySW5zdGFuY2UgPSBjb250cm9sbGVyLmluc3RhbmNlO1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRyb2xsZXJJbnN0YW5jZS4kb25DaGFuZ2VzKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY29udHJvbGxlckluc3RhbmNlLiRvbkNoYW5nZXMoY29udHJvbGxlci5iaW5kaW5nSW5mby5pbml0aWFsQ2hhbmdlcyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250cm9sbGVySW5zdGFuY2UuJG9uSW5pdCkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbnRyb2xsZXJJbnN0YW5jZS4kb25Jbml0KCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNGdW5jdGlvbihjb250cm9sbGVySW5zdGFuY2UuJGRvQ2hlY2spKSB7XG4gICAgICAgICAgICBjb250cm9sbGVyU2NvcGUuJHdhdGNoKGZ1bmN0aW9uKCkgeyBjb250cm9sbGVySW5zdGFuY2UuJGRvQ2hlY2soKTsgfSk7XG4gICAgICAgICAgICBjb250cm9sbGVySW5zdGFuY2UuJGRvQ2hlY2soKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24oY29udHJvbGxlckluc3RhbmNlLiRvbkRlc3Ryb3kpKSB7XG4gICAgICAgICAgICBjb250cm9sbGVyU2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uIGNhbGxPbkRlc3Ryb3lIb29rKCkge1xuICAgICAgICAgICAgICBjb250cm9sbGVySW5zdGFuY2UuJG9uRGVzdHJveSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBQUkVMSU5LSU5HXG4gICAgICAgIGZvciAoaSA9IDAsIGlpID0gcHJlTGlua0Zucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgbGlua0ZuID0gcHJlTGlua0Zuc1tpXTtcbiAgICAgICAgICBpbnZva2VMaW5rRm4obGlua0ZuLFxuICAgICAgICAgICAgICBsaW5rRm4uaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsXG4gICAgICAgICAgICAgICRlbGVtZW50LFxuICAgICAgICAgICAgICBhdHRycyxcbiAgICAgICAgICAgICAgbGlua0ZuLnJlcXVpcmUgJiYgZ2V0Q29udHJvbGxlcnMobGlua0ZuLmRpcmVjdGl2ZU5hbWUsIGxpbmtGbi5yZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSxcbiAgICAgICAgICAgICAgdHJhbnNjbHVkZUZuXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJFQ1VSU0lPTlxuICAgICAgICAvLyBXZSBvbmx5IHBhc3MgdGhlIGlzb2xhdGUgc2NvcGUsIGlmIHRoZSBpc29sYXRlIGRpcmVjdGl2ZSBoYXMgYSB0ZW1wbGF0ZSxcbiAgICAgICAgLy8gb3RoZXJ3aXNlIHRoZSBjaGlsZCBlbGVtZW50cyBkbyBub3QgYmVsb25nIHRvIHRoZSBpc29sYXRlIGRpcmVjdGl2ZS5cbiAgICAgICAgdmFyIHNjb3BlVG9DaGlsZCA9IHNjb3BlO1xuICAgICAgICBpZiAobmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlICYmIChuZXdJc29sYXRlU2NvcGVEaXJlY3RpdmUudGVtcGxhdGUgfHwgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlLnRlbXBsYXRlVXJsID09PSBudWxsKSkge1xuICAgICAgICAgIHNjb3BlVG9DaGlsZCA9IGlzb2xhdGVTY29wZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hpbGRMaW5rRm4pIHtcbiAgICAgICAgICBjaGlsZExpbmtGbihzY29wZVRvQ2hpbGQsIGxpbmtOb2RlLmNoaWxkTm9kZXMsIHVuZGVmaW5lZCwgYm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUE9TVExJTktJTkdcbiAgICAgICAgZm9yIChpID0gcG9zdExpbmtGbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICBsaW5rRm4gPSBwb3N0TGlua0Zuc1tpXTtcbiAgICAgICAgICBpbnZva2VMaW5rRm4obGlua0ZuLFxuICAgICAgICAgICAgICBsaW5rRm4uaXNvbGF0ZVNjb3BlID8gaXNvbGF0ZVNjb3BlIDogc2NvcGUsXG4gICAgICAgICAgICAgICRlbGVtZW50LFxuICAgICAgICAgICAgICBhdHRycyxcbiAgICAgICAgICAgICAgbGlua0ZuLnJlcXVpcmUgJiYgZ2V0Q29udHJvbGxlcnMobGlua0ZuLmRpcmVjdGl2ZU5hbWUsIGxpbmtGbi5yZXF1aXJlLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKSxcbiAgICAgICAgICAgICAgdHJhbnNjbHVkZUZuXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyaWdnZXIgJHBvc3RMaW5rIGxpZmVjeWNsZSBob29rc1xuICAgICAgICBmb3JFYWNoKGVsZW1lbnRDb250cm9sbGVycywgZnVuY3Rpb24oY29udHJvbGxlcikge1xuICAgICAgICAgIHZhciBjb250cm9sbGVySW5zdGFuY2UgPSBjb250cm9sbGVyLmluc3RhbmNlO1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGNvbnRyb2xsZXJJbnN0YW5jZS4kcG9zdExpbmspKSB7XG4gICAgICAgICAgICBjb250cm9sbGVySW5zdGFuY2UuJHBvc3RMaW5rKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBUaGlzIGlzIHRoZSBmdW5jdGlvbiB0aGF0IGlzIGluamVjdGVkIGFzIGAkdHJhbnNjbHVkZWAuXG4gICAgICAgIC8vIE5vdGU6IGFsbCBhcmd1bWVudHMgYXJlIG9wdGlvbmFsIVxuICAgICAgICBmdW5jdGlvbiBjb250cm9sbGVyc0JvdW5kVHJhbnNjbHVkZShzY29wZSwgY2xvbmVBdHRhY2hGbiwgZnV0dXJlUGFyZW50RWxlbWVudCwgc2xvdE5hbWUpIHtcbiAgICAgICAgICB2YXIgdHJhbnNjbHVkZUNvbnRyb2xsZXJzO1xuICAgICAgICAgIC8vIE5vIHNjb3BlIHBhc3NlZCBpbjpcbiAgICAgICAgICBpZiAoIWlzU2NvcGUoc2NvcGUpKSB7XG4gICAgICAgICAgICBzbG90TmFtZSA9IGZ1dHVyZVBhcmVudEVsZW1lbnQ7XG4gICAgICAgICAgICBmdXR1cmVQYXJlbnRFbGVtZW50ID0gY2xvbmVBdHRhY2hGbjtcbiAgICAgICAgICAgIGNsb25lQXR0YWNoRm4gPSBzY29wZTtcbiAgICAgICAgICAgIHNjb3BlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSkge1xuICAgICAgICAgICAgdHJhbnNjbHVkZUNvbnRyb2xsZXJzID0gZWxlbWVudENvbnRyb2xsZXJzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWZ1dHVyZVBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGZ1dHVyZVBhcmVudEVsZW1lbnQgPSBoYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSA/ICRlbGVtZW50LnBhcmVudCgpIDogJGVsZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzbG90TmFtZSkge1xuICAgICAgICAgICAgLy8gc2xvdFRyYW5zY2x1ZGVGbiBjYW4gYmUgb25lIG9mIHRocmVlIHRoaW5nczpcbiAgICAgICAgICAgIC8vICAqIGEgdHJhbnNjbHVkZSBmdW5jdGlvbiAtIGEgZmlsbGVkIHNsb3RcbiAgICAgICAgICAgIC8vICAqIGBudWxsYCAtIGFuIG9wdGlvbmFsIHNsb3QgdGhhdCB3YXMgbm90IGZpbGxlZFxuICAgICAgICAgICAgLy8gICogYHVuZGVmaW5lZGAgLSBhIHNsb3QgdGhhdCB3YXMgbm90IGRlY2xhcmVkIChpLmUuIGludmFsaWQpXG4gICAgICAgICAgICB2YXIgc2xvdFRyYW5zY2x1ZGVGbiA9IGJvdW5kVHJhbnNjbHVkZUZuLiQkc2xvdHNbc2xvdE5hbWVdO1xuICAgICAgICAgICAgaWYgKHNsb3RUcmFuc2NsdWRlRm4pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNsb3RUcmFuc2NsdWRlRm4oc2NvcGUsIGNsb25lQXR0YWNoRm4sIHRyYW5zY2x1ZGVDb250cm9sbGVycywgZnV0dXJlUGFyZW50RWxlbWVudCwgc2NvcGVUb0NoaWxkKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZmluZWQoc2xvdFRyYW5zY2x1ZGVGbikpIHtcbiAgICAgICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ25vc2xvdCcsXG4gICAgICAgICAgICAgICAnTm8gcGFyZW50IGRpcmVjdGl2ZSB0aGF0IHJlcXVpcmVzIGEgdHJhbnNjbHVzaW9uIHdpdGggc2xvdCBuYW1lIFwiezB9XCIuICcgK1xuICAgICAgICAgICAgICAgJ0VsZW1lbnQ6IHsxfScsXG4gICAgICAgICAgICAgICBzbG90TmFtZSwgc3RhcnRpbmdUYWcoJGVsZW1lbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGJvdW5kVHJhbnNjbHVkZUZuKHNjb3BlLCBjbG9uZUF0dGFjaEZuLCB0cmFuc2NsdWRlQ29udHJvbGxlcnMsIGZ1dHVyZVBhcmVudEVsZW1lbnQsIHNjb3BlVG9DaGlsZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29udHJvbGxlcnMoZGlyZWN0aXZlTmFtZSwgcmVxdWlyZSwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycykge1xuICAgICAgdmFyIHZhbHVlO1xuXG4gICAgICBpZiAoaXNTdHJpbmcocmVxdWlyZSkpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gcmVxdWlyZS5tYXRjaChSRVFVSVJFX1BSRUZJWF9SRUdFWFApO1xuICAgICAgICB2YXIgbmFtZSA9IHJlcXVpcmUuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgIHZhciBpbmhlcml0VHlwZSA9IG1hdGNoWzFdIHx8IG1hdGNoWzNdO1xuICAgICAgICB2YXIgb3B0aW9uYWwgPSBtYXRjaFsyXSA9PT0gJz8nO1xuXG4gICAgICAgIC8vSWYgb25seSBwYXJlbnRzIHRoZW4gc3RhcnQgYXQgdGhlIHBhcmVudCBlbGVtZW50XG4gICAgICAgIGlmIChpbmhlcml0VHlwZSA9PT0gJ15eJykge1xuICAgICAgICAgICRlbGVtZW50ID0gJGVsZW1lbnQucGFyZW50KCk7XG4gICAgICAgIC8vT3RoZXJ3aXNlIGF0dGVtcHQgZ2V0dGluZyB0aGUgY29udHJvbGxlciBmcm9tIGVsZW1lbnRDb250cm9sbGVycyBpbiBjYXNlXG4gICAgICAgIC8vdGhlIGVsZW1lbnQgaXMgdHJhbnNjbHVkZWQgKGFuZCBoYXMgbm8gZGF0YSkgYW5kIHRvIGF2b2lkIC5kYXRhIGlmIHBvc3NpYmxlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBlbGVtZW50Q29udHJvbGxlcnMgJiYgZWxlbWVudENvbnRyb2xsZXJzW25hbWVdO1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUgJiYgdmFsdWUuaW5zdGFuY2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgdmFyIGRhdGFOYW1lID0gJyQnICsgbmFtZSArICdDb250cm9sbGVyJztcbiAgICAgICAgICB2YWx1ZSA9IGluaGVyaXRUeXBlID8gJGVsZW1lbnQuaW5oZXJpdGVkRGF0YShkYXRhTmFtZSkgOiAkZWxlbWVudC5kYXRhKGRhdGFOYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdmFsdWUgJiYgIW9wdGlvbmFsKSB7XG4gICAgICAgICAgdGhyb3cgJGNvbXBpbGVNaW5FcnIoJ2N0cmVxJyxcbiAgICAgICAgICAgICAgJ0NvbnRyb2xsZXIgXFwnezB9XFwnLCByZXF1aXJlZCBieSBkaXJlY3RpdmUgXFwnezF9XFwnLCBjYW5cXCd0IGJlIGZvdW5kIScsXG4gICAgICAgICAgICAgIG5hbWUsIGRpcmVjdGl2ZU5hbWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzQXJyYXkocmVxdWlyZSkpIHtcbiAgICAgICAgdmFsdWUgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcmVxdWlyZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgdmFsdWVbaV0gPSBnZXRDb250cm9sbGVycyhkaXJlY3RpdmVOYW1lLCByZXF1aXJlW2ldLCAkZWxlbWVudCwgZWxlbWVudENvbnRyb2xsZXJzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChyZXF1aXJlKSkge1xuICAgICAgICB2YWx1ZSA9IHt9O1xuICAgICAgICBmb3JFYWNoKHJlcXVpcmUsIGZ1bmN0aW9uKGNvbnRyb2xsZXIsIHByb3BlcnR5KSB7XG4gICAgICAgICAgdmFsdWVbcHJvcGVydHldID0gZ2V0Q29udHJvbGxlcnMoZGlyZWN0aXZlTmFtZSwgY29udHJvbGxlciwgJGVsZW1lbnQsIGVsZW1lbnRDb250cm9sbGVycyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXR1cENvbnRyb2xsZXJzKCRlbGVtZW50LCBhdHRycywgdHJhbnNjbHVkZUZuLCBjb250cm9sbGVyRGlyZWN0aXZlcywgaXNvbGF0ZVNjb3BlLCBzY29wZSwgbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlKSB7XG4gICAgICB2YXIgZWxlbWVudENvbnRyb2xsZXJzID0gY3JlYXRlTWFwKCk7XG4gICAgICBmb3IgKHZhciBjb250cm9sbGVyS2V5IGluIGNvbnRyb2xsZXJEaXJlY3RpdmVzKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmUgPSBjb250cm9sbGVyRGlyZWN0aXZlc1tjb250cm9sbGVyS2V5XTtcbiAgICAgICAgdmFyIGxvY2FscyA9IHtcbiAgICAgICAgICAkc2NvcGU6IGRpcmVjdGl2ZSA9PT0gbmV3SXNvbGF0ZVNjb3BlRGlyZWN0aXZlIHx8IGRpcmVjdGl2ZS4kJGlzb2xhdGVTY29wZSA/IGlzb2xhdGVTY29wZSA6IHNjb3BlLFxuICAgICAgICAgICRlbGVtZW50OiAkZWxlbWVudCxcbiAgICAgICAgICAkYXR0cnM6IGF0dHJzLFxuICAgICAgICAgICR0cmFuc2NsdWRlOiB0cmFuc2NsdWRlRm5cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY29udHJvbGxlciA9IGRpcmVjdGl2ZS5jb250cm9sbGVyO1xuICAgICAgICBpZiAoY29udHJvbGxlciA9PT0gJ0AnKSB7XG4gICAgICAgICAgY29udHJvbGxlciA9IGF0dHJzW2RpcmVjdGl2ZS5uYW1lXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb250cm9sbGVySW5zdGFuY2UgPSAkY29udHJvbGxlcihjb250cm9sbGVyLCBsb2NhbHMsIHRydWUsIGRpcmVjdGl2ZS5jb250cm9sbGVyQXMpO1xuXG4gICAgICAgIC8vIEZvciBkaXJlY3RpdmVzIHdpdGggZWxlbWVudCB0cmFuc2NsdXNpb24gdGhlIGVsZW1lbnQgaXMgYSBjb21tZW50LlxuICAgICAgICAvLyBJbiB0aGlzIGNhc2UgLmRhdGEgd2lsbCBub3QgYXR0YWNoIGFueSBkYXRhLlxuICAgICAgICAvLyBJbnN0ZWFkLCB3ZSBzYXZlIHRoZSBjb250cm9sbGVycyBmb3IgdGhlIGVsZW1lbnQgaW4gYSBsb2NhbCBoYXNoIGFuZCBhdHRhY2ggdG8gLmRhdGFcbiAgICAgICAgLy8gbGF0ZXIsIG9uY2Ugd2UgaGF2ZSB0aGUgYWN0dWFsIGVsZW1lbnQuXG4gICAgICAgIGVsZW1lbnRDb250cm9sbGVyc1tkaXJlY3RpdmUubmFtZV0gPSBjb250cm9sbGVySW5zdGFuY2U7XG4gICAgICAgICRlbGVtZW50LmRhdGEoJyQnICsgZGlyZWN0aXZlLm5hbWUgKyAnQ29udHJvbGxlcicsIGNvbnRyb2xsZXJJbnN0YW5jZS5pbnN0YW5jZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZWxlbWVudENvbnRyb2xsZXJzO1xuICAgIH1cblxuICAgIC8vIERlcGVuZGluZyB1cG9uIHRoZSBjb250ZXh0IGluIHdoaWNoIGEgZGlyZWN0aXZlIGZpbmRzIGl0c2VsZiBpdCBtaWdodCBuZWVkIHRvIGhhdmUgYSBuZXcgaXNvbGF0ZWRcbiAgICAvLyBvciBjaGlsZCBzY29wZSBjcmVhdGVkLiBGb3IgaW5zdGFuY2U6XG4gICAgLy8gKiBpZiB0aGUgZGlyZWN0aXZlIGhhcyBiZWVuIHB1bGxlZCBpbnRvIGEgdGVtcGxhdGUgYmVjYXVzZSBhbm90aGVyIGRpcmVjdGl2ZSB3aXRoIGEgaGlnaGVyIHByaW9yaXR5XG4gICAgLy8gYXNrZWQgZm9yIGVsZW1lbnQgdHJhbnNjbHVzaW9uXG4gICAgLy8gKiBpZiB0aGUgZGlyZWN0aXZlIGl0c2VsZiBhc2tzIGZvciB0cmFuc2NsdXNpb24gYnV0IGl0IGlzIGF0IHRoZSByb290IG9mIGEgdGVtcGxhdGUgYW5kIHRoZSBvcmlnaW5hbFxuICAgIC8vIGVsZW1lbnQgd2FzIHJlcGxhY2VkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTI5MzZcbiAgICBmdW5jdGlvbiBtYXJrRGlyZWN0aXZlU2NvcGUoZGlyZWN0aXZlcywgaXNvbGF0ZVNjb3BlLCBuZXdTY29wZSkge1xuICAgICAgZm9yICh2YXIgaiA9IDAsIGpqID0gZGlyZWN0aXZlcy5sZW5ndGg7IGogPCBqajsgaisrKSB7XG4gICAgICAgIGRpcmVjdGl2ZXNbal0gPSBpbmhlcml0KGRpcmVjdGl2ZXNbal0sIHskJGlzb2xhdGVTY29wZTogaXNvbGF0ZVNjb3BlLCAkJG5ld1Njb3BlOiBuZXdTY29wZX0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGxvb2tzIHVwIHRoZSBkaXJlY3RpdmUgYW5kIGRlY29yYXRlcyBpdCB3aXRoIGV4Y2VwdGlvbiBoYW5kbGluZyBhbmQgcHJvcGVyIHBhcmFtZXRlcnMuIFdlXG4gICAgICogY2FsbCB0aGlzIHRoZSBib3VuZERpcmVjdGl2ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGRpcmVjdGl2ZSB0byBsb29rIHVwLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhdGlvbiBUaGUgZGlyZWN0aXZlIG11c3QgYmUgZm91bmQgaW4gc3BlY2lmaWMgZm9ybWF0LlxuICAgICAqICAgU3RyaW5nIGNvbnRhaW5pbmcgYW55IG9mIHRoZXNlcyBjaGFyYWN0ZXJzOlxuICAgICAqXG4gICAgICogICAqIGBFYDogZWxlbWVudCBuYW1lXG4gICAgICogICAqIGBBJzogYXR0cmlidXRlXG4gICAgICogICAqIGBDYDogY2xhc3NcbiAgICAgKiAgICogYE1gOiBjb21tZW50XG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgZGlyZWN0aXZlIHdhcyBhZGRlZC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhZGREaXJlY3RpdmUodERpcmVjdGl2ZXMsIG5hbWUsIGxvY2F0aW9uLCBtYXhQcmlvcml0eSwgaWdub3JlRGlyZWN0aXZlLCBzdGFydEF0dHJOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRBdHRyTmFtZSkge1xuICAgICAgaWYgKG5hbWUgPT09IGlnbm9yZURpcmVjdGl2ZSkgcmV0dXJuIG51bGw7XG4gICAgICB2YXIgbWF0Y2ggPSBudWxsO1xuICAgICAgaWYgKGhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgZm9yICh2YXIgZGlyZWN0aXZlLCBkaXJlY3RpdmVzID0gJGluamVjdG9yLmdldChuYW1lICsgU3VmZml4KSxcbiAgICAgICAgICAgIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIGRpcmVjdGl2ZSA9IGRpcmVjdGl2ZXNbaV07XG4gICAgICAgICAgaWYgKChpc1VuZGVmaW5lZChtYXhQcmlvcml0eSkgfHwgbWF4UHJpb3JpdHkgPiBkaXJlY3RpdmUucHJpb3JpdHkpICYmXG4gICAgICAgICAgICAgICBkaXJlY3RpdmUucmVzdHJpY3QuaW5kZXhPZihsb2NhdGlvbikgIT09IC0xKSB7XG4gICAgICAgICAgICBpZiAoc3RhcnRBdHRyTmFtZSkge1xuICAgICAgICAgICAgICBkaXJlY3RpdmUgPSBpbmhlcml0KGRpcmVjdGl2ZSwgeyQkc3RhcnQ6IHN0YXJ0QXR0ck5hbWUsICQkZW5kOiBlbmRBdHRyTmFtZX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkaXJlY3RpdmUuJCRiaW5kaW5ncykge1xuICAgICAgICAgICAgICB2YXIgYmluZGluZ3MgPSBkaXJlY3RpdmUuJCRiaW5kaW5ncyA9XG4gICAgICAgICAgICAgICAgICBwYXJzZURpcmVjdGl2ZUJpbmRpbmdzKGRpcmVjdGl2ZSwgZGlyZWN0aXZlLm5hbWUpO1xuICAgICAgICAgICAgICBpZiAoaXNPYmplY3QoYmluZGluZ3MuaXNvbGF0ZVNjb3BlKSkge1xuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZS4kJGlzb2xhdGVCaW5kaW5ncyA9IGJpbmRpbmdzLmlzb2xhdGVTY29wZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdERpcmVjdGl2ZXMucHVzaChkaXJlY3RpdmUpO1xuICAgICAgICAgICAgbWF0Y2ggPSBkaXJlY3RpdmU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBsb29rcyB1cCB0aGUgZGlyZWN0aXZlIGFuZCByZXR1cm5zIHRydWUgaWYgaXQgaXMgYSBtdWx0aS1lbGVtZW50IGRpcmVjdGl2ZSxcbiAgICAgKiBhbmQgdGhlcmVmb3JlIHJlcXVpcmVzIERPTSBub2RlcyBiZXR3ZWVuIC1zdGFydCBhbmQgLWVuZCBtYXJrZXJzIHRvIGJlIGdyb3VwZWRcbiAgICAgKiB0b2dldGhlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGRpcmVjdGl2ZSB0byBsb29rIHVwLlxuICAgICAqIEByZXR1cm5zIHRydWUgaWYgZGlyZWN0aXZlIHdhcyByZWdpc3RlcmVkIGFzIG11bHRpLWVsZW1lbnQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZGlyZWN0aXZlSXNNdWx0aUVsZW1lbnQobmFtZSkge1xuICAgICAgaWYgKGhhc0RpcmVjdGl2ZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgZm9yICh2YXIgZGlyZWN0aXZlLCBkaXJlY3RpdmVzID0gJGluamVjdG9yLmdldChuYW1lICsgU3VmZml4KSxcbiAgICAgICAgICAgIGkgPSAwLCBpaSA9IGRpcmVjdGl2ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIGRpcmVjdGl2ZSA9IGRpcmVjdGl2ZXNbaV07XG4gICAgICAgICAgaWYgKGRpcmVjdGl2ZS5tdWx0aUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIGVsZW1lbnQgaXMgcmVwbGFjZWQgd2l0aCBIVE1MIHRlbXBsYXRlIHRoZW4gdGhlIG5ldyBhdHRyaWJ1dGVzXG4gICAgICogb24gdGhlIHRlbXBsYXRlIG5lZWQgdG8gYmUgbWVyZ2VkIHdpdGggdGhlIGV4aXN0aW5nIGF0dHJpYnV0ZXMgaW4gdGhlIERPTS5cbiAgICAgKiBUaGUgZGVzaXJlZCBlZmZlY3QgaXMgdG8gaGF2ZSBib3RoIG9mIHRoZSBhdHRyaWJ1dGVzIHByZXNlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gZHN0IGRlc3RpbmF0aW9uIGF0dHJpYnV0ZXMgKG9yaWdpbmFsIERPTSlcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gc3JjIHNvdXJjZSBhdHRyaWJ1dGVzIChmcm9tIHRoZSBkaXJlY3RpdmUgdGVtcGxhdGUpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWVyZ2VUZW1wbGF0ZUF0dHJpYnV0ZXMoZHN0LCBzcmMpIHtcbiAgICAgIHZhciBzcmNBdHRyID0gc3JjLiRhdHRyLFxuICAgICAgICAgIGRzdEF0dHIgPSBkc3QuJGF0dHI7XG5cbiAgICAgIC8vIHJlYXBwbHkgdGhlIG9sZCBhdHRyaWJ1dGVzIHRvIHRoZSBuZXcgZWxlbWVudFxuICAgICAgZm9yRWFjaChkc3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKGtleS5jaGFyQXQoMCkgIT09ICckJykge1xuICAgICAgICAgIGlmIChzcmNba2V5XSAmJiBzcmNba2V5XSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgdmFsdWUgKz0gKGtleSA9PT0gJ3N0eWxlJyA/ICc7JyA6ICcgJykgKyBzcmNba2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhbHVlID0gc3JjW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGRzdC4kc2V0KGtleSwgdmFsdWUsIHRydWUsIHNyY0F0dHJba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBjb3B5IHRoZSBuZXcgYXR0cmlidXRlcyBvbiB0aGUgb2xkIGF0dHJzIG9iamVjdFxuICAgICAgZm9yRWFjaChzcmMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UgYWxyZWFkeSBzZXQgdGhpcyBhdHRyaWJ1dGUgaW4gdGhlIGxvb3AgYWJvdmUuXG4gICAgICAgIC8vIGBkc3RgIHdpbGwgbmV2ZXIgY29udGFpbiBoYXNPd25Qcm9wZXJ0eSBhcyBET00gcGFyc2VyIHdvbid0IGxldCBpdC5cbiAgICAgICAgLy8gWW91IHdpbGwgZ2V0IGFuIFwiSW52YWxpZENoYXJhY3RlckVycm9yOiBET00gRXhjZXB0aW9uIDVcIiBlcnJvciBpZiB5b3VcbiAgICAgICAgLy8gaGF2ZSBhbiBhdHRyaWJ1dGUgbGlrZSBcImhhcy1vd24tcHJvcGVydHlcIiBvciBcImRhdGEtaGFzLW93bi1wcm9wZXJ0eVwiLCBldGMuXG4gICAgICAgIGlmICghZHN0Lmhhc093blByb3BlcnR5KGtleSkgJiYga2V5LmNoYXJBdCgwKSAhPT0gJyQnKSB7XG4gICAgICAgICAgZHN0W2tleV0gPSB2YWx1ZTtcblxuICAgICAgICAgIGlmIChrZXkgIT09ICdjbGFzcycgJiYga2V5ICE9PSAnc3R5bGUnKSB7XG4gICAgICAgICAgICBkc3RBdHRyW2tleV0gPSBzcmNBdHRyW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGNvbXBpbGVUZW1wbGF0ZVVybChkaXJlY3RpdmVzLCAkY29tcGlsZU5vZGUsIHRBdHRycyxcbiAgICAgICAgJHJvb3RFbGVtZW50LCBjaGlsZFRyYW5zY2x1ZGVGbiwgcHJlTGlua0ZucywgcG9zdExpbmtGbnMsIHByZXZpb3VzQ29tcGlsZUNvbnRleHQpIHtcbiAgICAgIHZhciBsaW5rUXVldWUgPSBbXSxcbiAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbixcbiAgICAgICAgICBhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sXG4gICAgICAgICAgYmVmb3JlVGVtcGxhdGVDb21waWxlTm9kZSA9ICRjb21waWxlTm9kZVswXSxcbiAgICAgICAgICBvcmlnQXN5bmNEaXJlY3RpdmUgPSBkaXJlY3RpdmVzLnNoaWZ0KCksXG4gICAgICAgICAgZGVyaXZlZFN5bmNEaXJlY3RpdmUgPSBpbmhlcml0KG9yaWdBc3luY0RpcmVjdGl2ZSwge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6IG51bGwsIHRyYW5zY2x1ZGU6IG51bGwsIHJlcGxhY2U6IG51bGwsICQkb3JpZ2luYWxEaXJlY3RpdmU6IG9yaWdBc3luY0RpcmVjdGl2ZVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIHRlbXBsYXRlVXJsID0gKGlzRnVuY3Rpb24ob3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsKSlcbiAgICAgICAgICAgICAgPyBvcmlnQXN5bmNEaXJlY3RpdmUudGVtcGxhdGVVcmwoJGNvbXBpbGVOb2RlLCB0QXR0cnMpXG4gICAgICAgICAgICAgIDogb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlVXJsLFxuICAgICAgICAgIHRlbXBsYXRlTmFtZXNwYWNlID0gb3JpZ0FzeW5jRGlyZWN0aXZlLnRlbXBsYXRlTmFtZXNwYWNlO1xuXG4gICAgICAkY29tcGlsZU5vZGUuZW1wdHkoKTtcblxuICAgICAgJHRlbXBsYXRlUmVxdWVzdCh0ZW1wbGF0ZVVybClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24oY29udGVudCkge1xuICAgICAgICAgIHZhciBjb21waWxlTm9kZSwgdGVtcFRlbXBsYXRlQXR0cnMsICR0ZW1wbGF0ZSwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbjtcblxuICAgICAgICAgIGNvbnRlbnQgPSBkZW5vcm1hbGl6ZVRlbXBsYXRlKGNvbnRlbnQpO1xuXG4gICAgICAgICAgaWYgKG9yaWdBc3luY0RpcmVjdGl2ZS5yZXBsYWNlKSB7XG4gICAgICAgICAgICBpZiAoanFMaXRlSXNUZXh0Tm9kZShjb250ZW50KSkge1xuICAgICAgICAgICAgICAkdGVtcGxhdGUgPSBbXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICR0ZW1wbGF0ZSA9IHJlbW92ZUNvbW1lbnRzKHdyYXBUZW1wbGF0ZSh0ZW1wbGF0ZU5hbWVzcGFjZSwgdHJpbShjb250ZW50KSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tcGlsZU5vZGUgPSAkdGVtcGxhdGVbMF07XG5cbiAgICAgICAgICAgIGlmICgkdGVtcGxhdGUubGVuZ3RoICE9PSAxIHx8IGNvbXBpbGVOb2RlLm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfRUxFTUVOVCkge1xuICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycigndHBscnQnLFxuICAgICAgICAgICAgICAgICAgJ1RlbXBsYXRlIGZvciBkaXJlY3RpdmUgXFwnezB9XFwnIG11c3QgaGF2ZSBleGFjdGx5IG9uZSByb290IGVsZW1lbnQuIHsxfScsXG4gICAgICAgICAgICAgICAgICBvcmlnQXN5bmNEaXJlY3RpdmUubmFtZSwgdGVtcGxhdGVVcmwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0ZW1wVGVtcGxhdGVBdHRycyA9IHskYXR0cjoge319O1xuICAgICAgICAgICAgcmVwbGFjZVdpdGgoJHJvb3RFbGVtZW50LCAkY29tcGlsZU5vZGUsIGNvbXBpbGVOb2RlKTtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZURpcmVjdGl2ZXMgPSBjb2xsZWN0RGlyZWN0aXZlcyhjb21waWxlTm9kZSwgW10sIHRlbXBUZW1wbGF0ZUF0dHJzKTtcblxuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KG9yaWdBc3luY0RpcmVjdGl2ZS5zY29wZSkpIHtcbiAgICAgICAgICAgICAgLy8gdGhlIG9yaWdpbmFsIGRpcmVjdGl2ZSB0aGF0IGNhdXNlZCB0aGUgdGVtcGxhdGUgdG8gYmUgbG9hZGVkIGFzeW5jIHJlcXVpcmVkXG4gICAgICAgICAgICAgIC8vIGFuIGlzb2xhdGUgc2NvcGVcbiAgICAgICAgICAgICAgbWFya0RpcmVjdGl2ZVNjb3BlKHRlbXBsYXRlRGlyZWN0aXZlcywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaXJlY3RpdmVzID0gdGVtcGxhdGVEaXJlY3RpdmVzLmNvbmNhdChkaXJlY3RpdmVzKTtcbiAgICAgICAgICAgIG1lcmdlVGVtcGxhdGVBdHRyaWJ1dGVzKHRBdHRycywgdGVtcFRlbXBsYXRlQXR0cnMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21waWxlTm9kZSA9IGJlZm9yZVRlbXBsYXRlQ29tcGlsZU5vZGU7XG4gICAgICAgICAgICAkY29tcGlsZU5vZGUuaHRtbChjb250ZW50KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkaXJlY3RpdmVzLnVuc2hpZnQoZGVyaXZlZFN5bmNEaXJlY3RpdmUpO1xuXG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4gPSBhcHBseURpcmVjdGl2ZXNUb05vZGUoZGlyZWN0aXZlcywgY29tcGlsZU5vZGUsIHRBdHRycyxcbiAgICAgICAgICAgICAgY2hpbGRUcmFuc2NsdWRlRm4sICRjb21waWxlTm9kZSwgb3JpZ0FzeW5jRGlyZWN0aXZlLCBwcmVMaW5rRm5zLCBwb3N0TGlua0ZucyxcbiAgICAgICAgICAgICAgcHJldmlvdXNDb21waWxlQ29udGV4dCk7XG4gICAgICAgICAgZm9yRWFjaCgkcm9vdEVsZW1lbnQsIGZ1bmN0aW9uKG5vZGUsIGkpIHtcbiAgICAgICAgICAgIGlmIChub2RlID09PSBjb21waWxlTm9kZSkge1xuICAgICAgICAgICAgICAkcm9vdEVsZW1lbnRbaV0gPSAkY29tcGlsZU5vZGVbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuID0gY29tcGlsZU5vZGVzKCRjb21waWxlTm9kZVswXS5jaGlsZE5vZGVzLCBjaGlsZFRyYW5zY2x1ZGVGbik7XG5cbiAgICAgICAgICB3aGlsZSAobGlua1F1ZXVlLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHNjb3BlID0gbGlua1F1ZXVlLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgYmVmb3JlVGVtcGxhdGVMaW5rTm9kZSA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGxpbmtSb290RWxlbWVudCA9IGxpbmtRdWV1ZS5zaGlmdCgpLFxuICAgICAgICAgICAgICAgIGJvdW5kVHJhbnNjbHVkZUZuID0gbGlua1F1ZXVlLnNoaWZ0KCksXG4gICAgICAgICAgICAgICAgbGlua05vZGUgPSAkY29tcGlsZU5vZGVbMF07XG5cbiAgICAgICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmIChiZWZvcmVUZW1wbGF0ZUxpbmtOb2RlICE9PSBiZWZvcmVUZW1wbGF0ZUNvbXBpbGVOb2RlKSB7XG4gICAgICAgICAgICAgIHZhciBvbGRDbGFzc2VzID0gYmVmb3JlVGVtcGxhdGVMaW5rTm9kZS5jbGFzc05hbWU7XG5cbiAgICAgICAgICAgICAgaWYgKCEocHJldmlvdXNDb21waWxlQ29udGV4dC5oYXNFbGVtZW50VHJhbnNjbHVkZURpcmVjdGl2ZSAmJlxuICAgICAgICAgICAgICAgICAgb3JpZ0FzeW5jRGlyZWN0aXZlLnJlcGxhY2UpKSB7XG4gICAgICAgICAgICAgICAgLy8gaXQgd2FzIGNsb25lZCB0aGVyZWZvcmUgd2UgaGF2ZSB0byBjbG9uZSBhcyB3ZWxsLlxuICAgICAgICAgICAgICAgIGxpbmtOb2RlID0ganFMaXRlQ2xvbmUoY29tcGlsZU5vZGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlcGxhY2VXaXRoKGxpbmtSb290RWxlbWVudCwganFMaXRlKGJlZm9yZVRlbXBsYXRlTGlua05vZGUpLCBsaW5rTm9kZSk7XG5cbiAgICAgICAgICAgICAgLy8gQ29weSBpbiBDU1MgY2xhc3NlcyBmcm9tIG9yaWdpbmFsIG5vZGVcbiAgICAgICAgICAgICAgc2FmZUFkZENsYXNzKGpxTGl0ZShsaW5rTm9kZSksIG9sZENsYXNzZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFmdGVyVGVtcGxhdGVOb2RlTGlua0ZuLnRyYW5zY2x1ZGVPblRoaXNFbGVtZW50KSB7XG4gICAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZSwgYm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbiA9IGJvdW5kVHJhbnNjbHVkZUZuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4oYWZ0ZXJUZW1wbGF0ZUNoaWxkTGlua0ZuLCBzY29wZSwgbGlua05vZGUsICRyb290RWxlbWVudCxcbiAgICAgICAgICAgICAgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxpbmtRdWV1ZSA9IG51bGw7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgaWYgKGlzRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlbGF5ZWROb2RlTGlua0ZuKGlnbm9yZUNoaWxkTGlua0ZuLCBzY29wZSwgbm9kZSwgcm9vdEVsZW1lbnQsIGJvdW5kVHJhbnNjbHVkZUZuKSB7XG4gICAgICAgIHZhciBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuID0gYm91bmRUcmFuc2NsdWRlRm47XG4gICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBpZiAobGlua1F1ZXVlKSB7XG4gICAgICAgICAgbGlua1F1ZXVlLnB1c2goc2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICByb290RWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEJvdW5kVHJhbnNjbHVkZUZuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZU9uVGhpc0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGNoaWxkQm91bmRUcmFuc2NsdWRlRm4gPSBjcmVhdGVCb3VuZFRyYW5zY2x1ZGVGbihzY29wZSwgYWZ0ZXJUZW1wbGF0ZU5vZGVMaW5rRm4udHJhbnNjbHVkZSwgYm91bmRUcmFuc2NsdWRlRm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZnRlclRlbXBsYXRlTm9kZUxpbmtGbihhZnRlclRlbXBsYXRlQ2hpbGRMaW5rRm4sIHNjb3BlLCBub2RlLCByb290RWxlbWVudCwgY2hpbGRCb3VuZFRyYW5zY2x1ZGVGbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBTb3J0aW5nIGZ1bmN0aW9uIGZvciBib3VuZCBkaXJlY3RpdmVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJ5UHJpb3JpdHkoYSwgYikge1xuICAgICAgdmFyIGRpZmYgPSBiLnByaW9yaXR5IC0gYS5wcmlvcml0eTtcbiAgICAgIGlmIChkaWZmICE9PSAwKSByZXR1cm4gZGlmZjtcbiAgICAgIGlmIChhLm5hbWUgIT09IGIubmFtZSkgcmV0dXJuIChhLm5hbWUgPCBiLm5hbWUpID8gLTEgOiAxO1xuICAgICAgcmV0dXJuIGEuaW5kZXggLSBiLmluZGV4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzc2VydE5vRHVwbGljYXRlKHdoYXQsIHByZXZpb3VzRGlyZWN0aXZlLCBkaXJlY3RpdmUsIGVsZW1lbnQpIHtcblxuICAgICAgZnVuY3Rpb24gd3JhcE1vZHVsZU5hbWVJZkRlZmluZWQobW9kdWxlTmFtZSkge1xuICAgICAgICByZXR1cm4gbW9kdWxlTmFtZSA/XG4gICAgICAgICAgKCcgKG1vZHVsZTogJyArIG1vZHVsZU5hbWUgKyAnKScpIDpcbiAgICAgICAgICAnJztcbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZpb3VzRGlyZWN0aXZlKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdtdWx0aWRpcicsICdNdWx0aXBsZSBkaXJlY3RpdmVzIFt7MH17MX0sIHsyfXszfV0gYXNraW5nIGZvciB7NH0gb246IHs1fScsXG4gICAgICAgICAgICBwcmV2aW91c0RpcmVjdGl2ZS5uYW1lLCB3cmFwTW9kdWxlTmFtZUlmRGVmaW5lZChwcmV2aW91c0RpcmVjdGl2ZS4kJG1vZHVsZU5hbWUpLFxuICAgICAgICAgICAgZGlyZWN0aXZlLm5hbWUsIHdyYXBNb2R1bGVOYW1lSWZEZWZpbmVkKGRpcmVjdGl2ZS4kJG1vZHVsZU5hbWUpLCB3aGF0LCBzdGFydGluZ1RhZyhlbGVtZW50KSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBhZGRUZXh0SW50ZXJwb2xhdGVEaXJlY3RpdmUoZGlyZWN0aXZlcywgdGV4dCkge1xuICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUodGV4dCwgdHJ1ZSk7XG4gICAgICBpZiAoaW50ZXJwb2xhdGVGbikge1xuICAgICAgICBkaXJlY3RpdmVzLnB1c2goe1xuICAgICAgICAgIHByaW9yaXR5OiAwLFxuICAgICAgICAgIGNvbXBpbGU6IGZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZUNvbXBpbGVGbih0ZW1wbGF0ZU5vZGUpIHtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZU5vZGVQYXJlbnQgPSB0ZW1wbGF0ZU5vZGUucGFyZW50KCksXG4gICAgICAgICAgICAgICAgaGFzQ29tcGlsZVBhcmVudCA9ICEhdGVtcGxhdGVOb2RlUGFyZW50Lmxlbmd0aDtcblxuICAgICAgICAgICAgLy8gV2hlbiB0cmFuc2NsdWRpbmcgYSB0ZW1wbGF0ZSB0aGF0IGhhcyBiaW5kaW5ncyBpbiB0aGUgcm9vdFxuICAgICAgICAgICAgLy8gd2UgZG9uJ3QgaGF2ZSBhIHBhcmVudCBhbmQgdGh1cyBuZWVkIHRvIGFkZCB0aGUgY2xhc3MgZHVyaW5nIGxpbmtpbmcgZm4uXG4gICAgICAgICAgICBpZiAoaGFzQ29tcGlsZVBhcmVudCkgY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZU5vZGVQYXJlbnQpO1xuXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gdGV4dEludGVycG9sYXRlTGlua0ZuKHNjb3BlLCBub2RlKSB7XG4gICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudCgpO1xuICAgICAgICAgICAgICBpZiAoIWhhc0NvbXBpbGVQYXJlbnQpIGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3MocGFyZW50KTtcbiAgICAgICAgICAgICAgY29tcGlsZS4kJGFkZEJpbmRpbmdJbmZvKHBhcmVudCwgaW50ZXJwb2xhdGVGbi5leHByZXNzaW9ucyk7XG4gICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBub2RlWzBdLm5vZGVWYWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHdyYXBUZW1wbGF0ZSh0eXBlLCB0ZW1wbGF0ZSkge1xuICAgICAgdHlwZSA9IGxvd2VyY2FzZSh0eXBlIHx8ICdodG1sJyk7XG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3N2Zyc6XG4gICAgICBjYXNlICdtYXRoJzpcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHdyYXBwZXIuaW5uZXJIVE1MID0gJzwnICsgdHlwZSArICc+JyArIHRlbXBsYXRlICsgJzwvJyArIHR5cGUgKyAnPic7XG4gICAgICAgIHJldHVybiB3cmFwcGVyLmNoaWxkTm9kZXNbMF0uY2hpbGROb2RlcztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGdldFRydXN0ZWRDb250ZXh0KG5vZGUsIGF0dHJOb3JtYWxpemVkTmFtZSkge1xuICAgICAgaWYgKGF0dHJOb3JtYWxpemVkTmFtZSA9PT0gJ3NyY2RvYycpIHtcbiAgICAgICAgcmV0dXJuICRzY2UuSFRNTDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBub2RlTmFtZV8obm9kZSk7XG4gICAgICAvLyBBbGwgdGFncyB3aXRoIHNyYyBhdHRyaWJ1dGVzIHJlcXVpcmUgYSBSRVNPVVJDRV9VUkwgdmFsdWUsIGV4Y2VwdCBmb3JcbiAgICAgIC8vIGltZyBhbmQgdmFyaW91cyBodG1sNSBtZWRpYSB0YWdzLlxuICAgICAgaWYgKGF0dHJOb3JtYWxpemVkTmFtZSA9PT0gJ3NyYycgfHwgYXR0ck5vcm1hbGl6ZWROYW1lID09PSAnbmdTcmMnKSB7XG4gICAgICAgIGlmIChbJ2ltZycsICd2aWRlbycsICdhdWRpbycsICdzb3VyY2UnLCAndHJhY2snXS5pbmRleE9mKHRhZykgPT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuICRzY2UuUkVTT1VSQ0VfVVJMO1xuICAgICAgICB9XG4gICAgICAvLyBtYWN0aW9uW3hsaW5rOmhyZWZdIGNhbiBzb3VyY2UgU1ZHLiAgSXQncyBub3QgbGltaXRlZCB0byA8bWFjdGlvbj4uXG4gICAgICB9IGVsc2UgaWYgKGF0dHJOb3JtYWxpemVkTmFtZSA9PT0gJ3hsaW5rSHJlZicgfHxcbiAgICAgICAgICAodGFnID09PSAnZm9ybScgJiYgYXR0ck5vcm1hbGl6ZWROYW1lID09PSAnYWN0aW9uJykgfHxcbiAgICAgICAgICAvLyBsaW5rcyBjYW4gYmUgc3R5bGVzaGVldHMgb3IgaW1wb3J0cywgd2hpY2ggY2FuIHJ1biBzY3JpcHQgaW4gdGhlIGN1cnJlbnQgb3JpZ2luXG4gICAgICAgICAgKHRhZyA9PT0gJ2xpbmsnICYmIGF0dHJOb3JtYWxpemVkTmFtZSA9PT0gJ2hyZWYnKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiAkc2NlLlJFU09VUkNFX1VSTDtcbiAgICAgIH1cbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIGFkZEF0dHJJbnRlcnBvbGF0ZURpcmVjdGl2ZShub2RlLCBkaXJlY3RpdmVzLCB2YWx1ZSwgbmFtZSwgaXNOZ0F0dHIpIHtcbiAgICAgIHZhciB0cnVzdGVkQ29udGV4dCA9IGdldFRydXN0ZWRDb250ZXh0KG5vZGUsIG5hbWUpO1xuICAgICAgdmFyIG11c3RIYXZlRXhwcmVzc2lvbiA9ICFpc05nQXR0cjtcbiAgICAgIHZhciBhbGxPck5vdGhpbmcgPSBBTExfT1JfTk9USElOR19BVFRSU1tuYW1lXSB8fCBpc05nQXR0cjtcblxuICAgICAgdmFyIGludGVycG9sYXRlRm4gPSAkaW50ZXJwb2xhdGUodmFsdWUsIG11c3RIYXZlRXhwcmVzc2lvbiwgdHJ1c3RlZENvbnRleHQsIGFsbE9yTm90aGluZyk7XG5cbiAgICAgIC8vIG5vIGludGVycG9sYXRpb24gZm91bmQgLT4gaWdub3JlXG4gICAgICBpZiAoIWludGVycG9sYXRlRm4pIHJldHVybjtcblxuICAgICAgaWYgKG5hbWUgPT09ICdtdWx0aXBsZScgJiYgbm9kZU5hbWVfKG5vZGUpID09PSAnc2VsZWN0Jykge1xuICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignc2VsbXVsdGknLFxuICAgICAgICAgICAgJ0JpbmRpbmcgdG8gdGhlIFxcJ211bHRpcGxlXFwnIGF0dHJpYnV0ZSBpcyBub3Qgc3VwcG9ydGVkLiBFbGVtZW50OiB7MH0nLFxuICAgICAgICAgICAgc3RhcnRpbmdUYWcobm9kZSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoRVZFTlRfSEFORExFUl9BVFRSX1JFR0VYUC50ZXN0KG5hbWUpKSB7XG4gICAgICAgIHRocm93ICRjb21waWxlTWluRXJyKCdub2RvbWV2ZW50cycsXG4gICAgICAgICAgICAnSW50ZXJwb2xhdGlvbnMgZm9yIEhUTUwgRE9NIGV2ZW50IGF0dHJpYnV0ZXMgYXJlIGRpc2FsbG93ZWQuICBQbGVhc2UgdXNlIHRoZSAnICtcbiAgICAgICAgICAgICAgICAnbmctIHZlcnNpb25zIChzdWNoIGFzIG5nLWNsaWNrIGluc3RlYWQgb2Ygb25jbGljaykgaW5zdGVhZC4nKTtcbiAgICAgIH1cblxuICAgICAgZGlyZWN0aXZlcy5wdXNoKHtcbiAgICAgICAgcHJpb3JpdHk6IDEwMCxcbiAgICAgICAgY29tcGlsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBwcmU6IGZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZVByZUxpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAgICAgICAgIHZhciAkJG9ic2VydmVycyA9IChhdHRyLiQkb2JzZXJ2ZXJzIHx8IChhdHRyLiQkb2JzZXJ2ZXJzID0gY3JlYXRlTWFwKCkpKTtcblxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIGNoYW5nZWQgc2luY2UgbGFzdCAkaW50ZXJwb2xhdGUoKWVkXG4gICAgICAgICAgICAgICAgdmFyIG5ld1ZhbHVlID0gYXR0cltuYW1lXTtcbiAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAvLyB3ZSBuZWVkIHRvIGludGVycG9sYXRlIGFnYWluIHNpbmNlIHRoZSBhdHRyaWJ1dGUgdmFsdWUgaGFzIGJlZW4gdXBkYXRlZFxuICAgICAgICAgICAgICAgICAgLy8gKGUuZy4gYnkgYW5vdGhlciBkaXJlY3RpdmUncyBjb21waWxlIGZ1bmN0aW9uKVxuICAgICAgICAgICAgICAgICAgLy8gZW5zdXJlIHVuc2V0L2VtcHR5IHZhbHVlcyBtYWtlIGludGVycG9sYXRlRm4gZmFsc3lcbiAgICAgICAgICAgICAgICAgIGludGVycG9sYXRlRm4gPSBuZXdWYWx1ZSAmJiAkaW50ZXJwb2xhdGUobmV3VmFsdWUsIHRydWUsIHRydXN0ZWRDb250ZXh0LCBhbGxPck5vdGhpbmcpO1xuICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBpZiBhdHRyaWJ1dGUgd2FzIHVwZGF0ZWQgc28gdGhhdCB0aGVyZSBpcyBubyBpbnRlcnBvbGF0aW9uIGdvaW5nIG9uIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgICAgICAgICAgICAvLyByZWdpc3RlciBhbnkgb2JzZXJ2ZXJzXG4gICAgICAgICAgICAgICAgaWYgKCFpbnRlcnBvbGF0ZUZuKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplIGF0dHIgb2JqZWN0IHNvIHRoYXQgaXQncyByZWFkeSBpbiBjYXNlIHdlIG5lZWQgdGhlIHZhbHVlIGZvciBpc29sYXRlXG4gICAgICAgICAgICAgICAgLy8gc2NvcGUgaW5pdGlhbGl6YXRpb24sIG90aGVyd2lzZSB0aGUgdmFsdWUgd291bGQgbm90IGJlIGF2YWlsYWJsZSBmcm9tIGlzb2xhdGVcbiAgICAgICAgICAgICAgICAvLyBkaXJlY3RpdmUncyBsaW5raW5nIGZuIGR1cmluZyBsaW5raW5nIHBoYXNlXG4gICAgICAgICAgICAgICAgYXR0cltuYW1lXSA9IGludGVycG9sYXRlRm4oc2NvcGUpO1xuXG4gICAgICAgICAgICAgICAgKCQkb2JzZXJ2ZXJzW25hbWVdIHx8ICgkJG9ic2VydmVyc1tuYW1lXSA9IFtdKSkuJCRpbnRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgKGF0dHIuJCRvYnNlcnZlcnMgJiYgYXR0ci4kJG9ic2VydmVyc1tuYW1lXS4kJHNjb3BlIHx8IHNjb3BlKS5cbiAgICAgICAgICAgICAgICAgICR3YXRjaChpbnRlcnBvbGF0ZUZuLCBmdW5jdGlvbiBpbnRlcnBvbGF0ZUZuV2F0Y2hBY3Rpb24obmV3VmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vc3BlY2lhbCBjYXNlIGZvciBjbGFzcyBhdHRyaWJ1dGUgYWRkaXRpb24gKyByZW1vdmFsXG4gICAgICAgICAgICAgICAgICAgIC8vc28gdGhhdCBjbGFzcyBjaGFuZ2VzIGNhbiB0YXAgaW50byB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vaG9va3MgcHJvdmlkZWQgYnkgdGhlICRhbmltYXRlIHNlcnZpY2UuIEJlIHN1cmUgdG9cbiAgICAgICAgICAgICAgICAgICAgLy9za2lwIGFuaW1hdGlvbnMgd2hlbiB0aGUgZmlyc3QgZGlnZXN0IG9jY3VycyAod2hlblxuICAgICAgICAgICAgICAgICAgICAvL2JvdGggdGhlIG5ldyBhbmQgdGhlIG9sZCB2YWx1ZXMgYXJlIHRoZSBzYW1lKSBzaW5jZVxuICAgICAgICAgICAgICAgICAgICAvL3RoZSBDU1MgY2xhc3NlcyBhcmUgdGhlIG5vbi1pbnRlcnBvbGF0ZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIGlmIChuYW1lID09PSAnY2xhc3MnICYmIG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGF0dHIuJHVwZGF0ZUNsYXNzKG5ld1ZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgYXR0ci4kc2V0KG5hbWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIGEgc3BlY2lhbCBqcUxpdGUucmVwbGFjZVdpdGgsIHdoaWNoIGNhbiByZXBsYWNlIGl0ZW1zIHdoaWNoXG4gICAgICogaGF2ZSBubyBwYXJlbnRzLCBwcm92aWRlZCB0aGF0IHRoZSBjb250YWluaW5nIGpxTGl0ZSBjb2xsZWN0aW9uIGlzIHByb3ZpZGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtKcUxpdGU9fSAkcm9vdEVsZW1lbnQgVGhlIHJvb3Qgb2YgdGhlIGNvbXBpbGUgdHJlZS4gVXNlZCBzbyB0aGF0IHdlIGNhbiByZXBsYWNlIG5vZGVzXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIHJvb3Qgb2YgdGhlIHRyZWUuXG4gICAgICogQHBhcmFtIHtKcUxpdGV9IGVsZW1lbnRzVG9SZW1vdmUgVGhlIGpxTGl0ZSBlbGVtZW50IHdoaWNoIHdlIGFyZSBnb2luZyB0byByZXBsYWNlLiBXZSBrZWVwXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNoZWxsLCBidXQgcmVwbGFjZSBpdHMgRE9NIG5vZGUgcmVmZXJlbmNlLlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbmV3Tm9kZSBUaGUgbmV3IERPTSBub2RlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlcGxhY2VXaXRoKCRyb290RWxlbWVudCwgZWxlbWVudHNUb1JlbW92ZSwgbmV3Tm9kZSkge1xuICAgICAgdmFyIGZpcnN0RWxlbWVudFRvUmVtb3ZlID0gZWxlbWVudHNUb1JlbW92ZVswXSxcbiAgICAgICAgICByZW1vdmVDb3VudCA9IGVsZW1lbnRzVG9SZW1vdmUubGVuZ3RoLFxuICAgICAgICAgIHBhcmVudCA9IGZpcnN0RWxlbWVudFRvUmVtb3ZlLnBhcmVudE5vZGUsXG4gICAgICAgICAgaSwgaWk7XG5cbiAgICAgIGlmICgkcm9vdEVsZW1lbnQpIHtcbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSAkcm9vdEVsZW1lbnQubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIGlmICgkcm9vdEVsZW1lbnRbaV0gPT09IGZpcnN0RWxlbWVudFRvUmVtb3ZlKSB7XG4gICAgICAgICAgICAkcm9vdEVsZW1lbnRbaSsrXSA9IG5ld05vZGU7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gaSwgajIgPSBqICsgcmVtb3ZlQ291bnQgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgamogPSAkcm9vdEVsZW1lbnQubGVuZ3RoO1xuICAgICAgICAgICAgICAgICBqIDwgamo7IGorKywgajIrKykge1xuICAgICAgICAgICAgICBpZiAoajIgPCBqaikge1xuICAgICAgICAgICAgICAgICRyb290RWxlbWVudFtqXSA9ICRyb290RWxlbWVudFtqMl07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlICRyb290RWxlbWVudFtqXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgJHJvb3RFbGVtZW50Lmxlbmd0aCAtPSByZW1vdmVDb3VudCAtIDE7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSByZXBsYWNlZCBlbGVtZW50IGlzIGFsc28gdGhlIGpRdWVyeSAuY29udGV4dCB0aGVuIHJlcGxhY2UgaXRcbiAgICAgICAgICAgIC8vIC5jb250ZXh0IGlzIGEgZGVwcmVjYXRlZCBqUXVlcnkgYXBpLCBzbyB3ZSBzaG91bGQgc2V0IGl0IG9ubHkgd2hlbiBqUXVlcnkgc2V0IGl0XG4gICAgICAgICAgICAvLyBodHRwOi8vYXBpLmpxdWVyeS5jb20vY29udGV4dC9cbiAgICAgICAgICAgIGlmICgkcm9vdEVsZW1lbnQuY29udGV4dCA9PT0gZmlyc3RFbGVtZW50VG9SZW1vdmUpIHtcbiAgICAgICAgICAgICAgJHJvb3RFbGVtZW50LmNvbnRleHQgPSBuZXdOb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50LnJlcGxhY2VDaGlsZChuZXdOb2RlLCBmaXJzdEVsZW1lbnRUb1JlbW92ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFwcGVuZCBhbGwgdGhlIGBlbGVtZW50c1RvUmVtb3ZlYCB0byBhIGZyYWdtZW50LiBUaGlzIHdpbGwuLi5cbiAgICAgIC8vIC0gcmVtb3ZlIHRoZW0gZnJvbSB0aGUgRE9NXG4gICAgICAvLyAtIGFsbG93IHRoZW0gdG8gc3RpbGwgYmUgdHJhdmVyc2VkIHdpdGggLm5leHRTaWJsaW5nXG4gICAgICAvLyAtIGFsbG93IGEgc2luZ2xlIGZyYWdtZW50LnFTQSB0byBmZXRjaCBhbGwgZWxlbWVudHMgYmVpbmcgcmVtb3ZlZFxuICAgICAgdmFyIGZyYWdtZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCByZW1vdmVDb3VudDsgaSsrKSB7XG4gICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGVsZW1lbnRzVG9SZW1vdmVbaV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoanFMaXRlLmhhc0RhdGEoZmlyc3RFbGVtZW50VG9SZW1vdmUpKSB7XG4gICAgICAgIC8vIENvcHkgb3ZlciB1c2VyIGRhdGEgKHRoYXQgaW5jbHVkZXMgQW5ndWxhcidzICRzY29wZSBldGMuKS4gRG9uJ3QgY29weSBwcml2YXRlXG4gICAgICAgIC8vIGRhdGEgaGVyZSBiZWNhdXNlIHRoZXJlJ3Mgbm8gcHVibGljIGludGVyZmFjZSBpbiBqUXVlcnkgdG8gZG8gdGhhdCBhbmQgY29weWluZyBvdmVyXG4gICAgICAgIC8vIGV2ZW50IGxpc3RlbmVycyAod2hpY2ggaXMgdGhlIG1haW4gdXNlIG9mIHByaXZhdGUgZGF0YSkgd291bGRuJ3Qgd29yayBhbnl3YXkuXG4gICAgICAgIGpxTGl0ZS5kYXRhKG5ld05vZGUsIGpxTGl0ZS5kYXRhKGZpcnN0RWxlbWVudFRvUmVtb3ZlKSk7XG5cbiAgICAgICAgLy8gUmVtb3ZlICRkZXN0cm95IGV2ZW50IGxpc3RlbmVycyBmcm9tIGBmaXJzdEVsZW1lbnRUb1JlbW92ZWBcbiAgICAgICAganFMaXRlKGZpcnN0RWxlbWVudFRvUmVtb3ZlKS5vZmYoJyRkZXN0cm95Jyk7XG4gICAgICB9XG5cbiAgICAgIC8vIENsZWFudXAgYW55IGRhdGEvbGlzdGVuZXJzIG9uIHRoZSBlbGVtZW50cyBhbmQgY2hpbGRyZW4uXG4gICAgICAvLyBUaGlzIGluY2x1ZGVzIGludm9raW5nIHRoZSAkZGVzdHJveSBldmVudCBvbiBhbnkgZWxlbWVudHMgd2l0aCBsaXN0ZW5lcnMuXG4gICAgICBqcUxpdGUuY2xlYW5EYXRhKGZyYWdtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJyonKSk7XG5cbiAgICAgIC8vIFVwZGF0ZSB0aGUganFMaXRlIGNvbGxlY3Rpb24gdG8gb25seSBjb250YWluIHRoZSBgbmV3Tm9kZWBcbiAgICAgIGZvciAoaSA9IDE7IGkgPCByZW1vdmVDb3VudDsgaSsrKSB7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50c1RvUmVtb3ZlW2ldO1xuICAgICAgfVxuICAgICAgZWxlbWVudHNUb1JlbW92ZVswXSA9IG5ld05vZGU7XG4gICAgICBlbGVtZW50c1RvUmVtb3ZlLmxlbmd0aCA9IDE7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBjbG9uZUFuZEFubm90YXRlRm4oZm4sIGFubm90YXRpb24pIHtcbiAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24oKSB7IHJldHVybiBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpOyB9LCBmbiwgYW5ub3RhdGlvbik7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBpbnZva2VMaW5rRm4obGlua0ZuLCBzY29wZSwgJGVsZW1lbnQsIGF0dHJzLCBjb250cm9sbGVycywgdHJhbnNjbHVkZUZuKSB7XG4gICAgICB0cnkge1xuICAgICAgICBsaW5rRm4oc2NvcGUsICRlbGVtZW50LCBhdHRycywgY29udHJvbGxlcnMsIHRyYW5zY2x1ZGVGbik7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUsIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RyaWN0QmluZGluZ3NDaGVjayhhdHRyTmFtZSwgZGlyZWN0aXZlTmFtZSkge1xuICAgICAgaWYgKHN0cmljdENvbXBvbmVudEJpbmRpbmdzRW5hYmxlZCkge1xuICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbWlzc2luZ2F0dHInLFxuICAgICAgICAgICdBdHRyaWJ1dGUgXFwnezB9XFwnIG9mIFxcJ3sxfVxcJyBpcyBub24tb3B0aW9uYWwgYW5kIG11c3QgYmUgc2V0IScsXG4gICAgICAgICAgYXR0ck5hbWUsIGRpcmVjdGl2ZU5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFNldCB1cCAkd2F0Y2hlcyBmb3IgaXNvbGF0ZSBzY29wZSBhbmQgY29udHJvbGxlciBiaW5kaW5ncy5cbiAgICBmdW5jdGlvbiBpbml0aWFsaXplRGlyZWN0aXZlQmluZGluZ3Moc2NvcGUsIGF0dHJzLCBkZXN0aW5hdGlvbiwgYmluZGluZ3MsIGRpcmVjdGl2ZSkge1xuICAgICAgdmFyIHJlbW92ZVdhdGNoQ29sbGVjdGlvbiA9IFtdO1xuICAgICAgdmFyIGluaXRpYWxDaGFuZ2VzID0ge307XG4gICAgICB2YXIgY2hhbmdlcztcblxuICAgICAgZm9yRWFjaChiaW5kaW5ncywgZnVuY3Rpb24gaW5pdGlhbGl6ZUJpbmRpbmcoZGVmaW5pdGlvbiwgc2NvcGVOYW1lKSB7XG4gICAgICAgIHZhciBhdHRyTmFtZSA9IGRlZmluaXRpb24uYXR0ck5hbWUsXG4gICAgICAgIG9wdGlvbmFsID0gZGVmaW5pdGlvbi5vcHRpb25hbCxcbiAgICAgICAgbW9kZSA9IGRlZmluaXRpb24ubW9kZSwgLy8gQCwgPSwgPCwgb3IgJlxuICAgICAgICBsYXN0VmFsdWUsXG4gICAgICAgIHBhcmVudEdldCwgcGFyZW50U2V0LCBjb21wYXJlLCByZW1vdmVXYXRjaDtcblxuICAgICAgICBzd2l0Y2ggKG1vZGUpIHtcblxuICAgICAgICAgIGNhc2UgJ0AnOlxuICAgICAgICAgICAgaWYgKCFvcHRpb25hbCAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChhdHRycywgYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgIHN0cmljdEJpbmRpbmdzQ2hlY2soYXR0ck5hbWUsIGRpcmVjdGl2ZS5uYW1lKTtcbiAgICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IGF0dHJzW2F0dHJOYW1lXSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVtb3ZlV2F0Y2ggPSBhdHRycy4kb2JzZXJ2ZShhdHRyTmFtZSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKGlzU3RyaW5nKHZhbHVlKSB8fCBpc0Jvb2xlYW4odmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gZGVzdGluYXRpb25bc2NvcGVOYW1lXTtcbiAgICAgICAgICAgICAgICByZWNvcmRDaGFuZ2VzKHNjb3BlTmFtZSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYXR0cnMuJCRvYnNlcnZlcnNbYXR0ck5hbWVdLiQkc2NvcGUgPSBzY29wZTtcbiAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGF0dHJzW2F0dHJOYW1lXTtcbiAgICAgICAgICAgIGlmIChpc1N0cmluZyhsYXN0VmFsdWUpKSB7XG4gICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaGFzIGJlZW4gcHJvdmlkZWQgdGhlbiB3ZSB0cmlnZ2VyIGFuIGludGVycG9sYXRpb24gdG8gZW5zdXJlXG4gICAgICAgICAgICAgIC8vIHRoZSB2YWx1ZSBpcyB0aGVyZSBmb3IgdXNlIGluIHRoZSBsaW5rIGZuXG4gICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSAkaW50ZXJwb2xhdGUobGFzdFZhbHVlKShzY29wZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQm9vbGVhbihsYXN0VmFsdWUpKSB7XG4gICAgICAgICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGVzIGlzIG9uZSBvZiB0aGUgQk9PTEVBTl9BVFRSIHRoZW4gQW5ndWxhciB3aWxsIGhhdmUgY29udmVydGVkXG4gICAgICAgICAgICAgIC8vIHRoZSB2YWx1ZSB0byBib29sZWFuIHJhdGhlciB0aGFuIGEgc3RyaW5nLCBzbyB3ZSBzcGVjaWFsIGNhc2UgdGhpcyBzaXR1YXRpb25cbiAgICAgICAgICAgICAgZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IGxhc3RWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGluaXRpYWxDaGFuZ2VzW3Njb3BlTmFtZV0gPSBuZXcgU2ltcGxlQ2hhbmdlKF9VTklOSVRJQUxJWkVEX1ZBTFVFLCBkZXN0aW5hdGlvbltzY29wZU5hbWVdKTtcbiAgICAgICAgICAgIHJlbW92ZVdhdGNoQ29sbGVjdGlvbi5wdXNoKHJlbW92ZVdhdGNoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnPSc6XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwoYXR0cnMsIGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICBpZiAob3B0aW9uYWwpIGJyZWFrO1xuICAgICAgICAgICAgICBzdHJpY3RCaW5kaW5nc0NoZWNrKGF0dHJOYW1lLCBkaXJlY3RpdmUubmFtZSk7XG4gICAgICAgICAgICAgIGF0dHJzW2F0dHJOYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25hbCAmJiAhYXR0cnNbYXR0ck5hbWVdKSBicmVhaztcblxuICAgICAgICAgICAgcGFyZW50R2V0ID0gJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSk7XG4gICAgICAgICAgICBpZiAocGFyZW50R2V0LmxpdGVyYWwpIHtcbiAgICAgICAgICAgICAgY29tcGFyZSA9IGVxdWFscztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbXBhcmUgPSBzaW1wbGVDb21wYXJlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGFyZW50U2V0ID0gcGFyZW50R2V0LmFzc2lnbiB8fCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgLy8gcmVzZXQgdGhlIGNoYW5nZSwgb3Igd2Ugd2lsbCB0aHJvdyB0aGlzIGV4Y2VwdGlvbiBvbiBldmVyeSAkZGlnZXN0XG4gICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSBwYXJlbnRHZXQoc2NvcGUpO1xuICAgICAgICAgICAgICB0aHJvdyAkY29tcGlsZU1pbkVycignbm9uYXNzaWduJyxcbiAgICAgICAgICAgICAgICAgICdFeHByZXNzaW9uIFxcJ3swfVxcJyBpbiBhdHRyaWJ1dGUgXFwnezF9XFwnIHVzZWQgd2l0aCBkaXJlY3RpdmUgXFwnezJ9XFwnIGlzIG5vbi1hc3NpZ25hYmxlIScsXG4gICAgICAgICAgICAgICAgICBhdHRyc1thdHRyTmFtZV0sIGF0dHJOYW1lLCBkaXJlY3RpdmUubmFtZSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgbGFzdFZhbHVlID0gZGVzdGluYXRpb25bc2NvcGVOYW1lXSA9IHBhcmVudEdldChzY29wZSk7XG4gICAgICAgICAgICB2YXIgcGFyZW50VmFsdWVXYXRjaCA9IGZ1bmN0aW9uIHBhcmVudFZhbHVlV2F0Y2gocGFyZW50VmFsdWUpIHtcbiAgICAgICAgICAgICAgaWYgKCFjb21wYXJlKHBhcmVudFZhbHVlLCBkZXN0aW5hdGlvbltzY29wZU5hbWVdKSkge1xuICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBvdXQgb2Ygc3luYyBhbmQgbmVlZCB0byBjb3B5XG4gICAgICAgICAgICAgICAgaWYgKCFjb21wYXJlKHBhcmVudFZhbHVlLCBsYXN0VmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAvLyBwYXJlbnQgY2hhbmdlZCBhbmQgaXQgaGFzIHByZWNlZGVuY2VcbiAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSBwYXJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy8gaWYgdGhlIHBhcmVudCBjYW4gYmUgYXNzaWduZWQgdGhlbiBkbyBzb1xuICAgICAgICAgICAgICAgICAgcGFyZW50U2V0KHNjb3BlLCBwYXJlbnRWYWx1ZSA9IGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsYXN0VmFsdWUgPSBwYXJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgcmV0dXJuIGxhc3RWYWx1ZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwYXJlbnRWYWx1ZVdhdGNoLiRzdGF0ZWZ1bCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoZGVmaW5pdGlvbi5jb2xsZWN0aW9uKSB7XG4gICAgICAgICAgICAgIHJlbW92ZVdhdGNoID0gc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihhdHRyc1thdHRyTmFtZV0sIHBhcmVudFZhbHVlV2F0Y2gpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVtb3ZlV2F0Y2ggPSBzY29wZS4kd2F0Y2goJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSwgcGFyZW50VmFsdWVXYXRjaCksIG51bGwsIHBhcmVudEdldC5saXRlcmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlbW92ZVdhdGNoQ29sbGVjdGlvbi5wdXNoKHJlbW92ZVdhdGNoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnPCc6XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwoYXR0cnMsIGF0dHJOYW1lKSkge1xuICAgICAgICAgICAgICBpZiAob3B0aW9uYWwpIGJyZWFrO1xuICAgICAgICAgICAgICBzdHJpY3RCaW5kaW5nc0NoZWNrKGF0dHJOYW1lLCBkaXJlY3RpdmUubmFtZSk7XG4gICAgICAgICAgICAgIGF0dHJzW2F0dHJOYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25hbCAmJiAhYXR0cnNbYXR0ck5hbWVdKSBicmVhaztcblxuICAgICAgICAgICAgcGFyZW50R2V0ID0gJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSk7XG4gICAgICAgICAgICB2YXIgZGVlcFdhdGNoID0gcGFyZW50R2V0LmxpdGVyYWw7XG5cbiAgICAgICAgICAgIHZhciBpbml0aWFsVmFsdWUgPSBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gcGFyZW50R2V0KHNjb3BlKTtcbiAgICAgICAgICAgIGluaXRpYWxDaGFuZ2VzW3Njb3BlTmFtZV0gPSBuZXcgU2ltcGxlQ2hhbmdlKF9VTklOSVRJQUxJWkVEX1ZBTFVFLCBkZXN0aW5hdGlvbltzY29wZU5hbWVdKTtcblxuICAgICAgICAgICAgcmVtb3ZlV2F0Y2ggPSBzY29wZS4kd2F0Y2gocGFyZW50R2V0LCBmdW5jdGlvbiBwYXJlbnRWYWx1ZVdhdGNoQWN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICBpZiAob2xkVmFsdWUgPT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9sZFZhbHVlID09PSBpbml0aWFsVmFsdWUgfHwgKGRlZXBXYXRjaCAmJiBlcXVhbHMob2xkVmFsdWUsIGluaXRpYWxWYWx1ZSkpKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlY29yZENoYW5nZXMoc2NvcGVOYW1lLCBuZXdWYWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICAgICAgICBkZXN0aW5hdGlvbltzY29wZU5hbWVdID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB9LCBkZWVwV2F0Y2gpO1xuXG4gICAgICAgICAgICByZW1vdmVXYXRjaENvbGxlY3Rpb24ucHVzaChyZW1vdmVXYXRjaCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJyYnOlxuICAgICAgICAgICAgaWYgKCFvcHRpb25hbCAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChhdHRycywgYXR0ck5hbWUpKSB7XG4gICAgICAgICAgICAgIHN0cmljdEJpbmRpbmdzQ2hlY2soYXR0ck5hbWUsIGRpcmVjdGl2ZS5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIERvbid0IGFzc2lnbiBPYmplY3QucHJvdG90eXBlIG1ldGhvZCB0byBzY29wZVxuICAgICAgICAgICAgcGFyZW50R2V0ID0gYXR0cnMuaGFzT3duUHJvcGVydHkoYXR0ck5hbWUpID8gJHBhcnNlKGF0dHJzW2F0dHJOYW1lXSkgOiBub29wO1xuXG4gICAgICAgICAgICAvLyBEb24ndCBhc3NpZ24gbm9vcCB0byBkZXN0aW5hdGlvbiBpZiBleHByZXNzaW9uIGlzIG5vdCB2YWxpZFxuICAgICAgICAgICAgaWYgKHBhcmVudEdldCA9PT0gbm9vcCAmJiBvcHRpb25hbCkgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Njb3BlTmFtZV0gPSBmdW5jdGlvbihsb2NhbHMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHBhcmVudEdldChzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIHJlY29yZENoYW5nZXMoa2V5LCBjdXJyZW50VmFsdWUsIHByZXZpb3VzVmFsdWUpIHtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oZGVzdGluYXRpb24uJG9uQ2hhbmdlcykgJiYgIXNpbXBsZUNvbXBhcmUoY3VycmVudFZhbHVlLCBwcmV2aW91c1ZhbHVlKSkge1xuICAgICAgICAgIC8vIElmIHdlIGhhdmUgbm90IGFscmVhZHkgc2NoZWR1bGVkIHRoZSB0b3AgbGV2ZWwgb25DaGFuZ2VzUXVldWUgaGFuZGxlciB0aGVuIGRvIHNvIG5vd1xuICAgICAgICAgIGlmICghb25DaGFuZ2VzUXVldWUpIHtcbiAgICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmbHVzaE9uQ2hhbmdlc1F1ZXVlKTtcbiAgICAgICAgICAgIG9uQ2hhbmdlc1F1ZXVlID0gW107XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIElmIHdlIGhhdmUgbm90IGFscmVhZHkgcXVldWVkIGEgdHJpZ2dlciBvZiBvbkNoYW5nZXMgZm9yIHRoaXMgY29udHJvbGxlciB0aGVuIGRvIHNvIG5vd1xuICAgICAgICAgIGlmICghY2hhbmdlcykge1xuICAgICAgICAgICAgY2hhbmdlcyA9IHt9O1xuICAgICAgICAgICAgb25DaGFuZ2VzUXVldWUucHVzaCh0cmlnZ2VyT25DaGFuZ2VzSG9vayk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIElmIHRoZSBoYXMgYmVlbiBhIGNoYW5nZSBvbiB0aGlzIHByb3BlcnR5IGFscmVhZHkgdGhlbiB3ZSBuZWVkIHRvIHJldXNlIHRoZSBwcmV2aW91cyB2YWx1ZVxuICAgICAgICAgIGlmIChjaGFuZ2VzW2tleV0pIHtcbiAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSBjaGFuZ2VzW2tleV0ucHJldmlvdXNWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gU3RvcmUgdGhpcyBjaGFuZ2VcbiAgICAgICAgICBjaGFuZ2VzW2tleV0gPSBuZXcgU2ltcGxlQ2hhbmdlKHByZXZpb3VzVmFsdWUsIGN1cnJlbnRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdHJpZ2dlck9uQ2hhbmdlc0hvb2soKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uLiRvbkNoYW5nZXMoY2hhbmdlcyk7XG4gICAgICAgIC8vIE5vdyBjbGVhciB0aGUgY2hhbmdlcyBzbyB0aGF0IHdlIHNjaGVkdWxlIG9uQ2hhbmdlcyB3aGVuIG1vcmUgY2hhbmdlcyBhcnJpdmVcbiAgICAgICAgY2hhbmdlcyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdGlhbENoYW5nZXM6IGluaXRpYWxDaGFuZ2VzLFxuICAgICAgICByZW1vdmVXYXRjaGVzOiByZW1vdmVXYXRjaENvbGxlY3Rpb24ubGVuZ3RoICYmIGZ1bmN0aW9uIHJlbW92ZVdhdGNoZXMoKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcmVtb3ZlV2F0Y2hDb2xsZWN0aW9uLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgICAgIHJlbW92ZVdhdGNoQ29sbGVjdGlvbltpXSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1dO1xufVxuXG5mdW5jdGlvbiBTaW1wbGVDaGFuZ2UocHJldmlvdXMsIGN1cnJlbnQpIHtcbiAgdGhpcy5wcmV2aW91c1ZhbHVlID0gcHJldmlvdXM7XG4gIHRoaXMuY3VycmVudFZhbHVlID0gY3VycmVudDtcbn1cblNpbXBsZUNoYW5nZS5wcm90b3R5cGUuaXNGaXJzdENoYW5nZSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcy5wcmV2aW91c1ZhbHVlID09PSBfVU5JTklUSUFMSVpFRF9WQUxVRTsgfTtcblxuXG52YXIgUFJFRklYX1JFR0VYUCA9IC9eKCg/Onh8ZGF0YSlbOlxcLV9dKS9pO1xudmFyIFNQRUNJQUxfQ0hBUlNfUkVHRVhQID0gL1s6XFwtX10rKC4pL2c7XG5cbi8qKlxuICogQ29udmVydHMgYWxsIGFjY2VwdGVkIGRpcmVjdGl2ZXMgZm9ybWF0IGludG8gcHJvcGVyIGRpcmVjdGl2ZSBuYW1lLlxuICogQHBhcmFtIG5hbWUgTmFtZSB0byBub3JtYWxpemVcbiAqL1xuZnVuY3Rpb24gZGlyZWN0aXZlTm9ybWFsaXplKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWVcbiAgICAucmVwbGFjZShQUkVGSVhfUkVHRVhQLCAnJylcbiAgICAucmVwbGFjZShTUEVDSUFMX0NIQVJTX1JFR0VYUCwgZm5DYW1lbENhc2VSZXBsYWNlKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgJGNvbXBpbGUuZGlyZWN0aXZlLkF0dHJpYnV0ZXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgc2hhcmVkIG9iamVjdCBiZXR3ZWVuIGRpcmVjdGl2ZSBjb21waWxlIC8gbGlua2luZyBmdW5jdGlvbnMgd2hpY2ggY29udGFpbnMgbm9ybWFsaXplZCBET01cbiAqIGVsZW1lbnQgYXR0cmlidXRlcy4gVGhlIHZhbHVlcyByZWZsZWN0IGN1cnJlbnQgYmluZGluZyBzdGF0ZSBge3sgfX1gLiBUaGUgbm9ybWFsaXphdGlvbiBpc1xuICogbmVlZGVkIHNpbmNlIGFsbCBvZiB0aGVzZSBhcmUgdHJlYXRlZCBhcyBlcXVpdmFsZW50IGluIEFuZ3VsYXI6XG4gKlxuICogYGBgXG4gKiAgICA8c3BhbiBuZzpiaW5kPVwiYVwiIG5nLWJpbmQ9XCJhXCIgZGF0YS1uZy1iaW5kPVwiYVwiIHgtbmctYmluZD1cImFcIj5cbiAqIGBgYFxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3BlcnR5XG4gKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYXR0clxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBtYXAgb2YgRE9NIGVsZW1lbnQgYXR0cmlidXRlIG5hbWVzIHRvIHRoZSBub3JtYWxpemVkIG5hbWUuIFRoaXMgaXNcbiAqIG5lZWRlZCB0byBkbyByZXZlcnNlIGxvb2t1cCBmcm9tIG5vcm1hbGl6ZWQgbmFtZSBiYWNrIHRvIGFjdHVhbCBuYW1lLlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgbWV0aG9kXG4gKiBAbmFtZSAkY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkc2V0XG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2V0IERPTSBlbGVtZW50IGF0dHJpYnV0ZSB2YWx1ZS5cbiAqXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgTm9ybWFsaXplZCBlbGVtZW50IGF0dHJpYnV0ZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBtb2RpZnkuIFRoZSBuYW1lIGlzXG4gKiAgICAgICAgICByZXZlcnNlLXRyYW5zbGF0ZWQgdXNpbmcgdGhlIHtAbGluayBuZy4kY29tcGlsZS5kaXJlY3RpdmUuQXR0cmlidXRlcyMkYXR0ciAkYXR0cn1cbiAqICAgICAgICAgIHByb3BlcnR5IHRvIHRoZSBvcmlnaW5hbCBuYW1lLlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIFZhbHVlIHRvIHNldCB0aGUgYXR0cmlidXRlIHRvLiBUaGUgdmFsdWUgY2FuIGJlIGFuIGludGVycG9sYXRlZCBzdHJpbmcuXG4gKi9cblxuXG5cbi8qKlxuICogQ2xvc3VyZSBjb21waWxlciB0eXBlIGluZm9ybWF0aW9uXG4gKi9cblxuZnVuY3Rpb24gbm9kZXNldExpbmtpbmdGbihcbiAgLyogYW5ndWxhci5TY29wZSAqLyBzY29wZSxcbiAgLyogTm9kZUxpc3QgKi8gbm9kZUxpc3QsXG4gIC8qIEVsZW1lbnQgKi8gcm9vdEVsZW1lbnQsXG4gIC8qIGZ1bmN0aW9uKEZ1bmN0aW9uKSAqLyBib3VuZFRyYW5zY2x1ZGVGblxuKSB7fVxuXG5mdW5jdGlvbiBkaXJlY3RpdmVMaW5raW5nRm4oXG4gIC8qIG5vZGVzZXRMaW5raW5nRm4gKi8gbm9kZXNldExpbmtpbmdGbixcbiAgLyogYW5ndWxhci5TY29wZSAqLyBzY29wZSxcbiAgLyogTm9kZSAqLyBub2RlLFxuICAvKiBFbGVtZW50ICovIHJvb3RFbGVtZW50LFxuICAvKiBmdW5jdGlvbihGdW5jdGlvbikgKi8gYm91bmRUcmFuc2NsdWRlRm5cbikge31cblxuZnVuY3Rpb24gdG9rZW5EaWZmZXJlbmNlKHN0cjEsIHN0cjIpIHtcbiAgdmFyIHZhbHVlcyA9ICcnLFxuICAgICAgdG9rZW5zMSA9IHN0cjEuc3BsaXQoL1xccysvKSxcbiAgICAgIHRva2VuczIgPSBzdHIyLnNwbGl0KC9cXHMrLyk7XG5cbiAgb3V0ZXI6XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zMS5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2VuczFbaV07XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0b2tlbnMyLmxlbmd0aDsgaisrKSB7XG4gICAgICBpZiAodG9rZW4gPT09IHRva2VuczJbal0pIGNvbnRpbnVlIG91dGVyO1xuICAgIH1cbiAgICB2YWx1ZXMgKz0gKHZhbHVlcy5sZW5ndGggPiAwID8gJyAnIDogJycpICsgdG9rZW47XG4gIH1cbiAgcmV0dXJuIHZhbHVlcztcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ29tbWVudHMoanFOb2Rlcykge1xuICBqcU5vZGVzID0ganFMaXRlKGpxTm9kZXMpO1xuICB2YXIgaSA9IGpxTm9kZXMubGVuZ3RoO1xuXG4gIGlmIChpIDw9IDEpIHtcbiAgICByZXR1cm4ganFOb2RlcztcbiAgfVxuXG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIgbm9kZSA9IGpxTm9kZXNbaV07XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IE5PREVfVFlQRV9DT01NRU5UIHx8XG4gICAgICAgKG5vZGUubm9kZVR5cGUgPT09IE5PREVfVFlQRV9URVhUICYmIG5vZGUubm9kZVZhbHVlLnRyaW0oKSA9PT0gJycpKSB7XG4gICAgICAgICBzcGxpY2UuY2FsbChqcU5vZGVzLCBpLCAxKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGpxTm9kZXM7XG59XG5cbnZhciAkY29udHJvbGxlck1pbkVyciA9IG1pbkVycignJGNvbnRyb2xsZXInKTtcblxuXG52YXIgQ05UUkxfUkVHID0gL14oXFxTKykoXFxzK2FzXFxzKyhbXFx3JF0rKSk/JC87XG5mdW5jdGlvbiBpZGVudGlmaWVyRm9yQ29udHJvbGxlcihjb250cm9sbGVyLCBpZGVudCkge1xuICBpZiAoaWRlbnQgJiYgaXNTdHJpbmcoaWRlbnQpKSByZXR1cm4gaWRlbnQ7XG4gIGlmIChpc1N0cmluZyhjb250cm9sbGVyKSkge1xuICAgIHZhciBtYXRjaCA9IENOVFJMX1JFRy5leGVjKGNvbnRyb2xsZXIpO1xuICAgIGlmIChtYXRjaCkgcmV0dXJuIG1hdGNoWzNdO1xuICB9XG59XG5cblxuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRjb250cm9sbGVyUHJvdmlkZXJcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUge0BsaW5rIG5nLiRjb250cm9sbGVyICRjb250cm9sbGVyIHNlcnZpY2V9IGlzIHVzZWQgYnkgQW5ndWxhciB0byBjcmVhdGUgbmV3XG4gKiBjb250cm9sbGVycy5cbiAqXG4gKiBUaGlzIHByb3ZpZGVyIGFsbG93cyBjb250cm9sbGVyIHJlZ2lzdHJhdGlvbiB2aWEgdGhlXG4gKiB7QGxpbmsgbmcuJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlciByZWdpc3Rlcn0gbWV0aG9kLlxuICovXG5mdW5jdGlvbiAkQ29udHJvbGxlclByb3ZpZGVyKCkge1xuICB2YXIgY29udHJvbGxlcnMgPSB7fSxcbiAgICAgIGdsb2JhbHMgPSBmYWxzZTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29udHJvbGxlclByb3ZpZGVyI2hhc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBDb250cm9sbGVyIG5hbWUgdG8gY2hlY2suXG4gICAqL1xuICB0aGlzLmhhcyA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gY29udHJvbGxlcnMuaGFzT3duUHJvcGVydHkobmFtZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGNvbnRyb2xsZXJQcm92aWRlciNyZWdpc3RlclxuICAgKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R9IG5hbWUgQ29udHJvbGxlciBuYW1lLCBvciBhbiBvYmplY3QgbWFwIG9mIGNvbnRyb2xsZXJzIHdoZXJlIHRoZSBrZXlzIGFyZVxuICAgKiAgICB0aGUgbmFtZXMgYW5kIHRoZSB2YWx1ZXMgYXJlIHRoZSBjb25zdHJ1Y3RvcnMuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb258QXJyYXl9IGNvbnN0cnVjdG9yIENvbnRyb2xsZXIgY29uc3RydWN0b3IgZm4gKG9wdGlvbmFsbHkgZGVjb3JhdGVkIHdpdGggRElcbiAgICogICAgYW5ub3RhdGlvbnMgaW4gdGhlIGFycmF5IG5vdGF0aW9uKS5cbiAgICovXG4gIHRoaXMucmVnaXN0ZXIgPSBmdW5jdGlvbihuYW1lLCBjb25zdHJ1Y3Rvcikge1xuICAgIGFzc2VydE5vdEhhc093blByb3BlcnR5KG5hbWUsICdjb250cm9sbGVyJyk7XG4gICAgaWYgKGlzT2JqZWN0KG5hbWUpKSB7XG4gICAgICBleHRlbmQoY29udHJvbGxlcnMsIG5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250cm9sbGVyc1tuYW1lXSA9IGNvbnN0cnVjdG9yO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFsc1xuICAgKiBAZGVzY3JpcHRpb24gSWYgY2FsbGVkLCBhbGxvd3MgYCRjb250cm9sbGVyYCB0byBmaW5kIGNvbnRyb2xsZXIgY29uc3RydWN0b3JzIG9uIGB3aW5kb3dgXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIHNpbmNlVmVyc2lvbj1cInYxLjMuMFwiXG4gICAqIHJlbW92ZVZlcnNpb249XCJ2MS43LjBcIlxuICAgKiBUaGlzIG1ldGhvZCBvZiBmaW5kaW5nIGNvbnRyb2xsZXJzIGhhcyBiZWVuIGRlcHJlY2F0ZWQuXG4gICAqL1xuICB0aGlzLmFsbG93R2xvYmFscyA9IGZ1bmN0aW9uKCkge1xuICAgIGdsb2JhbHMgPSB0cnVlO1xuICB9O1xuXG5cbiAgdGhpcy4kZ2V0ID0gWyckaW5qZWN0b3InLCAnJHdpbmRvdycsIGZ1bmN0aW9uKCRpbmplY3RvciwgJHdpbmRvdykge1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHNlcnZpY2VcbiAgICAgKiBAbmFtZSAkY29udHJvbGxlclxuICAgICAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258c3RyaW5nfSBjb25zdHJ1Y3RvciBJZiBjYWxsZWQgd2l0aCBhIGZ1bmN0aW9uIHRoZW4gaXQncyBjb25zaWRlcmVkIHRvIGJlIHRoZVxuICAgICAqICAgIGNvbnRyb2xsZXIgY29uc3RydWN0b3IgZnVuY3Rpb24uIE90aGVyd2lzZSBpdCdzIGNvbnNpZGVyZWQgdG8gYmUgYSBzdHJpbmcgd2hpY2ggaXMgdXNlZFxuICAgICAqICAgIHRvIHJldHJpZXZlIHRoZSBjb250cm9sbGVyIGNvbnN0cnVjdG9yIHVzaW5nIHRoZSBmb2xsb3dpbmcgc3RlcHM6XG4gICAgICpcbiAgICAgKiAgICAqIGNoZWNrIGlmIGEgY29udHJvbGxlciB3aXRoIGdpdmVuIG5hbWUgaXMgcmVnaXN0ZXJlZCB2aWEgYCRjb250cm9sbGVyUHJvdmlkZXJgXG4gICAgICogICAgKiBjaGVjayBpZiBldmFsdWF0aW5nIHRoZSBzdHJpbmcgb24gdGhlIGN1cnJlbnQgc2NvcGUgcmV0dXJucyBhIGNvbnN0cnVjdG9yXG4gICAgICogICAgKiBpZiAkY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFscywgY2hlY2sgYHdpbmRvd1tjb25zdHJ1Y3Rvcl1gIG9uIHRoZSBnbG9iYWxcbiAgICAgKiAgICAgIGB3aW5kb3dgIG9iamVjdCAoZGVwcmVjYXRlZCwgbm90IHJlY29tbWVuZGVkKVxuICAgICAqXG4gICAgICogICAgVGhlIHN0cmluZyBjYW4gdXNlIHRoZSBgY29udHJvbGxlciBhcyBwcm9wZXJ0eWAgc3ludGF4LCB3aGVyZSB0aGUgY29udHJvbGxlciBpbnN0YW5jZSBpcyBwdWJsaXNoZWRcbiAgICAgKiAgICBhcyB0aGUgc3BlY2lmaWVkIHByb3BlcnR5IG9uIHRoZSBgc2NvcGVgOyB0aGUgYHNjb3BlYCBtdXN0IGJlIGluamVjdGVkIGludG8gYGxvY2Fsc2AgcGFyYW0gZm9yIHRoaXNcbiAgICAgKiAgICB0byB3b3JrIGNvcnJlY3RseS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBsb2NhbHMgSW5qZWN0aW9uIGxvY2FscyBmb3IgQ29udHJvbGxlci5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEluc3RhbmNlIG9mIGdpdmVuIGNvbnRyb2xsZXIuXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBgJGNvbnRyb2xsZXJgIHNlcnZpY2UgaXMgcmVzcG9uc2libGUgZm9yIGluc3RhbnRpYXRpbmcgY29udHJvbGxlcnMuXG4gICAgICpcbiAgICAgKiBJdCdzIGp1c3QgYSBzaW1wbGUgY2FsbCB0byB7QGxpbmsgYXV0by4kaW5qZWN0b3IgJGluamVjdG9yfSwgYnV0IGV4dHJhY3RlZCBpbnRvXG4gICAgICogYSBzZXJ2aWNlLCBzbyB0aGF0IG9uZSBjYW4gb3ZlcnJpZGUgdGhpcyBzZXJ2aWNlIHdpdGggW0JDIHZlcnNpb25dKGh0dHBzOi8vZ2lzdC5naXRodWIuY29tLzE2NDk3ODgpLlxuICAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiAkY29udHJvbGxlcihleHByZXNzaW9uLCBsb2NhbHMsIGxhdGVyLCBpZGVudCkge1xuICAgICAgLy8gUFJJVkFURSBBUEk6XG4gICAgICAvLyAgIHBhcmFtIGBsYXRlcmAgLS0tIGluZGljYXRlcyB0aGF0IHRoZSBjb250cm9sbGVyJ3MgY29uc3RydWN0b3IgaXMgaW52b2tlZCBhdCBhIGxhdGVyIHRpbWUuXG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgIElmIHRydWUsICRjb250cm9sbGVyIHdpbGwgYWxsb2NhdGUgdGhlIG9iamVjdCB3aXRoIHRoZSBjb3JyZWN0XG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgIHByb3RvdHlwZSBjaGFpbiwgYnV0IHdpbGwgbm90IGludm9rZSB0aGUgY29udHJvbGxlciB1bnRpbCBhIHJldHVybmVkXG4gICAgICAvLyAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrIGlzIGludm9rZWQuXG4gICAgICAvLyAgIHBhcmFtIGBpZGVudGAgLS0tIEFuIG9wdGlvbmFsIGxhYmVsIHdoaWNoIG92ZXJyaWRlcyB0aGUgbGFiZWwgcGFyc2VkIGZyb20gdGhlIGNvbnRyb2xsZXJcbiAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbiwgaWYgYW55LlxuICAgICAgdmFyIGluc3RhbmNlLCBtYXRjaCwgY29uc3RydWN0b3IsIGlkZW50aWZpZXI7XG4gICAgICBsYXRlciA9IGxhdGVyID09PSB0cnVlO1xuICAgICAgaWYgKGlkZW50ICYmIGlzU3RyaW5nKGlkZW50KSkge1xuICAgICAgICBpZGVudGlmaWVyID0gaWRlbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1N0cmluZyhleHByZXNzaW9uKSkge1xuICAgICAgICBtYXRjaCA9IGV4cHJlc3Npb24ubWF0Y2goQ05UUkxfUkVHKTtcbiAgICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICAgIHRocm93ICRjb250cm9sbGVyTWluRXJyKCdjdHJsZm10JyxcbiAgICAgICAgICAgICdCYWRseSBmb3JtZWQgY29udHJvbGxlciBzdHJpbmcgXFwnezB9XFwnLiAnICtcbiAgICAgICAgICAgICdNdXN0IG1hdGNoIGBfX25hbWVfXyBhcyBfX2lkX19gIG9yIGBfX25hbWVfX2AuJywgZXhwcmVzc2lvbik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3RydWN0b3IgPSBtYXRjaFsxXTtcbiAgICAgICAgaWRlbnRpZmllciA9IGlkZW50aWZpZXIgfHwgbWF0Y2hbM107XG4gICAgICAgIGV4cHJlc3Npb24gPSBjb250cm9sbGVycy5oYXNPd25Qcm9wZXJ0eShjb25zdHJ1Y3RvcilcbiAgICAgICAgICAgID8gY29udHJvbGxlcnNbY29uc3RydWN0b3JdXG4gICAgICAgICAgICA6IGdldHRlcihsb2NhbHMuJHNjb3BlLCBjb25zdHJ1Y3RvciwgdHJ1ZSkgfHxcbiAgICAgICAgICAgICAgICAoZ2xvYmFscyA/IGdldHRlcigkd2luZG93LCBjb25zdHJ1Y3RvciwgdHJ1ZSkgOiB1bmRlZmluZWQpO1xuXG4gICAgICAgIGlmICghZXhwcmVzc2lvbikge1xuICAgICAgICAgIHRocm93ICRjb250cm9sbGVyTWluRXJyKCdjdHJscmVnJyxcbiAgICAgICAgICAgICdUaGUgY29udHJvbGxlciB3aXRoIHRoZSBuYW1lIFxcJ3swfVxcJyBpcyBub3QgcmVnaXN0ZXJlZC4nLCBjb25zdHJ1Y3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBhc3NlcnRBcmdGbihleHByZXNzaW9uLCBjb25zdHJ1Y3RvciwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChsYXRlcikge1xuICAgICAgICAvLyBJbnN0YW50aWF0ZSBjb250cm9sbGVyIGxhdGVyOlxuICAgICAgICAvLyBUaGlzIG1hY2hpbmVyeSBpcyB1c2VkIHRvIGNyZWF0ZSBhbiBpbnN0YW5jZSBvZiB0aGUgb2JqZWN0IGJlZm9yZSBjYWxsaW5nIHRoZVxuICAgICAgICAvLyBjb250cm9sbGVyJ3MgY29uc3RydWN0b3IgaXRzZWxmLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGlzIGFsbG93cyBwcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIHRoZSBjb250cm9sbGVyIGJlZm9yZSB0aGUgY29uc3RydWN0b3IgaXNcbiAgICAgICAgLy8gaW52b2tlZC4gUHJpbWFyaWx5LCB0aGlzIGlzIHVzZWQgZm9yIGlzb2xhdGUgc2NvcGUgYmluZGluZ3MgaW4gJGNvbXBpbGUuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFRoaXMgZmVhdHVyZSBpcyBub3QgaW50ZW5kZWQgZm9yIHVzZSBieSBhcHBsaWNhdGlvbnMsIGFuZCBpcyB0aHVzIG5vdCBkb2N1bWVudGVkXG4gICAgICAgIC8vIHB1YmxpY2x5LlxuICAgICAgICAvLyBPYmplY3QgY3JlYXRpb246IGh0dHA6Ly9qc3BlcmYuY29tL2NyZWF0ZS1jb25zdHJ1Y3Rvci8yXG4gICAgICAgIHZhciBjb250cm9sbGVyUHJvdG90eXBlID0gKGlzQXJyYXkoZXhwcmVzc2lvbikgP1xuICAgICAgICAgIGV4cHJlc3Npb25bZXhwcmVzc2lvbi5sZW5ndGggLSAxXSA6IGV4cHJlc3Npb24pLnByb3RvdHlwZTtcbiAgICAgICAgaW5zdGFuY2UgPSBPYmplY3QuY3JlYXRlKGNvbnRyb2xsZXJQcm90b3R5cGUgfHwgbnVsbCk7XG5cbiAgICAgICAgaWYgKGlkZW50aWZpZXIpIHtcbiAgICAgICAgICBhZGRJZGVudGlmaWVyKGxvY2FscywgaWRlbnRpZmllciwgaW5zdGFuY2UsIGNvbnN0cnVjdG9yIHx8IGV4cHJlc3Npb24ubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXh0ZW5kKGZ1bmN0aW9uICRjb250cm9sbGVySW5pdCgpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gJGluamVjdG9yLmludm9rZShleHByZXNzaW9uLCBpbnN0YW5jZSwgbG9jYWxzLCBjb25zdHJ1Y3Rvcik7XG4gICAgICAgICAgaWYgKHJlc3VsdCAhPT0gaW5zdGFuY2UgJiYgKGlzT2JqZWN0KHJlc3VsdCkgfHwgaXNGdW5jdGlvbihyZXN1bHQpKSkge1xuICAgICAgICAgICAgaW5zdGFuY2UgPSByZXN1bHQ7XG4gICAgICAgICAgICBpZiAoaWRlbnRpZmllcikge1xuICAgICAgICAgICAgICAvLyBJZiByZXN1bHQgY2hhbmdlZCwgcmUtYXNzaWduIGNvbnRyb2xsZXJBcyB2YWx1ZSB0byBzY29wZS5cbiAgICAgICAgICAgICAgYWRkSWRlbnRpZmllcihsb2NhbHMsIGlkZW50aWZpZXIsIGluc3RhbmNlLCBjb25zdHJ1Y3RvciB8fCBleHByZXNzaW9uLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIH0sIHtcbiAgICAgICAgICBpbnN0YW5jZTogaW5zdGFuY2UsXG4gICAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllclxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaW5zdGFuY2UgPSAkaW5qZWN0b3IuaW5zdGFudGlhdGUoZXhwcmVzc2lvbiwgbG9jYWxzLCBjb25zdHJ1Y3Rvcik7XG5cbiAgICAgIGlmIChpZGVudGlmaWVyKSB7XG4gICAgICAgIGFkZElkZW50aWZpZXIobG9jYWxzLCBpZGVudGlmaWVyLCBpbnN0YW5jZSwgY29uc3RydWN0b3IgfHwgZXhwcmVzc2lvbi5uYW1lKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBhZGRJZGVudGlmaWVyKGxvY2FscywgaWRlbnRpZmllciwgaW5zdGFuY2UsIG5hbWUpIHtcbiAgICAgIGlmICghKGxvY2FscyAmJiBpc09iamVjdChsb2NhbHMuJHNjb3BlKSkpIHtcbiAgICAgICAgdGhyb3cgbWluRXJyKCckY29udHJvbGxlcicpKCdub3NjcCcsXG4gICAgICAgICAgJ0Nhbm5vdCBleHBvcnQgY29udHJvbGxlciBcXCd7MH1cXCcgYXMgXFwnezF9XFwnISBObyAkc2NvcGUgb2JqZWN0IHByb3ZpZGVkIHZpYSBgbG9jYWxzYC4nLFxuICAgICAgICAgIG5hbWUsIGlkZW50aWZpZXIpO1xuICAgICAgfVxuXG4gICAgICBsb2NhbHMuJHNjb3BlW2lkZW50aWZpZXJdID0gaW5zdGFuY2U7XG4gICAgfVxuICB9XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGRvY3VtZW50XG4gKiBAcmVxdWlyZXMgJHdpbmRvd1xuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEge0BsaW5rIGFuZ3VsYXIuZWxlbWVudCBqUXVlcnkgb3IganFMaXRlfSB3cmFwcGVyIGZvciB0aGUgYnJvd3NlcidzIGB3aW5kb3cuZG9jdW1lbnRgIG9iamVjdC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwiZG9jdW1lbnRFeGFtcGxlXCIgbmFtZT1cImRvY3VtZW50XCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxwPiRkb2N1bWVudCB0aXRsZTogPGIgbmctYmluZD1cInRpdGxlXCI+PC9iPjwvcD5cbiAgICAgICAgIDxwPndpbmRvdy5kb2N1bWVudCB0aXRsZTogPGIgbmctYmluZD1cIndpbmRvd1RpdGxlXCI+PC9iPjwvcD5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2RvY3VtZW50RXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGRvY3VtZW50JywgZnVuY3Rpb24oJHNjb3BlLCAkZG9jdW1lbnQpIHtcbiAgICAgICAgICAgJHNjb3BlLnRpdGxlID0gJGRvY3VtZW50WzBdLnRpdGxlO1xuICAgICAgICAgICAkc2NvcGUud2luZG93VGl0bGUgPSBhbmd1bGFyLmVsZW1lbnQod2luZG93LmRvY3VtZW50KVswXS50aXRsZTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5mdW5jdGlvbiAkRG9jdW1lbnRQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgZnVuY3Rpb24od2luZG93KSB7XG4gICAgcmV0dXJuIGpxTGl0ZSh3aW5kb3cuZG9jdW1lbnQpO1xuICB9XTtcbn1cblxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBAdGhpc1xuICogTGlzdGVucyBmb3IgZG9jdW1lbnQgdmlzaWJpbGl0eSBjaGFuZ2UgYW5kIG1ha2VzIHRoZSBjdXJyZW50IHN0YXR1cyBhY2Nlc3NpYmxlLlxuICovXG5mdW5jdGlvbiAkJElzRG9jdW1lbnRIaWRkZW5Qcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckZG9jdW1lbnQnLCAnJHJvb3RTY29wZScsIGZ1bmN0aW9uKCRkb2N1bWVudCwgJHJvb3RTY29wZSkge1xuICAgIHZhciBkb2MgPSAkZG9jdW1lbnRbMF07XG4gICAgdmFyIGhpZGRlbiA9IGRvYyAmJiBkb2MuaGlkZGVuO1xuXG4gICAgJGRvY3VtZW50Lm9uKCd2aXNpYmlsaXR5Y2hhbmdlJywgY2hhbmdlTGlzdGVuZXIpO1xuXG4gICAgJHJvb3RTY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAkZG9jdW1lbnQub2ZmKCd2aXNpYmlsaXR5Y2hhbmdlJywgY2hhbmdlTGlzdGVuZXIpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gY2hhbmdlTGlzdGVuZXIoKSB7XG4gICAgICBoaWRkZW4gPSBkb2MuaGlkZGVuO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBoaWRkZW47XG4gICAgfTtcbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRleGNlcHRpb25IYW5kbGVyXG4gKiBAcmVxdWlyZXMgbmcuJGxvZ1xuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFueSB1bmNhdWdodCBleGNlcHRpb24gaW4gYW5ndWxhciBleHByZXNzaW9ucyBpcyBkZWxlZ2F0ZWQgdG8gdGhpcyBzZXJ2aWNlLlxuICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gc2ltcGx5IGRlbGVnYXRlcyB0byBgJGxvZy5lcnJvcmAgd2hpY2ggbG9ncyBpdCBpbnRvXG4gKiB0aGUgYnJvd3NlciBjb25zb2xlLlxuICpcbiAqIEluIHVuaXQgdGVzdHMsIGlmIGBhbmd1bGFyLW1vY2tzLmpzYCBpcyBsb2FkZWQsIHRoaXMgc2VydmljZSBpcyBvdmVycmlkZGVuIGJ5XG4gKiB7QGxpbmsgbmdNb2NrLiRleGNlcHRpb25IYW5kbGVyIG1vY2sgJGV4Y2VwdGlvbkhhbmRsZXJ9IHdoaWNoIGFpZHMgaW4gdGVzdGluZy5cbiAqXG4gKiAjIyBFeGFtcGxlOlxuICpcbiAqIFRoZSBleGFtcGxlIGJlbG93IHdpbGwgb3ZlcndyaXRlIHRoZSBkZWZhdWx0IGAkZXhjZXB0aW9uSGFuZGxlcmAgaW4gb3JkZXIgdG8gKGEpIGxvZyB1bmNhdWdodFxuICogZXJyb3JzIHRvIHRoZSBiYWNrZW5kIGZvciBsYXRlciBpbnNwZWN0aW9uIGJ5IHRoZSBkZXZlbG9wZXJzIGFuZCAoYikgdG8gdXNlIGAkbG9nLndhcm4oKWAgaW5zdGVhZFxuICogb2YgYCRsb2cuZXJyb3IoKWAuXG4gKlxuICogYGBganNcbiAqICAgYW5ndWxhci5cbiAqICAgICBtb2R1bGUoJ2V4Y2VwdGlvbk92ZXJ3cml0ZScsIFtdKS5cbiAqICAgICBmYWN0b3J5KCckZXhjZXB0aW9uSGFuZGxlcicsIFsnJGxvZycsICdsb2dFcnJvcnNUb0JhY2tlbmQnLCBmdW5jdGlvbigkbG9nLCBsb2dFcnJvcnNUb0JhY2tlbmQpIHtcbiAqICAgICAgIHJldHVybiBmdW5jdGlvbiBteUV4Y2VwdGlvbkhhbmRsZXIoZXhjZXB0aW9uLCBjYXVzZSkge1xuICogICAgICAgICBsb2dFcnJvcnNUb0JhY2tlbmQoZXhjZXB0aW9uLCBjYXVzZSk7XG4gKiAgICAgICAgICRsb2cud2FybihleGNlcHRpb24sIGNhdXNlKTtcbiAqICAgICAgIH07XG4gKiAgICAgfV0pO1xuICogYGBgXG4gKlxuICogPGhyIC8+XG4gKiBOb3RlLCB0aGF0IGNvZGUgZXhlY3V0ZWQgaW4gZXZlbnQtbGlzdGVuZXJzIChldmVuIHRob3NlIHJlZ2lzdGVyZWQgdXNpbmcganFMaXRlJ3MgYG9uYC9gYmluZGBcbiAqIG1ldGhvZHMpIGRvZXMgbm90IGRlbGVnYXRlIGV4Y2VwdGlvbnMgdG8gdGhlIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn1cbiAqICh1bmxlc3MgZXhlY3V0ZWQgZHVyaW5nIGEgZGlnZXN0KS5cbiAqXG4gKiBJZiB5b3Ugd2lzaCwgeW91IGNhbiBtYW51YWxseSBkZWxlZ2F0ZSBleGNlcHRpb25zLCBlLmcuXG4gKiBgdHJ5IHsgLi4uIH0gY2F0Y2goZSkgeyAkZXhjZXB0aW9uSGFuZGxlcihlKTsgfWBcbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBleGNlcHRpb24gRXhjZXB0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgZXJyb3IuXG4gKiBAcGFyYW0ge3N0cmluZz19IGNhdXNlIE9wdGlvbmFsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjb250ZXh0IGluIHdoaWNoXG4gKiAgICAgICB0aGUgZXJyb3Igd2FzIHRocm93bi5cbiAqXG4gKi9cbmZ1bmN0aW9uICRFeGNlcHRpb25IYW5kbGVyUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJGxvZycsIGZ1bmN0aW9uKCRsb2cpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZXhjZXB0aW9uLCBjYXVzZSkge1xuICAgICAgJGxvZy5lcnJvci5hcHBseSgkbG9nLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1dO1xufVxuXG52YXIgJCRGb3JjZVJlZmxvd1Byb3ZpZGVyID0gLyoqIEB0aGlzICovIGZ1bmN0aW9uKCkge1xuICB0aGlzLiRnZXQgPSBbJyRkb2N1bWVudCcsIGZ1bmN0aW9uKCRkb2N1bWVudCkge1xuICAgIHJldHVybiBmdW5jdGlvbihkb21Ob2RlKSB7XG4gICAgICAvL3RoZSBsaW5lIGJlbG93IHdpbGwgZm9yY2UgdGhlIGJyb3dzZXIgdG8gcGVyZm9ybSBhIHJlcGFpbnQgc29cbiAgICAgIC8vdGhhdCBhbGwgdGhlIGFuaW1hdGVkIGVsZW1lbnRzIHdpdGhpbiB0aGUgYW5pbWF0aW9uIGZyYW1lIHdpbGxcbiAgICAgIC8vYmUgcHJvcGVybHkgdXBkYXRlZCBhbmQgZHJhd24gb24gc2NyZWVuLiBUaGlzIGlzIHJlcXVpcmVkIHRvXG4gICAgICAvL2Vuc3VyZSB0aGF0IHRoZSBwcmVwYXJhdGlvbiBhbmltYXRpb24gaXMgcHJvcGVybHkgZmx1c2hlZCBzbyB0aGF0XG4gICAgICAvL3RoZSBhY3RpdmUgc3RhdGUgcGlja3MgdXAgZnJvbSB0aGVyZS4gRE8gTk9UIFJFTU9WRSBUSElTIExJTkUuXG4gICAgICAvL0RPIE5PVCBPUFRJTUlaRSBUSElTIExJTkUuIFRIRSBNSU5JRklFUiBXSUxMIFJFTU9WRSBJVCBPVEhFUldJU0UgV0hJQ0hcbiAgICAgIC8vV0lMTCBSRVNVTFQgSU4gQU4gVU5QUkVESUNUQUJMRSBCVUcgVEhBVCBJUyBWRVJZIEhBUkQgVE8gVFJBQ0sgRE9XTiBBTkRcbiAgICAgIC8vV0lMTCBUQUtFIFlFQVJTIEFXQVkgRlJPTSBZT1VSIExJRkUuXG4gICAgICBpZiAoZG9tTm9kZSkge1xuICAgICAgICBpZiAoIWRvbU5vZGUubm9kZVR5cGUgJiYgZG9tTm9kZSBpbnN0YW5jZW9mIGpxTGl0ZSkge1xuICAgICAgICAgIGRvbU5vZGUgPSBkb21Ob2RlWzBdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb21Ob2RlID0gJGRvY3VtZW50WzBdLmJvZHk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZG9tTm9kZS5vZmZzZXRXaWR0aCArIDE7XG4gICAgfTtcbiAgfV07XG59O1xuXG52YXIgQVBQTElDQVRJT05fSlNPTiA9ICdhcHBsaWNhdGlvbi9qc29uJztcbnZhciBDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTiA9IHsnQ29udGVudC1UeXBlJzogQVBQTElDQVRJT05fSlNPTiArICc7Y2hhcnNldD11dGYtOCd9O1xudmFyIEpTT05fU1RBUlQgPSAvXlxcW3xeXFx7KD8hXFx7KS87XG52YXIgSlNPTl9FTkRTID0ge1xuICAnWyc6IC9dJC8sXG4gICd7JzogL30kL1xufTtcbnZhciBKU09OX1BST1RFQ1RJT05fUFJFRklYID0gL15cXCldXFx9Jyw/XFxuLztcbnZhciAkaHR0cE1pbkVyciA9IG1pbkVycignJGh0dHAnKTtcblxuZnVuY3Rpb24gc2VyaWFsaXplVmFsdWUodikge1xuICBpZiAoaXNPYmplY3QodikpIHtcbiAgICByZXR1cm4gaXNEYXRlKHYpID8gdi50b0lTT1N0cmluZygpIDogdG9Kc29uKHYpO1xuICB9XG4gIHJldHVybiB2O1xufVxuXG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJEh0dHBQYXJhbVNlcmlhbGl6ZXJQcm92aWRlcigpIHtcbiAgLyoqXG4gICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAqIEBuYW1lICRodHRwUGFyYW1TZXJpYWxpemVyXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBEZWZhdWx0IHtAbGluayAkaHR0cCBgJGh0dHBgfSBwYXJhbXMgc2VyaWFsaXplciB0aGF0IGNvbnZlcnRzIG9iamVjdHMgdG8gc3RyaW5nc1xuICAgKiBhY2NvcmRpbmcgdG8gdGhlIGZvbGxvd2luZyBydWxlczpcbiAgICpcbiAgICogKiBgeydmb28nOiAnYmFyJ31gIHJlc3VsdHMgaW4gYGZvbz1iYXJgXG4gICAqICogYHsnZm9vJzogRGF0ZS5ub3coKX1gIHJlc3VsdHMgaW4gYGZvbz0yMDE1LTA0LTAxVDA5JTNBNTAlM0E0OS4yNjJaYCAoYHRvSVNPU3RyaW5nKClgIGFuZCBlbmNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIGEgRGF0ZSBvYmplY3QpXG4gICAqICogYHsnZm9vJzogWydiYXInLCAnYmF6J119YCByZXN1bHRzIGluIGBmb289YmFyJmZvbz1iYXpgIChyZXBlYXRlZCBrZXkgZm9yIGVhY2ggYXJyYXkgZWxlbWVudClcbiAgICogKiBgeydmb28nOiB7J2Jhcic6J2Jheid9fWAgcmVzdWx0cyBpbiBgZm9vPSU3QiUyMmJhciUyMiUzQSUyMmJheiUyMiU3RGAgKHN0cmluZ2lmaWVkIGFuZCBlbmNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdClcbiAgICpcbiAgICogTm90ZSB0aGF0IHNlcmlhbGl6ZXIgd2lsbCBzb3J0IHRoZSByZXF1ZXN0IHBhcmFtZXRlcnMgYWxwaGFiZXRpY2FsbHkuXG4gICAqICovXG5cbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5nUGFyYW1TZXJpYWxpemVyKHBhcmFtcykge1xuICAgICAgaWYgKCFwYXJhbXMpIHJldHVybiAnJztcbiAgICAgIHZhciBwYXJ0cyA9IFtdO1xuICAgICAgZm9yRWFjaFNvcnRlZChwYXJhbXMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IGlzVW5kZWZpbmVkKHZhbHVlKSB8fCBpc0Z1bmN0aW9uKHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICBmb3JFYWNoKHZhbHVlLCBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSkgICsgJz0nICsgZW5jb2RlVXJpUXVlcnkoc2VyaWFsaXplVmFsdWUodikpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KGtleSkgKyAnPScgKyBlbmNvZGVVcmlRdWVyeShzZXJpYWxpemVWYWx1ZSh2YWx1ZSkpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcmJyk7XG4gICAgfTtcbiAgfTtcbn1cblxuLyoqIEB0aGlzICovXG5mdW5jdGlvbiAkSHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZVByb3ZpZGVyKCkge1xuICAvKipcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJGh0dHBQYXJhbVNlcmlhbGl6ZXJKUUxpa2VcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIEFsdGVybmF0aXZlIHtAbGluayAkaHR0cCBgJGh0dHBgfSBwYXJhbXMgc2VyaWFsaXplciB0aGF0IGZvbGxvd3NcbiAgICogalF1ZXJ5J3MgW2BwYXJhbSgpYF0oaHR0cDovL2FwaS5qcXVlcnkuY29tL2pxdWVyeS5wYXJhbS8pIG1ldGhvZCBsb2dpYy5cbiAgICogVGhlIHNlcmlhbGl6ZXIgd2lsbCBhbHNvIHNvcnQgdGhlIHBhcmFtcyBhbHBoYWJldGljYWxseS5cbiAgICpcbiAgICogVG8gdXNlIGl0IGZvciBzZXJpYWxpemluZyBgJGh0dHBgIHJlcXVlc3QgcGFyYW1ldGVycywgc2V0IGl0IGFzIHRoZSBgcGFyYW1TZXJpYWxpemVyYCBwcm9wZXJ0eTpcbiAgICpcbiAgICogYGBganNcbiAgICogJGh0dHAoe1xuICAgKiAgIHVybDogbXlVcmwsXG4gICAqICAgbWV0aG9kOiAnR0VUJyxcbiAgICogICBwYXJhbXM6IG15UGFyYW1zLFxuICAgKiAgIHBhcmFtU2VyaWFsaXplcjogJyRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlJ1xuICAgKiB9KTtcbiAgICogYGBgXG4gICAqXG4gICAqIEl0IGlzIGFsc28gcG9zc2libGUgdG8gc2V0IGl0IGFzIHRoZSBkZWZhdWx0IGBwYXJhbVNlcmlhbGl6ZXJgIGluIHRoZVxuICAgKiB7QGxpbmsgJGh0dHBQcm92aWRlciNkZWZhdWx0cyBgJGh0dHBQcm92aWRlcmB9LlxuICAgKlxuICAgKiBBZGRpdGlvbmFsbHksIHlvdSBjYW4gaW5qZWN0IHRoZSBzZXJpYWxpemVyIGFuZCB1c2UgaXQgZXhwbGljaXRseSwgZm9yIGV4YW1wbGUgdG8gc2VyaWFsaXplXG4gICAqIGZvcm0gZGF0YSBmb3Igc3VibWlzc2lvbjpcbiAgICpcbiAgICogYGBganNcbiAgICogLmNvbnRyb2xsZXIoZnVuY3Rpb24oJGh0dHAsICRodHRwUGFyYW1TZXJpYWxpemVySlFMaWtlKSB7XG4gICAqICAgLy8uLi5cbiAgICpcbiAgICogICAkaHR0cCh7XG4gICAqICAgICB1cmw6IG15VXJsLFxuICAgKiAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAqICAgICBkYXRhOiAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZShteURhdGEpLFxuICAgKiAgICAgaGVhZGVyczoge1xuICAgKiAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbiAgICogICAgIH1cbiAgICogICB9KTtcbiAgICpcbiAgICogfSk7XG4gICAqIGBgYFxuICAgKlxuICAgKiAqL1xuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24galF1ZXJ5TGlrZVBhcmFtU2VyaWFsaXplcihwYXJhbXMpIHtcbiAgICAgIGlmICghcGFyYW1zKSByZXR1cm4gJyc7XG4gICAgICB2YXIgcGFydHMgPSBbXTtcbiAgICAgIHNlcmlhbGl6ZShwYXJhbXMsICcnLCB0cnVlKTtcbiAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcmJyk7XG5cbiAgICAgIGZ1bmN0aW9uIHNlcmlhbGl6ZSh0b1NlcmlhbGl6ZSwgcHJlZml4LCB0b3BMZXZlbCkge1xuICAgICAgICBpZiAodG9TZXJpYWxpemUgPT09IG51bGwgfHwgaXNVbmRlZmluZWQodG9TZXJpYWxpemUpKSByZXR1cm47XG4gICAgICAgIGlmIChpc0FycmF5KHRvU2VyaWFsaXplKSkge1xuICAgICAgICAgIGZvckVhY2godG9TZXJpYWxpemUsIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgICAgICAgICAgc2VyaWFsaXplKHZhbHVlLCBwcmVmaXggKyAnWycgKyAoaXNPYmplY3QodmFsdWUpID8gaW5kZXggOiAnJykgKyAnXScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHRvU2VyaWFsaXplKSAmJiAhaXNEYXRlKHRvU2VyaWFsaXplKSkge1xuICAgICAgICAgIGZvckVhY2hTb3J0ZWQodG9TZXJpYWxpemUsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgIHNlcmlhbGl6ZSh2YWx1ZSwgcHJlZml4ICtcbiAgICAgICAgICAgICAgICAodG9wTGV2ZWwgPyAnJyA6ICdbJykgK1xuICAgICAgICAgICAgICAgIGtleSArXG4gICAgICAgICAgICAgICAgKHRvcExldmVsID8gJycgOiAnXScpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZVVyaVF1ZXJ5KHByZWZpeCkgKyAnPScgKyBlbmNvZGVVcmlRdWVyeShzZXJpYWxpemVWYWx1ZSh0b1NlcmlhbGl6ZSkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm0oZGF0YSwgaGVhZGVycykge1xuICBpZiAoaXNTdHJpbmcoZGF0YSkpIHtcbiAgICAvLyBTdHJpcCBqc29uIHZ1bG5lcmFiaWxpdHkgcHJvdGVjdGlvbiBwcmVmaXggYW5kIHRyaW0gd2hpdGVzcGFjZVxuICAgIHZhciB0ZW1wRGF0YSA9IGRhdGEucmVwbGFjZShKU09OX1BST1RFQ1RJT05fUFJFRklYLCAnJykudHJpbSgpO1xuXG4gICAgaWYgKHRlbXBEYXRhKSB7XG4gICAgICB2YXIgY29udGVudFR5cGUgPSBoZWFkZXJzKCdDb250ZW50LVR5cGUnKTtcbiAgICAgIHZhciBoYXNKc29uQ29udGVudFR5cGUgPSBjb250ZW50VHlwZSAmJiAoY29udGVudFR5cGUuaW5kZXhPZihBUFBMSUNBVElPTl9KU09OKSA9PT0gMCk7XG5cbiAgICAgIGlmIChoYXNKc29uQ29udGVudFR5cGUgfHwgaXNKc29uTGlrZSh0ZW1wRGF0YSkpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBkYXRhID0gZnJvbUpzb24odGVtcERhdGEpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaWYgKCFoYXNKc29uQ29udGVudFR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyAkaHR0cE1pbkVycignYmFkZGF0YScsICdEYXRhIG11c3QgYmUgYSB2YWxpZCBKU09OIG9iamVjdC4gUmVjZWl2ZWQ6IFwiezB9XCIuICcgK1xuICAgICAgICAgICdQYXJzZSBlcnJvcjogXCJ7MX1cIicsIGRhdGEsIGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGlzSnNvbkxpa2Uoc3RyKSB7XG4gICAgdmFyIGpzb25TdGFydCA9IHN0ci5tYXRjaChKU09OX1NUQVJUKTtcbiAgICByZXR1cm4ganNvblN0YXJ0ICYmIEpTT05fRU5EU1tqc29uU3RhcnRbMF1dLnRlc3Qoc3RyKTtcbn1cblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8ga2V5IHZhbHVlIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBoZWFkZXJzIFJhdyBoZWFkZXJzIGFzIGEgc3RyaW5nXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBQYXJzZWQgaGVhZGVycyBhcyBrZXkgdmFsdWUgb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSBjcmVhdGVNYXAoKSwgaTtcblxuICBmdW5jdGlvbiBmaWxsSW5QYXJzZWQoa2V5LCB2YWwpIHtcbiAgICBpZiAoa2V5KSB7XG4gICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc1N0cmluZyhoZWFkZXJzKSkge1xuICAgIGZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uKGxpbmUpIHtcbiAgICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICAgIGZpbGxJblBhcnNlZChsb3dlcmNhc2UodHJpbShsaW5lLnN1YnN0cigwLCBpKSkpLCB0cmltKGxpbmUuc3Vic3RyKGkgKyAxKSkpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGlzT2JqZWN0KGhlYWRlcnMpKSB7XG4gICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbihoZWFkZXJWYWwsIGhlYWRlcktleSkge1xuICAgICAgZmlsbEluUGFyc2VkKGxvd2VyY2FzZShoZWFkZXJLZXkpLCB0cmltKGhlYWRlclZhbCkpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHByb3ZpZGVzIGFjY2VzcyB0byBwYXJzZWQgaGVhZGVycy5cbiAqXG4gKiBIZWFkZXJzIGFyZSBsYXp5IHBhcnNlZCB3aGVuIGZpcnN0IHJlcXVlc3RlZC5cbiAqIEBzZWUgcGFyc2VIZWFkZXJzXG4gKlxuICogQHBhcmFtIHsoc3RyaW5nfE9iamVjdCl9IGhlYWRlcnMgSGVhZGVycyB0byBwcm92aWRlIGFjY2VzcyB0by5cbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmc9KX0gUmV0dXJucyBhIGdldHRlciBmdW5jdGlvbiB3aGljaCBpZiBjYWxsZWQgd2l0aDpcbiAqXG4gKiAgIC0gaWYgY2FsbGVkIHdpdGggYW4gYXJndW1lbnQgcmV0dXJucyBhIHNpbmdsZSBoZWFkZXIgdmFsdWUgb3IgbnVsbFxuICogICAtIGlmIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cyByZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIGFsbCBoZWFkZXJzLlxuICovXG5mdW5jdGlvbiBoZWFkZXJzR2V0dGVyKGhlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcnNPYmo7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBpZiAoIWhlYWRlcnNPYmopIGhlYWRlcnNPYmogPSAgcGFyc2VIZWFkZXJzKGhlYWRlcnMpO1xuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGhlYWRlcnNPYmpbbG93ZXJjYXNlKG5hbWUpXTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGVhZGVyc09iajtcbiAgfTtcbn1cblxuXG4vKipcbiAqIENoYWluIGFsbCBnaXZlbiBmdW5jdGlvbnNcbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgZm9yIGJvdGggcmVxdWVzdCBhbmQgcmVzcG9uc2UgdHJhbnNmb3JtaW5nXG4gKlxuICogQHBhcmFtIHsqfSBkYXRhIERhdGEgdG8gdHJhbnNmb3JtLlxuICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmc9KX0gaGVhZGVycyBIVFRQIGhlYWRlcnMgZ2V0dGVyIGZuLlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXR1cyBIVFRQIHN0YXR1cyBjb2RlIG9mIHRoZSByZXNwb25zZS5cbiAqIEBwYXJhbSB7KEZ1bmN0aW9ufEFycmF5LjxGdW5jdGlvbj4pfSBmbnMgRnVuY3Rpb24gb3IgYW4gYXJyYXkgb2YgZnVuY3Rpb25zLlxuICogQHJldHVybnMgeyp9IFRyYW5zZm9ybWVkIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgc3RhdHVzLCBmbnMpIHtcbiAgaWYgKGlzRnVuY3Rpb24oZm5zKSkge1xuICAgIHJldHVybiBmbnMoZGF0YSwgaGVhZGVycywgc3RhdHVzKTtcbiAgfVxuXG4gIGZvckVhY2goZm5zLCBmdW5jdGlvbihmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzLCBzdGF0dXMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuXG5mdW5jdGlvbiBpc1N1Y2Nlc3Moc3RhdHVzKSB7XG4gIHJldHVybiAyMDAgPD0gc3RhdHVzICYmIHN0YXR1cyA8IDMwMDtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGh0dHBQcm92aWRlclxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSBgJGh0dHBQcm92aWRlcmAgdG8gY2hhbmdlIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHRoZSB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9IHNlcnZpY2UuXG4gKiAqL1xuZnVuY3Rpb24gJEh0dHBQcm92aWRlcigpIHtcbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgKiBAbmFtZSAkaHR0cFByb3ZpZGVyI2RlZmF1bHRzXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPYmplY3QgY29udGFpbmluZyBkZWZhdWx0IHZhbHVlcyBmb3IgYWxsIHtAbGluayBuZy4kaHR0cCAkaHR0cH0gcmVxdWVzdHMuXG4gICAqXG4gICAqIC0gKipgZGVmYXVsdHMuY2FjaGVgKiogLSB7Ym9vbGVhbnxPYmplY3R9IC0gQSBib29sZWFuIHZhbHVlIG9yIG9iamVjdCBjcmVhdGVkIHdpdGhcbiAgICoge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgYCRjYWNoZUZhY3RvcnlgfSB0byBlbmFibGUgb3IgZGlzYWJsZSBjYWNoaW5nIG9mIEhUVFAgcmVzcG9uc2VzXG4gICAqIGJ5IGRlZmF1bHQuIFNlZSB7QGxpbmsgJGh0dHAjY2FjaGluZyAkaHR0cCBDYWNoaW5nfSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy5oZWFkZXJzYCoqIC0ge09iamVjdH0gLSBEZWZhdWx0IGhlYWRlcnMgZm9yIGFsbCAkaHR0cCByZXF1ZXN0cy5cbiAgICogUmVmZXIgdG8ge0BsaW5rIG5nLiRodHRwI3NldHRpbmctaHR0cC1oZWFkZXJzICRodHRwfSBmb3IgZG9jdW1lbnRhdGlvbiBvblxuICAgKiBzZXR0aW5nIGRlZmF1bHQgaGVhZGVycy5cbiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5jb21tb25gKipcbiAgICogICAgIC0gKipgZGVmYXVsdHMuaGVhZGVycy5wb3N0YCoqXG4gICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMucHV0YCoqXG4gICAqICAgICAtICoqYGRlZmF1bHRzLmhlYWRlcnMucGF0Y2hgKipcbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy5qc29ucENhbGxiYWNrUGFyYW1gKiogLSBge3N0cmluZ31gIC0gdGhlIG5hbWUgb2YgdGhlIHF1ZXJ5IHBhcmFtZXRlciB0aGF0IHBhc3NlcyB0aGUgbmFtZSBvZiB0aGVcbiAgICogY2FsbGJhY2sgaW4gYSBKU09OUCByZXF1ZXN0LiBUaGUgdmFsdWUgb2YgdGhpcyBwYXJhbWV0ZXIgd2lsbCBiZSByZXBsYWNlZCB3aXRoIHRoZSBleHByZXNzaW9uIGdlbmVyYXRlZCBieSB0aGVcbiAgICoge0BsaW5rICRqc29ucENhbGxiYWNrc30gc2VydmljZS4gRGVmYXVsdHMgdG8gYCdjYWxsYmFjaydgLlxuICAgKlxuICAgKiAtICoqYGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplcmAqKiAtIGB7c3RyaW5nfGZ1bmN0aW9uKE9iamVjdDxzdHJpbmcsc3RyaW5nPik6c3RyaW5nfWAgLSBBIGZ1bmN0aW9uXG4gICAqICB1c2VkIHRvIHRoZSBwcmVwYXJlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiByZXF1ZXN0IHBhcmFtZXRlcnMgKHNwZWNpZmllZCBhcyBhbiBvYmplY3QpLlxuICAgKiAgSWYgc3BlY2lmaWVkIGFzIHN0cmluZywgaXQgaXMgaW50ZXJwcmV0ZWQgYXMgYSBmdW5jdGlvbiByZWdpc3RlcmVkIHdpdGggdGhlIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LlxuICAgKiAgRGVmYXVsdHMgdG8ge0BsaW5rIG5nLiRodHRwUGFyYW1TZXJpYWxpemVyICRodHRwUGFyYW1TZXJpYWxpemVyfS5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy50cmFuc2Zvcm1SZXF1ZXN0YCoqIC1cbiAgICogYHtBcnJheTxmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKT58ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlcil9YCAtXG4gICAqIEFuIGFycmF5IG9mIGZ1bmN0aW9ucyAob3IgYSBzaW5nbGUgZnVuY3Rpb24pIHdoaWNoIGFyZSBhcHBsaWVkIHRvIHRoZSByZXF1ZXN0IGRhdGEuXG4gICAqIEJ5IGRlZmF1bHQsIHRoaXMgaXMgYW4gYXJyYXkgd2l0aCBvbmUgcmVxdWVzdCB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbjpcbiAgICpcbiAgICogICAtIElmIHRoZSBgZGF0YWAgcHJvcGVydHkgb2YgdGhlIHJlcXVlc3QgY29uZmlndXJhdGlvbiBvYmplY3QgY29udGFpbnMgYW4gb2JqZWN0LCBzZXJpYWxpemUgaXRcbiAgICogICAgIGludG8gSlNPTiBmb3JtYXQuXG4gICAqXG4gICAqIC0gKipgZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VgKiogLVxuICAgKiBge0FycmF5PGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIsIHN0YXR1cyk+fGZ1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIsIHN0YXR1cyl9YCAtXG4gICAqIEFuIGFycmF5IG9mIGZ1bmN0aW9ucyAob3IgYSBzaW5nbGUgZnVuY3Rpb24pIHdoaWNoIGFyZSBhcHBsaWVkIHRvIHRoZSByZXNwb25zZSBkYXRhLiBCeSBkZWZhdWx0LFxuICAgKiB0aGlzIGlzIGFuIGFycmF5IHdoaWNoIGFwcGxpZXMgb25lIHJlc3BvbnNlIHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIHRoYXQgZG9lcyB0d28gdGhpbmdzOlxuICAgKlxuICAgKiAgLSBJZiBYU1JGIHByZWZpeCBpcyBkZXRlY3RlZCwgc3RyaXAgaXRcbiAgICogICAgKHNlZSB7QGxpbmsgbmcuJGh0dHAjc2VjdXJpdHktY29uc2lkZXJhdGlvbnMgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnMgaW4gdGhlICRodHRwIGRvY3N9KS5cbiAgICogIC0gSWYgdGhlIGBDb250ZW50LVR5cGVgIGlzIGBhcHBsaWNhdGlvbi9qc29uYCBvciB0aGUgcmVzcG9uc2UgbG9va3MgbGlrZSBKU09OLFxuICAgKiAgICBkZXNlcmlhbGl6ZSBpdCB1c2luZyBhIEpTT04gcGFyc2VyLlxuICAgKlxuICAgKiAtICoqYGRlZmF1bHRzLnhzcmZDb29raWVOYW1lYCoqIC0ge3N0cmluZ30gLSBOYW1lIG9mIGNvb2tpZSBjb250YWluaW5nIHRoZSBYU1JGIHRva2VuLlxuICAgKiBEZWZhdWx0cyB2YWx1ZSBpcyBgJ1hTUkYtVE9LRU4nYC5cbiAgICpcbiAgICogLSAqKmBkZWZhdWx0cy54c3JmSGVhZGVyTmFtZWAqKiAtIHtzdHJpbmd9IC0gTmFtZSBvZiBIVFRQIGhlYWRlciB0byBwb3B1bGF0ZSB3aXRoIHRoZVxuICAgKiBYU1JGIHRva2VuLiBEZWZhdWx0cyB2YWx1ZSBpcyBgJ1gtWFNSRi1UT0tFTidgLlxuICAgKlxuICAgKiovXG4gIHZhciBkZWZhdWx0cyA9IHRoaXMuZGVmYXVsdHMgPSB7XG4gICAgLy8gdHJhbnNmb3JtIGluY29taW5nIHJlc3BvbnNlIGRhdGFcbiAgICB0cmFuc2Zvcm1SZXNwb25zZTogW2RlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm1dLFxuXG4gICAgLy8gdHJhbnNmb3JtIG91dGdvaW5nIHJlcXVlc3QgZGF0YVxuICAgIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbihkKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3QoZCkgJiYgIWlzRmlsZShkKSAmJiAhaXNCbG9iKGQpICYmICFpc0Zvcm1EYXRhKGQpID8gdG9Kc29uKGQpIDogZDtcbiAgICB9XSxcblxuICAgIC8vIGRlZmF1bHQgaGVhZGVyc1xuICAgIGhlYWRlcnM6IHtcbiAgICAgIGNvbW1vbjoge1xuICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgICAgIH0sXG4gICAgICBwb3N0OiAgIHNoYWxsb3dDb3B5KENPTlRFTlRfVFlQRV9BUFBMSUNBVElPTl9KU09OKSxcbiAgICAgIHB1dDogICAgc2hhbGxvd0NvcHkoQ09OVEVOVF9UWVBFX0FQUExJQ0FUSU9OX0pTT04pLFxuICAgICAgcGF0Y2g6ICBzaGFsbG93Q29weShDT05URU5UX1RZUEVfQVBQTElDQVRJT05fSlNPTilcbiAgICB9LFxuXG4gICAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgICBwYXJhbVNlcmlhbGl6ZXI6ICckaHR0cFBhcmFtU2VyaWFsaXplcicsXG5cbiAgICBqc29ucENhbGxiYWNrUGFyYW06ICdjYWxsYmFjaydcbiAgfTtcblxuICB2YXIgdXNlQXBwbHlBc3luYyA9IGZhbHNlO1xuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkaHR0cFByb3ZpZGVyI3VzZUFwcGx5QXN5bmNcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIENvbmZpZ3VyZSAkaHR0cCBzZXJ2aWNlIHRvIGNvbWJpbmUgcHJvY2Vzc2luZyBvZiBtdWx0aXBsZSBodHRwIHJlc3BvbnNlcyByZWNlaXZlZCBhdCBhcm91bmRcbiAgICogdGhlIHNhbWUgdGltZSB2aWEge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5QXN5bmMgJHJvb3RTY29wZS4kYXBwbHlBc3luY30uIFRoaXMgY2FuIHJlc3VsdCBpblxuICAgKiBzaWduaWZpY2FudCBwZXJmb3JtYW5jZSBpbXByb3ZlbWVudCBmb3IgYmlnZ2VyIGFwcGxpY2F0aW9ucyB0aGF0IG1ha2UgbWFueSBIVFRQIHJlcXVlc3RzXG4gICAqIGNvbmN1cnJlbnRseSAoY29tbW9uIGR1cmluZyBhcHBsaWNhdGlvbiBib290c3RyYXApLlxuICAgKlxuICAgKiBEZWZhdWx0cyB0byBmYWxzZS4gSWYgbm8gdmFsdWUgaXMgc3BlY2lmaWVkLCByZXR1cm5zIHRoZSBjdXJyZW50IGNvbmZpZ3VyZWQgdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIElmIHRydWUsIHdoZW4gcmVxdWVzdHMgYXJlIGxvYWRlZCwgdGhleSB3aWxsIHNjaGVkdWxlIGEgZGVmZXJyZWRcbiAgICogICAgXCJhcHBseVwiIG9uIHRoZSBuZXh0IHRpY2ssIGdpdmluZyB0aW1lIGZvciBzdWJzZXF1ZW50IHJlcXVlc3RzIGluIGEgcm91Z2hseSB+MTBtcyB3aW5kb3dcbiAgICogICAgdG8gbG9hZCBhbmQgc2hhcmUgdGhlIHNhbWUgZGlnZXN0IGN5Y2xlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxPYmplY3R9IElmIGEgdmFsdWUgaXMgc3BlY2lmaWVkLCByZXR1cm5zIHRoZSAkaHR0cFByb3ZpZGVyIGZvciBjaGFpbmluZy5cbiAgICogICAgb3RoZXJ3aXNlLCByZXR1cm5zIHRoZSBjdXJyZW50IGNvbmZpZ3VyZWQgdmFsdWUuXG4gICAqKi9cbiAgdGhpcy51c2VBcHBseUFzeW5jID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgdXNlQXBwbHlBc3luYyA9ICEhdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIHVzZUFwcGx5QXN5bmM7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgKiBAbmFtZSAkaHR0cFByb3ZpZGVyI2ludGVyY2VwdG9yc1xuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQXJyYXkgY29udGFpbmluZyBzZXJ2aWNlIGZhY3RvcmllcyBmb3IgYWxsIHN5bmNocm9ub3VzIG9yIGFzeW5jaHJvbm91cyB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9XG4gICAqIHByZS1wcm9jZXNzaW5nIG9mIHJlcXVlc3Qgb3IgcG9zdHByb2Nlc3Npbmcgb2YgcmVzcG9uc2VzLlxuICAgKlxuICAgKiBUaGVzZSBzZXJ2aWNlIGZhY3RvcmllcyBhcmUgb3JkZXJlZCBieSByZXF1ZXN0LCBpLmUuIHRoZXkgYXJlIGFwcGxpZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4gICAqIGFycmF5LCBvbiByZXF1ZXN0LCBidXQgcmV2ZXJzZSBvcmRlciwgb24gcmVzcG9uc2UuXG4gICAqXG4gICAqIHtAbGluayBuZy4kaHR0cCNpbnRlcmNlcHRvcnMgSW50ZXJjZXB0b3JzIGRldGFpbGVkIGluZm99XG4gICAqKi9cbiAgdmFyIGludGVyY2VwdG9yRmFjdG9yaWVzID0gdGhpcy5pbnRlcmNlcHRvcnMgPSBbXTtcblxuICB0aGlzLiRnZXQgPSBbJyRicm93c2VyJywgJyRodHRwQmFja2VuZCcsICckJGNvb2tpZVJlYWRlcicsICckY2FjaGVGYWN0b3J5JywgJyRyb290U2NvcGUnLCAnJHEnLCAnJGluamVjdG9yJywgJyRzY2UnLFxuICAgICAgZnVuY3Rpb24oJGJyb3dzZXIsICRodHRwQmFja2VuZCwgJCRjb29raWVSZWFkZXIsICRjYWNoZUZhY3RvcnksICRyb290U2NvcGUsICRxLCAkaW5qZWN0b3IsICRzY2UpIHtcblxuICAgIHZhciBkZWZhdWx0Q2FjaGUgPSAkY2FjaGVGYWN0b3J5KCckaHR0cCcpO1xuXG4gICAgLyoqXG4gICAgICogTWFrZSBzdXJlIHRoYXQgZGVmYXVsdCBwYXJhbSBzZXJpYWxpemVyIGlzIGV4cG9zZWQgYXMgYSBmdW5jdGlvblxuICAgICAqL1xuICAgIGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplciA9IGlzU3RyaW5nKGRlZmF1bHRzLnBhcmFtU2VyaWFsaXplcikgP1xuICAgICAgJGluamVjdG9yLmdldChkZWZhdWx0cy5wYXJhbVNlcmlhbGl6ZXIpIDogZGVmYXVsdHMucGFyYW1TZXJpYWxpemVyO1xuXG4gICAgLyoqXG4gICAgICogSW50ZXJjZXB0b3JzIHN0b3JlZCBpbiByZXZlcnNlIG9yZGVyLiBJbm5lciBpbnRlcmNlcHRvcnMgYmVmb3JlIG91dGVyIGludGVyY2VwdG9ycy5cbiAgICAgKiBUaGUgcmV2ZXJzYWwgaXMgbmVlZGVkIHNvIHRoYXQgd2UgY2FuIGJ1aWxkIHVwIHRoZSBpbnRlcmNlcHRpb24gY2hhaW4gYXJvdW5kIHRoZVxuICAgICAqIHNlcnZlciByZXF1ZXN0LlxuICAgICAqL1xuICAgIHZhciByZXZlcnNlZEludGVyY2VwdG9ycyA9IFtdO1xuXG4gICAgZm9yRWFjaChpbnRlcmNlcHRvckZhY3RvcmllcywgZnVuY3Rpb24oaW50ZXJjZXB0b3JGYWN0b3J5KSB7XG4gICAgICByZXZlcnNlZEludGVyY2VwdG9ycy51bnNoaWZ0KGlzU3RyaW5nKGludGVyY2VwdG9yRmFjdG9yeSlcbiAgICAgICAgICA/ICRpbmplY3Rvci5nZXQoaW50ZXJjZXB0b3JGYWN0b3J5KSA6ICRpbmplY3Rvci5pbnZva2UoaW50ZXJjZXB0b3JGYWN0b3J5KSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICogQG5hbWUgJGh0dHBcbiAgICAgKiBAcmVxdWlyZXMgbmcuJGh0dHBCYWNrZW5kXG4gICAgICogQHJlcXVpcmVzICRjYWNoZUZhY3RvcnlcbiAgICAgKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICAgICAqIEByZXF1aXJlcyAkcVxuICAgICAqIEByZXF1aXJlcyAkaW5qZWN0b3JcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoZSBgJGh0dHBgIHNlcnZpY2UgaXMgYSBjb3JlIEFuZ3VsYXIgc2VydmljZSB0aGF0IGZhY2lsaXRhdGVzIGNvbW11bmljYXRpb24gd2l0aCB0aGUgcmVtb3RlXG4gICAgICogSFRUUCBzZXJ2ZXJzIHZpYSB0aGUgYnJvd3NlcidzIFtYTUxIdHRwUmVxdWVzdF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4veG1saHR0cHJlcXVlc3QpXG4gICAgICogb2JqZWN0IG9yIHZpYSBbSlNPTlBdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSlNPTlApLlxuICAgICAqXG4gICAgICogRm9yIHVuaXQgdGVzdGluZyBhcHBsaWNhdGlvbnMgdGhhdCB1c2UgYCRodHRwYCBzZXJ2aWNlLCBzZWVcbiAgICAgKiB7QGxpbmsgbmdNb2NrLiRodHRwQmFja2VuZCAkaHR0cEJhY2tlbmQgbW9ja30uXG4gICAgICpcbiAgICAgKiBGb3IgYSBoaWdoZXIgbGV2ZWwgb2YgYWJzdHJhY3Rpb24sIHBsZWFzZSBjaGVjayBvdXQgdGhlIHtAbGluayBuZ1Jlc291cmNlLiRyZXNvdXJjZVxuICAgICAqICRyZXNvdXJjZX0gc2VydmljZS5cbiAgICAgKlxuICAgICAqIFRoZSAkaHR0cCBBUEkgaXMgYmFzZWQgb24gdGhlIHtAbGluayBuZy4kcSBkZWZlcnJlZC9wcm9taXNlIEFQSXN9IGV4cG9zZWQgYnlcbiAgICAgKiB0aGUgJHEgc2VydmljZS4gV2hpbGUgZm9yIHNpbXBsZSB1c2FnZSBwYXR0ZXJucyB0aGlzIGRvZXNuJ3QgbWF0dGVyIG11Y2gsIGZvciBhZHZhbmNlZCB1c2FnZVxuICAgICAqIGl0IGlzIGltcG9ydGFudCB0byBmYW1pbGlhcml6ZSB5b3Vyc2VsZiB3aXRoIHRoZXNlIEFQSXMgYW5kIHRoZSBndWFyYW50ZWVzIHRoZXkgcHJvdmlkZS5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyMgR2VuZXJhbCB1c2FnZVxuICAgICAqIFRoZSBgJGh0dHBgIHNlcnZpY2UgaXMgYSBmdW5jdGlvbiB3aGljaCB0YWtlcyBhIHNpbmdsZSBhcmd1bWVudCDigJQgYSB7QGxpbmsgJGh0dHAjdXNhZ2UgY29uZmlndXJhdGlvbiBvYmplY3R9IOKAlFxuICAgICAqIHRoYXQgaXMgdXNlZCB0byBnZW5lcmF0ZSBhbiBIVFRQIHJlcXVlc3QgYW5kIHJldHVybnMgIGEge0BsaW5rIG5nLiRxIHByb21pc2V9LlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIC8vIFNpbXBsZSBHRVQgcmVxdWVzdCBleGFtcGxlOlxuICAgICAqICAgJGh0dHAoe1xuICAgICAqICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAqICAgICB1cmw6ICcvc29tZVVybCdcbiAgICAgKiAgIH0pLnRoZW4oZnVuY3Rpb24gc3VjY2Vzc0NhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICogICAgICAgLy8gdGhpcyBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBhc3luY2hyb25vdXNseVxuICAgICAqICAgICAgIC8vIHdoZW4gdGhlIHJlc3BvbnNlIGlzIGF2YWlsYWJsZVxuICAgICAqICAgICB9LCBmdW5jdGlvbiBlcnJvckNhbGxiYWNrKHJlc3BvbnNlKSB7XG4gICAgICogICAgICAgLy8gY2FsbGVkIGFzeW5jaHJvbm91c2x5IGlmIGFuIGVycm9yIG9jY3Vyc1xuICAgICAqICAgICAgIC8vIG9yIHNlcnZlciByZXR1cm5zIHJlc3BvbnNlIHdpdGggYW4gZXJyb3Igc3RhdHVzLlxuICAgICAqICAgICB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoZSByZXNwb25zZSBvYmplY3QgaGFzIHRoZXNlIHByb3BlcnRpZXM6XG4gICAgICpcbiAgICAgKiAgIC0gKipkYXRhKiog4oCTIGB7c3RyaW5nfE9iamVjdH1gIOKAkyBUaGUgcmVzcG9uc2UgYm9keSB0cmFuc2Zvcm1lZCB3aXRoIHRoZSB0cmFuc2Zvcm1cbiAgICAgKiAgICAgZnVuY3Rpb25zLlxuICAgICAqICAgLSAqKnN0YXR1cyoqIOKAkyBge251bWJlcn1gIOKAkyBIVFRQIHN0YXR1cyBjb2RlIG9mIHRoZSByZXNwb25zZS5cbiAgICAgKiAgIC0gKipoZWFkZXJzKiog4oCTIGB7ZnVuY3Rpb24oW2hlYWRlck5hbWVdKX1gIOKAkyBIZWFkZXIgZ2V0dGVyIGZ1bmN0aW9uLlxuICAgICAqICAgLSAqKmNvbmZpZyoqIOKAkyBge09iamVjdH1gIOKAkyBUaGUgY29uZmlndXJhdGlvbiBvYmplY3QgdGhhdCB3YXMgdXNlZCB0byBnZW5lcmF0ZSB0aGUgcmVxdWVzdC5cbiAgICAgKiAgIC0gKipzdGF0dXNUZXh0Kiog4oCTIGB7c3RyaW5nfWAg4oCTIEhUVFAgc3RhdHVzIHRleHQgb2YgdGhlIHJlc3BvbnNlLlxuICAgICAqICAgLSAqKnhoclN0YXR1cyoqIOKAkyBge3N0cmluZ31gIOKAkyBTdGF0dXMgb2YgdGhlIFhNTEh0dHBSZXF1ZXN0IChgY29tcGxldGVgLCBgZXJyb3JgLCBgdGltZW91dGAgb3IgYGFib3J0YCkuXG4gICAgICpcbiAgICAgKiBBIHJlc3BvbnNlIHN0YXR1cyBjb2RlIGJldHdlZW4gMjAwIGFuZCAyOTkgaXMgY29uc2lkZXJlZCBhIHN1Y2Nlc3Mgc3RhdHVzIGFuZCB3aWxsIHJlc3VsdCBpblxuICAgICAqIHRoZSBzdWNjZXNzIGNhbGxiYWNrIGJlaW5nIGNhbGxlZC4gQW55IHJlc3BvbnNlIHN0YXR1cyBjb2RlIG91dHNpZGUgb2YgdGhhdCByYW5nZSBpc1xuICAgICAqIGNvbnNpZGVyZWQgYW4gZXJyb3Igc3RhdHVzIGFuZCB3aWxsIHJlc3VsdCBpbiB0aGUgZXJyb3IgY2FsbGJhY2sgYmVpbmcgY2FsbGVkLlxuICAgICAqIEFsc28sIHN0YXR1cyBjb2RlcyBsZXNzIHRoYW4gLTEgYXJlIG5vcm1hbGl6ZWQgdG8gemVyby4gLTEgdXN1YWxseSBtZWFucyB0aGUgcmVxdWVzdCB3YXNcbiAgICAgKiBhYm9ydGVkLCBlLmcuIHVzaW5nIGEgYGNvbmZpZy50aW1lb3V0YC5cbiAgICAgKiBOb3RlIHRoYXQgaWYgdGhlIHJlc3BvbnNlIGlzIGEgcmVkaXJlY3QsIFhNTEh0dHBSZXF1ZXN0IHdpbGwgdHJhbnNwYXJlbnRseSBmb2xsb3cgaXQsIG1lYW5pbmdcbiAgICAgKiB0aGF0IHRoZSBvdXRjb21lIChzdWNjZXNzIG9yIGVycm9yKSB3aWxsIGJlIGRldGVybWluZWQgYnkgdGhlIGZpbmFsIHJlc3BvbnNlIHN0YXR1cyBjb2RlLlxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBTaG9ydGN1dCBtZXRob2RzXG4gICAgICpcbiAgICAgKiBTaG9ydGN1dCBtZXRob2RzIGFyZSBhbHNvIGF2YWlsYWJsZS4gQWxsIHNob3J0Y3V0IG1ldGhvZHMgcmVxdWlyZSBwYXNzaW5nIGluIHRoZSBVUkwsIGFuZFxuICAgICAqIHJlcXVlc3QgZGF0YSBtdXN0IGJlIHBhc3NlZCBpbiBmb3IgUE9TVC9QVVQgcmVxdWVzdHMuIEFuIG9wdGlvbmFsIGNvbmZpZyBjYW4gYmUgcGFzc2VkIGFzIHRoZVxuICAgICAqIGxhc3QgYXJndW1lbnQuXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgJGh0dHAuZ2V0KCcvc29tZVVybCcsIGNvbmZpZykudGhlbihzdWNjZXNzQ2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spO1xuICAgICAqICAgJGh0dHAucG9zdCgnL3NvbWVVcmwnLCBkYXRhLCBjb25maWcpLnRoZW4oc3VjY2Vzc0NhbGxiYWNrLCBlcnJvckNhbGxiYWNrKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIENvbXBsZXRlIGxpc3Qgb2Ygc2hvcnRjdXQgbWV0aG9kczpcbiAgICAgKlxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2dldCAkaHR0cC5nZXR9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjaGVhZCAkaHR0cC5oZWFkfVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI3Bvc3QgJGh0dHAucG9zdH1cbiAgICAgKiAtIHtAbGluayBuZy4kaHR0cCNwdXQgJGh0dHAucHV0fVxuICAgICAqIC0ge0BsaW5rIG5nLiRodHRwI2RlbGV0ZSAkaHR0cC5kZWxldGV9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjanNvbnAgJGh0dHAuanNvbnB9XG4gICAgICogLSB7QGxpbmsgbmcuJGh0dHAjcGF0Y2ggJGh0dHAucGF0Y2h9XG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIFdyaXRpbmcgVW5pdCBUZXN0cyB0aGF0IHVzZSAkaHR0cFxuICAgICAqIFdoZW4gdW5pdCB0ZXN0aW5nICh1c2luZyB7QGxpbmsgbmdNb2NrIG5nTW9ja30pLCBpdCBpcyBuZWNlc3NhcnkgdG8gY2FsbFxuICAgICAqIHtAbGluayBuZ01vY2suJGh0dHBCYWNrZW5kI2ZsdXNoICRodHRwQmFja2VuZC5mbHVzaCgpfSB0byBmbHVzaCBlYWNoIHBlbmRpbmdcbiAgICAgKiByZXF1ZXN0IHVzaW5nIHRyYWluZWQgcmVzcG9uc2VzLlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogJGh0dHBCYWNrZW5kLmV4cGVjdEdFVCguLi4pO1xuICAgICAqICRodHRwLmdldCguLi4pO1xuICAgICAqICRodHRwQmFja2VuZC5mbHVzaCgpO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyMgU2V0dGluZyBIVFRQIEhlYWRlcnNcbiAgICAgKlxuICAgICAqIFRoZSAkaHR0cCBzZXJ2aWNlIHdpbGwgYXV0b21hdGljYWxseSBhZGQgY2VydGFpbiBIVFRQIGhlYWRlcnMgdG8gYWxsIHJlcXVlc3RzLiBUaGVzZSBkZWZhdWx0c1xuICAgICAqIGNhbiBiZSBmdWxseSBjb25maWd1cmVkIGJ5IGFjY2Vzc2luZyB0aGUgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVyc2AgY29uZmlndXJhdGlvblxuICAgICAqIG9iamVjdCwgd2hpY2ggY3VycmVudGx5IGNvbnRhaW5zIHRoaXMgZGVmYXVsdCBjb25maWd1cmF0aW9uOlxuICAgICAqXG4gICAgICogLSBgJGh0dHBQcm92aWRlci5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbmAgKGhlYWRlcnMgdGhhdCBhcmUgY29tbW9uIGZvciBhbGwgcmVxdWVzdHMpOlxuICAgICAqICAgLSA8Y29kZT5BY2NlcHQ6IGFwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sIFxcKiYjNjUyNzk7LyYjNjUyNzk7XFwqPC9jb2RlPlxuICAgICAqIC0gYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5wb3N0YDogKGhlYWRlciBkZWZhdWx0cyBmb3IgUE9TVCByZXF1ZXN0cylcbiAgICAgKiAgIC0gYENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbmBcbiAgICAgKiAtIGAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMucHV0YCAoaGVhZGVyIGRlZmF1bHRzIGZvciBQVVQgcmVxdWVzdHMpXG4gICAgICogICAtIGBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25gXG4gICAgICpcbiAgICAgKiBUbyBhZGQgb3Igb3ZlcndyaXRlIHRoZXNlIGRlZmF1bHRzLCBzaW1wbHkgYWRkIG9yIHJlbW92ZSBhIHByb3BlcnR5IGZyb20gdGhlc2UgY29uZmlndXJhdGlvblxuICAgICAqIG9iamVjdHMuIFRvIGFkZCBoZWFkZXJzIGZvciBhbiBIVFRQIG1ldGhvZCBvdGhlciB0aGFuIFBPU1Qgb3IgUFVULCBzaW1wbHkgYWRkIGEgbmV3IG9iamVjdFxuICAgICAqIHdpdGggdGhlIGxvd2VyY2FzZWQgSFRUUCBtZXRob2QgbmFtZSBhcyB0aGUga2V5LCBlLmcuXG4gICAgICogYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5nZXQgPSB7ICdNeS1IZWFkZXInIDogJ3ZhbHVlJyB9YC5cbiAgICAgKlxuICAgICAqIFRoZSBkZWZhdWx0cyBjYW4gYWxzbyBiZSBzZXQgYXQgcnVudGltZSB2aWEgdGhlIGAkaHR0cC5kZWZhdWx0c2Agb2JqZWN0IGluIHRoZSBzYW1lXG4gICAgICogZmFzaGlvbi4gRm9yIGV4YW1wbGU6XG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiBtb2R1bGUucnVuKGZ1bmN0aW9uKCRodHRwKSB7XG4gICAgICogICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljIFltVmxjRHBpYjI5dyc7XG4gICAgICogfSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBJbiBhZGRpdGlvbiwgeW91IGNhbiBzdXBwbHkgYSBgaGVhZGVyc2AgcHJvcGVydHkgaW4gdGhlIGNvbmZpZyBvYmplY3QgcGFzc2VkIHdoZW5cbiAgICAgKiBjYWxsaW5nIGAkaHR0cChjb25maWcpYCwgd2hpY2ggb3ZlcnJpZGVzIHRoZSBkZWZhdWx0cyB3aXRob3V0IGNoYW5naW5nIHRoZW0gZ2xvYmFsbHkuXG4gICAgICpcbiAgICAgKiBUbyBleHBsaWNpdGx5IHJlbW92ZSBhIGhlYWRlciBhdXRvbWF0aWNhbGx5IGFkZGVkIHZpYSAkaHR0cFByb3ZpZGVyLmRlZmF1bHRzLmhlYWRlcnMgb24gYSBwZXIgcmVxdWVzdCBiYXNpcyxcbiAgICAgKiBVc2UgdGhlIGBoZWFkZXJzYCBwcm9wZXJ0eSwgc2V0dGluZyB0aGUgZGVzaXJlZCBoZWFkZXIgdG8gYHVuZGVmaW5lZGAuIEZvciBleGFtcGxlOlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiB2YXIgcmVxID0ge1xuICAgICAqICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgKiAgdXJsOiAnaHR0cDovL2V4YW1wbGUuY29tJyxcbiAgICAgKiAgaGVhZGVyczoge1xuICAgICAqICAgICdDb250ZW50LVR5cGUnOiB1bmRlZmluZWRcbiAgICAgKiAgfSxcbiAgICAgKiAgZGF0YTogeyB0ZXN0OiAndGVzdCcgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqICRodHRwKHJlcSkudGhlbihmdW5jdGlvbigpey4uLn0sIGZ1bmN0aW9uKCl7Li4ufSk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAjIyBUcmFuc2Zvcm1pbmcgUmVxdWVzdHMgYW5kIFJlc3BvbnNlc1xuICAgICAqXG4gICAgICogQm90aCByZXF1ZXN0cyBhbmQgcmVzcG9uc2VzIGNhbiBiZSB0cmFuc2Zvcm1lZCB1c2luZyB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbnM6IGB0cmFuc2Zvcm1SZXF1ZXN0YFxuICAgICAqIGFuZCBgdHJhbnNmb3JtUmVzcG9uc2VgLiBUaGVzZSBwcm9wZXJ0aWVzIGNhbiBiZSBhIHNpbmdsZSBmdW5jdGlvbiB0aGF0IHJldHVybnNcbiAgICAgKiB0aGUgdHJhbnNmb3JtZWQgdmFsdWUgKGBmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyLCBzdGF0dXMpYCkgb3IgYW4gYXJyYXkgb2Ygc3VjaCB0cmFuc2Zvcm1hdGlvbiBmdW5jdGlvbnMsXG4gICAgICogd2hpY2ggYWxsb3dzIHlvdSB0byBgcHVzaGAgb3IgYHVuc2hpZnRgIGEgbmV3IHRyYW5zZm9ybWF0aW9uIGZ1bmN0aW9uIGludG8gdGhlIHRyYW5zZm9ybWF0aW9uIGNoYWluLlxuICAgICAqXG4gICAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAgICAgKiAqKk5vdGU6KiogQW5ndWxhciBkb2VzIG5vdCBtYWtlIGEgY29weSBvZiB0aGUgYGRhdGFgIHBhcmFtZXRlciBiZWZvcmUgaXQgaXMgcGFzc2VkIGludG8gdGhlIGB0cmFuc2Zvcm1SZXF1ZXN0YCBwaXBlbGluZS5cbiAgICAgKiBUaGF0IG1lYW5zIGNoYW5nZXMgdG8gdGhlIHByb3BlcnRpZXMgb2YgYGRhdGFgIGFyZSBub3QgbG9jYWwgdG8gdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiAoc2luY2UgSmF2YXNjcmlwdCBwYXNzZXMgb2JqZWN0cyBieSByZWZlcmVuY2UpLlxuICAgICAqIEZvciBleGFtcGxlLCB3aGVuIGNhbGxpbmcgYCRodHRwLmdldCh1cmwsICRzY29wZS5teU9iamVjdClgLCBtb2RpZmljYXRpb25zIHRvIHRoZSBvYmplY3QncyBwcm9wZXJ0aWVzIGluIGEgdHJhbnNmb3JtUmVxdWVzdFxuICAgICAqIGZ1bmN0aW9uIHdpbGwgYmUgcmVmbGVjdGVkIG9uIHRoZSBzY29wZSBhbmQgaW4gYW55IHRlbXBsYXRlcyB3aGVyZSB0aGUgb2JqZWN0IGlzIGRhdGEtYm91bmQuXG4gICAgICogVG8gcHJldmVudCB0aGlzLCB0cmFuc2Zvcm0gZnVuY3Rpb25zIHNob3VsZCBoYXZlIG5vIHNpZGUtZWZmZWN0cy5cbiAgICAgKiBJZiB5b3UgbmVlZCB0byBtb2RpZnkgcHJvcGVydGllcywgaXQgaXMgcmVjb21tZW5kZWQgdG8gbWFrZSBhIGNvcHkgb2YgdGhlIGRhdGEsIG9yIGNyZWF0ZSBuZXcgb2JqZWN0IHRvIHJldHVybi5cbiAgICAgKiA8L2Rpdj5cbiAgICAgKlxuICAgICAqICMjIyBEZWZhdWx0IFRyYW5zZm9ybWF0aW9uc1xuICAgICAqXG4gICAgICogVGhlIGAkaHR0cFByb3ZpZGVyYCBwcm92aWRlciBhbmQgYCRodHRwYCBzZXJ2aWNlIGV4cG9zZSBgZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdGAgYW5kXG4gICAgICogYGRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlYCBwcm9wZXJ0aWVzLiBJZiBhIHJlcXVlc3QgZG9lcyBub3QgcHJvdmlkZSBpdHMgb3duIHRyYW5zZm9ybWF0aW9uc1xuICAgICAqIHRoZW4gdGhlc2Ugd2lsbCBiZSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogWW91IGNhbiBhdWdtZW50IG9yIHJlcGxhY2UgdGhlIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zIGJ5IG1vZGlmeWluZyB0aGVzZSBwcm9wZXJ0aWVzIGJ5IGFkZGluZyB0byBvclxuICAgICAqIHJlcGxhY2luZyB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBBbmd1bGFyIHByb3ZpZGVzIHRoZSBmb2xsb3dpbmcgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbnM6XG4gICAgICpcbiAgICAgKiBSZXF1ZXN0IHRyYW5zZm9ybWF0aW9ucyAoYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMudHJhbnNmb3JtUmVxdWVzdGAgYW5kIGAkaHR0cC5kZWZhdWx0cy50cmFuc2Zvcm1SZXF1ZXN0YCkgaXNcbiAgICAgKiBhbiBhcnJheSB3aXRoIG9uZSBmdW5jdGlvbiB0aGF0IGRvZXMgdGhlIGZvbGxvd2luZzpcbiAgICAgKlxuICAgICAqIC0gSWYgdGhlIGBkYXRhYCBwcm9wZXJ0eSBvZiB0aGUgcmVxdWVzdCBjb25maWd1cmF0aW9uIG9iamVjdCBjb250YWlucyBhbiBvYmplY3QsIHNlcmlhbGl6ZSBpdFxuICAgICAqICAgaW50byBKU09OIGZvcm1hdC5cbiAgICAgKlxuICAgICAqIFJlc3BvbnNlIHRyYW5zZm9ybWF0aW9ucyAoYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VgIGFuZCBgJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2VgKSBpc1xuICAgICAqIGFuIGFycmF5IHdpdGggb25lIGZ1bmN0aW9uIHRoYXQgZG9lcyB0aGUgZm9sbG93aW5nOlxuICAgICAqXG4gICAgICogIC0gSWYgWFNSRiBwcmVmaXggaXMgZGV0ZWN0ZWQsIHN0cmlwIGl0IChzZWUgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnMgc2VjdGlvbiBiZWxvdykuXG4gICAgICogIC0gSWYgdGhlIGBDb250ZW50LVR5cGVgIGlzIGBhcHBsaWNhdGlvbi9qc29uYCBvciB0aGUgcmVzcG9uc2UgbG9va3MgbGlrZSBKU09OLFxuICAgKiAgICAgIGRlc2VyaWFsaXplIGl0IHVzaW5nIGEgSlNPTiBwYXJzZXIuXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIyBPdmVycmlkaW5nIHRoZSBEZWZhdWx0IFRyYW5zZm9ybWF0aW9ucyBQZXIgUmVxdWVzdFxuICAgICAqXG4gICAgICogSWYgeW91IHdpc2ggdG8gb3ZlcnJpZGUgdGhlIHJlcXVlc3QvcmVzcG9uc2UgdHJhbnNmb3JtYXRpb25zIG9ubHkgZm9yIGEgc2luZ2xlIHJlcXVlc3QgdGhlbiBwcm92aWRlXG4gICAgICogYHRyYW5zZm9ybVJlcXVlc3RgIGFuZC9vciBgdHJhbnNmb3JtUmVzcG9uc2VgIHByb3BlcnRpZXMgb24gdGhlIGNvbmZpZ3VyYXRpb24gb2JqZWN0IHBhc3NlZFxuICAgICAqIGludG8gYCRodHRwYC5cbiAgICAgKlxuICAgICAqIE5vdGUgdGhhdCBpZiB5b3UgcHJvdmlkZSB0aGVzZSBwcm9wZXJ0aWVzIG9uIHRoZSBjb25maWcgb2JqZWN0IHRoZSBkZWZhdWx0IHRyYW5zZm9ybWF0aW9ucyB3aWxsIGJlXG4gICAgICogb3ZlcndyaXR0ZW4uIElmIHlvdSB3aXNoIHRvIGF1Z21lbnQgdGhlIGRlZmF1bHQgdHJhbnNmb3JtYXRpb25zIHRoZW4geW91IG11c3QgaW5jbHVkZSB0aGVtIGluIHlvdXJcbiAgICAgKiBsb2NhbCB0cmFuc2Zvcm1hdGlvbiBhcnJheS5cbiAgICAgKlxuICAgICAqIFRoZSBmb2xsb3dpbmcgY29kZSBkZW1vbnN0cmF0ZXMgYWRkaW5nIGEgbmV3IHJlc3BvbnNlIHRyYW5zZm9ybWF0aW9uIHRvIGJlIHJ1biBhZnRlciB0aGUgZGVmYXVsdCByZXNwb25zZVxuICAgICAqIHRyYW5zZm9ybWF0aW9ucyBoYXZlIGJlZW4gcnVuLlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBmdW5jdGlvbiBhcHBlbmRUcmFuc2Zvcm0oZGVmYXVsdHMsIHRyYW5zZm9ybSkge1xuICAgICAqXG4gICAgICogICAvLyBXZSBjYW4ndCBndWFyYW50ZWUgdGhhdCB0aGUgZGVmYXVsdCB0cmFuc2Zvcm1hdGlvbiBpcyBhbiBhcnJheVxuICAgICAqICAgZGVmYXVsdHMgPSBhbmd1bGFyLmlzQXJyYXkoZGVmYXVsdHMpID8gZGVmYXVsdHMgOiBbZGVmYXVsdHNdO1xuICAgICAqXG4gICAgICogICAvLyBBcHBlbmQgdGhlIG5ldyB0cmFuc2Zvcm1hdGlvbiB0byB0aGUgZGVmYXVsdHNcbiAgICAgKiAgIHJldHVybiBkZWZhdWx0cy5jb25jYXQodHJhbnNmb3JtKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiAkaHR0cCh7XG4gICAgICogICB1cmw6ICcuLi4nLFxuICAgICAqICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgKiAgIHRyYW5zZm9ybVJlc3BvbnNlOiBhcHBlbmRUcmFuc2Zvcm0oJGh0dHAuZGVmYXVsdHMudHJhbnNmb3JtUmVzcG9uc2UsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICAgIHJldHVybiBkb1RyYW5zZm9ybSh2YWx1ZSk7XG4gICAgICogICB9KVxuICAgICAqIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICpcbiAgICAgKiAjIyBDYWNoaW5nXG4gICAgICpcbiAgICAgKiB7QGxpbmsgbmcuJGh0dHAgYCRodHRwYH0gcmVzcG9uc2VzIGFyZSBub3QgY2FjaGVkIGJ5IGRlZmF1bHQuIFRvIGVuYWJsZSBjYWNoaW5nLCB5b3UgbXVzdFxuICAgICAqIHNldCB0aGUgY29uZmlnLmNhY2hlIHZhbHVlIG9yIHRoZSBkZWZhdWx0IGNhY2hlIHZhbHVlIHRvIFRSVUUgb3IgdG8gYSBjYWNoZSBvYmplY3QgKGNyZWF0ZWRcbiAgICAgKiB3aXRoIHtAbGluayBuZy4kY2FjaGVGYWN0b3J5IGAkY2FjaGVGYWN0b3J5YH0pLiBJZiBkZWZpbmVkLCB0aGUgdmFsdWUgb2YgY29uZmlnLmNhY2hlIHRha2VzXG4gICAgICogcHJlY2VkZW5jZSBvdmVyIHRoZSBkZWZhdWx0IGNhY2hlIHZhbHVlLlxuICAgICAqXG4gICAgICogSW4gb3JkZXIgdG86XG4gICAgICogICAqIGNhY2hlIGFsbCByZXNwb25zZXMgLSBzZXQgdGhlIGRlZmF1bHQgY2FjaGUgdmFsdWUgdG8gVFJVRSBvciB0byBhIGNhY2hlIG9iamVjdFxuICAgICAqICAgKiBjYWNoZSBhIHNwZWNpZmljIHJlc3BvbnNlIC0gc2V0IGNvbmZpZy5jYWNoZSB2YWx1ZSB0byBUUlVFIG9yIHRvIGEgY2FjaGUgb2JqZWN0XG4gICAgICpcbiAgICAgKiBJZiBjYWNoaW5nIGlzIGVuYWJsZWQsIGJ1dCBuZWl0aGVyIHRoZSBkZWZhdWx0IGNhY2hlIG5vciBjb25maWcuY2FjaGUgYXJlIHNldCB0byBhIGNhY2hlIG9iamVjdCxcbiAgICAgKiB0aGVuIHRoZSBkZWZhdWx0IGAkY2FjaGVGYWN0b3J5KFwiJGh0dHBcIilgIG9iamVjdCBpcyB1c2VkLlxuICAgICAqXG4gICAgICogVGhlIGRlZmF1bHQgY2FjaGUgdmFsdWUgY2FuIGJlIHNldCBieSB1cGRhdGluZyB0aGVcbiAgICAgKiB7QGxpbmsgbmcuJGh0dHAjZGVmYXVsdHMgYCRodHRwLmRlZmF1bHRzLmNhY2hlYH0gcHJvcGVydHkgb3IgdGhlXG4gICAgICoge0BsaW5rICRodHRwUHJvdmlkZXIjZGVmYXVsdHMgYCRodHRwUHJvdmlkZXIuZGVmYXVsdHMuY2FjaGVgfSBwcm9wZXJ0eS5cbiAgICAgKlxuICAgICAqIFdoZW4gY2FjaGluZyBpcyBlbmFibGVkLCB7QGxpbmsgbmcuJGh0dHAgYCRodHRwYH0gc3RvcmVzIHRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIgdXNpbmdcbiAgICAgKiB0aGUgcmVsZXZhbnQgY2FjaGUgb2JqZWN0LiBUaGUgbmV4dCB0aW1lIHRoZSBzYW1lIHJlcXVlc3QgaXMgbWFkZSwgdGhlIHJlc3BvbnNlIGlzIHJldHVybmVkXG4gICAgICogZnJvbSB0aGUgY2FjaGUgd2l0aG91dCBzZW5kaW5nIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyLlxuICAgICAqXG4gICAgICogVGFrZSBub3RlIHRoYXQ6XG4gICAgICpcbiAgICAgKiAgICogT25seSBHRVQgYW5kIEpTT05QIHJlcXVlc3RzIGFyZSBjYWNoZWQuXG4gICAgICogICAqIFRoZSBjYWNoZSBrZXkgaXMgdGhlIHJlcXVlc3QgVVJMIGluY2x1ZGluZyBzZWFyY2ggcGFyYW1ldGVyczsgaGVhZGVycyBhcmUgbm90IGNvbnNpZGVyZWQuXG4gICAgICogICAqIENhY2hlZCByZXNwb25zZXMgYXJlIHJldHVybmVkIGFzeW5jaHJvbm91c2x5LCBpbiB0aGUgc2FtZSB3YXkgYXMgcmVzcG9uc2VzIGZyb20gdGhlIHNlcnZlci5cbiAgICAgKiAgICogSWYgbXVsdGlwbGUgaWRlbnRpY2FsIHJlcXVlc3RzIGFyZSBtYWRlIHVzaW5nIHRoZSBzYW1lIGNhY2hlLCB3aGljaCBpcyBub3QgeWV0IHBvcHVsYXRlZCxcbiAgICAgKiAgICAgb25lIHJlcXVlc3Qgd2lsbCBiZSBtYWRlIHRvIHRoZSBzZXJ2ZXIgYW5kIHJlbWFpbmluZyByZXF1ZXN0cyB3aWxsIHJldHVybiB0aGUgc2FtZSByZXNwb25zZS5cbiAgICAgKiAgICogQSBjYWNoZS1jb250cm9sIGhlYWRlciBvbiB0aGUgcmVzcG9uc2UgZG9lcyBub3QgYWZmZWN0IGlmIG9yIGhvdyByZXNwb25zZXMgYXJlIGNhY2hlZC5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyMgSW50ZXJjZXB0b3JzXG4gICAgICpcbiAgICAgKiBCZWZvcmUgeW91IHN0YXJ0IGNyZWF0aW5nIGludGVyY2VwdG9ycywgYmUgc3VyZSB0byB1bmRlcnN0YW5kIHRoZVxuICAgICAqIHtAbGluayBuZy4kcSAkcSBhbmQgZGVmZXJyZWQvcHJvbWlzZSBBUElzfS5cbiAgICAgKlxuICAgICAqIEZvciBwdXJwb3NlcyBvZiBnbG9iYWwgZXJyb3IgaGFuZGxpbmcsIGF1dGhlbnRpY2F0aW9uLCBvciBhbnkga2luZCBvZiBzeW5jaHJvbm91cyBvclxuICAgICAqIGFzeW5jaHJvbm91cyBwcmUtcHJvY2Vzc2luZyBvZiByZXF1ZXN0IG9yIHBvc3Rwcm9jZXNzaW5nIG9mIHJlc3BvbnNlcywgaXQgaXMgZGVzaXJhYmxlIHRvIGJlXG4gICAgICogYWJsZSB0byBpbnRlcmNlcHQgcmVxdWVzdHMgYmVmb3JlIHRoZXkgYXJlIGhhbmRlZCB0byB0aGUgc2VydmVyIGFuZFxuICAgICAqIHJlc3BvbnNlcyBiZWZvcmUgdGhleSBhcmUgaGFuZGVkIG92ZXIgdG8gdGhlIGFwcGxpY2F0aW9uIGNvZGUgdGhhdFxuICAgICAqIGluaXRpYXRlZCB0aGVzZSByZXF1ZXN0cy4gVGhlIGludGVyY2VwdG9ycyBsZXZlcmFnZSB0aGUge0BsaW5rIG5nLiRxXG4gICAgICogcHJvbWlzZSBBUElzfSB0byBmdWxmaWxsIHRoaXMgbmVlZCBmb3IgYm90aCBzeW5jaHJvbm91cyBhbmQgYXN5bmNocm9ub3VzIHByZS1wcm9jZXNzaW5nLlxuICAgICAqXG4gICAgICogVGhlIGludGVyY2VwdG9ycyBhcmUgc2VydmljZSBmYWN0b3JpZXMgdGhhdCBhcmUgcmVnaXN0ZXJlZCB3aXRoIHRoZSBgJGh0dHBQcm92aWRlcmAgYnlcbiAgICAgKiBhZGRpbmcgdGhlbSB0byB0aGUgYCRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzYCBhcnJheS4gVGhlIGZhY3RvcnkgaXMgY2FsbGVkIGFuZFxuICAgICAqIGluamVjdGVkIHdpdGggZGVwZW5kZW5jaWVzIChpZiBzcGVjaWZpZWQpIGFuZCByZXR1cm5zIHRoZSBpbnRlcmNlcHRvci5cbiAgICAgKlxuICAgICAqIFRoZXJlIGFyZSB0d28ga2luZHMgb2YgaW50ZXJjZXB0b3JzIChhbmQgdHdvIGtpbmRzIG9mIHJlamVjdGlvbiBpbnRlcmNlcHRvcnMpOlxuICAgICAqXG4gICAgICogICAqIGByZXF1ZXN0YDogaW50ZXJjZXB0b3JzIGdldCBjYWxsZWQgd2l0aCBhIGh0dHAge0BsaW5rICRodHRwI3VzYWdlIGNvbmZpZ30gb2JqZWN0LiBUaGUgZnVuY3Rpb24gaXMgZnJlZSB0b1xuICAgICAqICAgICBtb2RpZnkgdGhlIGBjb25maWdgIG9iamVjdCBvciBjcmVhdGUgYSBuZXcgb25lLiBUaGUgZnVuY3Rpb24gbmVlZHMgdG8gcmV0dXJuIHRoZSBgY29uZmlnYFxuICAgICAqICAgICBvYmplY3QgZGlyZWN0bHksIG9yIGEgcHJvbWlzZSBjb250YWluaW5nIHRoZSBgY29uZmlnYCBvciBhIG5ldyBgY29uZmlnYCBvYmplY3QuXG4gICAgICogICAqIGByZXF1ZXN0RXJyb3JgOiBpbnRlcmNlcHRvciBnZXRzIGNhbGxlZCB3aGVuIGEgcHJldmlvdXMgaW50ZXJjZXB0b3IgdGhyZXcgYW4gZXJyb3Igb3JcbiAgICAgKiAgICAgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgKiAgICogYHJlc3BvbnNlYDogaW50ZXJjZXB0b3JzIGdldCBjYWxsZWQgd2l0aCBodHRwIGByZXNwb25zZWAgb2JqZWN0LiBUaGUgZnVuY3Rpb24gaXMgZnJlZSB0b1xuICAgICAqICAgICBtb2RpZnkgdGhlIGByZXNwb25zZWAgb2JqZWN0IG9yIGNyZWF0ZSBhIG5ldyBvbmUuIFRoZSBmdW5jdGlvbiBuZWVkcyB0byByZXR1cm4gdGhlIGByZXNwb25zZWBcbiAgICAgKiAgICAgb2JqZWN0IGRpcmVjdGx5LCBvciBhcyBhIHByb21pc2UgY29udGFpbmluZyB0aGUgYHJlc3BvbnNlYCBvciBhIG5ldyBgcmVzcG9uc2VgIG9iamVjdC5cbiAgICAgKiAgICogYHJlc3BvbnNlRXJyb3JgOiBpbnRlcmNlcHRvciBnZXRzIGNhbGxlZCB3aGVuIGEgcHJldmlvdXMgaW50ZXJjZXB0b3IgdGhyZXcgYW4gZXJyb3Igb3JcbiAgICAgKiAgICAgcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgKlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIC8vIHJlZ2lzdGVyIHRoZSBpbnRlcmNlcHRvciBhcyBhIHNlcnZpY2VcbiAgICAgKiAgICRwcm92aWRlLmZhY3RvcnkoJ215SHR0cEludGVyY2VwdG9yJywgZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5Mikge1xuICAgICAqICAgICByZXR1cm4ge1xuICAgICAqICAgICAgIC8vIG9wdGlvbmFsIG1ldGhvZFxuICAgICAqICAgICAgICdyZXF1ZXN0JzogZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gc3VjY2Vzc1xuICAgICAqICAgICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICAgKiAgICAgICB9LFxuICAgICAqXG4gICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICogICAgICAncmVxdWVzdEVycm9yJzogZnVuY3Rpb24ocmVqZWN0aW9uKSB7XG4gICAgICogICAgICAgICAvLyBkbyBzb21ldGhpbmcgb24gZXJyb3JcbiAgICAgKiAgICAgICAgIGlmIChjYW5SZWNvdmVyKHJlamVjdGlvbikpIHtcbiAgICAgKiAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlT3JOZXdQcm9taXNlXG4gICAgICogICAgICAgICB9XG4gICAgICogICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlamVjdGlvbik7XG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqXG4gICAgICpcbiAgICAgKiAgICAgICAvLyBvcHRpb25hbCBtZXRob2RcbiAgICAgKiAgICAgICAncmVzcG9uc2UnOiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIHN1Y2Nlc3NcbiAgICAgKiAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgKiAgICAgICB9LFxuICAgICAqXG4gICAgICogICAgICAgLy8gb3B0aW9uYWwgbWV0aG9kXG4gICAgICogICAgICAncmVzcG9uc2VFcnJvcic6IGZ1bmN0aW9uKHJlamVjdGlvbikge1xuICAgICAqICAgICAgICAgLy8gZG8gc29tZXRoaW5nIG9uIGVycm9yXG4gICAgICogICAgICAgICBpZiAoY2FuUmVjb3ZlcihyZWplY3Rpb24pKSB7XG4gICAgICogICAgICAgICAgIHJldHVybiByZXNwb25zZU9yTmV3UHJvbWlzZVxuICAgICAqICAgICAgICAgfVxuICAgICAqICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZWplY3Rpb24pO1xuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgfTtcbiAgICAgKiAgIH0pO1xuICAgICAqXG4gICAgICogICAkaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdteUh0dHBJbnRlcmNlcHRvcicpO1xuICAgICAqXG4gICAgICpcbiAgICAgKiAgIC8vIGFsdGVybmF0aXZlbHksIHJlZ2lzdGVyIHRoZSBpbnRlcmNlcHRvciB2aWEgYW4gYW5vbnltb3VzIGZhY3RvcnlcbiAgICAgKiAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goZnVuY3Rpb24oJHEsIGRlcGVuZGVuY3kxLCBkZXBlbmRlbmN5Mikge1xuICAgICAqICAgICByZXR1cm4ge1xuICAgICAqICAgICAgJ3JlcXVlc3QnOiBmdW5jdGlvbihjb25maWcpIHtcbiAgICAgKiAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlXG4gICAgICogICAgICAgfSxcbiAgICAgKlxuICAgICAqICAgICAgICdyZXNwb25zZSc6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICogICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZVxuICAgICAqICAgICAgIH1cbiAgICAgKiAgICAgfTtcbiAgICAgKiAgIH0pO1xuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIyMgU2VjdXJpdHkgQ29uc2lkZXJhdGlvbnNcbiAgICAgKlxuICAgICAqIFdoZW4gZGVzaWduaW5nIHdlYiBhcHBsaWNhdGlvbnMsIGNvbnNpZGVyIHNlY3VyaXR5IHRocmVhdHMgZnJvbTpcbiAgICAgKlxuICAgICAqIC0gW0pTT04gdnVsbmVyYWJpbGl0eV0oaHR0cDovL2hhYWNrZWQuY29tL2FyY2hpdmUvMjAwOC8xMS8yMC9hbmF0b215LW9mLWEtc3VidGxlLWpzb24tdnVsbmVyYWJpbGl0eS5hc3B4KVxuICAgICAqIC0gW1hTUkZdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3Jvc3Mtc2l0ZV9yZXF1ZXN0X2ZvcmdlcnkpXG4gICAgICpcbiAgICAgKiBCb3RoIHNlcnZlciBhbmQgdGhlIGNsaWVudCBtdXN0IGNvb3BlcmF0ZSBpbiBvcmRlciB0byBlbGltaW5hdGUgdGhlc2UgdGhyZWF0cy4gQW5ndWxhciBjb21lc1xuICAgICAqIHByZS1jb25maWd1cmVkIHdpdGggc3RyYXRlZ2llcyB0aGF0IGFkZHJlc3MgdGhlc2UgaXNzdWVzLCBidXQgZm9yIHRoaXMgdG8gd29yayBiYWNrZW5kIHNlcnZlclxuICAgICAqIGNvb3BlcmF0aW9uIGlzIHJlcXVpcmVkLlxuICAgICAqXG4gICAgICogIyMjIEpTT04gVnVsbmVyYWJpbGl0eSBQcm90ZWN0aW9uXG4gICAgICpcbiAgICAgKiBBIFtKU09OIHZ1bG5lcmFiaWxpdHldKGh0dHA6Ly9oYWFja2VkLmNvbS9hcmNoaXZlLzIwMDgvMTEvMjAvYW5hdG9teS1vZi1hLXN1YnRsZS1qc29uLXZ1bG5lcmFiaWxpdHkuYXNweClcbiAgICAgKiBhbGxvd3MgdGhpcmQgcGFydHkgd2Vic2l0ZSB0byB0dXJuIHlvdXIgSlNPTiByZXNvdXJjZSBVUkwgaW50b1xuICAgICAqIFtKU09OUF0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9KU09OUCkgcmVxdWVzdCB1bmRlciBzb21lIGNvbmRpdGlvbnMuIFRvXG4gICAgICogY291bnRlciB0aGlzIHlvdXIgc2VydmVyIGNhbiBwcmVmaXggYWxsIEpTT04gcmVxdWVzdHMgd2l0aCBmb2xsb3dpbmcgc3RyaW5nIGBcIildfScsXFxuXCJgLlxuICAgICAqIEFuZ3VsYXIgd2lsbCBhdXRvbWF0aWNhbGx5IHN0cmlwIHRoZSBwcmVmaXggYmVmb3JlIHByb2Nlc3NpbmcgaXQgYXMgSlNPTi5cbiAgICAgKlxuICAgICAqIEZvciBleGFtcGxlIGlmIHlvdXIgc2VydmVyIG5lZWRzIHRvIHJldHVybjpcbiAgICAgKiBgYGBqc1xuICAgICAqIFsnb25lJywndHdvJ11cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIHdoaWNoIGlzIHZ1bG5lcmFibGUgdG8gYXR0YWNrLCB5b3VyIHNlcnZlciBjYW4gcmV0dXJuOlxuICAgICAqIGBgYGpzXG4gICAgICogKV19JyxcbiAgICAgKiBbJ29uZScsJ3R3byddXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBBbmd1bGFyIHdpbGwgc3RyaXAgdGhlIHByZWZpeCwgYmVmb3JlIHByb2Nlc3NpbmcgdGhlIEpTT04uXG4gICAgICpcbiAgICAgKlxuICAgICAqICMjIyBDcm9zcyBTaXRlIFJlcXVlc3QgRm9yZ2VyeSAoWFNSRikgUHJvdGVjdGlvblxuICAgICAqXG4gICAgICogW1hTUkZdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ3Jvc3Mtc2l0ZV9yZXF1ZXN0X2ZvcmdlcnkpIGlzIGFuIGF0dGFjayB0ZWNobmlxdWUgYnlcbiAgICAgKiB3aGljaCB0aGUgYXR0YWNrZXIgY2FuIHRyaWNrIGFuIGF1dGhlbnRpY2F0ZWQgdXNlciBpbnRvIHVua25vd2luZ2x5IGV4ZWN1dGluZyBhY3Rpb25zIG9uIHlvdXJcbiAgICAgKiB3ZWJzaXRlLiBBbmd1bGFyIHByb3ZpZGVzIGEgbWVjaGFuaXNtIHRvIGNvdW50ZXIgWFNSRi4gV2hlbiBwZXJmb3JtaW5nIFhIUiByZXF1ZXN0cywgdGhlXG4gICAgICogJGh0dHAgc2VydmljZSByZWFkcyBhIHRva2VuIGZyb20gYSBjb29raWUgKGJ5IGRlZmF1bHQsIGBYU1JGLVRPS0VOYCkgYW5kIHNldHMgaXQgYXMgYW4gSFRUUFxuICAgICAqIGhlYWRlciAoYFgtWFNSRi1UT0tFTmApLiBTaW5jZSBvbmx5IEphdmFTY3JpcHQgdGhhdCBydW5zIG9uIHlvdXIgZG9tYWluIGNvdWxkIHJlYWQgdGhlXG4gICAgICogY29va2llLCB5b3VyIHNlcnZlciBjYW4gYmUgYXNzdXJlZCB0aGF0IHRoZSBYSFIgY2FtZSBmcm9tIEphdmFTY3JpcHQgcnVubmluZyBvbiB5b3VyIGRvbWFpbi5cbiAgICAgKiBUaGUgaGVhZGVyIHdpbGwgbm90IGJlIHNldCBmb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzLlxuICAgICAqXG4gICAgICogVG8gdGFrZSBhZHZhbnRhZ2Ugb2YgdGhpcywgeW91ciBzZXJ2ZXIgbmVlZHMgdG8gc2V0IGEgdG9rZW4gaW4gYSBKYXZhU2NyaXB0IHJlYWRhYmxlIHNlc3Npb25cbiAgICAgKiBjb29raWUgY2FsbGVkIGBYU1JGLVRPS0VOYCBvbiB0aGUgZmlyc3QgSFRUUCBHRVQgcmVxdWVzdC4gT24gc3Vic2VxdWVudCBYSFIgcmVxdWVzdHMgdGhlXG4gICAgICogc2VydmVyIGNhbiB2ZXJpZnkgdGhhdCB0aGUgY29va2llIG1hdGNoZXMgYFgtWFNSRi1UT0tFTmAgSFRUUCBoZWFkZXIsIGFuZCB0aGVyZWZvcmUgYmUgc3VyZVxuICAgICAqIHRoYXQgb25seSBKYXZhU2NyaXB0IHJ1bm5pbmcgb24geW91ciBkb21haW4gY291bGQgaGF2ZSBzZW50IHRoZSByZXF1ZXN0LiBUaGUgdG9rZW4gbXVzdCBiZVxuICAgICAqIHVuaXF1ZSBmb3IgZWFjaCB1c2VyIGFuZCBtdXN0IGJlIHZlcmlmaWFibGUgYnkgdGhlIHNlcnZlciAodG8gcHJldmVudCB0aGUgSmF2YVNjcmlwdCBmcm9tXG4gICAgICogbWFraW5nIHVwIGl0cyBvd24gdG9rZW5zKS4gV2UgcmVjb21tZW5kIHRoYXQgdGhlIHRva2VuIGlzIGEgZGlnZXN0IG9mIHlvdXIgc2l0ZSdzXG4gICAgICogYXV0aGVudGljYXRpb24gY29va2llIHdpdGggYSBbc2FsdF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU2FsdF8oY3J5cHRvZ3JhcGh5JiM0MTspXG4gICAgICogZm9yIGFkZGVkIHNlY3VyaXR5LlxuICAgICAqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGhlYWRlcnMgY2FuIGJlIHNwZWNpZmllZCB1c2luZyB0aGUgeHNyZkhlYWRlck5hbWUgYW5kIHhzcmZDb29raWVOYW1lXG4gICAgICogcHJvcGVydGllcyBvZiBlaXRoZXIgJGh0dHBQcm92aWRlci5kZWZhdWx0cyBhdCBjb25maWctdGltZSwgJGh0dHAuZGVmYXVsdHMgYXQgcnVuLXRpbWUsXG4gICAgICogb3IgdGhlIHBlci1yZXF1ZXN0IGNvbmZpZyBvYmplY3QuXG4gICAgICpcbiAgICAgKiBJbiBvcmRlciB0byBwcmV2ZW50IGNvbGxpc2lvbnMgaW4gZW52aXJvbm1lbnRzIHdoZXJlIG11bHRpcGxlIEFuZ3VsYXIgYXBwcyBzaGFyZSB0aGVcbiAgICAgKiBzYW1lIGRvbWFpbiBvciBzdWJkb21haW4sIHdlIHJlY29tbWVuZCB0aGF0IGVhY2ggYXBwbGljYXRpb24gdXNlcyB1bmlxdWUgY29va2llIG5hbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIE9iamVjdCBkZXNjcmliaW5nIHRoZSByZXF1ZXN0IHRvIGJlIG1hZGUgYW5kIGhvdyBpdCBzaG91bGQgYmVcbiAgICAgKiAgICBwcm9jZXNzZWQuIFRoZSBvYmplY3QgaGFzIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAqXG4gICAgICogICAgLSAqKm1ldGhvZCoqIOKAkyBge3N0cmluZ31gIOKAkyBIVFRQIG1ldGhvZCAoZS5nLiAnR0VUJywgJ1BPU1QnLCBldGMpXG4gICAgICogICAgLSAqKnVybCoqIOKAkyBge3N0cmluZ3xUcnVzdGVkT2JqZWN0fWAg4oCTIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCBvZiB0aGUgcmVzb3VyY2UgdGhhdCBpcyBiZWluZyByZXF1ZXN0ZWQ7XG4gICAgICogICAgICBvciBhbiBvYmplY3QgY3JlYXRlZCBieSBhIGNhbGwgdG8gYCRzY2UudHJ1c3RBc1Jlc291cmNlVXJsKHVybClgLlxuICAgICAqICAgIC0gKipwYXJhbXMqKiDigJMgYHtPYmplY3QuPHN0cmluZ3xPYmplY3Q+fWAg4oCTIE1hcCBvZiBzdHJpbmdzIG9yIG9iamVjdHMgd2hpY2ggd2lsbCBiZSBzZXJpYWxpemVkXG4gICAgICogICAgICB3aXRoIHRoZSBgcGFyYW1TZXJpYWxpemVyYCBhbmQgYXBwZW5kZWQgYXMgR0VUIHBhcmFtZXRlcnMuXG4gICAgICogICAgLSAqKmRhdGEqKiDigJMgYHtzdHJpbmd8T2JqZWN0fWAg4oCTIERhdGEgdG8gYmUgc2VudCBhcyB0aGUgcmVxdWVzdCBtZXNzYWdlIGRhdGEuXG4gICAgICogICAgLSAqKmhlYWRlcnMqKiDigJMgYHtPYmplY3R9YCDigJMgTWFwIG9mIHN0cmluZ3Mgb3IgZnVuY3Rpb25zIHdoaWNoIHJldHVybiBzdHJpbmdzIHJlcHJlc2VudGluZ1xuICAgICAqICAgICAgSFRUUCBoZWFkZXJzIHRvIHNlbmQgdG8gdGhlIHNlcnZlci4gSWYgdGhlIHJldHVybiB2YWx1ZSBvZiBhIGZ1bmN0aW9uIGlzIG51bGwsIHRoZVxuICAgICAqICAgICAgaGVhZGVyIHdpbGwgbm90IGJlIHNlbnQuIEZ1bmN0aW9ucyBhY2NlcHQgYSBjb25maWcgb2JqZWN0IGFzIGFuIGFyZ3VtZW50LlxuICAgICAqICAgIC0gKipldmVudEhhbmRsZXJzKiogLSBge09iamVjdH1gIC0gRXZlbnQgbGlzdGVuZXJzIHRvIGJlIGJvdW5kIHRvIHRoZSBYTUxIdHRwUmVxdWVzdCBvYmplY3QuXG4gICAgICogICAgICBUbyBiaW5kIGV2ZW50cyB0byB0aGUgWE1MSHR0cFJlcXVlc3QgdXBsb2FkIG9iamVjdCwgdXNlIGB1cGxvYWRFdmVudEhhbmRsZXJzYC5cbiAgICAgKiAgICAgIFRoZSBoYW5kbGVyIHdpbGwgYmUgY2FsbGVkIGluIHRoZSBjb250ZXh0IG9mIGEgYCRhcHBseWAgYmxvY2suXG4gICAgICogICAgLSAqKnVwbG9hZEV2ZW50SGFuZGxlcnMqKiAtIGB7T2JqZWN0fWAgLSBFdmVudCBsaXN0ZW5lcnMgdG8gYmUgYm91bmQgdG8gdGhlIFhNTEh0dHBSZXF1ZXN0IHVwbG9hZFxuICAgICAqICAgICAgb2JqZWN0LiBUbyBiaW5kIGV2ZW50cyB0byB0aGUgWE1MSHR0cFJlcXVlc3Qgb2JqZWN0LCB1c2UgYGV2ZW50SGFuZGxlcnNgLlxuICAgICAqICAgICAgVGhlIGhhbmRsZXIgd2lsbCBiZSBjYWxsZWQgaW4gdGhlIGNvbnRleHQgb2YgYSBgJGFwcGx5YCBibG9jay5cbiAgICAgKiAgICAtICoqeHNyZkhlYWRlck5hbWUqKiDigJMgYHtzdHJpbmd9YCDigJMgTmFtZSBvZiBIVFRQIGhlYWRlciB0byBwb3B1bGF0ZSB3aXRoIHRoZSBYU1JGIHRva2VuLlxuICAgICAqICAgIC0gKip4c3JmQ29va2llTmFtZSoqIOKAkyBge3N0cmluZ31gIOKAkyBOYW1lIG9mIGNvb2tpZSBjb250YWluaW5nIHRoZSBYU1JGIHRva2VuLlxuICAgICAqICAgIC0gKip0cmFuc2Zvcm1SZXF1ZXN0Kiog4oCTXG4gICAgICogICAgICBge2Z1bmN0aW9uKGRhdGEsIGhlYWRlcnNHZXR0ZXIpfEFycmF5LjxmdW5jdGlvbihkYXRhLCBoZWFkZXJzR2V0dGVyKT59YCDigJNcbiAgICAgKiAgICAgIHRyYW5zZm9ybSBmdW5jdGlvbiBvciBhbiBhcnJheSBvZiBzdWNoIGZ1bmN0aW9ucy4gVGhlIHRyYW5zZm9ybSBmdW5jdGlvbiB0YWtlcyB0aGUgaHR0cFxuICAgICAqICAgICAgcmVxdWVzdCBib2R5IGFuZCBoZWFkZXJzIGFuZCByZXR1cm5zIGl0cyB0cmFuc2Zvcm1lZCAodHlwaWNhbGx5IHNlcmlhbGl6ZWQpIHZlcnNpb24uXG4gICAgICogICAgICBTZWUge0BsaW5rIG5nLiRodHRwI292ZXJyaWRpbmctdGhlLWRlZmF1bHQtdHJhbnNmb3JtYXRpb25zLXBlci1yZXF1ZXN0XG4gICAgICogICAgICBPdmVycmlkaW5nIHRoZSBEZWZhdWx0IFRyYW5zZm9ybWF0aW9uc31cbiAgICAgKiAgICAtICoqdHJhbnNmb3JtUmVzcG9uc2UqKiDigJNcbiAgICAgKiAgICAgIGB7ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlciwgc3RhdHVzKXxBcnJheS48ZnVuY3Rpb24oZGF0YSwgaGVhZGVyc0dldHRlciwgc3RhdHVzKT59YCDigJNcbiAgICAgKiAgICAgIHRyYW5zZm9ybSBmdW5jdGlvbiBvciBhbiBhcnJheSBvZiBzdWNoIGZ1bmN0aW9ucy4gVGhlIHRyYW5zZm9ybSBmdW5jdGlvbiB0YWtlcyB0aGUgaHR0cFxuICAgICAqICAgICAgcmVzcG9uc2UgYm9keSwgaGVhZGVycyBhbmQgc3RhdHVzIGFuZCByZXR1cm5zIGl0cyB0cmFuc2Zvcm1lZCAodHlwaWNhbGx5IGRlc2VyaWFsaXplZCkgdmVyc2lvbi5cbiAgICAgKiAgICAgIFNlZSB7QGxpbmsgbmcuJGh0dHAjb3ZlcnJpZGluZy10aGUtZGVmYXVsdC10cmFuc2Zvcm1hdGlvbnMtcGVyLXJlcXVlc3RcbiAgICAgKiAgICAgIE92ZXJyaWRpbmcgdGhlIERlZmF1bHQgVHJhbnNmb3JtYXRpb25zfVxuICAgICAqICAgIC0gKipwYXJhbVNlcmlhbGl6ZXIqKiAtIGB7c3RyaW5nfGZ1bmN0aW9uKE9iamVjdDxzdHJpbmcsc3RyaW5nPik6c3RyaW5nfWAgLSBBIGZ1bmN0aW9uIHVzZWQgdG9cbiAgICAgKiAgICAgIHByZXBhcmUgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiByZXF1ZXN0IHBhcmFtZXRlcnMgKHNwZWNpZmllZCBhcyBhbiBvYmplY3QpLlxuICAgICAqICAgICAgSWYgc3BlY2lmaWVkIGFzIHN0cmluZywgaXQgaXMgaW50ZXJwcmV0ZWQgYXMgZnVuY3Rpb24gcmVnaXN0ZXJlZCB3aXRoIHRoZVxuICAgICAqICAgICAge0BsaW5rICRpbmplY3RvciAkaW5qZWN0b3J9LCB3aGljaCBtZWFucyB5b3UgY2FuIGNyZWF0ZSB5b3VyIG93biBzZXJpYWxpemVyXG4gICAgICogICAgICBieSByZWdpc3RlcmluZyBpdCBhcyBhIHtAbGluayBhdXRvLiRwcm92aWRlI3NlcnZpY2Ugc2VydmljZX0uXG4gICAgICogICAgICBUaGUgZGVmYXVsdCBzZXJpYWxpemVyIGlzIHRoZSB7QGxpbmsgJGh0dHBQYXJhbVNlcmlhbGl6ZXIgJGh0dHBQYXJhbVNlcmlhbGl6ZXJ9O1xuICAgICAqICAgICAgYWx0ZXJuYXRpdmVseSwgeW91IGNhbiB1c2UgdGhlIHtAbGluayAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZSAkaHR0cFBhcmFtU2VyaWFsaXplckpRTGlrZX1cbiAgICAgKiAgICAtICoqY2FjaGUqKiDigJMgYHtib29sZWFufE9iamVjdH1gIOKAkyBBIGJvb2xlYW4gdmFsdWUgb3Igb2JqZWN0IGNyZWF0ZWQgd2l0aFxuICAgICAqICAgICAge0BsaW5rIG5nLiRjYWNoZUZhY3RvcnkgYCRjYWNoZUZhY3RvcnlgfSB0byBlbmFibGUgb3IgZGlzYWJsZSBjYWNoaW5nIG9mIHRoZSBIVFRQIHJlc3BvbnNlLlxuICAgICAqICAgICAgU2VlIHtAbGluayAkaHR0cCNjYWNoaW5nICRodHRwIENhY2hpbmd9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqICAgIC0gKip0aW1lb3V0Kiog4oCTIGB7bnVtYmVyfFByb21pc2V9YCDigJMgdGltZW91dCBpbiBtaWxsaXNlY29uZHMsIG9yIHtAbGluayBuZy4kcSBwcm9taXNlfVxuICAgICAqICAgICAgdGhhdCBzaG91bGQgYWJvcnQgdGhlIHJlcXVlc3Qgd2hlbiByZXNvbHZlZC5cbiAgICAgKiAgICAtICoqd2l0aENyZWRlbnRpYWxzKiogLSBge2Jvb2xlYW59YCAtIHdoZXRoZXIgdG8gc2V0IHRoZSBgd2l0aENyZWRlbnRpYWxzYCBmbGFnIG9uIHRoZVxuICAgICAqICAgICAgWEhSIG9iamVjdC4gU2VlIFtyZXF1ZXN0cyB3aXRoIGNyZWRlbnRpYWxzXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9IVFRQL0FjY2Vzc19jb250cm9sX0NPUlMjUmVxdWVzdHNfd2l0aF9jcmVkZW50aWFscylcbiAgICAgKiAgICAgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqICAgIC0gKipyZXNwb25zZVR5cGUqKiAtIGB7c3RyaW5nfWAgLSBzZWVcbiAgICAgKiAgICAgIFtYTUxIdHRwUmVxdWVzdC5yZXNwb25zZVR5cGVdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9YTUxIdHRwUmVxdWVzdCN4bWxodHRwcmVxdWVzdC1yZXNwb25zZXR5cGUpLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBSZXR1cm5zIGEge0BsaW5rIG5nLiRxIGBQcm9taXNlfWAgdGhhdCB3aWxsIGJlIHJlc29sdmVkIHRvIGEgcmVzcG9uc2Ugb2JqZWN0XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHRoZSByZXF1ZXN0IHN1Y2NlZWRzIG9yIGZhaWxzLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkge0FycmF5LjxPYmplY3Q+fSBwZW5kaW5nUmVxdWVzdHMgQXJyYXkgb2YgY29uZmlnIG9iamVjdHMgZm9yIGN1cnJlbnRseSBwZW5kaW5nXG4gICAgICogICByZXF1ZXN0cy4gVGhpcyBpcyBwcmltYXJpbHkgbWVhbnQgdG8gYmUgdXNlZCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuPGV4YW1wbGUgbW9kdWxlPVwiaHR0cEV4YW1wbGVcIiBuYW1lPVwiaHR0cC1zZXJ2aWNlXCI+XG48ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJGZXRjaENvbnRyb2xsZXJcIj5cbiAgICA8c2VsZWN0IG5nLW1vZGVsPVwibWV0aG9kXCIgYXJpYS1sYWJlbD1cIlJlcXVlc3QgbWV0aG9kXCI+XG4gICAgICA8b3B0aW9uPkdFVDwvb3B0aW9uPlxuICAgICAgPG9wdGlvbj5KU09OUDwvb3B0aW9uPlxuICAgIDwvc2VsZWN0PlxuICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwidXJsXCIgc2l6ZT1cIjgwXCIgYXJpYS1sYWJlbD1cIlVSTFwiIC8+XG4gICAgPGJ1dHRvbiBpZD1cImZldGNoYnRuXCIgbmctY2xpY2s9XCJmZXRjaCgpXCI+ZmV0Y2g8L2J1dHRvbj48YnI+XG4gICAgPGJ1dHRvbiBpZD1cInNhbXBsZWdldGJ0blwiIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0dFVCcsICdodHRwLWhlbGxvLmh0bWwnKVwiPlNhbXBsZSBHRVQ8L2J1dHRvbj5cbiAgICA8YnV0dG9uIGlkPVwic2FtcGxlanNvbnBidG5cIlxuICAgICAgbmctY2xpY2s9XCJ1cGRhdGVNb2RlbCgnSlNPTlAnLFxuICAgICAgICAgICAgICAgICAgICAnaHR0cHM6Ly9hbmd1bGFyanMub3JnL2dyZWV0LnBocD9uYW1lPVN1cGVyJTIwSGVybycpXCI+XG4gICAgICBTYW1wbGUgSlNPTlBcbiAgICA8L2J1dHRvbj5cbiAgICA8YnV0dG9uIGlkPVwiaW52YWxpZGpzb25wYnRuXCJcbiAgICAgIG5nLWNsaWNrPVwidXBkYXRlTW9kZWwoJ0pTT05QJywgJ2h0dHBzOi8vYW5ndWxhcmpzLm9yZy9kb2VzbnRleGlzdCcpXCI+XG4gICAgICAgIEludmFsaWQgSlNPTlBcbiAgICAgIDwvYnV0dG9uPlxuICAgIDxwcmU+aHR0cCBzdGF0dXMgY29kZToge3tzdGF0dXN9fTwvcHJlPlxuICAgIDxwcmU+aHR0cCByZXNwb25zZSBkYXRhOiB7e2RhdGF9fTwvcHJlPlxuICA8L2Rpdj5cbjwvZmlsZT5cbjxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgYW5ndWxhci5tb2R1bGUoJ2h0dHBFeGFtcGxlJywgW10pXG4gICAgLmNvbmZpZyhbJyRzY2VEZWxlZ2F0ZVByb3ZpZGVyJywgZnVuY3Rpb24oJHNjZURlbGVnYXRlUHJvdmlkZXIpIHtcbiAgICAgIC8vIFdlIG11c3Qgd2hpdGVsaXN0IHRoZSBKU09OUCBlbmRwb2ludCB0aGF0IHdlIGFyZSB1c2luZyB0byBzaG93IHRoYXQgd2UgdHJ1c3QgaXRcbiAgICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0KFtcbiAgICAgICAgJ3NlbGYnLFxuICAgICAgICAnaHR0cHM6Ly9hbmd1bGFyanMub3JnLyoqJ1xuICAgICAgXSk7XG4gICAgfV0pXG4gICAgLmNvbnRyb2xsZXIoJ0ZldGNoQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRodHRwJywgJyR0ZW1wbGF0ZUNhY2hlJyxcbiAgICAgIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICR0ZW1wbGF0ZUNhY2hlKSB7XG4gICAgICAgICRzY29wZS5tZXRob2QgPSAnR0VUJztcbiAgICAgICAgJHNjb3BlLnVybCA9ICdodHRwLWhlbGxvLmh0bWwnO1xuXG4gICAgICAgICRzY29wZS5mZXRjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICRzY29wZS5jb2RlID0gbnVsbDtcbiAgICAgICAgICAkc2NvcGUucmVzcG9uc2UgPSBudWxsO1xuXG4gICAgICAgICAgJGh0dHAoe21ldGhvZDogJHNjb3BlLm1ldGhvZCwgdXJsOiAkc2NvcGUudXJsLCBjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KS5cbiAgICAgICAgICAgIHRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHJlc3BvbnNlLnN0YXR1cztcbiAgICAgICAgICAgICAgJHNjb3BlLmRhdGEgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLmRhdGEgPSByZXNwb25zZS5kYXRhIHx8ICdSZXF1ZXN0IGZhaWxlZCc7XG4gICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSByZXNwb25zZS5zdGF0dXM7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgJHNjb3BlLnVwZGF0ZU1vZGVsID0gZnVuY3Rpb24obWV0aG9kLCB1cmwpIHtcbiAgICAgICAgICAkc2NvcGUubWV0aG9kID0gbWV0aG9kO1xuICAgICAgICAgICRzY29wZS51cmwgPSB1cmw7XG4gICAgICAgIH07XG4gICAgICB9XSk7XG48L2ZpbGU+XG48ZmlsZSBuYW1lPVwiaHR0cC1oZWxsby5odG1sXCI+XG4gIEhlbGxvLCAkaHR0cCFcbjwvZmlsZT5cbjxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgdmFyIHN0YXR1cyA9IGVsZW1lbnQoYnkuYmluZGluZygnc3RhdHVzJykpO1xuICB2YXIgZGF0YSA9IGVsZW1lbnQoYnkuYmluZGluZygnZGF0YScpKTtcbiAgdmFyIGZldGNoQnRuID0gZWxlbWVudChieS5pZCgnZmV0Y2hidG4nKSk7XG4gIHZhciBzYW1wbGVHZXRCdG4gPSBlbGVtZW50KGJ5LmlkKCdzYW1wbGVnZXRidG4nKSk7XG4gIHZhciBpbnZhbGlkSnNvbnBCdG4gPSBlbGVtZW50KGJ5LmlkKCdpbnZhbGlkanNvbnBidG4nKSk7XG5cbiAgaXQoJ3Nob3VsZCBtYWtlIGFuIHhociBHRVQgcmVxdWVzdCcsIGZ1bmN0aW9uKCkge1xuICAgIHNhbXBsZUdldEJ0bi5jbGljaygpO1xuICAgIGZldGNoQnRuLmNsaWNrKCk7XG4gICAgZXhwZWN0KHN0YXR1cy5nZXRUZXh0KCkpLnRvTWF0Y2goJzIwMCcpO1xuICAgIGV4cGVjdChkYXRhLmdldFRleHQoKSkudG9NYXRjaCgvSGVsbG8sIFxcJGh0dHAhLyk7XG4gIH0pO1xuXG4vLyBDb21tZW50ZWQgb3V0IGR1ZSB0byBmbGFrZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MTg1XG4vLyBpdCgnc2hvdWxkIG1ha2UgYSBKU09OUCByZXF1ZXN0IHRvIGFuZ3VsYXJqcy5vcmcnLCBmdW5jdGlvbigpIHtcbi8vICAgdmFyIHNhbXBsZUpzb25wQnRuID0gZWxlbWVudChieS5pZCgnc2FtcGxlanNvbnBidG4nKSk7XG4vLyAgIHNhbXBsZUpzb25wQnRuLmNsaWNrKCk7XG4vLyAgIGZldGNoQnRuLmNsaWNrKCk7XG4vLyAgIGV4cGVjdChzdGF0dXMuZ2V0VGV4dCgpKS50b01hdGNoKCcyMDAnKTtcbi8vICAgZXhwZWN0KGRhdGEuZ2V0VGV4dCgpKS50b01hdGNoKC9TdXBlciBIZXJvIS8pO1xuLy8gfSk7XG5cbiAgaXQoJ3Nob3VsZCBtYWtlIEpTT05QIHJlcXVlc3QgdG8gaW52YWxpZCBVUkwgYW5kIGludm9rZSB0aGUgZXJyb3IgaGFuZGxlcicsXG4gICAgICBmdW5jdGlvbigpIHtcbiAgICBpbnZhbGlkSnNvbnBCdG4uY2xpY2soKTtcbiAgICBmZXRjaEJ0bi5jbGljaygpO1xuICAgIGV4cGVjdChzdGF0dXMuZ2V0VGV4dCgpKS50b01hdGNoKCcwJyk7XG4gICAgZXhwZWN0KGRhdGEuZ2V0VGV4dCgpKS50b01hdGNoKCdSZXF1ZXN0IGZhaWxlZCcpO1xuICB9KTtcbjwvZmlsZT5cbjwvZXhhbXBsZT5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiAkaHR0cChyZXF1ZXN0Q29uZmlnKSB7XG5cbiAgICAgIGlmICghaXNPYmplY3QocmVxdWVzdENvbmZpZykpIHtcbiAgICAgICAgdGhyb3cgbWluRXJyKCckaHR0cCcpKCdiYWRyZXEnLCAnSHR0cCByZXF1ZXN0IGNvbmZpZ3VyYXRpb24gbXVzdCBiZSBhbiBvYmplY3QuICBSZWNlaXZlZDogezB9JywgcmVxdWVzdENvbmZpZyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNTdHJpbmcoJHNjZS52YWx1ZU9mKHJlcXVlc3RDb25maWcudXJsKSkpIHtcbiAgICAgICAgdGhyb3cgbWluRXJyKCckaHR0cCcpKCdiYWRyZXEnLCAnSHR0cCByZXF1ZXN0IGNvbmZpZ3VyYXRpb24gdXJsIG11c3QgYmUgYSBzdHJpbmcgb3IgYSAkc2NlIHRydXN0ZWQgb2JqZWN0LiAgUmVjZWl2ZWQ6IHswfScsIHJlcXVlc3RDb25maWcudXJsKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbmZpZyA9IGV4dGVuZCh7XG4gICAgICAgIG1ldGhvZDogJ2dldCcsXG4gICAgICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGRlZmF1bHRzLnRyYW5zZm9ybVJlcXVlc3QsXG4gICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0cy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgICAgcGFyYW1TZXJpYWxpemVyOiBkZWZhdWx0cy5wYXJhbVNlcmlhbGl6ZXIsXG4gICAgICAgIGpzb25wQ2FsbGJhY2tQYXJhbTogZGVmYXVsdHMuanNvbnBDYWxsYmFja1BhcmFtXG4gICAgICB9LCByZXF1ZXN0Q29uZmlnKTtcblxuICAgICAgY29uZmlnLmhlYWRlcnMgPSBtZXJnZUhlYWRlcnMocmVxdWVzdENvbmZpZyk7XG4gICAgICBjb25maWcubWV0aG9kID0gdXBwZXJjYXNlKGNvbmZpZy5tZXRob2QpO1xuICAgICAgY29uZmlnLnBhcmFtU2VyaWFsaXplciA9IGlzU3RyaW5nKGNvbmZpZy5wYXJhbVNlcmlhbGl6ZXIpID9cbiAgICAgICAgICAkaW5qZWN0b3IuZ2V0KGNvbmZpZy5wYXJhbVNlcmlhbGl6ZXIpIDogY29uZmlnLnBhcmFtU2VyaWFsaXplcjtcblxuICAgICAgJGJyb3dzZXIuJCRpbmNPdXRzdGFuZGluZ1JlcXVlc3RDb3VudCgpO1xuXG4gICAgICB2YXIgcmVxdWVzdEludGVyY2VwdG9ycyA9IFtdO1xuICAgICAgdmFyIHJlc3BvbnNlSW50ZXJjZXB0b3JzID0gW107XG4gICAgICB2YXIgcHJvbWlzZSA9ICRxLnJlc29sdmUoY29uZmlnKTtcblxuICAgICAgLy8gYXBwbHkgaW50ZXJjZXB0b3JzXG4gICAgICBmb3JFYWNoKHJldmVyc2VkSW50ZXJjZXB0b3JzLCBmdW5jdGlvbihpbnRlcmNlcHRvcikge1xuICAgICAgICBpZiAoaW50ZXJjZXB0b3IucmVxdWVzdCB8fCBpbnRlcmNlcHRvci5yZXF1ZXN0RXJyb3IpIHtcbiAgICAgICAgICByZXF1ZXN0SW50ZXJjZXB0b3JzLnVuc2hpZnQoaW50ZXJjZXB0b3IucmVxdWVzdCwgaW50ZXJjZXB0b3IucmVxdWVzdEVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW50ZXJjZXB0b3IucmVzcG9uc2UgfHwgaW50ZXJjZXB0b3IucmVzcG9uc2VFcnJvcikge1xuICAgICAgICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JzLnB1c2goaW50ZXJjZXB0b3IucmVzcG9uc2UsIGludGVyY2VwdG9yLnJlc3BvbnNlRXJyb3IpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcHJvbWlzZSA9IGNoYWluSW50ZXJjZXB0b3JzKHByb21pc2UsIHJlcXVlc3RJbnRlcmNlcHRvcnMpO1xuICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihzZXJ2ZXJSZXF1ZXN0KTtcbiAgICAgIHByb21pc2UgPSBjaGFpbkludGVyY2VwdG9ycyhwcm9taXNlLCByZXNwb25zZUludGVyY2VwdG9ycyk7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS5maW5hbGx5KGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KTtcblxuICAgICAgcmV0dXJuIHByb21pc2U7XG5cblxuICAgICAgZnVuY3Rpb24gY2hhaW5JbnRlcmNlcHRvcnMocHJvbWlzZSwgaW50ZXJjZXB0b3JzKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGludGVyY2VwdG9ycy5sZW5ndGg7IGkgPCBpaTspIHtcbiAgICAgICAgICB2YXIgdGhlbkZuID0gaW50ZXJjZXB0b3JzW2krK107XG4gICAgICAgICAgdmFyIHJlamVjdEZuID0gaW50ZXJjZXB0b3JzW2krK107XG5cbiAgICAgICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHRoZW5GbiwgcmVqZWN0Rm4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaW50ZXJjZXB0b3JzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KCkge1xuICAgICAgICAkYnJvd3Nlci4kJGNvbXBsZXRlT3V0c3RhbmRpbmdSZXF1ZXN0KG5vb3ApO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBleGVjdXRlSGVhZGVyRm5zKGhlYWRlcnMsIGNvbmZpZykge1xuICAgICAgICB2YXIgaGVhZGVyQ29udGVudCwgcHJvY2Vzc2VkSGVhZGVycyA9IHt9O1xuXG4gICAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24oaGVhZGVyRm4sIGhlYWRlcikge1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGhlYWRlckZuKSkge1xuICAgICAgICAgICAgaGVhZGVyQ29udGVudCA9IGhlYWRlckZuKGNvbmZpZyk7XG4gICAgICAgICAgICBpZiAoaGVhZGVyQ29udGVudCAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3NlZEhlYWRlcnNbaGVhZGVyXSA9IGhlYWRlckNvbnRlbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb2Nlc3NlZEhlYWRlcnNbaGVhZGVyXSA9IGhlYWRlckZuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHByb2Nlc3NlZEhlYWRlcnM7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG1lcmdlSGVhZGVycyhjb25maWcpIHtcbiAgICAgICAgdmFyIGRlZkhlYWRlcnMgPSBkZWZhdWx0cy5oZWFkZXJzLFxuICAgICAgICAgICAgcmVxSGVhZGVycyA9IGV4dGVuZCh7fSwgY29uZmlnLmhlYWRlcnMpLFxuICAgICAgICAgICAgZGVmSGVhZGVyTmFtZSwgbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSwgcmVxSGVhZGVyTmFtZTtcblxuICAgICAgICBkZWZIZWFkZXJzID0gZXh0ZW5kKHt9LCBkZWZIZWFkZXJzLmNvbW1vbiwgZGVmSGVhZGVyc1tsb3dlcmNhc2UoY29uZmlnLm1ldGhvZCldKTtcblxuICAgICAgICAvLyB1c2luZyBmb3ItaW4gaW5zdGVhZCBvZiBmb3JFYWNoIHRvIGF2b2lkIHVubmVjZXNzYXJ5IGl0ZXJhdGlvbiBhZnRlciBoZWFkZXIgaGFzIGJlZW4gZm91bmRcbiAgICAgICAgZGVmYXVsdEhlYWRlcnNJdGVyYXRpb246XG4gICAgICAgIGZvciAoZGVmSGVhZGVyTmFtZSBpbiBkZWZIZWFkZXJzKSB7XG4gICAgICAgICAgbG93ZXJjYXNlRGVmSGVhZGVyTmFtZSA9IGxvd2VyY2FzZShkZWZIZWFkZXJOYW1lKTtcblxuICAgICAgICAgIGZvciAocmVxSGVhZGVyTmFtZSBpbiByZXFIZWFkZXJzKSB7XG4gICAgICAgICAgICBpZiAobG93ZXJjYXNlKHJlcUhlYWRlck5hbWUpID09PSBsb3dlcmNhc2VEZWZIZWFkZXJOYW1lKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIGRlZmF1bHRIZWFkZXJzSXRlcmF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlcUhlYWRlcnNbZGVmSGVhZGVyTmFtZV0gPSBkZWZIZWFkZXJzW2RlZkhlYWRlck5hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXhlY3V0ZSBpZiBoZWFkZXIgdmFsdWUgaXMgYSBmdW5jdGlvbiBmb3IgbWVyZ2VkIGhlYWRlcnNcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGVIZWFkZXJGbnMocmVxSGVhZGVycywgc2hhbGxvd0NvcHkoY29uZmlnKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNlcnZlclJlcXVlc3QoY29uZmlnKSB7XG4gICAgICAgIHZhciBoZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG4gICAgICAgIHZhciByZXFEYXRhID0gdHJhbnNmb3JtRGF0YShjb25maWcuZGF0YSwgaGVhZGVyc0dldHRlcihoZWFkZXJzKSwgdW5kZWZpbmVkLCBjb25maWcudHJhbnNmb3JtUmVxdWVzdCk7XG5cbiAgICAgICAgLy8gc3RyaXAgY29udGVudC10eXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChyZXFEYXRhKSkge1xuICAgICAgICAgIGZvckVhY2goaGVhZGVycywgZnVuY3Rpb24odmFsdWUsIGhlYWRlcikge1xuICAgICAgICAgICAgaWYgKGxvd2VyY2FzZShoZWFkZXIpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgICAgICBkZWxldGUgaGVhZGVyc1toZWFkZXJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpICYmICFpc1VuZGVmaW5lZChkZWZhdWx0cy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICAgICAgY29uZmlnLndpdGhDcmVkZW50aWFscyA9IGRlZmF1bHRzLndpdGhDcmVkZW50aWFscztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNlbmQgcmVxdWVzdFxuICAgICAgICByZXR1cm4gc2VuZFJlcShjb25maWcsIHJlcURhdGEpLnRoZW4odHJhbnNmb3JtUmVzcG9uc2UsIHRyYW5zZm9ybVJlc3BvbnNlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UocmVzcG9uc2UpIHtcbiAgICAgICAgLy8gbWFrZSBhIGNvcHkgc2luY2UgdGhlIHJlc3BvbnNlIG11c3QgYmUgY2FjaGVhYmxlXG4gICAgICAgIHZhciByZXNwID0gZXh0ZW5kKHt9LCByZXNwb25zZSk7XG4gICAgICAgIHJlc3AuZGF0YSA9IHRyYW5zZm9ybURhdGEocmVzcG9uc2UuZGF0YSwgcmVzcG9uc2UuaGVhZGVycywgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSk7XG4gICAgICAgIHJldHVybiAoaXNTdWNjZXNzKHJlc3BvbnNlLnN0YXR1cykpXG4gICAgICAgICAgPyByZXNwXG4gICAgICAgICAgOiAkcS5yZWplY3QocmVzcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJGh0dHAucGVuZGluZ1JlcXVlc3RzID0gW107XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjZ2V0XG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGN1dCBtZXRob2QgdG8gcGVyZm9ybSBgR0VUYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd8VHJ1c3RlZE9iamVjdH0gdXJsIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCBvZiB0aGUgcmVzb3VyY2UgdGhhdCBpcyBiZWluZyByZXF1ZXN0ZWQ7XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGFuIG9iamVjdCBjcmVhdGVkIGJ5IGEgY2FsbCB0byBgJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwodXJsKWAuXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNkZWxldGVcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBERUxFVEVgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xUcnVzdGVkT2JqZWN0fSB1cmwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIG9mIHRoZSByZXNvdXJjZSB0aGF0IGlzIGJlaW5nIHJlcXVlc3RlZDtcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgYSBjYWxsIHRvIGAkc2NlLnRydXN0QXNSZXNvdXJjZVVybCh1cmwpYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI2hlYWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBIRUFEYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd8VHJ1c3RlZE9iamVjdH0gdXJsIEFic29sdXRlIG9yIHJlbGF0aXZlIFVSTCBvZiB0aGUgcmVzb3VyY2UgdGhhdCBpcyBiZWluZyByZXF1ZXN0ZWQ7XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGFuIG9iamVjdCBjcmVhdGVkIGJ5IGEgY2FsbCB0byBgJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwodXJsKWAuXG4gICAgICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgT3B0aW9uYWwgY29uZmlndXJhdGlvbiBvYmplY3RcbiAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaHR0cCNqc29ucFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYEpTT05QYCByZXF1ZXN0LlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0LCBzaW5jZSBKU09OUCByZXF1ZXN0cyBhcmUgc2Vuc2l0aXZlIGJlY2F1c2UgdGhlIHJlc3BvbnNlIGlzIGdpdmVuIGZ1bGwgYWNjZXNzIHRvIHRoZSBicm93c2VyLFxuICAgICAqIHRoZSB1cmwgbXVzdCBiZSBkZWNsYXJlZCwgdmlhIHtAbGluayAkc2NlfSBhcyBhIHRydXN0ZWQgcmVzb3VyY2UgVVJMLlxuICAgICAqIFlvdSBjYW4gdHJ1c3QgYSBVUkwgYnkgYWRkaW5nIGl0IHRvIHRoZSB3aGl0ZWxpc3QgdmlhXG4gICAgICoge0BsaW5rICRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0ICBgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3RgfSBvclxuICAgICAqIGJ5IGV4cGxpY2l0bHkgdHJ1c3RpbmcgdGhlIFVSTCB2aWEge0BsaW5rICRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsIGAkc2NlLnRydXN0QXNSZXNvdXJjZVVybCh1cmwpYH0uXG4gICAgICpcbiAgICAgKiBKU09OUCByZXF1ZXN0cyBtdXN0IHNwZWNpZnkgYSBjYWxsYmFjayB0byBiZSB1c2VkIGluIHRoZSByZXNwb25zZSBmcm9tIHRoZSBzZXJ2ZXIuIFRoaXMgY2FsbGJhY2tcbiAgICAgKiBpcyBwYXNzZWQgYXMgYSBxdWVyeSBwYXJhbWV0ZXIgaW4gdGhlIHJlcXVlc3QuIFlvdSBtdXN0IHNwZWNpZnkgdGhlIG5hbWUgb2YgdGhpcyBwYXJhbWV0ZXIgYnlcbiAgICAgKiBzZXR0aW5nIHRoZSBganNvbnBDYWxsYmFja1BhcmFtYCBwcm9wZXJ0eSBvbiB0aGUgcmVxdWVzdCBjb25maWcgb2JqZWN0LlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogJGh0dHAuanNvbnAoJ3NvbWUvdHJ1c3RlZC91cmwnLCB7anNvbnBDYWxsYmFja1BhcmFtOiAnY2FsbGJhY2snfSlcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFlvdSBjYW4gYWxzbyBzcGVjaWZ5IGEgZGVmYXVsdCBjYWxsYmFjayBwYXJhbWV0ZXIgbmFtZSBpbiBgJGh0dHAuZGVmYXVsdHMuanNvbnBDYWxsYmFja1BhcmFtYC5cbiAgICAgKiBJbml0aWFsbHkgdGhpcyBpcyBzZXQgdG8gYCdjYWxsYmFjaydgLlxuICAgICAqXG4gICAgICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuICAgICAqIFlvdSBjYW4gbm8gbG9uZ2VyIHVzZSB0aGUgYEpTT05fQ0FMTEJBQ0tgIHN0cmluZyBhcyBhIHBsYWNlaG9sZGVyIGZvciBzcGVjaWZ5aW5nIHdoZXJlIHRoZSBjYWxsYmFja1xuICAgICAqIHBhcmFtZXRlciB2YWx1ZSBzaG91bGQgZ28uXG4gICAgICogPC9kaXY+XG4gICAgICpcbiAgICAgKiBJZiB5b3Ugd291bGQgbGlrZSB0byBjdXN0b21pc2Ugd2hlcmUgYW5kIGhvdyB0aGUgY2FsbGJhY2tzIGFyZSBzdG9yZWQgdGhlbiB0cnkgb3ZlcnJpZGluZ1xuICAgICAqIG9yIGRlY29yYXRpbmcgdGhlIHtAbGluayAkanNvbnBDYWxsYmFja3N9IHNlcnZpY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ3xUcnVzdGVkT2JqZWN0fSB1cmwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIG9mIHRoZSByZXNvdXJjZSB0aGF0IGlzIGJlaW5nIHJlcXVlc3RlZDtcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgYSBjYWxsIHRvIGAkc2NlLnRydXN0QXNSZXNvdXJjZVVybCh1cmwpYC5cbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuICAgIGNyZWF0ZVNob3J0TWV0aG9kcygnZ2V0JywgJ2RlbGV0ZScsICdoZWFkJywgJ2pzb25wJyk7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJGh0dHAjcG9zdFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYFBPU1RgIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIFJlbGF0aXZlIG9yIGFic29sdXRlIFVSTCBzcGVjaWZ5aW5nIHRoZSBkZXN0aW5hdGlvbiBvZiB0aGUgcmVxdWVzdFxuICAgICAqIEBwYXJhbSB7Kn0gZGF0YSBSZXF1ZXN0IGNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAqIEByZXR1cm5zIHtIdHRwUHJvbWlzZX0gRnV0dXJlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRodHRwI3B1dFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgbWV0aG9kIHRvIHBlcmZvcm0gYFBVVGAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgUmVsYXRpdmUgb3IgYWJzb2x1dGUgVVJMIHNwZWNpZnlpbmcgdGhlIGRlc3RpbmF0aW9uIG9mIHRoZSByZXF1ZXN0XG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFJlcXVlc3QgY29udGVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0PX0gY29uZmlnIE9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gICAgICogQHJldHVybnMge0h0dHBQcm9taXNlfSBGdXR1cmUgb2JqZWN0XG4gICAgICovXG5cbiAgICAgLyoqXG4gICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICogQG5hbWUgJGh0dHAjcGF0Y2hcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIFNob3J0Y3V0IG1ldGhvZCB0byBwZXJmb3JtIGBQQVRDSGAgcmVxdWVzdC5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBSZWxhdGl2ZSBvciBhYnNvbHV0ZSBVUkwgc3BlY2lmeWluZyB0aGUgZGVzdGluYXRpb24gb2YgdGhlIHJlcXVlc3RcbiAgICAgICogQHBhcmFtIHsqfSBkYXRhIFJlcXVlc3QgY29udGVudFxuICAgICAgKiBAcGFyYW0ge09iamVjdD19IGNvbmZpZyBPcHRpb25hbCBjb25maWd1cmF0aW9uIG9iamVjdFxuICAgICAgKiBAcmV0dXJucyB7SHR0cFByb21pc2V9IEZ1dHVyZSBvYmplY3RcbiAgICAgICovXG4gICAgY3JlYXRlU2hvcnRNZXRob2RzV2l0aERhdGEoJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJyk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICAgKiBAbmFtZSAkaHR0cCNkZWZhdWx0c1xuICAgICAgICAgKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAgICogUnVudGltZSBlcXVpdmFsZW50IG9mIHRoZSBgJGh0dHBQcm92aWRlci5kZWZhdWx0c2AgcHJvcGVydHkuIEFsbG93cyBjb25maWd1cmF0aW9uIG9mXG4gICAgICAgICAqIGRlZmF1bHQgaGVhZGVycywgd2l0aENyZWRlbnRpYWxzIGFzIHdlbGwgYXMgcmVxdWVzdCBhbmQgcmVzcG9uc2UgdHJhbnNmb3JtYXRpb25zLlxuICAgICAgICAgKlxuICAgICAgICAgKiBTZWUgXCJTZXR0aW5nIEhUVFAgSGVhZGVyc1wiIGFuZCBcIlRyYW5zZm9ybWluZyBSZXF1ZXN0cyBhbmQgUmVzcG9uc2VzXCIgc2VjdGlvbnMgYWJvdmUuXG4gICAgICAgICAqL1xuICAgICRodHRwLmRlZmF1bHRzID0gZGVmYXVsdHM7XG5cblxuICAgIHJldHVybiAkaHR0cDtcblxuXG4gICAgZnVuY3Rpb24gY3JlYXRlU2hvcnRNZXRob2RzKG5hbWVzKSB7XG4gICAgICBmb3JFYWNoKGFyZ3VtZW50cywgZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAkaHR0cFtuYW1lXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgICAgICAgcmV0dXJuICRodHRwKGV4dGVuZCh7fSwgY29uZmlnIHx8IHt9LCB7XG4gICAgICAgICAgICBtZXRob2Q6IG5hbWUsXG4gICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gY3JlYXRlU2hvcnRNZXRob2RzV2l0aERhdGEobmFtZSkge1xuICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgJGh0dHBbbmFtZV0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgICAgICAgIHJldHVybiAkaHR0cChleHRlbmQoe30sIGNvbmZpZyB8fCB7fSwge1xuICAgICAgICAgICAgbWV0aG9kOiBuYW1lLFxuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgICAgfSkpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBNYWtlcyB0aGUgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqICEhISBBQ0NFU1NFUyBDTE9TVVJFIFZBUlM6XG4gICAgICogJGh0dHBCYWNrZW5kLCBkZWZhdWx0cywgJGxvZywgJHJvb3RTY29wZSwgZGVmYXVsdENhY2hlLCAkaHR0cC5wZW5kaW5nUmVxdWVzdHNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZW5kUmVxKGNvbmZpZywgcmVxRGF0YSkge1xuICAgICAgdmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKSxcbiAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZSxcbiAgICAgICAgICBjYWNoZSxcbiAgICAgICAgICBjYWNoZWRSZXNwLFxuICAgICAgICAgIHJlcUhlYWRlcnMgPSBjb25maWcuaGVhZGVycyxcbiAgICAgICAgICBpc0pzb25wID0gbG93ZXJjYXNlKGNvbmZpZy5tZXRob2QpID09PSAnanNvbnAnLFxuICAgICAgICAgIHVybCA9IGNvbmZpZy51cmw7XG5cbiAgICAgIGlmIChpc0pzb25wKSB7XG4gICAgICAgIC8vIEpTT05QIGlzIGEgcHJldHR5IHNlbnNpdGl2ZSBvcGVyYXRpb24gd2hlcmUgd2UncmUgYWxsb3dpbmcgYSBzY3JpcHQgdG8gaGF2ZSBmdWxsIGFjY2VzcyB0b1xuICAgICAgICAvLyBvdXIgRE9NIGFuZCBKUyBzcGFjZS4gIFNvIHdlIHJlcXVpcmUgdGhhdCB0aGUgVVJMIHNhdGlzZmllcyBTQ0UuUkVTT1VSQ0VfVVJMLlxuICAgICAgICB1cmwgPSAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybCh1cmwpO1xuICAgICAgfSBlbHNlIGlmICghaXNTdHJpbmcodXJsKSkge1xuICAgICAgICAvLyBJZiBpdCBpcyBub3QgYSBzdHJpbmcgdGhlbiB0aGUgVVJMIG11c3QgYmUgYSAkc2NlIHRydXN0ZWQgb2JqZWN0XG4gICAgICAgIHVybCA9ICRzY2UudmFsdWVPZih1cmwpO1xuICAgICAgfVxuXG4gICAgICB1cmwgPSBidWlsZFVybCh1cmwsIGNvbmZpZy5wYXJhbVNlcmlhbGl6ZXIoY29uZmlnLnBhcmFtcykpO1xuXG4gICAgICBpZiAoaXNKc29ucCkge1xuICAgICAgICAvLyBDaGVjayB0aGUgdXJsIGFuZCBhZGQgdGhlIEpTT05QIGNhbGxiYWNrIHBsYWNlaG9sZGVyXG4gICAgICAgIHVybCA9IHNhbml0aXplSnNvbnBDYWxsYmFja1BhcmFtKHVybCwgY29uZmlnLmpzb25wQ2FsbGJhY2tQYXJhbSk7XG4gICAgICB9XG5cbiAgICAgICRodHRwLnBlbmRpbmdSZXF1ZXN0cy5wdXNoKGNvbmZpZyk7XG4gICAgICBwcm9taXNlLnRoZW4ocmVtb3ZlUGVuZGluZ1JlcSwgcmVtb3ZlUGVuZGluZ1JlcSk7XG5cbiAgICAgIGlmICgoY29uZmlnLmNhY2hlIHx8IGRlZmF1bHRzLmNhY2hlKSAmJiBjb25maWcuY2FjaGUgIT09IGZhbHNlICYmXG4gICAgICAgICAgKGNvbmZpZy5tZXRob2QgPT09ICdHRVQnIHx8IGNvbmZpZy5tZXRob2QgPT09ICdKU09OUCcpKSB7XG4gICAgICAgIGNhY2hlID0gaXNPYmplY3QoY29uZmlnLmNhY2hlKSA/IGNvbmZpZy5jYWNoZVxuICAgICAgICAgICAgOiBpc09iamVjdCgvKiogQHR5cGUgez99ICovIChkZWZhdWx0cykuY2FjaGUpXG4gICAgICAgICAgICAgID8gLyoqIEB0eXBlIHs/fSAqLyAoZGVmYXVsdHMpLmNhY2hlXG4gICAgICAgICAgICAgIDogZGVmYXVsdENhY2hlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgY2FjaGVkUmVzcCA9IGNhY2hlLmdldCh1cmwpO1xuICAgICAgICBpZiAoaXNEZWZpbmVkKGNhY2hlZFJlc3ApKSB7XG4gICAgICAgICAgaWYgKGlzUHJvbWlzZUxpa2UoY2FjaGVkUmVzcCkpIHtcbiAgICAgICAgICAgIC8vIGNhY2hlZCByZXF1ZXN0IGhhcyBhbHJlYWR5IGJlZW4gc2VudCwgYnV0IHRoZXJlIGlzIG5vIHJlc3BvbnNlIHlldFxuICAgICAgICAgICAgY2FjaGVkUmVzcC50aGVuKHJlc29sdmVQcm9taXNlV2l0aFJlc3VsdCwgcmVzb2x2ZVByb21pc2VXaXRoUmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2VydmluZyBmcm9tIGNhY2hlXG4gICAgICAgICAgICBpZiAoaXNBcnJheShjYWNoZWRSZXNwKSkge1xuICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZShjYWNoZWRSZXNwWzFdLCBjYWNoZWRSZXNwWzBdLCBzaGFsbG93Q29weShjYWNoZWRSZXNwWzJdKSwgY2FjaGVkUmVzcFszXSwgY2FjaGVkUmVzcFs0XSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNvbHZlUHJvbWlzZShjYWNoZWRSZXNwLCAyMDAsIHt9LCAnT0snLCAnY29tcGxldGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcHV0IHRoZSBwcm9taXNlIGZvciB0aGUgbm9uLXRyYW5zZm9ybWVkIHJlc3BvbnNlIGludG8gY2FjaGUgYXMgYSBwbGFjZWhvbGRlclxuICAgICAgICAgIGNhY2hlLnB1dCh1cmwsIHByb21pc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLy8gaWYgd2Ugd29uJ3QgaGF2ZSB0aGUgcmVzcG9uc2UgaW4gY2FjaGUsIHNldCB0aGUgeHNyZiBoZWFkZXJzIGFuZFxuICAgICAgLy8gc2VuZCB0aGUgcmVxdWVzdCB0byB0aGUgYmFja2VuZFxuICAgICAgaWYgKGlzVW5kZWZpbmVkKGNhY2hlZFJlc3ApKSB7XG4gICAgICAgIHZhciB4c3JmVmFsdWUgPSB1cmxJc1NhbWVPcmlnaW4oY29uZmlnLnVybClcbiAgICAgICAgICAgID8gJCRjb29raWVSZWFkZXIoKVtjb25maWcueHNyZkNvb2tpZU5hbWUgfHwgZGVmYXVsdHMueHNyZkNvb2tpZU5hbWVdXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICAgIHJlcUhlYWRlcnNbKGNvbmZpZy54c3JmSGVhZGVyTmFtZSB8fCBkZWZhdWx0cy54c3JmSGVhZGVyTmFtZSldID0geHNyZlZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgJGh0dHBCYWNrZW5kKGNvbmZpZy5tZXRob2QsIHVybCwgcmVxRGF0YSwgZG9uZSwgcmVxSGVhZGVycywgY29uZmlnLnRpbWVvdXQsXG4gICAgICAgICAgICBjb25maWcud2l0aENyZWRlbnRpYWxzLCBjb25maWcucmVzcG9uc2VUeXBlLFxuICAgICAgICAgICAgY3JlYXRlQXBwbHlIYW5kbGVycyhjb25maWcuZXZlbnRIYW5kbGVycyksXG4gICAgICAgICAgICBjcmVhdGVBcHBseUhhbmRsZXJzKGNvbmZpZy51cGxvYWRFdmVudEhhbmRsZXJzKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuXG4gICAgICBmdW5jdGlvbiBjcmVhdGVBcHBseUhhbmRsZXJzKGV2ZW50SGFuZGxlcnMpIHtcbiAgICAgICAgaWYgKGV2ZW50SGFuZGxlcnMpIHtcbiAgICAgICAgICB2YXIgYXBwbHlIYW5kbGVycyA9IHt9O1xuICAgICAgICAgIGZvckVhY2goZXZlbnRIYW5kbGVycywgZnVuY3Rpb24oZXZlbnRIYW5kbGVyLCBrZXkpIHtcbiAgICAgICAgICAgIGFwcGx5SGFuZGxlcnNba2V5XSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgIGlmICh1c2VBcHBseUFzeW5jKSB7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHlBc3luYyhjYWxsRXZlbnRIYW5kbGVyKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICgkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICAgICAgICBjYWxsRXZlbnRIYW5kbGVyKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoY2FsbEV2ZW50SGFuZGxlcik7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxsRXZlbnRIYW5kbGVyKCkge1xuICAgICAgICAgICAgICAgIGV2ZW50SGFuZGxlcihldmVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGFwcGx5SGFuZGxlcnM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuXG4gICAgICAvKipcbiAgICAgICAqIENhbGxiYWNrIHJlZ2lzdGVyZWQgdG8gJGh0dHBCYWNrZW5kKCk6XG4gICAgICAgKiAgLSBjYWNoZXMgdGhlIHJlc3BvbnNlIGlmIGRlc2lyZWRcbiAgICAgICAqICAtIHJlc29sdmVzIHRoZSByYXcgJGh0dHAgcHJvbWlzZVxuICAgICAgICogIC0gY2FsbHMgJGFwcGx5XG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIGRvbmUoc3RhdHVzLCByZXNwb25zZSwgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCwgeGhyU3RhdHVzKSB7XG4gICAgICAgIGlmIChjYWNoZSkge1xuICAgICAgICAgIGlmIChpc1N1Y2Nlc3Moc3RhdHVzKSkge1xuICAgICAgICAgICAgY2FjaGUucHV0KHVybCwgW3N0YXR1cywgcmVzcG9uc2UsIHBhcnNlSGVhZGVycyhoZWFkZXJzU3RyaW5nKSwgc3RhdHVzVGV4dCwgeGhyU3RhdHVzXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBwcm9taXNlIGZyb20gdGhlIGNhY2hlXG4gICAgICAgICAgICBjYWNoZS5yZW1vdmUodXJsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZXNvbHZlSHR0cFByb21pc2UoKSB7XG4gICAgICAgICAgcmVzb2x2ZVByb21pc2UocmVzcG9uc2UsIHN0YXR1cywgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCwgeGhyU3RhdHVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VBcHBseUFzeW5jKSB7XG4gICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHlBc3luYyhyZXNvbHZlSHR0cFByb21pc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmVIdHRwUHJvbWlzZSgpO1xuICAgICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSAkcm9vdFNjb3BlLiRhcHBseSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXNvbHZlcyB0aGUgcmF3ICRodHRwIHByb21pc2UuXG4gICAgICAgKi9cbiAgICAgIGZ1bmN0aW9uIHJlc29sdmVQcm9taXNlKHJlc3BvbnNlLCBzdGF0dXMsIGhlYWRlcnMsIHN0YXR1c1RleHQsIHhoclN0YXR1cykge1xuICAgICAgICAvL3N0YXR1czogSFRUUCByZXNwb25zZSBzdGF0dXMgY29kZSwgMCwgLTEgKGFib3J0ZWQgYnkgdGltZW91dCAvIHByb21pc2UpXG4gICAgICAgIHN0YXR1cyA9IHN0YXR1cyA+PSAtMSA/IHN0YXR1cyA6IDA7XG5cbiAgICAgICAgKGlzU3VjY2VzcyhzdGF0dXMpID8gZGVmZXJyZWQucmVzb2x2ZSA6IGRlZmVycmVkLnJlamVjdCkoe1xuICAgICAgICAgIGRhdGE6IHJlc3BvbnNlLFxuICAgICAgICAgIHN0YXR1czogc3RhdHVzLFxuICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnNHZXR0ZXIoaGVhZGVycyksXG4gICAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgICAgc3RhdHVzVGV4dDogc3RhdHVzVGV4dCxcbiAgICAgICAgICB4aHJTdGF0dXM6IHhoclN0YXR1c1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVzb2x2ZVByb21pc2VXaXRoUmVzdWx0KHJlc3VsdCkge1xuICAgICAgICByZXNvbHZlUHJvbWlzZShyZXN1bHQuZGF0YSwgcmVzdWx0LnN0YXR1cywgc2hhbGxvd0NvcHkocmVzdWx0LmhlYWRlcnMoKSksIHJlc3VsdC5zdGF0dXNUZXh0LCByZXN1bHQueGhyU3RhdHVzKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVtb3ZlUGVuZGluZ1JlcSgpIHtcbiAgICAgICAgdmFyIGlkeCA9ICRodHRwLnBlbmRpbmdSZXF1ZXN0cy5pbmRleE9mKGNvbmZpZyk7XG4gICAgICAgIGlmIChpZHggIT09IC0xKSAkaHR0cC5wZW5kaW5nUmVxdWVzdHMuc3BsaWNlKGlkeCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiBidWlsZFVybCh1cmwsIHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICAgIGlmIChzZXJpYWxpemVkUGFyYW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdXJsICs9ICgodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEpID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gdXJsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNhbml0aXplSnNvbnBDYWxsYmFja1BhcmFtKHVybCwga2V5KSB7XG4gICAgICBpZiAoL1smP11bXj1dKz1KU09OX0NBTExCQUNLLy50ZXN0KHVybCkpIHtcbiAgICAgICAgLy8gVGhyb3cgaWYgdGhlIHVybCBhbHJlYWR5IGNvbnRhaW5zIGEgcmVmZXJlbmNlIHRvIEpTT05fQ0FMTEJBQ0tcbiAgICAgICAgdGhyb3cgJGh0dHBNaW5FcnIoJ2JhZGpzb25wJywgJ0lsbGVnYWwgdXNlIG9mIEpTT05fQ0FMTEJBQ0sgaW4gdXJsLCBcInswfVwiJywgdXJsKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNhbGxiYWNrUGFyYW1SZWdleCA9IG5ldyBSZWdFeHAoJ1smP10nICsga2V5ICsgJz0nKTtcbiAgICAgIGlmIChjYWxsYmFja1BhcmFtUmVnZXgudGVzdCh1cmwpKSB7XG4gICAgICAgIC8vIFRocm93IGlmIHRoZSBjYWxsYmFjayBwYXJhbSB3YXMgYWxyZWFkeSBwcm92aWRlZFxuICAgICAgICB0aHJvdyAkaHR0cE1pbkVycignYmFkanNvbnAnLCAnSWxsZWdhbCB1c2Ugb2YgY2FsbGJhY2sgcGFyYW0sIFwiezB9XCIsIGluIHVybCwgXCJ7MX1cIicsIGtleSwgdXJsKTtcbiAgICAgIH1cblxuICAgICAgLy8gQWRkIGluIHRoZSBKU09OX0NBTExCQUNLIGNhbGxiYWNrIHBhcmFtIHZhbHVlXG4gICAgICB1cmwgKz0gKCh1cmwuaW5kZXhPZignPycpID09PSAtMSkgPyAnPycgOiAnJicpICsga2V5ICsgJz1KU09OX0NBTExCQUNLJztcblxuICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkeGhyRmFjdG9yeVxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZhY3RvcnkgZnVuY3Rpb24gdXNlZCB0byBjcmVhdGUgWE1MSHR0cFJlcXVlc3Qgb2JqZWN0cy5cbiAqXG4gKiBSZXBsYWNlIG9yIGRlY29yYXRlIHRoaXMgc2VydmljZSB0byBjcmVhdGUgeW91ciBvd24gY3VzdG9tIFhNTEh0dHBSZXF1ZXN0IG9iamVjdHMuXG4gKlxuICogYGBgXG4gKiBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbXSlcbiAqIC5mYWN0b3J5KCckeGhyRmFjdG9yeScsIGZ1bmN0aW9uKCkge1xuICogICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlWGhyKG1ldGhvZCwgdXJsKSB7XG4gKiAgICAgcmV0dXJuIG5ldyB3aW5kb3cuWE1MSHR0cFJlcXVlc3Qoe21velN5c3RlbTogdHJ1ZX0pO1xuICogICB9O1xuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kIEhUVFAgbWV0aG9kIG9mIHRoZSByZXF1ZXN0IChHRVQsIFBPU1QsIFBVVCwgLi4pXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFVSTCBvZiB0aGUgcmVxdWVzdC5cbiAqL1xuZnVuY3Rpb24gJHhockZhY3RvcnlQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVhocigpIHtcbiAgICAgIHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgfTtcbiAgfTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGh0dHBCYWNrZW5kXG4gKiBAcmVxdWlyZXMgJGpzb25wQ2FsbGJhY2tzXG4gKiBAcmVxdWlyZXMgJGRvY3VtZW50XG4gKiBAcmVxdWlyZXMgJHhockZhY3RvcnlcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIVFRQIGJhY2tlbmQgdXNlZCBieSB0aGUge0BsaW5rIG5nLiRodHRwIHNlcnZpY2V9IHRoYXQgZGVsZWdhdGVzIHRvXG4gKiBYTUxIdHRwUmVxdWVzdCBvYmplY3Qgb3IgSlNPTlAgYW5kIGRlYWxzIHdpdGggYnJvd3NlciBpbmNvbXBhdGliaWxpdGllcy5cbiAqXG4gKiBZb3Ugc2hvdWxkIG5ldmVyIG5lZWQgdG8gdXNlIHRoaXMgc2VydmljZSBkaXJlY3RseSwgaW5zdGVhZCB1c2UgdGhlIGhpZ2hlci1sZXZlbCBhYnN0cmFjdGlvbnM6XG4gKiB7QGxpbmsgbmcuJGh0dHAgJGh0dHB9IG9yIHtAbGluayBuZ1Jlc291cmNlLiRyZXNvdXJjZSAkcmVzb3VyY2V9LlxuICpcbiAqIER1cmluZyB0ZXN0aW5nIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgc3dhcHBlZCB3aXRoIHtAbGluayBuZ01vY2suJGh0dHBCYWNrZW5kIG1vY2tcbiAqICRodHRwQmFja2VuZH0gd2hpY2ggY2FuIGJlIHRyYWluZWQgd2l0aCByZXNwb25zZXMuXG4gKi9cbmZ1bmN0aW9uICRIdHRwQmFja2VuZFByb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSBbJyRicm93c2VyJywgJyRqc29ucENhbGxiYWNrcycsICckZG9jdW1lbnQnLCAnJHhockZhY3RvcnknLCBmdW5jdGlvbigkYnJvd3NlciwgJGpzb25wQ2FsbGJhY2tzLCAkZG9jdW1lbnQsICR4aHJGYWN0b3J5KSB7XG4gICAgcmV0dXJuIGNyZWF0ZUh0dHBCYWNrZW5kKCRicm93c2VyLCAkeGhyRmFjdG9yeSwgJGJyb3dzZXIuZGVmZXIsICRqc29ucENhbGxiYWNrcywgJGRvY3VtZW50WzBdKTtcbiAgfV07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUh0dHBCYWNrZW5kKCRicm93c2VyLCBjcmVhdGVYaHIsICRicm93c2VyRGVmZXIsIGNhbGxiYWNrcywgcmF3RG9jdW1lbnQpIHtcbiAgLy8gVE9ETyh2b2p0YSk6IGZpeCB0aGUgc2lnbmF0dXJlXG4gIHJldHVybiBmdW5jdGlvbihtZXRob2QsIHVybCwgcG9zdCwgY2FsbGJhY2ssIGhlYWRlcnMsIHRpbWVvdXQsIHdpdGhDcmVkZW50aWFscywgcmVzcG9uc2VUeXBlLCBldmVudEhhbmRsZXJzLCB1cGxvYWRFdmVudEhhbmRsZXJzKSB7XG4gICAgdXJsID0gdXJsIHx8ICRicm93c2VyLnVybCgpO1xuXG4gICAgaWYgKGxvd2VyY2FzZShtZXRob2QpID09PSAnanNvbnAnKSB7XG4gICAgICB2YXIgY2FsbGJhY2tQYXRoID0gY2FsbGJhY2tzLmNyZWF0ZUNhbGxiYWNrKHVybCk7XG4gICAgICB2YXIganNvbnBEb25lID0ganNvbnBSZXEodXJsLCBjYWxsYmFja1BhdGgsIGZ1bmN0aW9uKHN0YXR1cywgdGV4dCkge1xuICAgICAgICAvLyBqc29ucFJlcSBvbmx5IGV2ZXIgc2V0cyBzdGF0dXMgdG8gMjAwIChPSyksIDQwNCAoRVJST1IpIG9yIC0xIChXQUlUSU5HKVxuICAgICAgICB2YXIgcmVzcG9uc2UgPSAoc3RhdHVzID09PSAyMDApICYmIGNhbGxiYWNrcy5nZXRSZXNwb25zZShjYWxsYmFja1BhdGgpO1xuICAgICAgICBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIHN0YXR1cywgcmVzcG9uc2UsICcnLCB0ZXh0LCAnY29tcGxldGUnKTtcbiAgICAgICAgY2FsbGJhY2tzLnJlbW92ZUNhbGxiYWNrKGNhbGxiYWNrUGF0aCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuXG4gICAgICB2YXIgeGhyID0gY3JlYXRlWGhyKG1ldGhvZCwgdXJsKTtcblxuICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuICAgICAgZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiByZXF1ZXN0TG9hZGVkKCkge1xuICAgICAgICB2YXIgc3RhdHVzVGV4dCA9IHhoci5zdGF0dXNUZXh0IHx8ICcnO1xuXG4gICAgICAgIC8vIHJlc3BvbnNlVGV4dCBpcyB0aGUgb2xkLXNjaG9vbCB3YXkgb2YgcmV0cmlldmluZyByZXNwb25zZSAoc3VwcG9ydGVkIGJ5IElFOSlcbiAgICAgICAgLy8gcmVzcG9uc2UvcmVzcG9uc2VUeXBlIHByb3BlcnRpZXMgd2VyZSBpbnRyb2R1Y2VkIGluIFhIUiBMZXZlbDIgc3BlYyAoc3VwcG9ydGVkIGJ5IElFMTApXG4gICAgICAgIHZhciByZXNwb25zZSA9ICgncmVzcG9uc2UnIGluIHhocikgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0O1xuXG4gICAgICAgIC8vIG5vcm1hbGl6ZSBJRTkgYnVnIChodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xNDUwKVxuICAgICAgICB2YXIgc3RhdHVzID0geGhyLnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHhoci5zdGF0dXM7XG5cbiAgICAgICAgLy8gZml4IHN0YXR1cyBjb2RlIHdoZW4gaXQgaXMgMCAoMCBzdGF0dXMgaXMgdW5kb2N1bWVudGVkKS5cbiAgICAgICAgLy8gT2NjdXJzIHdoZW4gYWNjZXNzaW5nIGZpbGUgcmVzb3VyY2VzIG9yIG9uIEFuZHJvaWQgNC4xIHN0b2NrIGJyb3dzZXJcbiAgICAgICAgLy8gd2hpbGUgcmV0cmlldmluZyBmaWxlcyBmcm9tIGFwcGxpY2F0aW9uIGNhY2hlLlxuICAgICAgICBpZiAoc3RhdHVzID09PSAwKSB7XG4gICAgICAgICAgc3RhdHVzID0gcmVzcG9uc2UgPyAyMDAgOiB1cmxSZXNvbHZlKHVybCkucHJvdG9jb2wgPT09ICdmaWxlJyA/IDQwNCA6IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssXG4gICAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgIHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSxcbiAgICAgICAgICAgIHN0YXR1c1RleHQsXG4gICAgICAgICAgICAnY29tcGxldGUnKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciByZXF1ZXN0RXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVGhlIHJlc3BvbnNlIGlzIGFsd2F5cyBlbXB0eVxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly94aHIuc3BlYy53aGF0d2cub3JnLyNyZXF1ZXN0LWVycm9yLXN0ZXBzIGFuZCBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1uZXR3b3JrLWVycm9yXG4gICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgLTEsIG51bGwsIG51bGwsICcnLCAnZXJyb3InKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciByZXF1ZXN0QWJvcnRlZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb21wbGV0ZVJlcXVlc3QoY2FsbGJhY2ssIC0xLCBudWxsLCBudWxsLCAnJywgJ2Fib3J0Jyk7XG4gICAgICB9O1xuXG4gICAgICB2YXIgcmVxdWVzdFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVGhlIHJlc3BvbnNlIGlzIGFsd2F5cyBlbXB0eVxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly94aHIuc3BlYy53aGF0d2cub3JnLyNyZXF1ZXN0LWVycm9yLXN0ZXBzIGFuZCBodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC1uZXR3b3JrLWVycm9yXG4gICAgICAgIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgLTEsIG51bGwsIG51bGwsICcnLCAndGltZW91dCcpO1xuICAgICAgfTtcblxuICAgICAgeGhyLm9uZXJyb3IgPSByZXF1ZXN0RXJyb3I7XG4gICAgICB4aHIub25hYm9ydCA9IHJlcXVlc3RBYm9ydGVkO1xuICAgICAgeGhyLm9udGltZW91dCA9IHJlcXVlc3RUaW1lb3V0O1xuXG4gICAgICBmb3JFYWNoKGV2ZW50SGFuZGxlcnMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcihrZXksIHZhbHVlKTtcbiAgICAgIH0pO1xuXG4gICAgICBmb3JFYWNoKHVwbG9hZEV2ZW50SGFuZGxlcnMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgeGhyLnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKGtleSwgdmFsdWUpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh3aXRoQ3JlZGVudGlhbHMpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZXNwb25zZVR5cGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gV2ViS2l0IGFkZGVkIHN1cHBvcnQgZm9yIHRoZSBqc29uIHJlc3BvbnNlVHlwZSB2YWx1ZSBvbiAwOS8wMy8yMDEzXG4gICAgICAgICAgLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTczNjQ4LiBWZXJzaW9ucyBvZiBTYWZhcmkgcHJpb3IgdG8gNyBhcmVcbiAgICAgICAgICAvLyBrbm93biB0byB0aHJvdyB3aGVuIHNldHRpbmcgdGhlIHZhbHVlIFwianNvblwiIGFzIHRoZSByZXNwb25zZSB0eXBlLiBPdGhlciBvbGRlclxuICAgICAgICAgIC8vIGJyb3dzZXJzIGltcGxlbWVudGluZyB0aGUgcmVzcG9uc2VUeXBlXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBUaGUganNvbiByZXNwb25zZSB0eXBlIGNhbiBiZSBpZ25vcmVkIGlmIG5vdCBzdXBwb3J0ZWQsIGJlY2F1c2UgSlNPTiBwYXlsb2FkcyBhcmVcbiAgICAgICAgICAvLyBwYXJzZWQgb24gdGhlIGNsaWVudC1zaWRlIHJlZ2FyZGxlc3MuXG4gICAgICAgICAgaWYgKHJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB4aHIuc2VuZChpc1VuZGVmaW5lZChwb3N0KSA/IG51bGwgOiBwb3N0KTtcbiAgICB9XG5cbiAgICBpZiAodGltZW91dCA+IDApIHtcbiAgICAgIHZhciB0aW1lb3V0SWQgPSAkYnJvd3NlckRlZmVyKHRpbWVvdXRSZXF1ZXN0LCB0aW1lb3V0KTtcbiAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZUxpa2UodGltZW91dCkpIHtcbiAgICAgIHRpbWVvdXQudGhlbih0aW1lb3V0UmVxdWVzdCk7XG4gICAgfVxuXG5cbiAgICBmdW5jdGlvbiB0aW1lb3V0UmVxdWVzdCgpIHtcbiAgICAgIGlmIChqc29ucERvbmUpIHtcbiAgICAgICAganNvbnBEb25lKCk7XG4gICAgICB9XG4gICAgICBpZiAoeGhyKSB7XG4gICAgICAgIHhoci5hYm9ydCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlUmVxdWVzdChjYWxsYmFjaywgc3RhdHVzLCByZXNwb25zZSwgaGVhZGVyc1N0cmluZywgc3RhdHVzVGV4dCwgeGhyU3RhdHVzKSB7XG4gICAgICAvLyBjYW5jZWwgdGltZW91dCBhbmQgc3Vic2VxdWVudCB0aW1lb3V0IHByb21pc2UgcmVzb2x1dGlvblxuICAgICAgaWYgKGlzRGVmaW5lZCh0aW1lb3V0SWQpKSB7XG4gICAgICAgICRicm93c2VyRGVmZXIuY2FuY2VsKHRpbWVvdXRJZCk7XG4gICAgICB9XG4gICAgICBqc29ucERvbmUgPSB4aHIgPSBudWxsO1xuXG4gICAgICBjYWxsYmFjayhzdGF0dXMsIHJlc3BvbnNlLCBoZWFkZXJzU3RyaW5nLCBzdGF0dXNUZXh0LCB4aHJTdGF0dXMpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBqc29ucFJlcSh1cmwsIGNhbGxiYWNrUGF0aCwgZG9uZSkge1xuICAgIHVybCA9IHVybC5yZXBsYWNlKCdKU09OX0NBTExCQUNLJywgY2FsbGJhY2tQYXRoKTtcbiAgICAvLyB3ZSBjYW4ndCB1c2UgalF1ZXJ5L2pxTGl0ZSBoZXJlIGJlY2F1c2UgalF1ZXJ5IGRvZXMgY3Jhenkgc3R1ZmYgd2l0aCBzY3JpcHQgZWxlbWVudHMsIGUuZy46XG4gICAgLy8gLSBmZXRjaGVzIGxvY2FsIHNjcmlwdHMgdmlhIFhIUiBhbmQgZXZhbHMgdGhlbVxuICAgIC8vIC0gYWRkcyBhbmQgaW1tZWRpYXRlbHkgcmVtb3ZlcyBzY3JpcHQgZWxlbWVudHMgZnJvbSB0aGUgZG9jdW1lbnRcbiAgICB2YXIgc2NyaXB0ID0gcmF3RG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JyksIGNhbGxiYWNrID0gbnVsbDtcbiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgIHNjcmlwdC5zcmMgPSB1cmw7XG4gICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcblxuICAgIGNhbGxiYWNrID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgIHNjcmlwdC5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgY2FsbGJhY2spO1xuICAgICAgc2NyaXB0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgY2FsbGJhY2spO1xuICAgICAgcmF3RG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgIHZhciBzdGF0dXMgPSAtMTtcbiAgICAgIHZhciB0ZXh0ID0gJ3Vua25vd24nO1xuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyAmJiAhY2FsbGJhY2tzLndhc0NhbGxlZChjYWxsYmFja1BhdGgpKSB7XG4gICAgICAgICAgZXZlbnQgPSB7IHR5cGU6ICdlcnJvcicgfTtcbiAgICAgICAgfVxuICAgICAgICB0ZXh0ID0gZXZlbnQudHlwZTtcbiAgICAgICAgc3RhdHVzID0gZXZlbnQudHlwZSA9PT0gJ2Vycm9yJyA/IDQwNCA6IDIwMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgZG9uZShzdGF0dXMsIHRleHQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGNhbGxiYWNrKTtcbiAgICBzY3JpcHQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBjYWxsYmFjayk7XG4gICAgcmF3RG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIHJldHVybiBjYWxsYmFjaztcbiAgfVxufVxuXG52YXIgJGludGVycG9sYXRlTWluRXJyID0gYW5ndWxhci4kaW50ZXJwb2xhdGVNaW5FcnIgPSBtaW5FcnIoJyRpbnRlcnBvbGF0ZScpO1xuJGludGVycG9sYXRlTWluRXJyLnRocm93Tm9jb25jYXQgPSBmdW5jdGlvbih0ZXh0KSB7XG4gIHRocm93ICRpbnRlcnBvbGF0ZU1pbkVycignbm9jb25jYXQnLFxuICAgICAgJ0Vycm9yIHdoaWxlIGludGVycG9sYXRpbmc6IHswfVxcblN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIGRpc2FsbG93cyAnICtcbiAgICAgICdpbnRlcnBvbGF0aW9ucyB0aGF0IGNvbmNhdGVuYXRlIG11bHRpcGxlIGV4cHJlc3Npb25zIHdoZW4gYSB0cnVzdGVkIHZhbHVlIGlzICcgK1xuICAgICAgJ3JlcXVpcmVkLiAgU2VlIGh0dHA6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nLiRzY2UnLCB0ZXh0KTtcbn07XG5cbiRpbnRlcnBvbGF0ZU1pbkVyci5pbnRlcnIgPSBmdW5jdGlvbih0ZXh0LCBlcnIpIHtcbiAgcmV0dXJuICRpbnRlcnBvbGF0ZU1pbkVycignaW50ZXJyJywgJ0NhblxcJ3QgaW50ZXJwb2xhdGU6IHswfVxcbnsxfScsIHRleHQsIGVyci50b1N0cmluZygpKTtcbn07XG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkaW50ZXJwb2xhdGVQcm92aWRlclxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBVc2VkIGZvciBjb25maWd1cmluZyB0aGUgaW50ZXJwb2xhdGlvbiBtYXJrdXAuIERlZmF1bHRzIHRvIGB7e2AgYW5kIGB9fWAuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuICogVGhpcyBmZWF0dXJlIGlzIHNvbWV0aW1lcyB1c2VkIHRvIG1peCBkaWZmZXJlbnQgbWFya3VwIGxhbmd1YWdlcywgZS5nLiB0byB3cmFwIGFuIEFuZ3VsYXJcbiAqIHRlbXBsYXRlIHdpdGhpbiBhIFB5dGhvbiBKaW5qYSB0ZW1wbGF0ZSAob3IgYW55IG90aGVyIHRlbXBsYXRlIGxhbmd1YWdlKS4gTWl4aW5nIHRlbXBsYXRpbmdcbiAqIGxhbmd1YWdlcyBpcyAqKnZlcnkgZGFuZ2Vyb3VzKiouIFRoZSBlbWJlZGRpbmcgdGVtcGxhdGUgbGFuZ3VhZ2Ugd2lsbCBub3Qgc2FmZWx5IGVzY2FwZSBBbmd1bGFyXG4gKiBleHByZXNzaW9ucywgc28gYW55IHVzZXItY29udHJvbGxlZCB2YWx1ZXMgaW4gdGhlIHRlbXBsYXRlIHdpbGwgY2F1c2UgQ3Jvc3MgU2l0ZSBTY3JpcHRpbmcgKFhTUylcbiAqIHNlY3VyaXR5IGJ1Z3MhXG4gKiA8L2Rpdj5cbiAqXG4gKiBAZXhhbXBsZVxuPGV4YW1wbGUgbmFtZT1cImN1c3RvbS1pbnRlcnBvbGF0aW9uLW1hcmt1cFwiIG1vZHVsZT1cImN1c3RvbUludGVycG9sYXRpb25BcHBcIj5cbjxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG48c2NyaXB0PlxuICB2YXIgY3VzdG9tSW50ZXJwb2xhdGlvbkFwcCA9IGFuZ3VsYXIubW9kdWxlKCdjdXN0b21JbnRlcnBvbGF0aW9uQXBwJywgW10pO1xuXG4gIGN1c3RvbUludGVycG9sYXRpb25BcHAuY29uZmlnKGZ1bmN0aW9uKCRpbnRlcnBvbGF0ZVByb3ZpZGVyKSB7XG4gICAgJGludGVycG9sYXRlUHJvdmlkZXIuc3RhcnRTeW1ib2woJy8vJyk7XG4gICAgJGludGVycG9sYXRlUHJvdmlkZXIuZW5kU3ltYm9sKCcvLycpO1xuICB9KTtcblxuXG4gIGN1c3RvbUludGVycG9sYXRpb25BcHAuY29udHJvbGxlcignRGVtb0NvbnRyb2xsZXInLCBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMubGFiZWwgPSBcIlRoaXMgYmluZGluZyBpcyBicm91Z2h0IHlvdSBieSAvLyBpbnRlcnBvbGF0aW9uIHN5bWJvbHMuXCI7XG4gIH0pO1xuPC9zY3JpcHQ+XG48ZGl2IG5nLWNvbnRyb2xsZXI9XCJEZW1vQ29udHJvbGxlciBhcyBkZW1vXCI+XG4gICAgLy9kZW1vLmxhYmVsLy9cbjwvZGl2PlxuPC9maWxlPlxuPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICBpdCgnc2hvdWxkIGludGVycG9sYXRlIGJpbmRpbmcgd2l0aCBjdXN0b20gc3ltYm9scycsIGZ1bmN0aW9uKCkge1xuICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2RlbW8ubGFiZWwnKSkuZ2V0VGV4dCgpKS50b0JlKCdUaGlzIGJpbmRpbmcgaXMgYnJvdWdodCB5b3UgYnkgLy8gaW50ZXJwb2xhdGlvbiBzeW1ib2xzLicpO1xuICB9KTtcbjwvZmlsZT5cbjwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gJEludGVycG9sYXRlUHJvdmlkZXIoKSB7XG4gIHZhciBzdGFydFN5bWJvbCA9ICd7eyc7XG4gIHZhciBlbmRTeW1ib2wgPSAnfX0nO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRpbnRlcnBvbGF0ZVByb3ZpZGVyI3N0YXJ0U3ltYm9sXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTeW1ib2wgdG8gZGVub3RlIHN0YXJ0IG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB7e2AuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdmFsdWUgbmV3IHZhbHVlIHRvIHNldCB0aGUgc3RhcnRpbmcgc3ltYm9sIHRvLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfHNlbGZ9IFJldHVybnMgdGhlIHN5bWJvbCB3aGVuIHVzZWQgYXMgZ2V0dGVyIGFuZCBzZWxmIGlmIHVzZWQgYXMgc2V0dGVyLlxuICAgKi9cbiAgdGhpcy5zdGFydFN5bWJvbCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBzdGFydFN5bWJvbCA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdGFydFN5bWJvbDtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGludGVycG9sYXRlUHJvdmlkZXIjZW5kU3ltYm9sXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTeW1ib2wgdG8gZGVub3RlIHRoZSBlbmQgb2YgZXhwcmVzc2lvbiBpbiB0aGUgaW50ZXJwb2xhdGVkIHN0cmluZy4gRGVmYXVsdHMgdG8gYH19YC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmc9fSB2YWx1ZSBuZXcgdmFsdWUgdG8gc2V0IHRoZSBlbmRpbmcgc3ltYm9sIHRvLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfHNlbGZ9IFJldHVybnMgdGhlIHN5bWJvbCB3aGVuIHVzZWQgYXMgZ2V0dGVyIGFuZCBzZWxmIGlmIHVzZWQgYXMgc2V0dGVyLlxuICAgKi9cbiAgdGhpcy5lbmRTeW1ib2wgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgZW5kU3ltYm9sID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVuZFN5bWJvbDtcbiAgICB9XG4gIH07XG5cblxuICB0aGlzLiRnZXQgPSBbJyRwYXJzZScsICckZXhjZXB0aW9uSGFuZGxlcicsICckc2NlJywgZnVuY3Rpb24oJHBhcnNlLCAkZXhjZXB0aW9uSGFuZGxlciwgJHNjZSkge1xuICAgIHZhciBzdGFydFN5bWJvbExlbmd0aCA9IHN0YXJ0U3ltYm9sLmxlbmd0aCxcbiAgICAgICAgZW5kU3ltYm9sTGVuZ3RoID0gZW5kU3ltYm9sLmxlbmd0aCxcbiAgICAgICAgZXNjYXBlZFN0YXJ0UmVnZXhwID0gbmV3IFJlZ0V4cChzdGFydFN5bWJvbC5yZXBsYWNlKC8uL2csIGVzY2FwZSksICdnJyksXG4gICAgICAgIGVzY2FwZWRFbmRSZWdleHAgPSBuZXcgUmVnRXhwKGVuZFN5bWJvbC5yZXBsYWNlKC8uL2csIGVzY2FwZSksICdnJyk7XG5cbiAgICBmdW5jdGlvbiBlc2NhcGUoY2gpIHtcbiAgICAgIHJldHVybiAnXFxcXFxcXFxcXFxcJyArIGNoO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuZXNjYXBlVGV4dCh0ZXh0KSB7XG4gICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKGVzY2FwZWRTdGFydFJlZ2V4cCwgc3RhcnRTeW1ib2wpLlxuICAgICAgICByZXBsYWNlKGVzY2FwZWRFbmRSZWdleHAsIGVuZFN5bWJvbCk7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogdGhpcyBpcyB0aGUgc2FtZSBhcyB0aGUgY29uc3RhbnRXYXRjaERlbGVnYXRlIGluIHBhcnNlLmpzXG4gICAgZnVuY3Rpb24gY29uc3RhbnRXYXRjaERlbGVnYXRlKHNjb3BlLCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIGNvbnN0YW50SW50ZXJwKSB7XG4gICAgICB2YXIgdW53YXRjaCA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiBjb25zdGFudEludGVycG9sYXRlV2F0Y2goc2NvcGUpIHtcbiAgICAgICAgdW53YXRjaCgpO1xuICAgICAgICByZXR1cm4gY29uc3RhbnRJbnRlcnAoc2NvcGUpO1xuICAgICAgfSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5KTtcbiAgICAgIHJldHVybiB1bndhdGNoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBzZXJ2aWNlXG4gICAgICogQG5hbWUgJGludGVycG9sYXRlXG4gICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgKlxuICAgICAqIEByZXF1aXJlcyAkcGFyc2VcbiAgICAgKiBAcmVxdWlyZXMgJHNjZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICpcbiAgICAgKiBDb21waWxlcyBhIHN0cmluZyB3aXRoIG1hcmt1cCBpbnRvIGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24uIFRoaXMgc2VydmljZSBpcyB1c2VkIGJ5IHRoZVxuICAgICAqIEhUTUwge0BsaW5rIG5nLiRjb21waWxlICRjb21waWxlfSBzZXJ2aWNlIGZvciBkYXRhIGJpbmRpbmcuIFNlZVxuICAgICAqIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciAkaW50ZXJwb2xhdGVQcm92aWRlcn0gZm9yIGNvbmZpZ3VyaW5nIHRoZVxuICAgICAqIGludGVycG9sYXRpb24gbWFya3VwLlxuICAgICAqXG4gICAgICpcbiAgICAgKiBgYGBqc1xuICAgICAqICAgdmFyICRpbnRlcnBvbGF0ZSA9IC4uLjsgLy8gaW5qZWN0ZWRcbiAgICAgKiAgIHZhciBleHAgPSAkaW50ZXJwb2xhdGUoJ0hlbGxvIHt7bmFtZSB8IHVwcGVyY2FzZX19IScpO1xuICAgICAqICAgZXhwZWN0KGV4cCh7bmFtZTonQW5ndWxhcid9KSkudG9FcXVhbCgnSGVsbG8gQU5HVUxBUiEnKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGAkaW50ZXJwb2xhdGVgIHRha2VzIGFuIG9wdGlvbmFsIGZvdXJ0aCBhcmd1bWVudCwgYGFsbE9yTm90aGluZ2AuIElmIGBhbGxPck5vdGhpbmdgIGlzXG4gICAgICogYHRydWVgLCB0aGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbiB3aWxsIHJldHVybiBgdW5kZWZpbmVkYCB1bmxlc3MgYWxsIGVtYmVkZGVkIGV4cHJlc3Npb25zXG4gICAgICogZXZhbHVhdGUgdG8gYSB2YWx1ZSBvdGhlciB0aGFuIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiAgIHZhciAkaW50ZXJwb2xhdGUgPSAuLi47IC8vIGluamVjdGVkXG4gICAgICogICB2YXIgY29udGV4dCA9IHtncmVldGluZzogJ0hlbGxvJywgbmFtZTogdW5kZWZpbmVkIH07XG4gICAgICpcbiAgICAgKiAgIC8vIGRlZmF1bHQgXCJmb3JnaXZpbmdcIiBtb2RlXG4gICAgICogICB2YXIgZXhwID0gJGludGVycG9sYXRlKCd7e2dyZWV0aW5nfX0ge3tuYW1lfX0hJyk7XG4gICAgICogICBleHBlY3QoZXhwKGNvbnRleHQpKS50b0VxdWFsKCdIZWxsbyAhJyk7XG4gICAgICpcbiAgICAgKiAgIC8vIFwiYWxsT3JOb3RoaW5nXCIgbW9kZVxuICAgICAqICAgZXhwID0gJGludGVycG9sYXRlKCd7e2dyZWV0aW5nfX0ge3tuYW1lfX0hJywgZmFsc2UsIG51bGwsIHRydWUpO1xuICAgICAqICAgZXhwZWN0KGV4cChjb250ZXh0KSkudG9CZVVuZGVmaW5lZCgpO1xuICAgICAqICAgY29udGV4dC5uYW1lID0gJ0FuZ3VsYXInO1xuICAgICAqICAgZXhwZWN0KGV4cChjb250ZXh0KSkudG9FcXVhbCgnSGVsbG8gQW5ndWxhciEnKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIGBhbGxPck5vdGhpbmdgIGlzIHVzZWZ1bCBmb3IgaW50ZXJwb2xhdGluZyBVUkxzLiBgbmdTcmNgIGFuZCBgbmdTcmNzZXRgIHVzZSB0aGlzIGJlaGF2aW9yLlxuICAgICAqXG4gICAgICogIyMjIyBFc2NhcGVkIEludGVycG9sYXRpb25cbiAgICAgKiAkaW50ZXJwb2xhdGUgcHJvdmlkZXMgYSBtZWNoYW5pc20gZm9yIGVzY2FwaW5nIGludGVycG9sYXRpb24gbWFya2Vycy4gU3RhcnQgYW5kIGVuZCBtYXJrZXJzXG4gICAgICogY2FuIGJlIGVzY2FwZWQgYnkgcHJlY2VkaW5nIGVhY2ggb2YgdGhlaXIgY2hhcmFjdGVycyB3aXRoIGEgUkVWRVJTRSBTT0xJRFVTIFUrMDA1QyAoYmFja3NsYXNoKS5cbiAgICAgKiBJdCB3aWxsIGJlIHJlbmRlcmVkIGFzIGEgcmVndWxhciBzdGFydC9lbmQgbWFya2VyLCBhbmQgd2lsbCBub3QgYmUgaW50ZXJwcmV0ZWQgYXMgYW4gZXhwcmVzc2lvblxuICAgICAqIG9yIGJpbmRpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIGVuYWJsZXMgd2ViLXNlcnZlcnMgdG8gcHJldmVudCBzY3JpcHQgaW5qZWN0aW9uIGF0dGFja3MgYW5kIGRlZmFjaW5nIGF0dGFja3MsIHRvIHNvbWVcbiAgICAgKiBkZWdyZWUsIHdoaWxlIGFsc28gZW5hYmxpbmcgY29kZSBleGFtcGxlcyB0byB3b3JrIHdpdGhvdXQgcmVseWluZyBvbiB0aGVcbiAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTm9uQmluZGFibGUgbmdOb25CaW5kYWJsZX0gZGlyZWN0aXZlLlxuICAgICAqXG4gICAgICogKipGb3Igc2VjdXJpdHkgcHVycG9zZXMsIGl0IGlzIHN0cm9uZ2x5IGVuY291cmFnZWQgdGhhdCB3ZWIgc2VydmVycyBlc2NhcGUgdXNlci1zdXBwbGllZCBkYXRhLFxuICAgICAqIHJlcGxhY2luZyBhbmdsZSBicmFja2V0cyAoJmx0OywgJmd0Oykgd2l0aCAmYW1wO2x0OyBhbmQgJmFtcDtndDsgcmVzcGVjdGl2ZWx5LCBhbmQgcmVwbGFjaW5nIGFsbFxuICAgICAqIGludGVycG9sYXRpb24gc3RhcnQvZW5kIG1hcmtlcnMgd2l0aCB0aGVpciBlc2NhcGVkIGNvdW50ZXJwYXJ0cy4qKlxuICAgICAqXG4gICAgICogRXNjYXBlZCBpbnRlcnBvbGF0aW9uIG1hcmtlcnMgYXJlIG9ubHkgcmVwbGFjZWQgd2l0aCB0aGUgYWN0dWFsIGludGVycG9sYXRpb24gbWFya2VycyBpbiByZW5kZXJlZFxuICAgICAqIG91dHB1dCB3aGVuIHRoZSAkaW50ZXJwb2xhdGUgc2VydmljZSBwcm9jZXNzZXMgdGhlIHRleHQuIFNvLCBmb3IgSFRNTCBlbGVtZW50cyBpbnRlcnBvbGF0ZWRcbiAgICAgKiBieSB7QGxpbmsgbmcuJGNvbXBpbGUgJGNvbXBpbGV9LCBvciBvdGhlcndpc2UgaW50ZXJwb2xhdGVkIHdpdGggdGhlIGBtdXN0SGF2ZUV4cHJlc3Npb25gIHBhcmFtZXRlclxuICAgICAqIHNldCB0byBgdHJ1ZWAsIHRoZSBpbnRlcnBvbGF0ZWQgdGV4dCBtdXN0IGNvbnRhaW4gYW4gdW5lc2NhcGVkIGludGVycG9sYXRpb24gZXhwcmVzc2lvbi4gQXMgc3VjaCxcbiAgICAgKiB0aGlzIGlzIHR5cGljYWxseSB1c2VmdWwgb25seSB3aGVuIHVzZXItZGF0YSBpcyB1c2VkIGluIHJlbmRlcmluZyBhIHRlbXBsYXRlIGZyb20gdGhlIHNlcnZlciwgb3JcbiAgICAgKiB3aGVuIG90aGVyd2lzZSB1bnRydXN0ZWQgZGF0YSBpcyB1c2VkIGJ5IGEgZGlyZWN0aXZlLlxuICAgICAqXG4gICAgICogPGV4YW1wbGUgbmFtZT1cImludGVycG9sYXRpb25cIj5cbiAgICAgKiAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgKiAgICA8ZGl2IG5nLWluaXQ9XCJ1c2VybmFtZT0nQSB1c2VyJ1wiPlxuICAgICAqICAgICAgPHAgbmctaW5pdD1cImFwcHRpdGxlPSdFc2NhcGluZyBkZW1vJ1wiPnt7YXBwdGl0bGV9fTogXFx7XFx7IHVzZXJuYW1lID0gXCJkZWZhY2VkIHZhbHVlXCI7IFxcfVxcfVxuICAgICAqICAgICAgICA8L3A+XG4gICAgICogICAgICA8cD48c3Ryb25nPnt7dXNlcm5hbWV9fTwvc3Ryb25nPiBhdHRlbXB0cyB0byBpbmplY3QgY29kZSB3aGljaCB3aWxsIGRlZmFjZSB0aGVcbiAgICAgKiAgICAgICAgYXBwbGljYXRpb24sIGJ1dCBmYWlscyB0byBhY2NvbXBsaXNoIHRoZWlyIHRhc2ssIGJlY2F1c2UgdGhlIHNlcnZlciBoYXMgY29ycmVjdGx5XG4gICAgICogICAgICAgIGVzY2FwZWQgdGhlIGludGVycG9sYXRpb24gc3RhcnQvZW5kIG1hcmtlcnMgd2l0aCBSRVZFUlNFIFNPTElEVVMgVSswMDVDIChiYWNrc2xhc2gpXG4gICAgICogICAgICAgIGNoYXJhY3RlcnMuPC9wPlxuICAgICAqICAgICAgPHA+SW5zdGVhZCwgdGhlIHJlc3VsdCBvZiB0aGUgYXR0ZW1wdGVkIHNjcmlwdCBpbmplY3Rpb24gaXMgdmlzaWJsZSwgYW5kIGNhbiBiZSByZW1vdmVkXG4gICAgICogICAgICAgIGZyb20gdGhlIGRhdGFiYXNlIGJ5IGFuIGFkbWluaXN0cmF0b3IuPC9wPlxuICAgICAqICAgIDwvZGl2PlxuICAgICAqICA8L2ZpbGU+XG4gICAgICogPC9leGFtcGxlPlxuICAgICAqXG4gICAgICogQGtub3duSXNzdWVcbiAgICAgKiBJdCBpcyBjdXJyZW50bHkgbm90IHBvc3NpYmxlIGZvciBhbiBpbnRlcnBvbGF0ZWQgZXhwcmVzc2lvbiB0byBjb250YWluIHRoZSBpbnRlcnBvbGF0aW9uIGVuZFxuICAgICAqIHN5bWJvbC4gRm9yIGV4YW1wbGUsIGB7eyAnfX0nIH19YCB3aWxsIGJlIGluY29ycmVjdGx5IGludGVycHJldGVkIGFzIGB7eyAnIH19YCArIGAnIH19YCwgaS5lLlxuICAgICAqIGFuIGludGVycG9sYXRlZCBleHByZXNzaW9uIGNvbnNpc3Rpbmcgb2YgYSBzaW5nbGUtcXVvdGUgKGAnYCkgYW5kIHRoZSBgJyB9fWAgc3RyaW5nLlxuICAgICAqXG4gICAgICogQGtub3duSXNzdWVcbiAgICAgKiBBbGwgZGlyZWN0aXZlcyBhbmQgY29tcG9uZW50cyBtdXN0IHVzZSB0aGUgc3RhbmRhcmQgYHt7YCBgfX1gIGludGVycG9sYXRpb24gc3ltYm9sc1xuICAgICAqIGluIHRoZWlyIHRlbXBsYXRlcy4gSWYgeW91IGNoYW5nZSB0aGUgYXBwbGljYXRpb24gaW50ZXJwb2xhdGlvbiBzeW1ib2xzIHRoZSB7QGxpbmsgJGNvbXBpbGV9XG4gICAgICogc2VydmljZSB3aWxsIGF0dGVtcHQgdG8gZGVub3JtYWxpemUgdGhlIHN0YW5kYXJkIHN5bWJvbHMgdG8gdGhlIGN1c3RvbSBzeW1ib2xzLlxuICAgICAqIFRoZSBkZW5vcm1hbGl6YXRpb24gcHJvY2VzcyBpcyBub3QgY2xldmVyIGVub3VnaCB0byBrbm93IG5vdCB0byByZXBsYWNlIGluc3RhbmNlcyBvZiB0aGUgc3RhbmRhcmRcbiAgICAgKiBzeW1ib2xzIHdoZXJlIHRoZXkgd291bGQgbm90IG5vcm1hbGx5IGJlIHRyZWF0ZWQgYXMgaW50ZXJwb2xhdGlvbiBzeW1ib2xzLiBGb3IgZXhhbXBsZSBpbiB0aGUgZm9sbG93aW5nXG4gICAgICogY29kZSBzbmlwcGV0IHRoZSBjbG9zaW5nIGJyYWNlcyBvZiB0aGUgbGl0ZXJhbCBvYmplY3Qgd2lsbCBnZXQgaW5jb3JyZWN0bHkgZGVub3JtYWxpemVkOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogPGRpdiBkYXRhLWNvbnRleHQ9J3tcImNvbnRleHRcIjp7XCJpZFwiOjMsXCJ0eXBlXCI6XCJwYWdlXCJ9fVwiPlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogVGhlIHdvcmthcm91bmQgaXMgdG8gZW5zdXJlIHRoYXQgc3VjaCBpbnN0YW5jZXMgYXJlIHNlcGFyYXRlZCBieSB3aGl0ZXNwYWNlOlxuICAgICAqIGBgYFxuICAgICAqIDxkaXYgZGF0YS1jb250ZXh0PSd7XCJjb250ZXh0XCI6e1wiaWRcIjozLFwidHlwZVwiOlwicGFnZVwifSB9XCI+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzE0NjEwI2lzc3VlY29tbWVudC0yMTk0MDEwOTkgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUaGUgdGV4dCB3aXRoIG1hcmt1cCB0byBpbnRlcnBvbGF0ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBtdXN0SGF2ZUV4cHJlc3Npb24gaWYgc2V0IHRvIHRydWUgdGhlbiB0aGUgaW50ZXJwb2xhdGlvbiBzdHJpbmcgbXVzdCBoYXZlXG4gICAgICogICAgZW1iZWRkZWQgZXhwcmVzc2lvbiBpbiBvcmRlciB0byByZXR1cm4gYW4gaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi4gU3RyaW5ncyB3aXRoIG5vXG4gICAgICogICAgZW1iZWRkZWQgZXhwcmVzc2lvbiB3aWxsIHJldHVybiBudWxsIGZvciB0aGUgaW50ZXJwb2xhdGlvbiBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHRydXN0ZWRDb250ZXh0IHdoZW4gcHJvdmlkZWQsIHRoZSByZXR1cm5lZCBmdW5jdGlvbiBwYXNzZXMgdGhlIGludGVycG9sYXRlZFxuICAgICAqICAgIHJlc3VsdCB0aHJvdWdoIHtAbGluayBuZy4kc2NlI2dldFRydXN0ZWQgJHNjZS5nZXRUcnVzdGVkKGludGVycG9sYXRlZFJlc3VsdCxcbiAgICAgKiAgICB0cnVzdGVkQ29udGV4dCl9IGJlZm9yZSByZXR1cm5pbmcgaXQuICBSZWZlciB0byB0aGUge0BsaW5rIG5nLiRzY2UgJHNjZX0gc2VydmljZSB0aGF0XG4gICAgICogICAgcHJvdmlkZXMgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgZm9yIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtib29sZWFuPX0gYWxsT3JOb3RoaW5nIGlmIGB0cnVlYCwgdGhlbiB0aGUgcmV0dXJuZWQgZnVuY3Rpb24gcmV0dXJucyB1bmRlZmluZWRcbiAgICAgKiAgICB1bmxlc3MgYWxsIGVtYmVkZGVkIGV4cHJlc3Npb25zIGV2YWx1YXRlIHRvIGEgdmFsdWUgb3RoZXIgdGhhbiBgdW5kZWZpbmVkYC5cbiAgICAgKiBAcmV0dXJucyB7ZnVuY3Rpb24oY29udGV4dCl9IGFuIGludGVycG9sYXRpb24gZnVuY3Rpb24gd2hpY2ggaXMgdXNlZCB0byBjb21wdXRlIHRoZVxuICAgICAqICAgIGludGVycG9sYXRlZCBzdHJpbmcuIFRoZSBmdW5jdGlvbiBoYXMgdGhlc2UgcGFyYW1ldGVyczpcbiAgICAgKlxuICAgICAqIC0gYGNvbnRleHRgOiBldmFsdWF0aW9uIGNvbnRleHQgZm9yIGFsbCBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGUgaW50ZXJwb2xhdGVkIHRleHRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiAkaW50ZXJwb2xhdGUodGV4dCwgbXVzdEhhdmVFeHByZXNzaW9uLCB0cnVzdGVkQ29udGV4dCwgYWxsT3JOb3RoaW5nKSB7XG4gICAgICAvLyBQcm92aWRlIGEgcXVpY2sgZXhpdCBhbmQgc2ltcGxpZmllZCByZXN1bHQgZnVuY3Rpb24gZm9yIHRleHQgd2l0aCBubyBpbnRlcnBvbGF0aW9uXG4gICAgICBpZiAoIXRleHQubGVuZ3RoIHx8IHRleHQuaW5kZXhPZihzdGFydFN5bWJvbCkgPT09IC0xKSB7XG4gICAgICAgIHZhciBjb25zdGFudEludGVycDtcbiAgICAgICAgaWYgKCFtdXN0SGF2ZUV4cHJlc3Npb24pIHtcbiAgICAgICAgICB2YXIgdW5lc2NhcGVkVGV4dCA9IHVuZXNjYXBlVGV4dCh0ZXh0KTtcbiAgICAgICAgICBjb25zdGFudEludGVycCA9IHZhbHVlRm4odW5lc2NhcGVkVGV4dCk7XG4gICAgICAgICAgY29uc3RhbnRJbnRlcnAuZXhwID0gdGV4dDtcbiAgICAgICAgICBjb25zdGFudEludGVycC5leHByZXNzaW9ucyA9IFtdO1xuICAgICAgICAgIGNvbnN0YW50SW50ZXJwLiQkd2F0Y2hEZWxlZ2F0ZSA9IGNvbnN0YW50V2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29uc3RhbnRJbnRlcnA7XG4gICAgICB9XG5cbiAgICAgIGFsbE9yTm90aGluZyA9ICEhYWxsT3JOb3RoaW5nO1xuICAgICAgdmFyIHN0YXJ0SW5kZXgsXG4gICAgICAgICAgZW5kSW5kZXgsXG4gICAgICAgICAgaW5kZXggPSAwLFxuICAgICAgICAgIGV4cHJlc3Npb25zID0gW10sXG4gICAgICAgICAgcGFyc2VGbnMgPSBbXSxcbiAgICAgICAgICB0ZXh0TGVuZ3RoID0gdGV4dC5sZW5ndGgsXG4gICAgICAgICAgZXhwLFxuICAgICAgICAgIGNvbmNhdCA9IFtdLFxuICAgICAgICAgIGV4cHJlc3Npb25Qb3NpdGlvbnMgPSBbXTtcblxuICAgICAgd2hpbGUgKGluZGV4IDwgdGV4dExlbmd0aCkge1xuICAgICAgICBpZiAoKChzdGFydEluZGV4ID0gdGV4dC5pbmRleE9mKHN0YXJ0U3ltYm9sLCBpbmRleCkpICE9PSAtMSkgJiZcbiAgICAgICAgICAgICAoKGVuZEluZGV4ID0gdGV4dC5pbmRleE9mKGVuZFN5bWJvbCwgc3RhcnRJbmRleCArIHN0YXJ0U3ltYm9sTGVuZ3RoKSkgIT09IC0xKSkge1xuICAgICAgICAgIGlmIChpbmRleCAhPT0gc3RhcnRJbmRleCkge1xuICAgICAgICAgICAgY29uY2F0LnB1c2godW5lc2NhcGVUZXh0KHRleHQuc3Vic3RyaW5nKGluZGV4LCBzdGFydEluZGV4KSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBleHAgPSB0ZXh0LnN1YnN0cmluZyhzdGFydEluZGV4ICsgc3RhcnRTeW1ib2xMZW5ndGgsIGVuZEluZGV4KTtcbiAgICAgICAgICBleHByZXNzaW9ucy5wdXNoKGV4cCk7XG4gICAgICAgICAgcGFyc2VGbnMucHVzaCgkcGFyc2UoZXhwLCBwYXJzZVN0cmluZ2lmeUludGVyY2VwdG9yKSk7XG4gICAgICAgICAgaW5kZXggPSBlbmRJbmRleCArIGVuZFN5bWJvbExlbmd0aDtcbiAgICAgICAgICBleHByZXNzaW9uUG9zaXRpb25zLnB1c2goY29uY2F0Lmxlbmd0aCk7XG4gICAgICAgICAgY29uY2F0LnB1c2goJycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHdlIGRpZCBub3QgZmluZCBhbiBpbnRlcnBvbGF0aW9uLCBzbyB3ZSBoYXZlIHRvIGFkZCB0aGUgcmVtYWluZGVyIHRvIHRoZSBzZXBhcmF0b3JzIGFycmF5XG4gICAgICAgICAgaWYgKGluZGV4ICE9PSB0ZXh0TGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25jYXQucHVzaCh1bmVzY2FwZVRleHQodGV4dC5zdWJzdHJpbmcoaW5kZXgpKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENvbmNhdGVuYXRpbmcgZXhwcmVzc2lvbnMgbWFrZXMgaXQgaGFyZCB0byByZWFzb24gYWJvdXQgd2hldGhlciBzb21lIGNvbWJpbmF0aW9uIG9mXG4gICAgICAvLyBjb25jYXRlbmF0ZWQgdmFsdWVzIGFyZSB1bnNhZmUgdG8gdXNlIGFuZCBjb3VsZCBlYXNpbHkgbGVhZCB0byBYU1MuICBCeSByZXF1aXJpbmcgdGhhdCBhXG4gICAgICAvLyBzaW5nbGUgZXhwcmVzc2lvbiBiZSB1c2VkIGZvciBpZnJhbWVbc3JjXSwgb2JqZWN0W3NyY10sIGV0Yy4sIHdlIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZVxuICAgICAgLy8gdGhhdCdzIHVzZWQgaXMgYXNzaWduZWQgb3IgY29uc3RydWN0ZWQgYnkgc29tZSBKUyBjb2RlIHNvbWV3aGVyZSB0aGF0IGlzIG1vcmUgdGVzdGFibGUgb3JcbiAgICAgIC8vIG1ha2UgaXQgb2J2aW91cyB0aGF0IHlvdSBib3VuZCB0aGUgdmFsdWUgdG8gc29tZSB1c2VyIGNvbnRyb2xsZWQgdmFsdWUuICBUaGlzIGhlbHBzIHJlZHVjZVxuICAgICAgLy8gdGhlIGxvYWQgd2hlbiBhdWRpdGluZyBmb3IgWFNTIGlzc3Vlcy5cbiAgICAgIGlmICh0cnVzdGVkQ29udGV4dCAmJiBjb25jYXQubGVuZ3RoID4gMSkge1xuICAgICAgICAgICRpbnRlcnBvbGF0ZU1pbkVyci50aHJvd05vY29uY2F0KHRleHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW11c3RIYXZlRXhwcmVzc2lvbiB8fCBleHByZXNzaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGNvbXB1dGUgPSBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBleHByZXNzaW9ucy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYWxsT3JOb3RoaW5nICYmIGlzVW5kZWZpbmVkKHZhbHVlc1tpXSkpIHJldHVybjtcbiAgICAgICAgICAgIGNvbmNhdFtleHByZXNzaW9uUG9zaXRpb25zW2ldXSA9IHZhbHVlc1tpXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvbmNhdC5qb2luKCcnKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZ2V0VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB0cnVzdGVkQ29udGV4dCA/XG4gICAgICAgICAgICAkc2NlLmdldFRydXN0ZWQodHJ1c3RlZENvbnRleHQsIHZhbHVlKSA6XG4gICAgICAgICAgICAkc2NlLnZhbHVlT2YodmFsdWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBleHRlbmQoZnVuY3Rpb24gaW50ZXJwb2xhdGlvbkZuKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgIHZhciBpaSA9IGV4cHJlc3Npb25zLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkoaWkpO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmb3IgKDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXNbaV0gPSBwYXJzZUZuc1tpXShjb250ZXh0KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBjb21wdXRlKHZhbHVlcyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoJGludGVycG9sYXRlTWluRXJyLmludGVycih0ZXh0LCBlcnIpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0sIHtcbiAgICAgICAgICAvLyBhbGwgb2YgdGhlc2UgcHJvcGVydGllcyBhcmUgdW5kb2N1bWVudGVkIGZvciBub3dcbiAgICAgICAgICBleHA6IHRleHQsIC8vanVzdCBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIHJlZ3VsYXIgd2F0Y2hlcnMgY3JlYXRlZCB2aWEgJHdhdGNoXG4gICAgICAgICAgZXhwcmVzc2lvbnM6IGV4cHJlc3Npb25zLFxuICAgICAgICAgICQkd2F0Y2hEZWxlZ2F0ZTogZnVuY3Rpb24oc2NvcGUsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgICB2YXIgbGFzdFZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlLiR3YXRjaEdyb3VwKHBhcnNlRm5zLCAvKiogQHRoaXMgKi8gZnVuY3Rpb24gaW50ZXJwb2xhdGVGbldhdGNoZXIodmFsdWVzLCBvbGRWYWx1ZXMpIHtcbiAgICAgICAgICAgICAgdmFyIGN1cnJWYWx1ZSA9IGNvbXB1dGUodmFsdWVzKTtcbiAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBjdXJyVmFsdWUsIHZhbHVlcyAhPT0gb2xkVmFsdWVzID8gbGFzdFZhbHVlIDogY3VyclZhbHVlLCBzY29wZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbGFzdFZhbHVlID0gY3VyclZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcGFyc2VTdHJpbmdpZnlJbnRlcmNlcHRvcih2YWx1ZSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhbHVlID0gZ2V0VmFsdWUodmFsdWUpO1xuICAgICAgICAgIHJldHVybiBhbGxPck5vdGhpbmcgJiYgIWlzRGVmaW5lZCh2YWx1ZSkgPyB2YWx1ZSA6IHN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKCRpbnRlcnBvbGF0ZU1pbkVyci5pbnRlcnIodGV4dCwgZXJyKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaW50ZXJwb2xhdGUjc3RhcnRTeW1ib2xcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTeW1ib2wgdG8gZGVub3RlIHRoZSBzdGFydCBvZiBleHByZXNzaW9uIGluIHRoZSBpbnRlcnBvbGF0ZWQgc3RyaW5nLiBEZWZhdWx0cyB0byBge3tgLlxuICAgICAqXG4gICAgICogVXNlIHtAbGluayBuZy4kaW50ZXJwb2xhdGVQcm92aWRlciNzdGFydFN5bWJvbCBgJGludGVycG9sYXRlUHJvdmlkZXIuc3RhcnRTeW1ib2xgfSB0byBjaGFuZ2VcbiAgICAgKiB0aGUgc3ltYm9sLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ30gc3RhcnQgc3ltYm9sLlxuICAgICAqL1xuICAgICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHN0YXJ0U3ltYm9sO1xuICAgIH07XG5cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkaW50ZXJwb2xhdGUjZW5kU3ltYm9sXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU3ltYm9sIHRvIGRlbm90ZSB0aGUgZW5kIG9mIGV4cHJlc3Npb24gaW4gdGhlIGludGVycG9sYXRlZCBzdHJpbmcuIERlZmF1bHRzIHRvIGB9fWAuXG4gICAgICpcbiAgICAgKiBVc2Uge0BsaW5rIG5nLiRpbnRlcnBvbGF0ZVByb3ZpZGVyI2VuZFN5bWJvbCBgJGludGVycG9sYXRlUHJvdmlkZXIuZW5kU3ltYm9sYH0gdG8gY2hhbmdlXG4gICAgICogdGhlIHN5bWJvbC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IGVuZCBzeW1ib2wuXG4gICAgICovXG4gICAgJGludGVycG9sYXRlLmVuZFN5bWJvbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGVuZFN5bWJvbDtcbiAgICB9O1xuXG4gICAgcmV0dXJuICRpbnRlcnBvbGF0ZTtcbiAgfV07XG59XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJEludGVydmFsUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckd2luZG93JywgJyRxJywgJyQkcScsICckYnJvd3NlcicsXG4gICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgICAkd2luZG93LCAgICRxLCAgICQkcSwgICAkYnJvd3Nlcikge1xuICAgIHZhciBpbnRlcnZhbHMgPSB7fTtcblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAgKiBAbmFtZSAkaW50ZXJ2YWxcbiAgICAgICpcbiAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAqIEFuZ3VsYXIncyB3cmFwcGVyIGZvciBgd2luZG93LnNldEludGVydmFsYC4gVGhlIGBmbmAgZnVuY3Rpb24gaXMgZXhlY3V0ZWQgZXZlcnkgYGRlbGF5YFxuICAgICAgKiBtaWxsaXNlY29uZHMuXG4gICAgICAqXG4gICAgICAqIFRoZSByZXR1cm4gdmFsdWUgb2YgcmVnaXN0ZXJpbmcgYW4gaW50ZXJ2YWwgZnVuY3Rpb24gaXMgYSBwcm9taXNlLiBUaGlzIHByb21pc2Ugd2lsbCBiZVxuICAgICAgKiBub3RpZmllZCB1cG9uIGVhY2ggdGljayBvZiB0aGUgaW50ZXJ2YWwsIGFuZCB3aWxsIGJlIHJlc29sdmVkIGFmdGVyIGBjb3VudGAgaXRlcmF0aW9ucywgb3JcbiAgICAgICogcnVuIGluZGVmaW5pdGVseSBpZiBgY291bnRgIGlzIG5vdCBkZWZpbmVkLiBUaGUgdmFsdWUgb2YgdGhlIG5vdGlmaWNhdGlvbiB3aWxsIGJlIHRoZVxuICAgICAgKiBudW1iZXIgb2YgaXRlcmF0aW9ucyB0aGF0IGhhdmUgcnVuLlxuICAgICAgKiBUbyBjYW5jZWwgYW4gaW50ZXJ2YWwsIGNhbGwgYCRpbnRlcnZhbC5jYW5jZWwocHJvbWlzZSlgLlxuICAgICAgKlxuICAgICAgKiBJbiB0ZXN0cyB5b3UgY2FuIHVzZSB7QGxpbmsgbmdNb2NrLiRpbnRlcnZhbCNmbHVzaCBgJGludGVydmFsLmZsdXNoKG1pbGxpcylgfSB0b1xuICAgICAgKiBtb3ZlIGZvcndhcmQgYnkgYG1pbGxpc2AgbWlsbGlzZWNvbmRzIGFuZCB0cmlnZ2VyIGFueSBmdW5jdGlvbnMgc2NoZWR1bGVkIHRvIHJ1biBpbiB0aGF0XG4gICAgICAqIHRpbWUuXG4gICAgICAqXG4gICAgICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAgICAqICoqTm90ZSoqOiBJbnRlcnZhbHMgY3JlYXRlZCBieSB0aGlzIHNlcnZpY2UgbXVzdCBiZSBleHBsaWNpdGx5IGRlc3Ryb3llZCB3aGVuIHlvdSBhcmUgZmluaXNoZWRcbiAgICAgICogd2l0aCB0aGVtLiAgSW4gcGFydGljdWxhciB0aGV5IGFyZSBub3QgYXV0b21hdGljYWxseSBkZXN0cm95ZWQgd2hlbiBhIGNvbnRyb2xsZXIncyBzY29wZSBvciBhXG4gICAgICAqIGRpcmVjdGl2ZSdzIGVsZW1lbnQgYXJlIGRlc3Ryb3llZC5cbiAgICAgICogWW91IHNob3VsZCB0YWtlIHRoaXMgaW50byBjb25zaWRlcmF0aW9uIGFuZCBtYWtlIHN1cmUgdG8gYWx3YXlzIGNhbmNlbCB0aGUgaW50ZXJ2YWwgYXQgdGhlXG4gICAgICAqIGFwcHJvcHJpYXRlIG1vbWVudC4gIFNlZSB0aGUgZXhhbXBsZSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzIG9uIGhvdyBhbmQgd2hlbiB0byBkbyB0aGlzLlxuICAgICAgKiA8L2Rpdj5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtmdW5jdGlvbigpfSBmbiBBIGZ1bmN0aW9uIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCByZXBlYXRlZGx5LiBJZiBubyBhZGRpdGlvbmFsIGFyZ3VtZW50c1xuICAgICAgKiAgIGFyZSBwYXNzZWQgKHNlZSBiZWxvdyksIHRoZSBmdW5jdGlvbiBpcyBjYWxsZWQgd2l0aCB0aGUgY3VycmVudCBpdGVyYXRpb24gY291bnQuXG4gICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWxheSBOdW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJldHdlZW4gZWFjaCBmdW5jdGlvbiBjYWxsLlxuICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtjb3VudD0wXSBOdW1iZXIgb2YgdGltZXMgdG8gcmVwZWF0LiBJZiBub3Qgc2V0LCBvciAwLCB3aWxsIHJlcGVhdFxuICAgICAgKiAgIGluZGVmaW5pdGVseS5cbiAgICAgICogQHBhcmFtIHtib29sZWFuPX0gW2ludm9rZUFwcGx5PXRydWVdIElmIHNldCB0byBgZmFsc2VgIHNraXBzIG1vZGVsIGRpcnR5IGNoZWNraW5nLCBvdGhlcndpc2VcbiAgICAgICogICB3aWxsIGludm9rZSBgZm5gIHdpdGhpbiB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5ICRhcHBseX0gYmxvY2suXG4gICAgICAqIEBwYXJhbSB7Li4uKj19IFBhc3MgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIHRvIHRoZSBleGVjdXRlZCBmdW5jdGlvbi5cbiAgICAgICogQHJldHVybnMge3Byb21pc2V9IEEgcHJvbWlzZSB3aGljaCB3aWxsIGJlIG5vdGlmaWVkIG9uIGVhY2ggaXRlcmF0aW9uLiBJdCB3aWxsIHJlc29sdmUgb25jZSBhbGwgaXRlcmF0aW9ucyBvZiB0aGUgaW50ZXJ2YWwgY29tcGxldGUuXG4gICAgICAqXG4gICAgICAqIEBleGFtcGxlXG4gICAgICAqIDxleGFtcGxlIG1vZHVsZT1cImludGVydmFsRXhhbXBsZVwiIG5hbWU9XCJpbnRlcnZhbC1zZXJ2aWNlXCI+XG4gICAgICAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAqICAgPHNjcmlwdD5cbiAgICAgICogICAgIGFuZ3VsYXIubW9kdWxlKCdpbnRlcnZhbEV4YW1wbGUnLCBbXSlcbiAgICAgICogICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGludGVydmFsJyxcbiAgICAgICogICAgICAgICBmdW5jdGlvbigkc2NvcGUsICRpbnRlcnZhbCkge1xuICAgICAgKiAgICAgICAgICAgJHNjb3BlLmZvcm1hdCA9ICdNL2QveXkgaDptbTpzcyBhJztcbiAgICAgICogICAgICAgICAgICRzY29wZS5ibG9vZF8xID0gMTAwO1xuICAgICAgKiAgICAgICAgICAgJHNjb3BlLmJsb29kXzIgPSAxMjA7XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICB2YXIgc3RvcDtcbiAgICAgICogICAgICAgICAgICRzY29wZS5maWdodCA9IGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAvLyBEb24ndCBzdGFydCBhIG5ldyBmaWdodCBpZiB3ZSBhcmUgYWxyZWFkeSBmaWdodGluZ1xuICAgICAgKiAgICAgICAgICAgICBpZiAoIGFuZ3VsYXIuaXNEZWZpbmVkKHN0b3ApICkgcmV0dXJuO1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgICBzdG9wID0gJGludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgKiAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYmxvb2RfMSA+IDAgJiYgJHNjb3BlLmJsb29kXzIgPiAwKSB7XG4gICAgICAqICAgICAgICAgICAgICAgICAkc2NvcGUuYmxvb2RfMSA9ICRzY29wZS5ibG9vZF8xIC0gMztcbiAgICAgICogICAgICAgICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gJHNjb3BlLmJsb29kXzIgLSA0O1xuICAgICAgKiAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAqICAgICAgICAgICAgICAgICAkc2NvcGUuc3RvcEZpZ2h0KCk7XG4gICAgICAqICAgICAgICAgICAgICAgfVxuICAgICAgKiAgICAgICAgICAgICB9LCAxMDApO1xuICAgICAgKiAgICAgICAgICAgfTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICRzY29wZS5zdG9wRmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKHN0b3ApKSB7XG4gICAgICAqICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChzdG9wKTtcbiAgICAgICogICAgICAgICAgICAgICBzdG9wID0gdW5kZWZpbmVkO1xuICAgICAgKiAgICAgICAgICAgICB9XG4gICAgICAqICAgICAgICAgICB9O1xuICAgICAgKlxuICAgICAgKiAgICAgICAgICAgJHNjb3BlLnJlc2V0RmlnaHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICogICAgICAgICAgICAgJHNjb3BlLmJsb29kXzEgPSAxMDA7XG4gICAgICAqICAgICAgICAgICAgICRzY29wZS5ibG9vZF8yID0gMTIwO1xuICAgICAgKiAgICAgICAgICAgfTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBpbnRlcnZhbCBpcyBkZXN0cm95ZWQgdG9vXG4gICAgICAqICAgICAgICAgICAgICRzY29wZS5zdG9wRmlnaHQoKTtcbiAgICAgICogICAgICAgICAgIH0pO1xuICAgICAgKiAgICAgICAgIH1dKVxuICAgICAgKiAgICAgICAvLyBSZWdpc3RlciB0aGUgJ215Q3VycmVudFRpbWUnIGRpcmVjdGl2ZSBmYWN0b3J5IG1ldGhvZC5cbiAgICAgICogICAgICAgLy8gV2UgaW5qZWN0ICRpbnRlcnZhbCBhbmQgZGF0ZUZpbHRlciBzZXJ2aWNlIHNpbmNlIHRoZSBmYWN0b3J5IG1ldGhvZCBpcyBESS5cbiAgICAgICogICAgICAgLmRpcmVjdGl2ZSgnbXlDdXJyZW50VGltZScsIFsnJGludGVydmFsJywgJ2RhdGVGaWx0ZXInLFxuICAgICAgKiAgICAgICAgIGZ1bmN0aW9uKCRpbnRlcnZhbCwgZGF0ZUZpbHRlcikge1xuICAgICAgKiAgICAgICAgICAgLy8gcmV0dXJuIHRoZSBkaXJlY3RpdmUgbGluayBmdW5jdGlvbi4gKGNvbXBpbGUgZnVuY3Rpb24gbm90IG5lZWRlZClcbiAgICAgICogICAgICAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICogICAgICAgICAgICAgdmFyIGZvcm1hdCwgIC8vIGRhdGUgZm9ybWF0XG4gICAgICAqICAgICAgICAgICAgICAgICBzdG9wVGltZTsgLy8gc28gdGhhdCB3ZSBjYW4gY2FuY2VsIHRoZSB0aW1lIHVwZGF0ZXNcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgLy8gdXNlZCB0byB1cGRhdGUgdGhlIFVJXG4gICAgICAqICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVRpbWUoKSB7XG4gICAgICAqICAgICAgICAgICAgICAgZWxlbWVudC50ZXh0KGRhdGVGaWx0ZXIobmV3IERhdGUoKSwgZm9ybWF0KSk7XG4gICAgICAqICAgICAgICAgICAgIH1cbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgLy8gd2F0Y2ggdGhlIGV4cHJlc3Npb24sIGFuZCB1cGRhdGUgdGhlIFVJIG9uIGNoYW5nZS5cbiAgICAgICogICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHJzLm15Q3VycmVudFRpbWUsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAqICAgICAgICAgICAgICAgZm9ybWF0ID0gdmFsdWU7XG4gICAgICAqICAgICAgICAgICAgICAgdXBkYXRlVGltZSgpO1xuICAgICAgKiAgICAgICAgICAgICB9KTtcbiAgICAgICpcbiAgICAgICogICAgICAgICAgICAgc3RvcFRpbWUgPSAkaW50ZXJ2YWwodXBkYXRlVGltZSwgMTAwMCk7XG4gICAgICAqXG4gICAgICAqICAgICAgICAgICAgIC8vIGxpc3RlbiBvbiBET00gZGVzdHJveSAocmVtb3ZhbCkgZXZlbnQsIGFuZCBjYW5jZWwgdGhlIG5leHQgVUkgdXBkYXRlXG4gICAgICAqICAgICAgICAgICAgIC8vIHRvIHByZXZlbnQgdXBkYXRpbmcgdGltZSBhZnRlciB0aGUgRE9NIGVsZW1lbnQgd2FzIHJlbW92ZWQuXG4gICAgICAqICAgICAgICAgICAgIGVsZW1lbnQub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAqICAgICAgICAgICAgICAgJGludGVydmFsLmNhbmNlbChzdG9wVGltZSk7XG4gICAgICAqICAgICAgICAgICAgIH0pO1xuICAgICAgKiAgICAgICAgICAgfVxuICAgICAgKiAgICAgICAgIH1dKTtcbiAgICAgICogICA8L3NjcmlwdD5cbiAgICAgICpcbiAgICAgICogICA8ZGl2PlxuICAgICAgKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICogICAgICAgPGxhYmVsPkRhdGUgZm9ybWF0OiA8aW5wdXQgbmctbW9kZWw9XCJmb3JtYXRcIj48L2xhYmVsPiA8aHIvPlxuICAgICAgKiAgICAgICBDdXJyZW50IHRpbWUgaXM6IDxzcGFuIG15LWN1cnJlbnQtdGltZT1cImZvcm1hdFwiPjwvc3Bhbj5cbiAgICAgICogICAgICAgPGhyLz5cbiAgICAgICogICAgICAgQmxvb2QgMSA6IDxmb250IGNvbG9yPSdyZWQnPnt7Ymxvb2RfMX19PC9mb250PlxuICAgICAgKiAgICAgICBCbG9vZCAyIDogPGZvbnQgY29sb3I9J3JlZCc+e3tibG9vZF8yfX08L2ZvbnQ+XG4gICAgICAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbmctY2xpY2s9XCJmaWdodCgpXCI+RmlnaHQ8L2J1dHRvbj5cbiAgICAgICogICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgZGF0YS1uZy1jbGljaz1cInN0b3BGaWdodCgpXCI+U3RvcEZpZ2h0PC9idXR0b24+XG4gICAgICAqICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGRhdGEtbmctY2xpY2s9XCJyZXNldEZpZ2h0KClcIj5yZXNldEZpZ2h0PC9idXR0b24+XG4gICAgICAqICAgICA8L2Rpdj5cbiAgICAgICogICA8L2Rpdj5cbiAgICAgICpcbiAgICAgICogPC9maWxlPlxuICAgICAgKiA8L2V4YW1wbGU+XG4gICAgICAqL1xuICAgIGZ1bmN0aW9uIGludGVydmFsKGZuLCBkZWxheSwgY291bnQsIGludm9rZUFwcGx5KSB7XG4gICAgICB2YXIgaGFzUGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDQsXG4gICAgICAgICAgYXJncyA9IGhhc1BhcmFtcyA/IHNsaWNlQXJncyhhcmd1bWVudHMsIDQpIDogW10sXG4gICAgICAgICAgc2V0SW50ZXJ2YWwgPSAkd2luZG93LnNldEludGVydmFsLFxuICAgICAgICAgIGNsZWFySW50ZXJ2YWwgPSAkd2luZG93LmNsZWFySW50ZXJ2YWwsXG4gICAgICAgICAgaXRlcmF0aW9uID0gMCxcbiAgICAgICAgICBza2lwQXBwbHkgPSAoaXNEZWZpbmVkKGludm9rZUFwcGx5KSAmJiAhaW52b2tlQXBwbHkpLFxuICAgICAgICAgIGRlZmVycmVkID0gKHNraXBBcHBseSA/ICQkcSA6ICRxKS5kZWZlcigpLFxuICAgICAgICAgIHByb21pc2UgPSBkZWZlcnJlZC5wcm9taXNlO1xuXG4gICAgICBjb3VudCA9IGlzRGVmaW5lZChjb3VudCkgPyBjb3VudCA6IDA7XG5cbiAgICAgIHByb21pc2UuJCRpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gdGljaygpIHtcbiAgICAgICAgaWYgKHNraXBBcHBseSkge1xuICAgICAgICAgICRicm93c2VyLmRlZmVyKGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgICAgIGRlZmVycmVkLm5vdGlmeShpdGVyYXRpb24rKyk7XG5cbiAgICAgICAgaWYgKGNvdW50ID4gMCAmJiBpdGVyYXRpb24gPj0gY291bnQpIHtcbiAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGl0ZXJhdGlvbik7XG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChwcm9taXNlLiQkaW50ZXJ2YWxJZCk7XG4gICAgICAgICAgZGVsZXRlIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNraXBBcHBseSkgJHJvb3RTY29wZS4kYXBwbHkoKTtcblxuICAgICAgfSwgZGVsYXkpO1xuXG4gICAgICBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdID0gZGVmZXJyZWQ7XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuXG4gICAgICBmdW5jdGlvbiBjYWxsYmFjaygpIHtcbiAgICAgICAgaWYgKCFoYXNQYXJhbXMpIHtcbiAgICAgICAgICBmbihpdGVyYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZuLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICAgLyoqXG4gICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICogQG5hbWUgJGludGVydmFsI2NhbmNlbFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQ2FuY2VscyBhIHRhc2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBgcHJvbWlzZWAuXG4gICAgICAqXG4gICAgICAqIEBwYXJhbSB7UHJvbWlzZT19IHByb21pc2UgcmV0dXJuZWQgYnkgdGhlIGAkaW50ZXJ2YWxgIGZ1bmN0aW9uLlxuICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgd2FzIHN1Y2Nlc3NmdWxseSBjYW5jZWxlZC5cbiAgICAgICovXG4gICAgaW50ZXJ2YWwuY2FuY2VsID0gZnVuY3Rpb24ocHJvbWlzZSkge1xuICAgICAgaWYgKHByb21pc2UgJiYgcHJvbWlzZS4kJGludGVydmFsSWQgaW4gaW50ZXJ2YWxzKSB7XG4gICAgICAgIC8vIEludGVydmFsIGNhbmNlbHMgc2hvdWxkIG5vdCByZXBvcnQgYXMgdW5oYW5kbGVkIHByb21pc2UuXG4gICAgICAgIG1hcmtRRXhjZXB0aW9uSGFuZGxlZChpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdLnByb21pc2UpO1xuICAgICAgICBpbnRlcnZhbHNbcHJvbWlzZS4kJGludGVydmFsSWRdLnJlamVjdCgnY2FuY2VsZWQnKTtcbiAgICAgICAgJHdpbmRvdy5jbGVhckludGVydmFsKHByb21pc2UuJCRpbnRlcnZhbElkKTtcbiAgICAgICAgZGVsZXRlIGludGVydmFsc1twcm9taXNlLiQkaW50ZXJ2YWxJZF07XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICByZXR1cm4gaW50ZXJ2YWw7XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkanNvbnBDYWxsYmFja3NcbiAqIEByZXF1aXJlcyAkd2luZG93XG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgc2VydmljZSBoYW5kbGVzIHRoZSBsaWZlY3ljbGUgb2YgY2FsbGJhY2tzIHRvIGhhbmRsZSBKU09OUCByZXF1ZXN0cy5cbiAqIE92ZXJyaWRlIHRoaXMgc2VydmljZSBpZiB5b3Ugd2lzaCB0byBjdXN0b21pc2Ugd2hlcmUgdGhlIGNhbGxiYWNrcyBhcmUgc3RvcmVkIGFuZFxuICogaG93IHRoZXkgdmFyeSBjb21wYXJlZCB0byB0aGUgcmVxdWVzdGVkIHVybC5cbiAqL1xudmFyICRqc29ucENhbGxiYWNrc1Byb3ZpZGVyID0gLyoqIEB0aGlzICovIGZ1bmN0aW9uKCkge1xuICB0aGlzLiRnZXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2FsbGJhY2tzID0gYW5ndWxhci5jYWxsYmFja3M7XG4gICAgdmFyIGNhbGxiYWNrTWFwID0ge307XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVDYWxsYmFjayhjYWxsYmFja0lkKSB7XG4gICAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGNhbGxiYWNrLmRhdGEgPSBkYXRhO1xuICAgICAgICBjYWxsYmFjay5jYWxsZWQgPSB0cnVlO1xuICAgICAgfTtcbiAgICAgIGNhbGxiYWNrLmlkID0gY2FsbGJhY2tJZDtcbiAgICAgIHJldHVybiBjYWxsYmFjaztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkanNvbnBDYWxsYmFja3MjY3JlYXRlQ2FsbGJhY2tcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgdGhlIHVybCBvZiB0aGUgSlNPTlAgcmVxdWVzdFxuICAgICAgICogQHJldHVybnMge3N0cmluZ30gdGhlIGNhbGxiYWNrIHBhdGggdG8gc2VuZCB0byB0aGUgc2VydmVyIGFzIHBhcnQgb2YgdGhlIEpTT05QIHJlcXVlc3RcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICoge0BsaW5rICRodHRwQmFja2VuZH0gY2FsbHMgdGhpcyBtZXRob2QgdG8gY3JlYXRlIGEgY2FsbGJhY2sgYW5kIGdldCBob2xkIG9mIHRoZSBwYXRoIHRvIHRoZSBjYWxsYmFja1xuICAgICAgICogdG8gcGFzcyB0byB0aGUgc2VydmVyLCB3aGljaCB3aWxsIGJlIHVzZWQgdG8gY2FsbCB0aGUgY2FsbGJhY2sgd2l0aCBpdHMgcGF5bG9hZCBpbiB0aGUgSlNPTlAgcmVzcG9uc2UuXG4gICAgICAgKi9cbiAgICAgIGNyZWF0ZUNhbGxiYWNrOiBmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrSWQgPSAnXycgKyAoY2FsbGJhY2tzLiQkY291bnRlcisrKS50b1N0cmluZygzNik7XG4gICAgICAgIHZhciBjYWxsYmFja1BhdGggPSAnYW5ndWxhci5jYWxsYmFja3MuJyArIGNhbGxiYWNrSWQ7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IGNyZWF0ZUNhbGxiYWNrKGNhbGxiYWNrSWQpO1xuICAgICAgICBjYWxsYmFja01hcFtjYWxsYmFja1BhdGhdID0gY2FsbGJhY2tzW2NhbGxiYWNrSWRdID0gY2FsbGJhY2s7XG4gICAgICAgIHJldHVybiBjYWxsYmFja1BhdGg7XG4gICAgICB9LFxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkanNvbnBDYWxsYmFja3Mjd2FzQ2FsbGVkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY2FsbGJhY2tQYXRoIHRoZSBwYXRoIHRvIHRoZSBjYWxsYmFjayB0aGF0IHdhcyBzZW50IGluIHRoZSBKU09OUCByZXF1ZXN0XG4gICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gd2hldGhlciB0aGUgY2FsbGJhY2sgaGFzIGJlZW4gY2FsbGVkLCBhcyBhIHJlc3VsdCBvZiB0aGUgSlNPTlAgcmVzcG9uc2VcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICoge0BsaW5rICRodHRwQmFja2VuZH0gY2FsbHMgdGhpcyBtZXRob2QgdG8gZmluZCBvdXQgd2hldGhlciB0aGUgSlNPTlAgcmVzcG9uc2UgYWN0dWFsbHkgY2FsbGVkIHRoZVxuICAgICAgICogY2FsbGJhY2sgdGhhdCB3YXMgcGFzc2VkIGluIHRoZSByZXF1ZXN0LlxuICAgICAgICovXG4gICAgICB3YXNDYWxsZWQ6IGZ1bmN0aW9uKGNhbGxiYWNrUGF0aCkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2tNYXBbY2FsbGJhY2tQYXRoXS5jYWxsZWQ7XG4gICAgICB9LFxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkanNvbnBDYWxsYmFja3MjZ2V0UmVzcG9uc2VcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjYWxsYmFja1BhdGggdGhlIHBhdGggdG8gdGhlIGNhbGxiYWNrIHRoYXQgd2FzIHNlbnQgaW4gdGhlIEpTT05QIHJlcXVlc3RcbiAgICAgICAqIEByZXR1cm5zIHsqfSB0aGUgZGF0YSByZWNlaXZlZCBmcm9tIHRoZSByZXNwb25zZSB2aWEgdGhlIHJlZ2lzdGVyZWQgY2FsbGJhY2tcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICoge0BsaW5rICRodHRwQmFja2VuZH0gY2FsbHMgdGhpcyBtZXRob2QgdG8gZ2V0IGhvbGQgb2YgdGhlIGRhdGEgdGhhdCB3YXMgcHJvdmlkZWQgdG8gdGhlIGNhbGxiYWNrXG4gICAgICAgKiBpbiB0aGUgSlNPTlAgcmVzcG9uc2UuXG4gICAgICAgKi9cbiAgICAgIGdldFJlc3BvbnNlOiBmdW5jdGlvbihjYWxsYmFja1BhdGgpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrTWFwW2NhbGxiYWNrUGF0aF0uZGF0YTtcbiAgICAgIH0sXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRqc29ucENhbGxiYWNrcyNyZW1vdmVDYWxsYmFja1xuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNhbGxiYWNrUGF0aCB0aGUgcGF0aCB0byB0aGUgY2FsbGJhY2sgdGhhdCB3YXMgc2VudCBpbiB0aGUgSlNPTlAgcmVxdWVzdFxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiB7QGxpbmsgJGh0dHBCYWNrZW5kfSBjYWxscyB0aGlzIG1ldGhvZCB0byByZW1vdmUgdGhlIGNhbGxiYWNrIGFmdGVyIHRoZSBKU09OUCByZXF1ZXN0IGhhc1xuICAgICAgICogY29tcGxldGVkIG9yIHRpbWVkLW91dC5cbiAgICAgICAqL1xuICAgICAgcmVtb3ZlQ2FsbGJhY2s6IGZ1bmN0aW9uKGNhbGxiYWNrUGF0aCkge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBjYWxsYmFja01hcFtjYWxsYmFja1BhdGhdO1xuICAgICAgICBkZWxldGUgY2FsbGJhY2tzW2NhbGxiYWNrLmlkXTtcbiAgICAgICAgZGVsZXRlIGNhbGxiYWNrTWFwW2NhbGxiYWNrUGF0aF07XG4gICAgICB9XG4gICAgfTtcbiAgfTtcbn07XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRsb2NhbGVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICRsb2NhbGUgc2VydmljZSBwcm92aWRlcyBsb2NhbGl6YXRpb24gcnVsZXMgZm9yIHZhcmlvdXMgQW5ndWxhciBjb21wb25lbnRzLiBBcyBvZiByaWdodCBub3cgdGhlXG4gKiBvbmx5IHB1YmxpYyBhcGkgaXM6XG4gKlxuICogKiBgaWRgIOKAkyBge3N0cmluZ31gIOKAkyBsb2NhbGUgaWQgZm9ybWF0dGVkIGFzIGBsYW5ndWFnZUlkLWNvdW50cnlJZGAgKGUuZy4gYGVuLXVzYClcbiAqL1xuXG52YXIgUEFUSF9NQVRDSCA9IC9eKFtePyNdKikoXFw/KFteI10qKSk/KCMoLiopKT8kLyxcbiAgICBERUZBVUxUX1BPUlRTID0geydodHRwJzogODAsICdodHRwcyc6IDQ0MywgJ2Z0cCc6IDIxfTtcbnZhciAkbG9jYXRpb25NaW5FcnIgPSBtaW5FcnIoJyRsb2NhdGlvbicpO1xuXG5cbi8qKlxuICogRW5jb2RlIHBhdGggdXNpbmcgZW5jb2RlVXJpU2VnbWVudCwgaWdub3JpbmcgZm9yd2FyZCBzbGFzaGVzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggUGF0aCB0byBlbmNvZGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcvJyksXG4gICAgICBpID0gc2VnbWVudHMubGVuZ3RoO1xuXG4gIHdoaWxlIChpLS0pIHtcbiAgICBzZWdtZW50c1tpXSA9IGVuY29kZVVyaVNlZ21lbnQoc2VnbWVudHNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIHNlZ21lbnRzLmpvaW4oJy8nKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VBYnNvbHV0ZVVybChhYnNvbHV0ZVVybCwgbG9jYXRpb25PYmopIHtcbiAgdmFyIHBhcnNlZFVybCA9IHVybFJlc29sdmUoYWJzb2x1dGVVcmwpO1xuXG4gIGxvY2F0aW9uT2JqLiQkcHJvdG9jb2wgPSBwYXJzZWRVcmwucHJvdG9jb2w7XG4gIGxvY2F0aW9uT2JqLiQkaG9zdCA9IHBhcnNlZFVybC5ob3N0bmFtZTtcbiAgbG9jYXRpb25PYmouJCRwb3J0ID0gdG9JbnQocGFyc2VkVXJsLnBvcnQpIHx8IERFRkFVTFRfUE9SVFNbcGFyc2VkVXJsLnByb3RvY29sXSB8fCBudWxsO1xufVxuXG52YXIgRE9VQkxFX1NMQVNIX1JFR0VYID0gL15cXHMqW1xcXFwvXXsyLH0vO1xuZnVuY3Rpb24gcGFyc2VBcHBVcmwodXJsLCBsb2NhdGlvbk9iaikge1xuXG4gIGlmIChET1VCTEVfU0xBU0hfUkVHRVgudGVzdCh1cmwpKSB7XG4gICAgdGhyb3cgJGxvY2F0aW9uTWluRXJyKCdiYWRwYXRoJywgJ0ludmFsaWQgdXJsIFwiezB9XCIuJywgdXJsKTtcbiAgfVxuXG4gIHZhciBwcmVmaXhlZCA9ICh1cmwuY2hhckF0KDApICE9PSAnLycpO1xuICBpZiAocHJlZml4ZWQpIHtcbiAgICB1cmwgPSAnLycgKyB1cmw7XG4gIH1cbiAgdmFyIG1hdGNoID0gdXJsUmVzb2x2ZSh1cmwpO1xuICBsb2NhdGlvbk9iai4kJHBhdGggPSBkZWNvZGVVUklDb21wb25lbnQocHJlZml4ZWQgJiYgbWF0Y2gucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycgP1xuICAgICAgbWF0Y2gucGF0aG5hbWUuc3Vic3RyaW5nKDEpIDogbWF0Y2gucGF0aG5hbWUpO1xuICBsb2NhdGlvbk9iai4kJHNlYXJjaCA9IHBhcnNlS2V5VmFsdWUobWF0Y2guc2VhcmNoKTtcbiAgbG9jYXRpb25PYmouJCRoYXNoID0gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoLmhhc2gpO1xuXG4gIC8vIG1ha2Ugc3VyZSBwYXRoIHN0YXJ0cyB3aXRoICcvJztcbiAgaWYgKGxvY2F0aW9uT2JqLiQkcGF0aCAmJiBsb2NhdGlvbk9iai4kJHBhdGguY2hhckF0KDApICE9PSAnLycpIHtcbiAgICBsb2NhdGlvbk9iai4kJHBhdGggPSAnLycgKyBsb2NhdGlvbk9iai4kJHBhdGg7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RhcnRzV2l0aChzdHIsIHNlYXJjaCkge1xuICByZXR1cm4gc3RyLnNsaWNlKDAsIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZXR1cm5zIHRleHQgZnJvbSBgdXJsYCBhZnRlciBgYmFzZWAgb3IgYHVuZGVmaW5lZGAgaWYgaXQgZG9lcyBub3QgYmVnaW4gd2l0aFxuICogICAgICAgICAgICAgICAgICAgdGhlIGV4cGVjdGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gc3RyaXBCYXNlVXJsKGJhc2UsIHVybCkge1xuICBpZiAoc3RhcnRzV2l0aCh1cmwsIGJhc2UpKSB7XG4gICAgcmV0dXJuIHVybC5zdWJzdHIoYmFzZS5sZW5ndGgpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaW5kZXggPSB1cmwuaW5kZXhPZignIycpO1xuICByZXR1cm4gaW5kZXggPT09IC0xID8gdXJsIDogdXJsLnN1YnN0cigwLCBpbmRleCk7XG59XG5cbmZ1bmN0aW9uIHRyaW1FbXB0eUhhc2godXJsKSB7XG4gIHJldHVybiB1cmwucmVwbGFjZSgvKCMuKyl8IyQvLCAnJDEnKTtcbn1cblxuXG5mdW5jdGlvbiBzdHJpcEZpbGUodXJsKSB7XG4gIHJldHVybiB1cmwuc3Vic3RyKDAsIHN0cmlwSGFzaCh1cmwpLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbn1cblxuLyogcmV0dXJuIHRoZSBzZXJ2ZXIgb25seSAoc2NoZW1lOi8vaG9zdDpwb3J0KSAqL1xuZnVuY3Rpb24gc2VydmVyQmFzZSh1cmwpIHtcbiAgcmV0dXJuIHVybC5zdWJzdHJpbmcoMCwgdXJsLmluZGV4T2YoJy8nLCB1cmwuaW5kZXhPZignLy8nKSArIDIpKTtcbn1cblxuXG4vKipcbiAqIExvY2F0aW9uSHRtbDVVcmwgcmVwcmVzZW50cyBhIFVSTFxuICogVGhpcyBvYmplY3QgaXMgZXhwb3NlZCBhcyAkbG9jYXRpb24gc2VydmljZSB3aGVuIEhUTUw1IG1vZGUgaXMgZW5hYmxlZCBhbmQgc3VwcG9ydGVkXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2VOb0ZpbGUgYXBwbGljYXRpb24gYmFzZSBVUkwgc3RyaXBwZWQgb2YgYW55IGZpbGVuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVByZWZpeCBVUkwgcGF0aCBwcmVmaXhcbiAqL1xuZnVuY3Rpb24gTG9jYXRpb25IdG1sNVVybChhcHBCYXNlLCBhcHBCYXNlTm9GaWxlLCBiYXNlUHJlZml4KSB7XG4gIHRoaXMuJCRodG1sNSA9IHRydWU7XG4gIGJhc2VQcmVmaXggPSBiYXNlUHJlZml4IHx8ICcnO1xuICBwYXJzZUFic29sdXRlVXJsKGFwcEJhc2UsIHRoaXMpO1xuXG5cbiAgLyoqXG4gICAqIFBhcnNlIGdpdmVuIEhUTUw1IChyZWd1bGFyKSBVUkwgc3RyaW5nIGludG8gcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEhUTUw1IFVSTFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy4kJHBhcnNlID0gZnVuY3Rpb24odXJsKSB7XG4gICAgdmFyIHBhdGhVcmwgPSBzdHJpcEJhc2VVcmwoYXBwQmFzZU5vRmlsZSwgdXJsKTtcbiAgICBpZiAoIWlzU3RyaW5nKHBhdGhVcmwpKSB7XG4gICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ2lwdGhwcmZ4JywgJ0ludmFsaWQgdXJsIFwiezB9XCIsIG1pc3NpbmcgcGF0aCBwcmVmaXggXCJ7MX1cIi4nLCB1cmwsXG4gICAgICAgICAgYXBwQmFzZU5vRmlsZSk7XG4gICAgfVxuXG4gICAgcGFyc2VBcHBVcmwocGF0aFVybCwgdGhpcyk7XG5cbiAgICBpZiAoIXRoaXMuJCRwYXRoKSB7XG4gICAgICB0aGlzLiQkcGF0aCA9ICcvJztcbiAgICB9XG5cbiAgICB0aGlzLiQkY29tcG9zZSgpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBDb21wb3NlIHVybCBhbmQgdXBkYXRlIGBhYnNVcmxgIHByb3BlcnR5XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLFxuICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnO1xuXG4gICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgdGhpcy4kJGFic1VybCA9IGFwcEJhc2VOb0ZpbGUgKyB0aGlzLiQkdXJsLnN1YnN0cigxKTsgLy8gZmlyc3QgY2hhciBpcyBhbHdheXMgJy8nXG5cbiAgICB0aGlzLiQkdXJsVXBkYXRlZEJ5TG9jYXRpb24gPSB0cnVlO1xuICB9O1xuXG4gIHRoaXMuJCRwYXJzZUxpbmtVcmwgPSBmdW5jdGlvbih1cmwsIHJlbEhyZWYpIHtcbiAgICBpZiAocmVsSHJlZiAmJiByZWxIcmVmWzBdID09PSAnIycpIHtcbiAgICAgIC8vIHNwZWNpYWwgY2FzZSBmb3IgbGlua3MgdG8gaGFzaCBmcmFnbWVudHM6XG4gICAgICAvLyBrZWVwIHRoZSBvbGQgdXJsIGFuZCBvbmx5IHJlcGxhY2UgdGhlIGhhc2ggZnJhZ21lbnRcbiAgICAgIHRoaXMuaGFzaChyZWxIcmVmLnNsaWNlKDEpKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB2YXIgYXBwVXJsLCBwcmV2QXBwVXJsO1xuICAgIHZhciByZXdyaXR0ZW5Vcmw7XG5cblxuICAgIGlmIChpc0RlZmluZWQoYXBwVXJsID0gc3RyaXBCYXNlVXJsKGFwcEJhc2UsIHVybCkpKSB7XG4gICAgICBwcmV2QXBwVXJsID0gYXBwVXJsO1xuICAgICAgaWYgKGJhc2VQcmVmaXggJiYgaXNEZWZpbmVkKGFwcFVybCA9IHN0cmlwQmFzZVVybChiYXNlUHJlZml4LCBhcHBVcmwpKSkge1xuICAgICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlTm9GaWxlICsgKHN0cmlwQmFzZVVybCgnLycsIGFwcFVybCkgfHwgYXBwVXJsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJld3JpdHRlblVybCA9IGFwcEJhc2UgKyBwcmV2QXBwVXJsO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNEZWZpbmVkKGFwcFVybCA9IHN0cmlwQmFzZVVybChhcHBCYXNlTm9GaWxlLCB1cmwpKSkge1xuICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZSArIGFwcFVybDtcbiAgICB9IGVsc2UgaWYgKGFwcEJhc2VOb0ZpbGUgPT09IHVybCArICcvJykge1xuICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZTtcbiAgICB9XG4gICAgaWYgKHJld3JpdHRlblVybCkge1xuICAgICAgdGhpcy4kJHBhcnNlKHJld3JpdHRlblVybCk7XG4gICAgfVxuICAgIHJldHVybiAhIXJld3JpdHRlblVybDtcbiAgfTtcbn1cblxuXG4vKipcbiAqIExvY2F0aW9uSGFzaGJhbmdVcmwgcmVwcmVzZW50cyBVUkxcbiAqIFRoaXMgb2JqZWN0IGlzIGV4cG9zZWQgYXMgJGxvY2F0aW9uIHNlcnZpY2Ugd2hlbiBkZXZlbG9wZXIgZG9lc24ndCBvcHQgaW50byBodG1sNSBtb2RlLlxuICogSXQgYWxzbyBzZXJ2ZXMgYXMgdGhlIGJhc2UgY2xhc3MgZm9yIGh0bWw1IG1vZGUgZmFsbGJhY2sgb24gbGVnYWN5IGJyb3dzZXJzLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2UgYXBwbGljYXRpb24gYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcHBCYXNlTm9GaWxlIGFwcGxpY2F0aW9uIGJhc2UgVVJMIHN0cmlwcGVkIG9mIGFueSBmaWxlbmFtZVxuICogQHBhcmFtIHtzdHJpbmd9IGhhc2hQcmVmaXggaGFzaGJhbmcgcHJlZml4XG4gKi9cbmZ1bmN0aW9uIExvY2F0aW9uSGFzaGJhbmdVcmwoYXBwQmFzZSwgYXBwQmFzZU5vRmlsZSwgaGFzaFByZWZpeCkge1xuXG4gIHBhcnNlQWJzb2x1dGVVcmwoYXBwQmFzZSwgdGhpcyk7XG5cblxuICAvKipcbiAgICogUGFyc2UgZ2l2ZW4gaGFzaGJhbmcgVVJMIGludG8gcHJvcGVydGllc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIEhhc2hiYW5nIFVSTFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy4kJHBhcnNlID0gZnVuY3Rpb24odXJsKSB7XG4gICAgdmFyIHdpdGhvdXRCYXNlVXJsID0gc3RyaXBCYXNlVXJsKGFwcEJhc2UsIHVybCkgfHwgc3RyaXBCYXNlVXJsKGFwcEJhc2VOb0ZpbGUsIHVybCk7XG4gICAgdmFyIHdpdGhvdXRIYXNoVXJsO1xuXG4gICAgaWYgKCFpc1VuZGVmaW5lZCh3aXRob3V0QmFzZVVybCkgJiYgd2l0aG91dEJhc2VVcmwuY2hhckF0KDApID09PSAnIycpIHtcblxuICAgICAgLy8gVGhlIHJlc3Qgb2YgdGhlIFVSTCBzdGFydHMgd2l0aCBhIGhhc2ggc28gd2UgaGF2ZVxuICAgICAgLy8gZ290IGVpdGhlciBhIGhhc2hiYW5nIHBhdGggb3IgYSBwbGFpbiBoYXNoIGZyYWdtZW50XG4gICAgICB3aXRob3V0SGFzaFVybCA9IHN0cmlwQmFzZVVybChoYXNoUHJlZml4LCB3aXRob3V0QmFzZVVybCk7XG4gICAgICBpZiAoaXNVbmRlZmluZWQod2l0aG91dEhhc2hVcmwpKSB7XG4gICAgICAgIC8vIFRoZXJlIHdhcyBubyBoYXNoYmFuZyBwcmVmaXggc28gd2UganVzdCBoYXZlIGEgaGFzaCBmcmFnbWVudFxuICAgICAgICB3aXRob3V0SGFzaFVybCA9IHdpdGhvdXRCYXNlVXJsO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZXJlIHdhcyBubyBoYXNoYmFuZyBwYXRoIG5vciBoYXNoIGZyYWdtZW50OlxuICAgICAgLy8gSWYgd2UgYXJlIGluIEhUTUw1IG1vZGUgd2UgdXNlIHdoYXQgaXMgbGVmdCBhcyB0aGUgcGF0aDtcbiAgICAgIC8vIE90aGVyd2lzZSB3ZSBpZ25vcmUgd2hhdCBpcyBsZWZ0XG4gICAgICBpZiAodGhpcy4kJGh0bWw1KSB7XG4gICAgICAgIHdpdGhvdXRIYXNoVXJsID0gd2l0aG91dEJhc2VVcmw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aXRob3V0SGFzaFVybCA9ICcnO1xuICAgICAgICBpZiAoaXNVbmRlZmluZWQod2l0aG91dEJhc2VVcmwpKSB7XG4gICAgICAgICAgYXBwQmFzZSA9IHVybDtcbiAgICAgICAgICAvKiogQHR5cGUgez99ICovICh0aGlzKS5yZXBsYWNlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJzZUFwcFVybCh3aXRob3V0SGFzaFVybCwgdGhpcyk7XG5cbiAgICB0aGlzLiQkcGF0aCA9IHJlbW92ZVdpbmRvd3NEcml2ZU5hbWUodGhpcy4kJHBhdGgsIHdpdGhvdXRIYXNoVXJsLCBhcHBCYXNlKTtcblxuICAgIHRoaXMuJCRjb21wb3NlKCk7XG5cbiAgICAvKlxuICAgICAqIEluIFdpbmRvd3MsIG9uIGFuIGFuY2hvciBub2RlIG9uIGRvY3VtZW50cyBsb2FkZWQgZnJvbVxuICAgICAqIHRoZSBmaWxlc3lzdGVtLCB0aGUgYnJvd3NlciB3aWxsIHJldHVybiBhIHBhdGhuYW1lXG4gICAgICogcHJlZml4ZWQgd2l0aCB0aGUgZHJpdmUgbmFtZSAoJy9DOi9wYXRoJykgd2hlbiBhXG4gICAgICogcGF0aG5hbWUgd2l0aG91dCBhIGRyaXZlIGlzIHNldDpcbiAgICAgKiAgKiBhLnNldEF0dHJpYnV0ZSgnaHJlZicsICcvZm9vJylcbiAgICAgKiAgICogYS5wYXRobmFtZSA9PT0gJy9DOi9mb28nIC8vdHJ1ZVxuICAgICAqXG4gICAgICogSW5zaWRlIG9mIEFuZ3VsYXIsIHdlJ3JlIGFsd2F5cyB1c2luZyBwYXRobmFtZXMgdGhhdFxuICAgICAqIGRvIG5vdCBpbmNsdWRlIGRyaXZlIG5hbWVzIGZvciByb3V0aW5nLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlbW92ZVdpbmRvd3NEcml2ZU5hbWUocGF0aCwgdXJsLCBiYXNlKSB7XG4gICAgICAvKlxuICAgICAgTWF0Y2hlcyBwYXRocyBmb3IgZmlsZSBwcm90b2NvbCBvbiB3aW5kb3dzLFxuICAgICAgc3VjaCBhcyAvQzovZm9vL2JhciwgYW5kIGNhcHR1cmVzIG9ubHkgL2Zvby9iYXIuXG4gICAgICAqL1xuICAgICAgdmFyIHdpbmRvd3NGaWxlUGF0aEV4cCA9IC9eXFwvW0EtWl06KFxcLy4qKS87XG5cbiAgICAgIHZhciBmaXJzdFBhdGhTZWdtZW50TWF0Y2g7XG5cbiAgICAgIC8vR2V0IHRoZSByZWxhdGl2ZSBwYXRoIGZyb20gdGhlIGlucHV0IFVSTC5cbiAgICAgIGlmIChzdGFydHNXaXRoKHVybCwgYmFzZSkpIHtcbiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoYmFzZSwgJycpO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgaW5wdXQgVVJMIGludGVudGlvbmFsbHkgY29udGFpbnMgYSBmaXJzdCBwYXRoIHNlZ21lbnQgdGhhdCBlbmRzIHdpdGggYSBjb2xvbi5cbiAgICAgIGlmICh3aW5kb3dzRmlsZVBhdGhFeHAuZXhlYyh1cmwpKSB7XG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgICAgfVxuXG4gICAgICBmaXJzdFBhdGhTZWdtZW50TWF0Y2ggPSB3aW5kb3dzRmlsZVBhdGhFeHAuZXhlYyhwYXRoKTtcbiAgICAgIHJldHVybiBmaXJzdFBhdGhTZWdtZW50TWF0Y2ggPyBmaXJzdFBhdGhTZWdtZW50TWF0Y2hbMV0gOiBwYXRoO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQ29tcG9zZSBoYXNoYmFuZyBVUkwgYW5kIHVwZGF0ZSBgYWJzVXJsYCBwcm9wZXJ0eVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgdGhpcy4kJGNvbXBvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2VhcmNoID0gdG9LZXlWYWx1ZSh0aGlzLiQkc2VhcmNoKSxcbiAgICAgICAgaGFzaCA9IHRoaXMuJCRoYXNoID8gJyMnICsgZW5jb2RlVXJpU2VnbWVudCh0aGlzLiQkaGFzaCkgOiAnJztcblxuICAgIHRoaXMuJCR1cmwgPSBlbmNvZGVQYXRoKHRoaXMuJCRwYXRoKSArIChzZWFyY2ggPyAnPycgKyBzZWFyY2ggOiAnJykgKyBoYXNoO1xuICAgIHRoaXMuJCRhYnNVcmwgPSBhcHBCYXNlICsgKHRoaXMuJCR1cmwgPyBoYXNoUHJlZml4ICsgdGhpcy4kJHVybCA6ICcnKTtcblxuICAgIHRoaXMuJCR1cmxVcGRhdGVkQnlMb2NhdGlvbiA9IHRydWU7XG4gIH07XG5cbiAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uKHVybCwgcmVsSHJlZikge1xuICAgIGlmIChzdHJpcEhhc2goYXBwQmFzZSkgPT09IHN0cmlwSGFzaCh1cmwpKSB7XG4gICAgICB0aGlzLiQkcGFyc2UodXJsKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG59XG5cblxuLyoqXG4gKiBMb2NhdGlvbkhhc2hiYW5nVXJsIHJlcHJlc2VudHMgVVJMXG4gKiBUaGlzIG9iamVjdCBpcyBleHBvc2VkIGFzICRsb2NhdGlvbiBzZXJ2aWNlIHdoZW4gaHRtbDUgaGlzdG9yeSBhcGkgaXMgZW5hYmxlZCBidXQgdGhlIGJyb3dzZXJcbiAqIGRvZXMgbm90IHN1cHBvcnQgaXQuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwQmFzZSBhcHBsaWNhdGlvbiBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IGFwcEJhc2VOb0ZpbGUgYXBwbGljYXRpb24gYmFzZSBVUkwgc3RyaXBwZWQgb2YgYW55IGZpbGVuYW1lXG4gKiBAcGFyYW0ge3N0cmluZ30gaGFzaFByZWZpeCBoYXNoYmFuZyBwcmVmaXhcbiAqL1xuZnVuY3Rpb24gTG9jYXRpb25IYXNoYmFuZ0luSHRtbDVVcmwoYXBwQmFzZSwgYXBwQmFzZU5vRmlsZSwgaGFzaFByZWZpeCkge1xuICB0aGlzLiQkaHRtbDUgPSB0cnVlO1xuICBMb2NhdGlvbkhhc2hiYW5nVXJsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgdGhpcy4kJHBhcnNlTGlua1VybCA9IGZ1bmN0aW9uKHVybCwgcmVsSHJlZikge1xuICAgIGlmIChyZWxIcmVmICYmIHJlbEhyZWZbMF0gPT09ICcjJykge1xuICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBsaW5rcyB0byBoYXNoIGZyYWdtZW50czpcbiAgICAgIC8vIGtlZXAgdGhlIG9sZCB1cmwgYW5kIG9ubHkgcmVwbGFjZSB0aGUgaGFzaCBmcmFnbWVudFxuICAgICAgdGhpcy5oYXNoKHJlbEhyZWYuc2xpY2UoMSkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHJld3JpdHRlblVybDtcbiAgICB2YXIgYXBwVXJsO1xuXG4gICAgaWYgKGFwcEJhc2UgPT09IHN0cmlwSGFzaCh1cmwpKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSB1cmw7XG4gICAgfSBlbHNlIGlmICgoYXBwVXJsID0gc3RyaXBCYXNlVXJsKGFwcEJhc2VOb0ZpbGUsIHVybCkpKSB7XG4gICAgICByZXdyaXR0ZW5VcmwgPSBhcHBCYXNlICsgaGFzaFByZWZpeCArIGFwcFVybDtcbiAgICB9IGVsc2UgaWYgKGFwcEJhc2VOb0ZpbGUgPT09IHVybCArICcvJykge1xuICAgICAgcmV3cml0dGVuVXJsID0gYXBwQmFzZU5vRmlsZTtcbiAgICB9XG4gICAgaWYgKHJld3JpdHRlblVybCkge1xuICAgICAgdGhpcy4kJHBhcnNlKHJld3JpdHRlblVybCk7XG4gICAgfVxuICAgIHJldHVybiAhIXJld3JpdHRlblVybDtcbiAgfTtcblxuICB0aGlzLiQkY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBzZWFyY2ggPSB0b0tleVZhbHVlKHRoaXMuJCRzZWFyY2gpLFxuICAgICAgICBoYXNoID0gdGhpcy4kJGhhc2ggPyAnIycgKyBlbmNvZGVVcmlTZWdtZW50KHRoaXMuJCRoYXNoKSA6ICcnO1xuXG4gICAgdGhpcy4kJHVybCA9IGVuY29kZVBhdGgodGhpcy4kJHBhdGgpICsgKHNlYXJjaCA/ICc/JyArIHNlYXJjaCA6ICcnKSArIGhhc2g7XG4gICAgLy8gaW5jbHVkZSBoYXNoUHJlZml4IGluICQkYWJzVXJsIHdoZW4gJCR1cmwgaXMgZW1wdHkgc28gSUU5IGRvZXMgbm90IHJlbG9hZCBwYWdlIGJlY2F1c2Ugb2YgcmVtb3ZhbCBvZiAnIydcbiAgICB0aGlzLiQkYWJzVXJsID0gYXBwQmFzZSArIGhhc2hQcmVmaXggKyB0aGlzLiQkdXJsO1xuXG4gICAgdGhpcy4kJHVybFVwZGF0ZWRCeUxvY2F0aW9uID0gdHJ1ZTtcbiAgfTtcblxufVxuXG5cbnZhciBsb2NhdGlvblByb3RvdHlwZSA9IHtcblxuICAvKipcbiAgICogRW5zdXJlIGFic29sdXRlIFVSTCBpcyBpbml0aWFsaXplZC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gICQkYWJzVXJsOicnLFxuXG4gIC8qKlxuICAgKiBBcmUgd2UgaW4gaHRtbDUgbW9kZT9cbiAgICogQHByaXZhdGVcbiAgICovXG4gICQkaHRtbDU6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBIYXMgYW55IGNoYW5nZSBiZWVuIHJlcGxhY2luZz9cbiAgICogQHByaXZhdGVcbiAgICovXG4gICQkcmVwbGFjZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI2Fic1VybFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXG4gICAqXG4gICAqIFJldHVybiBmdWxsIFVSTCByZXByZXNlbnRhdGlvbiB3aXRoIGFsbCBzZWdtZW50cyBlbmNvZGVkIGFjY29yZGluZyB0byBydWxlcyBzcGVjaWZpZWQgaW5cbiAgICogW1JGQyAzOTg2XShodHRwOi8vd3d3LmlldGYub3JnL3JmYy9yZmMzOTg2LnR4dCkuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIFVSTCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgYWJzVXJsID0gJGxvY2F0aW9uLmFic1VybCgpO1xuICAgKiAvLyA9PiBcImh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gZnVsbCBVUkxcbiAgICovXG4gIGFic1VybDogbG9jYXRpb25HZXR0ZXIoJyQkYWJzVXJsJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3VybFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm4gVVJMIChlLmcuIGAvcGF0aD9hPWIjaGFzaGApIHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlci5cbiAgICpcbiAgICogQ2hhbmdlIHBhdGgsIHNlYXJjaCBhbmQgaGFzaCwgd2hlbiBjYWxsZWQgd2l0aCBwYXJhbWV0ZXIgYW5kIHJldHVybiBgJGxvY2F0aW9uYC5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gVVJMIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciB1cmwgPSAkbG9jYXRpb24udXJsKCk7XG4gICAqIC8vID0+IFwiL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdXJsIE5ldyBVUkwgd2l0aG91dCBiYXNlIHByZWZpeCAoZS5nLiBgL3BhdGg/YT1iI2hhc2hgKVxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHVybFxuICAgKi9cbiAgdXJsOiBmdW5jdGlvbih1cmwpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQodXJsKSkge1xuICAgICAgcmV0dXJuIHRoaXMuJCR1cmw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoID0gUEFUSF9NQVRDSC5leGVjKHVybCk7XG4gICAgaWYgKG1hdGNoWzFdIHx8IHVybCA9PT0gJycpIHRoaXMucGF0aChkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMV0pKTtcbiAgICBpZiAobWF0Y2hbMl0gfHwgbWF0Y2hbMV0gfHwgdXJsID09PSAnJykgdGhpcy5zZWFyY2gobWF0Y2hbM10gfHwgJycpO1xuICAgIHRoaXMuaGFzaChtYXRjaFs1XSB8fCAnJyk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcHJvdG9jb2xcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciBvbmx5LlxuICAgKlxuICAgKiBSZXR1cm4gcHJvdG9jb2wgb2YgY3VycmVudCBVUkwuXG4gICAqXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIGdpdmVuIFVSTCBodHRwOi8vZXhhbXBsZS5jb20vIy9zb21lL3BhdGg/Zm9vPWJhciZiYXo9eG94b1xuICAgKiB2YXIgcHJvdG9jb2wgPSAkbG9jYXRpb24ucHJvdG9jb2woKTtcbiAgICogLy8gPT4gXCJodHRwXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gcHJvdG9jb2wgb2YgY3VycmVudCBVUkxcbiAgICovXG4gIHByb3RvY29sOiBsb2NhdGlvbkdldHRlcignJCRwcm90b2NvbCcpLFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2NhdGlvbiNob3N0XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgb25seS5cbiAgICpcbiAgICogUmV0dXJuIGhvc3Qgb2YgY3VycmVudCBVUkwuXG4gICAqXG4gICAqIE5vdGU6IGNvbXBhcmVkIHRvIHRoZSBub24tYW5ndWxhciB2ZXJzaW9uIGBsb2NhdGlvbi5ob3N0YCB3aGljaCByZXR1cm5zIGBob3N0bmFtZTpwb3J0YCwgdGhpcyByZXR1cm5zIHRoZSBgaG9zdG5hbWVgIHBvcnRpb24gb25seS5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gVVJMIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBob3N0ID0gJGxvY2F0aW9uLmhvc3QoKTtcbiAgICogLy8gPT4gXCJleGFtcGxlLmNvbVwiXG4gICAqXG4gICAqIC8vIGdpdmVuIFVSTCBodHRwOi8vdXNlcjpwYXNzd29yZEBleGFtcGxlLmNvbTo4MDgwLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogaG9zdCA9ICRsb2NhdGlvbi5ob3N0KCk7XG4gICAqIC8vID0+IFwiZXhhbXBsZS5jb21cIlxuICAgKiBob3N0ID0gbG9jYXRpb24uaG9zdDtcbiAgICogLy8gPT4gXCJleGFtcGxlLmNvbTo4MDgwXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gaG9zdCBvZiBjdXJyZW50IFVSTC5cbiAgICovXG4gIGhvc3Q6IGxvY2F0aW9uR2V0dGVyKCckJGhvc3QnKSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jcG9ydFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIG9ubHkuXG4gICAqXG4gICAqIFJldHVybiBwb3J0IG9mIGN1cnJlbnQgVVJMLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiBVUkwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIHBvcnQgPSAkbG9jYXRpb24ucG9ydCgpO1xuICAgKiAvLyA9PiA4MFxuICAgKiBgYGBcbiAgICpcbiAgICogQHJldHVybiB7TnVtYmVyfSBwb3J0XG4gICAqL1xuICBwb3J0OiBsb2NhdGlvbkdldHRlcignJCRwb3J0JyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3BhdGhcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoaXMgbWV0aG9kIGlzIGdldHRlciAvIHNldHRlci5cbiAgICpcbiAgICogUmV0dXJuIHBhdGggb2YgY3VycmVudCBVUkwgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBDaGFuZ2UgcGF0aCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgKlxuICAgKiBOb3RlOiBQYXRoIHNob3VsZCBhbHdheXMgYmVnaW4gd2l0aCBmb3J3YXJkIHNsYXNoICgvKSwgdGhpcyBtZXRob2Qgd2lsbCBhZGQgdGhlIGZvcndhcmQgc2xhc2hcbiAgICogaWYgaXQgaXMgbWlzc2luZy5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gVVJMIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvXG4gICAqIHZhciBwYXRoID0gJGxvY2F0aW9uLnBhdGgoKTtcbiAgICogLy8gPT4gXCIvc29tZS9wYXRoXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpPX0gcGF0aCBOZXcgcGF0aFxuICAgKiBAcmV0dXJuIHsoc3RyaW5nfG9iamVjdCl9IHBhdGggaWYgY2FsbGVkIHdpdGggbm8gcGFyYW1ldGVycywgb3IgYCRsb2NhdGlvbmAgaWYgY2FsbGVkIHdpdGggYSBwYXJhbWV0ZXJcbiAgICovXG4gIHBhdGg6IGxvY2F0aW9uR2V0dGVyU2V0dGVyKCckJHBhdGgnLCBmdW5jdGlvbihwYXRoKSB7XG4gICAgcGF0aCA9IHBhdGggIT09IG51bGwgPyBwYXRoLnRvU3RyaW5nKCkgOiAnJztcbiAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xuICB9KSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jc2VhcmNoXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiBzZWFyY2ggcGFydCAoYXMgb2JqZWN0KSBvZiBjdXJyZW50IFVSTCB3aGVuIGNhbGxlZCB3aXRob3V0IGFueSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIENoYW5nZSBzZWFyY2ggcGFydCB3aGVuIGNhbGxlZCB3aXRoIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgKlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAvLyBnaXZlbiBVUkwgaHR0cDovL2V4YW1wbGUuY29tLyMvc29tZS9wYXRoP2Zvbz1iYXImYmF6PXhveG9cbiAgICogdmFyIHNlYXJjaE9iamVjdCA9ICRsb2NhdGlvbi5zZWFyY2goKTtcbiAgICogLy8gPT4ge2ZvbzogJ2JhcicsIGJhejogJ3hveG8nfVxuICAgKlxuICAgKiAvLyBzZXQgZm9vIHRvICd5aXBlZSdcbiAgICogJGxvY2F0aW9uLnNlYXJjaCgnZm9vJywgJ3lpcGVlJyk7XG4gICAqIC8vICRsb2NhdGlvbi5zZWFyY2goKSA9PiB7Zm9vOiAneWlwZWUnLCBiYXo6ICd4b3hvJ31cbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdC48c3RyaW5nPnxPYmplY3QuPEFycmF5LjxzdHJpbmc+Pn0gc2VhcmNoIE5ldyBzZWFyY2ggcGFyYW1zIC0gc3RyaW5nIG9yXG4gICAqIGhhc2ggb2JqZWN0LlxuICAgKlxuICAgKiBXaGVuIGNhbGxlZCB3aXRoIGEgc2luZ2xlIGFyZ3VtZW50IHRoZSBtZXRob2QgYWN0cyBhcyBhIHNldHRlciwgc2V0dGluZyB0aGUgYHNlYXJjaGAgY29tcG9uZW50XG4gICAqIG9mIGAkbG9jYXRpb25gIHRvIHRoZSBzcGVjaWZpZWQgdmFsdWUuXG4gICAqXG4gICAqIElmIHRoZSBhcmd1bWVudCBpcyBhIGhhc2ggb2JqZWN0IGNvbnRhaW5pbmcgYW4gYXJyYXkgb2YgdmFsdWVzLCB0aGVzZSB2YWx1ZXMgd2lsbCBiZSBlbmNvZGVkXG4gICAqIGFzIGR1cGxpY2F0ZSBzZWFyY2ggcGFyYW1ldGVycyBpbiB0aGUgVVJMLlxuICAgKlxuICAgKiBAcGFyYW0geyhzdHJpbmd8TnVtYmVyfEFycmF5PHN0cmluZz58Ym9vbGVhbik9fSBwYXJhbVZhbHVlIElmIGBzZWFyY2hgIGlzIGEgc3RyaW5nIG9yIG51bWJlciwgdGhlbiBgcGFyYW1WYWx1ZWBcbiAgICogd2lsbCBvdmVycmlkZSBvbmx5IGEgc2luZ2xlIHNlYXJjaCBwcm9wZXJ0eS5cbiAgICpcbiAgICogSWYgYHBhcmFtVmFsdWVgIGlzIGFuIGFycmF5LCBpdCB3aWxsIG92ZXJyaWRlIHRoZSBwcm9wZXJ0eSBvZiB0aGUgYHNlYXJjaGAgY29tcG9uZW50IG9mXG4gICAqIGAkbG9jYXRpb25gIHNwZWNpZmllZCB2aWEgdGhlIGZpcnN0IGFyZ3VtZW50LlxuICAgKlxuICAgKiBJZiBgcGFyYW1WYWx1ZWAgaXMgYG51bGxgLCB0aGUgcHJvcGVydHkgc3BlY2lmaWVkIHZpYSB0aGUgZmlyc3QgYXJndW1lbnQgd2lsbCBiZSBkZWxldGVkLlxuICAgKlxuICAgKiBJZiBgcGFyYW1WYWx1ZWAgaXMgYHRydWVgLCB0aGUgcHJvcGVydHkgc3BlY2lmaWVkIHZpYSB0aGUgZmlyc3QgYXJndW1lbnQgd2lsbCBiZSBhZGRlZCB3aXRoIG5vXG4gICAqIHZhbHVlIG5vciB0cmFpbGluZyBlcXVhbCBzaWduLlxuICAgKlxuICAgKiBAcmV0dXJuIHtPYmplY3R9IElmIGNhbGxlZCB3aXRoIG5vIGFyZ3VtZW50cyByZXR1cm5zIHRoZSBwYXJzZWQgYHNlYXJjaGAgb2JqZWN0LiBJZiBjYWxsZWQgd2l0aFxuICAgKiBvbmUgb3IgbW9yZSBhcmd1bWVudHMgcmV0dXJucyBgJGxvY2F0aW9uYCBvYmplY3QgaXRzZWxmLlxuICAgKi9cbiAgc2VhcmNoOiBmdW5jdGlvbihzZWFyY2gsIHBhcmFtVmFsdWUpIHtcbiAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIHRoaXMuJCRzZWFyY2g7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGlmIChpc1N0cmluZyhzZWFyY2gpIHx8IGlzTnVtYmVyKHNlYXJjaCkpIHtcbiAgICAgICAgICBzZWFyY2ggPSBzZWFyY2gudG9TdHJpbmcoKTtcbiAgICAgICAgICB0aGlzLiQkc2VhcmNoID0gcGFyc2VLZXlWYWx1ZShzZWFyY2gpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHNlYXJjaCkpIHtcbiAgICAgICAgICBzZWFyY2ggPSBjb3B5KHNlYXJjaCwge30pO1xuICAgICAgICAgIC8vIHJlbW92ZSBvYmplY3QgdW5kZWZpbmVkIG9yIG51bGwgcHJvcGVydGllc1xuICAgICAgICAgIGZvckVhY2goc2VhcmNoLCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgZGVsZXRlIHNlYXJjaFtrZXldO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdGhpcy4kJHNlYXJjaCA9IHNlYXJjaDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ2lzcmNoYXJnJyxcbiAgICAgICAgICAgICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBvZiB0aGUgYCRsb2NhdGlvbiNzZWFyY2goKWAgY2FsbCBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuIG9iamVjdC4nKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChwYXJhbVZhbHVlKSB8fCBwYXJhbVZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgZGVsZXRlIHRoaXMuJCRzZWFyY2hbc2VhcmNoXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLiQkc2VhcmNoW3NlYXJjaF0gPSBwYXJhbVZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy4kJGNvbXBvc2UoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb24jaGFzaFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBtZXRob2QgaXMgZ2V0dGVyIC8gc2V0dGVyLlxuICAgKlxuICAgKiBSZXR1cm5zIHRoZSBoYXNoIGZyYWdtZW50IHdoZW4gY2FsbGVkIHdpdGhvdXQgYW55IHBhcmFtZXRlcnMuXG4gICAqXG4gICAqIENoYW5nZXMgdGhlIGhhc2ggZnJhZ21lbnQgd2hlbiBjYWxsZWQgd2l0aCBhIHBhcmFtZXRlciBhbmQgcmV0dXJucyBgJGxvY2F0aW9uYC5cbiAgICpcbiAgICpcbiAgICogYGBganNcbiAgICogLy8gZ2l2ZW4gVVJMIGh0dHA6Ly9leGFtcGxlLmNvbS8jL3NvbWUvcGF0aD9mb289YmFyJmJhej14b3hvI2hhc2hWYWx1ZVxuICAgKiB2YXIgaGFzaCA9ICRsb2NhdGlvbi5oYXNoKCk7XG4gICAqIC8vID0+IFwiaGFzaFZhbHVlXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpPX0gaGFzaCBOZXcgaGFzaCBmcmFnbWVudFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IGhhc2hcbiAgICovXG4gIGhhc2g6IGxvY2F0aW9uR2V0dGVyU2V0dGVyKCckJGhhc2gnLCBmdW5jdGlvbihoYXNoKSB7XG4gICAgcmV0dXJuIGhhc2ggIT09IG51bGwgPyBoYXNoLnRvU3RyaW5nKCkgOiAnJztcbiAgfSksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3JlcGxhY2VcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIElmIGNhbGxlZCwgYWxsIGNoYW5nZXMgdG8gJGxvY2F0aW9uIGR1cmluZyB0aGUgY3VycmVudCBgJGRpZ2VzdGAgd2lsbCByZXBsYWNlIHRoZSBjdXJyZW50IGhpc3RvcnlcbiAgICogcmVjb3JkLCBpbnN0ZWFkIG9mIGFkZGluZyBhIG5ldyBvbmUuXG4gICAqL1xuICByZXBsYWNlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiQkcmVwbGFjZSA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn07XG5cbmZvckVhY2goW0xvY2F0aW9uSGFzaGJhbmdJbkh0bWw1VXJsLCBMb2NhdGlvbkhhc2hiYW5nVXJsLCBMb2NhdGlvbkh0bWw1VXJsXSwgZnVuY3Rpb24oTG9jYXRpb24pIHtcbiAgTG9jYXRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShsb2NhdGlvblByb3RvdHlwZSk7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGxvY2F0aW9uI3N0YXRlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGlzIG1ldGhvZCBpcyBnZXR0ZXIgLyBzZXR0ZXIuXG4gICAqXG4gICAqIFJldHVybiB0aGUgaGlzdG9yeSBzdGF0ZSBvYmplY3Qgd2hlbiBjYWxsZWQgd2l0aG91dCBhbnkgcGFyYW1ldGVyLlxuICAgKlxuICAgKiBDaGFuZ2UgdGhlIGhpc3Rvcnkgc3RhdGUgb2JqZWN0IHdoZW4gY2FsbGVkIHdpdGggb25lIHBhcmFtZXRlciBhbmQgcmV0dXJuIGAkbG9jYXRpb25gLlxuICAgKiBUaGUgc3RhdGUgb2JqZWN0IGlzIGxhdGVyIHBhc3NlZCB0byBgcHVzaFN0YXRlYCBvciBgcmVwbGFjZVN0YXRlYC5cbiAgICpcbiAgICogTk9URTogVGhpcyBtZXRob2QgaXMgc3VwcG9ydGVkIG9ubHkgaW4gSFRNTDUgbW9kZSBhbmQgb25seSBpbiBicm93c2VycyBzdXBwb3J0aW5nXG4gICAqIHRoZSBIVE1MNSBIaXN0b3J5IEFQSSAoaS5lLiBtZXRob2RzIGBwdXNoU3RhdGVgIGFuZCBgcmVwbGFjZVN0YXRlYCkuIElmIHlvdSBuZWVkIHRvIHN1cHBvcnRcbiAgICogb2xkZXIgYnJvd3NlcnMgKGxpa2UgSUU5IG9yIEFuZHJvaWQgPCA0LjApLCBkb24ndCB1c2UgdGhpcyBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0PX0gc3RhdGUgU3RhdGUgb2JqZWN0IGZvciBwdXNoU3RhdGUgb3IgcmVwbGFjZVN0YXRlXG4gICAqIEByZXR1cm4ge29iamVjdH0gc3RhdGVcbiAgICovXG4gIExvY2F0aW9uLnByb3RvdHlwZS5zdGF0ZSA9IGZ1bmN0aW9uKHN0YXRlKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy4kJHN0YXRlO1xuICAgIH1cblxuICAgIGlmIChMb2NhdGlvbiAhPT0gTG9jYXRpb25IdG1sNVVybCB8fCAhdGhpcy4kJGh0bWw1KSB7XG4gICAgICB0aHJvdyAkbG9jYXRpb25NaW5FcnIoJ25vc3RhdGUnLCAnSGlzdG9yeSBBUEkgc3RhdGUgc3VwcG9ydCBpcyBhdmFpbGFibGUgb25seSAnICtcbiAgICAgICAgJ2luIEhUTUw1IG1vZGUgYW5kIG9ubHkgaW4gYnJvd3NlcnMgc3VwcG9ydGluZyBIVE1MNSBIaXN0b3J5IEFQSScpO1xuICAgIH1cbiAgICAvLyBUaGUgdXNlciBtaWdodCBtb2RpZnkgYHN0YXRlT2JqZWN0YCBhZnRlciBpbnZva2luZyBgJGxvY2F0aW9uLnN0YXRlKHN0YXRlT2JqZWN0KWBcbiAgICAvLyBidXQgd2UncmUgY2hhbmdpbmcgdGhlICQkc3RhdGUgcmVmZXJlbmNlIHRvICRicm93c2VyLnN0YXRlKCkgZHVyaW5nIHRoZSAkZGlnZXN0XG4gICAgLy8gc28gdGhlIG1vZGlmaWNhdGlvbiB3aW5kb3cgaXMgbmFycm93LlxuICAgIHRoaXMuJCRzdGF0ZSA9IGlzVW5kZWZpbmVkKHN0YXRlKSA/IG51bGwgOiBzdGF0ZTtcbiAgICB0aGlzLiQkdXJsVXBkYXRlZEJ5TG9jYXRpb24gPSB0cnVlO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59KTtcblxuXG5mdW5jdGlvbiBsb2NhdGlvbkdldHRlcihwcm9wZXJ0eSkge1xuICByZXR1cm4gLyoqIEB0aGlzICovIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzW3Byb3BlcnR5XTtcbiAgfTtcbn1cblxuXG5mdW5jdGlvbiBsb2NhdGlvbkdldHRlclNldHRlcihwcm9wZXJ0eSwgcHJlcHJvY2Vzcykge1xuICByZXR1cm4gLyoqIEB0aGlzICovIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHRoaXNbcHJvcGVydHldO1xuICAgIH1cblxuICAgIHRoaXNbcHJvcGVydHldID0gcHJlcHJvY2Vzcyh2YWx1ZSk7XG4gICAgdGhpcy4kJGNvbXBvc2UoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xufVxuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRsb2NhdGlvblxuICpcbiAqIEByZXF1aXJlcyAkcm9vdEVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSAkbG9jYXRpb24gc2VydmljZSBwYXJzZXMgdGhlIFVSTCBpbiB0aGUgYnJvd3NlciBhZGRyZXNzIGJhciAoYmFzZWQgb24gdGhlXG4gKiBbd2luZG93LmxvY2F0aW9uXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi93aW5kb3cubG9jYXRpb24pKSBhbmQgbWFrZXMgdGhlIFVSTFxuICogYXZhaWxhYmxlIHRvIHlvdXIgYXBwbGljYXRpb24uIENoYW5nZXMgdG8gdGhlIFVSTCBpbiB0aGUgYWRkcmVzcyBiYXIgYXJlIHJlZmxlY3RlZCBpbnRvXG4gKiAkbG9jYXRpb24gc2VydmljZSBhbmQgY2hhbmdlcyB0byAkbG9jYXRpb24gYXJlIHJlZmxlY3RlZCBpbnRvIHRoZSBicm93c2VyIGFkZHJlc3MgYmFyLlxuICpcbiAqICoqVGhlICRsb2NhdGlvbiBzZXJ2aWNlOioqXG4gKlxuICogLSBFeHBvc2VzIHRoZSBjdXJyZW50IFVSTCBpbiB0aGUgYnJvd3NlciBhZGRyZXNzIGJhciwgc28geW91IGNhblxuICogICAtIFdhdGNoIGFuZCBvYnNlcnZlIHRoZSBVUkwuXG4gKiAgIC0gQ2hhbmdlIHRoZSBVUkwuXG4gKiAtIFN5bmNocm9uaXplcyB0aGUgVVJMIHdpdGggdGhlIGJyb3dzZXIgd2hlbiB0aGUgdXNlclxuICogICAtIENoYW5nZXMgdGhlIGFkZHJlc3MgYmFyLlxuICogICAtIENsaWNrcyB0aGUgYmFjayBvciBmb3J3YXJkIGJ1dHRvbiAob3IgY2xpY2tzIGEgSGlzdG9yeSBsaW5rKS5cbiAqICAgLSBDbGlja3Mgb24gYSBsaW5rLlxuICogLSBSZXByZXNlbnRzIHRoZSBVUkwgb2JqZWN0IGFzIGEgc2V0IG9mIG1ldGhvZHMgKHByb3RvY29sLCBob3N0LCBwb3J0LCBwYXRoLCBzZWFyY2gsIGhhc2gpLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSB7QGxpbmsgZ3VpZGUvJGxvY2F0aW9uIERldmVsb3BlciBHdWlkZTogVXNpbmcgJGxvY2F0aW9ufVxuICovXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkbG9jYXRpb25Qcm92aWRlclxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFVzZSB0aGUgYCRsb2NhdGlvblByb3ZpZGVyYCB0byBjb25maWd1cmUgaG93IHRoZSBhcHBsaWNhdGlvbiBkZWVwIGxpbmtpbmcgcGF0aHMgYXJlIHN0b3JlZC5cbiAqL1xuZnVuY3Rpb24gJExvY2F0aW9uUHJvdmlkZXIoKSB7XG4gIHZhciBoYXNoUHJlZml4ID0gJyEnLFxuICAgICAgaHRtbDVNb2RlID0ge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgcmVxdWlyZUJhc2U6IHRydWUsXG4gICAgICAgIHJld3JpdGVMaW5rczogdHJ1ZVxuICAgICAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb25Qcm92aWRlciNoYXNoUHJlZml4XG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBmb3IgdGhlIHByZWZpeCBpcyBgJyEnYC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwcmVmaXggUHJlZml4IGZvciBoYXNoIHBhcnQgKGNvbnRhaW5pbmcgcGF0aCBhbmQgc2VhcmNoKVxuICAgKiBAcmV0dXJucyB7Kn0gY3VycmVudCB2YWx1ZSBpZiB1c2VkIGFzIGdldHRlciBvciBpdHNlbGYgKGNoYWluaW5nKSBpZiB1c2VkIGFzIHNldHRlclxuICAgKi9cbiAgdGhpcy5oYXNoUHJlZml4ID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgaWYgKGlzRGVmaW5lZChwcmVmaXgpKSB7XG4gICAgICBoYXNoUHJlZml4ID0gcHJlZml4O1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBoYXNoUHJlZml4O1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkbG9jYXRpb25Qcm92aWRlciNodG1sNU1vZGVcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEBwYXJhbSB7KGJvb2xlYW58T2JqZWN0KT19IG1vZGUgSWYgYm9vbGVhbiwgc2V0cyBgaHRtbDVNb2RlLmVuYWJsZWRgIHRvIHZhbHVlLlxuICAgKiAgIElmIG9iamVjdCwgc2V0cyBgZW5hYmxlZGAsIGByZXF1aXJlQmFzZWAgYW5kIGByZXdyaXRlTGlua3NgIHRvIHJlc3BlY3RpdmUgdmFsdWVzLiBTdXBwb3J0ZWRcbiAgICogICBwcm9wZXJ0aWVzOlxuICAgKiAgIC0gKiplbmFibGVkKiog4oCTIGB7Ym9vbGVhbn1gIOKAkyAoZGVmYXVsdDogZmFsc2UpIElmIHRydWUsIHdpbGwgcmVseSBvbiBgaGlzdG9yeS5wdXNoU3RhdGVgIHRvXG4gICAqICAgICBjaGFuZ2UgdXJscyB3aGVyZSBzdXBwb3J0ZWQuIFdpbGwgZmFsbCBiYWNrIHRvIGhhc2gtcHJlZml4ZWQgcGF0aHMgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3RcbiAgICogICAgIHN1cHBvcnQgYHB1c2hTdGF0ZWAuXG4gICAqICAgLSAqKnJlcXVpcmVCYXNlKiogLSBge2Jvb2xlYW59YCAtIChkZWZhdWx0OiBgdHJ1ZWApIFdoZW4gaHRtbDVNb2RlIGlzIGVuYWJsZWQsIHNwZWNpZmllc1xuICAgKiAgICAgd2hldGhlciBvciBub3QgYSA8YmFzZT4gdGFnIGlzIHJlcXVpcmVkIHRvIGJlIHByZXNlbnQuIElmIGBlbmFibGVkYCBhbmQgYHJlcXVpcmVCYXNlYCBhcmVcbiAgICogICAgIHRydWUsIGFuZCBhIGJhc2UgdGFnIGlzIG5vdCBwcmVzZW50LCBhbiBlcnJvciB3aWxsIGJlIHRocm93biB3aGVuIGAkbG9jYXRpb25gIGlzIGluamVjdGVkLlxuICAgKiAgICAgU2VlIHRoZSB7QGxpbmsgZ3VpZGUvJGxvY2F0aW9uICRsb2NhdGlvbiBndWlkZSBmb3IgbW9yZSBpbmZvcm1hdGlvbn1cbiAgICogICAtICoqcmV3cml0ZUxpbmtzKiogLSBge2Jvb2xlYW58c3RyaW5nfWAgLSAoZGVmYXVsdDogYHRydWVgKSBXaGVuIGh0bWw1TW9kZSBpcyBlbmFibGVkLFxuICAgKiAgICAgZW5hYmxlcy9kaXNhYmxlcyBVUkwgcmV3cml0aW5nIGZvciByZWxhdGl2ZSBsaW5rcy4gSWYgc2V0IHRvIGEgc3RyaW5nLCBVUkwgcmV3cml0aW5nIHdpbGxcbiAgICogICAgIG9ubHkgaGFwcGVuIG9uIGxpbmtzIHdpdGggYW4gYXR0cmlidXRlIHRoYXQgbWF0Y2hlcyB0aGUgZ2l2ZW4gc3RyaW5nLiBGb3IgZXhhbXBsZSwgaWYgc2V0XG4gICAqICAgICB0byBgJ2ludGVybmFsLWxpbmsnYCwgdGhlbiB0aGUgVVJMIHdpbGwgb25seSBiZSByZXdyaXR0ZW4gZm9yIGA8YSBpbnRlcm5hbC1saW5rPmAgbGlua3MuXG4gICAqICAgICBOb3RlIHRoYXQgW2F0dHJpYnV0ZSBuYW1lIG5vcm1hbGl6YXRpb25dKGd1aWRlL2RpcmVjdGl2ZSNub3JtYWxpemF0aW9uKSBkb2VzIG5vdCBhcHBseVxuICAgKiAgICAgaGVyZSwgc28gYCdpbnRlcm5hbExpbmsnYCB3aWxsICoqbm90KiogbWF0Y2ggYCdpbnRlcm5hbC1saW5rJ2AuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IGh0bWw1TW9kZSBvYmplY3QgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXJcbiAgICovXG4gIHRoaXMuaHRtbDVNb2RlID0gZnVuY3Rpb24obW9kZSkge1xuICAgIGlmIChpc0Jvb2xlYW4obW9kZSkpIHtcbiAgICAgIGh0bWw1TW9kZS5lbmFibGVkID0gbW9kZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QobW9kZSkpIHtcblxuICAgICAgaWYgKGlzQm9vbGVhbihtb2RlLmVuYWJsZWQpKSB7XG4gICAgICAgIGh0bWw1TW9kZS5lbmFibGVkID0gbW9kZS5lbmFibGVkO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNCb29sZWFuKG1vZGUucmVxdWlyZUJhc2UpKSB7XG4gICAgICAgIGh0bWw1TW9kZS5yZXF1aXJlQmFzZSA9IG1vZGUucmVxdWlyZUJhc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Jvb2xlYW4obW9kZS5yZXdyaXRlTGlua3MpIHx8IGlzU3RyaW5nKG1vZGUucmV3cml0ZUxpbmtzKSkge1xuICAgICAgICBodG1sNU1vZGUucmV3cml0ZUxpbmtzID0gbW9kZS5yZXdyaXRlTGlua3M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gaHRtbDVNb2RlO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIGV2ZW50XG4gICAqIEBuYW1lICRsb2NhdGlvbiMkbG9jYXRpb25DaGFuZ2VTdGFydFxuICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBCcm9hZGNhc3RlZCBiZWZvcmUgYSBVUkwgd2lsbCBjaGFuZ2UuXG4gICAqXG4gICAqIFRoaXMgY2hhbmdlIGNhbiBiZSBwcmV2ZW50ZWQgYnkgY2FsbGluZ1xuICAgKiBgcHJldmVudERlZmF1bHRgIG1ldGhvZCBvZiB0aGUgZXZlbnQuIFNlZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259IGZvciBtb3JlXG4gICAqIGRldGFpbHMgYWJvdXQgZXZlbnQgb2JqZWN0LiBVcG9uIHN1Y2Nlc3NmdWwgY2hhbmdlXG4gICAqIHtAbGluayBuZy4kbG9jYXRpb24jJGxvY2F0aW9uQ2hhbmdlU3VjY2VzcyAkbG9jYXRpb25DaGFuZ2VTdWNjZXNzfSBpcyBmaXJlZC5cbiAgICpcbiAgICogVGhlIGBuZXdTdGF0ZWAgYW5kIGBvbGRTdGF0ZWAgcGFyYW1ldGVycyBtYXkgYmUgZGVmaW5lZCBvbmx5IGluIEhUTUw1IG1vZGUgYW5kIHdoZW5cbiAgICogdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhlIEhUTUw1IEhpc3RvcnkgQVBJLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdVcmwgTmV3IFVSTFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFVybCBVUkwgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5ld1N0YXRlIE5ldyBoaXN0b3J5IHN0YXRlIG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFN0YXRlIEhpc3Rvcnkgc3RhdGUgb2JqZWN0IHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBldmVudFxuICAgKiBAbmFtZSAkbG9jYXRpb24jJGxvY2F0aW9uQ2hhbmdlU3VjY2Vzc1xuICAgKiBAZXZlbnRUeXBlIGJyb2FkY2FzdCBvbiByb290IHNjb3BlXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBCcm9hZGNhc3RlZCBhZnRlciBhIFVSTCB3YXMgY2hhbmdlZC5cbiAgICpcbiAgICogVGhlIGBuZXdTdGF0ZWAgYW5kIGBvbGRTdGF0ZWAgcGFyYW1ldGVycyBtYXkgYmUgZGVmaW5lZCBvbmx5IGluIEhUTUw1IG1vZGUgYW5kIHdoZW5cbiAgICogdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhlIEhUTUw1IEhpc3RvcnkgQVBJLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYW5ndWxhckV2ZW50IFN5bnRoZXRpYyBldmVudCBvYmplY3QuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdVcmwgTmV3IFVSTFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFVybCBVUkwgdGhhdCB3YXMgYmVmb3JlIGl0IHdhcyBjaGFuZ2VkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5ld1N0YXRlIE5ldyBoaXN0b3J5IHN0YXRlIG9iamVjdFxuICAgKiBAcGFyYW0ge3N0cmluZz19IG9sZFN0YXRlIEhpc3Rvcnkgc3RhdGUgb2JqZWN0IHRoYXQgd2FzIGJlZm9yZSBpdCB3YXMgY2hhbmdlZC5cbiAgICovXG5cbiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRzbmlmZmVyJywgJyRyb290RWxlbWVudCcsICckd2luZG93JyxcbiAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICRicm93c2VyLCAkc25pZmZlciwgJHJvb3RFbGVtZW50LCAkd2luZG93KSB7XG4gICAgdmFyICRsb2NhdGlvbixcbiAgICAgICAgTG9jYXRpb25Nb2RlLFxuICAgICAgICBiYXNlSHJlZiA9ICRicm93c2VyLmJhc2VIcmVmKCksIC8vIGlmIGJhc2VbaHJlZl0gaXMgdW5kZWZpbmVkLCBpdCBkZWZhdWx0cyB0byAnJ1xuICAgICAgICBpbml0aWFsVXJsID0gJGJyb3dzZXIudXJsKCksXG4gICAgICAgIGFwcEJhc2U7XG5cbiAgICBpZiAoaHRtbDVNb2RlLmVuYWJsZWQpIHtcbiAgICAgIGlmICghYmFzZUhyZWYgJiYgaHRtbDVNb2RlLnJlcXVpcmVCYXNlKSB7XG4gICAgICAgIHRocm93ICRsb2NhdGlvbk1pbkVycignbm9iYXNlJyxcbiAgICAgICAgICAnJGxvY2F0aW9uIGluIEhUTUw1IG1vZGUgcmVxdWlyZXMgYSA8YmFzZT4gdGFnIHRvIGJlIHByZXNlbnQhJyk7XG4gICAgICB9XG4gICAgICBhcHBCYXNlID0gc2VydmVyQmFzZShpbml0aWFsVXJsKSArIChiYXNlSHJlZiB8fCAnLycpO1xuICAgICAgTG9jYXRpb25Nb2RlID0gJHNuaWZmZXIuaGlzdG9yeSA/IExvY2F0aW9uSHRtbDVVcmwgOiBMb2NhdGlvbkhhc2hiYW5nSW5IdG1sNVVybDtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBwQmFzZSA9IHN0cmlwSGFzaChpbml0aWFsVXJsKTtcbiAgICAgIExvY2F0aW9uTW9kZSA9IExvY2F0aW9uSGFzaGJhbmdVcmw7XG4gICAgfVxuICAgIHZhciBhcHBCYXNlTm9GaWxlID0gc3RyaXBGaWxlKGFwcEJhc2UpO1xuXG4gICAgJGxvY2F0aW9uID0gbmV3IExvY2F0aW9uTW9kZShhcHBCYXNlLCBhcHBCYXNlTm9GaWxlLCAnIycgKyBoYXNoUHJlZml4KTtcbiAgICAkbG9jYXRpb24uJCRwYXJzZUxpbmtVcmwoaW5pdGlhbFVybCwgaW5pdGlhbFVybCk7XG5cbiAgICAkbG9jYXRpb24uJCRzdGF0ZSA9ICRicm93c2VyLnN0YXRlKCk7XG5cbiAgICB2YXIgSUdOT1JFX1VSSV9SRUdFWFAgPSAvXlxccyooamF2YXNjcmlwdHxtYWlsdG8pOi9pO1xuXG4gICAgZnVuY3Rpb24gc2V0QnJvd3NlclVybFdpdGhGYWxsYmFjayh1cmwsIHJlcGxhY2UsIHN0YXRlKSB7XG4gICAgICB2YXIgb2xkVXJsID0gJGxvY2F0aW9uLnVybCgpO1xuICAgICAgdmFyIG9sZFN0YXRlID0gJGxvY2F0aW9uLiQkc3RhdGU7XG4gICAgICB0cnkge1xuICAgICAgICAkYnJvd3Nlci51cmwodXJsLCByZXBsYWNlLCBzdGF0ZSk7XG5cbiAgICAgICAgLy8gTWFrZSBzdXJlICRsb2NhdGlvbi5zdGF0ZSgpIHJldHVybnMgcmVmZXJlbnRpYWxseSBpZGVudGljYWwgKG5vdCBqdXN0IGRlZXBseSBlcXVhbClcbiAgICAgICAgLy8gc3RhdGUgb2JqZWN0OyB0aGlzIG1ha2VzIHBvc3NpYmxlIHF1aWNrIGNoZWNraW5nIGlmIHRoZSBzdGF0ZSBjaGFuZ2VkIGluIHRoZSBkaWdlc3RcbiAgICAgICAgLy8gbG9vcC4gQ2hlY2tpbmcgZGVlcCBlcXVhbGl0eSB3b3VsZCBiZSB0b28gZXhwZW5zaXZlLlxuICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9ICRicm93c2VyLnN0YXRlKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIFJlc3RvcmUgb2xkIHZhbHVlcyBpZiBwdXNoU3RhdGUgZmFpbHNcbiAgICAgICAgJGxvY2F0aW9uLnVybChvbGRVcmwpO1xuICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9IG9sZFN0YXRlO1xuXG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHJvb3RFbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgcmV3cml0ZUxpbmtzID0gaHRtbDVNb2RlLnJld3JpdGVMaW5rcztcbiAgICAgIC8vIFRPRE8odm9qdGEpOiByZXdyaXRlIGxpbmsgd2hlbiBvcGVuaW5nIGluIG5ldyB0YWIvd2luZG93IChpbiBsZWdhY3kgYnJvd3NlcilcbiAgICAgIC8vIGN1cnJlbnRseSB3ZSBvcGVuIG5pY2UgdXJsIGxpbmsgYW5kIHJlZGlyZWN0IHRoZW5cblxuICAgICAgaWYgKCFyZXdyaXRlTGlua3MgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5tZXRhS2V5IHx8IGV2ZW50LnNoaWZ0S2V5IHx8IGV2ZW50LndoaWNoID09PSAyIHx8IGV2ZW50LmJ1dHRvbiA9PT0gMikgcmV0dXJuO1xuXG4gICAgICB2YXIgZWxtID0ganFMaXRlKGV2ZW50LnRhcmdldCk7XG5cbiAgICAgIC8vIHRyYXZlcnNlIHRoZSBET00gdXAgdG8gZmluZCBmaXJzdCBBIHRhZ1xuICAgICAgd2hpbGUgKG5vZGVOYW1lXyhlbG1bMF0pICE9PSAnYScpIHtcbiAgICAgICAgLy8gaWdub3JlIHJld3JpdGluZyBpZiBubyBBIHRhZyAocmVhY2hlZCByb290IGVsZW1lbnQsIG9yIG5vIHBhcmVudCAtIHJlbW92ZWQgZnJvbSBkb2N1bWVudClcbiAgICAgICAgaWYgKGVsbVswXSA9PT0gJHJvb3RFbGVtZW50WzBdIHx8ICEoZWxtID0gZWxtLnBhcmVudCgpKVswXSkgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNTdHJpbmcocmV3cml0ZUxpbmtzKSAmJiBpc1VuZGVmaW5lZChlbG0uYXR0cihyZXdyaXRlTGlua3MpKSkgcmV0dXJuO1xuXG4gICAgICB2YXIgYWJzSHJlZiA9IGVsbS5wcm9wKCdocmVmJyk7XG4gICAgICAvLyBnZXQgdGhlIGFjdHVhbCBocmVmIGF0dHJpYnV0ZSAtIHNlZVxuICAgICAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2RkMzQ3MTQ4KHY9dnMuODUpLmFzcHhcbiAgICAgIHZhciByZWxIcmVmID0gZWxtLmF0dHIoJ2hyZWYnKSB8fCBlbG0uYXR0cigneGxpbms6aHJlZicpO1xuXG4gICAgICBpZiAoaXNPYmplY3QoYWJzSHJlZikgJiYgYWJzSHJlZi50b1N0cmluZygpID09PSAnW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ10nKSB7XG4gICAgICAgIC8vIFNWR0FuaW1hdGVkU3RyaW5nLmFuaW1WYWwgc2hvdWxkIGJlIGlkZW50aWNhbCB0byBTVkdBbmltYXRlZFN0cmluZy5iYXNlVmFsLCB1bmxlc3MgZHVyaW5nXG4gICAgICAgIC8vIGFuIGFuaW1hdGlvbi5cbiAgICAgICAgYWJzSHJlZiA9IHVybFJlc29sdmUoYWJzSHJlZi5hbmltVmFsKS5ocmVmO1xuICAgICAgfVxuXG4gICAgICAvLyBJZ25vcmUgd2hlbiB1cmwgaXMgc3RhcnRlZCB3aXRoIGphdmFzY3JpcHQ6IG9yIG1haWx0bzpcbiAgICAgIGlmIChJR05PUkVfVVJJX1JFR0VYUC50ZXN0KGFic0hyZWYpKSByZXR1cm47XG5cbiAgICAgIGlmIChhYnNIcmVmICYmICFlbG0uYXR0cigndGFyZ2V0JykgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIGlmICgkbG9jYXRpb24uJCRwYXJzZUxpbmtVcmwoYWJzSHJlZiwgcmVsSHJlZikpIHtcbiAgICAgICAgICAvLyBXZSBkbyBhIHByZXZlbnREZWZhdWx0IGZvciBhbGwgdXJscyB0aGF0IGFyZSBwYXJ0IG9mIHRoZSBhbmd1bGFyIGFwcGxpY2F0aW9uLFxuICAgICAgICAgIC8vIGluIGh0bWw1bW9kZSBhbmQgYWxzbyB3aXRob3V0LCBzbyB0aGF0IHdlIGFyZSBhYmxlIHRvIGFib3J0IG5hdmlnYXRpb24gd2l0aG91dFxuICAgICAgICAgIC8vIGdldHRpbmcgZG91YmxlIGVudHJpZXMgaW4gdGhlIGxvY2F0aW9uIGhpc3RvcnkuXG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAvLyB1cGRhdGUgbG9jYXRpb24gbWFudWFsbHlcbiAgICAgICAgICBpZiAoJGxvY2F0aW9uLmFic1VybCgpICE9PSAkYnJvd3Nlci51cmwoKSkge1xuICAgICAgICAgICAgJHJvb3RTY29wZS4kYXBwbHkoKTtcbiAgICAgICAgICAgIC8vIGhhY2sgdG8gd29yayBhcm91bmQgRkY2IGJ1ZyA2ODQyMDggd2hlbiBzY2VuYXJpbyBydW5uZXIgY2xpY2tzIG9uIGxpbmtzXG4gICAgICAgICAgICAkd2luZG93LmFuZ3VsYXJbJ2ZmLTY4NDIwOC1wcmV2ZW50RGVmYXVsdCddID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuXG4gICAgLy8gcmV3cml0ZSBoYXNoYmFuZyB1cmwgPD4gaHRtbDUgdXJsXG4gICAgaWYgKHRyaW1FbXB0eUhhc2goJGxvY2F0aW9uLmFic1VybCgpKSAhPT0gdHJpbUVtcHR5SGFzaChpbml0aWFsVXJsKSkge1xuICAgICAgJGJyb3dzZXIudXJsKCRsb2NhdGlvbi5hYnNVcmwoKSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgdmFyIGluaXRpYWxpemluZyA9IHRydWU7XG5cbiAgICAvLyB1cGRhdGUgJGxvY2F0aW9uIHdoZW4gJGJyb3dzZXIgdXJsIGNoYW5nZXNcbiAgICAkYnJvd3Nlci5vblVybENoYW5nZShmdW5jdGlvbihuZXdVcmwsIG5ld1N0YXRlKSB7XG5cbiAgICAgIGlmICghc3RhcnRzV2l0aChuZXdVcmwsIGFwcEJhc2VOb0ZpbGUpKSB7XG4gICAgICAgIC8vIElmIHdlIGFyZSBuYXZpZ2F0aW5nIG91dHNpZGUgb2YgdGhlIGFwcCB0aGVuIGZvcmNlIGEgcmVsb2FkXG4gICAgICAgICR3aW5kb3cubG9jYXRpb24uaHJlZiA9IG5ld1VybDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBvbGRVcmwgPSAkbG9jYXRpb24uYWJzVXJsKCk7XG4gICAgICAgIHZhciBvbGRTdGF0ZSA9ICRsb2NhdGlvbi4kJHN0YXRlO1xuICAgICAgICB2YXIgZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgICAgbmV3VXJsID0gdHJpbUVtcHR5SGFzaChuZXdVcmwpO1xuICAgICAgICAkbG9jYXRpb24uJCRwYXJzZShuZXdVcmwpO1xuICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9IG5ld1N0YXRlO1xuXG4gICAgICAgIGRlZmF1bHRQcmV2ZW50ZWQgPSAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN0YXJ0JywgbmV3VXJsLCBvbGRVcmwsXG4gICAgICAgICAgICBuZXdTdGF0ZSwgb2xkU3RhdGUpLmRlZmF1bHRQcmV2ZW50ZWQ7XG5cbiAgICAgICAgLy8gaWYgdGhlIGxvY2F0aW9uIHdhcyBjaGFuZ2VkIGJ5IGEgYCRsb2NhdGlvbkNoYW5nZVN0YXJ0YCBoYW5kbGVyIHRoZW4gc3RvcFxuICAgICAgICAvLyBwcm9jZXNzaW5nIHRoaXMgbG9jYXRpb24gY2hhbmdlXG4gICAgICAgIGlmICgkbG9jYXRpb24uYWJzVXJsKCkgIT09IG5ld1VybCkgcmV0dXJuO1xuXG4gICAgICAgIGlmIChkZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2Uob2xkVXJsKTtcbiAgICAgICAgICAkbG9jYXRpb24uJCRzdGF0ZSA9IG9sZFN0YXRlO1xuICAgICAgICAgIHNldEJyb3dzZXJVcmxXaXRoRmFsbGJhY2sob2xkVXJsLCBmYWxzZSwgb2xkU3RhdGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluaXRpYWxpemluZyA9IGZhbHNlO1xuICAgICAgICAgIGFmdGVyTG9jYXRpb25DaGFuZ2Uob2xkVXJsLCBvbGRTdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIGJyb3dzZXJcbiAgICAkcm9vdFNjb3BlLiR3YXRjaChmdW5jdGlvbiAkbG9jYXRpb25XYXRjaCgpIHtcbiAgICAgIGlmIChpbml0aWFsaXppbmcgfHwgJGxvY2F0aW9uLiQkdXJsVXBkYXRlZEJ5TG9jYXRpb24pIHtcbiAgICAgICAgJGxvY2F0aW9uLiQkdXJsVXBkYXRlZEJ5TG9jYXRpb24gPSBmYWxzZTtcblxuICAgICAgICB2YXIgb2xkVXJsID0gdHJpbUVtcHR5SGFzaCgkYnJvd3Nlci51cmwoKSk7XG4gICAgICAgIHZhciBuZXdVcmwgPSB0cmltRW1wdHlIYXNoKCRsb2NhdGlvbi5hYnNVcmwoKSk7XG4gICAgICAgIHZhciBvbGRTdGF0ZSA9ICRicm93c2VyLnN0YXRlKCk7XG4gICAgICAgIHZhciBjdXJyZW50UmVwbGFjZSA9ICRsb2NhdGlvbi4kJHJlcGxhY2U7XG4gICAgICAgIHZhciB1cmxPclN0YXRlQ2hhbmdlZCA9IG9sZFVybCAhPT0gbmV3VXJsIHx8XG4gICAgICAgICAgKCRsb2NhdGlvbi4kJGh0bWw1ICYmICRzbmlmZmVyLmhpc3RvcnkgJiYgb2xkU3RhdGUgIT09ICRsb2NhdGlvbi4kJHN0YXRlKTtcblxuICAgICAgICBpZiAoaW5pdGlhbGl6aW5nIHx8IHVybE9yU3RhdGVDaGFuZ2VkKSB7XG4gICAgICAgICAgaW5pdGlhbGl6aW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgbmV3VXJsID0gJGxvY2F0aW9uLmFic1VybCgpO1xuICAgICAgICAgICAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN0YXJ0JywgbmV3VXJsLCBvbGRVcmwsXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUsIG9sZFN0YXRlKS5kZWZhdWx0UHJldmVudGVkO1xuXG4gICAgICAgICAgICAvLyBpZiB0aGUgbG9jYXRpb24gd2FzIGNoYW5nZWQgYnkgYSBgJGxvY2F0aW9uQ2hhbmdlU3RhcnRgIGhhbmRsZXIgdGhlbiBzdG9wXG4gICAgICAgICAgICAvLyBwcm9jZXNzaW5nIHRoaXMgbG9jYXRpb24gY2hhbmdlXG4gICAgICAgICAgICBpZiAoJGxvY2F0aW9uLmFic1VybCgpICE9PSBuZXdVcmwpIHJldHVybjtcblxuICAgICAgICAgICAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgJGxvY2F0aW9uLiQkcGFyc2Uob2xkVXJsKTtcbiAgICAgICAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUgPSBvbGRTdGF0ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICh1cmxPclN0YXRlQ2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHNldEJyb3dzZXJVcmxXaXRoRmFsbGJhY2sobmV3VXJsLCBjdXJyZW50UmVwbGFjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFN0YXRlID09PSAkbG9jYXRpb24uJCRzdGF0ZSA/IG51bGwgOiAkbG9jYXRpb24uJCRzdGF0ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwsIG9sZFN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAkbG9jYXRpb24uJCRyZXBsYWNlID0gZmFsc2U7XG5cbiAgICAgIC8vIHdlIGRvbid0IG5lZWQgdG8gcmV0dXJuIGFueXRoaW5nIGJlY2F1c2UgJGV2YWxBc3luYyB3aWxsIG1ha2UgdGhlIGRpZ2VzdCBsb29wIGRpcnR5IHdoZW5cbiAgICAgIC8vIHRoZXJlIGlzIGEgY2hhbmdlXG4gICAgfSk7XG5cbiAgICByZXR1cm4gJGxvY2F0aW9uO1xuXG4gICAgZnVuY3Rpb24gYWZ0ZXJMb2NhdGlvbkNoYW5nZShvbGRVcmwsIG9sZFN0YXRlKSB7XG4gICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCAkbG9jYXRpb24uYWJzVXJsKCksIG9sZFVybCxcbiAgICAgICAgJGxvY2F0aW9uLiQkc3RhdGUsIG9sZFN0YXRlKTtcbiAgICB9XG59XTtcbn1cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJGxvZ1xuICogQHJlcXVpcmVzICR3aW5kb3dcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNpbXBsZSBzZXJ2aWNlIGZvciBsb2dnaW5nLiBEZWZhdWx0IGltcGxlbWVudGF0aW9uIHNhZmVseSB3cml0ZXMgdGhlIG1lc3NhZ2VcbiAqIGludG8gdGhlIGJyb3dzZXIncyBjb25zb2xlIChpZiBwcmVzZW50KS5cbiAqXG4gKiBUaGUgbWFpbiBwdXJwb3NlIG9mIHRoaXMgc2VydmljZSBpcyB0byBzaW1wbGlmeSBkZWJ1Z2dpbmcgYW5kIHRyb3VibGVzaG9vdGluZy5cbiAqXG4gKiBUbyByZXZlYWwgdGhlIGxvY2F0aW9uIG9mIHRoZSBjYWxscyB0byBgJGxvZ2AgaW4gdGhlIEphdmFTY3JpcHQgY29uc29sZSxcbiAqIHlvdSBjYW4gXCJibGFja2JveFwiIHRoZSBBbmd1bGFySlMgc291cmNlIGluIHlvdXIgYnJvd3NlcjpcbiAqXG4gKiBbTW96aWxsYSBkZXNjcmlwdGlvbiBvZiBibGFja2JveGluZ10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9Ub29scy9EZWJ1Z2dlci9Ib3dfdG8vQmxhY2tfYm94X2Ffc291cmNlKS5cbiAqIFtDaHJvbWUgZGVzY3JpcHRpb24gb2YgYmxhY2tib3hpbmddKGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZGV2dG9vbHMvZG9jcy9ibGFja2JveGluZykuXG4gKlxuICogTm90ZTogTm90IGFsbCBicm93c2VycyBzdXBwb3J0IGJsYWNrYm94aW5nLlxuICpcbiAqIFRoZSBkZWZhdWx0IGlzIHRvIGxvZyBgZGVidWdgIG1lc3NhZ2VzLiBZb3UgY2FuIHVzZVxuICoge0BsaW5rIG5nLiRsb2dQcm92aWRlciBuZy4kbG9nUHJvdmlkZXIjZGVidWdFbmFibGVkfSB0byBjaGFuZ2UgdGhpcy5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwibG9nRXhhbXBsZVwiIG5hbWU9XCJsb2ctc2VydmljZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2xvZ0V4YW1wbGUnLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdMb2dDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGxvZycsIGZ1bmN0aW9uKCRzY29wZSwgJGxvZykge1xuICAgICAgICAgICAkc2NvcGUuJGxvZyA9ICRsb2c7XG4gICAgICAgICAgICRzY29wZS5tZXNzYWdlID0gJ0hlbGxvIFdvcmxkISc7XG4gICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJMb2dDb250cm9sbGVyXCI+XG4gICAgICAgICA8cD5SZWxvYWQgdGhpcyBwYWdlIHdpdGggb3BlbiBjb25zb2xlLCBlbnRlciB0ZXh0IGFuZCBoaXQgdGhlIGxvZyBidXR0b24uLi48L3A+XG4gICAgICAgICA8bGFiZWw+TWVzc2FnZTpcbiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibWVzc2FnZVwiIC8+PC9sYWJlbD5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmxvZyhtZXNzYWdlKVwiPmxvZzwvYnV0dG9uPlxuICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cIiRsb2cud2FybihtZXNzYWdlKVwiPndhcm48L2J1dHRvbj5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCIkbG9nLmluZm8obWVzc2FnZSlcIj5pbmZvPC9idXR0b24+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy5lcnJvcihtZXNzYWdlKVwiPmVycm9yPC9idXR0b24+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiJGxvZy5kZWJ1ZyhtZXNzYWdlKVwiPmRlYnVnPC9idXR0b24+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGxvZ1Byb3ZpZGVyXG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlIHRoZSBgJGxvZ1Byb3ZpZGVyYCB0byBjb25maWd1cmUgaG93IHRoZSBhcHBsaWNhdGlvbiBsb2dzIG1lc3NhZ2VzXG4gKi9cbmZ1bmN0aW9uICRMb2dQcm92aWRlcigpIHtcbiAgdmFyIGRlYnVnID0gdHJ1ZSxcbiAgICAgIHNlbGYgPSB0aGlzO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRsb2dQcm92aWRlciNkZWJ1Z0VuYWJsZWRcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGZsYWcgZW5hYmxlIG9yIGRpc2FibGUgZGVidWcgbGV2ZWwgbWVzc2FnZXNcbiAgICogQHJldHVybnMgeyp9IGN1cnJlbnQgdmFsdWUgaWYgdXNlZCBhcyBnZXR0ZXIgb3IgaXRzZWxmIChjaGFpbmluZykgaWYgdXNlZCBhcyBzZXR0ZXJcbiAgICovXG4gIHRoaXMuZGVidWdFbmFibGVkID0gZnVuY3Rpb24oZmxhZykge1xuICAgIGlmIChpc0RlZmluZWQoZmxhZykpIHtcbiAgICAgIGRlYnVnID0gZmxhZztcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGVidWc7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsIGZ1bmN0aW9uKCR3aW5kb3cpIHtcbiAgICAvLyBTdXBwb3J0OiBJRSA5LTExLCBFZGdlIDEyLTE0K1xuICAgIC8vIElFL0VkZ2UgZGlzcGxheSBlcnJvcnMgaW4gc3VjaCBhIHdheSB0aGF0IGl0IHJlcXVpcmVzIHRoZSB1c2VyIHRvIGNsaWNrIGluIDQgcGxhY2VzXG4gICAgLy8gdG8gc2VlIHRoZSBzdGFjayB0cmFjZS4gVGhlcmUgaXMgbm8gd2F5IHRvIGZlYXR1cmUtZGV0ZWN0IGl0IHNvIHRoZXJlJ3MgYSBjaGFuY2VcbiAgICAvLyBvZiB0aGUgdXNlciBhZ2VudCBzbmlmZmluZyB0byBnbyB3cm9uZyBidXQgc2luY2UgaXQncyBvbmx5IGFib3V0IGxvZ2dpbmcsIHRoaXMgc2hvdWxkbid0XG4gICAgLy8gYnJlYWsgYXBwcy4gT3RoZXIgYnJvd3NlcnMgZGlzcGxheSBlcnJvcnMgaW4gYSBzZW5zaWJsZSB3YXkgYW5kIHNvbWUgb2YgdGhlbSBtYXAgc3RhY2tcbiAgICAvLyB0cmFjZXMgYWxvbmcgc291cmNlIG1hcHMgaWYgYXZhaWxhYmxlIHNvIGl0IG1ha2VzIHNlbnNlIHRvIGxldCBicm93c2VycyBkaXNwbGF5IGl0XG4gICAgLy8gYXMgdGhleSB3YW50LlxuICAgIHZhciBmb3JtYXRTdGFja1RyYWNlID0gbXNpZSB8fCAvXFxiRWRnZVxcLy8udGVzdCgkd2luZG93Lm5hdmlnYXRvciAmJiAkd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyNsb2dcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGEgbG9nIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgbG9nOiBjb25zb2xlTG9nKCdsb2cnKSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkbG9nI2luZm9cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGFuIGluZm9ybWF0aW9uIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgaW5mbzogY29uc29sZUxvZygnaW5mbycpLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRsb2cjd2FyblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYSB3YXJuaW5nIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgd2FybjogY29uc29sZUxvZygnd2FybicpLFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRsb2cjZXJyb3JcbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFdyaXRlIGFuIGVycm9yIG1lc3NhZ2VcbiAgICAgICAqL1xuICAgICAgZXJyb3I6IGNvbnNvbGVMb2coJ2Vycm9yJyksXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJGxvZyNkZWJ1Z1xuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogV3JpdGUgYSBkZWJ1ZyBtZXNzYWdlXG4gICAgICAgKi9cbiAgICAgIGRlYnVnOiAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBmbiA9IGNvbnNvbGVMb2coJ2RlYnVnJyk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChkZWJ1Zykge1xuICAgICAgICAgICAgZm4uYXBwbHkoc2VsZiwgYXJndW1lbnRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KSgpXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdEVycm9yKGFyZykge1xuICAgICAgaWYgKGlzRXJyb3IoYXJnKSkge1xuICAgICAgICBpZiAoYXJnLnN0YWNrICYmIGZvcm1hdFN0YWNrVHJhY2UpIHtcbiAgICAgICAgICBhcmcgPSAoYXJnLm1lc3NhZ2UgJiYgYXJnLnN0YWNrLmluZGV4T2YoYXJnLm1lc3NhZ2UpID09PSAtMSlcbiAgICAgICAgICAgICAgPyAnRXJyb3I6ICcgKyBhcmcubWVzc2FnZSArICdcXG4nICsgYXJnLnN0YWNrXG4gICAgICAgICAgICAgIDogYXJnLnN0YWNrO1xuICAgICAgICB9IGVsc2UgaWYgKGFyZy5zb3VyY2VVUkwpIHtcbiAgICAgICAgICBhcmcgPSBhcmcubWVzc2FnZSArICdcXG4nICsgYXJnLnNvdXJjZVVSTCArICc6JyArIGFyZy5saW5lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnNvbGVMb2codHlwZSkge1xuICAgICAgdmFyIGNvbnNvbGUgPSAkd2luZG93LmNvbnNvbGUgfHwge30sXG4gICAgICAgICAgbG9nRm4gPSBjb25zb2xlW3R5cGVdIHx8IGNvbnNvbGUubG9nIHx8IG5vb3A7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yRWFjaChhcmd1bWVudHMsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICAgIGFyZ3MucHVzaChmb3JtYXRFcnJvcihhcmcpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFN1cHBvcnQ6IElFIDkgb25seVxuICAgICAgICAvLyBjb25zb2xlIG1ldGhvZHMgZG9uJ3QgaW5oZXJpdCBmcm9tIEZ1bmN0aW9uLnByb3RvdHlwZSBpbiBJRSA5IHNvIHdlIGNhbid0XG4gICAgICAgIC8vIGNhbGwgYGxvZ0ZuLmFwcGx5KGNvbnNvbGUsIGFyZ3MpYCBkaXJlY3RseS5cbiAgICAgICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGxvZ0ZuLCBjb25zb2xlLCBhcmdzKTtcbiAgICAgIH07XG4gICAgfVxuICB9XTtcbn1cblxuLyogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuICogICAgIEFueSBjb21taXRzIHRvIHRoaXMgZmlsZSBzaG91bGQgYmUgcmV2aWV3ZWQgd2l0aCBzZWN1cml0eSBpbiBtaW5kLiAgKlxuICogICBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBjYW4gcG90ZW50aWFsbHkgY3JlYXRlIHNlY3VyaXR5IHZ1bG5lcmFiaWxpdGllcy4gKlxuICogICAgICAgICAgQW4gYXBwcm92YWwgZnJvbSAyIENvcmUgbWVtYmVycyB3aXRoIGhpc3Rvcnkgb2YgbW9kaWZ5aW5nICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBmaWxlIGlzIHJlcXVpcmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogIERvZXMgdGhlIGNoYW5nZSBzb21laG93IGFsbG93IGZvciBhcmJpdHJhcnkgamF2YXNjcmlwdCB0byBiZSBleGVjdXRlZD8gKlxuICogICAgT3IgYWxsb3dzIGZvciBzb21lb25lIHRvIGNoYW5nZSB0aGUgcHJvdG90eXBlIG9mIGJ1aWx0LWluIG9iamVjdHM/ICAgKlxuICogICAgIE9yIGdpdmVzIHVuZGVzaXJlZCBhY2Nlc3MgdG8gdmFyaWFibGVzIGxpa2VzIGRvY3VtZW50IG9yIHdpbmRvdz8gICAgKlxuICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKi9cblxudmFyICRwYXJzZU1pbkVyciA9IG1pbkVycignJHBhcnNlJyk7XG5cbnZhciBvYmplY3RWYWx1ZU9mID0ge30uY29uc3RydWN0b3IucHJvdG90eXBlLnZhbHVlT2Y7XG5cbi8vIFNhbmRib3hpbmcgQW5ndWxhciBFeHByZXNzaW9uc1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBBbmd1bGFyIGV4cHJlc3Npb25zIGFyZSBubyBsb25nZXIgc2FuZGJveGVkLiBTbyBpdCBpcyBub3cgZXZlbiBlYXNpZXIgdG8gYWNjZXNzIGFyYml0cmFyeSBKUyBjb2RlIGJ5XG4vLyB2YXJpb3VzIG1lYW5zIHN1Y2ggYXMgb2J0YWluaW5nIGEgcmVmZXJlbmNlIHRvIG5hdGl2ZSBKUyBmdW5jdGlvbnMgbGlrZSB0aGUgRnVuY3Rpb24gY29uc3RydWN0b3IuXG4vL1xuLy8gQXMgYW4gZXhhbXBsZSwgY29uc2lkZXIgdGhlIGZvbGxvd2luZyBBbmd1bGFyIGV4cHJlc3Npb246XG4vL1xuLy8gICB7fS50b1N0cmluZy5jb25zdHJ1Y3RvcignYWxlcnQoXCJldmlsIEpTIGNvZGVcIiknKVxuLy9cbi8vIEl0IGlzIGltcG9ydGFudCB0byByZWFsaXplIHRoYXQgaWYgeW91IGNyZWF0ZSBhbiBleHByZXNzaW9uIGZyb20gYSBzdHJpbmcgdGhhdCBjb250YWlucyB1c2VyIHByb3ZpZGVkXG4vLyBjb250ZW50IHRoZW4gaXQgaXMgcG9zc2libGUgdGhhdCB5b3VyIGFwcGxpY2F0aW9uIGNvbnRhaW5zIGEgc2VjdXJpdHkgdnVsbmVyYWJpbGl0eSB0byBhbiBYU1Mgc3R5bGUgYXR0YWNrLlxuLy9cbi8vIFNlZSBodHRwczovL2RvY3MuYW5ndWxhcmpzLm9yZy9ndWlkZS9zZWN1cml0eVxuXG5cbmZ1bmN0aW9uIGdldFN0cmluZ1ZhbHVlKG5hbWUpIHtcbiAgLy8gUHJvcGVydHkgbmFtZXMgbXVzdCBiZSBzdHJpbmdzLiBUaGlzIG1lYW5zIHRoYXQgbm9uLXN0cmluZyBvYmplY3RzIGNhbm5vdCBiZSB1c2VkXG4gIC8vIGFzIGtleXMgaW4gYW4gb2JqZWN0LiBBbnkgbm9uLXN0cmluZyBvYmplY3QsIGluY2x1ZGluZyBhIG51bWJlciwgaXMgdHlwZWNhc3RlZFxuICAvLyBpbnRvIGEgc3RyaW5nIHZpYSB0aGUgdG9TdHJpbmcgbWV0aG9kLlxuICAvLyAtLSBNRE4sIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy9Qcm9wZXJ0eV9hY2Nlc3NvcnMjUHJvcGVydHlfbmFtZXNcbiAgLy9cbiAgLy8gU28sIHRvIGVuc3VyZSB0aGF0IHdlIGFyZSBjaGVja2luZyB0aGUgc2FtZSBgbmFtZWAgdGhhdCBKYXZhU2NyaXB0IHdvdWxkIHVzZSwgd2UgY2FzdCBpdFxuICAvLyB0byBhIHN0cmluZy4gSXQncyBub3QgYWx3YXlzIHBvc3NpYmxlLiBJZiBgbmFtZWAgaXMgYW4gb2JqZWN0IGFuZCBpdHMgYHRvU3RyaW5nYCBtZXRob2QgaXNcbiAgLy8gJ2Jyb2tlbicgKGRvZXNuJ3QgcmV0dXJuIGEgc3RyaW5nLCBpc24ndCBhIGZ1bmN0aW9uLCBldGMuKSwgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd246XG4gIC8vXG4gIC8vIFR5cGVFcnJvcjogQ2Fubm90IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVxuICAvL1xuICAvLyBGb3IgcGVyZm9ybWFuY2UgcmVhc29ucywgd2UgZG9uJ3QgY2F0Y2ggdGhpcyBlcnJvciBoZXJlIGFuZCBhbGxvdyBpdCB0byBwcm9wYWdhdGUgdXAgdGhlIGNhbGxcbiAgLy8gc3RhY2suIE5vdGUgdGhhdCB5b3UnbGwgZ2V0IHRoZSBzYW1lIGVycm9yIGluIEphdmFTY3JpcHQgaWYgeW91IHRyeSB0byBhY2Nlc3MgYSBwcm9wZXJ0eSB1c2luZ1xuICAvLyBzdWNoIGEgJ2Jyb2tlbicgb2JqZWN0IGFzIGEga2V5LlxuICByZXR1cm4gbmFtZSArICcnO1xufVxuXG5cbnZhciBPUEVSQVRPUlMgPSBjcmVhdGVNYXAoKTtcbmZvckVhY2goJysgLSAqIC8gJSA9PT0gIT09ID09ICE9IDwgPiA8PSA+PSAmJiB8fCAhID0gfCcuc3BsaXQoJyAnKSwgZnVuY3Rpb24ob3BlcmF0b3IpIHsgT1BFUkFUT1JTW29wZXJhdG9yXSA9IHRydWU7IH0pO1xudmFyIEVTQ0FQRSA9IHsnbic6J1xcbicsICdmJzonXFxmJywgJ3InOidcXHInLCAndCc6J1xcdCcsICd2JzonXFx2JywgJ1xcJyc6J1xcJycsICdcIic6J1wiJ307XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG52YXIgTGV4ZXIgPSBmdW5jdGlvbiBMZXhlcihvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG59O1xuXG5MZXhlci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBMZXhlcixcblxuICBsZXg6IGZ1bmN0aW9uKHRleHQpIHtcbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIHRoaXMuaW5kZXggPSAwO1xuICAgIHRoaXMudG9rZW5zID0gW107XG5cbiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgIHZhciBjaCA9IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7XG4gICAgICBpZiAoY2ggPT09ICdcIicgfHwgY2ggPT09ICdcXCcnKSB7XG4gICAgICAgIHRoaXMucmVhZFN0cmluZyhjaCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNOdW1iZXIoY2gpIHx8IGNoID09PSAnLicgJiYgdGhpcy5pc051bWJlcih0aGlzLnBlZWsoKSkpIHtcbiAgICAgICAgdGhpcy5yZWFkTnVtYmVyKCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNJZGVudGlmaWVyU3RhcnQodGhpcy5wZWVrTXVsdGljaGFyKCkpKSB7XG4gICAgICAgIHRoaXMucmVhZElkZW50KCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXMoY2gsICcoKXt9W10uLDs6PycpKSB7XG4gICAgICAgIHRoaXMudG9rZW5zLnB1c2goe2luZGV4OiB0aGlzLmluZGV4LCB0ZXh0OiBjaH0pO1xuICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNXaGl0ZXNwYWNlKGNoKSkge1xuICAgICAgICB0aGlzLmluZGV4Kys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY2gyID0gY2ggKyB0aGlzLnBlZWsoKTtcbiAgICAgICAgdmFyIGNoMyA9IGNoMiArIHRoaXMucGVlaygyKTtcbiAgICAgICAgdmFyIG9wMSA9IE9QRVJBVE9SU1tjaF07XG4gICAgICAgIHZhciBvcDIgPSBPUEVSQVRPUlNbY2gyXTtcbiAgICAgICAgdmFyIG9wMyA9IE9QRVJBVE9SU1tjaDNdO1xuICAgICAgICBpZiAob3AxIHx8IG9wMiB8fCBvcDMpIHtcbiAgICAgICAgICB2YXIgdG9rZW4gPSBvcDMgPyBjaDMgOiAob3AyID8gY2gyIDogY2gpO1xuICAgICAgICAgIHRoaXMudG9rZW5zLnB1c2goe2luZGV4OiB0aGlzLmluZGV4LCB0ZXh0OiB0b2tlbiwgb3BlcmF0b3I6IHRydWV9KTtcbiAgICAgICAgICB0aGlzLmluZGV4ICs9IHRva2VuLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnRocm93RXJyb3IoJ1VuZXhwZWN0ZWQgbmV4dCBjaGFyYWN0ZXIgJywgdGhpcy5pbmRleCwgdGhpcy5pbmRleCArIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRva2VucztcbiAgfSxcblxuICBpczogZnVuY3Rpb24oY2gsIGNoYXJzKSB7XG4gICAgcmV0dXJuIGNoYXJzLmluZGV4T2YoY2gpICE9PSAtMTtcbiAgfSxcblxuICBwZWVrOiBmdW5jdGlvbihpKSB7XG4gICAgdmFyIG51bSA9IGkgfHwgMTtcbiAgICByZXR1cm4gKHRoaXMuaW5kZXggKyBudW0gPCB0aGlzLnRleHQubGVuZ3RoKSA/IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCArIG51bSkgOiBmYWxzZTtcbiAgfSxcblxuICBpc051bWJlcjogZnVuY3Rpb24oY2gpIHtcbiAgICByZXR1cm4gKCcwJyA8PSBjaCAmJiBjaCA8PSAnOScpICYmIHR5cGVvZiBjaCA9PT0gJ3N0cmluZyc7XG4gIH0sXG5cbiAgaXNXaGl0ZXNwYWNlOiBmdW5jdGlvbihjaCkge1xuICAgIC8vIElFIHRyZWF0cyBub24tYnJlYWtpbmcgc3BhY2UgYXMgXFx1MDBBMFxuICAgIHJldHVybiAoY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xccicgfHwgY2ggPT09ICdcXHQnIHx8XG4gICAgICAgICAgICBjaCA9PT0gJ1xcbicgfHwgY2ggPT09ICdcXHYnIHx8IGNoID09PSAnXFx1MDBBMCcpO1xuICB9LFxuXG4gIGlzSWRlbnRpZmllclN0YXJ0OiBmdW5jdGlvbihjaCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuaXNJZGVudGlmaWVyU3RhcnQgP1xuICAgICAgICB0aGlzLm9wdGlvbnMuaXNJZGVudGlmaWVyU3RhcnQoY2gsIHRoaXMuY29kZVBvaW50QXQoY2gpKSA6XG4gICAgICAgIHRoaXMuaXNWYWxpZElkZW50aWZpZXJTdGFydChjaCk7XG4gIH0sXG5cbiAgaXNWYWxpZElkZW50aWZpZXJTdGFydDogZnVuY3Rpb24oY2gpIHtcbiAgICByZXR1cm4gKCdhJyA8PSBjaCAmJiBjaCA8PSAneicgfHxcbiAgICAgICAgICAgICdBJyA8PSBjaCAmJiBjaCA8PSAnWicgfHxcbiAgICAgICAgICAgICdfJyA9PT0gY2ggfHwgY2ggPT09ICckJyk7XG4gIH0sXG5cbiAgaXNJZGVudGlmaWVyQ29udGludWU6IGZ1bmN0aW9uKGNoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5pc0lkZW50aWZpZXJDb250aW51ZSA/XG4gICAgICAgIHRoaXMub3B0aW9ucy5pc0lkZW50aWZpZXJDb250aW51ZShjaCwgdGhpcy5jb2RlUG9pbnRBdChjaCkpIDpcbiAgICAgICAgdGhpcy5pc1ZhbGlkSWRlbnRpZmllckNvbnRpbnVlKGNoKTtcbiAgfSxcblxuICBpc1ZhbGlkSWRlbnRpZmllckNvbnRpbnVlOiBmdW5jdGlvbihjaCwgY3ApIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkSWRlbnRpZmllclN0YXJ0KGNoLCBjcCkgfHwgdGhpcy5pc051bWJlcihjaCk7XG4gIH0sXG5cbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uKGNoKSB7XG4gICAgaWYgKGNoLmxlbmd0aCA9PT0gMSkgcmV0dXJuIGNoLmNoYXJDb2RlQXQoMCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICByZXR1cm4gKGNoLmNoYXJDb2RlQXQoMCkgPDwgMTApICsgY2guY2hhckNvZGVBdCgxKSAtIDB4MzVGREMwMDtcbiAgfSxcblxuICBwZWVrTXVsdGljaGFyOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2ggPSB0aGlzLnRleHQuY2hhckF0KHRoaXMuaW5kZXgpO1xuICAgIHZhciBwZWVrID0gdGhpcy5wZWVrKCk7XG4gICAgaWYgKCFwZWVrKSB7XG4gICAgICByZXR1cm4gY2g7XG4gICAgfVxuICAgIHZhciBjcDEgPSBjaC5jaGFyQ29kZUF0KDApO1xuICAgIHZhciBjcDIgPSBwZWVrLmNoYXJDb2RlQXQoMCk7XG4gICAgaWYgKGNwMSA+PSAweEQ4MDAgJiYgY3AxIDw9IDB4REJGRiAmJiBjcDIgPj0gMHhEQzAwICYmIGNwMiA8PSAweERGRkYpIHtcbiAgICAgIHJldHVybiBjaCArIHBlZWs7XG4gICAgfVxuICAgIHJldHVybiBjaDtcbiAgfSxcblxuICBpc0V4cE9wZXJhdG9yOiBmdW5jdGlvbihjaCkge1xuICAgIHJldHVybiAoY2ggPT09ICctJyB8fCBjaCA9PT0gJysnIHx8IHRoaXMuaXNOdW1iZXIoY2gpKTtcbiAgfSxcblxuICB0aHJvd0Vycm9yOiBmdW5jdGlvbihlcnJvciwgc3RhcnQsIGVuZCkge1xuICAgIGVuZCA9IGVuZCB8fCB0aGlzLmluZGV4O1xuICAgIHZhciBjb2xTdHIgPSAoaXNEZWZpbmVkKHN0YXJ0KVxuICAgICAgICAgICAgPyAncyAnICsgc3RhcnQgKyAgJy0nICsgdGhpcy5pbmRleCArICcgWycgKyB0aGlzLnRleHQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpICsgJ10nXG4gICAgICAgICAgICA6ICcgJyArIGVuZCk7XG4gICAgdGhyb3cgJHBhcnNlTWluRXJyKCdsZXhlcnInLCAnTGV4ZXIgRXJyb3I6IHswfSBhdCBjb2x1bW57MX0gaW4gZXhwcmVzc2lvbiBbezJ9XS4nLFxuICAgICAgICBlcnJvciwgY29sU3RyLCB0aGlzLnRleHQpO1xuICB9LFxuXG4gIHJlYWROdW1iZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBudW1iZXIgPSAnJztcbiAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIHdoaWxlICh0aGlzLmluZGV4IDwgdGhpcy50ZXh0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNoID0gbG93ZXJjYXNlKHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCkpO1xuICAgICAgaWYgKGNoID09PSAnLicgfHwgdGhpcy5pc051bWJlcihjaCkpIHtcbiAgICAgICAgbnVtYmVyICs9IGNoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHBlZWtDaCA9IHRoaXMucGVlaygpO1xuICAgICAgICBpZiAoY2ggPT09ICdlJyAmJiB0aGlzLmlzRXhwT3BlcmF0b3IocGVla0NoKSkge1xuICAgICAgICAgIG51bWJlciArPSBjaDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzRXhwT3BlcmF0b3IoY2gpICYmXG4gICAgICAgICAgICBwZWVrQ2ggJiYgdGhpcy5pc051bWJlcihwZWVrQ2gpICYmXG4gICAgICAgICAgICBudW1iZXIuY2hhckF0KG51bWJlci5sZW5ndGggLSAxKSA9PT0gJ2UnKSB7XG4gICAgICAgICAgbnVtYmVyICs9IGNoO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNFeHBPcGVyYXRvcihjaCkgJiZcbiAgICAgICAgICAgICghcGVla0NoIHx8ICF0aGlzLmlzTnVtYmVyKHBlZWtDaCkpICYmXG4gICAgICAgICAgICBudW1iZXIuY2hhckF0KG51bWJlci5sZW5ndGggLSAxKSA9PT0gJ2UnKSB7XG4gICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdJbnZhbGlkIGV4cG9uZW50Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuaW5kZXgrKztcbiAgICB9XG4gICAgdGhpcy50b2tlbnMucHVzaCh7XG4gICAgICBpbmRleDogc3RhcnQsXG4gICAgICB0ZXh0OiBudW1iZXIsXG4gICAgICBjb25zdGFudDogdHJ1ZSxcbiAgICAgIHZhbHVlOiBOdW1iZXIobnVtYmVyKVxuICAgIH0pO1xuICB9LFxuXG4gIHJlYWRJZGVudDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5pbmRleDtcbiAgICB0aGlzLmluZGV4ICs9IHRoaXMucGVla011bHRpY2hhcigpLmxlbmd0aDtcbiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgIHZhciBjaCA9IHRoaXMucGVla011bHRpY2hhcigpO1xuICAgICAgaWYgKCF0aGlzLmlzSWRlbnRpZmllckNvbnRpbnVlKGNoKSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5kZXggKz0gY2gubGVuZ3RoO1xuICAgIH1cbiAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgIGluZGV4OiBzdGFydCxcbiAgICAgIHRleHQ6IHRoaXMudGV4dC5zbGljZShzdGFydCwgdGhpcy5pbmRleCksXG4gICAgICBpZGVudGlmaWVyOiB0cnVlXG4gICAgfSk7XG4gIH0sXG5cbiAgcmVhZFN0cmluZzogZnVuY3Rpb24ocXVvdGUpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLmluZGV4O1xuICAgIHRoaXMuaW5kZXgrKztcbiAgICB2YXIgc3RyaW5nID0gJyc7XG4gICAgdmFyIHJhd1N0cmluZyA9IHF1b3RlO1xuICAgIHZhciBlc2NhcGUgPSBmYWxzZTtcbiAgICB3aGlsZSAodGhpcy5pbmRleCA8IHRoaXMudGV4dC5sZW5ndGgpIHtcbiAgICAgIHZhciBjaCA9IHRoaXMudGV4dC5jaGFyQXQodGhpcy5pbmRleCk7XG4gICAgICByYXdTdHJpbmcgKz0gY2g7XG4gICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgIGlmIChjaCA9PT0gJ3UnKSB7XG4gICAgICAgICAgdmFyIGhleCA9IHRoaXMudGV4dC5zdWJzdHJpbmcodGhpcy5pbmRleCArIDEsIHRoaXMuaW5kZXggKyA1KTtcbiAgICAgICAgICBpZiAoIWhleC5tYXRjaCgvW1xcZGEtZl17NH0vaSkpIHtcbiAgICAgICAgICAgIHRoaXMudGhyb3dFcnJvcignSW52YWxpZCB1bmljb2RlIGVzY2FwZSBbXFxcXHUnICsgaGV4ICsgJ10nKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5pbmRleCArPSA0O1xuICAgICAgICAgIHN0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGhleCwgMTYpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcmVwID0gRVNDQVBFW2NoXTtcbiAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcgKyAocmVwIHx8IGNoKTtcbiAgICAgICAgfVxuICAgICAgICBlc2NhcGUgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoY2ggPT09ICdcXFxcJykge1xuICAgICAgICBlc2NhcGUgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChjaCA9PT0gcXVvdGUpIHtcbiAgICAgICAgdGhpcy5pbmRleCsrO1xuICAgICAgICB0aGlzLnRva2Vucy5wdXNoKHtcbiAgICAgICAgICBpbmRleDogc3RhcnQsXG4gICAgICAgICAgdGV4dDogcmF3U3RyaW5nLFxuICAgICAgICAgIGNvbnN0YW50OiB0cnVlLFxuICAgICAgICAgIHZhbHVlOiBzdHJpbmdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0cmluZyArPSBjaDtcbiAgICAgIH1cbiAgICAgIHRoaXMuaW5kZXgrKztcbiAgICB9XG4gICAgdGhpcy50aHJvd0Vycm9yKCdVbnRlcm1pbmF0ZWQgcXVvdGUnLCBzdGFydCk7XG4gIH1cbn07XG5cbnZhciBBU1QgPSBmdW5jdGlvbiBBU1QobGV4ZXIsIG9wdGlvbnMpIHtcbiAgdGhpcy5sZXhlciA9IGxleGVyO1xuICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xufTtcblxuQVNULlByb2dyYW0gPSAnUHJvZ3JhbSc7XG5BU1QuRXhwcmVzc2lvblN0YXRlbWVudCA9ICdFeHByZXNzaW9uU3RhdGVtZW50JztcbkFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbiA9ICdBc3NpZ25tZW50RXhwcmVzc2lvbic7XG5BU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uID0gJ0NvbmRpdGlvbmFsRXhwcmVzc2lvbic7XG5BU1QuTG9naWNhbEV4cHJlc3Npb24gPSAnTG9naWNhbEV4cHJlc3Npb24nO1xuQVNULkJpbmFyeUV4cHJlc3Npb24gPSAnQmluYXJ5RXhwcmVzc2lvbic7XG5BU1QuVW5hcnlFeHByZXNzaW9uID0gJ1VuYXJ5RXhwcmVzc2lvbic7XG5BU1QuQ2FsbEV4cHJlc3Npb24gPSAnQ2FsbEV4cHJlc3Npb24nO1xuQVNULk1lbWJlckV4cHJlc3Npb24gPSAnTWVtYmVyRXhwcmVzc2lvbic7XG5BU1QuSWRlbnRpZmllciA9ICdJZGVudGlmaWVyJztcbkFTVC5MaXRlcmFsID0gJ0xpdGVyYWwnO1xuQVNULkFycmF5RXhwcmVzc2lvbiA9ICdBcnJheUV4cHJlc3Npb24nO1xuQVNULlByb3BlcnR5ID0gJ1Byb3BlcnR5JztcbkFTVC5PYmplY3RFeHByZXNzaW9uID0gJ09iamVjdEV4cHJlc3Npb24nO1xuQVNULlRoaXNFeHByZXNzaW9uID0gJ1RoaXNFeHByZXNzaW9uJztcbkFTVC5Mb2NhbHNFeHByZXNzaW9uID0gJ0xvY2Fsc0V4cHJlc3Npb24nO1xuXG4vLyBJbnRlcm5hbCB1c2Ugb25seVxuQVNULk5HVmFsdWVQYXJhbWV0ZXIgPSAnTkdWYWx1ZVBhcmFtZXRlcic7XG5cbkFTVC5wcm90b3R5cGUgPSB7XG4gIGFzdDogZnVuY3Rpb24odGV4dCkge1xuICAgIHRoaXMudGV4dCA9IHRleHQ7XG4gICAgdGhpcy50b2tlbnMgPSB0aGlzLmxleGVyLmxleCh0ZXh0KTtcblxuICAgIHZhciB2YWx1ZSA9IHRoaXMucHJvZ3JhbSgpO1xuXG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdGhpcy50aHJvd0Vycm9yKCdpcyBhbiB1bmV4cGVjdGVkIHRva2VuJywgdGhpcy50b2tlbnNbMF0pO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcblxuICBwcm9ncmFtOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYm9keSA9IFtdO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAodGhpcy50b2tlbnMubGVuZ3RoID4gMCAmJiAhdGhpcy5wZWVrKCd9JywgJyknLCAnOycsICddJykpXG4gICAgICAgIGJvZHkucHVzaCh0aGlzLmV4cHJlc3Npb25TdGF0ZW1lbnQoKSk7XG4gICAgICBpZiAoIXRoaXMuZXhwZWN0KCc7JykpIHtcbiAgICAgICAgcmV0dXJuIHsgdHlwZTogQVNULlByb2dyYW0sIGJvZHk6IGJvZHl9O1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBleHByZXNzaW9uU3RhdGVtZW50OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geyB0eXBlOiBBU1QuRXhwcmVzc2lvblN0YXRlbWVudCwgZXhwcmVzc2lvbjogdGhpcy5maWx0ZXJDaGFpbigpIH07XG4gIH0sXG5cbiAgZmlsdGVyQ2hhaW46IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZWZ0ID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgd2hpbGUgKHRoaXMuZXhwZWN0KCd8JykpIHtcbiAgICAgIGxlZnQgPSB0aGlzLmZpbHRlcihsZWZ0KTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgZXhwcmVzc2lvbjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXNzaWdubWVudCgpO1xuICB9LFxuXG4gIGFzc2lnbm1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciByZXN1bHQgPSB0aGlzLnRlcm5hcnkoKTtcbiAgICBpZiAodGhpcy5leHBlY3QoJz0nKSkge1xuICAgICAgaWYgKCFpc0Fzc2lnbmFibGUocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2x2YWwnLCAnVHJ5aW5nIHRvIGFzc2lnbiBhIHZhbHVlIHRvIGEgbm9uIGwtdmFsdWUnKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0ID0geyB0eXBlOiBBU1QuQXNzaWdubWVudEV4cHJlc3Npb24sIGxlZnQ6IHJlc3VsdCwgcmlnaHQ6IHRoaXMuYXNzaWdubWVudCgpLCBvcGVyYXRvcjogJz0nfTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcblxuICB0ZXJuYXJ5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGVzdCA9IHRoaXMubG9naWNhbE9SKCk7XG4gICAgdmFyIGFsdGVybmF0ZTtcbiAgICB2YXIgY29uc2VxdWVudDtcbiAgICBpZiAodGhpcy5leHBlY3QoJz8nKSkge1xuICAgICAgYWx0ZXJuYXRlID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgICBpZiAodGhpcy5jb25zdW1lKCc6JykpIHtcbiAgICAgICAgY29uc2VxdWVudCA9IHRoaXMuZXhwcmVzc2lvbigpO1xuICAgICAgICByZXR1cm4geyB0eXBlOiBBU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uLCB0ZXN0OiB0ZXN0LCBhbHRlcm5hdGU6IGFsdGVybmF0ZSwgY29uc2VxdWVudDogY29uc2VxdWVudH07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0ZXN0O1xuICB9LFxuXG4gIGxvZ2ljYWxPUjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLmxvZ2ljYWxBTkQoKTtcbiAgICB3aGlsZSAodGhpcy5leHBlY3QoJ3x8JykpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5Mb2dpY2FsRXhwcmVzc2lvbiwgb3BlcmF0b3I6ICd8fCcsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLmxvZ2ljYWxBTkQoKSB9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBsb2dpY2FsQU5EOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMuZXF1YWxpdHkoKTtcbiAgICB3aGlsZSAodGhpcy5leHBlY3QoJyYmJykpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5Mb2dpY2FsRXhwcmVzc2lvbiwgb3BlcmF0b3I6ICcmJicsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLmVxdWFsaXR5KCl9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBlcXVhbGl0eTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLnJlbGF0aW9uYWwoKTtcbiAgICB2YXIgdG9rZW47XG4gICAgd2hpbGUgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCc9PScsJyE9JywnPT09JywnIT09JykpKSB7XG4gICAgICBsZWZ0ID0geyB0eXBlOiBBU1QuQmluYXJ5RXhwcmVzc2lvbiwgb3BlcmF0b3I6IHRva2VuLnRleHQsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLnJlbGF0aW9uYWwoKSB9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICByZWxhdGlvbmFsOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMuYWRkaXRpdmUoKTtcbiAgICB2YXIgdG9rZW47XG4gICAgd2hpbGUgKCh0b2tlbiA9IHRoaXMuZXhwZWN0KCc8JywgJz4nLCAnPD0nLCAnPj0nKSkpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5CaW5hcnlFeHByZXNzaW9uLCBvcGVyYXRvcjogdG9rZW4udGV4dCwgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMuYWRkaXRpdmUoKSB9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBhZGRpdGl2ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLm11bHRpcGxpY2F0aXZlKCk7XG4gICAgdmFyIHRva2VuO1xuICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnKycsJy0nKSkpIHtcbiAgICAgIGxlZnQgPSB7IHR5cGU6IEFTVC5CaW5hcnlFeHByZXNzaW9uLCBvcGVyYXRvcjogdG9rZW4udGV4dCwgbGVmdDogbGVmdCwgcmlnaHQ6IHRoaXMubXVsdGlwbGljYXRpdmUoKSB9O1xuICAgIH1cbiAgICByZXR1cm4gbGVmdDtcbiAgfSxcblxuICBtdWx0aXBsaWNhdGl2ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGxlZnQgPSB0aGlzLnVuYXJ5KCk7XG4gICAgdmFyIHRva2VuO1xuICAgIHdoaWxlICgodG9rZW4gPSB0aGlzLmV4cGVjdCgnKicsJy8nLCclJykpKSB7XG4gICAgICBsZWZ0ID0geyB0eXBlOiBBU1QuQmluYXJ5RXhwcmVzc2lvbiwgb3BlcmF0b3I6IHRva2VuLnRleHQsIGxlZnQ6IGxlZnQsIHJpZ2h0OiB0aGlzLnVuYXJ5KCkgfTtcbiAgICB9XG4gICAgcmV0dXJuIGxlZnQ7XG4gIH0sXG5cbiAgdW5hcnk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0b2tlbjtcbiAgICBpZiAoKHRva2VuID0gdGhpcy5leHBlY3QoJysnLCAnLScsICchJykpKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBBU1QuVW5hcnlFeHByZXNzaW9uLCBvcGVyYXRvcjogdG9rZW4udGV4dCwgcHJlZml4OiB0cnVlLCBhcmd1bWVudDogdGhpcy51bmFyeSgpIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLnByaW1hcnkoKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJpbWFyeTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHByaW1hcnk7XG4gICAgaWYgKHRoaXMuZXhwZWN0KCcoJykpIHtcbiAgICAgIHByaW1hcnkgPSB0aGlzLmZpbHRlckNoYWluKCk7XG4gICAgICB0aGlzLmNvbnN1bWUoJyknKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZXhwZWN0KCdbJykpIHtcbiAgICAgIHByaW1hcnkgPSB0aGlzLmFycmF5RGVjbGFyYXRpb24oKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZXhwZWN0KCd7JykpIHtcbiAgICAgIHByaW1hcnkgPSB0aGlzLm9iamVjdCgpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zZWxmUmVmZXJlbnRpYWwuaGFzT3duUHJvcGVydHkodGhpcy5wZWVrKCkudGV4dCkpIHtcbiAgICAgIHByaW1hcnkgPSBjb3B5KHRoaXMuc2VsZlJlZmVyZW50aWFsW3RoaXMuY29uc3VtZSgpLnRleHRdKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5saXRlcmFscy5oYXNPd25Qcm9wZXJ0eSh0aGlzLnBlZWsoKS50ZXh0KSkge1xuICAgICAgcHJpbWFyeSA9IHsgdHlwZTogQVNULkxpdGVyYWwsIHZhbHVlOiB0aGlzLm9wdGlvbnMubGl0ZXJhbHNbdGhpcy5jb25zdW1lKCkudGV4dF19O1xuICAgIH0gZWxzZSBpZiAodGhpcy5wZWVrKCkuaWRlbnRpZmllcikge1xuICAgICAgcHJpbWFyeSA9IHRoaXMuaWRlbnRpZmllcigpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5wZWVrKCkuY29uc3RhbnQpIHtcbiAgICAgIHByaW1hcnkgPSB0aGlzLmNvbnN0YW50KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGhyb3dFcnJvcignbm90IGEgcHJpbWFyeSBleHByZXNzaW9uJywgdGhpcy5wZWVrKCkpO1xuICAgIH1cblxuICAgIHZhciBuZXh0O1xuICAgIHdoaWxlICgobmV4dCA9IHRoaXMuZXhwZWN0KCcoJywgJ1snLCAnLicpKSkge1xuICAgICAgaWYgKG5leHQudGV4dCA9PT0gJygnKSB7XG4gICAgICAgIHByaW1hcnkgPSB7dHlwZTogQVNULkNhbGxFeHByZXNzaW9uLCBjYWxsZWU6IHByaW1hcnksIGFyZ3VtZW50czogdGhpcy5wYXJzZUFyZ3VtZW50cygpIH07XG4gICAgICAgIHRoaXMuY29uc3VtZSgnKScpO1xuICAgICAgfSBlbHNlIGlmIChuZXh0LnRleHQgPT09ICdbJykge1xuICAgICAgICBwcmltYXJ5ID0geyB0eXBlOiBBU1QuTWVtYmVyRXhwcmVzc2lvbiwgb2JqZWN0OiBwcmltYXJ5LCBwcm9wZXJ0eTogdGhpcy5leHByZXNzaW9uKCksIGNvbXB1dGVkOiB0cnVlIH07XG4gICAgICAgIHRoaXMuY29uc3VtZSgnXScpO1xuICAgICAgfSBlbHNlIGlmIChuZXh0LnRleHQgPT09ICcuJykge1xuICAgICAgICBwcmltYXJ5ID0geyB0eXBlOiBBU1QuTWVtYmVyRXhwcmVzc2lvbiwgb2JqZWN0OiBwcmltYXJ5LCBwcm9wZXJ0eTogdGhpcy5pZGVudGlmaWVyKCksIGNvbXB1dGVkOiBmYWxzZSB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdJTVBPU1NJQkxFJyk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBwcmltYXJ5O1xuICB9LFxuXG4gIGZpbHRlcjogZnVuY3Rpb24oYmFzZUV4cHJlc3Npb24pIHtcbiAgICB2YXIgYXJncyA9IFtiYXNlRXhwcmVzc2lvbl07XG4gICAgdmFyIHJlc3VsdCA9IHt0eXBlOiBBU1QuQ2FsbEV4cHJlc3Npb24sIGNhbGxlZTogdGhpcy5pZGVudGlmaWVyKCksIGFyZ3VtZW50czogYXJncywgZmlsdGVyOiB0cnVlfTtcblxuICAgIHdoaWxlICh0aGlzLmV4cGVjdCgnOicpKSB7XG4gICAgICBhcmdzLnB1c2godGhpcy5leHByZXNzaW9uKCkpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG5cbiAgcGFyc2VBcmd1bWVudHM6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgaWYgKHRoaXMucGVla1Rva2VuKCkudGV4dCAhPT0gJyknKSB7XG4gICAgICBkbyB7XG4gICAgICAgIGFyZ3MucHVzaCh0aGlzLmZpbHRlckNoYWluKCkpO1xuICAgICAgfSB3aGlsZSAodGhpcy5leHBlY3QoJywnKSk7XG4gICAgfVxuICAgIHJldHVybiBhcmdzO1xuICB9LFxuXG4gIGlkZW50aWZpZXI6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0b2tlbiA9IHRoaXMuY29uc3VtZSgpO1xuICAgIGlmICghdG9rZW4uaWRlbnRpZmllcikge1xuICAgICAgdGhpcy50aHJvd0Vycm9yKCdpcyBub3QgYSB2YWxpZCBpZGVudGlmaWVyJywgdG9rZW4pO1xuICAgIH1cbiAgICByZXR1cm4geyB0eXBlOiBBU1QuSWRlbnRpZmllciwgbmFtZTogdG9rZW4udGV4dCB9O1xuICB9LFxuXG4gIGNvbnN0YW50OiBmdW5jdGlvbigpIHtcbiAgICAvLyBUT0RPIGNoZWNrIHRoYXQgaXQgaXMgYSBjb25zdGFudFxuICAgIHJldHVybiB7IHR5cGU6IEFTVC5MaXRlcmFsLCB2YWx1ZTogdGhpcy5jb25zdW1lKCkudmFsdWUgfTtcbiAgfSxcblxuICBhcnJheURlY2xhcmF0aW9uOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZWxlbWVudHMgPSBbXTtcbiAgICBpZiAodGhpcy5wZWVrVG9rZW4oKS50ZXh0ICE9PSAnXScpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKHRoaXMucGVlaygnXScpKSB7XG4gICAgICAgICAgLy8gU3VwcG9ydCB0cmFpbGluZyBjb21tYXMgcGVyIEVTNS4xLlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnRzLnB1c2godGhpcy5leHByZXNzaW9uKCkpO1xuICAgICAgfSB3aGlsZSAodGhpcy5leHBlY3QoJywnKSk7XG4gICAgfVxuICAgIHRoaXMuY29uc3VtZSgnXScpO1xuXG4gICAgcmV0dXJuIHsgdHlwZTogQVNULkFycmF5RXhwcmVzc2lvbiwgZWxlbWVudHM6IGVsZW1lbnRzIH07XG4gIH0sXG5cbiAgb2JqZWN0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcHJvcGVydGllcyA9IFtdLCBwcm9wZXJ0eTtcbiAgICBpZiAodGhpcy5wZWVrVG9rZW4oKS50ZXh0ICE9PSAnfScpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKHRoaXMucGVlaygnfScpKSB7XG4gICAgICAgICAgLy8gU3VwcG9ydCB0cmFpbGluZyBjb21tYXMgcGVyIEVTNS4xLlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHByb3BlcnR5ID0ge3R5cGU6IEFTVC5Qcm9wZXJ0eSwga2luZDogJ2luaXQnfTtcbiAgICAgICAgaWYgKHRoaXMucGVlaygpLmNvbnN0YW50KSB7XG4gICAgICAgICAgcHJvcGVydHkua2V5ID0gdGhpcy5jb25zdGFudCgpO1xuICAgICAgICAgIHByb3BlcnR5LmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5jb25zdW1lKCc6Jyk7XG4gICAgICAgICAgcHJvcGVydHkudmFsdWUgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBlZWsoKS5pZGVudGlmaWVyKSB7XG4gICAgICAgICAgcHJvcGVydHkua2V5ID0gdGhpcy5pZGVudGlmaWVyKCk7XG4gICAgICAgICAgcHJvcGVydHkuY29tcHV0ZWQgPSBmYWxzZTtcbiAgICAgICAgICBpZiAodGhpcy5wZWVrKCc6JykpIHtcbiAgICAgICAgICAgIHRoaXMuY29uc3VtZSgnOicpO1xuICAgICAgICAgICAgcHJvcGVydHkudmFsdWUgPSB0aGlzLmV4cHJlc3Npb24oKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvcGVydHkudmFsdWUgPSBwcm9wZXJ0eS5rZXk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMucGVlaygnWycpKSB7XG4gICAgICAgICAgdGhpcy5jb25zdW1lKCdbJyk7XG4gICAgICAgICAgcHJvcGVydHkua2V5ID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgICAgICAgdGhpcy5jb25zdW1lKCddJyk7XG4gICAgICAgICAgcHJvcGVydHkuY29tcHV0ZWQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuY29uc3VtZSgnOicpO1xuICAgICAgICAgIHByb3BlcnR5LnZhbHVlID0gdGhpcy5leHByZXNzaW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy50aHJvd0Vycm9yKCdpbnZhbGlkIGtleScsIHRoaXMucGVlaygpKTtcbiAgICAgICAgfVxuICAgICAgICBwcm9wZXJ0aWVzLnB1c2gocHJvcGVydHkpO1xuICAgICAgfSB3aGlsZSAodGhpcy5leHBlY3QoJywnKSk7XG4gICAgfVxuICAgIHRoaXMuY29uc3VtZSgnfScpO1xuXG4gICAgcmV0dXJuIHt0eXBlOiBBU1QuT2JqZWN0RXhwcmVzc2lvbiwgcHJvcGVydGllczogcHJvcGVydGllcyB9O1xuICB9LFxuXG4gIHRocm93RXJyb3I6IGZ1bmN0aW9uKG1zZywgdG9rZW4pIHtcbiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ3N5bnRheCcsXG4gICAgICAgICdTeW50YXggRXJyb3I6IFRva2VuIFxcJ3swfVxcJyB7MX0gYXQgY29sdW1uIHsyfSBvZiB0aGUgZXhwcmVzc2lvbiBbezN9XSBzdGFydGluZyBhdCBbezR9XS4nLFxuICAgICAgICAgIHRva2VuLnRleHQsIG1zZywgKHRva2VuLmluZGV4ICsgMSksIHRoaXMudGV4dCwgdGhpcy50ZXh0LnN1YnN0cmluZyh0b2tlbi5pbmRleCkpO1xuICB9LFxuXG4gIGNvbnN1bWU6IGZ1bmN0aW9uKGUxKSB7XG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCd1ZW9lJywgJ1VuZXhwZWN0ZWQgZW5kIG9mIGV4cHJlc3Npb246IHswfScsIHRoaXMudGV4dCk7XG4gICAgfVxuXG4gICAgdmFyIHRva2VuID0gdGhpcy5leHBlY3QoZTEpO1xuICAgIGlmICghdG9rZW4pIHtcbiAgICAgIHRoaXMudGhyb3dFcnJvcignaXMgdW5leHBlY3RlZCwgZXhwZWN0aW5nIFsnICsgZTEgKyAnXScsIHRoaXMucGVlaygpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRva2VuO1xuICB9LFxuXG4gIHBlZWtUb2tlbjogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMudG9rZW5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgJHBhcnNlTWluRXJyKCd1ZW9lJywgJ1VuZXhwZWN0ZWQgZW5kIG9mIGV4cHJlc3Npb246IHswfScsIHRoaXMudGV4dCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRva2Vuc1swXTtcbiAgfSxcblxuICBwZWVrOiBmdW5jdGlvbihlMSwgZTIsIGUzLCBlNCkge1xuICAgIHJldHVybiB0aGlzLnBlZWtBaGVhZCgwLCBlMSwgZTIsIGUzLCBlNCk7XG4gIH0sXG5cbiAgcGVla0FoZWFkOiBmdW5jdGlvbihpLCBlMSwgZTIsIGUzLCBlNCkge1xuICAgIGlmICh0aGlzLnRva2Vucy5sZW5ndGggPiBpKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0aGlzLnRva2Vuc1tpXTtcbiAgICAgIHZhciB0ID0gdG9rZW4udGV4dDtcbiAgICAgIGlmICh0ID09PSBlMSB8fCB0ID09PSBlMiB8fCB0ID09PSBlMyB8fCB0ID09PSBlNCB8fFxuICAgICAgICAgICghZTEgJiYgIWUyICYmICFlMyAmJiAhZTQpKSB7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIGV4cGVjdDogZnVuY3Rpb24oZTEsIGUyLCBlMywgZTQpIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLnBlZWsoZTEsIGUyLCBlMywgZTQpO1xuICAgIGlmICh0b2tlbikge1xuICAgICAgdGhpcy50b2tlbnMuc2hpZnQoKTtcbiAgICAgIHJldHVybiB0b2tlbjtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIHNlbGZSZWZlcmVudGlhbDoge1xuICAgICd0aGlzJzoge3R5cGU6IEFTVC5UaGlzRXhwcmVzc2lvbiB9LFxuICAgICckbG9jYWxzJzoge3R5cGU6IEFTVC5Mb2NhbHNFeHByZXNzaW9uIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gaWZEZWZpbmVkKHYsIGQpIHtcbiAgcmV0dXJuIHR5cGVvZiB2ICE9PSAndW5kZWZpbmVkJyA/IHYgOiBkO1xufVxuXG5mdW5jdGlvbiBwbHVzRm4obCwgcikge1xuICBpZiAodHlwZW9mIGwgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gcjtcbiAgaWYgKHR5cGVvZiByID09PSAndW5kZWZpbmVkJykgcmV0dXJuIGw7XG4gIHJldHVybiBsICsgcjtcbn1cblxuZnVuY3Rpb24gaXNTdGF0ZWxlc3MoJGZpbHRlciwgZmlsdGVyTmFtZSkge1xuICB2YXIgZm4gPSAkZmlsdGVyKGZpbHRlck5hbWUpO1xuICByZXR1cm4gIWZuLiRzdGF0ZWZ1bDtcbn1cblxudmFyIFBVUklUWV9BQlNPTFVURSA9IDE7XG52YXIgUFVSSVRZX1JFTEFUSVZFID0gMjtcblxuLy8gRGV0ZWN0IG5vZGVzIHdoaWNoIGNvdWxkIGRlcGVuZCBvbiBub24tc2hhbGxvdyBzdGF0ZSBvZiBvYmplY3RzXG5mdW5jdGlvbiBpc1B1cmUobm9kZSwgcGFyZW50SXNQdXJlKSB7XG4gIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgLy8gQ29tcHV0ZWQgbWVtYmVycyBtaWdodCBpbnZva2UgYSBzdGF0ZWZ1bCB0b1N0cmluZygpXG4gICAgY2FzZSBBU1QuTWVtYmVyRXhwcmVzc2lvbjpcbiAgICAgIGlmIChub2RlLmNvbXB1dGVkKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuXG4gICAgLy8gVW5hcnkgYWx3YXlzIGNvbnZlcnQgdG8gcHJpbWF0aXZlXG4gICAgY2FzZSBBU1QuVW5hcnlFeHByZXNzaW9uOlxuICAgICAgcmV0dXJuIFBVUklUWV9BQlNPTFVURTtcblxuICAgIC8vIFRoZSBiaW5hcnkgKyBvcGVyYXRvciBjYW4gaW52b2tlIGEgc3RhdGVmdWwgdG9TdHJpbmcoKS5cbiAgICBjYXNlIEFTVC5CaW5hcnlFeHByZXNzaW9uOlxuICAgICAgcmV0dXJuIG5vZGUub3BlcmF0b3IgIT09ICcrJyA/IFBVUklUWV9BQlNPTFVURSA6IGZhbHNlO1xuXG4gICAgLy8gRnVuY3Rpb25zIC8gZmlsdGVycyBwcm9iYWJseSByZWFkIHN0YXRlIGZyb20gd2l0aGluIG9iamVjdHNcbiAgICBjYXNlIEFTVC5DYWxsRXhwcmVzc2lvbjpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiAodW5kZWZpbmVkID09PSBwYXJlbnRJc1B1cmUpID8gUFVSSVRZX1JFTEFUSVZFIDogcGFyZW50SXNQdXJlO1xufVxuXG5mdW5jdGlvbiBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdCwgJGZpbHRlciwgcGFyZW50SXNQdXJlKSB7XG4gIHZhciBhbGxDb25zdGFudHM7XG4gIHZhciBhcmdzVG9XYXRjaDtcbiAgdmFyIGlzU3RhdGVsZXNzRmlsdGVyO1xuXG4gIHZhciBhc3RJc1B1cmUgPSBhc3QuaXNQdXJlID0gaXNQdXJlKGFzdCwgcGFyZW50SXNQdXJlKTtcblxuICBzd2l0Y2ggKGFzdC50eXBlKSB7XG4gIGNhc2UgQVNULlByb2dyYW06XG4gICAgYWxsQ29uc3RhbnRzID0gdHJ1ZTtcbiAgICBmb3JFYWNoKGFzdC5ib2R5LCBmdW5jdGlvbihleHByKSB7XG4gICAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGV4cHIuZXhwcmVzc2lvbiwgJGZpbHRlciwgYXN0SXNQdXJlKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmV4cHJlc3Npb24uY29uc3RhbnQ7XG4gICAgfSk7XG4gICAgYXN0LmNvbnN0YW50ID0gYWxsQ29uc3RhbnRzO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5MaXRlcmFsOlxuICAgIGFzdC5jb25zdGFudCA9IHRydWU7XG4gICAgYXN0LnRvV2F0Y2ggPSBbXTtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuVW5hcnlFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmFyZ3VtZW50LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgIGFzdC5jb25zdGFudCA9IGFzdC5hcmd1bWVudC5jb25zdGFudDtcbiAgICBhc3QudG9XYXRjaCA9IGFzdC5hcmd1bWVudC50b1dhdGNoO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5CaW5hcnlFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmxlZnQsICRmaWx0ZXIsIGFzdElzUHVyZSk7XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QucmlnaHQsICRmaWx0ZXIsIGFzdElzUHVyZSk7XG4gICAgYXN0LmNvbnN0YW50ID0gYXN0LmxlZnQuY29uc3RhbnQgJiYgYXN0LnJpZ2h0LmNvbnN0YW50O1xuICAgIGFzdC50b1dhdGNoID0gYXN0LmxlZnQudG9XYXRjaC5jb25jYXQoYXN0LnJpZ2h0LnRvV2F0Y2gpO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5Mb2dpY2FsRXhwcmVzc2lvbjpcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5sZWZ0LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnJpZ2h0LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgIGFzdC5jb25zdGFudCA9IGFzdC5sZWZ0LmNvbnN0YW50ICYmIGFzdC5yaWdodC5jb25zdGFudDtcbiAgICBhc3QudG9XYXRjaCA9IGFzdC5jb25zdGFudCA/IFtdIDogW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkNvbmRpdGlvbmFsRXhwcmVzc2lvbjpcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC50ZXN0LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmFsdGVybmF0ZSwgJGZpbHRlciwgYXN0SXNQdXJlKTtcbiAgICBmaW5kQ29uc3RhbnRBbmRXYXRjaEV4cHJlc3Npb25zKGFzdC5jb25zZXF1ZW50LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgIGFzdC5jb25zdGFudCA9IGFzdC50ZXN0LmNvbnN0YW50ICYmIGFzdC5hbHRlcm5hdGUuY29uc3RhbnQgJiYgYXN0LmNvbnNlcXVlbnQuY29uc3RhbnQ7XG4gICAgYXN0LnRvV2F0Y2ggPSBhc3QuY29uc3RhbnQgPyBbXSA6IFthc3RdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5JZGVudGlmaWVyOlxuICAgIGFzdC5jb25zdGFudCA9IGZhbHNlO1xuICAgIGFzdC50b1dhdGNoID0gW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULk1lbWJlckV4cHJlc3Npb246XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3Qub2JqZWN0LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgIGlmIChhc3QuY29tcHV0ZWQpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LnByb3BlcnR5LCAkZmlsdGVyLCBhc3RJc1B1cmUpO1xuICAgIH1cbiAgICBhc3QuY29uc3RhbnQgPSBhc3Qub2JqZWN0LmNvbnN0YW50ICYmICghYXN0LmNvbXB1dGVkIHx8IGFzdC5wcm9wZXJ0eS5jb25zdGFudCk7XG4gICAgYXN0LnRvV2F0Y2ggPSBhc3QuY29uc3RhbnQgPyBbXSA6IFthc3RdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5DYWxsRXhwcmVzc2lvbjpcbiAgICBpc1N0YXRlbGVzc0ZpbHRlciA9IGFzdC5maWx0ZXIgPyBpc1N0YXRlbGVzcygkZmlsdGVyLCBhc3QuY2FsbGVlLm5hbWUpIDogZmFsc2U7XG4gICAgYWxsQ29uc3RhbnRzID0gaXNTdGF0ZWxlc3NGaWx0ZXI7XG4gICAgYXJnc1RvV2F0Y2ggPSBbXTtcbiAgICBmb3JFYWNoKGFzdC5hcmd1bWVudHMsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoZXhwciwgJGZpbHRlciwgYXN0SXNQdXJlKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmNvbnN0YW50O1xuICAgICAgYXJnc1RvV2F0Y2gucHVzaC5hcHBseShhcmdzVG9XYXRjaCwgZXhwci50b1dhdGNoKTtcbiAgICB9KTtcbiAgICBhc3QuY29uc3RhbnQgPSBhbGxDb25zdGFudHM7XG4gICAgYXN0LnRvV2F0Y2ggPSBpc1N0YXRlbGVzc0ZpbHRlciA/IGFyZ3NUb1dhdGNoIDogW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uOlxuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LmxlZnQsICRmaWx0ZXIsIGFzdElzUHVyZSk7XG4gICAgZmluZENvbnN0YW50QW5kV2F0Y2hFeHByZXNzaW9ucyhhc3QucmlnaHQsICRmaWx0ZXIsIGFzdElzUHVyZSk7XG4gICAgYXN0LmNvbnN0YW50ID0gYXN0LmxlZnQuY29uc3RhbnQgJiYgYXN0LnJpZ2h0LmNvbnN0YW50O1xuICAgIGFzdC50b1dhdGNoID0gW2FzdF07XG4gICAgYnJlYWs7XG4gIGNhc2UgQVNULkFycmF5RXhwcmVzc2lvbjpcbiAgICBhbGxDb25zdGFudHMgPSB0cnVlO1xuICAgIGFyZ3NUb1dhdGNoID0gW107XG4gICAgZm9yRWFjaChhc3QuZWxlbWVudHMsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoZXhwciwgJGZpbHRlciwgYXN0SXNQdXJlKTtcbiAgICAgIGFsbENvbnN0YW50cyA9IGFsbENvbnN0YW50cyAmJiBleHByLmNvbnN0YW50O1xuICAgICAgYXJnc1RvV2F0Y2gucHVzaC5hcHBseShhcmdzVG9XYXRjaCwgZXhwci50b1dhdGNoKTtcbiAgICB9KTtcbiAgICBhc3QuY29uc3RhbnQgPSBhbGxDb25zdGFudHM7XG4gICAgYXN0LnRvV2F0Y2ggPSBhcmdzVG9XYXRjaDtcbiAgICBicmVhaztcbiAgY2FzZSBBU1QuT2JqZWN0RXhwcmVzc2lvbjpcbiAgICBhbGxDb25zdGFudHMgPSB0cnVlO1xuICAgIGFyZ3NUb1dhdGNoID0gW107XG4gICAgZm9yRWFjaChhc3QucHJvcGVydGllcywgZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMocHJvcGVydHkudmFsdWUsICRmaWx0ZXIsIGFzdElzUHVyZSk7XG4gICAgICBhbGxDb25zdGFudHMgPSBhbGxDb25zdGFudHMgJiYgcHJvcGVydHkudmFsdWUuY29uc3RhbnQ7XG4gICAgICBhcmdzVG9XYXRjaC5wdXNoLmFwcGx5KGFyZ3NUb1dhdGNoLCBwcm9wZXJ0eS52YWx1ZS50b1dhdGNoKTtcbiAgICAgIGlmIChwcm9wZXJ0eS5jb21wdXRlZCkge1xuICAgICAgICAvL2B7W2tleV06IHZhbHVlfWAgaW1wbGljaXRseSBkb2VzIGBrZXkudG9TdHJpbmcoKWAgd2hpY2ggbWF5IGJlIG5vbi1wdXJlXG4gICAgICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMocHJvcGVydHkua2V5LCAkZmlsdGVyLCAvKnBhcmVudElzUHVyZT0qL2ZhbHNlKTtcbiAgICAgICAgYWxsQ29uc3RhbnRzID0gYWxsQ29uc3RhbnRzICYmIHByb3BlcnR5LmtleS5jb25zdGFudDtcbiAgICAgICAgYXJnc1RvV2F0Y2gucHVzaC5hcHBseShhcmdzVG9XYXRjaCwgcHJvcGVydHkua2V5LnRvV2F0Y2gpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGFzdC5jb25zdGFudCA9IGFsbENvbnN0YW50cztcbiAgICBhc3QudG9XYXRjaCA9IGFyZ3NUb1dhdGNoO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5UaGlzRXhwcmVzc2lvbjpcbiAgICBhc3QuY29uc3RhbnQgPSBmYWxzZTtcbiAgICBhc3QudG9XYXRjaCA9IFtdO1xuICAgIGJyZWFrO1xuICBjYXNlIEFTVC5Mb2NhbHNFeHByZXNzaW9uOlxuICAgIGFzdC5jb25zdGFudCA9IGZhbHNlO1xuICAgIGFzdC50b1dhdGNoID0gW107XG4gICAgYnJlYWs7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0SW5wdXRzKGJvZHkpIHtcbiAgaWYgKGJvZHkubGVuZ3RoICE9PSAxKSByZXR1cm47XG4gIHZhciBsYXN0RXhwcmVzc2lvbiA9IGJvZHlbMF0uZXhwcmVzc2lvbjtcbiAgdmFyIGNhbmRpZGF0ZSA9IGxhc3RFeHByZXNzaW9uLnRvV2F0Y2g7XG4gIGlmIChjYW5kaWRhdGUubGVuZ3RoICE9PSAxKSByZXR1cm4gY2FuZGlkYXRlO1xuICByZXR1cm4gY2FuZGlkYXRlWzBdICE9PSBsYXN0RXhwcmVzc2lvbiA/IGNhbmRpZGF0ZSA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaXNBc3NpZ25hYmxlKGFzdCkge1xuICByZXR1cm4gYXN0LnR5cGUgPT09IEFTVC5JZGVudGlmaWVyIHx8IGFzdC50eXBlID09PSBBU1QuTWVtYmVyRXhwcmVzc2lvbjtcbn1cblxuZnVuY3Rpb24gYXNzaWduYWJsZUFTVChhc3QpIHtcbiAgaWYgKGFzdC5ib2R5Lmxlbmd0aCA9PT0gMSAmJiBpc0Fzc2lnbmFibGUoYXN0LmJvZHlbMF0uZXhwcmVzc2lvbikpIHtcbiAgICByZXR1cm4ge3R5cGU6IEFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbiwgbGVmdDogYXN0LmJvZHlbMF0uZXhwcmVzc2lvbiwgcmlnaHQ6IHt0eXBlOiBBU1QuTkdWYWx1ZVBhcmFtZXRlcn0sIG9wZXJhdG9yOiAnPSd9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzTGl0ZXJhbChhc3QpIHtcbiAgcmV0dXJuIGFzdC5ib2R5Lmxlbmd0aCA9PT0gMCB8fFxuICAgICAgYXN0LmJvZHkubGVuZ3RoID09PSAxICYmIChcbiAgICAgIGFzdC5ib2R5WzBdLmV4cHJlc3Npb24udHlwZSA9PT0gQVNULkxpdGVyYWwgfHxcbiAgICAgIGFzdC5ib2R5WzBdLmV4cHJlc3Npb24udHlwZSA9PT0gQVNULkFycmF5RXhwcmVzc2lvbiB8fFxuICAgICAgYXN0LmJvZHlbMF0uZXhwcmVzc2lvbi50eXBlID09PSBBU1QuT2JqZWN0RXhwcmVzc2lvbik7XG59XG5cbmZ1bmN0aW9uIGlzQ29uc3RhbnQoYXN0KSB7XG4gIHJldHVybiBhc3QuY29uc3RhbnQ7XG59XG5cbmZ1bmN0aW9uIEFTVENvbXBpbGVyKCRmaWx0ZXIpIHtcbiAgdGhpcy4kZmlsdGVyID0gJGZpbHRlcjtcbn1cblxuQVNUQ29tcGlsZXIucHJvdG90eXBlID0ge1xuICBjb21waWxlOiBmdW5jdGlvbihhc3QpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG5leHRJZDogMCxcbiAgICAgIGZpbHRlcnM6IHt9LFxuICAgICAgZm46IHt2YXJzOiBbXSwgYm9keTogW10sIG93bjoge319LFxuICAgICAgYXNzaWduOiB7dmFyczogW10sIGJvZHk6IFtdLCBvd246IHt9fSxcbiAgICAgIGlucHV0czogW11cbiAgICB9O1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LCBzZWxmLiRmaWx0ZXIpO1xuICAgIHZhciBleHRyYSA9ICcnO1xuICAgIHZhciBhc3NpZ25hYmxlO1xuICAgIHRoaXMuc3RhZ2UgPSAnYXNzaWduJztcbiAgICBpZiAoKGFzc2lnbmFibGUgPSBhc3NpZ25hYmxlQVNUKGFzdCkpKSB7XG4gICAgICB0aGlzLnN0YXRlLmNvbXB1dGluZyA9ICdhc3NpZ24nO1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMubmV4dElkKCk7XG4gICAgICB0aGlzLnJlY3Vyc2UoYXNzaWduYWJsZSwgcmVzdWx0KTtcbiAgICAgIHRoaXMucmV0dXJuXyhyZXN1bHQpO1xuICAgICAgZXh0cmEgPSAnZm4uYXNzaWduPScgKyB0aGlzLmdlbmVyYXRlRnVuY3Rpb24oJ2Fzc2lnbicsICdzLHYsbCcpO1xuICAgIH1cbiAgICB2YXIgdG9XYXRjaCA9IGdldElucHV0cyhhc3QuYm9keSk7XG4gICAgc2VsZi5zdGFnZSA9ICdpbnB1dHMnO1xuICAgIGZvckVhY2godG9XYXRjaCwgZnVuY3Rpb24od2F0Y2gsIGtleSkge1xuICAgICAgdmFyIGZuS2V5ID0gJ2ZuJyArIGtleTtcbiAgICAgIHNlbGYuc3RhdGVbZm5LZXldID0ge3ZhcnM6IFtdLCBib2R5OiBbXSwgb3duOiB7fX07XG4gICAgICBzZWxmLnN0YXRlLmNvbXB1dGluZyA9IGZuS2V5O1xuICAgICAgdmFyIGludG9JZCA9IHNlbGYubmV4dElkKCk7XG4gICAgICBzZWxmLnJlY3Vyc2Uod2F0Y2gsIGludG9JZCk7XG4gICAgICBzZWxmLnJldHVybl8oaW50b0lkKTtcbiAgICAgIHNlbGYuc3RhdGUuaW5wdXRzLnB1c2goe25hbWU6IGZuS2V5LCBpc1B1cmU6IHdhdGNoLmlzUHVyZX0pO1xuICAgICAgd2F0Y2gud2F0Y2hJZCA9IGtleTtcbiAgICB9KTtcbiAgICB0aGlzLnN0YXRlLmNvbXB1dGluZyA9ICdmbic7XG4gICAgdGhpcy5zdGFnZSA9ICdtYWluJztcbiAgICB0aGlzLnJlY3Vyc2UoYXN0KTtcbiAgICB2YXIgZm5TdHJpbmcgPVxuICAgICAgLy8gVGhlIGJ1aWxkIGFuZCBtaW5pZmljYXRpb24gc3RlcHMgcmVtb3ZlIHRoZSBzdHJpbmcgXCJ1c2Ugc3RyaWN0XCIgZnJvbSB0aGUgY29kZSwgYnV0IHRoaXMgaXMgZG9uZSB1c2luZyBhIHJlZ2V4LlxuICAgICAgLy8gVGhpcyBpcyBhIHdvcmthcm91bmQgZm9yIHRoaXMgdW50aWwgd2UgZG8gYSBiZXR0ZXIgam9iIGF0IG9ubHkgcmVtb3ZpbmcgdGhlIHByZWZpeCBvbmx5IHdoZW4gd2Ugc2hvdWxkLlxuICAgICAgJ1wiJyArIHRoaXMuVVNFICsgJyAnICsgdGhpcy5TVFJJQ1QgKyAnXCI7XFxuJyArXG4gICAgICB0aGlzLmZpbHRlclByZWZpeCgpICtcbiAgICAgICd2YXIgZm49JyArIHRoaXMuZ2VuZXJhdGVGdW5jdGlvbignZm4nLCAncyxsLGEsaScpICtcbiAgICAgIGV4dHJhICtcbiAgICAgIHRoaXMud2F0Y2hGbnMoKSArXG4gICAgICAncmV0dXJuIGZuOyc7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICB2YXIgZm4gPSAobmV3IEZ1bmN0aW9uKCckZmlsdGVyJyxcbiAgICAgICAgJ2dldFN0cmluZ1ZhbHVlJyxcbiAgICAgICAgJ2lmRGVmaW5lZCcsXG4gICAgICAgICdwbHVzJyxcbiAgICAgICAgZm5TdHJpbmcpKShcbiAgICAgICAgICB0aGlzLiRmaWx0ZXIsXG4gICAgICAgICAgZ2V0U3RyaW5nVmFsdWUsXG4gICAgICAgICAgaWZEZWZpbmVkLFxuICAgICAgICAgIHBsdXNGbik7XG4gICAgdGhpcy5zdGF0ZSA9IHRoaXMuc3RhZ2UgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIGZuO1xuICB9LFxuXG4gIFVTRTogJ3VzZScsXG5cbiAgU1RSSUNUOiAnc3RyaWN0JyxcblxuICB3YXRjaEZuczogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBpbnB1dHMgPSB0aGlzLnN0YXRlLmlucHV0cztcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZm9yRWFjaChpbnB1dHMsIGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICByZXN1bHQucHVzaCgndmFyICcgKyBpbnB1dC5uYW1lICsgJz0nICsgc2VsZi5nZW5lcmF0ZUZ1bmN0aW9uKGlucHV0Lm5hbWUsICdzJykpO1xuICAgICAgaWYgKGlucHV0LmlzUHVyZSkge1xuICAgICAgICByZXN1bHQucHVzaChpbnB1dC5uYW1lLCAnLmlzUHVyZT0nICsgSlNPTi5zdHJpbmdpZnkoaW5wdXQuaXNQdXJlKSArICc7Jyk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKGlucHV0cy5sZW5ndGgpIHtcbiAgICAgIHJlc3VsdC5wdXNoKCdmbi5pbnB1dHM9WycgKyBpbnB1dHMubWFwKGZ1bmN0aW9uKGkpIHsgcmV0dXJuIGkubmFtZTsgfSkuam9pbignLCcpICsgJ107Jyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQuam9pbignJyk7XG4gIH0sXG5cbiAgZ2VuZXJhdGVGdW5jdGlvbjogZnVuY3Rpb24obmFtZSwgcGFyYW1zKSB7XG4gICAgcmV0dXJuICdmdW5jdGlvbignICsgcGFyYW1zICsgJyl7JyArXG4gICAgICAgIHRoaXMudmFyc1ByZWZpeChuYW1lKSArXG4gICAgICAgIHRoaXMuYm9keShuYW1lKSArXG4gICAgICAgICd9Oyc7XG4gIH0sXG5cbiAgZmlsdGVyUHJlZml4OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZm9yRWFjaCh0aGlzLnN0YXRlLmZpbHRlcnMsIGZ1bmN0aW9uKGlkLCBmaWx0ZXIpIHtcbiAgICAgIHBhcnRzLnB1c2goaWQgKyAnPSRmaWx0ZXIoJyArIHNlbGYuZXNjYXBlKGZpbHRlcikgKyAnKScpO1xuICAgIH0pO1xuICAgIGlmIChwYXJ0cy5sZW5ndGgpIHJldHVybiAndmFyICcgKyBwYXJ0cy5qb2luKCcsJykgKyAnOyc7XG4gICAgcmV0dXJuICcnO1xuICB9LFxuXG4gIHZhcnNQcmVmaXg6IGZ1bmN0aW9uKHNlY3Rpb24pIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZVtzZWN0aW9uXS52YXJzLmxlbmd0aCA/ICd2YXIgJyArIHRoaXMuc3RhdGVbc2VjdGlvbl0udmFycy5qb2luKCcsJykgKyAnOycgOiAnJztcbiAgfSxcblxuICBib2R5OiBmdW5jdGlvbihzZWN0aW9uKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGVbc2VjdGlvbl0uYm9keS5qb2luKCcnKTtcbiAgfSxcblxuICByZWN1cnNlOiBmdW5jdGlvbihhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCBza2lwV2F0Y2hJZENoZWNrKSB7XG4gICAgdmFyIGxlZnQsIHJpZ2h0LCBzZWxmID0gdGhpcywgYXJncywgZXhwcmVzc2lvbiwgY29tcHV0ZWQ7XG4gICAgcmVjdXJzaW9uRm4gPSByZWN1cnNpb25GbiB8fCBub29wO1xuICAgIGlmICghc2tpcFdhdGNoSWRDaGVjayAmJiBpc0RlZmluZWQoYXN0LndhdGNoSWQpKSB7XG4gICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIHRoaXMuaWZfKCdpJyxcbiAgICAgICAgdGhpcy5sYXp5QXNzaWduKGludG9JZCwgdGhpcy5jb21wdXRlZE1lbWJlcignaScsIGFzdC53YXRjaElkKSksXG4gICAgICAgIHRoaXMubGF6eVJlY3Vyc2UoYXN0LCBpbnRvSWQsIG5hbWVJZCwgcmVjdXJzaW9uRm4sIGNyZWF0ZSwgdHJ1ZSlcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXRjaCAoYXN0LnR5cGUpIHtcbiAgICBjYXNlIEFTVC5Qcm9ncmFtOlxuICAgICAgZm9yRWFjaChhc3QuYm9keSwgZnVuY3Rpb24oZXhwcmVzc2lvbiwgcG9zKSB7XG4gICAgICAgIHNlbGYucmVjdXJzZShleHByZXNzaW9uLmV4cHJlc3Npb24sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmdW5jdGlvbihleHByKSB7IHJpZ2h0ID0gZXhwcjsgfSk7XG4gICAgICAgIGlmIChwb3MgIT09IGFzdC5ib2R5Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBzZWxmLmN1cnJlbnQoKS5ib2R5LnB1c2gocmlnaHQsICc7Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5yZXR1cm5fKHJpZ2h0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5MaXRlcmFsOlxuICAgICAgZXhwcmVzc2lvbiA9IHRoaXMuZXNjYXBlKGFzdC52YWx1ZSk7XG4gICAgICB0aGlzLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8IGV4cHJlc3Npb24pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuVW5hcnlFeHByZXNzaW9uOlxuICAgICAgdGhpcy5yZWN1cnNlKGFzdC5hcmd1bWVudCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGV4cHIpIHsgcmlnaHQgPSBleHByOyB9KTtcbiAgICAgIGV4cHJlc3Npb24gPSBhc3Qub3BlcmF0b3IgKyAnKCcgKyB0aGlzLmlmRGVmaW5lZChyaWdodCwgMCkgKyAnKSc7XG4gICAgICB0aGlzLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgcmVjdXJzaW9uRm4oZXhwcmVzc2lvbik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5CaW5hcnlFeHByZXNzaW9uOlxuICAgICAgdGhpcy5yZWN1cnNlKGFzdC5sZWZ0LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24oZXhwcikgeyBsZWZ0ID0gZXhwcjsgfSk7XG4gICAgICB0aGlzLnJlY3Vyc2UoYXN0LnJpZ2h0LCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZnVuY3Rpb24oZXhwcikgeyByaWdodCA9IGV4cHI7IH0pO1xuICAgICAgaWYgKGFzdC5vcGVyYXRvciA9PT0gJysnKSB7XG4gICAgICAgIGV4cHJlc3Npb24gPSB0aGlzLnBsdXMobGVmdCwgcmlnaHQpO1xuICAgICAgfSBlbHNlIGlmIChhc3Qub3BlcmF0b3IgPT09ICctJykge1xuICAgICAgICBleHByZXNzaW9uID0gdGhpcy5pZkRlZmluZWQobGVmdCwgMCkgKyBhc3Qub3BlcmF0b3IgKyB0aGlzLmlmRGVmaW5lZChyaWdodCwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleHByZXNzaW9uID0gJygnICsgbGVmdCArICcpJyArIGFzdC5vcGVyYXRvciArICcoJyArIHJpZ2h0ICsgJyknO1xuICAgICAgfVxuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGV4cHJlc3Npb24pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuTG9naWNhbEV4cHJlc3Npb246XG4gICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIHNlbGYucmVjdXJzZShhc3QubGVmdCwgaW50b0lkKTtcbiAgICAgIHNlbGYuaWZfKGFzdC5vcGVyYXRvciA9PT0gJyYmJyA/IGludG9JZCA6IHNlbGYubm90KGludG9JZCksIHNlbGYubGF6eVJlY3Vyc2UoYXN0LnJpZ2h0LCBpbnRvSWQpKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5Db25kaXRpb25hbEV4cHJlc3Npb246XG4gICAgICBpbnRvSWQgPSBpbnRvSWQgfHwgdGhpcy5uZXh0SWQoKTtcbiAgICAgIHNlbGYucmVjdXJzZShhc3QudGVzdCwgaW50b0lkKTtcbiAgICAgIHNlbGYuaWZfKGludG9JZCwgc2VsZi5sYXp5UmVjdXJzZShhc3QuYWx0ZXJuYXRlLCBpbnRvSWQpLCBzZWxmLmxhenlSZWN1cnNlKGFzdC5jb25zZXF1ZW50LCBpbnRvSWQpKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5JZGVudGlmaWVyOlxuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBpZiAobmFtZUlkKSB7XG4gICAgICAgIG5hbWVJZC5jb250ZXh0ID0gc2VsZi5zdGFnZSA9PT0gJ2lucHV0cycgPyAncycgOiB0aGlzLmFzc2lnbih0aGlzLm5leHRJZCgpLCB0aGlzLmdldEhhc093blByb3BlcnR5KCdsJywgYXN0Lm5hbWUpICsgJz9sOnMnKTtcbiAgICAgICAgbmFtZUlkLmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICAgIG5hbWVJZC5uYW1lID0gYXN0Lm5hbWU7XG4gICAgICB9XG4gICAgICBzZWxmLmlmXyhzZWxmLnN0YWdlID09PSAnaW5wdXRzJyB8fCBzZWxmLm5vdChzZWxmLmdldEhhc093blByb3BlcnR5KCdsJywgYXN0Lm5hbWUpKSxcbiAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2VsZi5pZl8oc2VsZi5zdGFnZSA9PT0gJ2lucHV0cycgfHwgJ3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChjcmVhdGUgJiYgY3JlYXRlICE9PSAxKSB7XG4gICAgICAgICAgICAgIHNlbGYuaWZfKFxuICAgICAgICAgICAgICAgIHNlbGYuaXNOdWxsKHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIoJ3MnLCBhc3QubmFtZSkpLFxuICAgICAgICAgICAgICAgIHNlbGYubGF6eUFzc2lnbihzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKCdzJywgYXN0Lm5hbWUpLCAne30nKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIoJ3MnLCBhc3QubmFtZSkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBpbnRvSWQgJiYgc2VsZi5sYXp5QXNzaWduKGludG9JZCwgc2VsZi5ub25Db21wdXRlZE1lbWJlcignbCcsIGFzdC5uYW1lKSlcbiAgICAgICAgKTtcbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5NZW1iZXJFeHByZXNzaW9uOlxuICAgICAgbGVmdCA9IG5hbWVJZCAmJiAobmFtZUlkLmNvbnRleHQgPSB0aGlzLm5leHRJZCgpKSB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgaW50b0lkID0gaW50b0lkIHx8IHRoaXMubmV4dElkKCk7XG4gICAgICBzZWxmLnJlY3Vyc2UoYXN0Lm9iamVjdCwgbGVmdCwgdW5kZWZpbmVkLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5pZl8oc2VsZi5ub3ROdWxsKGxlZnQpLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoYXN0LmNvbXB1dGVkKSB7XG4gICAgICAgICAgICByaWdodCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgICAgICBzZWxmLnJlY3Vyc2UoYXN0LnByb3BlcnR5LCByaWdodCk7XG4gICAgICAgICAgICBzZWxmLmdldFN0cmluZ1ZhbHVlKHJpZ2h0KTtcbiAgICAgICAgICAgIGlmIChjcmVhdGUgJiYgY3JlYXRlICE9PSAxKSB7XG4gICAgICAgICAgICAgIHNlbGYuaWZfKHNlbGYubm90KHNlbGYuY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQpKSwgc2VsZi5sYXp5QXNzaWduKHNlbGYuY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQpLCAne30nKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBleHByZXNzaW9uID0gc2VsZi5jb21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCk7XG4gICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgICAgaWYgKG5hbWVJZCkge1xuICAgICAgICAgICAgICBuYW1lSWQuY29tcHV0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICBuYW1lSWQubmFtZSA9IHJpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSkge1xuICAgICAgICAgICAgICBzZWxmLmlmXyhzZWxmLmlzTnVsbChzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIGFzdC5wcm9wZXJ0eS5uYW1lKSksIHNlbGYubGF6eUFzc2lnbihzZWxmLm5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIGFzdC5wcm9wZXJ0eS5uYW1lKSwgJ3t9JykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYubm9uQ29tcHV0ZWRNZW1iZXIobGVmdCwgYXN0LnByb3BlcnR5Lm5hbWUpO1xuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgICAgICAgIGlmIChuYW1lSWQpIHtcbiAgICAgICAgICAgICAgbmFtZUlkLmNvbXB1dGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgIG5hbWVJZC5uYW1lID0gYXN0LnByb3BlcnR5Lm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsICd1bmRlZmluZWQnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICB9LCAhIWNyZWF0ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5DYWxsRXhwcmVzc2lvbjpcbiAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgaWYgKGFzdC5maWx0ZXIpIHtcbiAgICAgICAgcmlnaHQgPSBzZWxmLmZpbHRlcihhc3QuY2FsbGVlLm5hbWUpO1xuICAgICAgICBhcmdzID0gW107XG4gICAgICAgIGZvckVhY2goYXN0LmFyZ3VtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICAgIHZhciBhcmd1bWVudCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgICAgc2VsZi5yZWN1cnNlKGV4cHIsIGFyZ3VtZW50KTtcbiAgICAgICAgICBhcmdzLnB1c2goYXJndW1lbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgZXhwcmVzc2lvbiA9IHJpZ2h0ICsgJygnICsgYXJncy5qb2luKCcsJykgKyAnKSc7XG4gICAgICAgIHNlbGYuYXNzaWduKGludG9JZCwgZXhwcmVzc2lvbik7XG4gICAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByaWdodCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgIGxlZnQgPSB7fTtcbiAgICAgICAgYXJncyA9IFtdO1xuICAgICAgICBzZWxmLnJlY3Vyc2UoYXN0LmNhbGxlZSwgcmlnaHQsIGxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYuaWZfKHNlbGYubm90TnVsbChyaWdodCksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZm9yRWFjaChhc3QuYXJndW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICAgICAgICAgIHNlbGYucmVjdXJzZShleHByLCBhc3QuY29uc3RhbnQgPyB1bmRlZmluZWQgOiBzZWxmLm5leHRJZCgpLCB1bmRlZmluZWQsIGZ1bmN0aW9uKGFyZ3VtZW50KSB7XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKGFyZ3VtZW50KTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChsZWZ0Lm5hbWUpIHtcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHNlbGYubWVtYmVyKGxlZnQuY29udGV4dCwgbGVmdC5uYW1lLCBsZWZ0LmNvbXB1dGVkKSArICcoJyArIGFyZ3Muam9pbignLCcpICsgJyknO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXhwcmVzc2lvbiA9IHJpZ2h0ICsgJygnICsgYXJncy5qb2luKCcsJykgKyAnKSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCAndW5kZWZpbmVkJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmVjdXJzaW9uRm4oaW50b0lkKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5Bc3NpZ25tZW50RXhwcmVzc2lvbjpcbiAgICAgIHJpZ2h0ID0gdGhpcy5uZXh0SWQoKTtcbiAgICAgIGxlZnQgPSB7fTtcbiAgICAgIHRoaXMucmVjdXJzZShhc3QubGVmdCwgdW5kZWZpbmVkLCBsZWZ0LCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5pZl8oc2VsZi5ub3ROdWxsKGxlZnQuY29udGV4dCksIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNlbGYucmVjdXJzZShhc3QucmlnaHQsIHJpZ2h0KTtcbiAgICAgICAgICBleHByZXNzaW9uID0gc2VsZi5tZW1iZXIobGVmdC5jb250ZXh0LCBsZWZ0Lm5hbWUsIGxlZnQuY29tcHV0ZWQpICsgYXN0Lm9wZXJhdG9yICsgcmlnaHQ7XG4gICAgICAgICAgc2VsZi5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgICAgICByZWN1cnNpb25GbihpbnRvSWQgfHwgZXhwcmVzc2lvbik7XG4gICAgICAgIH0pO1xuICAgICAgfSwgMSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5BcnJheUV4cHJlc3Npb246XG4gICAgICBhcmdzID0gW107XG4gICAgICBmb3JFYWNoKGFzdC5lbGVtZW50cywgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICBzZWxmLnJlY3Vyc2UoZXhwciwgYXN0LmNvbnN0YW50ID8gdW5kZWZpbmVkIDogc2VsZi5uZXh0SWQoKSwgdW5kZWZpbmVkLCBmdW5jdGlvbihhcmd1bWVudCkge1xuICAgICAgICAgIGFyZ3MucHVzaChhcmd1bWVudCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBleHByZXNzaW9uID0gJ1snICsgYXJncy5qb2luKCcsJykgKyAnXSc7XG4gICAgICB0aGlzLmFzc2lnbihpbnRvSWQsIGV4cHJlc3Npb24pO1xuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8IGV4cHJlc3Npb24pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBU1QuT2JqZWN0RXhwcmVzc2lvbjpcbiAgICAgIGFyZ3MgPSBbXTtcbiAgICAgIGNvbXB1dGVkID0gZmFsc2U7XG4gICAgICBmb3JFYWNoKGFzdC5wcm9wZXJ0aWVzLCBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgICBpZiAocHJvcGVydHkuY29tcHV0ZWQpIHtcbiAgICAgICAgICBjb21wdXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaWYgKGNvbXB1dGVkKSB7XG4gICAgICAgIGludG9JZCA9IGludG9JZCB8fCB0aGlzLm5leHRJZCgpO1xuICAgICAgICB0aGlzLmFzc2lnbihpbnRvSWQsICd7fScpO1xuICAgICAgICBmb3JFYWNoKGFzdC5wcm9wZXJ0aWVzLCBmdW5jdGlvbihwcm9wZXJ0eSkge1xuICAgICAgICAgIGlmIChwcm9wZXJ0eS5jb21wdXRlZCkge1xuICAgICAgICAgICAgbGVmdCA9IHNlbGYubmV4dElkKCk7XG4gICAgICAgICAgICBzZWxmLnJlY3Vyc2UocHJvcGVydHkua2V5LCBsZWZ0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGVmdCA9IHByb3BlcnR5LmtleS50eXBlID09PSBBU1QuSWRlbnRpZmllciA/XG4gICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5LmtleS5uYW1lIDpcbiAgICAgICAgICAgICAgICAgICAgICAgKCcnICsgcHJvcGVydHkua2V5LnZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmlnaHQgPSBzZWxmLm5leHRJZCgpO1xuICAgICAgICAgIHNlbGYucmVjdXJzZShwcm9wZXJ0eS52YWx1ZSwgcmlnaHQpO1xuICAgICAgICAgIHNlbGYuYXNzaWduKHNlbGYubWVtYmVyKGludG9JZCwgbGVmdCwgcHJvcGVydHkuY29tcHV0ZWQpLCByaWdodCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yRWFjaChhc3QucHJvcGVydGllcywgZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICAgICAgICBzZWxmLnJlY3Vyc2UocHJvcGVydHkudmFsdWUsIGFzdC5jb25zdGFudCA/IHVuZGVmaW5lZCA6IHNlbGYubmV4dElkKCksIHVuZGVmaW5lZCwgZnVuY3Rpb24oZXhwcikge1xuICAgICAgICAgICAgYXJncy5wdXNoKHNlbGYuZXNjYXBlKFxuICAgICAgICAgICAgICAgIHByb3BlcnR5LmtleS50eXBlID09PSBBU1QuSWRlbnRpZmllciA/IHByb3BlcnR5LmtleS5uYW1lIDpcbiAgICAgICAgICAgICAgICAgICgnJyArIHByb3BlcnR5LmtleS52YWx1ZSkpICtcbiAgICAgICAgICAgICAgICAnOicgKyBleHByKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGV4cHJlc3Npb24gPSAneycgKyBhcmdzLmpvaW4oJywnKSArICd9JztcbiAgICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCBleHByZXNzaW9uKTtcbiAgICAgIH1cbiAgICAgIHJlY3Vyc2lvbkZuKGludG9JZCB8fCBleHByZXNzaW9uKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQVNULlRoaXNFeHByZXNzaW9uOlxuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCAncycpO1xuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8ICdzJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5Mb2NhbHNFeHByZXNzaW9uOlxuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCAnbCcpO1xuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8ICdsJyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFTVC5OR1ZhbHVlUGFyYW1ldGVyOlxuICAgICAgdGhpcy5hc3NpZ24oaW50b0lkLCAndicpO1xuICAgICAgcmVjdXJzaW9uRm4oaW50b0lkIHx8ICd2Jyk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH0sXG5cbiAgZ2V0SGFzT3duUHJvcGVydHk6IGZ1bmN0aW9uKGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gICAgdmFyIGtleSA9IGVsZW1lbnQgKyAnLicgKyBwcm9wZXJ0eTtcbiAgICB2YXIgb3duID0gdGhpcy5jdXJyZW50KCkub3duO1xuICAgIGlmICghb3duLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIG93bltrZXldID0gdGhpcy5uZXh0SWQoZmFsc2UsIGVsZW1lbnQgKyAnJiYoJyArIHRoaXMuZXNjYXBlKHByb3BlcnR5KSArICcgaW4gJyArIGVsZW1lbnQgKyAnKScpO1xuICAgIH1cbiAgICByZXR1cm4gb3duW2tleV07XG4gIH0sXG5cbiAgYXNzaWduOiBmdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgICBpZiAoIWlkKSByZXR1cm47XG4gICAgdGhpcy5jdXJyZW50KCkuYm9keS5wdXNoKGlkLCAnPScsIHZhbHVlLCAnOycpO1xuICAgIHJldHVybiBpZDtcbiAgfSxcblxuICBmaWx0ZXI6IGZ1bmN0aW9uKGZpbHRlck5hbWUpIHtcbiAgICBpZiAoIXRoaXMuc3RhdGUuZmlsdGVycy5oYXNPd25Qcm9wZXJ0eShmaWx0ZXJOYW1lKSkge1xuICAgICAgdGhpcy5zdGF0ZS5maWx0ZXJzW2ZpbHRlck5hbWVdID0gdGhpcy5uZXh0SWQodHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0YXRlLmZpbHRlcnNbZmlsdGVyTmFtZV07XG4gIH0sXG5cbiAgaWZEZWZpbmVkOiBmdW5jdGlvbihpZCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuICdpZkRlZmluZWQoJyArIGlkICsgJywnICsgdGhpcy5lc2NhcGUoZGVmYXVsdFZhbHVlKSArICcpJztcbiAgfSxcblxuICBwbHVzOiBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgIHJldHVybiAncGx1cygnICsgbGVmdCArICcsJyArIHJpZ2h0ICsgJyknO1xuICB9LFxuXG4gIHJldHVybl86IGZ1bmN0aW9uKGlkKSB7XG4gICAgdGhpcy5jdXJyZW50KCkuYm9keS5wdXNoKCdyZXR1cm4gJywgaWQsICc7Jyk7XG4gIH0sXG5cbiAgaWZfOiBmdW5jdGlvbih0ZXN0LCBhbHRlcm5hdGUsIGNvbnNlcXVlbnQpIHtcbiAgICBpZiAodGVzdCA9PT0gdHJ1ZSkge1xuICAgICAgYWx0ZXJuYXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBib2R5ID0gdGhpcy5jdXJyZW50KCkuYm9keTtcbiAgICAgIGJvZHkucHVzaCgnaWYoJywgdGVzdCwgJyl7Jyk7XG4gICAgICBhbHRlcm5hdGUoKTtcbiAgICAgIGJvZHkucHVzaCgnfScpO1xuICAgICAgaWYgKGNvbnNlcXVlbnQpIHtcbiAgICAgICAgYm9keS5wdXNoKCdlbHNleycpO1xuICAgICAgICBjb25zZXF1ZW50KCk7XG4gICAgICAgIGJvZHkucHVzaCgnfScpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBub3Q6IGZ1bmN0aW9uKGV4cHJlc3Npb24pIHtcbiAgICByZXR1cm4gJyEoJyArIGV4cHJlc3Npb24gKyAnKSc7XG4gIH0sXG5cbiAgaXNOdWxsOiBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb24gKyAnPT1udWxsJztcbiAgfSxcblxuICBub3ROdWxsOiBmdW5jdGlvbihleHByZXNzaW9uKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb24gKyAnIT1udWxsJztcbiAgfSxcblxuICBub25Db21wdXRlZE1lbWJlcjogZnVuY3Rpb24obGVmdCwgcmlnaHQpIHtcbiAgICB2YXIgU0FGRV9JREVOVElGSUVSID0gL15bJF9hLXpBLVpdWyRfYS16QS1aMC05XSokLztcbiAgICB2YXIgVU5TQUZFX0NIQVJBQ1RFUlMgPSAvW14kX2EtekEtWjAtOV0vZztcbiAgICBpZiAoU0FGRV9JREVOVElGSUVSLnRlc3QocmlnaHQpKSB7XG4gICAgICByZXR1cm4gbGVmdCArICcuJyArIHJpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbGVmdCAgKyAnW1wiJyArIHJpZ2h0LnJlcGxhY2UoVU5TQUZFX0NIQVJBQ1RFUlMsIHRoaXMuc3RyaW5nRXNjYXBlRm4pICsgJ1wiXSc7XG4gICAgfVxuICB9LFxuXG4gIGNvbXB1dGVkTWVtYmVyOiBmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgIHJldHVybiBsZWZ0ICsgJ1snICsgcmlnaHQgKyAnXSc7XG4gIH0sXG5cbiAgbWVtYmVyOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29tcHV0ZWQpIHtcbiAgICBpZiAoY29tcHV0ZWQpIHJldHVybiB0aGlzLmNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0KTtcbiAgICByZXR1cm4gdGhpcy5ub25Db21wdXRlZE1lbWJlcihsZWZ0LCByaWdodCk7XG4gIH0sXG5cbiAgZ2V0U3RyaW5nVmFsdWU6IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICB0aGlzLmFzc2lnbihpdGVtLCAnZ2V0U3RyaW5nVmFsdWUoJyArIGl0ZW0gKyAnKScpO1xuICB9LFxuXG4gIGxhenlSZWN1cnNlOiBmdW5jdGlvbihhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCBza2lwV2F0Y2hJZENoZWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHNlbGYucmVjdXJzZShhc3QsIGludG9JZCwgbmFtZUlkLCByZWN1cnNpb25GbiwgY3JlYXRlLCBza2lwV2F0Y2hJZENoZWNrKTtcbiAgICB9O1xuICB9LFxuXG4gIGxhenlBc3NpZ246IGZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmFzc2lnbihpZCwgdmFsdWUpO1xuICAgIH07XG4gIH0sXG5cbiAgc3RyaW5nRXNjYXBlUmVnZXg6IC9bXiBhLXpBLVowLTldL2csXG5cbiAgc3RyaW5nRXNjYXBlRm46IGZ1bmN0aW9uKGMpIHtcbiAgICByZXR1cm4gJ1xcXFx1JyArICgnMDAwMCcgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNCk7XG4gIH0sXG5cbiAgZXNjYXBlOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHJldHVybiAnXFwnJyArIHZhbHVlLnJlcGxhY2UodGhpcy5zdHJpbmdFc2NhcGVSZWdleCwgdGhpcy5zdHJpbmdFc2NhcGVGbikgKyAnXFwnJztcbiAgICBpZiAoaXNOdW1iZXIodmFsdWUpKSByZXR1cm4gdmFsdWUudG9TdHJpbmcoKTtcbiAgICBpZiAodmFsdWUgPT09IHRydWUpIHJldHVybiAndHJ1ZSc7XG4gICAgaWYgKHZhbHVlID09PSBmYWxzZSkgcmV0dXJuICdmYWxzZSc7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJ251bGwnO1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gJ3VuZGVmaW5lZCc7XG5cbiAgICB0aHJvdyAkcGFyc2VNaW5FcnIoJ2VzYycsICdJTVBPU1NJQkxFJyk7XG4gIH0sXG5cbiAgbmV4dElkOiBmdW5jdGlvbihza2lwLCBpbml0KSB7XG4gICAgdmFyIGlkID0gJ3YnICsgKHRoaXMuc3RhdGUubmV4dElkKyspO1xuICAgIGlmICghc2tpcCkge1xuICAgICAgdGhpcy5jdXJyZW50KCkudmFycy5wdXNoKGlkICsgKGluaXQgPyAnPScgKyBpbml0IDogJycpKTtcbiAgICB9XG4gICAgcmV0dXJuIGlkO1xuICB9LFxuXG4gIGN1cnJlbnQ6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnN0YXRlW3RoaXMuc3RhdGUuY29tcHV0aW5nXTtcbiAgfVxufTtcblxuXG5mdW5jdGlvbiBBU1RJbnRlcnByZXRlcigkZmlsdGVyKSB7XG4gIHRoaXMuJGZpbHRlciA9ICRmaWx0ZXI7XG59XG5cbkFTVEludGVycHJldGVyLnByb3RvdHlwZSA9IHtcbiAgY29tcGlsZTogZnVuY3Rpb24oYXN0KSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGZpbmRDb25zdGFudEFuZFdhdGNoRXhwcmVzc2lvbnMoYXN0LCBzZWxmLiRmaWx0ZXIpO1xuICAgIHZhciBhc3NpZ25hYmxlO1xuICAgIHZhciBhc3NpZ247XG4gICAgaWYgKChhc3NpZ25hYmxlID0gYXNzaWduYWJsZUFTVChhc3QpKSkge1xuICAgICAgYXNzaWduID0gdGhpcy5yZWN1cnNlKGFzc2lnbmFibGUpO1xuICAgIH1cbiAgICB2YXIgdG9XYXRjaCA9IGdldElucHV0cyhhc3QuYm9keSk7XG4gICAgdmFyIGlucHV0cztcbiAgICBpZiAodG9XYXRjaCkge1xuICAgICAgaW5wdXRzID0gW107XG4gICAgICBmb3JFYWNoKHRvV2F0Y2gsIGZ1bmN0aW9uKHdhdGNoLCBrZXkpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gc2VsZi5yZWN1cnNlKHdhdGNoKTtcbiAgICAgICAgaW5wdXQuaXNQdXJlID0gd2F0Y2guaXNQdXJlO1xuICAgICAgICB3YXRjaC5pbnB1dCA9IGlucHV0O1xuICAgICAgICBpbnB1dHMucHVzaChpbnB1dCk7XG4gICAgICAgIHdhdGNoLndhdGNoSWQgPSBrZXk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdmFyIGV4cHJlc3Npb25zID0gW107XG4gICAgZm9yRWFjaChhc3QuYm9keSwgZnVuY3Rpb24oZXhwcmVzc2lvbikge1xuICAgICAgZXhwcmVzc2lvbnMucHVzaChzZWxmLnJlY3Vyc2UoZXhwcmVzc2lvbi5leHByZXNzaW9uKSk7XG4gICAgfSk7XG4gICAgdmFyIGZuID0gYXN0LmJvZHkubGVuZ3RoID09PSAwID8gbm9vcCA6XG4gICAgICAgICAgICAgYXN0LmJvZHkubGVuZ3RoID09PSAxID8gZXhwcmVzc2lvbnNbMF0gOlxuICAgICAgICAgICAgIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMpIHtcbiAgICAgICAgICAgICAgIHZhciBsYXN0VmFsdWU7XG4gICAgICAgICAgICAgICBmb3JFYWNoKGV4cHJlc3Npb25zLCBmdW5jdGlvbihleHApIHtcbiAgICAgICAgICAgICAgICAgbGFzdFZhbHVlID0gZXhwKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICByZXR1cm4gbGFzdFZhbHVlO1xuICAgICAgICAgICAgIH07XG4gICAgaWYgKGFzc2lnbikge1xuICAgICAgZm4uYXNzaWduID0gZnVuY3Rpb24oc2NvcGUsIHZhbHVlLCBsb2NhbHMpIHtcbiAgICAgICAgcmV0dXJuIGFzc2lnbihzY29wZSwgbG9jYWxzLCB2YWx1ZSk7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaW5wdXRzKSB7XG4gICAgICBmbi5pbnB1dHMgPSBpbnB1dHM7XG4gICAgfVxuICAgIHJldHVybiBmbjtcbiAgfSxcblxuICByZWN1cnNlOiBmdW5jdGlvbihhc3QsIGNvbnRleHQsIGNyZWF0ZSkge1xuICAgIHZhciBsZWZ0LCByaWdodCwgc2VsZiA9IHRoaXMsIGFyZ3M7XG4gICAgaWYgKGFzdC5pbnB1dCkge1xuICAgICAgcmV0dXJuIHRoaXMuaW5wdXRzKGFzdC5pbnB1dCwgYXN0LndhdGNoSWQpO1xuICAgIH1cbiAgICBzd2l0Y2ggKGFzdC50eXBlKSB7XG4gICAgY2FzZSBBU1QuTGl0ZXJhbDpcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlKGFzdC52YWx1ZSwgY29udGV4dCk7XG4gICAgY2FzZSBBU1QuVW5hcnlFeHByZXNzaW9uOlxuICAgICAgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LmFyZ3VtZW50KTtcbiAgICAgIHJldHVybiB0aGlzWyd1bmFyeScgKyBhc3Qub3BlcmF0b3JdKHJpZ2h0LCBjb250ZXh0KTtcbiAgICBjYXNlIEFTVC5CaW5hcnlFeHByZXNzaW9uOlxuICAgICAgbGVmdCA9IHRoaXMucmVjdXJzZShhc3QubGVmdCk7XG4gICAgICByaWdodCA9IHRoaXMucmVjdXJzZShhc3QucmlnaHQpO1xuICAgICAgcmV0dXJuIHRoaXNbJ2JpbmFyeScgKyBhc3Qub3BlcmF0b3JdKGxlZnQsIHJpZ2h0LCBjb250ZXh0KTtcbiAgICBjYXNlIEFTVC5Mb2dpY2FsRXhwcmVzc2lvbjpcbiAgICAgIGxlZnQgPSB0aGlzLnJlY3Vyc2UoYXN0LmxlZnQpO1xuICAgICAgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LnJpZ2h0KTtcbiAgICAgIHJldHVybiB0aGlzWydiaW5hcnknICsgYXN0Lm9wZXJhdG9yXShsZWZ0LCByaWdodCwgY29udGV4dCk7XG4gICAgY2FzZSBBU1QuQ29uZGl0aW9uYWxFeHByZXNzaW9uOlxuICAgICAgcmV0dXJuIHRoaXNbJ3Rlcm5hcnk/OiddKFxuICAgICAgICB0aGlzLnJlY3Vyc2UoYXN0LnRlc3QpLFxuICAgICAgICB0aGlzLnJlY3Vyc2UoYXN0LmFsdGVybmF0ZSksXG4gICAgICAgIHRoaXMucmVjdXJzZShhc3QuY29uc2VxdWVudCksXG4gICAgICAgIGNvbnRleHRcbiAgICAgICk7XG4gICAgY2FzZSBBU1QuSWRlbnRpZmllcjpcbiAgICAgIHJldHVybiBzZWxmLmlkZW50aWZpZXIoYXN0Lm5hbWUsIGNvbnRleHQsIGNyZWF0ZSk7XG4gICAgY2FzZSBBU1QuTWVtYmVyRXhwcmVzc2lvbjpcbiAgICAgIGxlZnQgPSB0aGlzLnJlY3Vyc2UoYXN0Lm9iamVjdCwgZmFsc2UsICEhY3JlYXRlKTtcbiAgICAgIGlmICghYXN0LmNvbXB1dGVkKSB7XG4gICAgICAgIHJpZ2h0ID0gYXN0LnByb3BlcnR5Lm5hbWU7XG4gICAgICB9XG4gICAgICBpZiAoYXN0LmNvbXB1dGVkKSByaWdodCA9IHRoaXMucmVjdXJzZShhc3QucHJvcGVydHkpO1xuICAgICAgcmV0dXJuIGFzdC5jb21wdXRlZCA/XG4gICAgICAgIHRoaXMuY29tcHV0ZWRNZW1iZXIobGVmdCwgcmlnaHQsIGNvbnRleHQsIGNyZWF0ZSkgOlxuICAgICAgICB0aGlzLm5vbkNvbXB1dGVkTWVtYmVyKGxlZnQsIHJpZ2h0LCBjb250ZXh0LCBjcmVhdGUpO1xuICAgIGNhc2UgQVNULkNhbGxFeHByZXNzaW9uOlxuICAgICAgYXJncyA9IFtdO1xuICAgICAgZm9yRWFjaChhc3QuYXJndW1lbnRzLCBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIGFyZ3MucHVzaChzZWxmLnJlY3Vyc2UoZXhwcikpO1xuICAgICAgfSk7XG4gICAgICBpZiAoYXN0LmZpbHRlcikgcmlnaHQgPSB0aGlzLiRmaWx0ZXIoYXN0LmNhbGxlZS5uYW1lKTtcbiAgICAgIGlmICghYXN0LmZpbHRlcikgcmlnaHQgPSB0aGlzLnJlY3Vyc2UoYXN0LmNhbGxlZSwgdHJ1ZSk7XG4gICAgICByZXR1cm4gYXN0LmZpbHRlciA/XG4gICAgICAgIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2goYXJnc1tpXShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgdmFsdWUgPSByaWdodC5hcHBseSh1bmRlZmluZWQsIHZhbHVlcywgaW5wdXRzKTtcbiAgICAgICAgICByZXR1cm4gY29udGV4dCA/IHtjb250ZXh0OiB1bmRlZmluZWQsIG5hbWU6IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfSA6IHZhbHVlO1xuICAgICAgICB9IDpcbiAgICAgICAgZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgICAgICB2YXIgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICBpZiAocmhzLnZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICB2YWx1ZXMucHVzaChhcmdzW2ldKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZSA9IHJocy52YWx1ZS5hcHBseShyaHMuY29udGV4dCwgdmFsdWVzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IHZhbHVlfSA6IHZhbHVlO1xuICAgICAgICB9O1xuICAgIGNhc2UgQVNULkFzc2lnbm1lbnRFeHByZXNzaW9uOlxuICAgICAgbGVmdCA9IHRoaXMucmVjdXJzZShhc3QubGVmdCwgdHJ1ZSwgMSk7XG4gICAgICByaWdodCA9IHRoaXMucmVjdXJzZShhc3QucmlnaHQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciBsaHMgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgdmFyIHJocyA9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgbGhzLmNvbnRleHRbbGhzLm5hbWVdID0gcmhzO1xuICAgICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogcmhzfSA6IHJocztcbiAgICAgIH07XG4gICAgY2FzZSBBU1QuQXJyYXlFeHByZXNzaW9uOlxuICAgICAgYXJncyA9IFtdO1xuICAgICAgZm9yRWFjaChhc3QuZWxlbWVudHMsIGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgYXJncy5wdXNoKHNlbGYucmVjdXJzZShleHByKSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgdmFsdWUgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgdmFsdWUucHVzaChhcmdzW2ldKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IHZhbHVlfSA6IHZhbHVlO1xuICAgICAgfTtcbiAgICBjYXNlIEFTVC5PYmplY3RFeHByZXNzaW9uOlxuICAgICAgYXJncyA9IFtdO1xuICAgICAgZm9yRWFjaChhc3QucHJvcGVydGllcywgZnVuY3Rpb24ocHJvcGVydHkpIHtcbiAgICAgICAgaWYgKHByb3BlcnR5LmNvbXB1dGVkKSB7XG4gICAgICAgICAgYXJncy5wdXNoKHtrZXk6IHNlbGYucmVjdXJzZShwcm9wZXJ0eS5rZXkpLFxuICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZi5yZWN1cnNlKHByb3BlcnR5LnZhbHVlKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFyZ3MucHVzaCh7a2V5OiBwcm9wZXJ0eS5rZXkudHlwZSA9PT0gQVNULklkZW50aWZpZXIgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eS5rZXkubmFtZSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICgnJyArIHByb3BlcnR5LmtleS52YWx1ZSksXG4gICAgICAgICAgICAgICAgICAgICBjb21wdXRlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VsZi5yZWN1cnNlKHByb3BlcnR5LnZhbHVlKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgdmFsdWUgPSB7fTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgaWYgKGFyZ3NbaV0uY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIHZhbHVlW2FyZ3NbaV0ua2V5KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKV0gPSBhcmdzW2ldLnZhbHVlKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWVbYXJnc1tpXS5rZXldID0gYXJnc1tpXS52YWx1ZShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiB2YWx1ZX0gOiB2YWx1ZTtcbiAgICAgIH07XG4gICAgY2FzZSBBU1QuVGhpc0V4cHJlc3Npb246XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IHNjb3BlfSA6IHNjb3BlO1xuICAgICAgfTtcbiAgICBjYXNlIEFTVC5Mb2NhbHNFeHByZXNzaW9uOlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGxvY2Fsc30gOiBsb2NhbHM7XG4gICAgICB9O1xuICAgIGNhc2UgQVNULk5HVmFsdWVQYXJhbWV0ZXI6XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduKSB7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhc3NpZ259IDogYXNzaWduO1xuICAgICAgfTtcbiAgICB9XG4gIH0sXG5cbiAgJ3VuYXJ5Kyc6IGZ1bmN0aW9uKGFyZ3VtZW50LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gYXJndW1lbnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgaWYgKGlzRGVmaW5lZChhcmcpKSB7XG4gICAgICAgIGFyZyA9ICthcmc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcmcgPSAwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ3VuYXJ5LSc6IGZ1bmN0aW9uKGFyZ3VtZW50LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gYXJndW1lbnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgaWYgKGlzRGVmaW5lZChhcmcpKSB7XG4gICAgICAgIGFyZyA9IC1hcmc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcmcgPSAtMDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICd1bmFyeSEnOiBmdW5jdGlvbihhcmd1bWVudCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9ICFhcmd1bWVudChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Kyc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgbGhzID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICB2YXIgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgdmFyIGFyZyA9IHBsdXNGbihsaHMsIHJocyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5LSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgbGhzID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICB2YXIgcmhzID0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgdmFyIGFyZyA9IChpc0RlZmluZWQobGhzKSA/IGxocyA6IDApIC0gKGlzRGVmaW5lZChyaHMpID8gcmhzIDogMCk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Kic6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgKiByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Lyc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgLyByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5JSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgJSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5PT09JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA9PT0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSE9PSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgIT09IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnk9PSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPT0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSE9JzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSAhPSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5PCc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPCByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5Pic6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPiByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5PD0nOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIDw9IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICdiaW5hcnk+PSc6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYXJnID0gbGVmdChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgPj0gcmlnaHQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgcmV0dXJuIGNvbnRleHQgPyB7dmFsdWU6IGFyZ30gOiBhcmc7XG4gICAgfTtcbiAgfSxcbiAgJ2JpbmFyeSYmJzogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSAmJiByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICByZXR1cm4gY29udGV4dCA/IHt2YWx1ZTogYXJnfSA6IGFyZztcbiAgICB9O1xuICB9LFxuICAnYmluYXJ5fHwnOiBmdW5jdGlvbihsZWZ0LCByaWdodCwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGFyZyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHx8IHJpZ2h0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gICd0ZXJuYXJ5PzonOiBmdW5jdGlvbih0ZXN0LCBhbHRlcm5hdGUsIGNvbnNlcXVlbnQsIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBhcmcgPSB0ZXN0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSA/IGFsdGVybmF0ZShzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykgOiBjb25zZXF1ZW50KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIHJldHVybiBjb250ZXh0ID8ge3ZhbHVlOiBhcmd9IDogYXJnO1xuICAgIH07XG4gIH0sXG4gIHZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbigpIHsgcmV0dXJuIGNvbnRleHQgPyB7Y29udGV4dDogdW5kZWZpbmVkLCBuYW1lOiB1bmRlZmluZWQsIHZhbHVlOiB2YWx1ZX0gOiB2YWx1ZTsgfTtcbiAgfSxcbiAgaWRlbnRpZmllcjogZnVuY3Rpb24obmFtZSwgY29udGV4dCwgY3JlYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICB2YXIgYmFzZSA9IGxvY2FscyAmJiAobmFtZSBpbiBsb2NhbHMpID8gbG9jYWxzIDogc2NvcGU7XG4gICAgICBpZiAoY3JlYXRlICYmIGNyZWF0ZSAhPT0gMSAmJiBiYXNlICYmIGJhc2VbbmFtZV0gPT0gbnVsbCkge1xuICAgICAgICBiYXNlW25hbWVdID0ge307XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBiYXNlID8gYmFzZVtuYW1lXSA6IHVuZGVmaW5lZDtcbiAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB7Y29udGV4dDogYmFzZSwgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBjb21wdXRlZE1lbWJlcjogZnVuY3Rpb24obGVmdCwgcmlnaHQsIGNvbnRleHQsIGNyZWF0ZSkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgdmFyIGxocyA9IGxlZnQoc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgdmFyIHJocztcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIGlmIChsaHMgIT0gbnVsbCkge1xuICAgICAgICByaHMgPSByaWdodChzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHJocyA9IGdldFN0cmluZ1ZhbHVlKHJocyk7XG4gICAgICAgIGlmIChjcmVhdGUgJiYgY3JlYXRlICE9PSAxKSB7XG4gICAgICAgICAgaWYgKGxocyAmJiAhKGxoc1tyaHNdKSkge1xuICAgICAgICAgICAgbGhzW3Joc10gPSB7fTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFsdWUgPSBsaHNbcmhzXTtcbiAgICAgIH1cbiAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB7Y29udGV4dDogbGhzLCBuYW1lOiByaHMsIHZhbHVlOiB2YWx1ZX07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgbm9uQ29tcHV0ZWRNZW1iZXI6IGZ1bmN0aW9uKGxlZnQsIHJpZ2h0LCBjb250ZXh0LCBjcmVhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpIHtcbiAgICAgIHZhciBsaHMgPSBsZWZ0KHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKTtcbiAgICAgIGlmIChjcmVhdGUgJiYgY3JlYXRlICE9PSAxKSB7XG4gICAgICAgIGlmIChsaHMgJiYgbGhzW3JpZ2h0XSA9PSBudWxsKSB7XG4gICAgICAgICAgbGhzW3JpZ2h0XSA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWUgPSBsaHMgIT0gbnVsbCA/IGxoc1tyaWdodF0gOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICByZXR1cm4ge2NvbnRleHQ6IGxocywgbmFtZTogcmlnaHQsIHZhbHVlOiB2YWx1ZX07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgaW5wdXRzOiBmdW5jdGlvbihpbnB1dCwgd2F0Y2hJZCkge1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgdmFsdWUsIGxvY2FscywgaW5wdXRzKSB7XG4gICAgICBpZiAoaW5wdXRzKSByZXR1cm4gaW5wdXRzW3dhdGNoSWRdO1xuICAgICAgcmV0dXJuIGlucHV0KHNjb3BlLCB2YWx1ZSwgbG9jYWxzKTtcbiAgICB9O1xuICB9XG59O1xuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBQYXJzZXIobGV4ZXIsICRmaWx0ZXIsIG9wdGlvbnMpIHtcbiAgdGhpcy5hc3QgPSBuZXcgQVNUKGxleGVyLCBvcHRpb25zKTtcbiAgdGhpcy5hc3RDb21waWxlciA9IG9wdGlvbnMuY3NwID8gbmV3IEFTVEludGVycHJldGVyKCRmaWx0ZXIpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEFTVENvbXBpbGVyKCRmaWx0ZXIpO1xufVxuXG5QYXJzZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogUGFyc2VyLFxuXG4gIHBhcnNlOiBmdW5jdGlvbih0ZXh0KSB7XG4gICAgdmFyIGFzdCA9IHRoaXMuYXN0LmFzdCh0ZXh0KTtcbiAgICB2YXIgZm4gPSB0aGlzLmFzdENvbXBpbGVyLmNvbXBpbGUoYXN0KTtcbiAgICBmbi5saXRlcmFsID0gaXNMaXRlcmFsKGFzdCk7XG4gICAgZm4uY29uc3RhbnQgPSBpc0NvbnN0YW50KGFzdCk7XG4gICAgcmV0dXJuIGZuO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXRWYWx1ZU9mKHZhbHVlKSB7XG4gIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlLnZhbHVlT2YpID8gdmFsdWUudmFsdWVPZigpIDogb2JqZWN0VmFsdWVPZi5jYWxsKHZhbHVlKTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHBhcnNlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIENvbnZlcnRzIEFuZ3VsYXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaW50byBhIGZ1bmN0aW9uLlxuICpcbiAqIGBgYGpzXG4gKiAgIHZhciBnZXR0ZXIgPSAkcGFyc2UoJ3VzZXIubmFtZScpO1xuICogICB2YXIgc2V0dGVyID0gZ2V0dGVyLmFzc2lnbjtcbiAqICAgdmFyIGNvbnRleHQgPSB7dXNlcjp7bmFtZTonYW5ndWxhcid9fTtcbiAqICAgdmFyIGxvY2FscyA9IHt1c2VyOntuYW1lOidsb2NhbCd9fTtcbiAqXG4gKiAgIGV4cGVjdChnZXR0ZXIoY29udGV4dCkpLnRvRXF1YWwoJ2FuZ3VsYXInKTtcbiAqICAgc2V0dGVyKGNvbnRleHQsICduZXdWYWx1ZScpO1xuICogICBleHBlY3QoY29udGV4dC51c2VyLm5hbWUpLnRvRXF1YWwoJ25ld1ZhbHVlJyk7XG4gKiAgIGV4cGVjdChnZXR0ZXIoY29udGV4dCwgbG9jYWxzKSkudG9FcXVhbCgnbG9jYWwnKTtcbiAqIGBgYFxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICogQHJldHVybnMge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IGEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAqXG4gKiAgICAqIGBjb250ZXh0YCDigJMgYHtvYmplY3R9YCDigJMgYW4gb2JqZWN0IGFnYWluc3Qgd2hpY2ggYW55IGV4cHJlc3Npb25zIGVtYmVkZGVkIGluIHRoZSBzdHJpbmdzXG4gKiAgICAgIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW5cbiAqICAgICAgYGNvbnRleHRgLlxuICpcbiAqICAgIFRoZSByZXR1cm5lZCBmdW5jdGlvbiBhbHNvIGhhcyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKiAgICAgICogYGxpdGVyYWxgIOKAkyBge2Jvb2xlYW59YCDigJMgd2hldGhlciB0aGUgZXhwcmVzc2lvbidzIHRvcC1sZXZlbCBub2RlIGlzIGEgSmF2YVNjcmlwdFxuICogICAgICAgIGxpdGVyYWwuXG4gKiAgICAgICogYGNvbnN0YW50YCDigJMgYHtib29sZWFufWAg4oCTIHdoZXRoZXIgdGhlIGV4cHJlc3Npb24gaXMgbWFkZSBlbnRpcmVseSBvZiBKYXZhU2NyaXB0XG4gKiAgICAgICAgY29uc3RhbnQgbGl0ZXJhbHMuXG4gKiAgICAgICogYGFzc2lnbmAg4oCTIGB7P2Z1bmN0aW9uKGNvbnRleHQsIHZhbHVlKX1gIOKAkyBpZiB0aGUgZXhwcmVzc2lvbiBpcyBhc3NpZ25hYmxlLCB0aGlzIHdpbGwgYmVcbiAqICAgICAgICBzZXQgdG8gYSBmdW5jdGlvbiB0byBjaGFuZ2UgaXRzIHZhbHVlIG9uIHRoZSBnaXZlbiBjb250ZXh0LlxuICpcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkcGFyc2VQcm92aWRlclxuICogQHRoaXNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGAkcGFyc2VQcm92aWRlcmAgY2FuIGJlIHVzZWQgZm9yIGNvbmZpZ3VyaW5nIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHRoZSB7QGxpbmsgbmcuJHBhcnNlICRwYXJzZX1cbiAqICBzZXJ2aWNlLlxuICovXG5mdW5jdGlvbiAkUGFyc2VQcm92aWRlcigpIHtcbiAgdmFyIGNhY2hlID0gY3JlYXRlTWFwKCk7XG4gIHZhciBsaXRlcmFscyA9IHtcbiAgICAndHJ1ZSc6IHRydWUsXG4gICAgJ2ZhbHNlJzogZmFsc2UsXG4gICAgJ251bGwnOiBudWxsLFxuICAgICd1bmRlZmluZWQnOiB1bmRlZmluZWRcbiAgfTtcbiAgdmFyIGlkZW50U3RhcnQsIGlkZW50Q29udGludWU7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHBhcnNlUHJvdmlkZXIjYWRkTGl0ZXJhbFxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogQ29uZmlndXJlICRwYXJzZSBzZXJ2aWNlIHRvIGFkZCBsaXRlcmFsIHZhbHVlcyB0aGF0IHdpbGwgYmUgcHJlc2VudCBhcyBsaXRlcmFsIGF0IGV4cHJlc3Npb25zLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGl0ZXJhbE5hbWUgVG9rZW4gZm9yIHRoZSBsaXRlcmFsIHZhbHVlLiBUaGUgbGl0ZXJhbCBuYW1lIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBsaXRlcmFsIG5hbWUuXG4gICAqIEBwYXJhbSB7Kn0gbGl0ZXJhbFZhbHVlIFZhbHVlIGZvciB0aGlzIGxpdGVyYWwuIEFsbCBsaXRlcmFsIHZhbHVlcyBtdXN0IGJlIHByaW1pdGl2ZXMgb3IgYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqKi9cbiAgdGhpcy5hZGRMaXRlcmFsID0gZnVuY3Rpb24obGl0ZXJhbE5hbWUsIGxpdGVyYWxWYWx1ZSkge1xuICAgIGxpdGVyYWxzW2xpdGVyYWxOYW1lXSA9IGxpdGVyYWxWYWx1ZTtcbiAgfTtcblxuIC8qKlxuICAqIEBuZ2RvYyBtZXRob2RcbiAgKiBAbmFtZSAkcGFyc2VQcm92aWRlciNzZXRJZGVudGlmaWVyRm5zXG4gICpcbiAgKiBAZGVzY3JpcHRpb25cbiAgKlxuICAqIEFsbG93cyBkZWZpbmluZyB0aGUgc2V0IG9mIGNoYXJhY3RlcnMgdGhhdCBhcmUgYWxsb3dlZCBpbiBBbmd1bGFyIGV4cHJlc3Npb25zLiBUaGUgZnVuY3Rpb25cbiAgKiBgaWRlbnRpZmllclN0YXJ0YCB3aWxsIGdldCBjYWxsZWQgdG8ga25vdyBpZiBhIGdpdmVuIGNoYXJhY3RlciBpcyBhIHZhbGlkIGNoYXJhY3RlciB0byBiZSB0aGVcbiAgKiBmaXJzdCBjaGFyYWN0ZXIgZm9yIGFuIGlkZW50aWZpZXIuIFRoZSBmdW5jdGlvbiBgaWRlbnRpZmllckNvbnRpbnVlYCB3aWxsIGdldCBjYWxsZWQgdG8ga25vdyBpZlxuICAqIGEgZ2l2ZW4gY2hhcmFjdGVyIGlzIGEgdmFsaWQgY2hhcmFjdGVyIHRvIGJlIGEgZm9sbG93LXVwIGlkZW50aWZpZXIgY2hhcmFjdGVyLiBUaGUgZnVuY3Rpb25zXG4gICogYGlkZW50aWZpZXJTdGFydGAgYW5kIGBpZGVudGlmaWVyQ29udGludWVgIHdpbGwgcmVjZWl2ZSBhcyBhcmd1bWVudHMgdGhlIHNpbmdsZSBjaGFyYWN0ZXIgdG8gYmVcbiAgKiBpZGVudGlmaWVyIGFuZCB0aGUgY2hhcmFjdGVyIGNvZGUgcG9pbnQuIFRoZXNlIGFyZ3VtZW50cyB3aWxsIGJlIGBzdHJpbmdgIGFuZCBgbnVtZXJpY2AuIEtlZXAgaW5cbiAgKiBtaW5kIHRoYXQgdGhlIGBzdHJpbmdgIHBhcmFtZXRlciBjYW4gYmUgdHdvIGNoYXJhY3RlcnMgbG9uZyBkZXBlbmRpbmcgb24gdGhlIGNoYXJhY3RlclxuICAqIHJlcHJlc2VudGF0aW9uLiBJdCBpcyBleHBlY3RlZCBmb3IgdGhlIGZ1bmN0aW9uIHRvIHJldHVybiBgdHJ1ZWAgb3IgYGZhbHNlYCwgd2hldGhlciB0aGF0XG4gICogY2hhcmFjdGVyIGlzIGFsbG93ZWQgb3Igbm90LlxuICAqXG4gICogU2luY2UgdGhpcyBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBleHRlbnNpdmVseSwga2VlcCB0aGUgaW1wbGVtZW50YXRpb24gb2YgdGhlc2UgZnVuY3Rpb25zIGZhc3QsXG4gICogYXMgdGhlIHBlcmZvcm1hbmNlIG9mIHRoZXNlIGZ1bmN0aW9ucyBoYXZlIGEgZGlyZWN0IGltcGFjdCBvbiB0aGUgZXhwcmVzc2lvbnMgcGFyc2luZyBzcGVlZC5cbiAgKlxuICAqIEBwYXJhbSB7ZnVuY3Rpb249fSBpZGVudGlmaWVyU3RhcnQgVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBkZWNpZGUgd2hldGhlciB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGlzXG4gICogICBhIHZhbGlkIGlkZW50aWZpZXIgc3RhcnQgY2hhcmFjdGVyLlxuICAqIEBwYXJhbSB7ZnVuY3Rpb249fSBpZGVudGlmaWVyQ29udGludWUgVGhlIGZ1bmN0aW9uIHRoYXQgd2lsbCBkZWNpZGUgd2hldGhlciB0aGUgZ2l2ZW4gY2hhcmFjdGVyIGlzXG4gICogICBhIHZhbGlkIGlkZW50aWZpZXIgY29udGludWUgY2hhcmFjdGVyLlxuICAqL1xuICB0aGlzLnNldElkZW50aWZpZXJGbnMgPSBmdW5jdGlvbihpZGVudGlmaWVyU3RhcnQsIGlkZW50aWZpZXJDb250aW51ZSkge1xuICAgIGlkZW50U3RhcnQgPSBpZGVudGlmaWVyU3RhcnQ7XG4gICAgaWRlbnRDb250aW51ZSA9IGlkZW50aWZpZXJDb250aW51ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB0aGlzLiRnZXQgPSBbJyRmaWx0ZXInLCBmdW5jdGlvbigkZmlsdGVyKSB7XG4gICAgdmFyIG5vVW5zYWZlRXZhbCA9IGNzcCgpLm5vVW5zYWZlRXZhbDtcbiAgICB2YXIgJHBhcnNlT3B0aW9ucyA9IHtcbiAgICAgICAgICBjc3A6IG5vVW5zYWZlRXZhbCxcbiAgICAgICAgICBsaXRlcmFsczogY29weShsaXRlcmFscyksXG4gICAgICAgICAgaXNJZGVudGlmaWVyU3RhcnQ6IGlzRnVuY3Rpb24oaWRlbnRTdGFydCkgJiYgaWRlbnRTdGFydCxcbiAgICAgICAgICBpc0lkZW50aWZpZXJDb250aW51ZTogaXNGdW5jdGlvbihpZGVudENvbnRpbnVlKSAmJiBpZGVudENvbnRpbnVlXG4gICAgICAgIH07XG4gICAgcmV0dXJuICRwYXJzZTtcblxuICAgIGZ1bmN0aW9uICRwYXJzZShleHAsIGludGVyY2VwdG9yRm4pIHtcbiAgICAgIHZhciBwYXJzZWRFeHByZXNzaW9uLCBvbmVUaW1lLCBjYWNoZUtleTtcblxuICAgICAgc3dpdGNoICh0eXBlb2YgZXhwKSB7XG4gICAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgICAgZXhwID0gZXhwLnRyaW0oKTtcbiAgICAgICAgICBjYWNoZUtleSA9IGV4cDtcblxuICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24gPSBjYWNoZVtjYWNoZUtleV07XG5cbiAgICAgICAgICBpZiAoIXBhcnNlZEV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIGlmIChleHAuY2hhckF0KDApID09PSAnOicgJiYgZXhwLmNoYXJBdCgxKSA9PT0gJzonKSB7XG4gICAgICAgICAgICAgIG9uZVRpbWUgPSB0cnVlO1xuICAgICAgICAgICAgICBleHAgPSBleHAuc3Vic3RyaW5nKDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGxleGVyID0gbmV3IExleGVyKCRwYXJzZU9wdGlvbnMpO1xuICAgICAgICAgICAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIobGV4ZXIsICRmaWx0ZXIsICRwYXJzZU9wdGlvbnMpO1xuICAgICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbiA9IHBhcnNlci5wYXJzZShleHApO1xuICAgICAgICAgICAgaWYgKHBhcnNlZEV4cHJlc3Npb24uY29uc3RhbnQpIHtcbiAgICAgICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgPSBjb25zdGFudFdhdGNoRGVsZWdhdGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9uZVRpbWUpIHtcbiAgICAgICAgICAgICAgcGFyc2VkRXhwcmVzc2lvbi4kJHdhdGNoRGVsZWdhdGUgPSBwYXJzZWRFeHByZXNzaW9uLmxpdGVyYWwgP1xuICAgICAgICAgICAgICAgICAgb25lVGltZUxpdGVyYWxXYXRjaERlbGVnYXRlIDogb25lVGltZVdhdGNoRGVsZWdhdGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzKSB7XG4gICAgICAgICAgICAgIHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlID0gaW5wdXRzV2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhY2hlW2NhY2hlS2V5XSA9IHBhcnNlZEV4cHJlc3Npb247XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhZGRJbnRlcmNlcHRvcihwYXJzZWRFeHByZXNzaW9uLCBpbnRlcmNlcHRvckZuKTtcblxuICAgICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgICAgcmV0dXJuIGFkZEludGVyY2VwdG9yKGV4cCwgaW50ZXJjZXB0b3JGbik7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gYWRkSW50ZXJjZXB0b3Iobm9vcCwgaW50ZXJjZXB0b3JGbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayhuZXdWYWx1ZSwgb2xkVmFsdWVPZlZhbHVlLCBjb21wYXJlT2JqZWN0SWRlbnRpdHkpIHtcblxuICAgICAgaWYgKG5ld1ZhbHVlID09IG51bGwgfHwgb2xkVmFsdWVPZlZhbHVlID09IG51bGwpIHsgLy8gbnVsbC91bmRlZmluZWRcbiAgICAgICAgcmV0dXJuIG5ld1ZhbHVlID09PSBvbGRWYWx1ZU9mVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgbmV3VmFsdWUgPT09ICdvYmplY3QnKSB7XG5cbiAgICAgICAgLy8gYXR0ZW1wdCB0byBjb252ZXJ0IHRoZSB2YWx1ZSB0byBhIHByaW1pdGl2ZSB0eXBlXG4gICAgICAgIC8vIFRPRE8oZG9jcyk6IGFkZCBhIG5vdGUgdG8gZG9jcyB0aGF0IGJ5IGltcGxlbWVudGluZyB2YWx1ZU9mIGV2ZW4gb2JqZWN0cyBhbmQgYXJyYXlzIGNhblxuICAgICAgICAvLyAgICAgICAgICAgICBiZSBjaGVhcGx5IGRpcnR5LWNoZWNrZWRcbiAgICAgICAgbmV3VmFsdWUgPSBnZXRWYWx1ZU9mKG5ld1ZhbHVlKTtcblxuICAgICAgICBpZiAodHlwZW9mIG5ld1ZhbHVlID09PSAnb2JqZWN0JyAmJiAhY29tcGFyZU9iamVjdElkZW50aXR5KSB7XG4gICAgICAgICAgLy8gb2JqZWN0cy9hcnJheXMgYXJlIG5vdCBzdXBwb3J0ZWQgLSBkZWVwLXdhdGNoaW5nIHRoZW0gd291bGQgYmUgdG9vIGV4cGVuc2l2ZVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGZhbGwtdGhyb3VnaCB0byB0aGUgcHJpbWl0aXZlIGVxdWFsaXR5IGNoZWNrXG4gICAgICB9XG5cbiAgICAgIC8vUHJpbWl0aXZlIG9yIE5hTlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgcmV0dXJuIG5ld1ZhbHVlID09PSBvbGRWYWx1ZU9mVmFsdWUgfHwgKG5ld1ZhbHVlICE9PSBuZXdWYWx1ZSAmJiBvbGRWYWx1ZU9mVmFsdWUgIT09IG9sZFZhbHVlT2ZWYWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5wdXRzV2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uLCBwcmV0dHlQcmludEV4cHJlc3Npb24pIHtcbiAgICAgIHZhciBpbnB1dEV4cHJlc3Npb25zID0gcGFyc2VkRXhwcmVzc2lvbi5pbnB1dHM7XG4gICAgICB2YXIgbGFzdFJlc3VsdDtcblxuICAgICAgaWYgKGlucHV0RXhwcmVzc2lvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHZhciBvbGRJbnB1dFZhbHVlT2YgPSBleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrOyAvLyBpbml0IHRvIHNvbWV0aGluZyB1bmlxdWUgc28gdGhhdCBlcXVhbHMgY2hlY2sgZmFpbHNcbiAgICAgICAgaW5wdXRFeHByZXNzaW9ucyA9IGlucHV0RXhwcmVzc2lvbnNbMF07XG4gICAgICAgIHJldHVybiBzY29wZS4kd2F0Y2goZnVuY3Rpb24gZXhwcmVzc2lvbklucHV0V2F0Y2goc2NvcGUpIHtcbiAgICAgICAgICB2YXIgbmV3SW5wdXRWYWx1ZSA9IGlucHV0RXhwcmVzc2lvbnMoc2NvcGUpO1xuICAgICAgICAgIGlmICghZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayhuZXdJbnB1dFZhbHVlLCBvbGRJbnB1dFZhbHVlT2YsIGlucHV0RXhwcmVzc2lvbnMuaXNQdXJlKSkge1xuICAgICAgICAgICAgbGFzdFJlc3VsdCA9IHBhcnNlZEV4cHJlc3Npb24oc2NvcGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBbbmV3SW5wdXRWYWx1ZV0pO1xuICAgICAgICAgICAgb2xkSW5wdXRWYWx1ZU9mID0gbmV3SW5wdXRWYWx1ZSAmJiBnZXRWYWx1ZU9mKG5ld0lucHV0VmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbGFzdFJlc3VsdDtcbiAgICAgICAgfSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwcmV0dHlQcmludEV4cHJlc3Npb24pO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2xkSW5wdXRWYWx1ZU9mVmFsdWVzID0gW107XG4gICAgICB2YXIgb2xkSW5wdXRWYWx1ZXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGlucHV0RXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICBvbGRJbnB1dFZhbHVlT2ZWYWx1ZXNbaV0gPSBleHByZXNzaW9uSW5wdXREaXJ0eUNoZWNrOyAvLyBpbml0IHRvIHNvbWV0aGluZyB1bmlxdWUgc28gdGhhdCBlcXVhbHMgY2hlY2sgZmFpbHNcbiAgICAgICAgb2xkSW5wdXRWYWx1ZXNbaV0gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIGV4cHJlc3Npb25JbnB1dHNXYXRjaChzY29wZSkge1xuICAgICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGlucHV0RXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIHZhciBuZXdJbnB1dFZhbHVlID0gaW5wdXRFeHByZXNzaW9uc1tpXShzY29wZSk7XG4gICAgICAgICAgaWYgKGNoYW5nZWQgfHwgKGNoYW5nZWQgPSAhZXhwcmVzc2lvbklucHV0RGlydHlDaGVjayhuZXdJbnB1dFZhbHVlLCBvbGRJbnB1dFZhbHVlT2ZWYWx1ZXNbaV0sIGlucHV0RXhwcmVzc2lvbnNbaV0uaXNQdXJlKSkpIHtcbiAgICAgICAgICAgIG9sZElucHV0VmFsdWVzW2ldID0gbmV3SW5wdXRWYWx1ZTtcbiAgICAgICAgICAgIG9sZElucHV0VmFsdWVPZlZhbHVlc1tpXSA9IG5ld0lucHV0VmFsdWUgJiYgZ2V0VmFsdWVPZihuZXdJbnB1dFZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgIGxhc3RSZXN1bHQgPSBwYXJzZWRFeHByZXNzaW9uKHNjb3BlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgb2xkSW5wdXRWYWx1ZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxhc3RSZXN1bHQ7XG4gICAgICB9LCBsaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHksIHByZXR0eVByaW50RXhwcmVzc2lvbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25lVGltZVdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbiwgcHJldHR5UHJpbnRFeHByZXNzaW9uKSB7XG4gICAgICB2YXIgdW53YXRjaCwgbGFzdFZhbHVlO1xuICAgICAgaWYgKHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzKSB7XG4gICAgICAgIHVud2F0Y2ggPSBpbnB1dHNXYXRjaERlbGVnYXRlKHNjb3BlLCBvbmVUaW1lTGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uLCBwcmV0dHlQcmludEV4cHJlc3Npb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdW53YXRjaCA9IHNjb3BlLiR3YXRjaChvbmVUaW1lV2F0Y2gsIG9uZVRpbWVMaXN0ZW5lciwgb2JqZWN0RXF1YWxpdHkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVud2F0Y2g7XG5cbiAgICAgIGZ1bmN0aW9uIG9uZVRpbWVXYXRjaChzY29wZSkge1xuICAgICAgICByZXR1cm4gcGFyc2VkRXhwcmVzc2lvbihzY29wZSk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBvbmVUaW1lTGlzdGVuZXIodmFsdWUsIG9sZCwgc2NvcGUpIHtcbiAgICAgICAgbGFzdFZhbHVlID0gdmFsdWU7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGxpc3RlbmVyKSkge1xuICAgICAgICAgIGxpc3RlbmVyKHZhbHVlLCBvbGQsIHNjb3BlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgIHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChpc0RlZmluZWQobGFzdFZhbHVlKSkge1xuICAgICAgICAgICAgICB1bndhdGNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmVUaW1lTGl0ZXJhbFdhdGNoRGVsZWdhdGUoc2NvcGUsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcGFyc2VkRXhwcmVzc2lvbikge1xuICAgICAgdmFyIHVud2F0Y2gsIGxhc3RWYWx1ZTtcbiAgICAgIHVud2F0Y2ggPSBzY29wZS4kd2F0Y2goZnVuY3Rpb24gb25lVGltZVdhdGNoKHNjb3BlKSB7XG4gICAgICAgIHJldHVybiBwYXJzZWRFeHByZXNzaW9uKHNjb3BlKTtcbiAgICAgIH0sIGZ1bmN0aW9uIG9uZVRpbWVMaXN0ZW5lcih2YWx1ZSwgb2xkLCBzY29wZSkge1xuICAgICAgICBsYXN0VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24obGlzdGVuZXIpKSB7XG4gICAgICAgICAgbGlzdGVuZXIodmFsdWUsIG9sZCwgc2NvcGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FsbERlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgc2NvcGUuJCRwb3N0RGlnZXN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKGlzQWxsRGVmaW5lZChsYXN0VmFsdWUpKSB1bndhdGNoKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sIG9iamVjdEVxdWFsaXR5KTtcblxuICAgICAgcmV0dXJuIHVud2F0Y2g7XG5cbiAgICAgIGZ1bmN0aW9uIGlzQWxsRGVmaW5lZCh2YWx1ZSkge1xuICAgICAgICB2YXIgYWxsRGVmaW5lZCA9IHRydWU7XG4gICAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICAgIGlmICghaXNEZWZpbmVkKHZhbCkpIGFsbERlZmluZWQgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBhbGxEZWZpbmVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50V2F0Y2hEZWxlZ2F0ZShzY29wZSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBwYXJzZWRFeHByZXNzaW9uKSB7XG4gICAgICB2YXIgdW53YXRjaCA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiBjb25zdGFudFdhdGNoKHNjb3BlKSB7XG4gICAgICAgIHVud2F0Y2goKTtcbiAgICAgICAgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb24oc2NvcGUpO1xuICAgICAgfSwgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5KTtcbiAgICAgIHJldHVybiB1bndhdGNoO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZEludGVyY2VwdG9yKHBhcnNlZEV4cHJlc3Npb24sIGludGVyY2VwdG9yRm4pIHtcbiAgICAgIGlmICghaW50ZXJjZXB0b3JGbikgcmV0dXJuIHBhcnNlZEV4cHJlc3Npb247XG4gICAgICB2YXIgd2F0Y2hEZWxlZ2F0ZSA9IHBhcnNlZEV4cHJlc3Npb24uJCR3YXRjaERlbGVnYXRlO1xuICAgICAgdmFyIHVzZUlucHV0cyA9IGZhbHNlO1xuXG4gICAgICB2YXIgcmVndWxhcldhdGNoID1cbiAgICAgICAgICB3YXRjaERlbGVnYXRlICE9PSBvbmVUaW1lTGl0ZXJhbFdhdGNoRGVsZWdhdGUgJiZcbiAgICAgICAgICB3YXRjaERlbGVnYXRlICE9PSBvbmVUaW1lV2F0Y2hEZWxlZ2F0ZTtcblxuICAgICAgdmFyIGZuID0gcmVndWxhcldhdGNoID8gZnVuY3Rpb24gcmVndWxhckludGVyY2VwdGVkRXhwcmVzc2lvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cykge1xuICAgICAgICB2YXIgdmFsdWUgPSB1c2VJbnB1dHMgJiYgaW5wdXRzID8gaW5wdXRzWzBdIDogcGFyc2VkRXhwcmVzc2lvbihzY29wZSwgbG9jYWxzLCBhc3NpZ24sIGlucHV0cyk7XG4gICAgICAgIHJldHVybiBpbnRlcmNlcHRvckZuKHZhbHVlLCBzY29wZSwgbG9jYWxzKTtcbiAgICAgIH0gOiBmdW5jdGlvbiBvbmVUaW1lSW50ZXJjZXB0ZWRFeHByZXNzaW9uKHNjb3BlLCBsb2NhbHMsIGFzc2lnbiwgaW5wdXRzKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHBhcnNlZEV4cHJlc3Npb24oc2NvcGUsIGxvY2FscywgYXNzaWduLCBpbnB1dHMpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gaW50ZXJjZXB0b3JGbih2YWx1ZSwgc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgIC8vIHdlIG9ubHkgcmV0dXJuIHRoZSBpbnRlcmNlcHRvcidzIHJlc3VsdCBpZiB0aGVcbiAgICAgICAgLy8gaW5pdGlhbCB2YWx1ZSBpcyBkZWZpbmVkIChmb3IgYmluZC1vbmNlKVxuICAgICAgICByZXR1cm4gaXNEZWZpbmVkKHZhbHVlKSA/IHJlc3VsdCA6IHZhbHVlO1xuICAgICAgfTtcblxuICAgICAgLy8gUHJvcGFnYXRlICQkd2F0Y2hEZWxlZ2F0ZXMgb3RoZXIgdGhlbiBpbnB1dHNXYXRjaERlbGVnYXRlXG4gICAgICB1c2VJbnB1dHMgPSAhcGFyc2VkRXhwcmVzc2lvbi5pbnB1dHM7XG4gICAgICBpZiAod2F0Y2hEZWxlZ2F0ZSAmJiB3YXRjaERlbGVnYXRlICE9PSBpbnB1dHNXYXRjaERlbGVnYXRlKSB7XG4gICAgICAgIGZuLiQkd2F0Y2hEZWxlZ2F0ZSA9IHdhdGNoRGVsZWdhdGU7XG4gICAgICAgIGZuLmlucHV0cyA9IHBhcnNlZEV4cHJlc3Npb24uaW5wdXRzO1xuICAgICAgfSBlbHNlIGlmICghaW50ZXJjZXB0b3JGbi4kc3RhdGVmdWwpIHtcbiAgICAgICAgLy8gVHJlYXQgaW50ZXJjZXB0b3IgbGlrZSBmaWx0ZXJzIC0gYXNzdW1lIG5vbi1zdGF0ZWZ1bCBieSBkZWZhdWx0IGFuZCB1c2UgdGhlIGlucHV0c1dhdGNoRGVsZWdhdGVcbiAgICAgICAgZm4uJCR3YXRjaERlbGVnYXRlID0gaW5wdXRzV2F0Y2hEZWxlZ2F0ZTtcbiAgICAgICAgZm4uaW5wdXRzID0gcGFyc2VkRXhwcmVzc2lvbi5pbnB1dHMgPyBwYXJzZWRFeHByZXNzaW9uLmlucHV0cyA6IFtwYXJzZWRFeHByZXNzaW9uXTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZuLmlucHV0cykge1xuICAgICAgICBmbi5pbnB1dHMgPSBmbi5pbnB1dHMubWFwKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBpc1B1cmUgZmxhZyBvZiBpbnB1dHMgd2hlbiBpdCBpcyBub3QgYWJzb2x1dGUgYmVjYXVzZSB0aGV5IGFyZSBub3cgd3JhcHBlZCBpbiBhXG4gICAgICAgICAgICAgIC8vIHBvdGVudGlhbGx5IG5vbi1wdXJlIGludGVyY2VwdG9yIGZ1bmN0aW9uLlxuICAgICAgICAgICAgICBpZiAoZS5pc1B1cmUgPT09IFBVUklUWV9SRUxBVElWRSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBkZXB1cmlmaWVyKHMpIHsgcmV0dXJuIGUocyk7IH07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZuO1xuICAgIH1cbiAgfV07XG59XG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRxXG4gKiBAcmVxdWlyZXMgJHJvb3RTY29wZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSBzZXJ2aWNlIHRoYXQgaGVscHMgeW91IHJ1biBmdW5jdGlvbnMgYXN5bmNocm9ub3VzbHksIGFuZCB1c2UgdGhlaXIgcmV0dXJuIHZhbHVlcyAob3IgZXhjZXB0aW9ucylcbiAqIHdoZW4gdGhleSBhcmUgZG9uZSBwcm9jZXNzaW5nLlxuICpcbiAqIFRoaXMgaXMgYSBbUHJvbWlzZXMvQStdKGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vKS1jb21wbGlhbnQgaW1wbGVtZW50YXRpb24gb2YgcHJvbWlzZXMvZGVmZXJyZWRcbiAqIG9iamVjdHMgaW5zcGlyZWQgYnkgW0tyaXMgS293YWwncyBRXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3EpLlxuICpcbiAqICRxIGNhbiBiZSB1c2VkIGluIHR3byBmYXNoaW9ucyAtLS0gb25lIHdoaWNoIGlzIG1vcmUgc2ltaWxhciB0byBLcmlzIEtvd2FsJ3MgUSBvciBqUXVlcnkncyBEZWZlcnJlZFxuICogaW1wbGVtZW50YXRpb25zLCBhbmQgdGhlIG90aGVyIHdoaWNoIHJlc2VtYmxlcyBFUzYgKEVTMjAxNSkgcHJvbWlzZXMgdG8gc29tZSBkZWdyZWUuXG4gKlxuICogIyAkcSBjb25zdHJ1Y3RvclxuICpcbiAqIFRoZSBzdHJlYW1saW5lZCBFUzYgc3R5bGUgcHJvbWlzZSBpcyBlc3NlbnRpYWxseSBqdXN0IHVzaW5nICRxIGFzIGEgY29uc3RydWN0b3Igd2hpY2ggdGFrZXMgYSBgcmVzb2x2ZXJgXG4gKiBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQuIFRoaXMgaXMgc2ltaWxhciB0byB0aGUgbmF0aXZlIFByb21pc2UgaW1wbGVtZW50YXRpb24gZnJvbSBFUzYsXG4gKiBzZWUgW01ETl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZSkuXG4gKlxuICogV2hpbGUgdGhlIGNvbnN0cnVjdG9yLXN0eWxlIHVzZSBpcyBzdXBwb3J0ZWQsIG5vdCBhbGwgb2YgdGhlIHN1cHBvcnRpbmcgbWV0aG9kcyBmcm9tIEVTNiBwcm9taXNlcyBhcmVcbiAqIGF2YWlsYWJsZSB5ZXQuXG4gKlxuICogSXQgY2FuIGJlIHVzZWQgbGlrZSBzbzpcbiAqXG4gKiBgYGBqc1xuICogICAvLyBmb3IgdGhlIHB1cnBvc2Ugb2YgdGhpcyBleGFtcGxlIGxldCdzIGFzc3VtZSB0aGF0IHZhcmlhYmxlcyBgJHFgIGFuZCBgb2tUb0dyZWV0YFxuICogICAvLyBhcmUgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGxleGljYWwgc2NvcGUgKHRoZXkgY291bGQgaGF2ZSBiZWVuIGluamVjdGVkIG9yIHBhc3NlZCBpbikuXG4gKlxuICogICBmdW5jdGlvbiBhc3luY0dyZWV0KG5hbWUpIHtcbiAqICAgICAvLyBwZXJmb3JtIHNvbWUgYXN5bmNocm9ub3VzIG9wZXJhdGlvbiwgcmVzb2x2ZSBvciByZWplY3QgdGhlIHByb21pc2Ugd2hlbiBhcHByb3ByaWF0ZS5cbiAqICAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gKiAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgICAgICBpZiAob2tUb0dyZWV0KG5hbWUpKSB7XG4gKiAgICAgICAgICAgcmVzb2x2ZSgnSGVsbG8sICcgKyBuYW1lICsgJyEnKTtcbiAqICAgICAgICAgfSBlbHNlIHtcbiAqICAgICAgICAgICByZWplY3QoJ0dyZWV0aW5nICcgKyBuYW1lICsgJyBpcyBub3QgYWxsb3dlZC4nKTtcbiAqICAgICAgICAgfVxuICogICAgICAgfSwgMTAwMCk7XG4gKiAgICAgfSk7XG4gKiAgIH1cbiAqXG4gKiAgIHZhciBwcm9taXNlID0gYXN5bmNHcmVldCgnUm9iaW4gSG9vZCcpO1xuICogICBwcm9taXNlLnRoZW4oZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAqICAgICBhbGVydCgnU3VjY2VzczogJyArIGdyZWV0aW5nKTtcbiAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gKiAgICAgYWxlcnQoJ0ZhaWxlZDogJyArIHJlYXNvbik7XG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogTm90ZTogcHJvZ3Jlc3Mvbm90aWZ5IGNhbGxiYWNrcyBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgdmlhIHRoZSBFUzYtc3R5bGUgaW50ZXJmYWNlLlxuICpcbiAqIE5vdGU6IHVubGlrZSBFUzYgYmVoYXZpb3IsIGFuIGV4Y2VwdGlvbiB0aHJvd24gaW4gdGhlIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIHdpbGwgTk9UIGltcGxpY2l0bHkgcmVqZWN0IHRoZSBwcm9taXNlLlxuICpcbiAqIEhvd2V2ZXIsIHRoZSBtb3JlIHRyYWRpdGlvbmFsIENvbW1vbkpTLXN0eWxlIHVzYWdlIGlzIHN0aWxsIGF2YWlsYWJsZSwgYW5kIGRvY3VtZW50ZWQgYmVsb3cuXG4gKlxuICogW1RoZSBDb21tb25KUyBQcm9taXNlIHByb3Bvc2FsXShodHRwOi8vd2lraS5jb21tb25qcy5vcmcvd2lraS9Qcm9taXNlcykgZGVzY3JpYmVzIGEgcHJvbWlzZSBhcyBhblxuICogaW50ZXJmYWNlIGZvciBpbnRlcmFjdGluZyB3aXRoIGFuIG9iamVjdCB0aGF0IHJlcHJlc2VudHMgdGhlIHJlc3VsdCBvZiBhbiBhY3Rpb24gdGhhdCBpc1xuICogcGVyZm9ybWVkIGFzeW5jaHJvbm91c2x5LCBhbmQgbWF5IG9yIG1heSBub3QgYmUgZmluaXNoZWQgYXQgYW55IGdpdmVuIHBvaW50IGluIHRpbWUuXG4gKlxuICogRnJvbSB0aGUgcGVyc3BlY3RpdmUgb2YgZGVhbGluZyB3aXRoIGVycm9yIGhhbmRsaW5nLCBkZWZlcnJlZCBhbmQgcHJvbWlzZSBBUElzIGFyZSB0b1xuICogYXN5bmNocm9ub3VzIHByb2dyYW1taW5nIHdoYXQgYHRyeWAsIGBjYXRjaGAgYW5kIGB0aHJvd2Aga2V5d29yZHMgYXJlIHRvIHN5bmNocm9ub3VzIHByb2dyYW1taW5nLlxuICpcbiAqIGBgYGpzXG4gKiAgIC8vIGZvciB0aGUgcHVycG9zZSBvZiB0aGlzIGV4YW1wbGUgbGV0J3MgYXNzdW1lIHRoYXQgdmFyaWFibGVzIGAkcWAgYW5kIGBva1RvR3JlZXRgXG4gKiAgIC8vIGFyZSBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgbGV4aWNhbCBzY29wZSAodGhleSBjb3VsZCBoYXZlIGJlZW4gaW5qZWN0ZWQgb3IgcGFzc2VkIGluKS5cbiAqXG4gKiAgIGZ1bmN0aW9uIGFzeW5jR3JlZXQobmFtZSkge1xuICogICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gKlxuICogICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gKiAgICAgICBkZWZlcnJlZC5ub3RpZnkoJ0Fib3V0IHRvIGdyZWV0ICcgKyBuYW1lICsgJy4nKTtcbiAqXG4gKiAgICAgICBpZiAob2tUb0dyZWV0KG5hbWUpKSB7XG4gKiAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoJ0hlbGxvLCAnICsgbmFtZSArICchJyk7XG4gKiAgICAgICB9IGVsc2Uge1xuICogICAgICAgICBkZWZlcnJlZC5yZWplY3QoJ0dyZWV0aW5nICcgKyBuYW1lICsgJyBpcyBub3QgYWxsb3dlZC4nKTtcbiAqICAgICAgIH1cbiAqICAgICB9LCAxMDAwKTtcbiAqXG4gKiAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gKiAgIH1cbiAqXG4gKiAgIHZhciBwcm9taXNlID0gYXN5bmNHcmVldCgnUm9iaW4gSG9vZCcpO1xuICogICBwcm9taXNlLnRoZW4oZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAqICAgICBhbGVydCgnU3VjY2VzczogJyArIGdyZWV0aW5nKTtcbiAqICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gKiAgICAgYWxlcnQoJ0ZhaWxlZDogJyArIHJlYXNvbik7XG4gKiAgIH0sIGZ1bmN0aW9uKHVwZGF0ZSkge1xuICogICAgIGFsZXJ0KCdHb3Qgbm90aWZpY2F0aW9uOiAnICsgdXBkYXRlKTtcbiAqICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBBdCBmaXJzdCBpdCBtaWdodCBub3QgYmUgb2J2aW91cyB3aHkgdGhpcyBleHRyYSBjb21wbGV4aXR5IGlzIHdvcnRoIHRoZSB0cm91YmxlLiBUaGUgcGF5b2ZmXG4gKiBjb21lcyBpbiB0aGUgd2F5IG9mIGd1YXJhbnRlZXMgdGhhdCBwcm9taXNlIGFuZCBkZWZlcnJlZCBBUElzIG1ha2UsIHNlZVxuICogaHR0cHM6Ly9naXRodWIuY29tL2tyaXNrb3dhbC91bmNvbW1vbmpzL2Jsb2IvbWFzdGVyL3Byb21pc2VzL3NwZWNpZmljYXRpb24ubWQuXG4gKlxuICogQWRkaXRpb25hbGx5IHRoZSBwcm9taXNlIGFwaSBhbGxvd3MgZm9yIGNvbXBvc2l0aW9uIHRoYXQgaXMgdmVyeSBoYXJkIHRvIGRvIHdpdGggdGhlXG4gKiB0cmFkaXRpb25hbCBjYWxsYmFjayAoW0NQU10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db250aW51YXRpb24tcGFzc2luZ19zdHlsZSkpIGFwcHJvYWNoLlxuICogRm9yIG1vcmUgb24gdGhpcyBwbGVhc2Ugc2VlIHRoZSBbUSBkb2N1bWVudGF0aW9uXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3EpIGVzcGVjaWFsbHkgdGhlXG4gKiBzZWN0aW9uIG9uIHNlcmlhbCBvciBwYXJhbGxlbCBqb2luaW5nIG9mIHByb21pc2VzLlxuICpcbiAqICMgVGhlIERlZmVycmVkIEFQSVxuICpcbiAqIEEgbmV3IGluc3RhbmNlIG9mIGRlZmVycmVkIGlzIGNvbnN0cnVjdGVkIGJ5IGNhbGxpbmcgYCRxLmRlZmVyKClgLlxuICpcbiAqIFRoZSBwdXJwb3NlIG9mIHRoZSBkZWZlcnJlZCBvYmplY3QgaXMgdG8gZXhwb3NlIHRoZSBhc3NvY2lhdGVkIFByb21pc2UgaW5zdGFuY2UgYXMgd2VsbCBhcyBBUElzXG4gKiB0aGF0IGNhbiBiZSB1c2VkIGZvciBzaWduYWxpbmcgdGhlIHN1Y2Nlc3NmdWwgb3IgdW5zdWNjZXNzZnVsIGNvbXBsZXRpb24sIGFzIHdlbGwgYXMgdGhlIHN0YXR1c1xuICogb2YgdGhlIHRhc2suXG4gKlxuICogKipNZXRob2RzKipcbiAqXG4gKiAtIGByZXNvbHZlKHZhbHVlKWAg4oCTIHJlc29sdmVzIHRoZSBkZXJpdmVkIHByb21pc2Ugd2l0aCB0aGUgYHZhbHVlYC4gSWYgdGhlIHZhbHVlIGlzIGEgcmVqZWN0aW9uXG4gKiAgIGNvbnN0cnVjdGVkIHZpYSBgJHEucmVqZWN0YCwgdGhlIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCBpbnN0ZWFkLlxuICogLSBgcmVqZWN0KHJlYXNvbilgIOKAkyByZWplY3RzIHRoZSBkZXJpdmVkIHByb21pc2Ugd2l0aCB0aGUgYHJlYXNvbmAuIFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICogICByZXNvbHZpbmcgaXQgd2l0aCBhIHJlamVjdGlvbiBjb25zdHJ1Y3RlZCB2aWEgYCRxLnJlamVjdGAuXG4gKiAtIGBub3RpZnkodmFsdWUpYCAtIHByb3ZpZGVzIHVwZGF0ZXMgb24gdGhlIHN0YXR1cyBvZiB0aGUgcHJvbWlzZSdzIGV4ZWN1dGlvbi4gVGhpcyBtYXkgYmUgY2FsbGVkXG4gKiAgIG11bHRpcGxlIHRpbWVzIGJlZm9yZSB0aGUgcHJvbWlzZSBpcyBlaXRoZXIgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXG4gKlxuICogKipQcm9wZXJ0aWVzKipcbiAqXG4gKiAtIHByb21pc2Ug4oCTIGB7UHJvbWlzZX1gIOKAkyBwcm9taXNlIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhpcyBkZWZlcnJlZC5cbiAqXG4gKlxuICogIyBUaGUgUHJvbWlzZSBBUElcbiAqXG4gKiBBIG5ldyBwcm9taXNlIGluc3RhbmNlIGlzIGNyZWF0ZWQgd2hlbiBhIGRlZmVycmVkIGluc3RhbmNlIGlzIGNyZWF0ZWQgYW5kIGNhbiBiZSByZXRyaWV2ZWQgYnlcbiAqIGNhbGxpbmcgYGRlZmVycmVkLnByb21pc2VgLlxuICpcbiAqIFRoZSBwdXJwb3NlIG9mIHRoZSBwcm9taXNlIG9iamVjdCBpcyB0byBhbGxvdyBmb3IgaW50ZXJlc3RlZCBwYXJ0aWVzIHRvIGdldCBhY2Nlc3MgdG8gdGhlIHJlc3VsdFxuICogb2YgdGhlIGRlZmVycmVkIHRhc2sgd2hlbiBpdCBjb21wbGV0ZXMuXG4gKlxuICogKipNZXRob2RzKipcbiAqXG4gKiAtIGB0aGVuKHN1Y2Nlc3NDYWxsYmFjaywgW2Vycm9yQ2FsbGJhY2tdLCBbbm90aWZ5Q2FsbGJhY2tdKWAg4oCTIHJlZ2FyZGxlc3Mgb2Ygd2hlbiB0aGUgcHJvbWlzZSB3YXMgb3JcbiAqICAgd2lsbCBiZSByZXNvbHZlZCBvciByZWplY3RlZCwgYHRoZW5gIGNhbGxzIG9uZSBvZiB0aGUgc3VjY2VzcyBvciBlcnJvciBjYWxsYmFja3MgYXN5bmNocm9ub3VzbHlcbiAqICAgYXMgc29vbiBhcyB0aGUgcmVzdWx0IGlzIGF2YWlsYWJsZS4gVGhlIGNhbGxiYWNrcyBhcmUgY2FsbGVkIHdpdGggYSBzaW5nbGUgYXJndW1lbnQ6IHRoZSByZXN1bHRcbiAqICAgb3IgcmVqZWN0aW9uIHJlYXNvbi4gQWRkaXRpb25hbGx5LCB0aGUgbm90aWZ5IGNhbGxiYWNrIG1heSBiZSBjYWxsZWQgemVybyBvciBtb3JlIHRpbWVzIHRvXG4gKiAgIHByb3ZpZGUgYSBwcm9ncmVzcyBpbmRpY2F0aW9uLCBiZWZvcmUgdGhlIHByb21pc2UgaXMgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXG4gKlxuICogICBUaGlzIG1ldGhvZCAqcmV0dXJucyBhIG5ldyBwcm9taXNlKiB3aGljaCBpcyByZXNvbHZlZCBvciByZWplY3RlZCB2aWEgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGVcbiAqICAgYHN1Y2Nlc3NDYWxsYmFja2AsIGBlcnJvckNhbGxiYWNrYCAodW5sZXNzIHRoYXQgdmFsdWUgaXMgYSBwcm9taXNlLCBpbiB3aGljaCBjYXNlIGl0IGlzIHJlc29sdmVkXG4gKiAgIHdpdGggdGhlIHZhbHVlIHdoaWNoIGlzIHJlc29sdmVkIGluIHRoYXQgcHJvbWlzZSB1c2luZ1xuICogICBbcHJvbWlzZSBjaGFpbmluZ10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZXM2L3Byb21pc2VzLyN0b2MtcHJvbWlzZXMtcXVldWVzKSkuXG4gKiAgIEl0IGFsc28gbm90aWZpZXMgdmlhIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBub3RpZnlDYWxsYmFja2AgbWV0aG9kLiBUaGUgcHJvbWlzZSBjYW5ub3QgYmVcbiAqICAgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQgZnJvbSB0aGUgbm90aWZ5Q2FsbGJhY2sgbWV0aG9kLiBUaGUgZXJyb3JDYWxsYmFjayBhbmQgbm90aWZ5Q2FsbGJhY2tcbiAqICAgYXJndW1lbnRzIGFyZSBvcHRpb25hbC5cbiAqXG4gKiAtIGBjYXRjaChlcnJvckNhbGxiYWNrKWAg4oCTIHNob3J0aGFuZCBmb3IgYHByb21pc2UudGhlbihudWxsLCBlcnJvckNhbGxiYWNrKWBcbiAqXG4gKiAtIGBmaW5hbGx5KGNhbGxiYWNrLCBub3RpZnlDYWxsYmFjaylgIOKAkyBhbGxvd3MgeW91IHRvIG9ic2VydmUgZWl0aGVyIHRoZSBmdWxmaWxsbWVudCBvciByZWplY3Rpb24gb2YgYSBwcm9taXNlLFxuICogICBidXQgdG8gZG8gc28gd2l0aG91dCBtb2RpZnlpbmcgdGhlIGZpbmFsIHZhbHVlLiBUaGlzIGlzIHVzZWZ1bCB0byByZWxlYXNlIHJlc291cmNlcyBvciBkbyBzb21lXG4gKiAgIGNsZWFuLXVwIHRoYXQgbmVlZHMgdG8gYmUgZG9uZSB3aGV0aGVyIHRoZSBwcm9taXNlIHdhcyByZWplY3RlZCBvciByZXNvbHZlZC4gU2VlIHRoZSBbZnVsbFxuICogICBzcGVjaWZpY2F0aW9uXShodHRwczovL2dpdGh1Yi5jb20va3Jpc2tvd2FsL3Evd2lraS9BUEktUmVmZXJlbmNlI3Byb21pc2VmaW5hbGx5Y2FsbGJhY2spIGZvclxuICogICBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqICMgQ2hhaW5pbmcgcHJvbWlzZXNcbiAqXG4gKiBCZWNhdXNlIGNhbGxpbmcgdGhlIGB0aGVuYCBtZXRob2Qgb2YgYSBwcm9taXNlIHJldHVybnMgYSBuZXcgZGVyaXZlZCBwcm9taXNlLCBpdCBpcyBlYXNpbHlcbiAqIHBvc3NpYmxlIHRvIGNyZWF0ZSBhIGNoYWluIG9mIHByb21pc2VzOlxuICpcbiAqIGBgYGpzXG4gKiAgIHByb21pc2VCID0gcHJvbWlzZUEudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAqICAgICByZXR1cm4gcmVzdWx0ICsgMTtcbiAqICAgfSk7XG4gKlxuICogICAvLyBwcm9taXNlQiB3aWxsIGJlIHJlc29sdmVkIGltbWVkaWF0ZWx5IGFmdGVyIHByb21pc2VBIGlzIHJlc29sdmVkIGFuZCBpdHMgdmFsdWVcbiAqICAgLy8gd2lsbCBiZSB0aGUgcmVzdWx0IG9mIHByb21pc2VBIGluY3JlbWVudGVkIGJ5IDFcbiAqIGBgYFxuICpcbiAqIEl0IGlzIHBvc3NpYmxlIHRvIGNyZWF0ZSBjaGFpbnMgb2YgYW55IGxlbmd0aCBhbmQgc2luY2UgYSBwcm9taXNlIGNhbiBiZSByZXNvbHZlZCB3aXRoIGFub3RoZXJcbiAqIHByb21pc2UgKHdoaWNoIHdpbGwgZGVmZXIgaXRzIHJlc29sdXRpb24gZnVydGhlciksIGl0IGlzIHBvc3NpYmxlIHRvIHBhdXNlL2RlZmVyIHJlc29sdXRpb24gb2ZcbiAqIHRoZSBwcm9taXNlcyBhdCBhbnkgcG9pbnQgaW4gdGhlIGNoYWluLiBUaGlzIG1ha2VzIGl0IHBvc3NpYmxlIHRvIGltcGxlbWVudCBwb3dlcmZ1bCBBUElzIGxpa2VcbiAqICRodHRwJ3MgcmVzcG9uc2UgaW50ZXJjZXB0b3JzLlxuICpcbiAqXG4gKiAjIERpZmZlcmVuY2VzIGJldHdlZW4gS3JpcyBLb3dhbCdzIFEgYW5kICRxXG4gKlxuICogIFRoZXJlIGFyZSB0d28gbWFpbiBkaWZmZXJlbmNlczpcbiAqXG4gKiAtICRxIGlzIGludGVncmF0ZWQgd2l0aCB0aGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGV9IFNjb3BlIG1vZGVsIG9ic2VydmF0aW9uXG4gKiAgIG1lY2hhbmlzbSBpbiBhbmd1bGFyLCB3aGljaCBtZWFucyBmYXN0ZXIgcHJvcGFnYXRpb24gb2YgcmVzb2x1dGlvbiBvciByZWplY3Rpb24gaW50byB5b3VyXG4gKiAgIG1vZGVscyBhbmQgYXZvaWRpbmcgdW5uZWNlc3NhcnkgYnJvd3NlciByZXBhaW50cywgd2hpY2ggd291bGQgcmVzdWx0IGluIGZsaWNrZXJpbmcgVUkuXG4gKiAtIFEgaGFzIG1hbnkgbW9yZSBmZWF0dXJlcyB0aGFuICRxLCBidXQgdGhhdCBjb21lcyBhdCBhIGNvc3Qgb2YgYnl0ZXMuICRxIGlzIHRpbnksIGJ1dCBjb250YWluc1xuICogICBhbGwgdGhlIGltcG9ydGFudCBmdW5jdGlvbmFsaXR5IG5lZWRlZCBmb3IgY29tbW9uIGFzeW5jIHRhc2tzLlxuICpcbiAqICMgVGVzdGluZ1xuICpcbiAqICBgYGBqc1xuICogICAgaXQoJ3Nob3VsZCBzaW11bGF0ZSBwcm9taXNlJywgaW5qZWN0KGZ1bmN0aW9uKCRxLCAkcm9vdFNjb3BlKSB7XG4gKiAgICAgIHZhciBkZWZlcnJlZCA9ICRxLmRlZmVyKCk7XG4gKiAgICAgIHZhciBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZTtcbiAqICAgICAgdmFyIHJlc29sdmVkVmFsdWU7XG4gKlxuICogICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24odmFsdWUpIHsgcmVzb2x2ZWRWYWx1ZSA9IHZhbHVlOyB9KTtcbiAqICAgICAgZXhwZWN0KHJlc29sdmVkVmFsdWUpLnRvQmVVbmRlZmluZWQoKTtcbiAqXG4gKiAgICAgIC8vIFNpbXVsYXRlIHJlc29sdmluZyBvZiBwcm9taXNlXG4gKiAgICAgIGRlZmVycmVkLnJlc29sdmUoMTIzKTtcbiAqICAgICAgLy8gTm90ZSB0aGF0IHRoZSAndGhlbicgZnVuY3Rpb24gZG9lcyBub3QgZ2V0IGNhbGxlZCBzeW5jaHJvbm91c2x5LlxuICogICAgICAvLyBUaGlzIGlzIGJlY2F1c2Ugd2Ugd2FudCB0aGUgcHJvbWlzZSBBUEkgdG8gYWx3YXlzIGJlIGFzeW5jLCB3aGV0aGVyIG9yIG5vdFxuICogICAgICAvLyBpdCBnb3QgY2FsbGVkIHN5bmNocm9ub3VzbHkgb3IgYXN5bmNocm9ub3VzbHkuXG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0JlVW5kZWZpbmVkKCk7XG4gKlxuICogICAgICAvLyBQcm9wYWdhdGUgcHJvbWlzZSByZXNvbHV0aW9uIHRvICd0aGVuJyBmdW5jdGlvbnMgdXNpbmcgJGFwcGx5KCkuXG4gKiAgICAgICRyb290U2NvcGUuJGFwcGx5KCk7XG4gKiAgICAgIGV4cGVjdChyZXNvbHZlZFZhbHVlKS50b0VxdWFsKDEyMyk7XG4gKiAgICB9KSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbiwgZnVuY3Rpb24pfSByZXNvbHZlciBGdW5jdGlvbiB3aGljaCBpcyByZXNwb25zaWJsZSBmb3IgcmVzb2x2aW5nIG9yXG4gKiAgIHJlamVjdGluZyB0aGUgbmV3bHkgY3JlYXRlZCBwcm9taXNlLiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmVzb2x2ZXMgdGhlXG4gKiAgIHByb21pc2UsIHRoZSBzZWNvbmQgcGFyYW1ldGVyIGlzIGEgZnVuY3Rpb24gd2hpY2ggcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIG5ld2x5IGNyZWF0ZWQgcHJvbWlzZS5cbiAqL1xuLyoqXG4gKiBAbmdkb2MgcHJvdmlkZXJcbiAqIEBuYW1lICRxUHJvdmlkZXJcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKi9cbmZ1bmN0aW9uICRRUHJvdmlkZXIoKSB7XG4gIHZhciBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyA9IHRydWU7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckZXhjZXB0aW9uSGFuZGxlcicsIGZ1bmN0aW9uKCRyb290U2NvcGUsICRleGNlcHRpb25IYW5kbGVyKSB7XG4gICAgcmV0dXJuIHFGYWN0b3J5KGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAkcm9vdFNjb3BlLiRldmFsQXN5bmMoY2FsbGJhY2spO1xuICAgIH0sICRleGNlcHRpb25IYW5kbGVyLCBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyk7XG4gIH1dO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxUHJvdmlkZXIjZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnNcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHJpZXZlcyBvciBvdmVycmlkZXMgd2hldGhlciB0byBnZW5lcmF0ZSBhbiBlcnJvciB3aGVuIGEgcmVqZWN0ZWQgcHJvbWlzZSBpcyBub3QgaGFuZGxlZC5cbiAgICogVGhpcyBmZWF0dXJlIGlzIGVuYWJsZWQgYnkgZGVmYXVsdC5cbiAgICpcbiAgICogQHBhcmFtIHtib29sZWFuPX0gdmFsdWUgV2hldGhlciB0byBnZW5lcmF0ZSBhbiBlcnJvciB3aGVuIGEgcmVqZWN0ZWQgcHJvbWlzZSBpcyBub3QgaGFuZGxlZC5cbiAgICogQHJldHVybnMge2Jvb2xlYW58bmcuJHFQcm92aWRlcn0gQ3VycmVudCB2YWx1ZSB3aGVuIGNhbGxlZCB3aXRob3V0IGEgbmV3IHZhbHVlIG9yIHNlbGYgZm9yXG4gICAqICAgIGNoYWluaW5nIG90aGVyd2lzZS5cbiAgICovXG4gIHRoaXMuZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChpc0RlZmluZWQodmFsdWUpKSB7XG4gICAgICBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucztcbiAgICB9XG4gIH07XG59XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJCRRUHJvdmlkZXIoKSB7XG4gIHZhciBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyA9IHRydWU7XG4gIHRoaXMuJGdldCA9IFsnJGJyb3dzZXInLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCBmdW5jdGlvbigkYnJvd3NlciwgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcbiAgICByZXR1cm4gcUZhY3RvcnkoZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICRicm93c2VyLmRlZmVyKGNhbGxiYWNrKTtcbiAgICB9LCAkZXhjZXB0aW9uSGFuZGxlciwgZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMpO1xuICB9XTtcblxuICB0aGlzLmVycm9yT25VbmhhbmRsZWRSZWplY3Rpb25zID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoaXNEZWZpbmVkKHZhbHVlKSkge1xuICAgICAgZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgPSB2YWx1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnM7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBwcm9taXNlIG1hbmFnZXIuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbil9IG5leHRUaWNrIEZ1bmN0aW9uIGZvciBleGVjdXRpbmcgZnVuY3Rpb25zIGluIHRoZSBuZXh0IHR1cm4uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKC4uLiopfSBleGNlcHRpb25IYW5kbGVyIEZ1bmN0aW9uIGludG8gd2hpY2ggdW5leHBlY3RlZCBleGNlcHRpb25zIGFyZSBwYXNzZWQgZm9yXG4gKiAgICAgZGVidWdnaW5nIHB1cnBvc2VzLlxuICogQHBhcmFtIHtib29sZWFuPX0gZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgV2hldGhlciBhbiBlcnJvciBzaG91bGQgYmUgZ2VuZXJhdGVkIG9uIHVuaGFuZGxlZFxuICogICAgIHByb21pc2VzIHJlamVjdGlvbnMuXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBQcm9taXNlIG1hbmFnZXIuXG4gKi9cbmZ1bmN0aW9uIHFGYWN0b3J5KG5leHRUaWNrLCBleGNlcHRpb25IYW5kbGVyLCBlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucykge1xuICB2YXIgJHFNaW5FcnIgPSBtaW5FcnIoJyRxJywgVHlwZUVycm9yKTtcbiAgdmFyIHF1ZXVlU2l6ZSA9IDA7XG4gIHZhciBjaGVja1F1ZXVlID0gW107XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmcuJHEjZGVmZXJcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBgRGVmZXJyZWRgIG9iamVjdCB3aGljaCByZXByZXNlbnRzIGEgdGFzayB3aGljaCB3aWxsIGZpbmlzaCBpbiB0aGUgZnV0dXJlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7RGVmZXJyZWR9IFJldHVybnMgYSBuZXcgaW5zdGFuY2Ugb2YgZGVmZXJyZWQuXG4gICAqL1xuICBmdW5jdGlvbiBkZWZlcigpIHtcbiAgICByZXR1cm4gbmV3IERlZmVycmVkKCk7XG4gIH1cblxuICBmdW5jdGlvbiBEZWZlcnJlZCgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKCk7XG4gICAgLy9Ob24gcHJvdG90eXBlIG1ldGhvZHMgbmVjZXNzYXJ5IHRvIHN1cHBvcnQgdW5ib3VuZCBleGVjdXRpb24gOi9cbiAgICB0aGlzLnJlc29sdmUgPSBmdW5jdGlvbih2YWwpIHsgcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgdmFsKTsgfTtcbiAgICB0aGlzLnJlamVjdCA9IGZ1bmN0aW9uKHJlYXNvbikgeyByZWplY3RQcm9taXNlKHByb21pc2UsIHJlYXNvbik7IH07XG4gICAgdGhpcy5ub3RpZnkgPSBmdW5jdGlvbihwcm9ncmVzcykgeyBub3RpZnlQcm9taXNlKHByb21pc2UsIHByb2dyZXNzKTsgfTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gUHJvbWlzZSgpIHtcbiAgICB0aGlzLiQkc3RhdGUgPSB7IHN0YXR1czogMCB9O1xuICB9XG5cbiAgZXh0ZW5kKFByb21pc2UucHJvdG90eXBlLCB7XG4gICAgdGhlbjogZnVuY3Rpb24ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb2dyZXNzQmFjaykge1xuICAgICAgaWYgKGlzVW5kZWZpbmVkKG9uRnVsZmlsbGVkKSAmJiBpc1VuZGVmaW5lZChvblJlamVjdGVkKSAmJiBpc1VuZGVmaW5lZChwcm9ncmVzc0JhY2spKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBQcm9taXNlKCk7XG5cbiAgICAgIHRoaXMuJCRzdGF0ZS5wZW5kaW5nID0gdGhpcy4kJHN0YXRlLnBlbmRpbmcgfHwgW107XG4gICAgICB0aGlzLiQkc3RhdGUucGVuZGluZy5wdXNoKFtyZXN1bHQsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBwcm9ncmVzc0JhY2tdKTtcbiAgICAgIGlmICh0aGlzLiQkc3RhdGUuc3RhdHVzID4gMCkgc2NoZWR1bGVQcm9jZXNzUXVldWUodGhpcy4kJHN0YXRlKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4obnVsbCwgY2FsbGJhY2spO1xuICAgIH0sXG5cbiAgICAnZmluYWxseSc6IGZ1bmN0aW9uKGNhbGxiYWNrLCBwcm9ncmVzc0JhY2spIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUNhbGxiYWNrKHZhbHVlLCByZXNvbHZlLCBjYWxsYmFjayk7XG4gICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlQ2FsbGJhY2soZXJyb3IsIHJlamVjdCwgY2FsbGJhY2spO1xuICAgICAgfSwgcHJvZ3Jlc3NCYWNrKTtcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHByb2Nlc3NRdWV1ZShzdGF0ZSkge1xuICAgIHZhciBmbiwgcHJvbWlzZSwgcGVuZGluZztcblxuICAgIHBlbmRpbmcgPSBzdGF0ZS5wZW5kaW5nO1xuICAgIHN0YXRlLnByb2Nlc3NTY2hlZHVsZWQgPSBmYWxzZTtcbiAgICBzdGF0ZS5wZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgIHRyeSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBwZW5kaW5nLmxlbmd0aDsgaSA8IGlpOyArK2kpIHtcbiAgICAgICAgbWFya1FTdGF0ZUV4Y2VwdGlvbkhhbmRsZWQoc3RhdGUpO1xuICAgICAgICBwcm9taXNlID0gcGVuZGluZ1tpXVswXTtcbiAgICAgICAgZm4gPSBwZW5kaW5nW2ldW3N0YXRlLnN0YXR1c107XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKGlzRnVuY3Rpb24oZm4pKSB7XG4gICAgICAgICAgICByZXNvbHZlUHJvbWlzZShwcm9taXNlLCBmbihzdGF0ZS52YWx1ZSkpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUuc3RhdHVzID09PSAxKSB7XG4gICAgICAgICAgICByZXNvbHZlUHJvbWlzZShwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdFByb21pc2UocHJvbWlzZSwgc3RhdGUudmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJlamVjdFByb21pc2UocHJvbWlzZSwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgLS1xdWV1ZVNpemU7XG4gICAgICBpZiAoZXJyb3JPblVuaGFuZGxlZFJlamVjdGlvbnMgJiYgcXVldWVTaXplID09PSAwKSB7XG4gICAgICAgIG5leHRUaWNrKHByb2Nlc3NDaGVja3MpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NDaGVja3MoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVubW9kaWZpZWQtbG9vcC1jb25kaXRpb25cbiAgICB3aGlsZSAoIXF1ZXVlU2l6ZSAmJiBjaGVja1F1ZXVlLmxlbmd0aCkge1xuICAgICAgdmFyIHRvQ2hlY2sgPSBjaGVja1F1ZXVlLnNoaWZ0KCk7XG4gICAgICBpZiAoIWlzU3RhdGVFeGNlcHRpb25IYW5kbGVkKHRvQ2hlY2spKSB7XG4gICAgICAgIG1hcmtRU3RhdGVFeGNlcHRpb25IYW5kbGVkKHRvQ2hlY2spO1xuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gJ1Bvc3NpYmx5IHVuaGFuZGxlZCByZWplY3Rpb246ICcgKyB0b0RlYnVnU3RyaW5nKHRvQ2hlY2sudmFsdWUpO1xuICAgICAgICBpZiAoaXNFcnJvcih0b0NoZWNrLnZhbHVlKSkge1xuICAgICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIodG9DaGVjay52YWx1ZSwgZXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBleGNlcHRpb25IYW5kbGVyKGVycm9yTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZVByb2Nlc3NRdWV1ZShzdGF0ZSkge1xuICAgIGlmIChlcnJvck9uVW5oYW5kbGVkUmVqZWN0aW9ucyAmJiAhc3RhdGUucGVuZGluZyAmJiBzdGF0ZS5zdGF0dXMgPT09IDIgJiYgIWlzU3RhdGVFeGNlcHRpb25IYW5kbGVkKHN0YXRlKSkge1xuICAgICAgaWYgKHF1ZXVlU2l6ZSA9PT0gMCAmJiBjaGVja1F1ZXVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBuZXh0VGljayhwcm9jZXNzQ2hlY2tzKTtcbiAgICAgIH1cbiAgICAgIGNoZWNrUXVldWUucHVzaChzdGF0ZSk7XG4gICAgfVxuICAgIGlmIChzdGF0ZS5wcm9jZXNzU2NoZWR1bGVkIHx8ICFzdGF0ZS5wZW5kaW5nKSByZXR1cm47XG4gICAgc3RhdGUucHJvY2Vzc1NjaGVkdWxlZCA9IHRydWU7XG4gICAgKytxdWV1ZVNpemU7XG4gICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7IHByb2Nlc3NRdWV1ZShzdGF0ZSk7IH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgdmFsKSB7XG4gICAgaWYgKHByb21pc2UuJCRzdGF0ZS5zdGF0dXMpIHJldHVybjtcbiAgICBpZiAodmFsID09PSBwcm9taXNlKSB7XG4gICAgICAkJHJlamVjdChwcm9taXNlLCAkcU1pbkVycihcbiAgICAgICAgJ3FjeWNsZScsXG4gICAgICAgICdFeHBlY3RlZCBwcm9taXNlIHRvIGJlIHJlc29sdmVkIHdpdGggdmFsdWUgb3RoZXIgdGhhbiBpdHNlbGYgXFwnezB9XFwnJyxcbiAgICAgICAgdmFsKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQkcmVzb2x2ZShwcm9taXNlLCB2YWwpO1xuICAgIH1cblxuICB9XG5cbiAgZnVuY3Rpb24gJCRyZXNvbHZlKHByb21pc2UsIHZhbCkge1xuICAgIHZhciB0aGVuO1xuICAgIHZhciBkb25lID0gZmFsc2U7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc09iamVjdCh2YWwpIHx8IGlzRnVuY3Rpb24odmFsKSkgdGhlbiA9IHZhbC50aGVuO1xuICAgICAgaWYgKGlzRnVuY3Rpb24odGhlbikpIHtcbiAgICAgICAgcHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA9IC0xO1xuICAgICAgICB0aGVuLmNhbGwodmFsLCBkb1Jlc29sdmUsIGRvUmVqZWN0LCBkb05vdGlmeSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9taXNlLiQkc3RhdGUudmFsdWUgPSB2YWw7XG4gICAgICAgIHByb21pc2UuJCRzdGF0ZS5zdGF0dXMgPSAxO1xuICAgICAgICBzY2hlZHVsZVByb2Nlc3NRdWV1ZShwcm9taXNlLiQkc3RhdGUpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGRvUmVqZWN0KGUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRvUmVzb2x2ZSh2YWwpIHtcbiAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICQkcmVzb2x2ZShwcm9taXNlLCB2YWwpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkb1JlamVjdCh2YWwpIHtcbiAgICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICQkcmVqZWN0KHByb21pc2UsIHZhbCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRvTm90aWZ5KHByb2dyZXNzKSB7XG4gICAgICBub3RpZnlQcm9taXNlKHByb21pc2UsIHByb2dyZXNzKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWplY3RQcm9taXNlKHByb21pc2UsIHJlYXNvbikge1xuICAgIGlmIChwcm9taXNlLiQkc3RhdGUuc3RhdHVzKSByZXR1cm47XG4gICAgJCRyZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uICQkcmVqZWN0KHByb21pc2UsIHJlYXNvbikge1xuICAgIHByb21pc2UuJCRzdGF0ZS52YWx1ZSA9IHJlYXNvbjtcbiAgICBwcm9taXNlLiQkc3RhdGUuc3RhdHVzID0gMjtcbiAgICBzY2hlZHVsZVByb2Nlc3NRdWV1ZShwcm9taXNlLiQkc3RhdGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5UHJvbWlzZShwcm9taXNlLCBwcm9ncmVzcykge1xuICAgIHZhciBjYWxsYmFja3MgPSBwcm9taXNlLiQkc3RhdGUucGVuZGluZztcblxuICAgIGlmICgocHJvbWlzZS4kJHN0YXRlLnN0YXR1cyA8PSAwKSAmJiBjYWxsYmFja3MgJiYgY2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgbmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjYWxsYmFjaywgcmVzdWx0O1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBjYWxsYmFja3MubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgIHJlc3VsdCA9IGNhbGxiYWNrc1tpXVswXTtcbiAgICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrc1tpXVszXTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbm90aWZ5UHJvbWlzZShyZXN1bHQsIGlzRnVuY3Rpb24oY2FsbGJhY2spID8gY2FsbGJhY2socHJvZ3Jlc3MpIDogcHJvZ3Jlc3MpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkcSNyZWplY3RcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENyZWF0ZXMgYSBwcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgYXMgcmVqZWN0ZWQgd2l0aCB0aGUgc3BlY2lmaWVkIGByZWFzb25gLiBUaGlzIGFwaSBzaG91bGQgYmVcbiAgICogdXNlZCB0byBmb3J3YXJkIHJlamVjdGlvbiBpbiBhIGNoYWluIG9mIHByb21pc2VzLiBJZiB5b3UgYXJlIGRlYWxpbmcgd2l0aCB0aGUgbGFzdCBwcm9taXNlIGluXG4gICAqIGEgcHJvbWlzZSBjaGFpbiwgeW91IGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgaXQuXG4gICAqXG4gICAqIFdoZW4gY29tcGFyaW5nIGRlZmVycmVkcy9wcm9taXNlcyB0byB0aGUgZmFtaWxpYXIgYmVoYXZpb3Igb2YgdHJ5L2NhdGNoL3Rocm93LCB0aGluayBvZlxuICAgKiBgcmVqZWN0YCBhcyB0aGUgYHRocm93YCBrZXl3b3JkIGluIEphdmFTY3JpcHQuIFRoaXMgYWxzbyBtZWFucyB0aGF0IGlmIHlvdSBcImNhdGNoXCIgYW4gZXJyb3IgdmlhXG4gICAqIGEgcHJvbWlzZSBlcnJvciBjYWxsYmFjayBhbmQgeW91IHdhbnQgdG8gZm9yd2FyZCB0aGUgZXJyb3IgdG8gdGhlIHByb21pc2UgZGVyaXZlZCBmcm9tIHRoZVxuICAgKiBjdXJyZW50IHByb21pc2UsIHlvdSBoYXZlIHRvIFwicmV0aHJvd1wiIHRoZSBlcnJvciBieSByZXR1cm5pbmcgYSByZWplY3Rpb24gY29uc3RydWN0ZWQgdmlhXG4gICAqIGByZWplY3RgLlxuICAgKlxuICAgKiBgYGBqc1xuICAgKiAgIHByb21pc2VCID0gcHJvbWlzZUEudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICogICAgIC8vIHN1Y2Nlc3M6IGRvIHNvbWV0aGluZyBhbmQgcmVzb2x2ZSBwcm9taXNlQlxuICAgKiAgICAgLy8gICAgICAgICAgd2l0aCB0aGUgb2xkIG9yIGEgbmV3IHJlc3VsdFxuICAgKiAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICogICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICogICAgIC8vIGVycm9yOiBoYW5kbGUgdGhlIGVycm9yIGlmIHBvc3NpYmxlIGFuZFxuICAgKiAgICAgLy8gICAgICAgIHJlc29sdmUgcHJvbWlzZUIgd2l0aCBuZXdQcm9taXNlT3JWYWx1ZSxcbiAgICogICAgIC8vICAgICAgICBvdGhlcndpc2UgZm9yd2FyZCB0aGUgcmVqZWN0aW9uIHRvIHByb21pc2VCXG4gICAqICAgICBpZiAoY2FuSGFuZGxlKHJlYXNvbikpIHtcbiAgICogICAgICAvLyBoYW5kbGUgdGhlIGVycm9yIGFuZCByZWNvdmVyXG4gICAqICAgICAgcmV0dXJuIG5ld1Byb21pc2VPclZhbHVlO1xuICAgKiAgICAgfVxuICAgKiAgICAgcmV0dXJuICRxLnJlamVjdChyZWFzb24pO1xuICAgKiAgIH0pO1xuICAgKiBgYGBcbiAgICpcbiAgICogQHBhcmFtIHsqfSByZWFzb24gQ29uc3RhbnQsIG1lc3NhZ2UsIGV4Y2VwdGlvbiBvciBhbiBvYmplY3QgcmVwcmVzZW50aW5nIHRoZSByZWplY3Rpb24gcmVhc29uLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHByb21pc2UgdGhhdCB3YXMgYWxyZWFkeSByZXNvbHZlZCBhcyByZWplY3RlZCB3aXRoIHRoZSBgcmVhc29uYC5cbiAgICovXG4gIGZ1bmN0aW9uIHJlamVjdChyZWFzb24pIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IFByb21pc2UoKTtcbiAgICByZWplY3RQcm9taXNlKHJlc3VsdCwgcmVhc29uKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2FsbGJhY2sodmFsdWUsIHJlc29sdmVyLCBjYWxsYmFjaykge1xuICAgIHZhciBjYWxsYmFja091dHB1dCA9IG51bGw7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc0Z1bmN0aW9uKGNhbGxiYWNrKSkgY2FsbGJhY2tPdXRwdXQgPSBjYWxsYmFjaygpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiByZWplY3QoZSk7XG4gICAgfVxuICAgIGlmIChpc1Byb21pc2VMaWtlKGNhbGxiYWNrT3V0cHV0KSkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrT3V0cHV0LnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlcih2YWx1ZSk7XG4gICAgICB9LCByZWplY3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZXIodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI3doZW5cbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFdyYXBzIGFuIG9iamVjdCB0aGF0IG1pZ2h0IGJlIGEgdmFsdWUgb3IgYSAoM3JkIHBhcnR5KSB0aGVuLWFibGUgcHJvbWlzZSBpbnRvIGEgJHEgcHJvbWlzZS5cbiAgICogVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3UgYXJlIGRlYWxpbmcgd2l0aCBhbiBvYmplY3QgdGhhdCBtaWdodCBvciBtaWdodCBub3QgYmUgYSBwcm9taXNlLCBvciBpZlxuICAgKiB0aGUgcHJvbWlzZSBjb21lcyBmcm9tIGEgc291cmNlIHRoYXQgY2FuJ3QgYmUgdHJ1c3RlZC5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSBvciBhIHByb21pc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IHN1Y2Nlc3NDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXJyb3JDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gcHJvZ3Jlc3NDYWxsYmFja1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHByb21pc2Ugb2YgdGhlIHBhc3NlZCB2YWx1ZSBvciBwcm9taXNlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gd2hlbih2YWx1ZSwgY2FsbGJhY2ssIGVycmJhY2ssIHByb2dyZXNzQmFjaykge1xuICAgIHZhciByZXN1bHQgPSBuZXcgUHJvbWlzZSgpO1xuICAgIHJlc29sdmVQcm9taXNlKHJlc3VsdCwgdmFsdWUpO1xuICAgIHJldHVybiByZXN1bHQudGhlbihjYWxsYmFjaywgZXJyYmFjaywgcHJvZ3Jlc3NCYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI3Jlc29sdmVcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEFsaWFzIG9mIHtAbGluayBuZy4kcSN3aGVuIHdoZW59IHRvIG1haW50YWluIG5hbWluZyBjb25zaXN0ZW5jeSB3aXRoIEVTNi5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZSBvciBhIHByb21pc2VcbiAgICogQHBhcmFtIHtGdW5jdGlvbj19IHN1Y2Nlc3NDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXJyb3JDYWxsYmFja1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9uPX0gcHJvZ3Jlc3NDYWxsYmFja1xuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHByb21pc2Ugb2YgdGhlIHBhc3NlZCB2YWx1ZSBvciBwcm9taXNlXG4gICAqL1xuICB2YXIgcmVzb2x2ZSA9IHdoZW47XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHEjYWxsXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBDb21iaW5lcyBtdWx0aXBsZSBwcm9taXNlcyBpbnRvIGEgc2luZ2xlIHByb21pc2UgdGhhdCBpcyByZXNvbHZlZCB3aGVuIGFsbCBvZiB0aGUgaW5wdXRcbiAgICogcHJvbWlzZXMgYXJlIHJlc29sdmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5LjxQcm9taXNlPnxPYmplY3QuPFByb21pc2U+fSBwcm9taXNlcyBBbiBhcnJheSBvciBoYXNoIG9mIHByb21pc2VzLlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIHNpbmdsZSBwcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aXRoIGFuIGFycmF5L2hhc2ggb2YgdmFsdWVzLFxuICAgKiAgIGVhY2ggdmFsdWUgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvbWlzZSBhdCB0aGUgc2FtZSBpbmRleC9rZXkgaW4gdGhlIGBwcm9taXNlc2AgYXJyYXkvaGFzaC5cbiAgICogICBJZiBhbnkgb2YgdGhlIHByb21pc2VzIGlzIHJlc29sdmVkIHdpdGggYSByZWplY3Rpb24sIHRoaXMgcmVzdWx0aW5nIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZFxuICAgKiAgIHdpdGggdGhlIHNhbWUgcmVqZWN0aW9uIHZhbHVlLlxuICAgKi9cblxuICBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0gbmV3IFByb21pc2UoKSxcbiAgICAgICAgY291bnRlciA9IDAsXG4gICAgICAgIHJlc3VsdHMgPSBpc0FycmF5KHByb21pc2VzKSA/IFtdIDoge307XG5cbiAgICBmb3JFYWNoKHByb21pc2VzLCBmdW5jdGlvbihwcm9taXNlLCBrZXkpIHtcbiAgICAgIGNvdW50ZXIrKztcbiAgICAgIHdoZW4ocHJvbWlzZSkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXN1bHRzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgaWYgKCEoLS1jb3VudGVyKSkgcmVzb2x2ZVByb21pc2UocmVzdWx0LCByZXN1bHRzKTtcbiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbikge1xuICAgICAgICByZWplY3RQcm9taXNlKHJlc3VsdCwgcmVhc29uKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgaWYgKGNvdW50ZXIgPT09IDApIHtcbiAgICAgIHJlc29sdmVQcm9taXNlKHJlc3VsdCwgcmVzdWx0cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRxI3JhY2VcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb3IgcmVqZWN0cyBhcyBzb29uIGFzIG9uZSBvZiB0aG9zZSBwcm9taXNlc1xuICAgKiByZXNvbHZlcyBvciByZWplY3RzLCB3aXRoIHRoZSB2YWx1ZSBvciByZWFzb24gZnJvbSB0aGF0IHByb21pc2UuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXkuPFByb21pc2U+fE9iamVjdC48UHJvbWlzZT59IHByb21pc2VzIEFuIGFycmF5IG9yIGhhc2ggb2YgcHJvbWlzZXMuXG4gICAqIEByZXR1cm5zIHtQcm9taXNlfSBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBvciByZWplY3RzIGFzIHNvb24gYXMgb25lIG9mIHRoZSBgcHJvbWlzZXNgXG4gICAqIHJlc29sdmVzIG9yIHJlamVjdHMsIHdpdGggdGhlIHZhbHVlIG9yIHJlYXNvbiBmcm9tIHRoYXQgcHJvbWlzZS5cbiAgICovXG5cbiAgZnVuY3Rpb24gcmFjZShwcm9taXNlcykge1xuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG5cbiAgICBmb3JFYWNoKHByb21pc2VzLCBmdW5jdGlvbihwcm9taXNlKSB7XG4gICAgICB3aGVuKHByb21pc2UpLnRoZW4oZGVmZXJyZWQucmVzb2x2ZSwgZGVmZXJyZWQucmVqZWN0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9XG5cbiAgZnVuY3Rpb24gJFEocmVzb2x2ZXIpIHtcbiAgICBpZiAoIWlzRnVuY3Rpb24ocmVzb2x2ZXIpKSB7XG4gICAgICB0aHJvdyAkcU1pbkVycignbm9yc2x2cicsICdFeHBlY3RlZCByZXNvbHZlckZuLCBnb3QgXFwnezB9XFwnJywgcmVzb2x2ZXIpO1xuICAgIH1cblxuICAgIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoKTtcblxuICAgIGZ1bmN0aW9uIHJlc29sdmVGbih2YWx1ZSkge1xuICAgICAgcmVzb2x2ZVByb21pc2UocHJvbWlzZSwgdmFsdWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlamVjdEZuKHJlYXNvbikge1xuICAgICAgcmVqZWN0UHJvbWlzZShwcm9taXNlLCByZWFzb24pO1xuICAgIH1cblxuICAgIHJlc29sdmVyKHJlc29sdmVGbiwgcmVqZWN0Rm4pO1xuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICAvLyBMZXQncyBtYWtlIHRoZSBpbnN0YW5jZW9mIG9wZXJhdG9yIHdvcmsgZm9yIHByb21pc2VzLCBzbyB0aGF0XG4gIC8vIGBuZXcgJHEoZm4pIGluc3RhbmNlb2YgJHFgIHdvdWxkIGV2YWx1YXRlIHRvIHRydWUuXG4gICRRLnByb3RvdHlwZSA9IFByb21pc2UucHJvdG90eXBlO1xuXG4gICRRLmRlZmVyID0gZGVmZXI7XG4gICRRLnJlamVjdCA9IHJlamVjdDtcbiAgJFEud2hlbiA9IHdoZW47XG4gICRRLnJlc29sdmUgPSByZXNvbHZlO1xuICAkUS5hbGwgPSBhbGw7XG4gICRRLnJhY2UgPSByYWNlO1xuXG4gIHJldHVybiAkUTtcbn1cblxuZnVuY3Rpb24gaXNTdGF0ZUV4Y2VwdGlvbkhhbmRsZWQoc3RhdGUpIHtcbiAgcmV0dXJuICEhc3RhdGUucHVyO1xufVxuZnVuY3Rpb24gbWFya1FTdGF0ZUV4Y2VwdGlvbkhhbmRsZWQoc3RhdGUpIHtcbiAgc3RhdGUucHVyID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIG1hcmtRRXhjZXB0aW9uSGFuZGxlZChxKSB7XG4gIG1hcmtRU3RhdGVFeGNlcHRpb25IYW5kbGVkKHEuJCRzdGF0ZSk7XG59XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJCRSQUZQcm92aWRlcigpIHsgLy9yQUZcbiAgdGhpcy4kZ2V0ID0gWyckd2luZG93JywgJyR0aW1lb3V0JywgZnVuY3Rpb24oJHdpbmRvdywgJHRpbWVvdXQpIHtcbiAgICB2YXIgcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gJHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cbiAgICB2YXIgY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSAkd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR3aW5kb3cud2Via2l0Q2FuY2VsUmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuXG4gICAgdmFyIHJhZlN1cHBvcnRlZCA9ICEhcmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgIHZhciByYWYgPSByYWZTdXBwb3J0ZWRcbiAgICAgID8gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgICB2YXIgaWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZm4pO1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKGlkKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICA6IGZ1bmN0aW9uKGZuKSB7XG4gICAgICAgICAgdmFyIHRpbWVyID0gJHRpbWVvdXQoZm4sIDE2LjY2LCBmYWxzZSk7IC8vIDEwMDAgLyA2MCA9IDE2LjY2NlxuICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICR0aW1lb3V0LmNhbmNlbCh0aW1lcik7XG4gICAgICAgICAgfTtcbiAgICAgICAgfTtcblxuICAgIHJhZi5zdXBwb3J0ZWQgPSByYWZTdXBwb3J0ZWQ7XG5cbiAgICByZXR1cm4gcmFmO1xuICB9XTtcbn1cblxuLyoqXG4gKiBERVNJR04gTk9URVNcbiAqXG4gKiBUaGUgZGVzaWduIGRlY2lzaW9ucyBiZWhpbmQgdGhlIHNjb3BlIGFyZSBoZWF2aWx5IGZhdm9yZWQgZm9yIHNwZWVkIGFuZCBtZW1vcnkgY29uc3VtcHRpb24uXG4gKlxuICogVGhlIHR5cGljYWwgdXNlIG9mIHNjb3BlIGlzIHRvIHdhdGNoIHRoZSBleHByZXNzaW9ucywgd2hpY2ggbW9zdCBvZiB0aGUgdGltZSByZXR1cm4gdGhlIHNhbWVcbiAqIHZhbHVlIGFzIGxhc3QgdGltZSBzbyB3ZSBvcHRpbWl6ZSB0aGUgb3BlcmF0aW9uLlxuICpcbiAqIENsb3N1cmVzIGNvbnN0cnVjdGlvbiBpcyBleHBlbnNpdmUgaW4gdGVybXMgb2Ygc3BlZWQgYXMgd2VsbCBhcyBtZW1vcnk6XG4gKiAgIC0gTm8gY2xvc3VyZXMsIGluc3RlYWQgdXNlIHByb3RvdHlwaWNhbCBpbmhlcml0YW5jZSBmb3IgQVBJXG4gKiAgIC0gSW50ZXJuYWwgc3RhdGUgbmVlZHMgdG8gYmUgc3RvcmVkIG9uIHNjb3BlIGRpcmVjdGx5LCB3aGljaCBtZWFucyB0aGF0IHByaXZhdGUgc3RhdGUgaXNcbiAqICAgICBleHBvc2VkIGFzICQkX19fXyBwcm9wZXJ0aWVzXG4gKlxuICogTG9vcCBvcGVyYXRpb25zIGFyZSBvcHRpbWl6ZWQgYnkgdXNpbmcgd2hpbGUoY291bnQtLSkgeyAuLi4gfVxuICogICAtIFRoaXMgbWVhbnMgdGhhdCBpbiBvcmRlciB0byBrZWVwIHRoZSBzYW1lIG9yZGVyIG9mIGV4ZWN1dGlvbiBhcyBhZGRpdGlvbiB3ZSBoYXZlIHRvIGFkZFxuICogICAgIGl0ZW1zIHRvIHRoZSBhcnJheSBhdCB0aGUgYmVnaW5uaW5nICh1bnNoaWZ0KSBpbnN0ZWFkIG9mIGF0IHRoZSBlbmQgKHB1c2gpXG4gKlxuICogQ2hpbGQgc2NvcGVzIGFyZSBjcmVhdGVkIGFuZCByZW1vdmVkIG9mdGVuXG4gKiAgIC0gVXNpbmcgYW4gYXJyYXkgd291bGQgYmUgc2xvdyBzaW5jZSBpbnNlcnRzIGluIHRoZSBtaWRkbGUgYXJlIGV4cGVuc2l2ZTsgc28gd2UgdXNlIGxpbmtlZCBsaXN0c1xuICpcbiAqIFRoZXJlIGFyZSBmZXdlciB3YXRjaGVzIHRoYW4gb2JzZXJ2ZXJzLiBUaGlzIGlzIHdoeSB5b3UgZG9uJ3Qgd2FudCB0aGUgb2JzZXJ2ZXIgdG8gYmUgaW1wbGVtZW50ZWRcbiAqIGluIHRoZSBzYW1lIHdheSBhcyB3YXRjaC4gV2F0Y2ggcmVxdWlyZXMgcmV0dXJuIG9mIHRoZSBpbml0aWFsaXphdGlvbiBmdW5jdGlvbiB3aGljaCBpcyBleHBlbnNpdmVcbiAqIHRvIGNvbnN0cnVjdC5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIHByb3ZpZGVyXG4gKiBAbmFtZSAkcm9vdFNjb3BlUHJvdmlkZXJcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFByb3ZpZGVyIGZvciB0aGUgJHJvb3RTY29wZSBzZXJ2aWNlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgJHJvb3RTY29wZVByb3ZpZGVyI2RpZ2VzdFR0bFxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogU2V0cyB0aGUgbnVtYmVyIG9mIGAkZGlnZXN0YCBpdGVyYXRpb25zIHRoZSBzY29wZSBzaG91bGQgYXR0ZW1wdCB0byBleGVjdXRlIGJlZm9yZSBnaXZpbmcgdXAgYW5kXG4gKiBhc3N1bWluZyB0aGF0IHRoZSBtb2RlbCBpcyB1bnN0YWJsZS5cbiAqXG4gKiBUaGUgY3VycmVudCBkZWZhdWx0IGlzIDEwIGl0ZXJhdGlvbnMuXG4gKlxuICogSW4gY29tcGxleCBhcHBsaWNhdGlvbnMgaXQncyBwb3NzaWJsZSB0aGF0IHRoZSBkZXBlbmRlbmNpZXMgYmV0d2VlbiBgJHdhdGNoYHMgd2lsbCByZXN1bHQgaW5cbiAqIHNldmVyYWwgZGlnZXN0IGl0ZXJhdGlvbnMuIEhvd2V2ZXIgaWYgYW4gYXBwbGljYXRpb24gbmVlZHMgbW9yZSB0aGFuIHRoZSBkZWZhdWx0IDEwIGRpZ2VzdFxuICogaXRlcmF0aW9ucyBmb3IgaXRzIG1vZGVsIHRvIHN0YWJpbGl6ZSB0aGVuIHlvdSBzaG91bGQgaW52ZXN0aWdhdGUgd2hhdCBpcyBjYXVzaW5nIHRoZSBtb2RlbCB0b1xuICogY29udGludW91c2x5IGNoYW5nZSBkdXJpbmcgdGhlIGRpZ2VzdC5cbiAqXG4gKiBJbmNyZWFzaW5nIHRoZSBUVEwgY291bGQgaGF2ZSBwZXJmb3JtYW5jZSBpbXBsaWNhdGlvbnMsIHNvIHlvdSBzaG91bGQgbm90IGNoYW5nZSBpdCB3aXRob3V0XG4gKiBwcm9wZXIganVzdGlmaWNhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbGltaXQgVGhlIG51bWJlciBvZiBkaWdlc3QgaXRlcmF0aW9ucy5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRyb290U2NvcGVcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogRXZlcnkgYXBwbGljYXRpb24gaGFzIGEgc2luZ2xlIHJvb3Qge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9LlxuICogQWxsIG90aGVyIHNjb3BlcyBhcmUgZGVzY2VuZGFudCBzY29wZXMgb2YgdGhlIHJvb3Qgc2NvcGUuIFNjb3BlcyBwcm92aWRlIHNlcGFyYXRpb25cbiAqIGJldHdlZW4gdGhlIG1vZGVsIGFuZCB0aGUgdmlldywgdmlhIGEgbWVjaGFuaXNtIGZvciB3YXRjaGluZyB0aGUgbW9kZWwgZm9yIGNoYW5nZXMuXG4gKiBUaGV5IGFsc28gcHJvdmlkZSBldmVudCBlbWlzc2lvbi9icm9hZGNhc3QgYW5kIHN1YnNjcmlwdGlvbiBmYWNpbGl0eS4gU2VlIHRoZVxuICoge0BsaW5rIGd1aWRlL3Njb3BlIGRldmVsb3BlciBndWlkZSBvbiBzY29wZXN9LlxuICovXG5mdW5jdGlvbiAkUm9vdFNjb3BlUHJvdmlkZXIoKSB7XG4gIHZhciBUVEwgPSAxMDtcbiAgdmFyICRyb290U2NvcGVNaW5FcnIgPSBtaW5FcnIoJyRyb290U2NvcGUnKTtcbiAgdmFyIGxhc3REaXJ0eVdhdGNoID0gbnVsbDtcbiAgdmFyIGFwcGx5QXN5bmNJZCA9IG51bGw7XG5cbiAgdGhpcy5kaWdlc3RUdGwgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBUVEwgPSB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIFRUTDtcbiAgfTtcblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZFNjb3BlQ2xhc3MocGFyZW50KSB7XG4gICAgZnVuY3Rpb24gQ2hpbGRTY29wZSgpIHtcbiAgICAgIHRoaXMuJCR3YXRjaGVycyA9IHRoaXMuJCRuZXh0U2libGluZyA9XG4gICAgICAgICAgdGhpcy4kJGNoaWxkSGVhZCA9IHRoaXMuJCRjaGlsZFRhaWwgPSBudWxsO1xuICAgICAgdGhpcy4kJGxpc3RlbmVycyA9IHt9O1xuICAgICAgdGhpcy4kJGxpc3RlbmVyQ291bnQgPSB7fTtcbiAgICAgIHRoaXMuJCR3YXRjaGVyc0NvdW50ID0gMDtcbiAgICAgIHRoaXMuJGlkID0gbmV4dFVpZCgpO1xuICAgICAgdGhpcy4kJENoaWxkU2NvcGUgPSBudWxsO1xuICAgIH1cbiAgICBDaGlsZFNjb3BlLnByb3RvdHlwZSA9IHBhcmVudDtcbiAgICByZXR1cm4gQ2hpbGRTY29wZTtcbiAgfVxuXG4gIHRoaXMuJGdldCA9IFsnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJHBhcnNlJywgJyRicm93c2VyJyxcbiAgICAgIGZ1bmN0aW9uKCRleGNlcHRpb25IYW5kbGVyLCAkcGFyc2UsICRicm93c2VyKSB7XG5cbiAgICBmdW5jdGlvbiBkZXN0cm95Q2hpbGRTY29wZSgkZXZlbnQpIHtcbiAgICAgICAgJGV2ZW50LmN1cnJlbnRTY29wZS4kJGRlc3Ryb3llZCA9IHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW5VcFNjb3BlKCRzY29wZSkge1xuXG4gICAgICAvLyBTdXBwb3J0OiBJRSA5IG9ubHlcbiAgICAgIGlmIChtc2llID09PSA5KSB7XG4gICAgICAgIC8vIFRoZXJlIGlzIGEgbWVtb3J5IGxlYWsgaW4gSUU5IGlmIGFsbCBjaGlsZCBzY29wZXMgYXJlIG5vdCBkaXNjb25uZWN0ZWRcbiAgICAgICAgLy8gY29tcGxldGVseSB3aGVuIGEgc2NvcGUgaXMgZGVzdHJveWVkLiBTbyB0aGlzIGNvZGUgd2lsbCByZWN1cnNlIHVwIHRocm91Z2hcbiAgICAgICAgLy8gYWxsIHRoaXMgc2NvcGVzIGNoaWxkcmVuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFNlZSBpc3N1ZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xMDcwNlxuICAgICAgICBpZiAoJHNjb3BlLiQkY2hpbGRIZWFkKSB7XG4gICAgICAgICAgY2xlYW5VcFNjb3BlKCRzY29wZS4kJGNoaWxkSGVhZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRzY29wZS4kJG5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgY2xlYW5VcFNjb3BlKCRzY29wZS4kJG5leHRTaWJsaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29kZSBiZWxvdyB3b3JrcyBhcm91bmQgSUU5IGFuZCBWOCdzIG1lbW9yeSBsZWFrc1xuICAgICAgLy9cbiAgICAgIC8vIFNlZTpcbiAgICAgIC8vIC0gaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIwNzMjYzI2XG4gICAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzY3OTQjaXNzdWVjb21tZW50LTM4NjQ4OTA5XG4gICAgICAvLyAtIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzEzMTMjaXNzdWVjb21tZW50LTEwMzc4NDUxXG5cbiAgICAgICRzY29wZS4kcGFyZW50ID0gJHNjb3BlLiQkbmV4dFNpYmxpbmcgPSAkc2NvcGUuJCRwcmV2U2libGluZyA9ICRzY29wZS4kJGNoaWxkSGVhZCA9XG4gICAgICAgICAgJHNjb3BlLiQkY2hpbGRUYWlsID0gJHNjb3BlLiRyb290ID0gJHNjb3BlLiQkd2F0Y2hlcnMgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyB0eXBlXG4gICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQSByb290IHNjb3BlIGNhbiBiZSByZXRyaWV2ZWQgdXNpbmcgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlICRyb290U2NvcGV9IGtleSBmcm9tIHRoZVxuICAgICAqIHtAbGluayBhdXRvLiRpbmplY3RvciAkaW5qZWN0b3J9LiBDaGlsZCBzY29wZXMgYXJlIGNyZWF0ZWQgdXNpbmcgdGhlXG4gICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG5ldyAkbmV3KCl9IG1ldGhvZC4gKE1vc3Qgc2NvcGVzIGFyZSBjcmVhdGVkIGF1dG9tYXRpY2FsbHkgd2hlblxuICAgICAqIGNvbXBpbGVkIEhUTUwgdGVtcGxhdGUgaXMgZXhlY3V0ZWQuKSBTZWUgYWxzbyB0aGUge0BsaW5rIGd1aWRlL3Njb3BlIFNjb3BlcyBndWlkZX0gZm9yXG4gICAgICogYW4gaW4tZGVwdGggaW50cm9kdWN0aW9uIGFuZCB1c2FnZSBleGFtcGxlcy5cbiAgICAgKlxuICAgICAqXG4gICAgICogIyBJbmhlcml0YW5jZVxuICAgICAqIEEgc2NvcGUgY2FuIGluaGVyaXQgZnJvbSBhIHBhcmVudCBzY29wZSwgYXMgaW4gdGhpcyBleGFtcGxlOlxuICAgICAqIGBgYGpzXG4gICAgICAgICB2YXIgcGFyZW50ID0gJHJvb3RTY29wZTtcbiAgICAgICAgIHZhciBjaGlsZCA9IHBhcmVudC4kbmV3KCk7XG5cbiAgICAgICAgIHBhcmVudC5zYWx1dGF0aW9uID0gXCJIZWxsb1wiO1xuICAgICAgICAgZXhwZWN0KGNoaWxkLnNhbHV0YXRpb24pLnRvRXF1YWwoJ0hlbGxvJyk7XG5cbiAgICAgICAgIGNoaWxkLnNhbHV0YXRpb24gPSBcIldlbGNvbWVcIjtcbiAgICAgICAgIGV4cGVjdChjaGlsZC5zYWx1dGF0aW9uKS50b0VxdWFsKCdXZWxjb21lJyk7XG4gICAgICAgICBleHBlY3QocGFyZW50LnNhbHV0YXRpb24pLnRvRXF1YWwoJ0hlbGxvJyk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBXaGVuIGludGVyYWN0aW5nIHdpdGggYFNjb3BlYCBpbiB0ZXN0cywgYWRkaXRpb25hbCBoZWxwZXIgbWV0aG9kcyBhcmUgYXZhaWxhYmxlIG9uIHRoZVxuICAgICAqIGluc3RhbmNlcyBvZiBgU2NvcGVgIHR5cGUuIFNlZSB7QGxpbmsgbmdNb2NrLiRyb290U2NvcGUuU2NvcGUgbmdNb2NrIFNjb3BlfSBmb3IgYWRkaXRpb25hbFxuICAgICAqIGRldGFpbHMuXG4gICAgICpcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uKCk+PX0gcHJvdmlkZXJzIE1hcCBvZiBzZXJ2aWNlIGZhY3Rvcnkgd2hpY2ggbmVlZCB0byBiZVxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWQgZm9yIHRoZSBjdXJyZW50IHNjb3BlLiBEZWZhdWx0cyB0byB7QGxpbmsgbmd9LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsICo+PX0gaW5zdGFuY2VDYWNoZSBQcm92aWRlcyBwcmUtaW5zdGFudGlhdGVkIHNlcnZpY2VzIHdoaWNoIHNob3VsZFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZW5kL292ZXJyaWRlIHNlcnZpY2VzIHByb3ZpZGVkIGJ5IGBwcm92aWRlcnNgLiBUaGlzIGlzIGhhbmR5XG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHVuaXQtdGVzdGluZyBhbmQgaGF2aW5nIHRoZSBuZWVkIHRvIG92ZXJyaWRlIGEgZGVmYXVsdFxuICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBOZXdseSBjcmVhdGVkIHNjb3BlLlxuICAgICAqXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2NvcGUoKSB7XG4gICAgICB0aGlzLiRpZCA9IG5leHRVaWQoKTtcbiAgICAgIHRoaXMuJCRwaGFzZSA9IHRoaXMuJHBhcmVudCA9IHRoaXMuJCR3YXRjaGVycyA9XG4gICAgICAgICAgICAgICAgICAgICB0aGlzLiQkbmV4dFNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmcgPVxuICAgICAgICAgICAgICAgICAgICAgdGhpcy4kJGNoaWxkSGVhZCA9IHRoaXMuJCRjaGlsZFRhaWwgPSBudWxsO1xuICAgICAgdGhpcy4kcm9vdCA9IHRoaXM7XG4gICAgICB0aGlzLiQkZGVzdHJveWVkID0gZmFsc2U7XG4gICAgICB0aGlzLiQkbGlzdGVuZXJzID0ge307XG4gICAgICB0aGlzLiQkbGlzdGVuZXJDb3VudCA9IHt9O1xuICAgICAgdGhpcy4kJHdhdGNoZXJzQ291bnQgPSAwO1xuICAgICAgdGhpcy4kJGlzb2xhdGVCaW5kaW5ncyA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkaWRcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFVuaXF1ZSBzY29wZSBJRCAobW9ub3RvbmljYWxseSBpbmNyZWFzaW5nKSB1c2VmdWwgZm9yIGRlYnVnZ2luZy5cbiAgICAgKi9cblxuICAgICAvKipcbiAgICAgICogQG5nZG9jIHByb3BlcnR5XG4gICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHBhcmVudFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogUmVmZXJlbmNlIHRvIHRoZSBwYXJlbnQgc2NvcGUuXG4gICAgICAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBwcm9wZXJ0eVxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkcm9vdFxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVmZXJlbmNlIHRvIHRoZSByb290IHNjb3BlLlxuICAgICAgICovXG5cbiAgICBTY29wZS5wcm90b3R5cGUgPSB7XG4gICAgICBjb25zdHJ1Y3RvcjogU2NvcGUsXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJG5ld1xuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIENyZWF0ZXMgYSBuZXcgY2hpbGQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUgc2NvcGV9LlxuICAgICAgICpcbiAgICAgICAqIFRoZSBwYXJlbnQgc2NvcGUgd2lsbCBwcm9wYWdhdGUgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSBldmVudC5cbiAgICAgICAqIFRoZSBzY29wZSBjYW4gYmUgcmVtb3ZlZCBmcm9tIHRoZSBzY29wZSBoaWVyYXJjaHkgdXNpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3kgJGRlc3Ryb3koKX0uXG4gICAgICAgKlxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRlc3Ryb3kgJGRlc3Ryb3koKX0gbXVzdCBiZSBjYWxsZWQgb24gYSBzY29wZSB3aGVuIGl0IGlzXG4gICAgICAgKiBkZXNpcmVkIGZvciB0aGUgc2NvcGUgYW5kIGl0cyBjaGlsZCBzY29wZXMgdG8gYmUgcGVybWFuZW50bHkgZGV0YWNoZWQgZnJvbSB0aGUgcGFyZW50IGFuZFxuICAgICAgICogdGh1cyBzdG9wIHBhcnRpY2lwYXRpbmcgaW4gbW9kZWwgY2hhbmdlIGRldGVjdGlvbiBhbmQgbGlzdGVuZXIgbm90aWZpY2F0aW9uIGJ5IGludm9raW5nLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNvbGF0ZSBJZiB0cnVlLCB0aGVuIHRoZSBzY29wZSBkb2VzIG5vdCBwcm90b3R5cGljYWxseSBpbmhlcml0IGZyb20gdGhlXG4gICAgICAgKiAgICAgICAgIHBhcmVudCBzY29wZS4gVGhlIHNjb3BlIGlzIGlzb2xhdGVkLCBhcyBpdCBjYW4gbm90IHNlZSBwYXJlbnQgc2NvcGUgcHJvcGVydGllcy5cbiAgICAgICAqICAgICAgICAgV2hlbiBjcmVhdGluZyB3aWRnZXRzLCBpdCBpcyB1c2VmdWwgZm9yIHRoZSB3aWRnZXQgdG8gbm90IGFjY2lkZW50YWxseSByZWFkIHBhcmVudFxuICAgICAgICogICAgICAgICBzdGF0ZS5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge1Njb3BlfSBbcGFyZW50PXRoaXNdIFRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSBgU2NvcGVgfSB0aGF0IHdpbGwgYmUgdGhlIGAkcGFyZW50YFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiB0aGUgbmV3bHkgY3JlYXRlZCBzY29wZS4gRGVmYXVsdHMgdG8gYHRoaXNgIHNjb3BlIGlmIG5vdCBwcm92aWRlZC5cbiAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBpcyB1c2VkIHdoZW4gY3JlYXRpbmcgYSB0cmFuc2NsdWRlIHNjb3BlIHRvIGNvcnJlY3RseSBwbGFjZSBpdFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgc2NvcGUgaGllcmFyY2h5IHdoaWxlIG1haW50YWluaW5nIHRoZSBjb3JyZWN0IHByb3RvdHlwaWNhbFxuICAgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0YW5jZS5cbiAgICAgICAqXG4gICAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgbmV3bHkgY3JlYXRlZCBjaGlsZCBzY29wZS5cbiAgICAgICAqXG4gICAgICAgKi9cbiAgICAgICRuZXc6IGZ1bmN0aW9uKGlzb2xhdGUsIHBhcmVudCkge1xuICAgICAgICB2YXIgY2hpbGQ7XG5cbiAgICAgICAgcGFyZW50ID0gcGFyZW50IHx8IHRoaXM7XG5cbiAgICAgICAgaWYgKGlzb2xhdGUpIHtcbiAgICAgICAgICBjaGlsZCA9IG5ldyBTY29wZSgpO1xuICAgICAgICAgIGNoaWxkLiRyb290ID0gdGhpcy4kcm9vdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPbmx5IGNyZWF0ZSBhIGNoaWxkIHNjb3BlIGNsYXNzIGlmIHNvbWVib2R5IGFza3MgZm9yIG9uZSxcbiAgICAgICAgICAvLyBidXQgY2FjaGUgaXQgdG8gYWxsb3cgdGhlIFZNIHRvIG9wdGltaXplIGxvb2t1cHMuXG4gICAgICAgICAgaWYgKCF0aGlzLiQkQ2hpbGRTY29wZSkge1xuICAgICAgICAgICAgdGhpcy4kJENoaWxkU2NvcGUgPSBjcmVhdGVDaGlsZFNjb3BlQ2xhc3ModGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkID0gbmV3IHRoaXMuJCRDaGlsZFNjb3BlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGQuJHBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgY2hpbGQuJCRwcmV2U2libGluZyA9IHBhcmVudC4kJGNoaWxkVGFpbDtcbiAgICAgICAgaWYgKHBhcmVudC4kJGNoaWxkSGVhZCkge1xuICAgICAgICAgIHBhcmVudC4kJGNoaWxkVGFpbC4kJG5leHRTaWJsaW5nID0gY2hpbGQ7XG4gICAgICAgICAgcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyZW50LiQkY2hpbGRIZWFkID0gcGFyZW50LiQkY2hpbGRUYWlsID0gY2hpbGQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBXaGVuIHRoZSBuZXcgc2NvcGUgaXMgbm90IGlzb2xhdGVkIG9yIHdlIGluaGVyaXQgZnJvbSBgdGhpc2AsIGFuZFxuICAgICAgICAvLyB0aGUgcGFyZW50IHNjb3BlIGlzIGRlc3Ryb3llZCwgdGhlIHByb3BlcnR5IGAkJGRlc3Ryb3llZGAgaXMgaW5oZXJpdGVkXG4gICAgICAgIC8vIHByb3RvdHlwaWNhbGx5LiBJbiBhbGwgb3RoZXIgY2FzZXMsIHRoaXMgcHJvcGVydHkgbmVlZHMgdG8gYmUgc2V0XG4gICAgICAgIC8vIHdoZW4gdGhlIHBhcmVudCBzY29wZSBpcyBkZXN0cm95ZWQuXG4gICAgICAgIC8vIFRoZSBsaXN0ZW5lciBuZWVkcyB0byBiZSBhZGRlZCBhZnRlciB0aGUgcGFyZW50IGlzIHNldFxuICAgICAgICBpZiAoaXNvbGF0ZSB8fCBwYXJlbnQgIT09IHRoaXMpIGNoaWxkLiRvbignJGRlc3Ryb3knLCBkZXN0cm95Q2hpbGRTY29wZSk7XG5cbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyR3YXRjaFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFJlZ2lzdGVycyBhIGBsaXN0ZW5lcmAgY2FsbGJhY2sgdG8gYmUgZXhlY3V0ZWQgd2hlbmV2ZXIgdGhlIGB3YXRjaEV4cHJlc3Npb25gIGNoYW5nZXMuXG4gICAgICAgKlxuICAgICAgICogLSBUaGUgYHdhdGNoRXhwcmVzc2lvbmAgaXMgY2FsbGVkIG9uIGV2ZXJ5IGNhbGwgdG8ge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdFxuICAgICAgICogICAkZGlnZXN0KCl9IGFuZCBzaG91bGQgcmV0dXJuIHRoZSB2YWx1ZSB0aGF0IHdpbGwgYmUgd2F0Y2hlZC4gKGB3YXRjaEV4cHJlc3Npb25gIHNob3VsZCBub3QgY2hhbmdlXG4gICAgICAgKiAgIGl0cyB2YWx1ZSB3aGVuIGV4ZWN1dGVkIG11bHRpcGxlIHRpbWVzIHdpdGggdGhlIHNhbWUgaW5wdXQgYmVjYXVzZSBpdCBtYXkgYmUgZXhlY3V0ZWQgbXVsdGlwbGVcbiAgICAgICAqICAgdGltZXMgYnkge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0KCl9LiBUaGF0IGlzLCBgd2F0Y2hFeHByZXNzaW9uYCBzaG91bGQgYmVcbiAgICAgICAqICAgW2lkZW1wb3RlbnRdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSWRlbXBvdGVuY2UpLilcbiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIG9ubHkgd2hlbiB0aGUgdmFsdWUgZnJvbSB0aGUgY3VycmVudCBgd2F0Y2hFeHByZXNzaW9uYCBhbmQgdGhlXG4gICAgICAgKiAgIHByZXZpb3VzIGNhbGwgdG8gYHdhdGNoRXhwcmVzc2lvbmAgYXJlIG5vdCBlcXVhbCAod2l0aCB0aGUgZXhjZXB0aW9uIG9mIHRoZSBpbml0aWFsIHJ1bixcbiAgICAgICAqICAgc2VlIGJlbG93KS4gSW5lcXVhbGl0eSBpcyBkZXRlcm1pbmVkIGFjY29yZGluZyB0byByZWZlcmVuY2UgaW5lcXVhbGl0eSxcbiAgICAgICAqICAgW3N0cmljdCBjb21wYXJpc29uXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvQ29tcGFyaXNvbl9PcGVyYXRvcnMpXG4gICAgICAgKiAgICB2aWEgdGhlIGAhPT1gIEphdmFzY3JpcHQgb3BlcmF0b3IsIHVubGVzcyBgb2JqZWN0RXF1YWxpdHkgPT0gdHJ1ZWBcbiAgICAgICAqICAgKHNlZSBuZXh0IHBvaW50KVxuICAgICAgICogLSBXaGVuIGBvYmplY3RFcXVhbGl0eSA9PSB0cnVlYCwgaW5lcXVhbGl0eSBvZiB0aGUgYHdhdGNoRXhwcmVzc2lvbmAgaXMgZGV0ZXJtaW5lZFxuICAgICAgICogICBhY2NvcmRpbmcgdG8gdGhlIHtAbGluayBhbmd1bGFyLmVxdWFsc30gZnVuY3Rpb24uIFRvIHNhdmUgdGhlIHZhbHVlIG9mIHRoZSBvYmplY3QgZm9yXG4gICAgICAgKiAgIGxhdGVyIGNvbXBhcmlzb24sIHRoZSB7QGxpbmsgYW5ndWxhci5jb3B5fSBmdW5jdGlvbiBpcyB1c2VkLiBUaGlzIHRoZXJlZm9yZSBtZWFucyB0aGF0XG4gICAgICAgKiAgIHdhdGNoaW5nIGNvbXBsZXggb2JqZWN0cyB3aWxsIGhhdmUgYWR2ZXJzZSBtZW1vcnkgYW5kIHBlcmZvcm1hbmNlIGltcGxpY2F0aW9ucy5cbiAgICAgICAqIC0gVGhpcyBzaG91bGQgbm90IGJlIHVzZWQgdG8gd2F0Y2ggZm9yIGNoYW5nZXMgaW4gb2JqZWN0cyB0aGF0IGFyZVxuICAgICAgICogICBvciBjb250YWluIFtGaWxlXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9BUEkvRmlsZSkgb2JqZWN0cyBkdWUgdG8gbGltaXRhdGlvbnMgd2l0aCB7QGxpbmsgYW5ndWxhci5jb3B5IGBhbmd1bGFyLmNvcHlgfS5cbiAgICAgICAqIC0gVGhlIHdhdGNoIGBsaXN0ZW5lcmAgbWF5IGNoYW5nZSB0aGUgbW9kZWwsIHdoaWNoIG1heSB0cmlnZ2VyIG90aGVyIGBsaXN0ZW5lcmBzIHRvIGZpcmUuXG4gICAgICAgKiAgIFRoaXMgaXMgYWNoaWV2ZWQgYnkgcmVydW5uaW5nIHRoZSB3YXRjaGVycyB1bnRpbCBubyBjaGFuZ2VzIGFyZSBkZXRlY3RlZC4gVGhlIHJlcnVuXG4gICAgICAgKiAgIGl0ZXJhdGlvbiBsaW1pdCBpcyAxMCB0byBwcmV2ZW50IGFuIGluZmluaXRlIGxvb3AgZGVhZGxvY2suXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIElmIHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkIHdoZW5ldmVyIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gaXMgY2FsbGVkLFxuICAgICAgICogeW91IGNhbiByZWdpc3RlciBhIGB3YXRjaEV4cHJlc3Npb25gIGZ1bmN0aW9uIHdpdGggbm8gYGxpc3RlbmVyYC4gKEJlIHByZXBhcmVkIGZvclxuICAgICAgICogbXVsdGlwbGUgY2FsbHMgdG8geW91ciBgd2F0Y2hFeHByZXNzaW9uYCBiZWNhdXNlIGl0IHdpbGwgZXhlY3V0ZSBtdWx0aXBsZSB0aW1lcyBpbiBhXG4gICAgICAgKiBzaW5nbGUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZSBpZiBhIGNoYW5nZSBpcyBkZXRlY3RlZC4pXG4gICAgICAgKlxuICAgICAgICogQWZ0ZXIgYSB3YXRjaGVyIGlzIHJlZ2lzdGVyZWQgd2l0aCB0aGUgc2NvcGUsIHRoZSBgbGlzdGVuZXJgIGZuIGlzIGNhbGxlZCBhc3luY2hyb25vdXNseVxuICAgICAgICogKHZpYSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZXZhbEFzeW5jICRldmFsQXN5bmN9KSB0byBpbml0aWFsaXplIHRoZVxuICAgICAgICogd2F0Y2hlci4gSW4gcmFyZSBjYXNlcywgdGhpcyBpcyB1bmRlc2lyYWJsZSBiZWNhdXNlIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQgd2hlbiB0aGUgcmVzdWx0XG4gICAgICAgKiBvZiBgd2F0Y2hFeHByZXNzaW9uYCBkaWRuJ3QgY2hhbmdlLiBUbyBkZXRlY3QgdGhpcyBzY2VuYXJpbyB3aXRoaW4gdGhlIGBsaXN0ZW5lcmAgZm4sIHlvdVxuICAgICAgICogY2FuIGNvbXBhcmUgdGhlIGBuZXdWYWxgIGFuZCBgb2xkVmFsYC4gSWYgdGhlc2UgdHdvIHZhbHVlcyBhcmUgaWRlbnRpY2FsIChgPT09YCkgdGhlbiB0aGVcbiAgICAgICAqIGxpc3RlbmVyIHdhcyBjYWxsZWQgZHVlIHRvIGluaXRpYWxpemF0aW9uLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogIyBFeGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICAvLyBsZXQncyBhc3N1bWUgdGhhdCBzY29wZSB3YXMgZGVwZW5kZW5jeSBpbmplY3RlZCBhcyB0aGUgJHJvb3RTY29wZVxuICAgICAgICAgICB2YXIgc2NvcGUgPSAkcm9vdFNjb3BlO1xuICAgICAgICAgICBzY29wZS5uYW1lID0gJ21pc2tvJztcbiAgICAgICAgICAgc2NvcGUuY291bnRlciA9IDA7XG5cbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgIHNjb3BlLiR3YXRjaCgnbmFtZScsIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSBzY29wZS5jb3VudGVyICsgMTtcbiAgICAgICAgICAgfSk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xuXG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgLy8gdGhlIGxpc3RlbmVyIGlzIGFsd2F5cyBjYWxsZWQgZHVyaW5nIHRoZSBmaXJzdCAkZGlnZXN0IGxvb3AgYWZ0ZXIgaXQgd2FzIHJlZ2lzdGVyZWRcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICAvLyBidXQgbm93IGl0IHdpbGwgbm90IGJlIGNhbGxlZCB1bmxlc3MgdGhlIHZhbHVlIGNoYW5nZXNcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMSk7XG5cbiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdhZGFtJztcbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgyKTtcblxuXG5cbiAgICAgICAgICAgLy8gVXNpbmcgYSBmdW5jdGlvbiBhcyBhIHdhdGNoRXhwcmVzc2lvblxuICAgICAgICAgICB2YXIgZm9vZDtcbiAgICAgICAgICAgc2NvcGUuZm9vZENvdW50ZXIgPSAwO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgIHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIHZhbHVlIGJlaW5nIHdhdGNoZWQuIEl0IGlzIGNhbGxlZCBmb3IgZWFjaCB0dXJuIG9mIHRoZSAkZGlnZXN0IGxvb3BcbiAgICAgICAgICAgICBmdW5jdGlvbigpIHsgcmV0dXJuIGZvb2Q7IH0sXG4gICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgY2hhbmdlIGxpc3RlbmVyLCBjYWxsZWQgd2hlbiB0aGUgdmFsdWUgcmV0dXJuZWQgZnJvbSB0aGUgYWJvdmUgZnVuY3Rpb24gY2hhbmdlc1xuICAgICAgICAgICAgIGZ1bmN0aW9uKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgaWYgKCBuZXdWYWx1ZSAhPT0gb2xkVmFsdWUgKSB7XG4gICAgICAgICAgICAgICAgIC8vIE9ubHkgaW5jcmVtZW50IHRoZSBjb3VudGVyIGlmIHRoZSB2YWx1ZSBjaGFuZ2VkXG4gICAgICAgICAgICAgICAgIHNjb3BlLmZvb2RDb3VudGVyID0gc2NvcGUuZm9vZENvdW50ZXIgKyAxO1xuICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIH1cbiAgICAgICAgICAgKTtcbiAgICAgICAgICAgLy8gTm8gZGlnZXN0IGhhcyBiZWVuIHJ1biBzbyB0aGUgY291bnRlciB3aWxsIGJlIHplcm9cbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmZvb2RDb3VudGVyKS50b0VxdWFsKDApO1xuXG4gICAgICAgICAgIC8vIFJ1biB0aGUgZGlnZXN0IGJ1dCBzaW5jZSBmb29kIGhhcyBub3QgY2hhbmdlZCBjb3VudCB3aWxsIHN0aWxsIGJlIHplcm9cbiAgICAgICAgICAgc2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuZm9vZENvdW50ZXIpLnRvRXF1YWwoMCk7XG5cbiAgICAgICAgICAgLy8gVXBkYXRlIGZvb2QgYW5kIHJ1biBkaWdlc3QuICBOb3cgdGhlIGNvdW50ZXIgd2lsbCBpbmNyZW1lbnRcbiAgICAgICAgICAgZm9vZCA9ICdjaGVlc2VidXJnZXInO1xuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIGV4cGVjdChzY29wZS5mb29kQ291bnRlcikudG9FcXVhbCgxKTtcblxuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhmdW5jdGlvbigpfHN0cmluZyl9IHdhdGNoRXhwcmVzc2lvbiBFeHByZXNzaW9uIHRoYXQgaXMgZXZhbHVhdGVkIG9uIGVhY2hcbiAgICAgICAqICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdH0gY3ljbGUuIEEgY2hhbmdlIGluIHRoZSByZXR1cm4gdmFsdWUgdHJpZ2dlcnNcbiAgICAgICAqICAgIGEgY2FsbCB0byB0aGUgYGxpc3RlbmVyYC5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBFdmFsdWF0ZWQgYXMge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn1cbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGNhbGxlZCB3aXRoIGN1cnJlbnQgYHNjb3BlYCBhcyBhIHBhcmFtZXRlci5cbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3VmFsLCBvbGRWYWwsIHNjb3BlKX0gbGlzdGVuZXIgQ2FsbGJhY2sgY2FsbGVkIHdoZW5ldmVyIHRoZSB2YWx1ZVxuICAgICAgICogICAgb2YgYHdhdGNoRXhwcmVzc2lvbmAgY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBuZXdWYWxgIGNvbnRhaW5zIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uYFxuICAgICAgICogICAgLSBgb2xkVmFsYCBjb250YWlucyB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICAtIGBzY29wZWAgcmVmZXJzIHRvIHRoZSBjdXJyZW50IHNjb3BlXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW49fSBbb2JqZWN0RXF1YWxpdHk9ZmFsc2VdIENvbXBhcmUgZm9yIG9iamVjdCBlcXVhbGl0eSB1c2luZyB7QGxpbmsgYW5ndWxhci5lcXVhbHN9IGluc3RlYWQgb2ZcbiAgICAgICAqICAgICBjb21wYXJpbmcgZm9yIHJlZmVyZW5jZSBlcXVhbGl0eS5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGVyZWdpc3RyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgbGlzdGVuZXIuXG4gICAgICAgKi9cbiAgICAgICR3YXRjaDogZnVuY3Rpb24od2F0Y2hFeHAsIGxpc3RlbmVyLCBvYmplY3RFcXVhbGl0eSwgcHJldHR5UHJpbnRFeHByZXNzaW9uKSB7XG4gICAgICAgIHZhciBnZXQgPSAkcGFyc2Uod2F0Y2hFeHApO1xuXG4gICAgICAgIGlmIChnZXQuJCR3YXRjaERlbGVnYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGdldC4kJHdhdGNoRGVsZWdhdGUodGhpcywgbGlzdGVuZXIsIG9iamVjdEVxdWFsaXR5LCBnZXQsIHdhdGNoRXhwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2NvcGUgPSB0aGlzLFxuICAgICAgICAgICAgYXJyYXkgPSBzY29wZS4kJHdhdGNoZXJzLFxuICAgICAgICAgICAgd2F0Y2hlciA9IHtcbiAgICAgICAgICAgICAgZm46IGxpc3RlbmVyLFxuICAgICAgICAgICAgICBsYXN0OiBpbml0V2F0Y2hWYWwsXG4gICAgICAgICAgICAgIGdldDogZ2V0LFxuICAgICAgICAgICAgICBleHA6IHByZXR0eVByaW50RXhwcmVzc2lvbiB8fCB3YXRjaEV4cCxcbiAgICAgICAgICAgICAgZXE6ICEhb2JqZWN0RXF1YWxpdHlcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSBudWxsO1xuXG4gICAgICAgIGlmICghaXNGdW5jdGlvbihsaXN0ZW5lcikpIHtcbiAgICAgICAgICB3YXRjaGVyLmZuID0gbm9vcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghYXJyYXkpIHtcbiAgICAgICAgICBhcnJheSA9IHNjb3BlLiQkd2F0Y2hlcnMgPSBbXTtcbiAgICAgICAgICBhcnJheS4kJGRpZ2VzdFdhdGNoSW5kZXggPSAtMTtcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSB1c2UgdW5zaGlmdCBzaW5jZSB3ZSB1c2UgYSB3aGlsZSBsb29wIGluICRkaWdlc3QgZm9yIHNwZWVkLlxuICAgICAgICAvLyB0aGUgd2hpbGUgbG9vcCByZWFkcyBpbiByZXZlcnNlIG9yZGVyLlxuICAgICAgICBhcnJheS51bnNoaWZ0KHdhdGNoZXIpO1xuICAgICAgICBhcnJheS4kJGRpZ2VzdFdhdGNoSW5kZXgrKztcbiAgICAgICAgaW5jcmVtZW50V2F0Y2hlcnNDb3VudCh0aGlzLCAxKTtcblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gZGVyZWdpc3RlcldhdGNoKCkge1xuICAgICAgICAgIHZhciBpbmRleCA9IGFycmF5UmVtb3ZlKGFycmF5LCB3YXRjaGVyKTtcbiAgICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgaW5jcmVtZW50V2F0Y2hlcnNDb3VudChzY29wZSwgLTEpO1xuICAgICAgICAgICAgaWYgKGluZGV4IDwgYXJyYXkuJCRkaWdlc3RXYXRjaEluZGV4KSB7XG4gICAgICAgICAgICAgIGFycmF5LiQkZGlnZXN0V2F0Y2hJbmRleC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG4gICAgICAgIH07XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoR3JvdXBcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBBIHZhcmlhbnQgb2Yge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfSB3aGVyZSBpdCB3YXRjaGVzIGFuIGFycmF5IG9mIGB3YXRjaEV4cHJlc3Npb25zYC5cbiAgICAgICAqIElmIGFueSBvbmUgZXhwcmVzc2lvbiBpbiB0aGUgY29sbGVjdGlvbiBjaGFuZ2VzIHRoZSBgbGlzdGVuZXJgIGlzIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqIC0gVGhlIGl0ZW1zIGluIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AgYXJyYXkgYXJlIG9ic2VydmVkIHZpYSB0aGUgc3RhbmRhcmQgYCR3YXRjaGAgb3BlcmF0aW9uLiBUaGVpciByZXR1cm5cbiAgICAgICAqICAgdmFsdWVzIGFyZSBleGFtaW5lZCBmb3IgY2hhbmdlcyBvbiBldmVyeSBjYWxsIHRvIGAkZGlnZXN0YC5cbiAgICAgICAqIC0gVGhlIGBsaXN0ZW5lcmAgaXMgY2FsbGVkIHdoZW5ldmVyIGFueSBleHByZXNzaW9uIGluIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AgYXJyYXkgY2hhbmdlcy5cbiAgICAgICAqXG4gICAgICAgKiBgJHdhdGNoR3JvdXBgIGlzIG1vcmUgcGVyZm9ybWFudCB0aGFuIHdhdGNoaW5nIGVhY2ggZXhwcmVzc2lvbiBpbmRpdmlkdWFsbHksIGFuZCBzaG91bGQgYmVcbiAgICAgICAqIHVzZWQgd2hlbiB0aGUgbGlzdGVuZXIgZG9lcyBub3QgbmVlZCB0byBrbm93IHdoaWNoIGV4cHJlc3Npb24gaGFzIGNoYW5nZWQuXG4gICAgICAgKiBJZiB0aGUgbGlzdGVuZXIgbmVlZHMgdG8ga25vdyB3aGljaCBleHByZXNzaW9uIGhhcyBjaGFuZ2VkLFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfSBvclxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoQ29sbGVjdGlvbiAkd2F0Y2hDb2xsZWN0aW9uKCl9IHNob3VsZCBiZSB1c2VkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7QXJyYXkuPHN0cmluZ3xGdW5jdGlvbihzY29wZSk+fSB3YXRjaEV4cHJlc3Npb25zIEFycmF5IG9mIGV4cHJlc3Npb25zIHRoYXQgd2lsbCBiZSBpbmRpdmlkdWFsbHlcbiAgICAgICAqIHdhdGNoZWQgdXNpbmcge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJHdhdGNoICR3YXRjaCgpfVxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb24obmV3VmFsdWVzLCBvbGRWYWx1ZXMsIHNjb3BlKX0gbGlzdGVuZXIgQ2FsbGJhY2sgY2FsbGVkIHdoZW5ldmVyIHRoZSByZXR1cm4gdmFsdWUgb2YgYW55XG4gICAgICAgKiAgICBleHByZXNzaW9uIGluIGB3YXRjaEV4cHJlc3Npb25zYCBjaGFuZ2VzXG4gICAgICAgKiAgICBUaGUgYG5ld1ZhbHVlc2AgYXJyYXkgY29udGFpbnMgdGhlIGN1cnJlbnQgdmFsdWVzIG9mIHRoZSBgd2F0Y2hFeHByZXNzaW9uc2AsIHdpdGggdGhlIGluZGV4ZXMgbWF0Y2hpbmdcbiAgICAgICAqICAgIHRob3NlIG9mIGB3YXRjaEV4cHJlc3Npb25gXG4gICAgICAgKiAgICBhbmQgdGhlIGBvbGRWYWx1ZXNgIGFycmF5IGNvbnRhaW5zIHRoZSBwcmV2aW91cyB2YWx1ZXMgb2YgdGhlIGB3YXRjaEV4cHJlc3Npb25zYCwgd2l0aCB0aGUgaW5kZXhlcyBtYXRjaGluZ1xuICAgICAgICogICAgdGhvc2Ugb2YgYHdhdGNoRXhwcmVzc2lvbmAuXG4gICAgICAgKlxuICAgICAgICogICAgTm90ZSB0aGF0IGBuZXdWYWx1ZXNgIGFuZCBgb2xkVmFsdWVzYCByZWZsZWN0IHRoZSBkaWZmZXJlbmNlcyBpbiBlYWNoICoqaW5kaXZpZHVhbCoqXG4gICAgICAgKiAgICBleHByZXNzaW9uLCBhbmQgbm90IHRoZSBkaWZmZXJlbmNlIG9mIHRoZSB2YWx1ZXMgYmV0d2VlbiBlYWNoIGNhbGwgb2YgdGhlIGxpc3RlbmVyLlxuICAgICAgICogICAgVGhhdCBtZWFucyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIGBuZXdWYWx1ZXNgIGFuZCBgb2xkVmFsdWVzYCBjYW5ub3QgYmUgdXNlZCB0byBkZXRlcm1pbmVcbiAgICAgICAqICAgIHdoaWNoIGV4cHJlc3Npb24gaGFzIGNoYW5nZWQgLyByZW1haW5lZCBzdGFibGU6XG4gICAgICAgKlxuICAgICAgICogICAgYGBganNcbiAgICAgICAqXG4gICAgICAgKiAgICAkc2NvcGUuJHdhdGNoR3JvdXAoWyd2MScsICd2MiddLCBmdW5jdGlvbihuZXdWYWx1ZXMsIG9sZFZhbHVlcykge1xuICAgICAgICogICAgICBjb25zb2xlLmxvZyhuZXdWYWx1ZXMsIG9sZFZhbHVlcyk7XG4gICAgICAgKiAgICB9KTtcbiAgICAgICAqXG4gICAgICAgKiAgICAvLyBuZXdWYWx1ZXMsIG9sZFZhbHVlcyBpbml0aWFsbHlcbiAgICAgICAqICAgIC8vIFt1bmRlZmluZWQsIHVuZGVmaW5lZF0sIFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgICAgICAqXG4gICAgICAgKiAgICAkc2NvcGUudjEgPSAnYSc7XG4gICAgICAgKiAgICAkc2NvcGUudjIgPSAnYSc7XG4gICAgICAgKlxuICAgICAgICogICAgLy8gWydhJywgJ2EnXSwgW3VuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAgICAgICpcbiAgICAgICAqICAgICRzY29wZS52MiA9ICdiJ1xuICAgICAgICpcbiAgICAgICAqICAgIC8vIHYxIGhhc24ndCBjaGFuZ2VkIHNpbmNlIGl0IGJlY2FtZSBgJ2EnYCwgdGhlcmVmb3JlIGl0cyBvbGRWYWx1ZSBpcyBzdGlsbCBgdW5kZWZpbmVkYFxuICAgICAgICogICAgLy8gWydhJywgJ2InXSwgW3VuZGVmaW5lZCwgJ2EnXVxuICAgICAgICpcbiAgICAgICAqICAgIGBgYFxuICAgICAgICpcbiAgICAgICAqICAgIFRoZSBgc2NvcGVgIHJlZmVycyB0byB0aGUgY3VycmVudCBzY29wZS5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciBhbGwgbGlzdGVuZXJzLlxuICAgICAgICovXG4gICAgICAkd2F0Y2hHcm91cDogZnVuY3Rpb24od2F0Y2hFeHByZXNzaW9ucywgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlcyA9IG5ldyBBcnJheSh3YXRjaEV4cHJlc3Npb25zLmxlbmd0aCk7XG4gICAgICAgIHZhciBuZXdWYWx1ZXMgPSBuZXcgQXJyYXkod2F0Y2hFeHByZXNzaW9ucy5sZW5ndGgpO1xuICAgICAgICB2YXIgZGVyZWdpc3RlckZucyA9IFtdO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHZhciBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZmlyc3RSdW4gPSB0cnVlO1xuXG4gICAgICAgIGlmICghd2F0Y2hFeHByZXNzaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAvLyBObyBleHByZXNzaW9ucyBtZWFucyB3ZSBjYWxsIHRoZSBsaXN0ZW5lciBBU0FQXG4gICAgICAgICAgdmFyIHNob3VsZENhbGwgPSB0cnVlO1xuICAgICAgICAgIHNlbGYuJGV2YWxBc3luYyhmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChzaG91bGRDYWxsKSBsaXN0ZW5lcihuZXdWYWx1ZXMsIG5ld1ZhbHVlcywgc2VsZik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaEdyb3VwKCkge1xuICAgICAgICAgICAgc2hvdWxkQ2FsbCA9IGZhbHNlO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2F0Y2hFeHByZXNzaW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAvLyBTcGVjaWFsIGNhc2Ugc2l6ZSBvZiBvbmVcbiAgICAgICAgICByZXR1cm4gdGhpcy4kd2F0Y2god2F0Y2hFeHByZXNzaW9uc1swXSwgZnVuY3Rpb24gd2F0Y2hHcm91cEFjdGlvbih2YWx1ZSwgb2xkVmFsdWUsIHNjb3BlKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZXNbMF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIG9sZFZhbHVlc1swXSA9IG9sZFZhbHVlO1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCAodmFsdWUgPT09IG9sZFZhbHVlKSA/IG5ld1ZhbHVlcyA6IG9sZFZhbHVlcywgc2NvcGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yRWFjaCh3YXRjaEV4cHJlc3Npb25zLCBmdW5jdGlvbihleHByLCBpKSB7XG4gICAgICAgICAgdmFyIHVud2F0Y2hGbiA9IHNlbGYuJHdhdGNoKGV4cHIsIGZ1bmN0aW9uIHdhdGNoR3JvdXBTdWJBY3Rpb24odmFsdWUsIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZXNbaV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIG9sZFZhbHVlc1tpXSA9IG9sZFZhbHVlO1xuICAgICAgICAgICAgaWYgKCFjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCkge1xuICAgICAgICAgICAgICBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgIHNlbGYuJGV2YWxBc3luYyh3YXRjaEdyb3VwQWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBkZXJlZ2lzdGVyRm5zLnB1c2godW53YXRjaEZuKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gd2F0Y2hHcm91cEFjdGlvbigpIHtcbiAgICAgICAgICBjaGFuZ2VSZWFjdGlvblNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgaWYgKGZpcnN0UnVuKSB7XG4gICAgICAgICAgICBmaXJzdFJ1biA9IGZhbHNlO1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWVzLCBuZXdWYWx1ZXMsIHNlbGYpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaXN0ZW5lcihuZXdWYWx1ZXMsIG9sZFZhbHVlcywgc2VsZik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlcmVnaXN0ZXJXYXRjaEdyb3VwKCkge1xuICAgICAgICAgIHdoaWxlIChkZXJlZ2lzdGVyRm5zLmxlbmd0aCkge1xuICAgICAgICAgICAgZGVyZWdpc3RlckZucy5zaGlmdCgpKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJHdhdGNoQ29sbGVjdGlvblxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFNoYWxsb3cgd2F0Y2hlcyB0aGUgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kIGZpcmVzIHdoZW5ldmVyIGFueSBvZiB0aGUgcHJvcGVydGllcyBjaGFuZ2VcbiAgICAgICAqIChmb3IgYXJyYXlzLCB0aGlzIGltcGxpZXMgd2F0Y2hpbmcgdGhlIGFycmF5IGl0ZW1zOyBmb3Igb2JqZWN0IG1hcHMsIHRoaXMgaW1wbGllcyB3YXRjaGluZ1xuICAgICAgICogdGhlIHByb3BlcnRpZXMpLiBJZiBhIGNoYW5nZSBpcyBkZXRlY3RlZCwgdGhlIGBsaXN0ZW5lcmAgY2FsbGJhY2sgaXMgZmlyZWQuXG4gICAgICAgKlxuICAgICAgICogLSBUaGUgYG9iamAgY29sbGVjdGlvbiBpcyBvYnNlcnZlZCB2aWEgc3RhbmRhcmQgJHdhdGNoIG9wZXJhdGlvbiBhbmQgaXMgZXhhbWluZWQgb24gZXZlcnlcbiAgICAgICAqICAgY2FsbCB0byAkZGlnZXN0KCkgdG8gc2VlIGlmIGFueSBpdGVtcyBoYXZlIGJlZW4gYWRkZWQsIHJlbW92ZWQsIG9yIG1vdmVkLlxuICAgICAgICogLSBUaGUgYGxpc3RlbmVyYCBpcyBjYWxsZWQgd2hlbmV2ZXIgYW55dGhpbmcgd2l0aGluIHRoZSBgb2JqYCBoYXMgY2hhbmdlZC4gRXhhbXBsZXMgaW5jbHVkZVxuICAgICAgICogICBhZGRpbmcsIHJlbW92aW5nLCBhbmQgbW92aW5nIGl0ZW1zIGJlbG9uZ2luZyB0byBhbiBvYmplY3Qgb3IgYXJyYXkuXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqICMgRXhhbXBsZVxuICAgICAgICogYGBganNcbiAgICAgICAgICAkc2NvcGUubmFtZXMgPSBbJ2lnb3InLCAnbWF0aWFzJywgJ21pc2tvJywgJ2phbWVzJ107XG4gICAgICAgICAgJHNjb3BlLmRhdGFDb3VudCA9IDQ7XG5cbiAgICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbignbmFtZXMnLCBmdW5jdGlvbihuZXdOYW1lcywgb2xkTmFtZXMpIHtcbiAgICAgICAgICAgICRzY29wZS5kYXRhQ291bnQgPSBuZXdOYW1lcy5sZW5ndGg7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBleHBlY3QoJHNjb3BlLmRhdGFDb3VudCkudG9FcXVhbCg0KTtcbiAgICAgICAgICAkc2NvcGUuJGRpZ2VzdCgpO1xuXG4gICAgICAgICAgLy9zdGlsbCBhdCA0IC4uLiBubyBjaGFuZ2VzXG4gICAgICAgICAgZXhwZWN0KCRzY29wZS5kYXRhQ291bnQpLnRvRXF1YWwoNCk7XG5cbiAgICAgICAgICAkc2NvcGUubmFtZXMucG9wKCk7XG4gICAgICAgICAgJHNjb3BlLiRkaWdlc3QoKTtcblxuICAgICAgICAgIC8vbm93IHRoZXJlJ3MgYmVlbiBhIGNoYW5nZVxuICAgICAgICAgIGV4cGVjdCgkc2NvcGUuZGF0YUNvdW50KS50b0VxdWFsKDMpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9uKHNjb3BlKX0gb2JqIEV2YWx1YXRlZCBhcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS4gVGhlXG4gICAgICAgKiAgICBleHByZXNzaW9uIHZhbHVlIHNob3VsZCBldmFsdWF0ZSB0byBhbiBvYmplY3Qgb3IgYW4gYXJyYXkgd2hpY2ggaXMgb2JzZXJ2ZWQgb24gZWFjaFxuICAgICAgICogICAge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCAkZGlnZXN0fSBjeWNsZS4gQW55IHNoYWxsb3cgY2hhbmdlIHdpdGhpbiB0aGVcbiAgICAgICAqICAgIGNvbGxlY3Rpb24gd2lsbCB0cmlnZ2VyIGEgY2FsbCB0byB0aGUgYGxpc3RlbmVyYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge2Z1bmN0aW9uKG5ld0NvbGxlY3Rpb24sIG9sZENvbGxlY3Rpb24sIHNjb3BlKX0gbGlzdGVuZXIgYSBjYWxsYmFjayBmdW5jdGlvbiBjYWxsZWRcbiAgICAgICAqICAgIHdoZW4gYSBjaGFuZ2UgaXMgZGV0ZWN0ZWQuXG4gICAgICAgKiAgICAtIFRoZSBgbmV3Q29sbGVjdGlvbmAgb2JqZWN0IGlzIHRoZSBuZXdseSBtb2RpZmllZCBkYXRhIG9idGFpbmVkIGZyb20gdGhlIGBvYmpgIGV4cHJlc3Npb25cbiAgICAgICAqICAgIC0gVGhlIGBvbGRDb2xsZWN0aW9uYCBvYmplY3QgaXMgYSBjb3B5IG9mIHRoZSBmb3JtZXIgY29sbGVjdGlvbiBkYXRhLlxuICAgICAgICogICAgICBEdWUgdG8gcGVyZm9ybWFuY2UgY29uc2lkZXJhdGlvbnMsIHRoZWBvbGRDb2xsZWN0aW9uYCB2YWx1ZSBpcyBjb21wdXRlZCBvbmx5IGlmIHRoZVxuICAgICAgICogICAgICBgbGlzdGVuZXJgIGZ1bmN0aW9uIGRlY2xhcmVzIHR3byBvciBtb3JlIGFyZ3VtZW50cy5cbiAgICAgICAqICAgIC0gVGhlIGBzY29wZWAgYXJndW1lbnQgcmVmZXJzIHRvIHRoZSBjdXJyZW50IHNjb3BlLlxuICAgICAgICpcbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGZvciB0aGlzIGxpc3RlbmVyLiBXaGVuIHRoZVxuICAgICAgICogICAgZGUtcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkLCB0aGUgaW50ZXJuYWwgd2F0Y2ggb3BlcmF0aW9uIGlzIHRlcm1pbmF0ZWQuXG4gICAgICAgKi9cbiAgICAgICR3YXRjaENvbGxlY3Rpb246IGZ1bmN0aW9uKG9iaiwgbGlzdGVuZXIpIHtcbiAgICAgICAgJHdhdGNoQ29sbGVjdGlvbkludGVyY2VwdG9yLiRzdGF0ZWZ1bCA9IHRydWU7XG5cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAvLyB0aGUgY3VycmVudCB2YWx1ZSwgdXBkYXRlZCBvbiBlYWNoIGRpcnR5LWNoZWNrIHJ1blxuICAgICAgICB2YXIgbmV3VmFsdWU7XG4gICAgICAgIC8vIGEgc2hhbGxvdyBjb3B5IG9mIHRoZSBuZXdWYWx1ZSBmcm9tIHRoZSBsYXN0IGRpcnR5LWNoZWNrIHJ1bixcbiAgICAgICAgLy8gdXBkYXRlZCB0byBtYXRjaCBuZXdWYWx1ZSBkdXJpbmcgZGlydHktY2hlY2sgcnVuXG4gICAgICAgIHZhciBvbGRWYWx1ZTtcbiAgICAgICAgLy8gYSBzaGFsbG93IGNvcHkgb2YgdGhlIG5ld1ZhbHVlIGZyb20gd2hlbiB0aGUgbGFzdCBjaGFuZ2UgaGFwcGVuZWRcbiAgICAgICAgdmFyIHZlcnlPbGRWYWx1ZTtcbiAgICAgICAgLy8gb25seSB0cmFjayB2ZXJ5T2xkVmFsdWUgaWYgdGhlIGxpc3RlbmVyIGlzIGFza2luZyBmb3IgaXRcbiAgICAgICAgdmFyIHRyYWNrVmVyeU9sZFZhbHVlID0gKGxpc3RlbmVyLmxlbmd0aCA+IDEpO1xuICAgICAgICB2YXIgY2hhbmdlRGV0ZWN0ZWQgPSAwO1xuICAgICAgICB2YXIgY2hhbmdlRGV0ZWN0b3IgPSAkcGFyc2Uob2JqLCAkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IpO1xuICAgICAgICB2YXIgaW50ZXJuYWxBcnJheSA9IFtdO1xuICAgICAgICB2YXIgaW50ZXJuYWxPYmplY3QgPSB7fTtcbiAgICAgICAgdmFyIGluaXRSdW4gPSB0cnVlO1xuICAgICAgICB2YXIgb2xkTGVuZ3RoID0gMDtcblxuICAgICAgICBmdW5jdGlvbiAkd2F0Y2hDb2xsZWN0aW9uSW50ZXJjZXB0b3IoX3ZhbHVlKSB7XG4gICAgICAgICAgbmV3VmFsdWUgPSBfdmFsdWU7XG4gICAgICAgICAgdmFyIG5ld0xlbmd0aCwga2V5LCBib3RoTmFOLCBuZXdJdGVtLCBvbGRJdGVtO1xuXG4gICAgICAgICAgLy8gSWYgdGhlIG5ldyB2YWx1ZSBpcyB1bmRlZmluZWQsIHRoZW4gcmV0dXJuIHVuZGVmaW5lZCBhcyB0aGUgd2F0Y2ggbWF5IGJlIGEgb25lLXRpbWUgd2F0Y2hcbiAgICAgICAgICBpZiAoaXNVbmRlZmluZWQobmV3VmFsdWUpKSByZXR1cm47XG5cbiAgICAgICAgICBpZiAoIWlzT2JqZWN0KG5ld1ZhbHVlKSkgeyAvLyBpZiBwcmltaXRpdmVcbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgb2xkVmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXlMaWtlKG5ld1ZhbHVlKSkge1xuICAgICAgICAgICAgaWYgKG9sZFZhbHVlICE9PSBpbnRlcm5hbEFycmF5KSB7XG4gICAgICAgICAgICAgIC8vIHdlIGFyZSB0cmFuc2l0aW9uaW5nIGZyb20gc29tZXRoaW5nIHdoaWNoIHdhcyBub3QgYW4gYXJyYXkgaW50byBhcnJheS5cbiAgICAgICAgICAgICAgb2xkVmFsdWUgPSBpbnRlcm5hbEFycmF5O1xuICAgICAgICAgICAgICBvbGRMZW5ndGggPSBvbGRWYWx1ZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBuZXdMZW5ndGggPSBuZXdWYWx1ZS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGlmIChvbGRMZW5ndGggIT09IG5ld0xlbmd0aCkge1xuICAgICAgICAgICAgICAvLyBpZiBsZW5ndGhzIGRvIG5vdCBtYXRjaCB3ZSBuZWVkIHRvIHRyaWdnZXIgY2hhbmdlIG5vdGlmaWNhdGlvblxuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICBvbGRWYWx1ZS5sZW5ndGggPSBvbGRMZW5ndGggPSBuZXdMZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBjb3B5IHRoZSBpdGVtcyB0byBvbGRWYWx1ZSBhbmQgbG9vayBmb3IgY2hhbmdlcy5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgb2xkSXRlbSA9IG9sZFZhbHVlW2ldO1xuICAgICAgICAgICAgICBuZXdJdGVtID0gbmV3VmFsdWVbaV07XG5cbiAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgICAgICAgICBib3RoTmFOID0gKG9sZEl0ZW0gIT09IG9sZEl0ZW0pICYmIChuZXdJdGVtICE9PSBuZXdJdGVtKTtcbiAgICAgICAgICAgICAgaWYgKCFib3RoTmFOICYmIChvbGRJdGVtICE9PSBuZXdJdGVtKSkge1xuICAgICAgICAgICAgICAgIGNoYW5nZURldGVjdGVkKys7XG4gICAgICAgICAgICAgICAgb2xkVmFsdWVbaV0gPSBuZXdJdGVtO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gaW50ZXJuYWxPYmplY3QpIHtcbiAgICAgICAgICAgICAgLy8gd2UgYXJlIHRyYW5zaXRpb25pbmcgZnJvbSBzb21ldGhpbmcgd2hpY2ggd2FzIG5vdCBhbiBvYmplY3QgaW50byBvYmplY3QuXG4gICAgICAgICAgICAgIG9sZFZhbHVlID0gaW50ZXJuYWxPYmplY3QgPSB7fTtcbiAgICAgICAgICAgICAgb2xkTGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGNvcHkgdGhlIGl0ZW1zIHRvIG9sZFZhbHVlIGFuZCBsb29rIGZvciBjaGFuZ2VzLlxuICAgICAgICAgICAgbmV3TGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGZvciAoa2V5IGluIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG5ld1ZhbHVlLCBrZXkpKSB7XG4gICAgICAgICAgICAgICAgbmV3TGVuZ3RoKys7XG4gICAgICAgICAgICAgICAgbmV3SXRlbSA9IG5ld1ZhbHVlW2tleV07XG4gICAgICAgICAgICAgICAgb2xkSXRlbSA9IG9sZFZhbHVlW2tleV07XG5cbiAgICAgICAgICAgICAgICBpZiAoa2V5IGluIG9sZFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICAgICAgICAgICAgICBib3RoTmFOID0gKG9sZEl0ZW0gIT09IG9sZEl0ZW0pICYmIChuZXdJdGVtICE9PSBuZXdJdGVtKTtcbiAgICAgICAgICAgICAgICAgIGlmICghYm90aE5hTiAmJiAob2xkSXRlbSAhPT0gbmV3SXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlRGV0ZWN0ZWQrKztcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWVba2V5XSA9IG5ld0l0ZW07XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIG9sZExlbmd0aCsrO1xuICAgICAgICAgICAgICAgICAgb2xkVmFsdWVba2V5XSA9IG5ld0l0ZW07XG4gICAgICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9sZExlbmd0aCA+IG5ld0xlbmd0aCkge1xuICAgICAgICAgICAgICAvLyB3ZSB1c2VkIHRvIGhhdmUgbW9yZSBrZXlzLCBuZWVkIHRvIGZpbmQgdGhlbSBhbmQgZGVzdHJveSB0aGVtLlxuICAgICAgICAgICAgICBjaGFuZ2VEZXRlY3RlZCsrO1xuICAgICAgICAgICAgICBmb3IgKGtleSBpbiBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChuZXdWYWx1ZSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgb2xkTGVuZ3RoLS07XG4gICAgICAgICAgICAgICAgICBkZWxldGUgb2xkVmFsdWVba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGNoYW5nZURldGVjdGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gJHdhdGNoQ29sbGVjdGlvbkFjdGlvbigpIHtcbiAgICAgICAgICBpZiAoaW5pdFJ1bikge1xuICAgICAgICAgICAgaW5pdFJ1biA9IGZhbHNlO1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWUsIG5ld1ZhbHVlLCBzZWxmKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGlzdGVuZXIobmV3VmFsdWUsIHZlcnlPbGRWYWx1ZSwgc2VsZik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gbWFrZSBhIGNvcHkgZm9yIHRoZSBuZXh0IHRpbWUgYSBjb2xsZWN0aW9uIGlzIGNoYW5nZWRcbiAgICAgICAgICBpZiAodHJhY2tWZXJ5T2xkVmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghaXNPYmplY3QobmV3VmFsdWUpKSB7XG4gICAgICAgICAgICAgIC8vcHJpbWl0aXZlXG4gICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5TGlrZShuZXdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlID0gbmV3IEFycmF5KG5ld1ZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3VmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2ZXJ5T2xkVmFsdWVbaV0gPSBuZXdWYWx1ZVtpXTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHsgLy8gaWYgb2JqZWN0XG4gICAgICAgICAgICAgIHZlcnlPbGRWYWx1ZSA9IHt9O1xuICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChuZXdWYWx1ZSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgdmVyeU9sZFZhbHVlW2tleV0gPSBuZXdWYWx1ZVtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLiR3YXRjaChjaGFuZ2VEZXRlY3RvciwgJHdhdGNoQ29sbGVjdGlvbkFjdGlvbik7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIFByb2Nlc3NlcyBhbGwgb2YgdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaGVyc30gb2YgdGhlIGN1cnJlbnQgc2NvcGUgYW5kXG4gICAgICAgKiBpdHMgY2hpbGRyZW4uIEJlY2F1c2UgYSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcn0ncyBsaXN0ZW5lciBjYW4gY2hhbmdlXG4gICAgICAgKiB0aGUgbW9kZWwsIHRoZSBgJGRpZ2VzdCgpYCBrZWVwcyBjYWxsaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggd2F0Y2hlcnN9XG4gICAgICAgKiB1bnRpbCBubyBtb3JlIGxpc3RlbmVycyBhcmUgZmlyaW5nLiBUaGlzIG1lYW5zIHRoYXQgaXQgaXMgcG9zc2libGUgdG8gZ2V0IGludG8gYW4gaW5maW5pdGVcbiAgICAgICAqIGxvb3AuIFRoaXMgZnVuY3Rpb24gd2lsbCB0aHJvdyBgJ01heGltdW0gaXRlcmF0aW9uIGxpbWl0IGV4Y2VlZGVkLidgIGlmIHRoZSBudW1iZXIgb2ZcbiAgICAgICAqIGl0ZXJhdGlvbnMgZXhjZWVkcyAxMC5cbiAgICAgICAqXG4gICAgICAgKiBVc3VhbGx5LCB5b3UgZG9uJ3QgY2FsbCBgJGRpZ2VzdCgpYCBkaXJlY3RseSBpblxuICAgICAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NvbnRyb2xsZXIgY29udHJvbGxlcnN9IG9yIGluXG4gICAgICAgKiB7QGxpbmsgbmcuJGNvbXBpbGVQcm92aWRlciNkaXJlY3RpdmUgZGlyZWN0aXZlc30uXG4gICAgICAgKiBJbnN0ZWFkLCB5b3Ugc2hvdWxkIGNhbGwge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGFwcGx5ICRhcHBseSgpfSAodHlwaWNhbGx5IGZyb20gd2l0aGluXG4gICAgICAgKiBhIHtAbGluayBuZy4kY29tcGlsZVByb3ZpZGVyI2RpcmVjdGl2ZSBkaXJlY3RpdmV9KSwgd2hpY2ggd2lsbCBmb3JjZSBhIGAkZGlnZXN0KClgLlxuICAgICAgICpcbiAgICAgICAqIElmIHlvdSB3YW50IHRvIGJlIG5vdGlmaWVkIHdoZW5ldmVyIGAkZGlnZXN0KClgIGlzIGNhbGxlZCxcbiAgICAgICAqIHlvdSBjYW4gcmVnaXN0ZXIgYSBgd2F0Y2hFeHByZXNzaW9uYCBmdW5jdGlvbiB3aXRoXG4gICAgICAgKiB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkd2F0Y2ggJHdhdGNoKCl9IHdpdGggbm8gYGxpc3RlbmVyYC5cbiAgICAgICAqXG4gICAgICAgKiBJbiB1bml0IHRlc3RzLCB5b3UgbWF5IG5lZWQgdG8gY2FsbCBgJGRpZ2VzdCgpYCB0byBzaW11bGF0ZSB0aGUgc2NvcGUgbGlmZSBjeWNsZS5cbiAgICAgICAqXG4gICAgICAgKiAjIEV4YW1wbGVcbiAgICAgICAqIGBgYGpzXG4gICAgICAgICAgIHZhciBzY29wZSA9IC4uLjtcbiAgICAgICAgICAgc2NvcGUubmFtZSA9ICdtaXNrbyc7XG4gICAgICAgICAgIHNjb3BlLmNvdW50ZXIgPSAwO1xuXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDApO1xuICAgICAgICAgICBzY29wZS4kd2F0Y2goJ25hbWUnLCBmdW5jdGlvbihuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAgICAgICAgICBzY29wZS5jb3VudGVyID0gc2NvcGUuY291bnRlciArIDE7XG4gICAgICAgICAgIH0pO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuY291bnRlcikudG9FcXVhbCgwKTtcblxuICAgICAgICAgICBzY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgIC8vIHRoZSBsaXN0ZW5lciBpcyBhbHdheXMgY2FsbGVkIGR1cmluZyB0aGUgZmlyc3QgJGRpZ2VzdCBsb29wIGFmdGVyIGl0IHdhcyByZWdpc3RlcmVkXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDEpO1xuXG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgLy8gYnV0IG5vdyBpdCB3aWxsIG5vdCBiZSBjYWxsZWQgdW5sZXNzIHRoZSB2YWx1ZSBjaGFuZ2VzXG4gICAgICAgICAgIGV4cGVjdChzY29wZS5jb3VudGVyKS50b0VxdWFsKDEpO1xuXG4gICAgICAgICAgIHNjb3BlLm5hbWUgPSAnYWRhbSc7XG4gICAgICAgICAgIHNjb3BlLiRkaWdlc3QoKTtcbiAgICAgICAgICAgZXhwZWN0KHNjb3BlLmNvdW50ZXIpLnRvRXF1YWwoMik7XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKi9cbiAgICAgICRkaWdlc3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgd2F0Y2gsIHZhbHVlLCBsYXN0LCBmbiwgZ2V0LFxuICAgICAgICAgICAgd2F0Y2hlcnMsXG4gICAgICAgICAgICBkaXJ0eSwgdHRsID0gVFRMLFxuICAgICAgICAgICAgbmV4dCwgY3VycmVudCwgdGFyZ2V0ID0gdGhpcyxcbiAgICAgICAgICAgIHdhdGNoTG9nID0gW10sXG4gICAgICAgICAgICBsb2dJZHgsIGFzeW5jVGFzaztcblxuICAgICAgICBiZWdpblBoYXNlKCckZGlnZXN0Jyk7XG4gICAgICAgIC8vIENoZWNrIGZvciBjaGFuZ2VzIHRvIGJyb3dzZXIgdXJsIHRoYXQgaGFwcGVuZWQgaW4gc3luYyBiZWZvcmUgdGhlIGNhbGwgdG8gJGRpZ2VzdFxuICAgICAgICAkYnJvd3Nlci4kJGNoZWNrVXJsQ2hhbmdlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMgPT09ICRyb290U2NvcGUgJiYgYXBwbHlBc3luY0lkICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBpcyB0aGUgcm9vdCBzY29wZSwgYW5kICRhcHBseUFzeW5jIGhhcyBzY2hlZHVsZWQgYSBkZWZlcnJlZCAkYXBwbHkoKSwgdGhlblxuICAgICAgICAgIC8vIGNhbmNlbCB0aGUgc2NoZWR1bGVkICRhcHBseSBhbmQgZmx1c2ggdGhlIHF1ZXVlIG9mIGV4cHJlc3Npb25zIHRvIGJlIGV2YWx1YXRlZC5cbiAgICAgICAgICAkYnJvd3Nlci5kZWZlci5jYW5jZWwoYXBwbHlBc3luY0lkKTtcbiAgICAgICAgICBmbHVzaEFwcGx5QXN5bmMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3REaXJ0eVdhdGNoID0gbnVsbDtcblxuICAgICAgICBkbyB7IC8vIFwid2hpbGUgZGlydHlcIiBsb29wXG4gICAgICAgICAgZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICBjdXJyZW50ID0gdGFyZ2V0O1xuXG4gICAgICAgICAgLy8gSXQncyBzYWZlIGZvciBhc3luY1F1ZXVlUG9zaXRpb24gdG8gYmUgYSBsb2NhbCB2YXJpYWJsZSBoZXJlIGJlY2F1c2UgdGhpcyBsb29wIGNhbid0XG4gICAgICAgICAgLy8gYmUgcmVlbnRlcmVkIHJlY3Vyc2l2ZWx5LiBDYWxsaW5nICRkaWdlc3QgZnJvbSBhIGZ1bmN0aW9uIHBhc3NlZCB0byAkZXZhbEFzeW5jIHdvdWxkXG4gICAgICAgICAgLy8gbGVhZCB0byBhICckZGlnZXN0IGFscmVhZHkgaW4gcHJvZ3Jlc3MnIGVycm9yLlxuICAgICAgICAgIGZvciAodmFyIGFzeW5jUXVldWVQb3NpdGlvbiA9IDA7IGFzeW5jUXVldWVQb3NpdGlvbiA8IGFzeW5jUXVldWUubGVuZ3RoOyBhc3luY1F1ZXVlUG9zaXRpb24rKykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgYXN5bmNUYXNrID0gYXN5bmNRdWV1ZVthc3luY1F1ZXVlUG9zaXRpb25dO1xuICAgICAgICAgICAgICBmbiA9IGFzeW5jVGFzay5mbjtcbiAgICAgICAgICAgICAgZm4oYXN5bmNUYXNrLnNjb3BlLCBhc3luY1Rhc2subG9jYWxzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsYXN0RGlydHlXYXRjaCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzeW5jUXVldWUubGVuZ3RoID0gMDtcblxuICAgICAgICAgIHRyYXZlcnNlU2NvcGVzTG9vcDpcbiAgICAgICAgICBkbyB7IC8vIFwidHJhdmVyc2UgdGhlIHNjb3Blc1wiIGxvb3BcbiAgICAgICAgICAgIGlmICgod2F0Y2hlcnMgPSBjdXJyZW50LiQkd2F0Y2hlcnMpKSB7XG4gICAgICAgICAgICAgIC8vIHByb2Nlc3Mgb3VyIHdhdGNoZXNcbiAgICAgICAgICAgICAgd2F0Y2hlcnMuJCRkaWdlc3RXYXRjaEluZGV4ID0gd2F0Y2hlcnMubGVuZ3RoO1xuICAgICAgICAgICAgICB3aGlsZSAod2F0Y2hlcnMuJCRkaWdlc3RXYXRjaEluZGV4LS0pIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgd2F0Y2ggPSB3YXRjaGVyc1t3YXRjaGVycy4kJGRpZ2VzdFdhdGNoSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgLy8gTW9zdCBjb21tb24gd2F0Y2hlcyBhcmUgb24gcHJpbWl0aXZlcywgaW4gd2hpY2ggY2FzZSB3ZSBjYW4gc2hvcnRcbiAgICAgICAgICAgICAgICAgIC8vIGNpcmN1aXQgaXQgd2l0aCA9PT0gb3BlcmF0b3IsIG9ubHkgd2hlbiA9PT0gZmFpbHMgZG8gd2UgdXNlIC5lcXVhbHNcbiAgICAgICAgICAgICAgICAgIGlmICh3YXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBnZXQgPSB3YXRjaC5nZXQ7XG4gICAgICAgICAgICAgICAgICAgIGlmICgodmFsdWUgPSBnZXQoY3VycmVudCkpICE9PSAobGFzdCA9IHdhdGNoLmxhc3QpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhKHdhdGNoLmVxXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlcXVhbHModmFsdWUsIGxhc3QpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoaXNOdW1iZXJOYU4odmFsdWUpICYmIGlzTnVtYmVyTmFOKGxhc3QpKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBkaXJ0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgbGFzdERpcnR5V2F0Y2ggPSB3YXRjaDtcbiAgICAgICAgICAgICAgICAgICAgICB3YXRjaC5sYXN0ID0gd2F0Y2guZXEgPyBjb3B5KHZhbHVlLCBudWxsKSA6IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgIGZuID0gd2F0Y2guZm47XG4gICAgICAgICAgICAgICAgICAgICAgZm4odmFsdWUsICgobGFzdCA9PT0gaW5pdFdhdGNoVmFsKSA/IHZhbHVlIDogbGFzdCksIGN1cnJlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmICh0dGwgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dJZHggPSA0IC0gdHRsO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF3YXRjaExvZ1tsb2dJZHhdKSB3YXRjaExvZ1tsb2dJZHhdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXRjaExvZ1tsb2dJZHhdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtc2c6IGlzRnVuY3Rpb24od2F0Y2guZXhwKSA/ICdmbjogJyArICh3YXRjaC5leHAubmFtZSB8fCB3YXRjaC5leHAudG9TdHJpbmcoKSkgOiB3YXRjaC5leHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbDogdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbDogbGFzdFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdhdGNoID09PSBsYXN0RGlydHlXYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBtb3N0IHJlY2VudGx5IGRpcnR5IHdhdGNoZXIgaXMgbm93IGNsZWFuLCBzaG9ydCBjaXJjdWl0IHNpbmNlIHRoZSByZW1haW5pbmcgd2F0Y2hlcnNcbiAgICAgICAgICAgICAgICAgICAgICAvLyBoYXZlIGFscmVhZHkgYmVlbiB0ZXN0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhayB0cmF2ZXJzZVNjb3Blc0xvb3A7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW5zYW5pdHkgV2FybmluZzogc2NvcGUgZGVwdGgtZmlyc3QgdHJhdmVyc2FsXG4gICAgICAgICAgICAvLyB5ZXMsIHRoaXMgY29kZSBpcyBhIGJpdCBjcmF6eSwgYnV0IGl0IHdvcmtzIGFuZCB3ZSBoYXZlIHRlc3RzIHRvIHByb3ZlIGl0IVxuICAgICAgICAgICAgLy8gdGhpcyBwaWVjZSBzaG91bGQgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIHRyYXZlcnNhbCBpbiAkYnJvYWRjYXN0XG4gICAgICAgICAgICBpZiAoIShuZXh0ID0gKChjdXJyZW50LiQkd2F0Y2hlcnNDb3VudCAmJiBjdXJyZW50LiQkY2hpbGRIZWFkKSB8fFxuICAgICAgICAgICAgICAgIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgY3VycmVudC4kJG5leHRTaWJsaW5nKSkpKSB7XG4gICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgIShuZXh0ID0gY3VycmVudC4kJG5leHRTaWJsaW5nKSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IHdoaWxlICgoY3VycmVudCA9IG5leHQpKTtcblxuICAgICAgICAgIC8vIGBicmVhayB0cmF2ZXJzZVNjb3Blc0xvb3A7YCB0YWtlcyB1cyB0byBoZXJlXG5cbiAgICAgICAgICBpZiAoKGRpcnR5IHx8IGFzeW5jUXVldWUubGVuZ3RoKSAmJiAhKHR0bC0tKSkge1xuICAgICAgICAgICAgY2xlYXJQaGFzZSgpO1xuICAgICAgICAgICAgdGhyb3cgJHJvb3RTY29wZU1pbkVycignaW5mZGlnJyxcbiAgICAgICAgICAgICAgICAnezB9ICRkaWdlc3QoKSBpdGVyYXRpb25zIHJlYWNoZWQuIEFib3J0aW5nIVxcbicgK1xuICAgICAgICAgICAgICAgICdXYXRjaGVycyBmaXJlZCBpbiB0aGUgbGFzdCA1IGl0ZXJhdGlvbnM6IHsxfScsXG4gICAgICAgICAgICAgICAgVFRMLCB3YXRjaExvZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIH0gd2hpbGUgKGRpcnR5IHx8IGFzeW5jUXVldWUubGVuZ3RoKTtcblxuICAgICAgICBjbGVhclBoYXNlKCk7XG5cbiAgICAgICAgLy8gcG9zdERpZ2VzdFF1ZXVlUG9zaXRpb24gaXNuJ3QgbG9jYWwgaGVyZSBiZWNhdXNlIHRoaXMgbG9vcCBjYW4gYmUgcmVlbnRlcmVkIHJlY3Vyc2l2ZWx5LlxuICAgICAgICB3aGlsZSAocG9zdERpZ2VzdFF1ZXVlUG9zaXRpb24gPCBwb3N0RGlnZXN0UXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHBvc3REaWdlc3RRdWV1ZVtwb3N0RGlnZXN0UXVldWVQb3NpdGlvbisrXSgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwb3N0RGlnZXN0UXVldWUubGVuZ3RoID0gcG9zdERpZ2VzdFF1ZXVlUG9zaXRpb24gPSAwO1xuXG4gICAgICAgIC8vIENoZWNrIGZvciBjaGFuZ2VzIHRvIGJyb3dzZXIgdXJsIHRoYXQgaGFwcGVuZWQgZHVyaW5nIHRoZSAkZGlnZXN0XG4gICAgICAgIC8vIChmb3Igd2hpY2ggbm8gZXZlbnQgaXMgZmlyZWQ7IGUuZy4gdmlhIGBoaXN0b3J5LnB1c2hTdGF0ZSgpYClcbiAgICAgICAgJGJyb3dzZXIuJCRjaGVja1VybENoYW5nZSgpO1xuICAgICAgfSxcblxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBldmVudFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZGVzdHJveVxuICAgICAgICogQGV2ZW50VHlwZSBicm9hZGNhc3Qgb24gc2NvcGUgYmVpbmcgZGVzdHJveWVkXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBCcm9hZGNhc3RlZCB3aGVuIGEgc2NvcGUgYW5kIGl0cyBjaGlsZHJlbiBhcmUgYmVpbmcgZGVzdHJveWVkLlxuICAgICAgICpcbiAgICAgICAqIE5vdGUgdGhhdCwgaW4gQW5ndWxhckpTLCB0aGVyZSBpcyBhbHNvIGEgYCRkZXN0cm95YCBqUXVlcnkgZXZlbnQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvXG4gICAgICAgKiBjbGVhbiB1cCBET00gYmluZGluZ3MgYmVmb3JlIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uXG4gICAgICAgKi9cblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRkZXN0cm95XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogUmVtb3ZlcyB0aGUgY3VycmVudCBzY29wZSAoYW5kIGFsbCBvZiBpdHMgY2hpbGRyZW4pIGZyb20gdGhlIHBhcmVudCBzY29wZS4gUmVtb3ZhbCBpbXBsaWVzXG4gICAgICAgKiB0aGF0IGNhbGxzIHRvIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRkaWdlc3QgJGRpZ2VzdCgpfSB3aWxsIG5vIGxvbmdlclxuICAgICAgICogcHJvcGFnYXRlIHRvIHRoZSBjdXJyZW50IHNjb3BlIGFuZCBpdHMgY2hpbGRyZW4uIFJlbW92YWwgYWxzbyBpbXBsaWVzIHRoYXQgdGhlIGN1cnJlbnRcbiAgICAgICAqIHNjb3BlIGlzIGVsaWdpYmxlIGZvciBnYXJiYWdlIGNvbGxlY3Rpb24uXG4gICAgICAgKlxuICAgICAgICogVGhlIGAkZGVzdHJveSgpYCBpcyB1c3VhbGx5IHVzZWQgYnkgZGlyZWN0aXZlcyBzdWNoIGFzXG4gICAgICAgKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fSBmb3IgbWFuYWdpbmcgdGhlXG4gICAgICAgKiB1bnJvbGxpbmcgb2YgdGhlIGxvb3AuXG4gICAgICAgKlxuICAgICAgICogSnVzdCBiZWZvcmUgYSBzY29wZSBpcyBkZXN0cm95ZWQsIGEgYCRkZXN0cm95YCBldmVudCBpcyBicm9hZGNhc3RlZCBvbiB0aGlzIHNjb3BlLlxuICAgICAgICogQXBwbGljYXRpb24gY29kZSBjYW4gcmVnaXN0ZXIgYSBgJGRlc3Ryb3lgIGV2ZW50IGhhbmRsZXIgdGhhdCB3aWxsIGdpdmUgaXQgYSBjaGFuY2UgdG9cbiAgICAgICAqIHBlcmZvcm0gYW55IG5lY2Vzc2FyeSBjbGVhbnVwLlxuICAgICAgICpcbiAgICAgICAqIE5vdGUgdGhhdCwgaW4gQW5ndWxhckpTLCB0aGVyZSBpcyBhbHNvIGEgYCRkZXN0cm95YCBqUXVlcnkgZXZlbnQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvXG4gICAgICAgKiBjbGVhbiB1cCBET00gYmluZGluZ3MgYmVmb3JlIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00uXG4gICAgICAgKi9cbiAgICAgICRkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gV2UgY2FuJ3QgZGVzdHJveSBhIHNjb3BlIHRoYXQgaGFzIGJlZW4gYWxyZWFkeSBkZXN0cm95ZWQuXG4gICAgICAgIGlmICh0aGlzLiQkZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLiRwYXJlbnQ7XG5cbiAgICAgICAgdGhpcy4kYnJvYWRjYXN0KCckZGVzdHJveScpO1xuICAgICAgICB0aGlzLiQkZGVzdHJveWVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAodGhpcyA9PT0gJHJvb3RTY29wZSkge1xuICAgICAgICAgIC8vUmVtb3ZlIGhhbmRsZXJzIGF0dGFjaGVkIHRvIHdpbmRvdyB3aGVuICRyb290U2NvcGUgaXMgcmVtb3ZlZFxuICAgICAgICAgICRicm93c2VyLiQkYXBwbGljYXRpb25EZXN0cm95ZWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluY3JlbWVudFdhdGNoZXJzQ291bnQodGhpcywgLXRoaXMuJCR3YXRjaGVyc0NvdW50KTtcbiAgICAgICAgZm9yICh2YXIgZXZlbnROYW1lIGluIHRoaXMuJCRsaXN0ZW5lckNvdW50KSB7XG4gICAgICAgICAgZGVjcmVtZW50TGlzdGVuZXJDb3VudCh0aGlzLCB0aGlzLiQkbGlzdGVuZXJDb3VudFtldmVudE5hbWVdLCBldmVudE5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2V2ZXIgYWxsIHRoZSByZWZlcmVuY2VzIHRvIHBhcmVudCBzY29wZXMgKGFmdGVyIHRoaXMgY2xlYW51cCwgdGhlIGN1cnJlbnQgc2NvcGUgc2hvdWxkXG4gICAgICAgIC8vIG5vdCBiZSByZXRhaW5lZCBieSBhbnkgb2Ygb3VyIHJlZmVyZW5jZXMgYW5kIHNob3VsZCBiZSBlbGlnaWJsZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uKVxuICAgICAgICBpZiAocGFyZW50ICYmIHBhcmVudC4kJGNoaWxkSGVhZCA9PT0gdGhpcykgcGFyZW50LiQkY2hpbGRIZWFkID0gdGhpcy4kJG5leHRTaWJsaW5nO1xuICAgICAgICBpZiAocGFyZW50ICYmIHBhcmVudC4kJGNoaWxkVGFpbCA9PT0gdGhpcykgcGFyZW50LiQkY2hpbGRUYWlsID0gdGhpcy4kJHByZXZTaWJsaW5nO1xuICAgICAgICBpZiAodGhpcy4kJHByZXZTaWJsaW5nKSB0aGlzLiQkcHJldlNpYmxpbmcuJCRuZXh0U2libGluZyA9IHRoaXMuJCRuZXh0U2libGluZztcbiAgICAgICAgaWYgKHRoaXMuJCRuZXh0U2libGluZykgdGhpcy4kJG5leHRTaWJsaW5nLiQkcHJldlNpYmxpbmcgPSB0aGlzLiQkcHJldlNpYmxpbmc7XG5cbiAgICAgICAgLy8gRGlzYWJsZSBsaXN0ZW5lcnMsIHdhdGNoZXJzIGFuZCBhcHBseS9kaWdlc3QgbWV0aG9kc1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gdGhpcy4kZGlnZXN0ID0gdGhpcy4kYXBwbHkgPSB0aGlzLiRldmFsQXN5bmMgPSB0aGlzLiRhcHBseUFzeW5jID0gbm9vcDtcbiAgICAgICAgdGhpcy4kb24gPSB0aGlzLiR3YXRjaCA9IHRoaXMuJHdhdGNoR3JvdXAgPSBmdW5jdGlvbigpIHsgcmV0dXJuIG5vb3A7IH07XG4gICAgICAgIHRoaXMuJCRsaXN0ZW5lcnMgPSB7fTtcblxuICAgICAgICAvLyBEaXNjb25uZWN0IHRoZSBuZXh0IHNpYmxpbmcgdG8gcHJldmVudCBgY2xlYW5VcFNjb3BlYCBkZXN0cm95aW5nIHRob3NlIHRvb1xuICAgICAgICB0aGlzLiQkbmV4dFNpYmxpbmcgPSBudWxsO1xuICAgICAgICBjbGVhblVwU2NvcGUodGhpcyk7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGV2YWxcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBFeGVjdXRlcyB0aGUgYGV4cHJlc3Npb25gIG9uIHRoZSBjdXJyZW50IHNjb3BlIGFuZCByZXR1cm5zIHRoZSByZXN1bHQuIEFueSBleGNlcHRpb25zIGluXG4gICAgICAgKiB0aGUgZXhwcmVzc2lvbiBhcmUgcHJvcGFnYXRlZCAodW5jYXVnaHQpLiBUaGlzIGlzIHVzZWZ1bCB3aGVuIGV2YWx1YXRpbmcgQW5ndWxhclxuICAgICAgICogZXhwcmVzc2lvbnMuXG4gICAgICAgKlxuICAgICAgICogIyBFeGFtcGxlXG4gICAgICAgKiBgYGBqc1xuICAgICAgICAgICB2YXIgc2NvcGUgPSBuZy4kcm9vdFNjb3BlLlNjb3BlKCk7XG4gICAgICAgICAgIHNjb3BlLmEgPSAxO1xuICAgICAgICAgICBzY29wZS5iID0gMjtcblxuICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoJ2ErYicpKS50b0VxdWFsKDMpO1xuICAgICAgICAgICBleHBlY3Qoc2NvcGUuJGV2YWwoZnVuY3Rpb24oc2NvcGUpeyByZXR1cm4gc2NvcGUuYSArIHNjb3BlLmI7IH0pKS50b0VxdWFsKDMpO1xuICAgICAgICogYGBgXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHsoc3RyaW5nfGZ1bmN0aW9uKCkpPX0gZXhwcmVzc2lvbiBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgKlxuICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiAge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBjdXJyZW50IGBzY29wZWAgcGFyYW1ldGVyLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KG9iamVjdCk9fSBsb2NhbHMgTG9jYWwgdmFyaWFibGVzIG9iamVjdCwgdXNlZnVsIGZvciBvdmVycmlkaW5nIHZhbHVlcyBpbiBzY29wZS5cbiAgICAgICAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24uXG4gICAgICAgKi9cbiAgICAgICRldmFsOiBmdW5jdGlvbihleHByLCBsb2NhbHMpIHtcbiAgICAgICAgcmV0dXJuICRwYXJzZShleHByKSh0aGlzLCBsb2NhbHMpO1xuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRldmFsQXN5bmNcbiAgICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICAgKlxuICAgICAgICogQGRlc2NyaXB0aW9uXG4gICAgICAgKiBFeGVjdXRlcyB0aGUgZXhwcmVzc2lvbiBvbiB0aGUgY3VycmVudCBzY29wZSBhdCBhIGxhdGVyIHBvaW50IGluIHRpbWUuXG4gICAgICAgKlxuICAgICAgICogVGhlIGAkZXZhbEFzeW5jYCBtYWtlcyBubyBndWFyYW50ZWVzIGFzIHRvIHdoZW4gdGhlIGBleHByZXNzaW9uYCB3aWxsIGJlIGV4ZWN1dGVkLCBvbmx5XG4gICAgICAgKiB0aGF0OlxuICAgICAgICpcbiAgICAgICAqICAgLSBpdCB3aWxsIGV4ZWN1dGUgYWZ0ZXIgdGhlIGZ1bmN0aW9uIHRoYXQgc2NoZWR1bGVkIHRoZSBldmFsdWF0aW9uIChwcmVmZXJhYmx5IGJlZm9yZSBET01cbiAgICAgICAqICAgICByZW5kZXJpbmcpLlxuICAgICAgICogICAtIGF0IGxlYXN0IG9uZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QgY3ljbGV9IHdpbGwgYmUgcGVyZm9ybWVkIGFmdGVyXG4gICAgICAgKiAgICAgYGV4cHJlc3Npb25gIGV4ZWN1dGlvbi5cbiAgICAgICAqXG4gICAgICAgKiBBbnkgZXhjZXB0aW9ucyBmcm9tIHRoZSBleGVjdXRpb24gb2YgdGhlIGV4cHJlc3Npb24gYXJlIGZvcndhcmRlZCB0byB0aGVcbiAgICAgICAqIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICAqXG4gICAgICAgKiBfX05vdGU6X18gaWYgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgb3V0c2lkZSBvZiBhIGAkZGlnZXN0YCBjeWNsZSwgYSBuZXcgYCRkaWdlc3RgIGN5Y2xlXG4gICAgICAgKiB3aWxsIGJlIHNjaGVkdWxlZC4gSG93ZXZlciwgaXQgaXMgZW5jb3VyYWdlZCB0byBhbHdheXMgY2FsbCBjb2RlIHRoYXQgY2hhbmdlcyB0aGUgbW9kZWxcbiAgICAgICAqIGZyb20gd2l0aGluIGFuIGAkYXBwbHlgIGNhbGwuIFRoYXQgaW5jbHVkZXMgY29kZSBldmFsdWF0ZWQgdmlhIGAkZXZhbEFzeW5jYC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHByZXNzaW9uIEFuIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZC5cbiAgICAgICAqXG4gICAgICAgKiAgICAtIGBzdHJpbmdgOiBleGVjdXRlIHVzaW5nIHRoZSBydWxlcyBhcyBkZWZpbmVkIGluIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259LlxuICAgICAgICogICAgLSBgZnVuY3Rpb24oc2NvcGUpYDogZXhlY3V0ZSB0aGUgZnVuY3Rpb24gd2l0aCB0aGUgY3VycmVudCBgc2NvcGVgIHBhcmFtZXRlci5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhvYmplY3QpPX0gbG9jYWxzIExvY2FsIHZhcmlhYmxlcyBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXMgaW4gc2NvcGUuXG4gICAgICAgKi9cbiAgICAgICRldmFsQXN5bmM6IGZ1bmN0aW9uKGV4cHIsIGxvY2Fscykge1xuICAgICAgICAvLyBpZiB3ZSBhcmUgb3V0c2lkZSBvZiBhbiAkZGlnZXN0IGxvb3AgYW5kIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgd2UgYXJlIHNjaGVkdWxpbmcgYXN5bmNcbiAgICAgICAgLy8gdGFzayBhbHNvIHNjaGVkdWxlIGFzeW5jIGF1dG8tZmx1c2hcbiAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UgJiYgIWFzeW5jUXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoYXN5bmNRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBhc3luY1F1ZXVlLnB1c2goe3Njb3BlOiB0aGlzLCBmbjogJHBhcnNlKGV4cHIpLCBsb2NhbHM6IGxvY2Fsc30pO1xuICAgICAgfSxcblxuICAgICAgJCRwb3N0RGlnZXN0OiBmdW5jdGlvbihmbikge1xuICAgICAgICBwb3N0RGlnZXN0UXVldWUucHVzaChmbik7XG4gICAgICB9LFxuXG4gICAgICAvKipcbiAgICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgICAqIEBuYW1lICRyb290U2NvcGUuU2NvcGUjJGFwcGx5XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogYCRhcHBseSgpYCBpcyB1c2VkIHRvIGV4ZWN1dGUgYW4gZXhwcmVzc2lvbiBpbiBhbmd1bGFyIGZyb20gb3V0c2lkZSBvZiB0aGUgYW5ndWxhclxuICAgICAgICogZnJhbWV3b3JrLiAoRm9yIGV4YW1wbGUgZnJvbSBicm93c2VyIERPTSBldmVudHMsIHNldFRpbWVvdXQsIFhIUiBvciB0aGlyZCBwYXJ0eSBsaWJyYXJpZXMpLlxuICAgICAgICogQmVjYXVzZSB3ZSBhcmUgY2FsbGluZyBpbnRvIHRoZSBhbmd1bGFyIGZyYW1ld29yayB3ZSBuZWVkIHRvIHBlcmZvcm0gcHJvcGVyIHNjb3BlIGxpZmVcbiAgICAgICAqIGN5Y2xlIG9mIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciBleGNlcHRpb24gaGFuZGxpbmd9LFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJGRpZ2VzdCBleGVjdXRpbmcgd2F0Y2hlc30uXG4gICAgICAgKlxuICAgICAgICogIyMgTGlmZSBjeWNsZVxuICAgICAgICpcbiAgICAgICAqICMgUHNldWRvLUNvZGUgb2YgYCRhcHBseSgpYFxuICAgICAgICogYGBganNcbiAgICAgICAgICAgZnVuY3Rpb24gJGFwcGx5KGV4cHIpIHtcbiAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgcmV0dXJuICRldmFsKGV4cHIpO1xuICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAkcm9vdC4kZGlnZXN0KCk7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICB9XG4gICAgICAgKiBgYGBcbiAgICAgICAqXG4gICAgICAgKlxuICAgICAgICogU2NvcGUncyBgJGFwcGx5KClgIG1ldGhvZCB0cmFuc2l0aW9ucyB0aHJvdWdoIHRoZSBmb2xsb3dpbmcgc3RhZ2VzOlxuICAgICAgICpcbiAgICAgICAqIDEuIFRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyBleGVjdXRlZCB1c2luZyB0aGVcbiAgICAgICAqICAgIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRldmFsICRldmFsKCl9IG1ldGhvZC5cbiAgICAgICAqIDIuIEFueSBleGNlcHRpb25zIGZyb20gdGhlIGV4ZWN1dGlvbiBvZiB0aGUgZXhwcmVzc2lvbiBhcmUgZm9yd2FyZGVkIHRvIHRoZVxuICAgICAgICogICAge0BsaW5rIG5nLiRleGNlcHRpb25IYW5kbGVyICRleGNlcHRpb25IYW5kbGVyfSBzZXJ2aWNlLlxuICAgICAgICogMy4gVGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyR3YXRjaCB3YXRjaH0gbGlzdGVuZXJzIGFyZSBmaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGVcbiAgICAgICAqICAgIGV4cHJlc3Npb24gd2FzIGV4ZWN1dGVkIHVzaW5nIHRoZSB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkZGlnZXN0ICRkaWdlc3QoKX0gbWV0aG9kLlxuICAgICAgICpcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0geyhzdHJpbmd8ZnVuY3Rpb24oKSk9fSBleHAgQW4gYW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkLlxuICAgICAgICpcbiAgICAgICAqICAgIC0gYHN0cmluZ2A6IGV4ZWN1dGUgdXNpbmcgdGhlIHJ1bGVzIGFzIGRlZmluZWQgaW4ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0uXG4gICAgICAgKiAgICAtIGBmdW5jdGlvbihzY29wZSlgOiBleGVjdXRlIHRoZSBmdW5jdGlvbiB3aXRoIGN1cnJlbnQgYHNjb3BlYCBwYXJhbWV0ZXIuXG4gICAgICAgKlxuICAgICAgICogQHJldHVybnMgeyp9IFRoZSByZXN1bHQgb2YgZXZhbHVhdGluZyB0aGUgZXhwcmVzc2lvbi5cbiAgICAgICAqL1xuICAgICAgJGFwcGx5OiBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYmVnaW5QaGFzZSgnJGFwcGx5Jyk7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLiRldmFsKGV4cHIpO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBjbGVhclBoYXNlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICRyb290U2NvcGUuJGRpZ2VzdCgpO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuc2FmZS1maW5hbGx5XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRhcHBseUFzeW5jXG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogU2NoZWR1bGUgdGhlIGludm9jYXRpb24gb2YgJGFwcGx5IHRvIG9jY3VyIGF0IGEgbGF0ZXIgdGltZS4gVGhlIGFjdHVhbCB0aW1lIGRpZmZlcmVuY2VcbiAgICAgICAqIHZhcmllcyBhY3Jvc3MgYnJvd3NlcnMsIGJ1dCBpcyB0eXBpY2FsbHkgYXJvdW5kIH4xMCBtaWxsaXNlY29uZHMuXG4gICAgICAgKlxuICAgICAgICogVGhpcyBjYW4gYmUgdXNlZCB0byBxdWV1ZSB1cCBtdWx0aXBsZSBleHByZXNzaW9ucyB3aGljaCBuZWVkIHRvIGJlIGV2YWx1YXRlZCBpbiB0aGUgc2FtZVxuICAgICAgICogZGlnZXN0LlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7KHN0cmluZ3xmdW5jdGlvbigpKT19IGV4cCBBbiBhbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQuXG4gICAgICAgKlxuICAgICAgICogICAgLSBgc3RyaW5nYDogZXhlY3V0ZSB1c2luZyB0aGUgcnVsZXMgYXMgZGVmaW5lZCBpbiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufS5cbiAgICAgICAqICAgIC0gYGZ1bmN0aW9uKHNjb3BlKWA6IGV4ZWN1dGUgdGhlIGZ1bmN0aW9uIHdpdGggY3VycmVudCBgc2NvcGVgIHBhcmFtZXRlci5cbiAgICAgICAqL1xuICAgICAgJGFwcGx5QXN5bmM6IGZ1bmN0aW9uKGV4cHIpIHtcbiAgICAgICAgdmFyIHNjb3BlID0gdGhpcztcbiAgICAgICAgaWYgKGV4cHIpIHtcbiAgICAgICAgICBhcHBseUFzeW5jUXVldWUucHVzaCgkYXBwbHlBc3luY0V4cHJlc3Npb24pO1xuICAgICAgICB9XG4gICAgICAgIGV4cHIgPSAkcGFyc2UoZXhwcik7XG4gICAgICAgIHNjaGVkdWxlQXBwbHlBc3luYygpO1xuXG4gICAgICAgIGZ1bmN0aW9uICRhcHBseUFzeW5jRXhwcmVzc2lvbigpIHtcbiAgICAgICAgICBzY29wZS4kZXZhbChleHByKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgLyoqXG4gICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAgKiBAbmFtZSAkcm9vdFNjb3BlLlNjb3BlIyRvblxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIExpc3RlbnMgb24gZXZlbnRzIG9mIGEgZ2l2ZW4gdHlwZS4gU2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRlbWl0ICRlbWl0fSBmb3JcbiAgICAgICAqIGRpc2N1c3Npb24gb2YgZXZlbnQgbGlmZSBjeWNsZS5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgZXZlbnQgbGlzdGVuZXIgZnVuY3Rpb24gZm9ybWF0IGlzOiBgZnVuY3Rpb24oZXZlbnQsIGFyZ3MuLi4pYC4gVGhlIGBldmVudGAgb2JqZWN0XG4gICAgICAgKiBwYXNzZWQgaW50byB0aGUgbGlzdGVuZXIgaGFzIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlczpcbiAgICAgICAqXG4gICAgICAgKiAgIC0gYHRhcmdldFNjb3BlYCAtIGB7U2NvcGV9YDogdGhlIHNjb3BlIG9uIHdoaWNoIHRoZSBldmVudCB3YXMgYCRlbWl0YC1lZCBvclxuICAgICAgICogICAgIGAkYnJvYWRjYXN0YC1lZC5cbiAgICAgICAqICAgLSBgY3VycmVudFNjb3BlYCAtIGB7U2NvcGV9YDogdGhlIHNjb3BlIHRoYXQgaXMgY3VycmVudGx5IGhhbmRsaW5nIHRoZSBldmVudC4gT25jZSB0aGVcbiAgICAgICAqICAgICBldmVudCBwcm9wYWdhdGVzIHRocm91Z2ggdGhlIHNjb3BlIGhpZXJhcmNoeSwgdGhpcyBwcm9wZXJ0eSBpcyBzZXQgdG8gbnVsbC5cbiAgICAgICAqICAgLSBgbmFtZWAgLSBge3N0cmluZ31gOiBuYW1lIG9mIHRoZSBldmVudC5cbiAgICAgICAqICAgLSBgc3RvcFByb3BhZ2F0aW9uYCAtIGB7ZnVuY3Rpb249fWA6IGNhbGxpbmcgYHN0b3BQcm9wYWdhdGlvbmAgZnVuY3Rpb24gd2lsbCBjYW5jZWxcbiAgICAgICAqICAgICBmdXJ0aGVyIGV2ZW50IHByb3BhZ2F0aW9uIChhdmFpbGFibGUgb25seSBmb3IgZXZlbnRzIHRoYXQgd2VyZSBgJGVtaXRgLWVkKS5cbiAgICAgICAqICAgLSBgcHJldmVudERlZmF1bHRgIC0gYHtmdW5jdGlvbn1gOiBjYWxsaW5nIGBwcmV2ZW50RGVmYXVsdGAgc2V0cyBgZGVmYXVsdFByZXZlbnRlZGAgZmxhZ1xuICAgICAgICogICAgIHRvIHRydWUuXG4gICAgICAgKiAgIC0gYGRlZmF1bHRQcmV2ZW50ZWRgIC0gYHtib29sZWFufWA6IHRydWUgaWYgYHByZXZlbnREZWZhdWx0YCB3YXMgY2FsbGVkLlxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIEV2ZW50IG5hbWUgdG8gbGlzdGVuIG9uLlxuICAgICAgICogQHBhcmFtIHtmdW5jdGlvbihldmVudCwgLi4uYXJncyl9IGxpc3RlbmVyIEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZXZlbnQgaXMgZW1pdHRlZC5cbiAgICAgICAqIEByZXR1cm5zIHtmdW5jdGlvbigpfSBSZXR1cm5zIGEgZGVyZWdpc3RyYXRpb24gZnVuY3Rpb24gZm9yIHRoaXMgbGlzdGVuZXIuXG4gICAgICAgKi9cbiAgICAgICRvbjogZnVuY3Rpb24obmFtZSwgbGlzdGVuZXIpIHtcbiAgICAgICAgdmFyIG5hbWVkTGlzdGVuZXJzID0gdGhpcy4kJGxpc3RlbmVyc1tuYW1lXTtcbiAgICAgICAgaWYgKCFuYW1lZExpc3RlbmVycykge1xuICAgICAgICAgIHRoaXMuJCRsaXN0ZW5lcnNbbmFtZV0gPSBuYW1lZExpc3RlbmVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIG5hbWVkTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcztcbiAgICAgICAgZG8ge1xuICAgICAgICAgIGlmICghY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0pIHtcbiAgICAgICAgICAgIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0rKztcbiAgICAgICAgfSB3aGlsZSAoKGN1cnJlbnQgPSBjdXJyZW50LiRwYXJlbnQpKTtcblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgaW5kZXhPZkxpc3RlbmVyID0gbmFtZWRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICAgICAgaWYgKGluZGV4T2ZMaXN0ZW5lciAhPT0gLTEpIHtcbiAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzW2luZGV4T2ZMaXN0ZW5lcl0gPSBudWxsO1xuICAgICAgICAgICAgZGVjcmVtZW50TGlzdGVuZXJDb3VudChzZWxmLCAxLCBuYW1lKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkZW1pdFxuICAgICAgICogQGtpbmQgZnVuY3Rpb25cbiAgICAgICAqXG4gICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICAqIERpc3BhdGNoZXMgYW4gZXZlbnQgYG5hbWVgIHVwd2FyZHMgdGhyb3VnaCB0aGUgc2NvcGUgaGllcmFyY2h5IG5vdGlmeWluZyB0aGVcbiAgICAgICAqIHJlZ2lzdGVyZWQge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufSBsaXN0ZW5lcnMuXG4gICAgICAgKlxuICAgICAgICogVGhlIGV2ZW50IGxpZmUgY3ljbGUgc3RhcnRzIGF0IHRoZSBzY29wZSBvbiB3aGljaCBgJGVtaXRgIHdhcyBjYWxsZWQuIEFsbFxuICAgICAgICoge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9uIGxpc3RlbmVyc30gbGlzdGVuaW5nIGZvciBgbmFtZWAgZXZlbnQgb24gdGhpcyBzY29wZSBnZXRcbiAgICAgICAqIG5vdGlmaWVkLiBBZnRlcndhcmRzLCB0aGUgZXZlbnQgdHJhdmVyc2VzIHVwd2FyZHMgdG93YXJkIHRoZSByb290IHNjb3BlIGFuZCBjYWxscyBhbGxcbiAgICAgICAqIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIGFsb25nIHRoZSB3YXkuIFRoZSBldmVudCB3aWxsIHN0b3AgcHJvcGFnYXRpbmcgaWYgb25lIG9mIHRoZSBsaXN0ZW5lcnNcbiAgICAgICAqIGNhbmNlbHMgaXQuXG4gICAgICAgKlxuICAgICAgICogQW55IGV4Y2VwdGlvbiBlbWl0dGVkIGZyb20gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IHdpbGwgYmUgcGFzc2VkXG4gICAgICAgKiBvbnRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBlbWl0LlxuICAgICAgICogQHBhcmFtIHsuLi4qfSBhcmdzIE9wdGlvbmFsIG9uZSBvciBtb3JlIGFyZ3VtZW50cyB3aGljaCB3aWxsIGJlIHBhc3NlZCBvbnRvIHRoZSBldmVudCBsaXN0ZW5lcnMuXG4gICAgICAgKiBAcmV0dXJuIHtPYmplY3R9IEV2ZW50IG9iamVjdCAoc2VlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbn0pLlxuICAgICAgICovXG4gICAgICAkZW1pdDogZnVuY3Rpb24obmFtZSwgYXJncykge1xuICAgICAgICB2YXIgZW1wdHkgPSBbXSxcbiAgICAgICAgICAgIG5hbWVkTGlzdGVuZXJzLFxuICAgICAgICAgICAgc2NvcGUgPSB0aGlzLFxuICAgICAgICAgICAgc3RvcFByb3BhZ2F0aW9uID0gZmFsc2UsXG4gICAgICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgdGFyZ2V0U2NvcGU6IHNjb3BlLFxuICAgICAgICAgICAgICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge3N0b3BQcm9wYWdhdGlvbiA9IHRydWU7fSxcbiAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpc3RlbmVyQXJncyA9IGNvbmNhdChbZXZlbnRdLCBhcmd1bWVudHMsIDEpLFxuICAgICAgICAgICAgaSwgbGVuZ3RoO1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICBuYW1lZExpc3RlbmVycyA9IHNjb3BlLiQkbGlzdGVuZXJzW25hbWVdIHx8IGVtcHR5O1xuICAgICAgICAgIGV2ZW50LmN1cnJlbnRTY29wZSA9IHNjb3BlO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IG5hbWVkTGlzdGVuZXJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICAgIC8vIGlmIGxpc3RlbmVycyB3ZXJlIGRlcmVnaXN0ZXJlZCwgZGVmcmFnbWVudCB0aGUgYXJyYXlcbiAgICAgICAgICAgIGlmICghbmFtZWRMaXN0ZW5lcnNbaV0pIHtcbiAgICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICBpLS07XG4gICAgICAgICAgICAgIGxlbmd0aC0tO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIC8vYWxsb3cgYWxsIGxpc3RlbmVycyBhdHRhY2hlZCB0byB0aGUgY3VycmVudCBzY29wZSB0byBydW5cbiAgICAgICAgICAgICAgbmFtZWRMaXN0ZW5lcnNbaV0uYXBwbHkobnVsbCwgbGlzdGVuZXJBcmdzKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vaWYgYW55IGxpc3RlbmVyIG9uIHRoZSBjdXJyZW50IHNjb3BlIHN0b3BzIHByb3BhZ2F0aW9uLCBwcmV2ZW50IGJ1YmJsaW5nXG4gICAgICAgICAgaWYgKHN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBldmVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy90cmF2ZXJzZSB1cHdhcmRzXG4gICAgICAgICAgc2NvcGUgPSBzY29wZS4kcGFyZW50O1xuICAgICAgICB9IHdoaWxlIChzY29wZSk7XG5cbiAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gbnVsbDtcblxuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICB9LFxuXG5cbiAgICAgIC8qKlxuICAgICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAgICogQG5hbWUgJHJvb3RTY29wZS5TY29wZSMkYnJvYWRjYXN0XG4gICAgICAgKiBAa2luZCBmdW5jdGlvblxuICAgICAgICpcbiAgICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAgICogRGlzcGF0Y2hlcyBhbiBldmVudCBgbmFtZWAgZG93bndhcmRzIHRvIGFsbCBjaGlsZCBzY29wZXMgKGFuZCB0aGVpciBjaGlsZHJlbikgbm90aWZ5aW5nIHRoZVxuICAgICAgICogcmVnaXN0ZXJlZCB7QGxpbmsgbmcuJHJvb3RTY29wZS5TY29wZSMkb259IGxpc3RlbmVycy5cbiAgICAgICAqXG4gICAgICAgKiBUaGUgZXZlbnQgbGlmZSBjeWNsZSBzdGFydHMgYXQgdGhlIHNjb3BlIG9uIHdoaWNoIGAkYnJvYWRjYXN0YCB3YXMgY2FsbGVkLiBBbGxcbiAgICAgICAqIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IGxpc3RlbmluZyBmb3IgYG5hbWVgIGV2ZW50IG9uIHRoaXMgc2NvcGUgZ2V0XG4gICAgICAgKiBub3RpZmllZC4gQWZ0ZXJ3YXJkcywgdGhlIGV2ZW50IHByb3BhZ2F0ZXMgdG8gYWxsIGRpcmVjdCBhbmQgaW5kaXJlY3Qgc2NvcGVzIG9mIHRoZSBjdXJyZW50XG4gICAgICAgKiBzY29wZSBhbmQgY2FsbHMgYWxsIHJlZ2lzdGVyZWQgbGlzdGVuZXJzIGFsb25nIHRoZSB3YXkuIFRoZSBldmVudCBjYW5ub3QgYmUgY2FuY2VsZWQuXG4gICAgICAgKlxuICAgICAgICogQW55IGV4Y2VwdGlvbiBlbWl0dGVkIGZyb20gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRvbiBsaXN0ZW5lcnN9IHdpbGwgYmUgcGFzc2VkXG4gICAgICAgKiBvbnRvIHRoZSB7QGxpbmsgbmcuJGV4Y2VwdGlvbkhhbmRsZXIgJGV4Y2VwdGlvbkhhbmRsZXJ9IHNlcnZpY2UuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgRXZlbnQgbmFtZSB0byBicm9hZGNhc3QuXG4gICAgICAgKiBAcGFyYW0gey4uLip9IGFyZ3MgT3B0aW9uYWwgb25lIG9yIG1vcmUgYXJndW1lbnRzIHdoaWNoIHdpbGwgYmUgcGFzc2VkIG9udG8gdGhlIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgICAqIEByZXR1cm4ge09iamVjdH0gRXZlbnQgb2JqZWN0LCBzZWUge0BsaW5rIG5nLiRyb290U2NvcGUuU2NvcGUjJG9ufVxuICAgICAgICovXG4gICAgICAkYnJvYWRjYXN0OiBmdW5jdGlvbihuYW1lLCBhcmdzKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLFxuICAgICAgICAgICAgY3VycmVudCA9IHRhcmdldCxcbiAgICAgICAgICAgIG5leHQgPSB0YXJnZXQsXG4gICAgICAgICAgICBldmVudCA9IHtcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgdGFyZ2V0U2NvcGU6IHRhcmdldCxcbiAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkOiBmYWxzZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICBpZiAoIXRhcmdldC4kJGxpc3RlbmVyQ291bnRbbmFtZV0pIHJldHVybiBldmVudDtcblxuICAgICAgICB2YXIgbGlzdGVuZXJBcmdzID0gY29uY2F0KFtldmVudF0sIGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBsaXN0ZW5lcnMsIGksIGxlbmd0aDtcblxuICAgICAgICAvL2Rvd24gd2hpbGUgeW91IGNhbiwgdGhlbiB1cCBhbmQgbmV4dCBzaWJsaW5nIG9yIHVwIGFuZCBuZXh0IHNpYmxpbmcgdW50aWwgYmFjayBhdCByb290XG4gICAgICAgIHdoaWxlICgoY3VycmVudCA9IG5leHQpKSB7XG4gICAgICAgICAgZXZlbnQuY3VycmVudFNjb3BlID0gY3VycmVudDtcbiAgICAgICAgICBsaXN0ZW5lcnMgPSBjdXJyZW50LiQkbGlzdGVuZXJzW25hbWVdIHx8IFtdO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgLy8gaWYgbGlzdGVuZXJzIHdlcmUgZGVyZWdpc3RlcmVkLCBkZWZyYWdtZW50IHRoZSBhcnJheVxuICAgICAgICAgICAgaWYgKCFsaXN0ZW5lcnNbaV0pIHtcbiAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgICBsZW5ndGgtLTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGxpc3RlbmVyc1tpXS5hcHBseShudWxsLCBsaXN0ZW5lckFyZ3MpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAkZXhjZXB0aW9uSGFuZGxlcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBJbnNhbml0eSBXYXJuaW5nOiBzY29wZSBkZXB0aC1maXJzdCB0cmF2ZXJzYWxcbiAgICAgICAgICAvLyB5ZXMsIHRoaXMgY29kZSBpcyBhIGJpdCBjcmF6eSwgYnV0IGl0IHdvcmtzIGFuZCB3ZSBoYXZlIHRlc3RzIHRvIHByb3ZlIGl0IVxuICAgICAgICAgIC8vIHRoaXMgcGllY2Ugc2hvdWxkIGJlIGtlcHQgaW4gc3luYyB3aXRoIHRoZSB0cmF2ZXJzYWwgaW4gJGRpZ2VzdFxuICAgICAgICAgIC8vICh0aG91Z2ggaXQgZGlmZmVycyBkdWUgdG8gaGF2aW5nIHRoZSBleHRyYSBjaGVjayBmb3IgJCRsaXN0ZW5lckNvdW50KVxuICAgICAgICAgIGlmICghKG5leHQgPSAoKGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdICYmIGN1cnJlbnQuJCRjaGlsZEhlYWQpIHx8XG4gICAgICAgICAgICAgIChjdXJyZW50ICE9PSB0YXJnZXQgJiYgY3VycmVudC4kJG5leHRTaWJsaW5nKSkpKSB7XG4gICAgICAgICAgICB3aGlsZSAoY3VycmVudCAhPT0gdGFyZ2V0ICYmICEobmV4dCA9IGN1cnJlbnQuJCRuZXh0U2libGluZykpIHtcbiAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5jdXJyZW50U2NvcGUgPSBudWxsO1xuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciAkcm9vdFNjb3BlID0gbmV3IFNjb3BlKCk7XG5cbiAgICAvL1RoZSBpbnRlcm5hbCBxdWV1ZXMuIEV4cG9zZSB0aGVtIG9uIHRoZSAkcm9vdFNjb3BlIGZvciBkZWJ1Z2dpbmcvdGVzdGluZyBwdXJwb3Nlcy5cbiAgICB2YXIgYXN5bmNRdWV1ZSA9ICRyb290U2NvcGUuJCRhc3luY1F1ZXVlID0gW107XG4gICAgdmFyIHBvc3REaWdlc3RRdWV1ZSA9ICRyb290U2NvcGUuJCRwb3N0RGlnZXN0UXVldWUgPSBbXTtcbiAgICB2YXIgYXBwbHlBc3luY1F1ZXVlID0gJHJvb3RTY29wZS4kJGFwcGx5QXN5bmNRdWV1ZSA9IFtdO1xuXG4gICAgdmFyIHBvc3REaWdlc3RRdWV1ZVBvc2l0aW9uID0gMDtcblxuICAgIHJldHVybiAkcm9vdFNjb3BlO1xuXG5cbiAgICBmdW5jdGlvbiBiZWdpblBoYXNlKHBoYXNlKSB7XG4gICAgICBpZiAoJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgIHRocm93ICRyb290U2NvcGVNaW5FcnIoJ2lucHJvZycsICd7MH0gYWxyZWFkeSBpbiBwcm9ncmVzcycsICRyb290U2NvcGUuJCRwaGFzZSk7XG4gICAgICB9XG5cbiAgICAgICRyb290U2NvcGUuJCRwaGFzZSA9IHBoYXNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFyUGhhc2UoKSB7XG4gICAgICAkcm9vdFNjb3BlLiQkcGhhc2UgPSBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluY3JlbWVudFdhdGNoZXJzQ291bnQoY3VycmVudCwgY291bnQpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgY3VycmVudC4kJHdhdGNoZXJzQ291bnQgKz0gY291bnQ7XG4gICAgICB9IHdoaWxlICgoY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlY3JlbWVudExpc3RlbmVyQ291bnQoY3VycmVudCwgY291bnQsIG5hbWUpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgY3VycmVudC4kJGxpc3RlbmVyQ291bnRbbmFtZV0gLT0gY291bnQ7XG5cbiAgICAgICAgaWYgKGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdID09PSAwKSB7XG4gICAgICAgICAgZGVsZXRlIGN1cnJlbnQuJCRsaXN0ZW5lckNvdW50W25hbWVdO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlICgoY3VycmVudCA9IGN1cnJlbnQuJHBhcmVudCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIGZ1bmN0aW9uIHVzZWQgYXMgYW4gaW5pdGlhbCB2YWx1ZSBmb3Igd2F0Y2hlcnMuXG4gICAgICogYmVjYXVzZSBpdCdzIHVuaXF1ZSB3ZSBjYW4gZWFzaWx5IHRlbGwgaXQgYXBhcnQgZnJvbSBvdGhlciB2YWx1ZXNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbml0V2F0Y2hWYWwoKSB7fVxuXG4gICAgZnVuY3Rpb24gZmx1c2hBcHBseUFzeW5jKCkge1xuICAgICAgd2hpbGUgKGFwcGx5QXN5bmNRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhcHBseUFzeW5jUXVldWUuc2hpZnQoKSgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFwcGx5QXN5bmNJZCA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NoZWR1bGVBcHBseUFzeW5jKCkge1xuICAgICAgaWYgKGFwcGx5QXN5bmNJZCA9PT0gbnVsbCkge1xuICAgICAgICBhcHBseUFzeW5jSWQgPSAkYnJvd3Nlci5kZWZlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAkcm9vdFNjb3BlLiRhcHBseShmbHVzaEFwcGx5QXN5bmMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1dO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkcm9vdEVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSByb290IGVsZW1lbnQgb2YgQW5ndWxhciBhcHBsaWNhdGlvbi4gVGhpcyBpcyBlaXRoZXIgdGhlIGVsZW1lbnQgd2hlcmUge0BsaW5rXG4gKiBuZy5kaXJlY3RpdmU6bmdBcHAgbmdBcHB9IHdhcyBkZWNsYXJlZCBvciB0aGUgZWxlbWVudCBwYXNzZWQgaW50b1xuICoge0BsaW5rIGFuZ3VsYXIuYm9vdHN0cmFwfS4gVGhlIGVsZW1lbnQgcmVwcmVzZW50cyB0aGUgcm9vdCBlbGVtZW50IG9mIGFwcGxpY2F0aW9uLiBJdCBpcyBhbHNvIHRoZVxuICogbG9jYXRpb24gd2hlcmUgdGhlIGFwcGxpY2F0aW9uJ3Mge0BsaW5rIGF1dG8uJGluamVjdG9yICRpbmplY3Rvcn0gc2VydmljZSBnZXRzXG4gKiBwdWJsaXNoZWQsIGFuZCBjYW4gYmUgcmV0cmlldmVkIHVzaW5nIGAkcm9vdEVsZW1lbnQuaW5qZWN0b3IoKWAuXG4gKi9cblxuXG4vLyB0aGUgaW1wbGVtZW50YXRpb24gaXMgaW4gYW5ndWxhci5ib290c3RyYXBcblxuLyoqXG4gKiBAdGhpc1xuICogQGRlc2NyaXB0aW9uXG4gKiBQcml2YXRlIHNlcnZpY2UgdG8gc2FuaXRpemUgdXJpcyBmb3IgbGlua3MgYW5kIGltYWdlcy4gVXNlZCBieSAkY29tcGlsZSBhbmQgJHNhbml0aXplLlxuICovXG5mdW5jdGlvbiAkJFNhbml0aXplVXJpUHJvdmlkZXIoKSB7XG4gIHZhciBhSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IC9eXFxzKihodHRwcz98ZnRwfG1haWx0b3x0ZWx8ZmlsZSk6LyxcbiAgICBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSAvXlxccyooKGh0dHBzP3xmdHB8ZmlsZXxibG9iKTp8ZGF0YTppbWFnZVxcLykvO1xuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0cmlldmVzIG9yIG92ZXJyaWRlcyB0aGUgZGVmYXVsdCByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIGZvciB3aGl0ZWxpc3Rpbmcgb2Ygc2FmZVxuICAgKiB1cmxzIGR1cmluZyBhW2hyZWZdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBhW2hyZWZdIHZpYSBkYXRhLWJpbmRpbmcgaXMgZmlyc3Qgbm9ybWFsaXplZCBhbmQgdHVybmVkIGludG9cbiAgICogYW4gYWJzb2x1dGUgdXJsLiBBZnRlcndhcmRzLCB0aGUgdXJsIGlzIG1hdGNoZWQgYWdhaW5zdCB0aGUgYGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0YFxuICAgKiByZWd1bGFyIGV4cHJlc3Npb24uIElmIGEgbWF0Y2ggaXMgZm91bmQsIHRoZSBvcmlnaW5hbCB1cmwgaXMgd3JpdHRlbiBpbnRvIHRoZSBkb20uIE90aGVyd2lzZSxcbiAgICogdGhlIGFic29sdXRlIHVybCBpcyBwcmVmaXhlZCB3aXRoIGAndW5zYWZlOidgIHN0cmluZyBhbmQgb25seSB0aGVuIGlzIGl0IHdyaXR0ZW4gaW50byB0aGUgRE9NLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cD19IHJlZ2V4cCBOZXcgcmVnZXhwIHRvIHdoaXRlbGlzdCB1cmxzIHdpdGguXG4gICAqIEByZXR1cm5zIHtSZWdFeHB8bmcuJGNvbXBpbGVQcm92aWRlcn0gQ3VycmVudCBSZWdFeHAgaWYgY2FsbGVkIHdpdGhvdXQgdmFsdWUgb3Igc2VsZiBmb3JcbiAgICogICAgY2hhaW5pbmcgb3RoZXJ3aXNlLlxuICAgKi9cbiAgdGhpcy5hSHJlZlNhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgYUhyZWZTYW5pdGl6YXRpb25XaGl0ZWxpc3QgPSByZWdleHA7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0O1xuICB9O1xuXG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXRyaWV2ZXMgb3Igb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IHJlZ3VsYXIgZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgZm9yIHdoaXRlbGlzdGluZyBvZiBzYWZlXG4gICAqIHVybHMgZHVyaW5nIGltZ1tzcmNdIHNhbml0aXphdGlvbi5cbiAgICpcbiAgICogVGhlIHNhbml0aXphdGlvbiBpcyBhIHNlY3VyaXR5IG1lYXN1cmUgYWltZWQgYXQgcHJldmVudCBYU1MgYXR0YWNrcyB2aWEgaHRtbCBsaW5rcy5cbiAgICpcbiAgICogQW55IHVybCBhYm91dCB0byBiZSBhc3NpZ25lZCB0byBpbWdbc3JjXSB2aWEgZGF0YS1iaW5kaW5nIGlzIGZpcnN0IG5vcm1hbGl6ZWQgYW5kIHR1cm5lZCBpbnRvXG4gICAqIGFuIGFic29sdXRlIHVybC4gQWZ0ZXJ3YXJkcywgdGhlIHVybCBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3RgXG4gICAqIHJlZ3VsYXIgZXhwcmVzc2lvbi4gSWYgYSBtYXRjaCBpcyBmb3VuZCwgdGhlIG9yaWdpbmFsIHVybCBpcyB3cml0dGVuIGludG8gdGhlIGRvbS4gT3RoZXJ3aXNlLFxuICAgKiB0aGUgYWJzb2x1dGUgdXJsIGlzIHByZWZpeGVkIHdpdGggYCd1bnNhZmU6J2Agc3RyaW5nIGFuZCBvbmx5IHRoZW4gaXMgaXQgd3JpdHRlbiBpbnRvIHRoZSBET00uXG4gICAqXG4gICAqIEBwYXJhbSB7UmVnRXhwPX0gcmVnZXhwIE5ldyByZWdleHAgdG8gd2hpdGVsaXN0IHVybHMgd2l0aC5cbiAgICogQHJldHVybnMge1JlZ0V4cHxuZy4kY29tcGlsZVByb3ZpZGVyfSBDdXJyZW50IFJlZ0V4cCBpZiBjYWxsZWQgd2l0aG91dCB2YWx1ZSBvciBzZWxmIGZvclxuICAgKiAgICBjaGFpbmluZyBvdGhlcndpc2UuXG4gICAqL1xuICB0aGlzLmltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA9IGZ1bmN0aW9uKHJlZ2V4cCkge1xuICAgIGlmIChpc0RlZmluZWQocmVnZXhwKSkge1xuICAgICAgaW1nU3JjU2FuaXRpemF0aW9uV2hpdGVsaXN0ID0gcmVnZXhwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBpbWdTcmNTYW5pdGl6YXRpb25XaGl0ZWxpc3Q7XG4gIH07XG5cbiAgdGhpcy4kZ2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHNhbml0aXplVXJpKHVyaSwgaXNJbWFnZSkge1xuICAgICAgdmFyIHJlZ2V4ID0gaXNJbWFnZSA/IGltZ1NyY1Nhbml0aXphdGlvbldoaXRlbGlzdCA6IGFIcmVmU2FuaXRpemF0aW9uV2hpdGVsaXN0O1xuICAgICAgdmFyIG5vcm1hbGl6ZWRWYWw7XG4gICAgICBub3JtYWxpemVkVmFsID0gdXJsUmVzb2x2ZSh1cmkpLmhyZWY7XG4gICAgICBpZiAobm9ybWFsaXplZFZhbCAhPT0gJycgJiYgIW5vcm1hbGl6ZWRWYWwubWF0Y2gocmVnZXgpKSB7XG4gICAgICAgIHJldHVybiAndW5zYWZlOicgKyBub3JtYWxpemVkVmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVyaTtcbiAgICB9O1xuICB9O1xufVxuXG4vKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4gKiAgICAgQW55IGNvbW1pdHMgdG8gdGhpcyBmaWxlIHNob3VsZCBiZSByZXZpZXdlZCB3aXRoIHNlY3VyaXR5IGluIG1pbmQuICAqXG4gKiAgIENoYW5nZXMgdG8gdGhpcyBmaWxlIGNhbiBwb3RlbnRpYWxseSBjcmVhdGUgc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzLiAqXG4gKiAgICAgICAgICBBbiBhcHByb3ZhbCBmcm9tIDIgQ29yZSBtZW1iZXJzIHdpdGggaGlzdG9yeSBvZiBtb2RpZnlpbmcgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGZpbGUgaXMgcmVxdWlyZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgRG9lcyB0aGUgY2hhbmdlIHNvbWVob3cgYWxsb3cgZm9yIGFyYml0cmFyeSBqYXZhc2NyaXB0IHRvIGJlIGV4ZWN1dGVkPyAqXG4gKiAgICBPciBhbGxvd3MgZm9yIHNvbWVvbmUgdG8gY2hhbmdlIHRoZSBwcm90b3R5cGUgb2YgYnVpbHQtaW4gb2JqZWN0cz8gICAqXG4gKiAgICAgT3IgZ2l2ZXMgdW5kZXNpcmVkIGFjY2VzcyB0byB2YXJpYWJsZXMgbGlrZXMgZG9jdW1lbnQgb3Igd2luZG93PyAgICAqXG4gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqL1xuXG4vKiBleHBvcnRlZCAkU2NlUHJvdmlkZXIsICRTY2VEZWxlZ2F0ZVByb3ZpZGVyICovXG5cbnZhciAkc2NlTWluRXJyID0gbWluRXJyKCckc2NlJyk7XG5cbnZhciBTQ0VfQ09OVEVYVFMgPSB7XG4gIC8vIEhUTUwgaXMgdXNlZCB3aGVuIHRoZXJlJ3MgSFRNTCByZW5kZXJlZCAoZS5nLiBuZy1iaW5kLWh0bWwsIGlmcmFtZSBzcmNkb2MgYmluZGluZykuXG4gIEhUTUw6ICdodG1sJyxcblxuICAvLyBTdHlsZSBzdGF0ZW1lbnRzIG9yIHN0eWxlc2hlZXRzLiBDdXJyZW50bHkgdW51c2VkIGluIEFuZ3VsYXJKUy5cbiAgQ1NTOiAnY3NzJyxcblxuICAvLyBBbiBVUkwgdXNlZCBpbiBhIGNvbnRleHQgd2hlcmUgaXQgZG9lcyBub3QgcmVmZXIgdG8gYSByZXNvdXJjZSB0aGF0IGxvYWRzIGNvZGUuIEN1cnJlbnRseVxuICAvLyB1bnVzZWQgaW4gQW5ndWxhckpTLlxuICBVUkw6ICd1cmwnLFxuXG4gIC8vIFJFU09VUkNFX1VSTCBpcyBhIHN1YnR5cGUgb2YgVVJMIHVzZWQgd2hlcmUgdGhlIHJlZmVycmVkLXRvIHJlc291cmNlIGNvdWxkIGJlIGludGVycHJldGVkIGFzXG4gIC8vIGNvZGUuIChlLmcuIG5nLWluY2x1ZGUsIHNjcmlwdCBzcmMgYmluZGluZywgdGVtcGxhdGVVcmwpXG4gIFJFU09VUkNFX1VSTDogJ3Jlc291cmNlVXJsJyxcblxuICAvLyBTY3JpcHQuIEN1cnJlbnRseSB1bnVzZWQgaW4gQW5ndWxhckpTLlxuICBKUzogJ2pzJ1xufTtcblxuLy8gSGVscGVyIGZ1bmN0aW9ucyBmb2xsb3cuXG5cbnZhciBVTkRFUlNDT1JFX0xPV0VSQ0FTRV9SRUdFWFAgPSAvXyhbYS16XSkvZztcblxuZnVuY3Rpb24gc25ha2VUb0NhbWVsKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWVcbiAgICAucmVwbGFjZShVTkRFUlNDT1JFX0xPV0VSQ0FTRV9SRUdFWFAsIGZuQ2FtZWxDYXNlUmVwbGFjZSk7XG59XG5cbmZ1bmN0aW9uIGFkanVzdE1hdGNoZXIobWF0Y2hlcikge1xuICBpZiAobWF0Y2hlciA9PT0gJ3NlbGYnKSB7XG4gICAgcmV0dXJuIG1hdGNoZXI7XG4gIH0gZWxzZSBpZiAoaXNTdHJpbmcobWF0Y2hlcikpIHtcbiAgICAvLyBTdHJpbmdzIG1hdGNoIGV4YWN0bHkgZXhjZXB0IGZvciAyIHdpbGRjYXJkcyAtICcqJyBhbmQgJyoqJy5cbiAgICAvLyAnKicgbWF0Y2hlcyBhbnkgY2hhcmFjdGVyIGV4Y2VwdCB0aG9zZSBmcm9tIHRoZSBzZXQgJzovLj8mJy5cbiAgICAvLyAnKionIG1hdGNoZXMgYW55IGNoYXJhY3RlciAobGlrZSAuKiBpbiBhIFJlZ0V4cCkuXG4gICAgLy8gTW9yZSB0aGFuIDIgKidzIHJhaXNlcyBhbiBlcnJvciBhcyBpdCdzIGlsbCBkZWZpbmVkLlxuICAgIGlmIChtYXRjaGVyLmluZGV4T2YoJyoqKicpID4gLTEpIHtcbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2l3Y2FyZCcsXG4gICAgICAgICAgJ0lsbGVnYWwgc2VxdWVuY2UgKioqIGluIHN0cmluZyBtYXRjaGVyLiAgU3RyaW5nOiB7MH0nLCBtYXRjaGVyKTtcbiAgICB9XG4gICAgbWF0Y2hlciA9IGVzY2FwZUZvclJlZ2V4cChtYXRjaGVyKS5cbiAgICAgICAgICAgICAgICAgIHJlcGxhY2UoL1xcXFxcXCpcXFxcXFwqL2csICcuKicpLlxuICAgICAgICAgICAgICAgICAgcmVwbGFjZSgvXFxcXFxcKi9nLCAnW146Ly4/JjtdKicpO1xuICAgIHJldHVybiBuZXcgUmVnRXhwKCdeJyArIG1hdGNoZXIgKyAnJCcpO1xuICB9IGVsc2UgaWYgKGlzUmVnRXhwKG1hdGNoZXIpKSB7XG4gICAgLy8gVGhlIG9ubHkgb3RoZXIgdHlwZSBvZiBtYXRjaGVyIGFsbG93ZWQgaXMgYSBSZWdleHAuXG4gICAgLy8gTWF0Y2ggZW50aXJlIFVSTCAvIGRpc2FsbG93IHBhcnRpYWwgbWF0Y2hlcy5cbiAgICAvLyBGbGFncyBhcmUgcmVzZXQgKGkuZS4gbm8gZ2xvYmFsLCBpZ25vcmVDYXNlIG9yIG11bHRpbGluZSlcbiAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBtYXRjaGVyLnNvdXJjZSArICckJyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgJHNjZU1pbkVycignaW1hdGNoZXInLFxuICAgICAgICAnTWF0Y2hlcnMgbWF5IG9ubHkgYmUgXCJzZWxmXCIsIHN0cmluZyBwYXR0ZXJucyBvciBSZWdFeHAgb2JqZWN0cycpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gYWRqdXN0TWF0Y2hlcnMobWF0Y2hlcnMpIHtcbiAgdmFyIGFkanVzdGVkTWF0Y2hlcnMgPSBbXTtcbiAgaWYgKGlzRGVmaW5lZChtYXRjaGVycykpIHtcbiAgICBmb3JFYWNoKG1hdGNoZXJzLCBmdW5jdGlvbihtYXRjaGVyKSB7XG4gICAgICBhZGp1c3RlZE1hdGNoZXJzLnB1c2goYWRqdXN0TWF0Y2hlcihtYXRjaGVyKSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGFkanVzdGVkTWF0Y2hlcnM7XG59XG5cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHNjZURlbGVnYXRlXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIGAkc2NlRGVsZWdhdGVgIGlzIGEgc2VydmljZSB0aGF0IGlzIHVzZWQgYnkgdGhlIGAkc2NlYCBzZXJ2aWNlIHRvIHByb3ZpZGUge0BsaW5rIG5nLiRzY2UgU3RyaWN0XG4gKiBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfSBzZXJ2aWNlcyB0byBBbmd1bGFySlMuXG4gKlxuICogRm9yIGFuIG92ZXJ2aWV3IG9mIHRoaXMgc2VydmljZSBhbmQgdGhlIGZ1bmN0aW9ubmFsaXR5IGl0IHByb3ZpZGVzIGluIEFuZ3VsYXJKUywgc2VlIHRoZSBtYWluXG4gKiBwYWdlIGZvciB7QGxpbmsgbmcuJHNjZSBTQ0V9LiBUaGUgY3VycmVudCBwYWdlIGlzIHRhcmdldGVkIGZvciBkZXZlbG9wZXJzIHdobyBuZWVkIHRvIGFsdGVyIGhvd1xuICogU0NFIHdvcmtzIGluIHRoZWlyIGFwcGxpY2F0aW9uLCB3aGljaCBzaG91bGRuJ3QgYmUgbmVlZGVkIGluIG1vc3QgY2FzZXMuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWRhbmdlclwiPlxuICogQW5ndWxhckpTIHN0cm9uZ2x5IHJlbGllcyBvbiBjb250ZXh0dWFsIGVzY2FwaW5nIGZvciB0aGUgc2VjdXJpdHkgb2YgYmluZGluZ3M6IGRpc2FibGluZyBvclxuICogbW9kaWZ5aW5nIHRoaXMgbWlnaHQgY2F1c2UgY3Jvc3Mgc2l0ZSBzY3JpcHRpbmcgKFhTUykgdnVsbmVyYWJpbGl0aWVzLiBGb3IgbGlicmFyaWVzIG93bmVycyxcbiAqIGNoYW5nZXMgdG8gdGhpcyBzZXJ2aWNlIHdpbGwgYWxzbyBpbmZsdWVuY2UgdXNlcnMsIHNvIGJlIGV4dHJhIGNhcmVmdWwgYW5kIGRvY3VtZW50IHlvdXIgY2hhbmdlcy5cbiAqIDwvZGl2PlxuICpcbiAqIFR5cGljYWxseSwgeW91IHdvdWxkIGNvbmZpZ3VyZSBvciBvdmVycmlkZSB0aGUge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSAkc2NlRGVsZWdhdGV9IGluc3RlYWQgb2ZcbiAqIHRoZSBgJHNjZWAgc2VydmljZSB0byBjdXN0b21pemUgdGhlIHdheSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyB3b3JrcyBpbiBBbmd1bGFySlMuICBUaGlzIGlzXG4gKiBiZWNhdXNlLCB3aGlsZSB0aGUgYCRzY2VgIHByb3ZpZGVzIG51bWVyb3VzIHNob3J0aGFuZCBtZXRob2RzLCBldGMuLCB5b3UgcmVhbGx5IG9ubHkgbmVlZCB0b1xuICogb3ZlcnJpZGUgMyBjb3JlIGZ1bmN0aW9ucyAoYHRydXN0QXNgLCBgZ2V0VHJ1c3RlZGAgYW5kIGB2YWx1ZU9mYCkgdG8gcmVwbGFjZSB0aGUgd2F5IHRoaW5nc1xuICogd29yayBiZWNhdXNlIGAkc2NlYCBkZWxlZ2F0ZXMgdG8gYCRzY2VEZWxlZ2F0ZWAgZm9yIHRoZXNlIG9wZXJhdGlvbnMuXG4gKlxuICogUmVmZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyICRzY2VEZWxlZ2F0ZVByb3ZpZGVyfSB0byBjb25maWd1cmUgdGhpcyBzZXJ2aWNlLlxuICpcbiAqIFRoZSBkZWZhdWx0IGluc3RhbmNlIG9mIGAkc2NlRGVsZWdhdGVgIHNob3VsZCB3b3JrIG91dCBvZiB0aGUgYm94IHdpdGggbGl0dGxlIHBhaW4uICBXaGlsZSB5b3VcbiAqIGNhbiBvdmVycmlkZSBpdCBjb21wbGV0ZWx5IHRvIGNoYW5nZSB0aGUgYmVoYXZpb3Igb2YgYCRzY2VgLCB0aGUgY29tbW9uIGNhc2Ugd291bGRcbiAqIGludm9sdmUgY29uZmlndXJpbmcgdGhlIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gaW5zdGVhZCBieSBzZXR0aW5nXG4gKiB5b3VyIG93biB3aGl0ZWxpc3RzIGFuZCBibGFja2xpc3RzIGZvciB0cnVzdGluZyBVUkxzIHVzZWQgZm9yIGxvYWRpbmcgQW5ndWxhckpTIHJlc291cmNlcyBzdWNoIGFzXG4gKiB0ZW1wbGF0ZXMuICBSZWZlciB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3RcbiAqICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0fSBhbmQge0BsaW5rXG4gKiBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdH1cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHNjZURlbGVnYXRlUHJvdmlkZXJcbiAqIEB0aGlzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhlIGAkc2NlRGVsZWdhdGVQcm92aWRlcmAgcHJvdmlkZXIgYWxsb3dzIGRldmVsb3BlcnMgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlXG4gKiAkc2NlRGVsZWdhdGUgc2VydmljZX0sIHVzZWQgYXMgYSBkZWxlZ2F0ZSBmb3Ige0BsaW5rIG5nLiRzY2UgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgKFNDRSl9LlxuICpcbiAqIFRoZSBgJHNjZURlbGVnYXRlUHJvdmlkZXJgIGFsbG93cyBvbmUgdG8gZ2V0L3NldCB0aGUgd2hpdGVsaXN0cyBhbmQgYmxhY2tsaXN0cyB1c2VkIHRvIGVuc3VyZVxuICogdGhhdCB0aGUgVVJMcyB1c2VkIGZvciBzb3VyY2luZyBBbmd1bGFySlMgdGVtcGxhdGVzIGFuZCBvdGhlciBzY3JpcHQtcnVubmluZyBVUkxzIGFyZSBzYWZlIChhbGxcbiAqIHBsYWNlcyB0aGF0IHVzZSB0aGUgYCRzY2UuUkVTT1VSQ0VfVVJMYCBjb250ZXh0KS4gU2VlXG4gKiB7QGxpbmsgbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3QgJHNjZURlbGVnYXRlUHJvdmlkZXIucmVzb3VyY2VVcmxXaGl0ZWxpc3R9XG4gKiBhbmRcbiAqIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybEJsYWNrbGlzdCAkc2NlRGVsZWdhdGVQcm92aWRlci5yZXNvdXJjZVVybEJsYWNrbGlzdH0sXG4gKlxuICogRm9yIHRoZSBnZW5lcmFsIGRldGFpbHMgYWJvdXQgdGhpcyBzZXJ2aWNlIGluIEFuZ3VsYXIsIHJlYWQgdGhlIG1haW4gcGFnZSBmb3Ige0BsaW5rIG5nLiRzY2VcbiAqIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfS5cbiAqXG4gKiAqKkV4YW1wbGUqKjogIENvbnNpZGVyIHRoZSBmb2xsb3dpbmcgY2FzZS4gPGEgbmFtZT1cImV4YW1wbGVcIj48L2E+XG4gKlxuICogLSB5b3VyIGFwcCBpcyBob3N0ZWQgYXQgdXJsIGBodHRwOi8vbXlhcHAuZXhhbXBsZS5jb20vYFxuICogLSBidXQgc29tZSBvZiB5b3VyIHRlbXBsYXRlcyBhcmUgaG9zdGVkIG9uIG90aGVyIGRvbWFpbnMgeW91IGNvbnRyb2wgc3VjaCBhc1xuICogICBgaHR0cDovL3NydjAxLmFzc2V0cy5leGFtcGxlLmNvbS9gLCBgaHR0cDovL3NydjAyLmFzc2V0cy5leGFtcGxlLmNvbS9gLCBldGMuXG4gKiAtIGFuZCB5b3UgaGF2ZSBhbiBvcGVuIHJlZGlyZWN0IGF0IGBodHRwOi8vbXlhcHAuZXhhbXBsZS5jb20vY2xpY2tUaHJ1Py4uLmAuXG4gKlxuICogSGVyZSBpcyB3aGF0IGEgc2VjdXJlIGNvbmZpZ3VyYXRpb24gZm9yIHRoaXMgc2NlbmFyaW8gbWlnaHQgbG9vayBsaWtlOlxuICpcbiAqIGBgYFxuICogIGFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFtdKS5jb25maWcoZnVuY3Rpb24oJHNjZURlbGVnYXRlUHJvdmlkZXIpIHtcbiAqICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsV2hpdGVsaXN0KFtcbiAqICAgICAgLy8gQWxsb3cgc2FtZSBvcmlnaW4gcmVzb3VyY2UgbG9hZHMuXG4gKiAgICAgICdzZWxmJyxcbiAqICAgICAgLy8gQWxsb3cgbG9hZGluZyBmcm9tIG91ciBhc3NldHMgZG9tYWluLiAgTm90aWNlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gKiBhbmQgKiouXG4gKiAgICAgICdodHRwOi8vc3J2Ki5hc3NldHMuZXhhbXBsZS5jb20vKionXG4gKiAgICBdKTtcbiAqXG4gKiAgICAvLyBUaGUgYmxhY2tsaXN0IG92ZXJyaWRlcyB0aGUgd2hpdGVsaXN0IHNvIHRoZSBvcGVuIHJlZGlyZWN0IGhlcmUgaXMgYmxvY2tlZC5cbiAqICAgICRzY2VEZWxlZ2F0ZVByb3ZpZGVyLnJlc291cmNlVXJsQmxhY2tsaXN0KFtcbiAqICAgICAgJ2h0dHA6Ly9teWFwcC5leGFtcGxlLmNvbS9jbGlja1RocnUqKidcbiAqICAgIF0pO1xuICogIH0pO1xuICogYGBgXG4gKiBOb3RlIHRoYXQgYW4gZW1wdHkgd2hpdGVsaXN0IHdpbGwgYmxvY2sgZXZlcnkgcmVzb3VyY2UgVVJMIGZyb20gYmVpbmcgbG9hZGVkLCBhbmQgd2lsbCByZXF1aXJlXG4gKiB5b3UgdG8gbWFudWFsbHkgbWFyayBlYWNoIG9uZSBhcyB0cnVzdGVkIHdpdGggYCRzY2UudHJ1c3RBc1Jlc291cmNlVXJsYC4gSG93ZXZlciwgdGVtcGxhdGVzXG4gKiByZXF1ZXN0ZWQgYnkge0BsaW5rIG5nLiR0ZW1wbGF0ZVJlcXVlc3QgJHRlbXBsYXRlUmVxdWVzdH0gdGhhdCBhcmUgcHJlc2VudCBpblxuICoge0BsaW5rIG5nLiR0ZW1wbGF0ZUNhY2hlICR0ZW1wbGF0ZUNhY2hlfSB3aWxsIG5vdCBnbyB0aHJvdWdoIHRoaXMgY2hlY2suIElmIHlvdSBoYXZlIGEgbWVjaGFuaXNtXG4gKiB0byBwb3B1bGF0ZSB5b3VyIHRlbXBsYXRlcyBpbiB0aGF0IGNhY2hlIGF0IGNvbmZpZyB0aW1lLCB0aGVuIGl0IGlzIGEgZ29vZCBpZGVhIHRvIHJlbW92ZSAnc2VsZidcbiAqIGZyb20gdGhhdCB3aGl0ZWxpc3QuIFRoaXMgaGVscHMgdG8gbWl0aWdhdGUgdGhlIHNlY3VyaXR5IGltcGFjdCBvZiBjZXJ0YWluIHR5cGVzIG9mIGlzc3VlcywgbGlrZVxuICogZm9yIGluc3RhbmNlIGF0dGFja2VyLWNvbnRyb2xsZWQgYG5nLWluY2x1ZGVzYC5cbiAqL1xuXG5mdW5jdGlvbiAkU2NlRGVsZWdhdGVQcm92aWRlcigpIHtcbiAgdGhpcy5TQ0VfQ09OVEVYVFMgPSBTQ0VfQ09OVEVYVFM7XG5cbiAgLy8gUmVzb3VyY2UgVVJMcyBjYW4gYWxzbyBiZSB0cnVzdGVkIGJ5IHBvbGljeS5cbiAgdmFyIHJlc291cmNlVXJsV2hpdGVsaXN0ID0gWydzZWxmJ10sXG4gICAgICByZXNvdXJjZVVybEJsYWNrbGlzdCA9IFtdO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0XG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXk9fSB3aGl0ZWxpc3QgV2hlbiBwcm92aWRlZCwgcmVwbGFjZXMgdGhlIHJlc291cmNlVXJsV2hpdGVsaXN0IHdpdGggdGhlIHZhbHVlXG4gICAqICAgICBwcm92aWRlZC4gIFRoaXMgbXVzdCBiZSBhbiBhcnJheSBvciBudWxsLiAgQSBzbmFwc2hvdCBvZiB0aGlzIGFycmF5IGlzIHVzZWQgc28gZnVydGhlclxuICAgKiAgICAgY2hhbmdlcyB0byB0aGUgYXJyYXkgYXJlIGlnbm9yZWQuXG4gICAqICAgICBGb2xsb3cge0BsaW5rIG5nLiRzY2UjcmVzb3VyY2VVcmxQYXR0ZXJuSXRlbSB0aGlzIGxpbmt9IGZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtc1xuICAgKiAgICAgYWxsb3dlZCBpbiB0aGlzIGFycmF5LlxuICAgKlxuICAgKiBAcmV0dXJuIHtBcnJheX0gVGhlIGN1cnJlbnRseSBzZXQgd2hpdGVsaXN0IGFycmF5LlxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cy9HZXRzIHRoZSB3aGl0ZWxpc3Qgb2YgdHJ1c3RlZCByZXNvdXJjZSBVUkxzLlxuICAgKlxuICAgKiBUaGUgKipkZWZhdWx0IHZhbHVlKiogd2hlbiBubyB3aGl0ZWxpc3QgaGFzIGJlZW4gZXhwbGljaXRseSBzZXQgaXMgYFsnc2VsZiddYCBhbGxvd2luZyBvbmx5XG4gICAqIHNhbWUgb3JpZ2luIHJlc291cmNlIHJlcXVlc3RzLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKk5vdGU6KiogdGhlIGRlZmF1bHQgd2hpdGVsaXN0IG9mICdzZWxmJyBpcyBub3QgcmVjb21tZW5kZWQgaWYgeW91ciBhcHAgc2hhcmVzIGl0cyBvcmlnaW5cbiAgICogd2l0aCBvdGhlciBhcHBzISBJdCBpcyBhIGdvb2QgaWRlYSB0byBsaW1pdCBpdCB0byBvbmx5IHlvdXIgYXBwbGljYXRpb24ncyBkaXJlY3RvcnkuXG4gICAqIDwvZGl2PlxuICAgKi9cbiAgdGhpcy5yZXNvdXJjZVVybFdoaXRlbGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJlc291cmNlVXJsV2hpdGVsaXN0ID0gYWRqdXN0TWF0Y2hlcnModmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzb3VyY2VVcmxXaGl0ZWxpc3Q7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3RcbiAgICogQGtpbmQgZnVuY3Rpb25cbiAgICpcbiAgICogQHBhcmFtIHtBcnJheT19IGJsYWNrbGlzdCBXaGVuIHByb3ZpZGVkLCByZXBsYWNlcyB0aGUgcmVzb3VyY2VVcmxCbGFja2xpc3Qgd2l0aCB0aGUgdmFsdWVcbiAgICogICAgIHByb3ZpZGVkLiAgVGhpcyBtdXN0IGJlIGFuIGFycmF5IG9yIG51bGwuICBBIHNuYXBzaG90IG9mIHRoaXMgYXJyYXkgaXMgdXNlZCBzbyBmdXJ0aGVyXG4gICAqICAgICBjaGFuZ2VzIHRvIHRoZSBhcnJheSBhcmUgaWdub3JlZC48L3A+PHA+XG4gICAqICAgICBGb2xsb3cge0BsaW5rIG5nLiRzY2UjcmVzb3VyY2VVcmxQYXR0ZXJuSXRlbSB0aGlzIGxpbmt9IGZvciBhIGRlc2NyaXB0aW9uIG9mIHRoZSBpdGVtc1xuICAgKiAgICAgYWxsb3dlZCBpbiB0aGlzIGFycmF5LjwvcD48cD5cbiAgICogICAgIFRoZSB0eXBpY2FsIHVzYWdlIGZvciB0aGUgYmxhY2tsaXN0IGlzIHRvICoqYmxvY2tcbiAgICogICAgIFtvcGVuIHJlZGlyZWN0c10oaHR0cDovL2N3ZS5taXRyZS5vcmcvZGF0YS9kZWZpbml0aW9ucy82MDEuaHRtbCkqKiBzZXJ2ZWQgYnkgeW91ciBkb21haW4gYXNcbiAgICogICAgIHRoZXNlIHdvdWxkIG90aGVyd2lzZSBiZSB0cnVzdGVkIGJ1dCBhY3R1YWxseSByZXR1cm4gY29udGVudCBmcm9tIHRoZSByZWRpcmVjdGVkIGRvbWFpbi5cbiAgICogICAgIDwvcD48cD5cbiAgICogICAgIEZpbmFsbHksICoqdGhlIGJsYWNrbGlzdCBvdmVycmlkZXMgdGhlIHdoaXRlbGlzdCoqIGFuZCBoYXMgdGhlIGZpbmFsIHNheS5cbiAgICpcbiAgICogQHJldHVybiB7QXJyYXl9IFRoZSBjdXJyZW50bHkgc2V0IGJsYWNrbGlzdCBhcnJheS5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMvR2V0cyB0aGUgYmxhY2tsaXN0IG9mIHRydXN0ZWQgcmVzb3VyY2UgVVJMcy5cbiAgICpcbiAgICogVGhlICoqZGVmYXVsdCB2YWx1ZSoqIHdoZW4gbm8gd2hpdGVsaXN0IGhhcyBiZWVuIGV4cGxpY2l0bHkgc2V0IGlzIHRoZSBlbXB0eSBhcnJheSAoaS5lLiB0aGVyZVxuICAgKiBpcyBubyBibGFja2xpc3QuKVxuICAgKi9cblxuICB0aGlzLnJlc291cmNlVXJsQmxhY2tsaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgcmVzb3VyY2VVcmxCbGFja2xpc3QgPSBhZGp1c3RNYXRjaGVycyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXNvdXJjZVVybEJsYWNrbGlzdDtcbiAgfTtcblxuICB0aGlzLiRnZXQgPSBbJyRpbmplY3RvcicsIGZ1bmN0aW9uKCRpbmplY3Rvcikge1xuXG4gICAgdmFyIGh0bWxTYW5pdGl6ZXIgPSBmdW5jdGlvbiBodG1sU2FuaXRpemVyKGh0bWwpIHtcbiAgICAgIHRocm93ICRzY2VNaW5FcnIoJ3Vuc2FmZScsICdBdHRlbXB0aW5nIHRvIHVzZSBhbiB1bnNhZmUgdmFsdWUgaW4gYSBzYWZlIGNvbnRleHQuJyk7XG4gICAgfTtcblxuICAgIGlmICgkaW5qZWN0b3IuaGFzKCckc2FuaXRpemUnKSkge1xuICAgICAgaHRtbFNhbml0aXplciA9ICRpbmplY3Rvci5nZXQoJyRzYW5pdGl6ZScpO1xuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gbWF0Y2hVcmwobWF0Y2hlciwgcGFyc2VkVXJsKSB7XG4gICAgICBpZiAobWF0Y2hlciA9PT0gJ3NlbGYnKSB7XG4gICAgICAgIHJldHVybiB1cmxJc1NhbWVPcmlnaW4ocGFyc2VkVXJsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZmluaXRlbHkgYSByZWdleC4gIFNlZSBhZGp1c3RNYXRjaGVycygpXG4gICAgICAgIHJldHVybiAhIW1hdGNoZXIuZXhlYyhwYXJzZWRVcmwuaHJlZik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeSh1cmwpIHtcbiAgICAgIHZhciBwYXJzZWRVcmwgPSB1cmxSZXNvbHZlKHVybC50b1N0cmluZygpKTtcbiAgICAgIHZhciBpLCBuLCBhbGxvd2VkID0gZmFsc2U7XG4gICAgICAvLyBFbnN1cmUgdGhhdCBhdCBsZWFzdCBvbmUgaXRlbSBmcm9tIHRoZSB3aGl0ZWxpc3QgYWxsb3dzIHRoaXMgdXJsLlxuICAgICAgZm9yIChpID0gMCwgbiA9IHJlc291cmNlVXJsV2hpdGVsaXN0Lmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICBpZiAobWF0Y2hVcmwocmVzb3VyY2VVcmxXaGl0ZWxpc3RbaV0sIHBhcnNlZFVybCkpIHtcbiAgICAgICAgICBhbGxvd2VkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGFsbG93ZWQpIHtcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgbm8gaXRlbSBmcm9tIHRoZSBibGFja2xpc3QgYmxvY2tlZCB0aGlzIHVybC5cbiAgICAgICAgZm9yIChpID0gMCwgbiA9IHJlc291cmNlVXJsQmxhY2tsaXN0Lmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIGlmIChtYXRjaFVybChyZXNvdXJjZVVybEJsYWNrbGlzdFtpXSwgcGFyc2VkVXJsKSkge1xuICAgICAgICAgICAgYWxsb3dlZCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYWxsb3dlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUhvbGRlclR5cGUoQmFzZSkge1xuICAgICAgdmFyIGhvbGRlclR5cGUgPSBmdW5jdGlvbiBUcnVzdGVkVmFsdWVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZSkge1xuICAgICAgICB0aGlzLiQkdW53cmFwVHJ1c3RlZFZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIHRydXN0ZWRWYWx1ZTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgICBpZiAoQmFzZSkge1xuICAgICAgICBob2xkZXJUeXBlLnByb3RvdHlwZSA9IG5ldyBCYXNlKCk7XG4gICAgICB9XG4gICAgICBob2xkZXJUeXBlLnByb3RvdHlwZS52YWx1ZU9mID0gZnVuY3Rpb24gc2NlVmFsdWVPZigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcbiAgICAgIH07XG4gICAgICBob2xkZXJUeXBlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHNjZVRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpLnRvU3RyaW5nKCk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGhvbGRlclR5cGU7XG4gICAgfVxuXG4gICAgdmFyIHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UgPSBnZW5lcmF0ZUhvbGRlclR5cGUoKSxcbiAgICAgICAgYnlUeXBlID0ge307XG5cbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLkhUTUxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKHRydXN0ZWRWYWx1ZUhvbGRlckJhc2UpO1xuICAgIGJ5VHlwZVtTQ0VfQ09OVEVYVFMuQ1NTXSA9IGdlbmVyYXRlSG9sZGVyVHlwZSh0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKTtcbiAgICBieVR5cGVbU0NFX0NPTlRFWFRTLlVSTF0gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7XG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5KU10gPSBnZW5lcmF0ZUhvbGRlclR5cGUodHJ1c3RlZFZhbHVlSG9sZGVyQmFzZSk7XG4gICAgYnlUeXBlW1NDRV9DT05URVhUUy5SRVNPVVJDRV9VUkxdID0gZ2VuZXJhdGVIb2xkZXJUeXBlKGJ5VHlwZVtTQ0VfQ09OVEVYVFMuVVJMXSk7XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFJldHVybnMgYSB0cnVzdGVkIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwYXJhbWV0ZXIgZm9yIHRoZSBzcGVjaWZpZWQgY29udGV4dC4gVGhpcyB0cnVzdGVkXG4gICAgICogb2JqZWN0IHdpbGwgbGF0ZXIgb24gYmUgdXNlZCBhcy1pcywgd2l0aG91dCBhbnkgc2VjdXJpdHkgY2hlY2ssIGJ5IGJpbmRpbmdzIG9yIGRpcmVjdGl2ZXNcbiAgICAgKiB0aGF0IHJlcXVpcmUgdGhpcyBzZWN1cml0eSBjb250ZXh0LlxuICAgICAqIEZvciBpbnN0YW5jZSwgbWFya2luZyBhIHN0cmluZyBhcyB0cnVzdGVkIGZvciB0aGUgYCRzY2UuSFRNTGAgY29udGV4dCB3aWxsIGVudGlyZWx5IGJ5cGFzc1xuICAgICAqIHRoZSBwb3RlbnRpYWwgYCRzYW5pdGl6ZWAgY2FsbCBpbiBjb3JyZXNwb25kaW5nIGAkc2NlLkhUTUxgIGJpbmRpbmdzIG9yIGRpcmVjdGl2ZXMsIHN1Y2ggYXNcbiAgICAgKiBgbmctYmluZC1odG1sYC4gTm90ZSB0aGF0IGluIG1vc3QgY2FzZXMgeW91IHdvbid0IG5lZWQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uOiBpZiB5b3UgaGF2ZSB0aGVcbiAgICAgKiBzYW5pdGl6ZXIgbG9hZGVkLCBwYXNzaW5nIHRoZSB2YWx1ZSBpdHNlbGYgd2lsbCByZW5kZXIgYWxsIHRoZSBIVE1MIHRoYXQgZG9lcyBub3QgcG9zZSBhXG4gICAgICogc2VjdXJpdHkgcmlzay5cbiAgICAgKlxuICAgICAqIFNlZSB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgZ2V0VHJ1c3RlZH0gZm9yIHRoZSBmdW5jdGlvbiB0aGF0IHdpbGwgY29uc3VtZSB0aG9zZVxuICAgICAqIHRydXN0ZWQgdmFsdWVzLCBhbmQge0BsaW5rIG5nLiRzY2UgJHNjZX0gZm9yIGdlbmVyYWwgZG9jdW1lbnRhdGlvbiBhYm91dCBzdHJpY3QgY29udGV4dHVhbFxuICAgICAqIGVzY2FwaW5nLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyBzYWZlIGZvciB1c2UsIGUuZy4gYCRzY2UuVVJMYCxcbiAgICAgKiAgICAgYCRzY2UuUkVTT1VSQ0VfVVJMYCwgYCRzY2UuSFRNTGAsIGAkc2NlLkpTYCBvciBgJHNjZS5DU1NgLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdGhhdCBzaG91bGQgYmUgY29uc2lkZXJlZCB0cnVzdGVkLlxuICAgICAqIEByZXR1cm4geyp9IEEgdHJ1c3RlZCByZXByZXNlbnRhdGlvbiBvZiB2YWx1ZSwgdGhhdCBjYW4gYmUgdXNlZCBpbiB0aGUgZ2l2ZW4gY29udGV4dC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVzdEFzKHR5cGUsIHRydXN0ZWRWYWx1ZSkge1xuICAgICAgdmFyIENvbnN0cnVjdG9yID0gKGJ5VHlwZS5oYXNPd25Qcm9wZXJ0eSh0eXBlKSA/IGJ5VHlwZVt0eXBlXSA6IG51bGwpO1xuICAgICAgaWYgKCFDb25zdHJ1Y3Rvcikge1xuICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpY29udGV4dCcsXG4gICAgICAgICAgICAnQXR0ZW1wdGVkIHRvIHRydXN0IGEgdmFsdWUgaW4gaW52YWxpZCBjb250ZXh0LiBDb250ZXh0OiB7MH07IFZhbHVlOiB7MX0nLFxuICAgICAgICAgICAgdHlwZSwgdHJ1c3RlZFZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmICh0cnVzdGVkVmFsdWUgPT09IG51bGwgfHwgaXNVbmRlZmluZWQodHJ1c3RlZFZhbHVlKSB8fCB0cnVzdGVkVmFsdWUgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiB0cnVzdGVkVmFsdWU7XG4gICAgICB9XG4gICAgICAvLyBBbGwgdGhlIGN1cnJlbnQgY29udGV4dHMgaW4gU0NFX0NPTlRFWFRTIGhhcHBlbiB0byBiZSBzdHJpbmdzLiAgSW4gb3JkZXIgdG8gYXZvaWQgdHJ1c3RpbmdcbiAgICAgIC8vIG11dGFibGUgb2JqZWN0cywgd2UgZW5zdXJlIGhlcmUgdGhhdCB0aGUgdmFsdWUgcGFzc2VkIGluIGlzIGFjdHVhbGx5IGEgc3RyaW5nLlxuICAgICAgaWYgKHR5cGVvZiB0cnVzdGVkVmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93ICRzY2VNaW5FcnIoJ2l0eXBlJyxcbiAgICAgICAgICAgICdBdHRlbXB0ZWQgdG8gdHJ1c3QgYSBub24tc3RyaW5nIHZhbHVlIGluIGEgY29udGVudCByZXF1aXJpbmcgYSBzdHJpbmc6IENvbnRleHQ6IHswfScsXG4gICAgICAgICAgICB0eXBlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IodHJ1c3RlZFZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZURlbGVnYXRlI3ZhbHVlT2ZcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIElmIHRoZSBwYXNzZWQgcGFyYW1ldGVyIGhhZCBiZWVuIHJldHVybmVkIGJ5IGEgcHJpb3IgY2FsbCB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXNcbiAgICAgKiBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSwgcmV0dXJucyB0aGUgdmFsdWUgdGhhdCBoYWQgYmVlbiBwYXNzZWQgdG8ge0BsaW5rXG4gICAgICogbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0uXG4gICAgICpcbiAgICAgKiBJZiB0aGUgcGFzc2VkIHBhcmFtZXRlciBpcyBub3QgYSB2YWx1ZSB0aGF0IGhhZCBiZWVuIHJldHVybmVkIGJ5IHtAbGlua1xuICAgICAqIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9LCBpdCBtdXN0IGJlIHJldHVybmVkIGFzLWlzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcmVzdWx0IG9mIGEgcHJpb3Ige0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9XG4gICAgICogICAgIGNhbGwgb3IgYW55dGhpbmcgZWxzZS5cbiAgICAgKiBAcmV0dXJuIHsqfSBUaGUgYHZhbHVlYCB0aGF0IHdhcyBvcmlnaW5hbGx5IHByb3ZpZGVkIHRvIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBc1xuICAgICAqICAgICBgJHNjZURlbGVnYXRlLnRydXN0QXNgfSBpZiBgdmFsdWVgIGlzIHRoZSByZXN1bHQgb2Ygc3VjaCBhIGNhbGwuICBPdGhlcndpc2UsIHJldHVybnNcbiAgICAgKiAgICAgYHZhbHVlYCB1bmNoYW5nZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVPZihtYXliZVRydXN0ZWQpIHtcbiAgICAgIGlmIChtYXliZVRydXN0ZWQgaW5zdGFuY2VvZiB0cnVzdGVkVmFsdWVIb2xkZXJCYXNlKSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQuJCR1bndyYXBUcnVzdGVkVmFsdWUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBtYXliZVRydXN0ZWQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBUYWtlcyBhbnkgaW5wdXQsIGFuZCBlaXRoZXIgcmV0dXJucyBhIHZhbHVlIHRoYXQncyBzYWZlIHRvIHVzZSBpbiB0aGUgc3BlY2lmaWVkIGNvbnRleHQsIG9yXG4gICAgICogdGhyb3dzIGFuIGV4Y2VwdGlvbi5cbiAgICAgKlxuICAgICAqIEluIHByYWN0aWNlLCB0aGVyZSBhcmUgc2V2ZXJhbCBjYXNlcy4gV2hlbiBnaXZlbiBhIHN0cmluZywgdGhpcyBmdW5jdGlvbiBydW5zIGNoZWNrc1xuICAgICAqIGFuZCBzYW5pdGl6YXRpb24gdG8gbWFrZSBpdCBzYWZlIHdpdGhvdXQgcHJpb3IgYXNzdW1wdGlvbnMuIFdoZW4gZ2l2ZW4gdGhlIHJlc3VsdCBvZiBhIHtAbGlua1xuICAgICAqIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGNhbGwsIGl0IHJldHVybnMgdGhlIG9yaWdpbmFsbHkgc3VwcGxpZWRcbiAgICAgKiB2YWx1ZSBpZiB0aGF0IHZhbHVlJ3MgY29udGV4dCBpcyB2YWxpZCBmb3IgdGhpcyBjYWxsJ3MgY29udGV4dC4gRmluYWxseSwgdGhpcyBmdW5jdGlvbiBjYW5cbiAgICAgKiBhbHNvIHRocm93IHdoZW4gdGhlcmUgaXMgbm8gd2F5IHRvIHR1cm4gYG1heWJlVHJ1c3RlZGAgaW4gYSBzYWZlIHZhbHVlIChlLmcuLCBubyBzYW5pdGl6YXRpb25cbiAgICAgKiBpcyBhdmFpbGFibGUgb3IgcG9zc2libGUuKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGNvbnRleHQgaW4gd2hpY2ggdGhpcyB2YWx1ZSBpcyB0byBiZSB1c2VkIChzdWNoIGFzIGAkc2NlLkhUTUxgKS5cbiAgICAgKiBAcGFyYW0geyp9IG1heWJlVHJ1c3RlZCBUaGUgcmVzdWx0IG9mIGEgcHJpb3Ige0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzXG4gICAgICogICAgIGAkc2NlRGVsZWdhdGUudHJ1c3RBc2B9IGNhbGwsIG9yIGFueXRoaW5nIGVsc2UgKHdoaWNoIHdpbGwgbm90IGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC4pXG4gICAgICogQHJldHVybiB7Kn0gQSB2ZXJzaW9uIG9mIHRoZSB2YWx1ZSB0aGF0J3Mgc2FmZSB0byB1c2UgaW4gdGhlIGdpdmVuIGNvbnRleHQsIG9yIHRocm93cyBhblxuICAgICAqICAgICBleGNlcHRpb24gaWYgdGhpcyBpcyBpbXBvc3NpYmxlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFRydXN0ZWQodHlwZSwgbWF5YmVUcnVzdGVkKSB7XG4gICAgICBpZiAobWF5YmVUcnVzdGVkID09PSBudWxsIHx8IGlzVW5kZWZpbmVkKG1heWJlVHJ1c3RlZCkgfHwgbWF5YmVUcnVzdGVkID09PSAnJykge1xuICAgICAgICByZXR1cm4gbWF5YmVUcnVzdGVkO1xuICAgICAgfVxuICAgICAgdmFyIGNvbnN0cnVjdG9yID0gKGJ5VHlwZS5oYXNPd25Qcm9wZXJ0eSh0eXBlKSA/IGJ5VHlwZVt0eXBlXSA6IG51bGwpO1xuICAgICAgLy8gSWYgbWF5YmVUcnVzdGVkIGlzIGEgdHJ1c3RlZCBjbGFzcyBpbnN0YW5jZSBvciBzdWJjbGFzcyBpbnN0YW5jZSwgdGhlbiB1bndyYXAgYW5kIHJldHVyblxuICAgICAgLy8gYXMtaXMuXG4gICAgICBpZiAoY29uc3RydWN0b3IgJiYgbWF5YmVUcnVzdGVkIGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZC4kJHVud3JhcFRydXN0ZWRWYWx1ZSgpO1xuICAgICAgfVxuICAgICAgLy8gT3RoZXJ3aXNlLCBpZiB3ZSBnZXQgaGVyZSwgdGhlbiB3ZSBtYXkgZWl0aGVyIG1ha2UgaXQgc2FmZSwgb3IgdGhyb3cgYW4gZXhjZXB0aW9uLiBUaGlzXG4gICAgICAvLyBkZXBlbmRzIG9uIHRoZSBjb250ZXh0OiBzb21lIGFyZSBzYW5pdGl6YXRpYmxlIChIVE1MKSwgc29tZSB1c2Ugd2hpdGVsaXN0cyAoUkVTT1VSQ0VfVVJMKSxcbiAgICAgIC8vIHNvbWUgYXJlIGltcG9zc2libGUgdG8gZG8gKEpTKS4gVGhpcyBzdGVwIGlzbid0IGltcGxlbWVudGVkIGZvciBDU1MgYW5kIFVSTCwgYXMgQW5ndWxhckpTXG4gICAgICAvLyBoYXMgbm8gY29ycmVzcG9uZGluZyBzaW5rcy5cbiAgICAgIGlmICh0eXBlID09PSBTQ0VfQ09OVEVYVFMuUkVTT1VSQ0VfVVJMKSB7XG4gICAgICAgIC8vIFJFU09VUkNFX1VSTCB1c2VzIGEgd2hpdGVsaXN0LlxuICAgICAgICBpZiAoaXNSZXNvdXJjZVVybEFsbG93ZWRCeVBvbGljeShtYXliZVRydXN0ZWQpKSB7XG4gICAgICAgICAgcmV0dXJuIG1heWJlVHJ1c3RlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyAkc2NlTWluRXJyKCdpbnNlY3VybCcsXG4gICAgICAgICAgICAgICdCbG9ja2VkIGxvYWRpbmcgcmVzb3VyY2UgZnJvbSB1cmwgbm90IGFsbG93ZWQgYnkgJHNjZURlbGVnYXRlIHBvbGljeS4gIFVSTDogezB9JyxcbiAgICAgICAgICAgICAgbWF5YmVUcnVzdGVkLnRvU3RyaW5nKCkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFNDRV9DT05URVhUUy5IVE1MKSB7XG4gICAgICAgIC8vIGh0bWxTYW5pdGl6ZXIgdGhyb3dzIGl0cyBvd24gZXJyb3Igd2hlbiBubyBzYW5pdGl6ZXIgaXMgYXZhaWxhYmxlLlxuICAgICAgICByZXR1cm4gaHRtbFNhbml0aXplcihtYXliZVRydXN0ZWQpO1xuICAgICAgfVxuICAgICAgLy8gRGVmYXVsdCBlcnJvciB3aGVuIHRoZSAkc2NlIHNlcnZpY2UgaGFzIG5vIHdheSB0byBtYWtlIHRoZSBpbnB1dCBzYWZlLlxuICAgICAgdGhyb3cgJHNjZU1pbkVycigndW5zYWZlJywgJ0F0dGVtcHRpbmcgdG8gdXNlIGFuIHVuc2FmZSB2YWx1ZSBpbiBhIHNhZmUgY29udGV4dC4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4geyB0cnVzdEFzOiB0cnVzdEFzLFxuICAgICAgICAgICAgIGdldFRydXN0ZWQ6IGdldFRydXN0ZWQsXG4gICAgICAgICAgICAgdmFsdWVPZjogdmFsdWVPZiB9O1xuICB9XTtcbn1cblxuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHNjZVByb3ZpZGVyXG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoZSAkc2NlUHJvdmlkZXIgcHJvdmlkZXIgYWxsb3dzIGRldmVsb3BlcnMgdG8gY29uZmlndXJlIHRoZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBzZXJ2aWNlLlxuICogLSAgIGVuYWJsZS9kaXNhYmxlIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpIGluIGEgbW9kdWxlXG4gKiAtICAgb3ZlcnJpZGUgdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gd2l0aCBhIGN1c3RvbSBkZWxlZ2F0ZVxuICpcbiAqIFJlYWQgbW9yZSBhYm91dCB7QGxpbmsgbmcuJHNjZSBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKX0uXG4gKi9cblxuLyoqXG4gKiBAbmdkb2Mgc2VydmljZVxuICogQG5hbWUgJHNjZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBgJHNjZWAgaXMgYSBzZXJ2aWNlIHRoYXQgcHJvdmlkZXMgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmcgc2VydmljZXMgdG8gQW5ndWxhckpTLlxuICpcbiAqICMgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmdcbiAqXG4gKiBTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyAoU0NFKSBpcyBhIG1vZGUgaW4gd2hpY2ggQW5ndWxhckpTIGNvbnN0cmFpbnMgYmluZGluZ3MgdG8gb25seSByZW5kZXJcbiAqIHRydXN0ZWQgdmFsdWVzLiBJdHMgZ29hbCBpcyB0byBhc3Npc3QgaW4gd3JpdGluZyBjb2RlIGluIGEgd2F5IHRoYXQgKGEpIGlzIHNlY3VyZSBieSBkZWZhdWx0LCBhbmRcbiAqIChiKSBtYWtlcyBhdWRpdGluZyBmb3Igc2VjdXJpdHkgdnVsbmVyYWJpbGl0aWVzIHN1Y2ggYXMgWFNTLCBjbGlja2phY2tpbmcsIGV0Yy4gYSBsb3QgZWFzaWVyLlxuICpcbiAqICMjIE92ZXJ2aWV3XG4gKlxuICogVG8gc3lzdGVtYXRpY2FsbHkgYmxvY2sgWFNTIHNlY3VyaXR5IGJ1Z3MsIEFuZ3VsYXJKUyB0cmVhdHMgYWxsIHZhbHVlcyBhcyB1bnRydXN0ZWQgYnkgZGVmYXVsdCBpblxuICogSFRNTCBvciBzZW5zaXRpdmUgVVJMIGJpbmRpbmdzLiBXaGVuIGJpbmRpbmcgdW50cnVzdGVkIHZhbHVlcywgQW5ndWxhckpTIHdpbGwgYXV0b21hdGljYWxseVxuICogcnVuIHNlY3VyaXR5IGNoZWNrcyBvbiB0aGVtIChzYW5pdGl6YXRpb25zLCB3aGl0ZWxpc3RzLCBkZXBlbmRpbmcgb24gY29udGV4dCksIG9yIHRocm93IHdoZW4gaXRcbiAqIGNhbm5vdCBndWFyYW50ZWUgdGhlIHNlY3VyaXR5IG9mIHRoZSByZXN1bHQuIFRoYXQgYmVoYXZpb3IgZGVwZW5kcyBzdHJvbmdseSBvbiBjb250ZXh0czogSFRNTFxuICogY2FuIGJlIHNhbml0aXplZCwgYnV0IHRlbXBsYXRlIFVSTHMgY2Fubm90LCBmb3IgaW5zdGFuY2UuXG4gKlxuICogVG8gaWxsdXN0cmF0ZSB0aGlzLCBjb25zaWRlciB0aGUgYG5nLWJpbmQtaHRtbGAgZGlyZWN0aXZlLiBJdCByZW5kZXJzIGl0cyB2YWx1ZSBkaXJlY3RseSBhcyBIVE1MOlxuICogd2UgY2FsbCB0aGF0IHRoZSAqY29udGV4dCouIFdoZW4gZ2l2ZW4gYW4gdW50cnVzdGVkIGlucHV0LCBBbmd1bGFySlMgd2lsbCBhdHRlbXB0IHRvIHNhbml0aXplIGl0XG4gKiBiZWZvcmUgcmVuZGVyaW5nIGlmIGEgc2FuaXRpemVyIGlzIGF2YWlsYWJsZSwgYW5kIHRocm93IG90aGVyd2lzZS4gVG8gYnlwYXNzIHNhbml0aXphdGlvbiBhbmRcbiAqIHJlbmRlciB0aGUgaW5wdXQgYXMtaXMsIHlvdSB3aWxsIG5lZWQgdG8gbWFyayBpdCBhcyB0cnVzdGVkIGZvciB0aGF0IGNvbnRleHQgYmVmb3JlIGF0dGVtcHRpbmdcbiAqIHRvIGJpbmQgaXQuXG4gKlxuICogQXMgb2YgdmVyc2lvbiAxLjIsIEFuZ3VsYXJKUyBzaGlwcyB3aXRoIFNDRSBlbmFibGVkIGJ5IGRlZmF1bHQuXG4gKlxuICogIyMgSW4gcHJhY3RpY2VcbiAqXG4gKiBIZXJlJ3MgYW4gZXhhbXBsZSBvZiBhIGJpbmRpbmcgaW4gYSBwcml2aWxlZ2VkIGNvbnRleHQ6XG4gKlxuICogYGBgXG4gKiA8aW5wdXQgbmctbW9kZWw9XCJ1c2VySHRtbFwiIGFyaWEtbGFiZWw9XCJVc2VyIGlucHV0XCI+XG4gKiA8ZGl2IG5nLWJpbmQtaHRtbD1cInVzZXJIdG1sXCI+PC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBOb3RpY2UgdGhhdCBgbmctYmluZC1odG1sYCBpcyBib3VuZCB0byBgdXNlckh0bWxgIGNvbnRyb2xsZWQgYnkgdGhlIHVzZXIuICBXaXRoIFNDRVxuICogZGlzYWJsZWQsIHRoaXMgYXBwbGljYXRpb24gYWxsb3dzIHRoZSB1c2VyIHRvIHJlbmRlciBhcmJpdHJhcnkgSFRNTCBpbnRvIHRoZSBESVYsIHdoaWNoIHdvdWxkXG4gKiBiZSBhbiBYU1Mgc2VjdXJpdHkgYnVnLiBJbiBhIG1vcmUgcmVhbGlzdGljIGV4YW1wbGUsIG9uZSBtYXkgYmUgcmVuZGVyaW5nIHVzZXIgY29tbWVudHMsIGJsb2dcbiAqIGFydGljbGVzLCBldGMuIHZpYSBiaW5kaW5ncy4gKEhUTUwgaXMganVzdCBvbmUgZXhhbXBsZSBvZiBhIGNvbnRleHQgd2hlcmUgcmVuZGVyaW5nIHVzZXJcbiAqIGNvbnRyb2xsZWQgaW5wdXQgY3JlYXRlcyBzZWN1cml0eSB2dWxuZXJhYmlsaXRpZXMuKVxuICpcbiAqIEZvciB0aGUgY2FzZSBvZiBIVE1MLCB5b3UgbWlnaHQgdXNlIGEgbGlicmFyeSwgZWl0aGVyIG9uIHRoZSBjbGllbnQgc2lkZSwgb3Igb24gdGhlIHNlcnZlciBzaWRlLFxuICogdG8gc2FuaXRpemUgdW5zYWZlIEhUTUwgYmVmb3JlIGJpbmRpbmcgdG8gdGhlIHZhbHVlIGFuZCByZW5kZXJpbmcgaXQgaW4gdGhlIGRvY3VtZW50LlxuICpcbiAqIEhvdyB3b3VsZCB5b3UgZW5zdXJlIHRoYXQgZXZlcnkgcGxhY2UgdGhhdCB1c2VkIHRoZXNlIHR5cGVzIG9mIGJpbmRpbmdzIHdhcyBib3VuZCB0byBhIHZhbHVlIHRoYXRcbiAqIHdhcyBzYW5pdGl6ZWQgYnkgeW91ciBsaWJyYXJ5IChvciByZXR1cm5lZCBhcyBzYWZlIGZvciByZW5kZXJpbmcgYnkgeW91ciBzZXJ2ZXI/KSAgSG93IGNhbiB5b3VcbiAqIGVuc3VyZSB0aGF0IHlvdSBkaWRuJ3QgYWNjaWRlbnRhbGx5IGRlbGV0ZSB0aGUgbGluZSB0aGF0IHNhbml0aXplZCB0aGUgdmFsdWUsIG9yIHJlbmFtZWQgc29tZVxuICogcHJvcGVydGllcy9maWVsZHMgYW5kIGZvcmdvdCB0byB1cGRhdGUgdGhlIGJpbmRpbmcgdG8gdGhlIHNhbml0aXplZCB2YWx1ZT9cbiAqXG4gKiBUbyBiZSBzZWN1cmUgYnkgZGVmYXVsdCwgQW5ndWxhckpTIG1ha2VzIHN1cmUgYmluZGluZ3MgZ28gdGhyb3VnaCB0aGF0IHNhbml0aXphdGlvbiwgb3JcbiAqIGFueSBzaW1pbGFyIHZhbGlkYXRpb24gcHJvY2VzcywgdW5sZXNzIHRoZXJlJ3MgYSBnb29kIHJlYXNvbiB0byB0cnVzdCB0aGUgZ2l2ZW4gdmFsdWUgaW4gdGhpc1xuICogY29udGV4dC4gIFRoYXQgdHJ1c3QgaXMgZm9ybWFsaXplZCB3aXRoIGEgZnVuY3Rpb24gY2FsbC4gVGhpcyBtZWFucyB0aGF0IGFzIGEgZGV2ZWxvcGVyLCB5b3VcbiAqIGNhbiBhc3N1bWUgYWxsIHVudHJ1c3RlZCBiaW5kaW5ncyBhcmUgc2FmZS4gVGhlbiwgdG8gYXVkaXQgeW91ciBjb2RlIGZvciBiaW5kaW5nIHNlY3VyaXR5IGlzc3VlcyxcbiAqIHlvdSBqdXN0IG5lZWQgdG8gZW5zdXJlIHRoZSB2YWx1ZXMgeW91IG1hcmsgYXMgdHJ1c3RlZCBpbmRlZWQgYXJlIHNhZmUgLSBiZWNhdXNlIHRoZXkgd2VyZVxuICogcmVjZWl2ZWQgZnJvbSB5b3VyIHNlcnZlciwgc2FuaXRpemVkIGJ5IHlvdXIgbGlicmFyeSwgZXRjLiBZb3UgY2FuIG9yZ2FuaXplIHlvdXIgY29kZWJhc2UgdG9cbiAqIGhlbHAgd2l0aCB0aGlzIC0gcGVyaGFwcyBhbGxvd2luZyBvbmx5IHRoZSBmaWxlcyBpbiBhIHNwZWNpZmljIGRpcmVjdG9yeSB0byBkbyB0aGlzLlxuICogRW5zdXJpbmcgdGhhdCB0aGUgaW50ZXJuYWwgQVBJIGV4cG9zZWQgYnkgdGhhdCBjb2RlIGRvZXNuJ3QgbWFya3VwIGFyYml0cmFyeSB2YWx1ZXMgYXMgc2FmZSB0aGVuXG4gKiBiZWNvbWVzIGEgbW9yZSBtYW5hZ2VhYmxlIHRhc2suXG4gKlxuICogSW4gdGhlIGNhc2Ugb2YgQW5ndWxhckpTJyBTQ0Ugc2VydmljZSwgb25lIHVzZXMge0BsaW5rIG5nLiRzY2UjdHJ1c3RBcyAkc2NlLnRydXN0QXN9XG4gKiAoYW5kIHNob3J0aGFuZCBtZXRob2RzIHN1Y2ggYXMge0BsaW5rIG5nLiRzY2UjdHJ1c3RBc0h0bWwgJHNjZS50cnVzdEFzSHRtbH0sIGV0Yy4pIHRvXG4gKiBidWlsZCB0aGUgdHJ1c3RlZCB2ZXJzaW9ucyBvZiB5b3VyIHZhbHVlcy5cbiAqXG4gKiAjIyBIb3cgZG9lcyBpdCB3b3JrP1xuICpcbiAqIEluIHByaXZpbGVnZWQgY29udGV4dHMsIGRpcmVjdGl2ZXMgYW5kIGNvZGUgd2lsbCBiaW5kIHRvIHRoZSByZXN1bHQgb2Yge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZFxuICogJHNjZS5nZXRUcnVzdGVkKGNvbnRleHQsIHZhbHVlKX0gcmF0aGVyIHRoYW4gdG8gdGhlIHZhbHVlIGRpcmVjdGx5LiAgVGhpbmsgb2YgdGhpcyBmdW5jdGlvbiBhc1xuICogYSB3YXkgdG8gZW5mb3JjZSB0aGUgcmVxdWlyZWQgc2VjdXJpdHkgY29udGV4dCBpbiB5b3VyIGRhdGEgc2luay4gRGlyZWN0aXZlcyB1c2Uge0BsaW5rXG4gKiBuZy4kc2NlI3BhcnNlQXMgJHNjZS5wYXJzZUFzfSByYXRoZXIgdGhhbiBgJHBhcnNlYCB0byB3YXRjaCBhdHRyaWJ1dGUgYmluZGluZ3MsIHdoaWNoIHBlcmZvcm1zXG4gKiB0aGUge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWR9IGJlaGluZCB0aGUgc2NlbmVzIG9uIG5vbi1jb25zdGFudCBsaXRlcmFscy4gQWxzbyxcbiAqIHdoZW4gYmluZGluZyB3aXRob3V0IGRpcmVjdGl2ZXMsIEFuZ3VsYXJKUyB3aWxsIHVuZGVyc3RhbmQgdGhlIGNvbnRleHQgb2YgeW91ciBiaW5kaW5nc1xuICogYXV0b21hdGljYWxseS5cbiAqXG4gKiBBcyBhbiBleGFtcGxlLCB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQmluZEh0bWwgbmdCaW5kSHRtbH0gdXNlcyB7QGxpbmtcbiAqIG5nLiRzY2UjcGFyc2VBc0h0bWwgJHNjZS5wYXJzZUFzSHRtbChiaW5kaW5nIGV4cHJlc3Npb24pfS4gIEhlcmUncyB0aGUgYWN0dWFsIGNvZGUgKHNsaWdodGx5XG4gKiBzaW1wbGlmaWVkKTpcbiAqXG4gKiBgYGBcbiAqIHZhciBuZ0JpbmRIdG1sRGlyZWN0aXZlID0gWyckc2NlJywgZnVuY3Rpb24oJHNjZSkge1xuICogICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAqICAgICBzY29wZS4kd2F0Y2goJHNjZS5wYXJzZUFzSHRtbChhdHRyLm5nQmluZEh0bWwpLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICAgICAgZWxlbWVudC5odG1sKHZhbHVlIHx8ICcnKTtcbiAqICAgICB9KTtcbiAqICAgfTtcbiAqIH1dO1xuICogYGBgXG4gKlxuICogIyMgSW1wYWN0IG9uIGxvYWRpbmcgdGVtcGxhdGVzXG4gKlxuICogVGhpcyBhcHBsaWVzIGJvdGggdG8gdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdJbmNsdWRlIGBuZy1pbmNsdWRlYH0gZGlyZWN0aXZlIGFzIHdlbGwgYXNcbiAqIGB0ZW1wbGF0ZVVybGAncyBzcGVjaWZpZWQgYnkge0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS5cbiAqXG4gKiBCeSBkZWZhdWx0LCBBbmd1bGFyIG9ubHkgbG9hZHMgdGVtcGxhdGVzIGZyb20gdGhlIHNhbWUgZG9tYWluIGFuZCBwcm90b2NvbCBhcyB0aGUgYXBwbGljYXRpb25cbiAqIGRvY3VtZW50LiAgVGhpcyBpcyBkb25lIGJ5IGNhbGxpbmcge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZFJlc291cmNlVXJsXG4gKiAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybH0gb24gdGhlIHRlbXBsYXRlIFVSTC4gIFRvIGxvYWQgdGVtcGxhdGVzIGZyb20gb3RoZXIgZG9tYWlucyBhbmQvb3JcbiAqIHByb3RvY29scywgeW91IG1heSBlaXRoZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdFxuICogdGhlbX0gb3Ige0BsaW5rIG5nLiRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsIHdyYXAgaXR9IGludG8gYSB0cnVzdGVkIHZhbHVlLlxuICpcbiAqICpQbGVhc2Ugbm90ZSo6XG4gKiBUaGUgYnJvd3NlcidzXG4gKiBbU2FtZSBPcmlnaW4gUG9saWN5XShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Jyb3dzZXJzZWMvd2lraS9QYXJ0MiNTYW1lLW9yaWdpbl9wb2xpY3lfZm9yX1hNTEh0dHBSZXF1ZXN0KVxuICogYW5kIFtDcm9zcy1PcmlnaW4gUmVzb3VyY2UgU2hhcmluZyAoQ09SUyldKGh0dHA6Ly93d3cudzMub3JnL1RSL2NvcnMvKVxuICogcG9saWN5IGFwcGx5IGluIGFkZGl0aW9uIHRvIHRoaXMgYW5kIG1heSBmdXJ0aGVyIHJlc3RyaWN0IHdoZXRoZXIgdGhlIHRlbXBsYXRlIGlzIHN1Y2Nlc3NmdWxseVxuICogbG9hZGVkLiAgVGhpcyBtZWFucyB0aGF0IHdpdGhvdXQgdGhlIHJpZ2h0IENPUlMgcG9saWN5LCBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIGEgZGlmZmVyZW50IGRvbWFpblxuICogd29uJ3Qgd29yayBvbiBhbGwgYnJvd3NlcnMuICBBbHNvLCBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIGBmaWxlOi8vYCBVUkwgZG9lcyBub3Qgd29yayBvbiBzb21lXG4gKiBicm93c2Vycy5cbiAqXG4gKiAjIyBUaGlzIGZlZWxzIGxpa2UgdG9vIG11Y2ggb3ZlcmhlYWRcbiAqXG4gKiBJdCdzIGltcG9ydGFudCB0byByZW1lbWJlciB0aGF0IFNDRSBvbmx5IGFwcGxpZXMgdG8gaW50ZXJwb2xhdGlvbiBleHByZXNzaW9ucy5cbiAqXG4gKiBJZiB5b3VyIGV4cHJlc3Npb25zIGFyZSBjb25zdGFudCBsaXRlcmFscywgdGhleSdyZSBhdXRvbWF0aWNhbGx5IHRydXN0ZWQgYW5kIHlvdSBkb24ndCBuZWVkIHRvXG4gKiBjYWxsIGAkc2NlLnRydXN0QXNgIG9uIHRoZW0gKGUuZy5cbiAqIGA8ZGl2IG5nLWJpbmQtaHRtbD1cIic8Yj5pbXBsaWNpdGx5IHRydXN0ZWQ8L2I+J1wiPjwvZGl2PmApIGp1c3Qgd29ya3MuIFRoZSBgJHNjZURlbGVnYXRlYCB3aWxsXG4gKiBhbHNvIHVzZSB0aGUgYCRzYW5pdGl6ZWAgc2VydmljZSBpZiBpdCBpcyBhdmFpbGFibGUgd2hlbiBiaW5kaW5nIHVudHJ1c3RlZCB2YWx1ZXMgdG9cbiAqIGAkc2NlLkhUTUxgIGNvbnRleHQuIEFuZ3VsYXJKUyBwcm92aWRlcyBhbiBpbXBsZW1lbnRhdGlvbiBpbiBgYW5ndWxhci1zYW5pdGl6ZS5qc2AsIGFuZCBpZiB5b3VcbiAqIHdpc2ggdG8gdXNlIGl0LCB5b3Ugd2lsbCBhbHNvIG5lZWQgdG8gZGVwZW5kIG9uIHRoZSB7QGxpbmsgbmdTYW5pdGl6ZSBgbmdTYW5pdGl6ZWB9IG1vZHVsZSBpblxuICogeW91ciBhcHBsaWNhdGlvbi5cbiAqXG4gKiBUaGUgaW5jbHVkZWQge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSAkc2NlRGVsZWdhdGV9IGNvbWVzIHdpdGggc2FuZSBkZWZhdWx0cyB0byBhbGxvdyB5b3UgdG8gbG9hZFxuICogdGVtcGxhdGVzIGluIGBuZy1pbmNsdWRlYCBmcm9tIHlvdXIgYXBwbGljYXRpb24ncyBkb21haW4gd2l0aG91dCBoYXZpbmcgdG8gZXZlbiBrbm93IGFib3V0IFNDRS5cbiAqIEl0IGJsb2NrcyBsb2FkaW5nIHRlbXBsYXRlcyBmcm9tIG90aGVyIGRvbWFpbnMgb3IgbG9hZGluZyB0ZW1wbGF0ZXMgb3ZlciBodHRwIGZyb20gYW4gaHR0cHNcbiAqIHNlcnZlZCBkb2N1bWVudC4gIFlvdSBjYW4gY2hhbmdlIHRoZXNlIGJ5IHNldHRpbmcgeW91ciBvd24gY3VzdG9tIHtAbGlua1xuICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxXaGl0ZWxpc3Qgd2hpdGVsaXN0c30gYW5kIHtAbGlua1xuICogbmcuJHNjZURlbGVnYXRlUHJvdmlkZXIjcmVzb3VyY2VVcmxCbGFja2xpc3QgYmxhY2tsaXN0c30gZm9yIG1hdGNoaW5nIHN1Y2ggVVJMcy5cbiAqXG4gKiBUaGlzIHNpZ25pZmljYW50bHkgcmVkdWNlcyB0aGUgb3ZlcmhlYWQuICBJdCBpcyBmYXIgZWFzaWVyIHRvIHBheSB0aGUgc21hbGwgb3ZlcmhlYWQgYW5kIGhhdmUgYW5cbiAqIGFwcGxpY2F0aW9uIHRoYXQncyBzZWN1cmUgYW5kIGNhbiBiZSBhdWRpdGVkIHRvIHZlcmlmeSB0aGF0IHdpdGggbXVjaCBtb3JlIGVhc2UgdGhhbiBib2x0aW5nXG4gKiBzZWN1cml0eSBvbnRvIGFuIGFwcGxpY2F0aW9uIGxhdGVyLlxuICpcbiAqIDxhIG5hbWU9XCJjb250ZXh0c1wiPjwvYT5cbiAqICMjIFdoYXQgdHJ1c3RlZCBjb250ZXh0IHR5cGVzIGFyZSBzdXBwb3J0ZWQ/XG4gKlxuICogfCBDb250ZXh0ICAgICAgICAgICAgIHwgTm90ZXMgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tfFxuICogfCBgJHNjZS5IVE1MYCAgICAgICAgIHwgRm9yIEhUTUwgdGhhdCdzIHNhZmUgdG8gc291cmNlIGludG8gdGhlIGFwcGxpY2F0aW9uLiAgVGhlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdCaW5kSHRtbCBuZ0JpbmRIdG1sfSBkaXJlY3RpdmUgdXNlcyB0aGlzIGNvbnRleHQgZm9yIGJpbmRpbmdzLiBJZiBhbiB1bnNhZmUgdmFsdWUgaXMgZW5jb3VudGVyZWQsIGFuZCB0aGUge0BsaW5rIG5nU2FuaXRpemUuJHNhbml0aXplICRzYW5pdGl6ZX0gc2VydmljZSBpcyBhdmFpbGFibGUgKGltcGxlbWVudGVkIGJ5IHRoZSB7QGxpbmsgbmdTYW5pdGl6ZSBuZ1Nhbml0aXplfSBtb2R1bGUpIHRoaXMgd2lsbCBzYW5pdGl6ZSB0aGUgdmFsdWUgaW5zdGVhZCBvZiB0aHJvd2luZyBhbiBlcnJvci4gfFxuICogfCBgJHNjZS5DU1NgICAgICAgICAgIHwgRm9yIENTUyB0aGF0J3Mgc2FmZSB0byBzb3VyY2UgaW50byB0aGUgYXBwbGljYXRpb24uICBDdXJyZW50bHksIG5vIGJpbmRpbmdzIHJlcXVpcmUgdGhpcyBjb250ZXh0LiBGZWVsIGZyZWUgdG8gdXNlIGl0IGluIHlvdXIgb3duIGRpcmVjdGl2ZXMuIHxcbiAqIHwgYCRzY2UuVVJMYCAgICAgICAgICB8IEZvciBVUkxzIHRoYXQgYXJlIHNhZmUgdG8gZm9sbG93IGFzIGxpbmtzLiAgQ3VycmVudGx5IHVudXNlZCAoYDxhIGhyZWY9YCwgYDxpbWcgc3JjPWAsIGFuZCBzb21lIG90aGVycyBzYW5pdGl6ZSB0aGVpciB1cmxzIGFuZCBkb24ndCBjb25zdGl0dXRlIGFuIFNDRSBjb250ZXh0LikgfFxuICogfCBgJHNjZS5SRVNPVVJDRV9VUkxgIHwgRm9yIFVSTHMgdGhhdCBhcmUgbm90IG9ubHkgc2FmZSB0byBmb2xsb3cgYXMgbGlua3MsIGJ1dCB3aG9zZSBjb250ZW50cyBhcmUgYWxzbyBzYWZlIHRvIGluY2x1ZGUgaW4geW91ciBhcHBsaWNhdGlvbi4gIEV4YW1wbGVzIGluY2x1ZGUgYG5nLWluY2x1ZGVgLCBgc3JjYCAvIGBuZ1NyY2AgYmluZGluZ3MgZm9yIHRhZ3Mgb3RoZXIgdGhhbiBgSU1HYCwgYFZJREVPYCwgYEFVRElPYCwgYFNPVVJDRWAsIGFuZCBgVFJBQ0tgIChlLmcuIGBJRlJBTUVgLCBgT0JKRUNUYCwgZXRjLikgIDxicj48YnI+Tm90ZSB0aGF0IGAkc2NlLlJFU09VUkNFX1VSTGAgbWFrZXMgYSBzdHJvbmdlciBzdGF0ZW1lbnQgYWJvdXQgdGhlIFVSTCB0aGFuIGAkc2NlLlVSTGAgZG9lcyAoaXQncyBub3QganVzdCB0aGUgVVJMIHRoYXQgbWF0dGVycywgYnV0IGFsc28gd2hhdCBpcyBhdCB0aGUgZW5kIG9mIGl0KSwgYW5kIHRoZXJlZm9yZSBjb250ZXh0cyByZXF1aXJpbmcgdmFsdWVzIHRydXN0ZWQgZm9yIGAkc2NlLlJFU09VUkNFX1VSTGAgY2FuIGJlIHVzZWQgYW55d2hlcmUgdGhhdCB2YWx1ZXMgdHJ1c3RlZCBmb3IgYCRzY2UuVVJMYCBhcmUgcmVxdWlyZWQuIHxcbiAqIHwgYCRzY2UuSlNgICAgICAgICAgICB8IEZvciBKYXZhU2NyaXB0IHRoYXQgaXMgc2FmZSB0byBleGVjdXRlIGluIHlvdXIgYXBwbGljYXRpb24ncyBjb250ZXh0LiAgQ3VycmVudGx5LCBubyBiaW5kaW5ncyByZXF1aXJlIHRoaXMgY29udGV4dC4gIEZlZWwgZnJlZSB0byB1c2UgaXQgaW4geW91ciBvd24gZGlyZWN0aXZlcy4gfFxuICpcbiAqXG4gKiBCZSBhd2FyZSB0aGF0IGBhW2hyZWZdYCBhbmQgYGltZ1tzcmNdYCBhdXRvbWF0aWNhbGx5IHNhbml0aXplIHRoZWlyIFVSTHMgYW5kIGRvIG5vdCBwYXNzIHRoZW1cbiAqIHRocm91Z2gge0BsaW5rIG5nLiRzY2UjZ2V0VHJ1c3RlZCAkc2NlLmdldFRydXN0ZWR9LiBUaGVyZSdzIG5vIENTUy0sIFVSTC0sIG9yIEpTLWNvbnRleHQgYmluZGluZ3NcbiAqIGluIEFuZ3VsYXJKUyBjdXJyZW50bHksIHNvIHRoZWlyIGNvcnJlc3BvbmRpbmcgYCRzY2UudHJ1c3RBc2AgZnVuY3Rpb25zIGFyZW4ndCB1c2VmdWwgeWV0LiBUaGlzXG4gKiBtaWdodCBldm9sdmUuXG4gKlxuICogIyMgRm9ybWF0IG9mIGl0ZW1zIGluIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciNyZXNvdXJjZVVybFdoaXRlbGlzdCByZXNvdXJjZVVybFdoaXRlbGlzdH0ve0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsQmxhY2tsaXN0IEJsYWNrbGlzdH0gPGEgbmFtZT1cInJlc291cmNlVXJsUGF0dGVybkl0ZW1cIj48L2E+XG4gKlxuICogIEVhY2ggZWxlbWVudCBpbiB0aGVzZSBhcnJheXMgbXVzdCBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZzpcbiAqXG4gKiAgLSAqKidzZWxmJyoqXG4gKiAgICAtIFRoZSBzcGVjaWFsICoqc3RyaW5nKiosIGAnc2VsZidgLCBjYW4gYmUgdXNlZCB0byBtYXRjaCBhZ2FpbnN0IGFsbCBVUkxzIG9mIHRoZSAqKnNhbWVcbiAqICAgICAgZG9tYWluKiogYXMgdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50IHVzaW5nIHRoZSAqKnNhbWUgcHJvdG9jb2wqKi5cbiAqICAtICoqU3RyaW5nKiogKGV4Y2VwdCB0aGUgc3BlY2lhbCB2YWx1ZSBgJ3NlbGYnYClcbiAqICAgIC0gVGhlIHN0cmluZyBpcyBtYXRjaGVkIGFnYWluc3QgdGhlIGZ1bGwgKm5vcm1hbGl6ZWQgLyBhYnNvbHV0ZSBVUkwqIG9mIHRoZSByZXNvdXJjZVxuICogICAgICBiZWluZyB0ZXN0ZWQgKHN1YnN0cmluZyBtYXRjaGVzIGFyZSBub3QgZ29vZCBlbm91Z2guKVxuICogICAgLSBUaGVyZSBhcmUgZXhhY3RseSAqKnR3byB3aWxkY2FyZCBzZXF1ZW5jZXMqKiAtIGAqYCBhbmQgYCoqYC4gIEFsbCBvdGhlciBjaGFyYWN0ZXJzXG4gKiAgICAgIG1hdGNoIHRoZW1zZWx2ZXMuXG4gKiAgICAtIGAqYDogbWF0Y2hlcyB6ZXJvIG9yIG1vcmUgb2NjdXJyZW5jZXMgb2YgYW55IGNoYXJhY3RlciBvdGhlciB0aGFuIG9uZSBvZiB0aGUgZm9sbG93aW5nIDZcbiAqICAgICAgY2hhcmFjdGVyczogJ2A6YCcsICdgL2AnLCAnYC5gJywgJ2A/YCcsICdgJmAnIGFuZCAnYDtgJy4gIEl0J3MgYSB1c2VmdWwgd2lsZGNhcmQgZm9yIHVzZVxuICogICAgICBpbiBhIHdoaXRlbGlzdC5cbiAqICAgIC0gYCoqYDogbWF0Y2hlcyB6ZXJvIG9yIG1vcmUgb2NjdXJyZW5jZXMgb2YgKmFueSogY2hhcmFjdGVyLiAgQXMgc3VjaCwgaXQncyBub3RcbiAqICAgICAgYXBwcm9wcmlhdGUgZm9yIHVzZSBpbiBhIHNjaGVtZSwgZG9tYWluLCBldGMuIGFzIGl0IHdvdWxkIG1hdGNoIHRvbyBtdWNoLiAgKGUuZy5cbiAqICAgICAgaHR0cDovLyoqLmV4YW1wbGUuY29tLyB3b3VsZCBtYXRjaCBodHRwOi8vZXZpbC5jb20vP2lnbm9yZT0uZXhhbXBsZS5jb20vIGFuZCB0aGF0IG1pZ2h0XG4gKiAgICAgIG5vdCBoYXZlIGJlZW4gdGhlIGludGVudGlvbi4pICBJdHMgdXNhZ2UgYXQgdGhlIHZlcnkgZW5kIG9mIHRoZSBwYXRoIGlzIG9rLiAgKGUuZy5cbiAqICAgICAgaHR0cDovL2Zvby5leGFtcGxlLmNvbS90ZW1wbGF0ZXMvKiopLlxuICogIC0gKipSZWdFeHAqKiAoKnNlZSBjYXZlYXQgYmVsb3cqKVxuICogICAgLSAqQ2F2ZWF0KjogIFdoaWxlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXJlIHBvd2VyZnVsIGFuZCBvZmZlciBncmVhdCBmbGV4aWJpbGl0eSwgIHRoZWlyIHN5bnRheFxuICogICAgICAoYW5kIGFsbCB0aGUgaW5ldml0YWJsZSBlc2NhcGluZykgbWFrZXMgdGhlbSAqaGFyZGVyIHRvIG1haW50YWluKi4gIEl0J3MgZWFzeSB0b1xuICogICAgICBhY2NpZGVudGFsbHkgaW50cm9kdWNlIGEgYnVnIHdoZW4gb25lIHVwZGF0ZXMgYSBjb21wbGV4IGV4cHJlc3Npb24gKGltaG8sIGFsbCByZWdleGVzIHNob3VsZFxuICogICAgICBoYXZlIGdvb2QgdGVzdCBjb3ZlcmFnZSkuICBGb3IgaW5zdGFuY2UsIHRoZSB1c2Ugb2YgYC5gIGluIHRoZSByZWdleCBpcyBjb3JyZWN0IG9ubHkgaW4gYVxuICogICAgICBzbWFsbCBudW1iZXIgb2YgY2FzZXMuICBBIGAuYCBjaGFyYWN0ZXIgaW4gdGhlIHJlZ2V4IHVzZWQgd2hlbiBtYXRjaGluZyB0aGUgc2NoZW1lIG9yIGFcbiAqICAgICAgc3ViZG9tYWluIGNvdWxkIGJlIG1hdGNoZWQgYWdhaW5zdCBhIGA6YCBvciBsaXRlcmFsIGAuYCB0aGF0IHdhcyBsaWtlbHkgbm90IGludGVuZGVkLiAgIEl0XG4gKiAgICAgIGlzIGhpZ2hseSByZWNvbW1lbmRlZCB0byB1c2UgdGhlIHN0cmluZyBwYXR0ZXJucyBhbmQgb25seSBmYWxsIGJhY2sgdG8gcmVndWxhciBleHByZXNzaW9uc1xuICogICAgICBhcyBhIGxhc3QgcmVzb3J0LlxuICogICAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIG11c3QgYmUgYW4gaW5zdGFuY2Ugb2YgUmVnRXhwIChpLmUuIG5vdCBhIHN0cmluZy4pICBJdCBpc1xuICogICAgICBtYXRjaGVkIGFnYWluc3QgdGhlICoqZW50aXJlKiogKm5vcm1hbGl6ZWQgLyBhYnNvbHV0ZSBVUkwqIG9mIHRoZSByZXNvdXJjZSBiZWluZyB0ZXN0ZWRcbiAqICAgICAgKGV2ZW4gd2hlbiB0aGUgUmVnRXhwIGRpZCBub3QgaGF2ZSB0aGUgYF5gIGFuZCBgJGAgY29kZXMuKSAgSW4gYWRkaXRpb24sIGFueSBmbGFnc1xuICogICAgICBwcmVzZW50IG9uIHRoZSBSZWdFeHAgKHN1Y2ggYXMgbXVsdGlsaW5lLCBnbG9iYWwsIGlnbm9yZUNhc2UpIGFyZSBpZ25vcmVkLlxuICogICAgLSBJZiB5b3UgYXJlIGdlbmVyYXRpbmcgeW91ciBKYXZhU2NyaXB0IGZyb20gc29tZSBvdGhlciB0ZW1wbGF0aW5nIGVuZ2luZSAobm90XG4gKiAgICAgIHJlY29tbWVuZGVkLCBlLmcuIGluIGlzc3VlIFsjNDAwNl0oaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvNDAwNikpLFxuICogICAgICByZW1lbWJlciB0byBlc2NhcGUgeW91ciByZWd1bGFyIGV4cHJlc3Npb24gKGFuZCBiZSBhd2FyZSB0aGF0IHlvdSBtaWdodCBuZWVkIG1vcmUgdGhhblxuICogICAgICBvbmUgbGV2ZWwgb2YgZXNjYXBpbmcgZGVwZW5kaW5nIG9uIHlvdXIgdGVtcGxhdGluZyBlbmdpbmUgYW5kIHRoZSB3YXkgeW91IGludGVycG9sYXRlZFxuICogICAgICB0aGUgdmFsdWUuKSAgRG8gbWFrZSB1c2Ugb2YgeW91ciBwbGF0Zm9ybSdzIGVzY2FwaW5nIG1lY2hhbmlzbSBhcyBpdCBtaWdodCBiZSBnb29kXG4gKiAgICAgIGVub3VnaCBiZWZvcmUgY29kaW5nIHlvdXIgb3duLiAgRS5nLiBSdWJ5IGhhc1xuICogICAgICBbUmVnZXhwLmVzY2FwZShzdHIpXShodHRwOi8vd3d3LnJ1YnktZG9jLm9yZy9jb3JlLTIuMC4wL1JlZ2V4cC5odG1sI21ldGhvZC1jLWVzY2FwZSlcbiAqICAgICAgYW5kIFB5dGhvbiBoYXMgW3JlLmVzY2FwZV0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3JlLmh0bWwjcmUuZXNjYXBlKS5cbiAqICAgICAgSmF2YXNjcmlwdCBsYWNrcyBhIHNpbWlsYXIgYnVpbHQgaW4gZnVuY3Rpb24gZm9yIGVzY2FwaW5nLiAgVGFrZSBhIGxvb2sgYXQgR29vZ2xlXG4gKiAgICAgIENsb3N1cmUgbGlicmFyeSdzIFtnb29nLnN0cmluZy5yZWdFeHBFc2NhcGUocyldKFxuICogICAgICBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19zdHJpbmdfc3RyaW5nLmpzLnNvdXJjZS5odG1sI2xpbmU5NjIpLlxuICpcbiAqIFJlZmVyIHtAbGluayBuZy4kc2NlRGVsZWdhdGVQcm92aWRlciAkc2NlRGVsZWdhdGVQcm92aWRlcn0gZm9yIGFuIGV4YW1wbGUuXG4gKlxuICogIyMgU2hvdyBtZSBhbiBleGFtcGxlIHVzaW5nIFNDRS5cbiAqXG4gKiA8ZXhhbXBsZSBtb2R1bGU9XCJteVNjZUFwcFwiIGRlcHM9XCJhbmd1bGFyLXNhbml0aXplLmpzXCIgbmFtZT1cInNjZS1zZXJ2aWNlXCI+XG4gKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJBcHBDb250cm9sbGVyIGFzIG15Q3RybFwiPlxuICogICAgIDxpIG5nLWJpbmQtaHRtbD1cIm15Q3RybC5leHBsaWNpdGx5VHJ1c3RlZEh0bWxcIiBpZD1cImV4cGxpY2l0bHlUcnVzdGVkSHRtbFwiPjwvaT48YnI+PGJyPlxuICogICAgIDxiPlVzZXIgY29tbWVudHM8L2I+PGJyPlxuICogICAgIEJ5IGRlZmF1bHQsIEhUTUwgdGhhdCBpc24ndCBleHBsaWNpdGx5IHRydXN0ZWQgKGUuZy4gQWxpY2UncyBjb21tZW50KSBpcyBzYW5pdGl6ZWQgd2hlblxuICogICAgICRzYW5pdGl6ZSBpcyBhdmFpbGFibGUuICBJZiAkc2FuaXRpemUgaXNuJ3QgYXZhaWxhYmxlLCB0aGlzIHJlc3VsdHMgaW4gYW4gZXJyb3IgaW5zdGVhZCBvZiBhblxuICogICAgIGV4cGxvaXQuXG4gKiAgICAgPGRpdiBjbGFzcz1cIndlbGxcIj5cbiAqICAgICAgIDxkaXYgbmctcmVwZWF0PVwidXNlckNvbW1lbnQgaW4gbXlDdHJsLnVzZXJDb21tZW50c1wiPlxuICogICAgICAgICA8Yj57e3VzZXJDb21tZW50Lm5hbWV9fTwvYj46XG4gKiAgICAgICAgIDxzcGFuIG5nLWJpbmQtaHRtbD1cInVzZXJDb21tZW50Lmh0bWxDb21tZW50XCIgY2xhc3M9XCJodG1sQ29tbWVudFwiPjwvc3Bhbj5cbiAqICAgICAgICAgPGJyPlxuICogICAgICAgPC9kaXY+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZGl2PlxuICogPC9maWxlPlxuICpcbiAqIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAqICAgYW5ndWxhci5tb2R1bGUoJ215U2NlQXBwJywgWyduZ1Nhbml0aXplJ10pXG4gKiAgICAgLmNvbnRyb2xsZXIoJ0FwcENvbnRyb2xsZXInLCBbJyRodHRwJywgJyR0ZW1wbGF0ZUNhY2hlJywgJyRzY2UnLFxuICogICAgICAgZnVuY3Rpb24gQXBwQ29udHJvbGxlcigkaHR0cCwgJHRlbXBsYXRlQ2FjaGUsICRzY2UpIHtcbiAqICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICogICAgICAgICAkaHR0cC5nZXQoJ3Rlc3RfZGF0YS5qc29uJywge2NhY2hlOiAkdGVtcGxhdGVDYWNoZX0pLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAqICAgICAgICAgICBzZWxmLnVzZXJDb21tZW50cyA9IHJlc3BvbnNlLmRhdGE7XG4gKiAgICAgICAgIH0pO1xuICogICAgICAgICBzZWxmLmV4cGxpY2l0bHlUcnVzdGVkSHRtbCA9ICRzY2UudHJ1c3RBc0h0bWwoXG4gKiAgICAgICAgICAgICAnPHNwYW4gb25tb3VzZW92ZXI9XCJ0aGlzLnRleHRDb250ZW50PSZxdW90O0V4cGxpY2l0bHkgdHJ1c3RlZCBIVE1MIGJ5cGFzc2VzICcgK1xuICogICAgICAgICAgICAgJ3Nhbml0aXphdGlvbi4mcXVvdDtcIj5Ib3ZlciBvdmVyIHRoaXMgdGV4dC48L3NwYW4+Jyk7XG4gKiAgICAgICB9XSk7XG4gKiA8L2ZpbGU+XG4gKlxuICogPGZpbGUgbmFtZT1cInRlc3RfZGF0YS5qc29uXCI+XG4gKiBbXG4gKiAgIHsgXCJuYW1lXCI6IFwiQWxpY2VcIixcbiAqICAgICBcImh0bWxDb21tZW50XCI6XG4gKiAgICAgICAgIFwiPHNwYW4gb25tb3VzZW92ZXI9J3RoaXMudGV4dENvbnRlbnQ9XFxcIlBXTjNEIVxcXCInPklzIDxpPmFueW9uZTwvaT4gcmVhZGluZyB0aGlzPzwvc3Bhbj5cIlxuICogICB9LFxuICogICB7IFwibmFtZVwiOiBcIkJvYlwiLFxuICogICAgIFwiaHRtbENvbW1lbnRcIjogXCI8aT5ZZXMhPC9pPiAgQW0gSSB0aGUgb25seSBvdGhlciBvbmU/XCJcbiAqICAgfVxuICogXVxuICogPC9maWxlPlxuICpcbiAqIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgZGVzY3JpYmUoJ1NDRSBkb2MgZGVtbycsIGZ1bmN0aW9uKCkge1xuICogICAgIGl0KCdzaG91bGQgc2FuaXRpemUgdW50cnVzdGVkIHZhbHVlcycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KGVsZW1lbnQuYWxsKGJ5LmNzcygnLmh0bWxDb21tZW50JykpLmZpcnN0KCkuZ2V0QXR0cmlidXRlKCdpbm5lckhUTUwnKSlcbiAqICAgICAgICAgICAudG9CZSgnPHNwYW4+SXMgPGk+YW55b25lPC9pPiByZWFkaW5nIHRoaXM/PC9zcGFuPicpO1xuICogICAgIH0pO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIE5PVCBzYW5pdGl6ZSBleHBsaWNpdGx5IHRydXN0ZWQgdmFsdWVzJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZXhwbGljaXRseVRydXN0ZWRIdG1sJykpLmdldEF0dHJpYnV0ZSgnaW5uZXJIVE1MJykpLnRvQmUoXG4gKiAgICAgICAgICAgJzxzcGFuIG9ubW91c2VvdmVyPVwidGhpcy50ZXh0Q29udGVudD0mcXVvdDtFeHBsaWNpdGx5IHRydXN0ZWQgSFRNTCBieXBhc3NlcyAnICtcbiAqICAgICAgICAgICAnc2FuaXRpemF0aW9uLiZxdW90O1wiPkhvdmVyIG92ZXIgdGhpcyB0ZXh0Ljwvc3Bhbj4nKTtcbiAqICAgICB9KTtcbiAqICAgfSk7XG4gKiA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICpcbiAqXG4gKiAjIyBDYW4gSSBkaXNhYmxlIFNDRSBjb21wbGV0ZWx5P1xuICpcbiAqIFllcywgeW91IGNhbi4gIEhvd2V2ZXIsIHRoaXMgaXMgc3Ryb25nbHkgZGlzY291cmFnZWQuICBTQ0UgZ2l2ZXMgeW91IGEgbG90IG9mIHNlY3VyaXR5IGJlbmVmaXRzXG4gKiBmb3IgbGl0dGxlIGNvZGluZyBvdmVyaGVhZC4gIEl0IHdpbGwgYmUgbXVjaCBoYXJkZXIgdG8gdGFrZSBhbiBTQ0UgZGlzYWJsZWQgYXBwbGljYXRpb24gYW5kXG4gKiBlaXRoZXIgc2VjdXJlIGl0IG9uIHlvdXIgb3duIG9yIGVuYWJsZSBTQ0UgYXQgYSBsYXRlciBzdGFnZS4gIEl0IG1pZ2h0IG1ha2Ugc2Vuc2UgdG8gZGlzYWJsZSBTQ0VcbiAqIGZvciBjYXNlcyB3aGVyZSB5b3UgaGF2ZSBhIGxvdCBvZiBleGlzdGluZyBjb2RlIHRoYXQgd2FzIHdyaXR0ZW4gYmVmb3JlIFNDRSB3YXMgaW50cm9kdWNlZCBhbmRcbiAqIHlvdSdyZSBtaWdyYXRpbmcgdGhlbSBhIG1vZHVsZSBhdCBhIHRpbWUuIEFsc28gZG8gbm90ZSB0aGF0IHRoaXMgaXMgYW4gYXBwLXdpZGUgc2V0dGluZywgc28gaWZcbiAqIHlvdSBhcmUgd3JpdGluZyBhIGxpYnJhcnksIHlvdSB3aWxsIGNhdXNlIHNlY3VyaXR5IGJ1Z3MgYXBwbGljYXRpb25zIHVzaW5nIGl0LlxuICpcbiAqIFRoYXQgc2FpZCwgaGVyZSdzIGhvdyB5b3UgY2FuIGNvbXBsZXRlbHkgZGlzYWJsZSBTQ0U6XG4gKlxuICogYGBgXG4gKiBhbmd1bGFyLm1vZHVsZSgnbXlBcHBXaXRoU2NlRGlzYWJsZWRteUFwcCcsIFtdKS5jb25maWcoZnVuY3Rpb24oJHNjZVByb3ZpZGVyKSB7XG4gKiAgIC8vIENvbXBsZXRlbHkgZGlzYWJsZSBTQ0UuICBGb3IgZGVtb25zdHJhdGlvbiBwdXJwb3NlcyBvbmx5IVxuICogICAvLyBEbyBub3QgdXNlIGluIG5ldyBwcm9qZWN0cyBvciBsaWJyYXJpZXMuXG4gKiAgICRzY2VQcm92aWRlci5lbmFibGVkKGZhbHNlKTtcbiAqIH0pO1xuICogYGBgXG4gKlxuICovXG5cbmZ1bmN0aW9uICRTY2VQcm92aWRlcigpIHtcbiAgdmFyIGVuYWJsZWQgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lICRzY2VQcm92aWRlciNlbmFibGVkXG4gICAqIEBraW5kIGZ1bmN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IHZhbHVlIElmIHByb3ZpZGVkLCB0aGVuIGVuYWJsZXMvZGlzYWJsZXMgU0NFIGFwcGxpY2F0aW9uLXdpZGUuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgU0NFIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIEVuYWJsZXMvZGlzYWJsZXMgU0NFIGFuZCByZXR1cm5zIHRoZSBjdXJyZW50IHZhbHVlLlxuICAgKi9cbiAgdGhpcy5lbmFibGVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgZW5hYmxlZCA9ICEhdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBlbmFibGVkO1xuICB9O1xuXG5cbiAgLyogRGVzaWduIG5vdGVzIG9uIHRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGZvciBTQ0UuXG4gICAqXG4gICAqIFRoZSBBUEkgY29udHJhY3QgZm9yIHRoZSBTQ0UgZGVsZWdhdGVcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBUaGUgU0NFIGRlbGVnYXRlIG9iamVjdCBtdXN0IHByb3ZpZGUgdGhlIGZvbGxvd2luZyAzIG1ldGhvZHM6XG4gICAqXG4gICAqIC0gdHJ1c3RBcyhjb250ZXh0RW51bSwgdmFsdWUpXG4gICAqICAgICBUaGlzIG1ldGhvZCBpcyB1c2VkIHRvIHRlbGwgdGhlIFNDRSBzZXJ2aWNlIHRoYXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIE9LIHRvIHVzZSBpbiB0aGVcbiAgICogICAgIGNvbnRleHRzIHNwZWNpZmllZCBieSBjb250ZXh0RW51bS4gIEl0IG11c3QgcmV0dXJuIGFuIG9iamVjdCB0aGF0IHdpbGwgYmUgYWNjZXB0ZWQgYnlcbiAgICogICAgIGdldFRydXN0ZWQoKSBmb3IgYSBjb21wYXRpYmxlIGNvbnRleHRFbnVtIGFuZCByZXR1cm4gdGhpcyB2YWx1ZS5cbiAgICpcbiAgICogLSB2YWx1ZU9mKHZhbHVlKVxuICAgKiAgICAgRm9yIHZhbHVlcyB0aGF0IHdlcmUgbm90IHByb2R1Y2VkIGJ5IHRydXN0QXMoKSwgcmV0dXJuIHRoZW0gYXMgaXMuICBGb3IgdmFsdWVzIHRoYXQgd2VyZVxuICAgKiAgICAgcHJvZHVjZWQgYnkgdHJ1c3RBcygpLCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgaW5wdXQgdmFsdWUgdG8gdHJ1c3RBcy4gIEJhc2ljYWxseSwgaWZcbiAgICogICAgIHRydXN0QXMgaXMgd3JhcHBpbmcgdGhlIGdpdmVuIHZhbHVlcyBpbnRvIHNvbWUgdHlwZSwgdGhpcyBvcGVyYXRpb24gdW53cmFwcyBpdCB3aGVuIGdpdmVuXG4gICAqICAgICBzdWNoIGEgdmFsdWUuXG4gICAqXG4gICAqIC0gZ2V0VHJ1c3RlZChjb250ZXh0RW51bSwgdmFsdWUpXG4gICAqICAgICBUaGlzIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gdGhlIGEgdmFsdWUgdGhhdCBpcyBzYWZlIHRvIHVzZSBpbiB0aGUgY29udGV4dCBzcGVjaWZpZWQgYnlcbiAgICogICAgIGNvbnRleHRFbnVtIG9yIHRocm93IGFuZCBleGNlcHRpb24gb3RoZXJ3aXNlLlxuICAgKlxuICAgKiBOT1RFOiBUaGlzIGNvbnRyYWN0IGRlbGliZXJhdGVseSBkb2VzIE5PVCBzdGF0ZSB0aGF0IHZhbHVlcyByZXR1cm5lZCBieSB0cnVzdEFzKCkgbXVzdCBiZVxuICAgKiBvcGFxdWUgb3Igd3JhcHBlZCBpbiBzb21lIGhvbGRlciBvYmplY3QuICBUaGF0IGhhcHBlbnMgdG8gYmUgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLiAgRm9yXG4gICAqIGluc3RhbmNlLCBhbiBpbXBsZW1lbnRhdGlvbiBjb3VsZCBtYWludGFpbiBhIHJlZ2lzdHJ5IG9mIGFsbCB0cnVzdGVkIG9iamVjdHMgYnkgY29udGV4dC4gIEluXG4gICAqIHN1Y2ggYSBjYXNlLCB0cnVzdEFzKCkgd291bGQgcmV0dXJuIHRoZSBzYW1lIG9iamVjdCB0aGF0IHdhcyBwYXNzZWQgaW4uICBnZXRUcnVzdGVkKCkgd291bGRcbiAgICogcmV0dXJuIHRoZSBzYW1lIG9iamVjdCBwYXNzZWQgaW4gaWYgaXQgd2FzIGZvdW5kIGluIHRoZSByZWdpc3RyeSB1bmRlciBhIGNvbXBhdGlibGUgY29udGV4dCBvclxuICAgKiB0aHJvdyBhbiBleGNlcHRpb24gb3RoZXJ3aXNlLiAgQW4gaW1wbGVtZW50YXRpb24gbWlnaHQgb25seSB3cmFwIHZhbHVlcyBzb21lIG9mIHRoZSB0aW1lIGJhc2VkXG4gICAqIG9uIHNvbWUgY3JpdGVyaWEuICBnZXRUcnVzdGVkKCkgbWlnaHQgcmV0dXJuIGEgdmFsdWUgYW5kIG5vdCB0aHJvdyBhbiBleGNlcHRpb24gZm9yIHNwZWNpYWxcbiAgICogY29uc3RhbnRzIG9yIG9iamVjdHMgZXZlbiBpZiBub3Qgd3JhcHBlZC4gIEFsbCBzdWNoIGltcGxlbWVudGF0aW9ucyBmdWxmaWxsIHRoaXMgY29udHJhY3QuXG4gICAqXG4gICAqXG4gICAqIEEgbm90ZSBvbiB0aGUgaW5oZXJpdGFuY2UgbW9kZWwgZm9yIFNDRSBjb250ZXh0c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogSSd2ZSB1c2VkIGluaGVyaXRhbmNlIGFuZCBtYWRlIFJFU09VUkNFX1VSTCB3cmFwcGVkIHR5cGVzIGEgc3VidHlwZSBvZiBVUkwgd3JhcHBlZCB0eXBlcy4gIFRoaXNcbiAgICogaXMgcHVyZWx5IGFuIGltcGxlbWVudGF0aW9uIGRldGFpbHMuXG4gICAqXG4gICAqIFRoZSBjb250cmFjdCBpcyBzaW1wbHkgdGhpczpcbiAgICpcbiAgICogICAgIGdldFRydXN0ZWQoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKSBzdWNjZWVkaW5nIGltcGxpZXMgdGhhdCBnZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlcbiAgICogICAgIHdpbGwgYWxzbyBzdWNjZWVkLlxuICAgKlxuICAgKiBJbmhlcml0YW5jZSBoYXBwZW5zIHRvIGNhcHR1cmUgdGhpcyBpbiBhIG5hdHVyYWwgd2F5LiBJbiBzb21lIGZ1dHVyZSwgd2UgbWF5IG5vdCB1c2VcbiAgICogaW5oZXJpdGFuY2UgYW55bW9yZS4gVGhhdCBpcyBPSyBiZWNhdXNlIG5vIGNvZGUgb3V0c2lkZSBvZiBzY2UuanMgYW5kIHNjZVNwZWNzLmpzIHdvdWxkIG5lZWQgdG9cbiAgICogYmUgYXdhcmUgb2YgdGhpcyBkZXRhaWwuXG4gICAqL1xuXG4gIHRoaXMuJGdldCA9IFsnJHBhcnNlJywgJyRzY2VEZWxlZ2F0ZScsIGZ1bmN0aW9uKFxuICAgICAgICAgICAgICAgICRwYXJzZSwgICAkc2NlRGVsZWdhdGUpIHtcbiAgICAvLyBTdXBwb3J0OiBJRSA5LTExIG9ubHlcbiAgICAvLyBQcmVyZXE6IEVuc3VyZSB0aGF0IHdlJ3JlIG5vdCBydW5uaW5nIGluIElFPDExIHF1aXJrcyBtb2RlLiAgSW4gdGhhdCBtb2RlLCBJRSA8IDExIGFsbG93XG4gICAgLy8gdGhlIFwiZXhwcmVzc2lvbihqYXZhc2NyaXB0IGV4cHJlc3Npb24pXCIgc3ludGF4IHdoaWNoIGlzIGluc2VjdXJlLlxuICAgIGlmIChlbmFibGVkICYmIG1zaWUgPCA4KSB7XG4gICAgICB0aHJvdyAkc2NlTWluRXJyKCdpZXF1aXJrcycsXG4gICAgICAgICdTdHJpY3QgQ29udGV4dHVhbCBFc2NhcGluZyBkb2VzIG5vdCBzdXBwb3J0IEludGVybmV0IEV4cGxvcmVyIHZlcnNpb24gPCAxMSBpbiBxdWlya3MgJyArXG4gICAgICAgICdtb2RlLiAgWW91IGNhbiBmaXggdGhpcyBieSBhZGRpbmcgdGhlIHRleHQgPCFkb2N0eXBlIGh0bWw+IHRvIHRoZSB0b3Agb2YgeW91ciBIVE1MICcgK1xuICAgICAgICAnZG9jdW1lbnQuICBTZWUgaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy9hcGkvbmcuJHNjZSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKTtcbiAgICB9XG5cbiAgICB2YXIgc2NlID0gc2hhbGxvd0NvcHkoU0NFX0NPTlRFWFRTKTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2lzRW5hYmxlZFxuICAgICAqIEBraW5kIGZ1bmN0aW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIFNDRSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuICBJZiB5b3Ugd2FudCB0byBzZXQgdGhlIHZhbHVlLCB5b3VcbiAgICAgKiAgICAgaGF2ZSB0byBkbyBpdCBhdCBtb2R1bGUgY29uZmlnIHRpbWUgb24ge0BsaW5rIG5nLiRzY2VQcm92aWRlciAkc2NlUHJvdmlkZXJ9LlxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiBTQ0UgaXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICBzY2UuaXNFbmFibGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gZW5hYmxlZDtcbiAgICB9O1xuICAgIHNjZS50cnVzdEFzID0gJHNjZURlbGVnYXRlLnRydXN0QXM7XG4gICAgc2NlLmdldFRydXN0ZWQgPSAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZDtcbiAgICBzY2UudmFsdWVPZiA9ICRzY2VEZWxlZ2F0ZS52YWx1ZU9mO1xuXG4gICAgaWYgKCFlbmFibGVkKSB7XG4gICAgICBzY2UudHJ1c3RBcyA9IHNjZS5nZXRUcnVzdGVkID0gZnVuY3Rpb24odHlwZSwgdmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuICAgICAgc2NlLnZhbHVlT2YgPSBpZGVudGl0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBDb252ZXJ0cyBBbmd1bGFyIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGludG8gYSBmdW5jdGlvbi4gIFRoaXMgaXMgbGlrZSB7QGxpbmtcbiAgICAgKiBuZy4kcGFyc2UgJHBhcnNlfSBhbmQgaXMgaWRlbnRpY2FsIHdoZW4gdGhlIGV4cHJlc3Npb24gaXMgYSBsaXRlcmFsIGNvbnN0YW50LiAgT3RoZXJ3aXNlLCBpdFxuICAgICAqIHdyYXBzIHRoZSBleHByZXNzaW9uIGluIGEgY2FsbCB0byB7QGxpbmsgbmcuJHNjZSNnZXRUcnVzdGVkICRzY2UuZ2V0VHJ1c3RlZCgqdHlwZSosXG4gICAgICogKnJlc3VsdCopfVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIFNDRSBjb250ZXh0IGluIHdoaWNoIHRoaXMgcmVzdWx0IHdpbGwgYmUgdXNlZC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IEEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlXG4gICAgICogICAgICBzdHJpbmdzIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzXG4gICAgICogICAgICBpbiBgY29udGV4dGAuXG4gICAgICovXG4gICAgc2NlLnBhcnNlQXMgPSBmdW5jdGlvbiBzY2VQYXJzZUFzKHR5cGUsIGV4cHIpIHtcbiAgICAgIHZhciBwYXJzZWQgPSAkcGFyc2UoZXhwcik7XG4gICAgICBpZiAocGFyc2VkLmxpdGVyYWwgJiYgcGFyc2VkLmNvbnN0YW50KSB7XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gJHBhcnNlKGV4cHIsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIHNjZS5nZXRUcnVzdGVkKHR5cGUsIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIERlbGVnYXRlcyB0byB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzYH0uIEFzIHN1Y2gsIHJldHVybnMgYVxuICAgICAqIHdyYXBwZWQgb2JqZWN0IHRoYXQgcmVwcmVzZW50cyB5b3VyIHZhbHVlLCBhbmQgdGhlIHRydXN0IHlvdSBoYXZlIGluIGl0cyBzYWZldHkgZm9yIHRoZSBnaXZlblxuICAgICAqIGNvbnRleHQuIEFuZ3VsYXJKUyBjYW4gdGhlbiB1c2UgdGhhdCB2YWx1ZSBhcy1pcyBpbiBiaW5kaW5ncyBvZiB0aGUgc3BlY2lmaWVkIHNlY3VyZSBjb250ZXh0LlxuICAgICAqIFRoaXMgaXMgdXNlZCBpbiBiaW5kaW5ncyBmb3IgYG5nLWJpbmQtaHRtbGAsIGBuZy1pbmNsdWRlYCwgYW5kIG1vc3QgYHNyY2AgYXR0cmlidXRlXG4gICAgICogaW50ZXJwb2xhdGlvbnMuIFNlZSB7QGxpbmsgbmcuJHNjZSAkc2NlfSBmb3Igc3RyaWN0IGNvbnRleHR1YWwgZXNjYXBpbmcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHNhZmUgZm9yIHVzZSwgZS5nLiBgJHNjZS5VUkxgLFxuICAgICAqICAgICBgJHNjZS5SRVNPVVJDRV9VUkxgLCBgJHNjZS5IVE1MYCwgYCRzY2UuSlNgIG9yIGAkc2NlLkNTU2AuXG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0aGF0IHRoYXQgc2hvdWxkIGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC5cbiAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50IG9mIHlvdXIgYHZhbHVlYFxuICAgICAqICAgICBpbiB0aGUgY29udGV4dCB5b3Ugc3BlY2lmaWVkLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc0h0bWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzSHRtbCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI3RydXN0QXMgYCRzY2VEZWxlZ2F0ZS50cnVzdEFzKCRzY2UuSFRNTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIG1hcmsgYXMgdHJ1c3RlZCBmb3IgYCRzY2UuSFRNTGAgY29udGV4dC5cbiAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50IG9mIHlvdXIgYHZhbHVlYFxuICAgICAqICAgICBpbiBgJHNjZS5IVE1MYCBjb250ZXh0IChsaWtlIGBuZy1iaW5kLWh0bWxgKS5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3RydXN0QXNDc3NcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzQ3NzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjdHJ1c3RBcyBgJHNjZURlbGVnYXRlLnRydXN0QXMoJHNjZS5DU1MsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBtYXJrIGFzIHRydXN0ZWQgZm9yIGAkc2NlLkNTU2AgY29udGV4dC5cbiAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50XG4gICAgICogICAgIG9mIHlvdXIgYHZhbHVlYCBpbiBgJHNjZS5DU1NgIGNvbnRleHQuIFRoaXMgY29udGV4dCBpcyBjdXJyZW50bHkgdW51c2VkLCBzbyB0aGVyZSBhcmVcbiAgICAgKiAgICAgYWxtb3N0IG5vIHJlYXNvbnMgdG8gdXNlIHRoaXMgZnVuY3Rpb24gc28gZmFyLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjdHJ1c3RBc1VybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnRydXN0QXNVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLlVSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIG1hcmsgYXMgdHJ1c3RlZCBmb3IgYCRzY2UuVVJMYCBjb250ZXh0LlxuICAgICAqIEByZXR1cm4geyp9IEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgYXMgYSB0cnVzdGVkIHZhcmlhbnQgb2YgeW91ciBgdmFsdWVgXG4gICAgICogICAgIGluIGAkc2NlLlVSTGAgY29udGV4dC4gVGhhdCBjb250ZXh0IGlzIGN1cnJlbnRseSB1bnVzZWQsIHNvIHRoZXJlIGFyZSBhbG1vc3Qgbm8gcmVhc29uc1xuICAgICAqICAgICB0byB1c2UgdGhpcyBmdW5jdGlvbiBzbyBmYXIuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzUmVzb3VyY2VVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzUmVzb3VyY2VVcmwodmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIG1hcmsgYXMgdHJ1c3RlZCBmb3IgYCRzY2UuUkVTT1VSQ0VfVVJMYCBjb250ZXh0LlxuICAgICAqIEByZXR1cm4geyp9IEEgd3JhcHBlZCB2ZXJzaW9uIG9mIHZhbHVlIHRoYXQgY2FuIGJlIHVzZWQgYXMgYSB0cnVzdGVkIHZhcmlhbnQgb2YgeW91ciBgdmFsdWVgXG4gICAgICogICAgIGluIGAkc2NlLlJFU09VUkNFX1VSTGAgY29udGV4dCAodGVtcGxhdGUgVVJMcyBpbiBgbmctaW5jbHVkZWAsIG1vc3QgYHNyY2AgYXR0cmlidXRlXG4gICAgICogICAgIGJpbmRpbmdzLCAuLi4pXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSN0cnVzdEFzSnNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS50cnVzdEFzSnModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSN0cnVzdEFzIGAkc2NlRGVsZWdhdGUudHJ1c3RBcygkc2NlLkpTLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gbWFyayBhcyB0cnVzdGVkIGZvciBgJHNjZS5KU2AgY29udGV4dC5cbiAgICAgKiBAcmV0dXJuIHsqfSBBIHdyYXBwZWQgdmVyc2lvbiBvZiB2YWx1ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgdHJ1c3RlZCB2YXJpYW50IG9mIHlvdXIgYHZhbHVlYFxuICAgICAqICAgICBpbiBgJHNjZS5KU2AgY29udGV4dC4gVGhhdCBjb250ZXh0IGlzIGN1cnJlbnRseSB1bnVzZWQsIHNvIHRoZXJlIGFyZSBhbG1vc3Qgbm8gcmVhc29ucyB0b1xuICAgICAqICAgICB1c2UgdGhpcyBmdW5jdGlvbiBzbyBmYXIuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBEZWxlZ2F0ZXMgdG8ge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZGB9LiAgQXMgc3VjaCxcbiAgICAgKiB0YWtlcyBhbnkgaW5wdXQsIGFuZCBlaXRoZXIgcmV0dXJucyBhIHZhbHVlIHRoYXQncyBzYWZlIHRvIHVzZSBpbiB0aGUgc3BlY2lmaWVkIGNvbnRleHQsXG4gICAgICogb3IgdGhyb3dzIGFuIGV4Y2VwdGlvbi4gVGhpcyBmdW5jdGlvbiBpcyBhd2FyZSBvZiB0cnVzdGVkIHZhbHVlcyBjcmVhdGVkIGJ5IHRoZSBgdHJ1c3RBc2BcbiAgICAgKiBmdW5jdGlvbiBhbmQgaXRzIHNob3J0aGFuZHMsIGFuZCB3aGVuIGNvbnRleHRzIGFyZSBhcHByb3ByaWF0ZSwgcmV0dXJucyB0aGUgdW53cmFwcGVkIHZhbHVlXG4gICAgICogYXMtaXMuIEZpbmFsbHksIHRoaXMgZnVuY3Rpb24gY2FuIGFsc28gdGhyb3cgd2hlbiB0aGVyZSBpcyBubyB3YXkgdG8gdHVybiBgbWF5YmVUcnVzdGVkYCBpbiBhXG4gICAgICogc2FmZSB2YWx1ZSAoZS5nLiwgbm8gc2FuaXRpemF0aW9uIGlzIGF2YWlsYWJsZSBvciBwb3NzaWJsZS4pXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUgY29udGV4dCBpbiB3aGljaCB0aGlzIHZhbHVlIGlzIHRvIGJlIHVzZWQuXG4gICAgICogQHBhcmFtIHsqfSBtYXliZVRydXN0ZWQgVGhlIHJlc3VsdCBvZiBhIHByaW9yIHtAbGluayBuZy4kc2NlI3RydXN0QXNcbiAgICAgKiAgICAgYCRzY2UudHJ1c3RBc2B9IGNhbGwsIG9yIGFueXRoaW5nIGVsc2UgKHdoaWNoIHdpbGwgbm90IGJlIGNvbnNpZGVyZWQgdHJ1c3RlZC4pXG4gICAgICogQHJldHVybiB7Kn0gQSB2ZXJzaW9uIG9mIHRoZSB2YWx1ZSB0aGF0J3Mgc2FmZSB0byB1c2UgaW4gdGhlIGdpdmVuIGNvbnRleHQsIG9yIHRocm93cyBhblxuICAgICAqICAgICBleGNlcHRpb24gaWYgdGhpcyBpcyBpbXBvc3NpYmxlLlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZEh0bWxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5nZXRUcnVzdGVkSHRtbCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuSFRNTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXG4gICAgICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuSFRNTCwgdmFsdWUpYFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZENzc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRDc3ModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZSNnZXRUcnVzdGVkIGAkc2NlRGVsZWdhdGUuZ2V0VHJ1c3RlZCgkc2NlLkNTUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXG4gICAgICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuQ1NTLCB2YWx1ZSlgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNnZXRUcnVzdGVkVXJsXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZFVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZS5nZXRUcnVzdGVkYC5cbiAgICAgKiBAcmV0dXJuIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIGAkc2NlLmdldFRydXN0ZWQoJHNjZS5VUkwsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI2dldFRydXN0ZWRSZXNvdXJjZVVybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLmdldFRydXN0ZWRSZXNvdXJjZVVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZURlbGVnYXRlI2dldFRydXN0ZWQgYCRzY2VEZWxlZ2F0ZS5nZXRUcnVzdGVkKCRzY2UuUkVTT1VSQ0VfVVJMLCB2YWx1ZSlgfVxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGFzcyB0byBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWRgLlxuICAgICAqIEByZXR1cm4geyp9IFRoZSByZXR1cm4gdmFsdWUgb2YgYCRzY2UuZ2V0VHJ1c3RlZCgkc2NlLlJFU09VUkNFX1VSTCwgdmFsdWUpYFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQG5nZG9jIG1ldGhvZFxuICAgICAqIEBuYW1lICRzY2UjZ2V0VHJ1c3RlZEpzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UuZ2V0VHJ1c3RlZEpzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlRGVsZWdhdGUjZ2V0VHJ1c3RlZCBgJHNjZURlbGVnYXRlLmdldFRydXN0ZWQoJHNjZS5KUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHBhc3MgdG8gYCRzY2UuZ2V0VHJ1c3RlZGAuXG4gICAgICogQHJldHVybiB7Kn0gVGhlIHJldHVybiB2YWx1ZSBvZiBgJHNjZS5nZXRUcnVzdGVkKCRzY2UuSlMsIHZhbHVlKWBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNIdG1sXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBTaG9ydGhhbmQgbWV0aG9kLiAgYCRzY2UucGFyc2VBc0h0bWwoZXhwcmVzc2lvbiBzdHJpbmcpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuSFRNTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gQSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGVcbiAgICAgKiAgICAgIHN0cmluZ3MgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXNcbiAgICAgKiAgICAgIGluIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNDc3NcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzQ3NzKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLkNTUywgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gQSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGVcbiAgICAgKiAgICAgIHN0cmluZ3MgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXNcbiAgICAgKiAgICAgIGluIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNVcmxcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzVXJsKHZhbHVlKWAg4oaSXG4gICAgICogICAgIHtAbGluayBuZy4kc2NlI3BhcnNlQXMgYCRzY2UucGFyc2VBcygkc2NlLlVSTCwgdmFsdWUpYH1cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFN0cmluZyBleHByZXNzaW9uIHRvIGNvbXBpbGUuXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb24oY29udGV4dCwgbG9jYWxzKX0gQSBmdW5jdGlvbiB3aGljaCByZXByZXNlbnRzIHRoZSBjb21waWxlZCBleHByZXNzaW9uOlxuICAgICAqXG4gICAgICogICAgKiBgY29udGV4dGAg4oCTIGB7b2JqZWN0fWAg4oCTIGFuIG9iamVjdCBhZ2FpbnN0IHdoaWNoIGFueSBleHByZXNzaW9ucyBlbWJlZGRlZCBpbiB0aGVcbiAgICAgKiAgICAgIHN0cmluZ3MgYXJlIGV2YWx1YXRlZCBhZ2FpbnN0ICh0eXBpY2FsbHkgYSBzY29wZSBvYmplY3QpLlxuICAgICAqICAgICogYGxvY2Fsc2Ag4oCTIGB7b2JqZWN0PX1gIOKAkyBsb2NhbCB2YXJpYWJsZXMgY29udGV4dCBvYmplY3QsIHVzZWZ1bCBmb3Igb3ZlcnJpZGluZyB2YWx1ZXNcbiAgICAgKiAgICAgIGluIGBjb250ZXh0YC5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBtZXRob2RcbiAgICAgKiBAbmFtZSAkc2NlI3BhcnNlQXNSZXNvdXJjZVVybFxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRoYW5kIG1ldGhvZC4gIGAkc2NlLnBhcnNlQXNSZXNvdXJjZVVybCh2YWx1ZSlgIOKGklxuICAgICAqICAgICB7QGxpbmsgbmcuJHNjZSNwYXJzZUFzIGAkc2NlLnBhcnNlQXMoJHNjZS5SRVNPVVJDRV9VUkwsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IEEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlXG4gICAgICogICAgICBzdHJpbmdzIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzXG4gICAgICogICAgICBpbiBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICogQG5hbWUgJHNjZSNwYXJzZUFzSnNcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0aGFuZCBtZXRob2QuICBgJHNjZS5wYXJzZUFzSnModmFsdWUpYCDihpJcbiAgICAgKiAgICAge0BsaW5rIG5nLiRzY2UjcGFyc2VBcyBgJHNjZS5wYXJzZUFzKCRzY2UuSlMsIHZhbHVlKWB9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBTdHJpbmcgZXhwcmVzc2lvbiB0byBjb21waWxlLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9uKGNvbnRleHQsIGxvY2Fscyl9IEEgZnVuY3Rpb24gd2hpY2ggcmVwcmVzZW50cyB0aGUgY29tcGlsZWQgZXhwcmVzc2lvbjpcbiAgICAgKlxuICAgICAqICAgICogYGNvbnRleHRgIOKAkyBge29iamVjdH1gIOKAkyBhbiBvYmplY3QgYWdhaW5zdCB3aGljaCBhbnkgZXhwcmVzc2lvbnMgZW1iZWRkZWQgaW4gdGhlXG4gICAgICogICAgICBzdHJpbmdzIGFyZSBldmFsdWF0ZWQgYWdhaW5zdCAodHlwaWNhbGx5IGEgc2NvcGUgb2JqZWN0KS5cbiAgICAgKiAgICAqIGBsb2NhbHNgIOKAkyBge29iamVjdD19YCDigJMgbG9jYWwgdmFyaWFibGVzIGNvbnRleHQgb2JqZWN0LCB1c2VmdWwgZm9yIG92ZXJyaWRpbmcgdmFsdWVzXG4gICAgICogICAgICBpbiBgY29udGV4dGAuXG4gICAgICovXG5cbiAgICAvLyBTaG9ydGhhbmQgZGVsZWdhdGlvbnMuXG4gICAgdmFyIHBhcnNlID0gc2NlLnBhcnNlQXMsXG4gICAgICAgIGdldFRydXN0ZWQgPSBzY2UuZ2V0VHJ1c3RlZCxcbiAgICAgICAgdHJ1c3RBcyA9IHNjZS50cnVzdEFzO1xuXG4gICAgZm9yRWFjaChTQ0VfQ09OVEVYVFMsIGZ1bmN0aW9uKGVudW1WYWx1ZSwgbmFtZSkge1xuICAgICAgdmFyIGxOYW1lID0gbG93ZXJjYXNlKG5hbWUpO1xuICAgICAgc2NlW3NuYWtlVG9DYW1lbCgncGFyc2VfYXNfJyArIGxOYW1lKV0gPSBmdW5jdGlvbihleHByKSB7XG4gICAgICAgIHJldHVybiBwYXJzZShlbnVtVmFsdWUsIGV4cHIpO1xuICAgICAgfTtcbiAgICAgIHNjZVtzbmFrZVRvQ2FtZWwoJ2dldF90cnVzdGVkXycgKyBsTmFtZSldID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGdldFRydXN0ZWQoZW51bVZhbHVlLCB2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgc2NlW3NuYWtlVG9DYW1lbCgndHJ1c3RfYXNfJyArIGxOYW1lKV0gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHJ1c3RBcyhlbnVtVmFsdWUsIHZhbHVlKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2NlO1xuICB9XTtcbn1cblxuLyogZXhwb3J0ZWQgJFNuaWZmZXJQcm92aWRlciAqL1xuXG4vKipcbiAqICEhISBUaGlzIGlzIGFuIHVuZG9jdW1lbnRlZCBcInByaXZhdGVcIiBzZXJ2aWNlICEhIVxuICpcbiAqIEBuYW1lICRzbmlmZmVyXG4gKiBAcmVxdWlyZXMgJHdpbmRvd1xuICogQHJlcXVpcmVzICRkb2N1bWVudFxuICogQHRoaXNcbiAqXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGhpc3RvcnkgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IGh0bWw1IGhpc3RvcnkgYXBpID9cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gdHJhbnNpdGlvbnMgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IENTUyB0cmFuc2l0aW9uIGV2ZW50cyA/XG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGFuaW1hdGlvbnMgRG9lcyB0aGUgYnJvd3NlciBzdXBwb3J0IENTUyBhbmltYXRpb24gZXZlbnRzID9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgaXMgdmVyeSBzaW1wbGUgaW1wbGVtZW50YXRpb24gb2YgdGVzdGluZyBicm93c2VyJ3MgZmVhdHVyZXMuXG4gKi9cbmZ1bmN0aW9uICRTbmlmZmVyUHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHdpbmRvdycsICckZG9jdW1lbnQnLCBmdW5jdGlvbigkd2luZG93LCAkZG9jdW1lbnQpIHtcbiAgICB2YXIgZXZlbnRTdXBwb3J0ID0ge30sXG4gICAgICAgIC8vIENocm9tZSBQYWNrYWdlZCBBcHBzIGFyZSBub3QgYWxsb3dlZCB0byBhY2Nlc3MgYGhpc3RvcnkucHVzaFN0YXRlYC5cbiAgICAgICAgLy8gSWYgbm90IHNhbmRib3hlZCwgdGhleSBjYW4gYmUgZGV0ZWN0ZWQgYnkgdGhlIHByZXNlbmNlIG9mIGBjaHJvbWUuYXBwLnJ1bnRpbWVgXG4gICAgICAgIC8vIChzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9hcHBzL2FwaV9pbmRleCkuIElmIHNhbmRib3hlZCwgdGhleSBjYW4gYmUgZGV0ZWN0ZWQgYnlcbiAgICAgICAgLy8gdGhlIHByZXNlbmNlIG9mIGFuIGV4dGVuc2lvbiBydW50aW1lIElEIGFuZCB0aGUgYWJzZW5jZSBvZiBvdGhlciBDaHJvbWUgcnVudGltZSBBUElzXG4gICAgICAgIC8vIChzZWUgaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9hcHBzL21hbmlmZXN0L3NhbmRib3gpLlxuICAgICAgICAvLyAoTlcuanMgYXBwcyBoYXZlIGFjY2VzcyB0byBDaHJvbWUgQVBJcywgYnV0IGRvIHN1cHBvcnQgYGhpc3RvcnlgLilcbiAgICAgICAgaXNOdyA9ICR3aW5kb3cubncgJiYgJHdpbmRvdy5udy5wcm9jZXNzLFxuICAgICAgICBpc0Nocm9tZVBhY2thZ2VkQXBwID1cbiAgICAgICAgICAgICFpc053ICYmXG4gICAgICAgICAgICAkd2luZG93LmNocm9tZSAmJlxuICAgICAgICAgICAgKCR3aW5kb3cuY2hyb21lLmFwcCAmJiAkd2luZG93LmNocm9tZS5hcHAucnVudGltZSB8fFxuICAgICAgICAgICAgICAgICEkd2luZG93LmNocm9tZS5hcHAgJiYgJHdpbmRvdy5jaHJvbWUucnVudGltZSAmJiAkd2luZG93LmNocm9tZS5ydW50aW1lLmlkKSxcbiAgICAgICAgaGFzSGlzdG9yeVB1c2hTdGF0ZSA9ICFpc0Nocm9tZVBhY2thZ2VkQXBwICYmICR3aW5kb3cuaGlzdG9yeSAmJiAkd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlLFxuICAgICAgICBhbmRyb2lkID1cbiAgICAgICAgICB0b0ludCgoL2FuZHJvaWQgKFxcZCspLy5leGVjKGxvd2VyY2FzZSgoJHdpbmRvdy5uYXZpZ2F0b3IgfHwge30pLnVzZXJBZ2VudCkpIHx8IFtdKVsxXSksXG4gICAgICAgIGJveGVlID0gL0JveGVlL2kudGVzdCgoJHdpbmRvdy5uYXZpZ2F0b3IgfHwge30pLnVzZXJBZ2VudCksXG4gICAgICAgIGRvY3VtZW50ID0gJGRvY3VtZW50WzBdIHx8IHt9LFxuICAgICAgICBib2R5U3R5bGUgPSBkb2N1bWVudC5ib2R5ICYmIGRvY3VtZW50LmJvZHkuc3R5bGUsXG4gICAgICAgIHRyYW5zaXRpb25zID0gZmFsc2UsXG4gICAgICAgIGFuaW1hdGlvbnMgPSBmYWxzZTtcblxuICAgIGlmIChib2R5U3R5bGUpIHtcbiAgICAgIC8vIFN1cHBvcnQ6IEFuZHJvaWQgPDUsIEJsYWNrYmVycnkgQnJvd3NlciAxMCwgZGVmYXVsdCBDaHJvbWUgaW4gQW5kcm9pZCA0LjQueFxuICAgICAgLy8gTWVudGlvbmVkIGJyb3dzZXJzIG5lZWQgYSAtd2Via2l0LSBwcmVmaXggZm9yIHRyYW5zaXRpb25zICYgYW5pbWF0aW9ucy5cbiAgICAgIHRyYW5zaXRpb25zID0gISEoJ3RyYW5zaXRpb24nIGluIGJvZHlTdHlsZSB8fCAnd2Via2l0VHJhbnNpdGlvbicgaW4gYm9keVN0eWxlKTtcbiAgICAgIGFuaW1hdGlvbnMgPSAhISgnYW5pbWF0aW9uJyBpbiBib2R5U3R5bGUgfHwgJ3dlYmtpdEFuaW1hdGlvbicgaW4gYm9keVN0eWxlKTtcbiAgICB9XG5cblxuICAgIHJldHVybiB7XG4gICAgICAvLyBBbmRyb2lkIGhhcyBoaXN0b3J5LnB1c2hTdGF0ZSwgYnV0IGl0IGRvZXMgbm90IHVwZGF0ZSBsb2NhdGlvbiBjb3JyZWN0bHlcbiAgICAgIC8vIHNvIGxldCdzIG5vdCB1c2UgdGhlIGhpc3RvcnkgQVBJIGF0IGFsbC5cbiAgICAgIC8vIGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9hbmRyb2lkL2lzc3Vlcy9kZXRhaWw/aWQ9MTc0NzFcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzkwNFxuXG4gICAgICAvLyBvbGRlciB3ZWJraXQgYnJvd3NlciAoNTMzLjkpIG9uIEJveGVlIGJveCBoYXMgZXhhY3RseSB0aGUgc2FtZSBwcm9ibGVtIGFzIEFuZHJvaWQgaGFzXG4gICAgICAvLyBzbyBsZXQncyBub3QgdXNlIHRoZSBoaXN0b3J5IEFQSSBhbHNvXG4gICAgICAvLyBXZSBhcmUgcHVycG9zZWZ1bGx5IHVzaW5nIGAhKGFuZHJvaWQgPCA0KWAgdG8gY292ZXIgdGhlIGNhc2Ugd2hlbiBgYW5kcm9pZGAgaXMgdW5kZWZpbmVkXG4gICAgICBoaXN0b3J5OiAhIShoYXNIaXN0b3J5UHVzaFN0YXRlICYmICEoYW5kcm9pZCA8IDQpICYmICFib3hlZSksXG4gICAgICBoYXNFdmVudDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG4gICAgICAgIC8vIElFOSBpbXBsZW1lbnRzICdpbnB1dCcgZXZlbnQgaXQncyBzbyBmdWJhcmVkIHRoYXQgd2UgcmF0aGVyIHByZXRlbmQgdGhhdCBpdCBkb2Vzbid0IGhhdmVcbiAgICAgICAgLy8gaXQuIEluIHBhcnRpY3VsYXIgdGhlIGV2ZW50IGlzIG5vdCBmaXJlZCB3aGVuIGJhY2tzcGFjZSBvciBkZWxldGUga2V5IGFyZSBwcmVzc2VkIG9yXG4gICAgICAgIC8vIHdoZW4gY3V0IG9wZXJhdGlvbiBpcyBwZXJmb3JtZWQuXG4gICAgICAgIC8vIElFMTArIGltcGxlbWVudHMgJ2lucHV0JyBldmVudCBidXQgaXQgZXJyb25lb3VzbHkgZmlyZXMgdW5kZXIgdmFyaW91cyBzaXR1YXRpb25zLFxuICAgICAgICAvLyBlLmcuIHdoZW4gcGxhY2Vob2xkZXIgY2hhbmdlcywgb3IgYSBmb3JtIGlzIGZvY3VzZWQuXG4gICAgICAgIGlmIChldmVudCA9PT0gJ2lucHV0JyAmJiBtc2llKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGV2ZW50U3VwcG9ydFtldmVudF0pKSB7XG4gICAgICAgICAgdmFyIGRpdkVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIGV2ZW50U3VwcG9ydFtldmVudF0gPSAnb24nICsgZXZlbnQgaW4gZGl2RWxtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV2ZW50U3VwcG9ydFtldmVudF07XG4gICAgICB9LFxuICAgICAgY3NwOiBjc3AoKSxcbiAgICAgIHRyYW5zaXRpb25zOiB0cmFuc2l0aW9ucyxcbiAgICAgIGFuaW1hdGlvbnM6IGFuaW1hdGlvbnMsXG4gICAgICBhbmRyb2lkOiBhbmRyb2lkXG4gICAgfTtcbiAgfV07XG59XG5cbnZhciAkdGVtcGxhdGVSZXF1ZXN0TWluRXJyID0gbWluRXJyKCckY29tcGlsZScpO1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJHRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyXG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNlZCB0byBjb25maWd1cmUgdGhlIG9wdGlvbnMgcGFzc2VkIHRvIHRoZSB7QGxpbmsgJGh0dHB9IHNlcnZpY2Ugd2hlbiBtYWtpbmcgYSB0ZW1wbGF0ZSByZXF1ZXN0LlxuICpcbiAqIEZvciBleGFtcGxlLCBpdCBjYW4gYmUgdXNlZCBmb3Igc3BlY2lmeWluZyB0aGUgXCJBY2NlcHRcIiBoZWFkZXIgdGhhdCBpcyBzZW50IHRvIHRoZSBzZXJ2ZXIsIHdoZW5cbiAqIHJlcXVlc3RpbmcgYSB0ZW1wbGF0ZS5cbiAqL1xuZnVuY3Rpb24gJFRlbXBsYXRlUmVxdWVzdFByb3ZpZGVyKCkge1xuXG4gIHZhciBodHRwT3B0aW9ucztcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSAkdGVtcGxhdGVSZXF1ZXN0UHJvdmlkZXIjaHR0cE9wdGlvbnNcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRoZSBvcHRpb25zIHRvIGJlIHBhc3NlZCB0byB0aGUge0BsaW5rICRodHRwfSBzZXJ2aWNlIHdoZW4gbWFraW5nIHRoZSByZXF1ZXN0LlxuICAgKiBZb3UgY2FuIHVzZSB0aGlzIHRvIG92ZXJyaWRlIG9wdGlvbnMgc3VjaCBhcyB0aGUgXCJBY2NlcHRcIiBoZWFkZXIgZm9yIHRlbXBsYXRlIHJlcXVlc3RzLlxuICAgKlxuICAgKiBUaGUge0BsaW5rICR0ZW1wbGF0ZVJlcXVlc3R9IHdpbGwgc2V0IHRoZSBgY2FjaGVgIGFuZCB0aGUgYHRyYW5zZm9ybVJlc3BvbnNlYCBwcm9wZXJ0aWVzIG9mIHRoZVxuICAgKiBvcHRpb25zIGlmIG5vdCBvdmVycmlkZGVuIGhlcmUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gdmFsdWUgbmV3IHZhbHVlIGZvciB0aGUge0BsaW5rICRodHRwfSBvcHRpb25zLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfHNlbGZ9IFJldHVybnMgdGhlIHtAbGluayAkaHR0cH0gb3B0aW9ucyB3aGVuIHVzZWQgYXMgZ2V0dGVyIGFuZCBzZWxmIGlmIHVzZWQgYXMgc2V0dGVyLlxuICAgKi9cbiAgdGhpcy5odHRwT3B0aW9ucyA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIGh0dHBPcHRpb25zID0gdmFsO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBodHRwT3B0aW9ucztcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIHNlcnZpY2VcbiAgICogQG5hbWUgJHRlbXBsYXRlUmVxdWVzdFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhlIGAkdGVtcGxhdGVSZXF1ZXN0YCBzZXJ2aWNlIHJ1bnMgc2VjdXJpdHkgY2hlY2tzIHRoZW4gZG93bmxvYWRzIHRoZSBwcm92aWRlZCB0ZW1wbGF0ZSB1c2luZ1xuICAgKiBgJGh0dHBgIGFuZCwgdXBvbiBzdWNjZXNzLCBzdG9yZXMgdGhlIGNvbnRlbnRzIGluc2lkZSBvZiBgJHRlbXBsYXRlQ2FjaGVgLiBJZiB0aGUgSFRUUCByZXF1ZXN0XG4gICAqIGZhaWxzIG9yIHRoZSByZXNwb25zZSBkYXRhIG9mIHRoZSBIVFRQIHJlcXVlc3QgaXMgZW1wdHksIGEgYCRjb21waWxlYCBlcnJvciB3aWxsIGJlIHRocm93biAodGhlXG4gICAqIGV4Y2VwdGlvbiBjYW4gYmUgdGh3YXJ0ZWQgYnkgc2V0dGluZyB0aGUgMm5kIHBhcmFtZXRlciBvZiB0aGUgZnVuY3Rpb24gdG8gdHJ1ZSkuIE5vdGUgdGhhdCB0aGVcbiAgICogY29udGVudHMgb2YgYCR0ZW1wbGF0ZUNhY2hlYCBhcmUgdHJ1c3RlZCwgc28gdGhlIGNhbGwgdG8gYCRzY2UuZ2V0VHJ1c3RlZFVybCh0cGwpYCBpcyBvbWl0dGVkXG4gICAqIHdoZW4gYHRwbGAgaXMgb2YgdHlwZSBzdHJpbmcgYW5kIGAkdGVtcGxhdGVDYWNoZWAgaGFzIHRoZSBtYXRjaGluZyBlbnRyeS5cbiAgICpcbiAgICogSWYgeW91IHdhbnQgdG8gcGFzcyBjdXN0b20gb3B0aW9ucyB0byB0aGUgYCRodHRwYCBzZXJ2aWNlLCBzdWNoIGFzIHNldHRpbmcgdGhlIEFjY2VwdCBoZWFkZXIgeW91XG4gICAqIGNhbiBjb25maWd1cmUgdGhpcyB2aWEge0BsaW5rICR0ZW1wbGF0ZVJlcXVlc3RQcm92aWRlciNodHRwT3B0aW9uc30uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfFRydXN0ZWRSZXNvdXJjZVVybH0gdHBsIFRoZSBIVFRQIHJlcXVlc3QgdGVtcGxhdGUgVVJMXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IGlnbm9yZVJlcXVlc3RFcnJvciBXaGV0aGVyIG9yIG5vdCB0byBpZ25vcmUgdGhlIGV4Y2VwdGlvbiB3aGVuIHRoZSByZXF1ZXN0IGZhaWxzIG9yIHRoZSB0ZW1wbGF0ZSBpcyBlbXB0eVxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBhIHByb21pc2UgZm9yIHRoZSBIVFRQIHJlc3BvbnNlIGRhdGEgb2YgdGhlIGdpdmVuIFVSTC5cbiAgICpcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IHRvdGFsUGVuZGluZ1JlcXVlc3RzIHRvdGFsIGFtb3VudCBvZiBwZW5kaW5nIHRlbXBsYXRlIHJlcXVlc3RzIGJlaW5nIGRvd25sb2FkZWQuXG4gICAqL1xuICB0aGlzLiRnZXQgPSBbJyRleGNlcHRpb25IYW5kbGVyJywgJyR0ZW1wbGF0ZUNhY2hlJywgJyRodHRwJywgJyRxJywgJyRzY2UnLFxuICAgIGZ1bmN0aW9uKCRleGNlcHRpb25IYW5kbGVyLCAkdGVtcGxhdGVDYWNoZSwgJGh0dHAsICRxLCAkc2NlKSB7XG5cbiAgICAgIGZ1bmN0aW9uIGhhbmRsZVJlcXVlc3RGbih0cGwsIGlnbm9yZVJlcXVlc3RFcnJvcikge1xuICAgICAgICBoYW5kbGVSZXF1ZXN0Rm4udG90YWxQZW5kaW5nUmVxdWVzdHMrKztcblxuICAgICAgICAvLyBXZSBjb25zaWRlciB0aGUgdGVtcGxhdGUgY2FjaGUgaG9sZHMgb25seSB0cnVzdGVkIHRlbXBsYXRlcywgc29cbiAgICAgICAgLy8gdGhlcmUncyBubyBuZWVkIHRvIGdvIHRocm91Z2ggd2hpdGVsaXN0aW5nIGFnYWluIGZvciBrZXlzIHRoYXQgYWxyZWFkeVxuICAgICAgICAvLyBhcmUgaW5jbHVkZWQgaW4gdGhlcmUuIFRoaXMgYWxzbyBtYWtlcyBBbmd1bGFyIGFjY2VwdCBhbnkgc2NyaXB0XG4gICAgICAgIC8vIGRpcmVjdGl2ZSwgbm8gbWF0dGVyIGl0cyBuYW1lLiBIb3dldmVyLCB3ZSBzdGlsbCBuZWVkIHRvIHVud3JhcCB0cnVzdGVkXG4gICAgICAgIC8vIHR5cGVzLlxuICAgICAgICBpZiAoIWlzU3RyaW5nKHRwbCkgfHwgaXNVbmRlZmluZWQoJHRlbXBsYXRlQ2FjaGUuZ2V0KHRwbCkpKSB7XG4gICAgICAgICAgdHBsID0gJHNjZS5nZXRUcnVzdGVkUmVzb3VyY2VVcmwodHBsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0cmFuc2Zvcm1SZXNwb25zZSA9ICRodHRwLmRlZmF1bHRzICYmICRodHRwLmRlZmF1bHRzLnRyYW5zZm9ybVJlc3BvbnNlO1xuXG4gICAgICAgIGlmIChpc0FycmF5KHRyYW5zZm9ybVJlc3BvbnNlKSkge1xuICAgICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlID0gdHJhbnNmb3JtUmVzcG9uc2UuZmlsdGVyKGZ1bmN0aW9uKHRyYW5zZm9ybWVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtZXIgIT09IGRlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm07XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNmb3JtUmVzcG9uc2UgPT09IGRlZmF1bHRIdHRwUmVzcG9uc2VUcmFuc2Zvcm0pIHtcbiAgICAgICAgICB0cmFuc2Zvcm1SZXNwb25zZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHRwbCwgZXh0ZW5kKHtcbiAgICAgICAgICAgIGNhY2hlOiAkdGVtcGxhdGVDYWNoZSxcbiAgICAgICAgICAgIHRyYW5zZm9ybVJlc3BvbnNlOiB0cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICAgIH0sIGh0dHBPcHRpb25zKSlcbiAgICAgICAgICAuZmluYWxseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGhhbmRsZVJlcXVlc3RGbi50b3RhbFBlbmRpbmdSZXF1ZXN0cy0tO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICR0ZW1wbGF0ZUNhY2hlLnB1dCh0cGwsIHJlc3BvbnNlLmRhdGEpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gICAgICAgICAgfSwgaGFuZGxlRXJyb3IpO1xuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZUVycm9yKHJlc3ApIHtcbiAgICAgICAgICBpZiAoIWlnbm9yZVJlcXVlc3RFcnJvcikge1xuICAgICAgICAgICAgcmVzcCA9ICR0ZW1wbGF0ZVJlcXVlc3RNaW5FcnIoJ3RwbG9hZCcsXG4gICAgICAgICAgICAgICAgJ0ZhaWxlZCB0byBsb2FkIHRlbXBsYXRlOiB7MH0gKEhUVFAgc3RhdHVzOiB7MX0gezJ9KScsXG4gICAgICAgICAgICAgICAgdHBsLCByZXNwLnN0YXR1cywgcmVzcC5zdGF0dXNUZXh0KTtcblxuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIocmVzcCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuICRxLnJlamVjdChyZXNwKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBoYW5kbGVSZXF1ZXN0Rm4udG90YWxQZW5kaW5nUmVxdWVzdHMgPSAwO1xuXG4gICAgICByZXR1cm4gaGFuZGxlUmVxdWVzdEZuO1xuICAgIH1cbiAgXTtcbn1cblxuLyoqIEB0aGlzICovXG5mdW5jdGlvbiAkJFRlc3RhYmlsaXR5UHJvdmlkZXIoKSB7XG4gIHRoaXMuJGdldCA9IFsnJHJvb3RTY29wZScsICckYnJvd3NlcicsICckbG9jYXRpb24nLFxuICAgICAgIGZ1bmN0aW9uKCRyb290U2NvcGUsICAgJGJyb3dzZXIsICAgJGxvY2F0aW9uKSB7XG5cbiAgICAvKipcbiAgICAgKiBAbmFtZSAkdGVzdGFiaWxpdHlcbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFRoZSBwcml2YXRlICQkdGVzdGFiaWxpdHkgc2VydmljZSBwcm92aWRlcyBhIGNvbGxlY3Rpb24gb2YgbWV0aG9kcyBmb3IgdXNlIHdoZW4gZGVidWdnaW5nXG4gICAgICogb3IgYnkgYXV0b21hdGVkIHRlc3QgYW5kIGRlYnVnZ2luZyB0b29scy5cbiAgICAgKi9cbiAgICB2YXIgdGVzdGFiaWxpdHkgPSB7fTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZmluZEJpbmRpbmdzXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIGJvdW5kICh2aWEgbmctYmluZCBvciB7e319KVxuICAgICAqIHRvIGV4cHJlc3Npb25zIG1hdGNoaW5nIHRoZSBpbnB1dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCByb290IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFRoZSBiaW5kaW5nIGV4cHJlc3Npb24gdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtib29sZWFufSBvcHRfZXhhY3RNYXRjaCBJZiB0cnVlLCBvbmx5IHJldHVybnMgZXhhY3QgbWF0Y2hlc1xuICAgICAqICAgICBmb3IgdGhlIGV4cHJlc3Npb24uIEZpbHRlcnMgYW5kIHdoaXRlc3BhY2UgYXJlIGlnbm9yZWQuXG4gICAgICovXG4gICAgdGVzdGFiaWxpdHkuZmluZEJpbmRpbmdzID0gZnVuY3Rpb24oZWxlbWVudCwgZXhwcmVzc2lvbiwgb3B0X2V4YWN0TWF0Y2gpIHtcbiAgICAgIHZhciBiaW5kaW5ncyA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbmctYmluZGluZycpO1xuICAgICAgdmFyIG1hdGNoZXMgPSBbXTtcbiAgICAgIGZvckVhY2goYmluZGluZ3MsIGZ1bmN0aW9uKGJpbmRpbmcpIHtcbiAgICAgICAgdmFyIGRhdGFCaW5kaW5nID0gYW5ndWxhci5lbGVtZW50KGJpbmRpbmcpLmRhdGEoJyRiaW5kaW5nJyk7XG4gICAgICAgIGlmIChkYXRhQmluZGluZykge1xuICAgICAgICAgIGZvckVhY2goZGF0YUJpbmRpbmcsIGZ1bmN0aW9uKGJpbmRpbmdOYW1lKSB7XG4gICAgICAgICAgICBpZiAob3B0X2V4YWN0TWF0Y2gpIHtcbiAgICAgICAgICAgICAgdmFyIG1hdGNoZXIgPSBuZXcgUmVnRXhwKCcoXnxcXFxccyknICsgZXNjYXBlRm9yUmVnZXhwKGV4cHJlc3Npb24pICsgJyhcXFxcc3xcXFxcfHwkKScpO1xuICAgICAgICAgICAgICBpZiAobWF0Y2hlci50ZXN0KGJpbmRpbmdOYW1lKSkge1xuICAgICAgICAgICAgICAgIG1hdGNoZXMucHVzaChiaW5kaW5nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGJpbmRpbmdOYW1lLmluZGV4T2YoZXhwcmVzc2lvbikgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGJpbmRpbmcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZmluZE1vZGVsc1xuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogUmV0dXJucyBhbiBhcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB0d28td2F5IGZvdW5kIHZpYSBuZy1tb2RlbCB0b1xuICAgICAqIGV4cHJlc3Npb25zIG1hdGNoaW5nIHRoZSBpbnB1dC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCBUaGUgZWxlbWVudCByb290IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBleHByZXNzaW9uIFRoZSBtb2RlbCBleHByZXNzaW9uIHRvIG1hdGNoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0X2V4YWN0TWF0Y2ggSWYgdHJ1ZSwgb25seSByZXR1cm5zIGV4YWN0IG1hdGNoZXNcbiAgICAgKiAgICAgZm9yIHRoZSBleHByZXNzaW9uLlxuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LmZpbmRNb2RlbHMgPSBmdW5jdGlvbihlbGVtZW50LCBleHByZXNzaW9uLCBvcHRfZXhhY3RNYXRjaCkge1xuICAgICAgdmFyIHByZWZpeGVzID0gWyduZy0nLCAnZGF0YS1uZy0nLCAnbmdcXFxcOiddO1xuICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBwcmVmaXhlcy5sZW5ndGg7ICsrcCkge1xuICAgICAgICB2YXIgYXR0cmlidXRlRXF1YWxzID0gb3B0X2V4YWN0TWF0Y2ggPyAnPScgOiAnKj0nO1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSAnWycgKyBwcmVmaXhlc1twXSArICdtb2RlbCcgKyBhdHRyaWJ1dGVFcXVhbHMgKyAnXCInICsgZXhwcmVzc2lvbiArICdcIl0nO1xuICAgICAgICB2YXIgZWxlbWVudHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjZ2V0TG9jYXRpb25cbiAgICAgKlxuICAgICAqIEBkZXNjcmlwdGlvblxuICAgICAqIFNob3J0Y3V0IGZvciBnZXR0aW5nIHRoZSBsb2NhdGlvbiBpbiBhIGJyb3dzZXIgYWdub3N0aWMgd2F5LiBSZXR1cm5zXG4gICAgICogICAgIHRoZSBwYXRoLCBzZWFyY2gsIGFuZCBoYXNoLiAoZS5nLiAvcGF0aD9hPWIjaGFzaClcbiAgICAgKi9cbiAgICB0ZXN0YWJpbGl0eS5nZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICRsb2NhdGlvbi51cmwoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQG5hbWUgJCR0ZXN0YWJpbGl0eSNzZXRMb2NhdGlvblxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogU2hvcnRjdXQgZm9yIG5hdmlnYXRpbmcgdG8gYSBsb2NhdGlvbiB3aXRob3V0IGRvaW5nIGEgZnVsbCBwYWdlIHJlbG9hZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGxvY2F0aW9uIHVybCAocGF0aCwgc2VhcmNoIGFuZCBoYXNoLFxuICAgICAqICAgICBlLmcuIC9wYXRoP2E9YiNoYXNoKSB0byBnbyB0by5cbiAgICAgKi9cbiAgICB0ZXN0YWJpbGl0eS5zZXRMb2NhdGlvbiA9IGZ1bmN0aW9uKHVybCkge1xuICAgICAgaWYgKHVybCAhPT0gJGxvY2F0aW9uLnVybCgpKSB7XG4gICAgICAgICRsb2NhdGlvbi51cmwodXJsKTtcbiAgICAgICAgJHJvb3RTY29wZS4kZGlnZXN0KCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBuYW1lICQkdGVzdGFiaWxpdHkjd2hlblN0YWJsZVxuICAgICAqXG4gICAgICogQGRlc2NyaXB0aW9uXG4gICAgICogQ2FsbHMgdGhlIGNhbGxiYWNrIHdoZW4gJHRpbWVvdXQgYW5kICRodHRwIHJlcXVlc3RzIGFyZSBjb21wbGV0ZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIHRlc3RhYmlsaXR5LndoZW5TdGFibGUgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgJGJyb3dzZXIubm90aWZ5V2hlbk5vT3V0c3RhbmRpbmdSZXF1ZXN0cyhjYWxsYmFjayk7XG4gICAgfTtcblxuICAgIHJldHVybiB0ZXN0YWJpbGl0eTtcbiAgfV07XG59XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJFRpbWVvdXRQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gWyckcm9vdFNjb3BlJywgJyRicm93c2VyJywgJyRxJywgJyQkcScsICckZXhjZXB0aW9uSGFuZGxlcicsXG4gICAgICAgZnVuY3Rpb24oJHJvb3RTY29wZSwgICAkYnJvd3NlciwgICAkcSwgICAkJHEsICAgJGV4Y2VwdGlvbkhhbmRsZXIpIHtcblxuICAgIHZhciBkZWZlcnJlZHMgPSB7fTtcblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2Mgc2VydmljZVxuICAgICAgKiBAbmFtZSAkdGltZW91dFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQW5ndWxhcidzIHdyYXBwZXIgZm9yIGB3aW5kb3cuc2V0VGltZW91dGAuIFRoZSBgZm5gIGZ1bmN0aW9uIGlzIHdyYXBwZWQgaW50byBhIHRyeS9jYXRjaFxuICAgICAgKiBibG9jayBhbmQgZGVsZWdhdGVzIGFueSBleGNlcHRpb25zIHRvXG4gICAgICAqIHtAbGluayBuZy4kZXhjZXB0aW9uSGFuZGxlciAkZXhjZXB0aW9uSGFuZGxlcn0gc2VydmljZS5cbiAgICAgICpcbiAgICAgICogVGhlIHJldHVybiB2YWx1ZSBvZiBjYWxsaW5nIGAkdGltZW91dGAgaXMgYSBwcm9taXNlLCB3aGljaCB3aWxsIGJlIHJlc29sdmVkIHdoZW5cbiAgICAgICogdGhlIGRlbGF5IGhhcyBwYXNzZWQgYW5kIHRoZSB0aW1lb3V0IGZ1bmN0aW9uLCBpZiBwcm92aWRlZCwgaXMgZXhlY3V0ZWQuXG4gICAgICAqXG4gICAgICAqIFRvIGNhbmNlbCBhIHRpbWVvdXQgcmVxdWVzdCwgY2FsbCBgJHRpbWVvdXQuY2FuY2VsKHByb21pc2UpYC5cbiAgICAgICpcbiAgICAgICogSW4gdGVzdHMgeW91IGNhbiB1c2Uge0BsaW5rIG5nTW9jay4kdGltZW91dCBgJHRpbWVvdXQuZmx1c2goKWB9IHRvXG4gICAgICAqIHN5bmNocm9ub3VzbHkgZmx1c2ggdGhlIHF1ZXVlIG9mIGRlZmVycmVkIGZ1bmN0aW9ucy5cbiAgICAgICpcbiAgICAgICogSWYgeW91IG9ubHkgd2FudCBhIHByb21pc2UgdGhhdCB3aWxsIGJlIHJlc29sdmVkIGFmdGVyIHNvbWUgc3BlY2lmaWVkIGRlbGF5XG4gICAgICAqIHRoZW4geW91IGNhbiBjYWxsIGAkdGltZW91dGAgd2l0aG91dCB0aGUgYGZuYCBmdW5jdGlvbi5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtmdW5jdGlvbigpPX0gZm4gQSBmdW5jdGlvbiwgd2hvc2UgZXhlY3V0aW9uIHNob3VsZCBiZSBkZWxheWVkLlxuICAgICAgKiBAcGFyYW0ge251bWJlcj19IFtkZWxheT0wXSBEZWxheSBpbiBtaWxsaXNlY29uZHMuXG4gICAgICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtpbnZva2VBcHBseT10cnVlXSBJZiBzZXQgdG8gYGZhbHNlYCBza2lwcyBtb2RlbCBkaXJ0eSBjaGVja2luZywgb3RoZXJ3aXNlXG4gICAgICAqICAgd2lsbCBpbnZva2UgYGZuYCB3aXRoaW4gdGhlIHtAbGluayBuZy4kcm9vdFNjb3BlLlNjb3BlIyRhcHBseSAkYXBwbHl9IGJsb2NrLlxuICAgICAgKiBAcGFyYW0gey4uLio9fSBQYXNzIGFkZGl0aW9uYWwgcGFyYW1ldGVycyB0byB0aGUgZXhlY3V0ZWQgZnVuY3Rpb24uXG4gICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSBQcm9taXNlIHRoYXQgd2lsbCBiZSByZXNvbHZlZCB3aGVuIHRoZSB0aW1lb3V0IGlzIHJlYWNoZWQuIFRoZSBwcm9taXNlXG4gICAgICAqICAgd2lsbCBiZSByZXNvbHZlZCB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGBmbmAgZnVuY3Rpb24uXG4gICAgICAqXG4gICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVvdXQoZm4sIGRlbGF5LCBpbnZva2VBcHBseSkge1xuICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgICBpbnZva2VBcHBseSA9IGRlbGF5O1xuICAgICAgICBkZWxheSA9IGZuO1xuICAgICAgICBmbiA9IG5vb3A7XG4gICAgICB9XG5cbiAgICAgIHZhciBhcmdzID0gc2xpY2VBcmdzKGFyZ3VtZW50cywgMyksXG4gICAgICAgICAgc2tpcEFwcGx5ID0gKGlzRGVmaW5lZChpbnZva2VBcHBseSkgJiYgIWludm9rZUFwcGx5KSxcbiAgICAgICAgICBkZWZlcnJlZCA9IChza2lwQXBwbHkgPyAkJHEgOiAkcSkuZGVmZXIoKSxcbiAgICAgICAgICBwcm9taXNlID0gZGVmZXJyZWQucHJvbWlzZSxcbiAgICAgICAgICB0aW1lb3V0SWQ7XG5cbiAgICAgIHRpbWVvdXRJZCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoZm4uYXBwbHkobnVsbCwgYXJncykpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZGVmZXJyZWQucmVqZWN0KGUpO1xuICAgICAgICAgICRleGNlcHRpb25IYW5kbGVyKGUpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIGRlbGV0ZSBkZWZlcnJlZHNbcHJvbWlzZS4kJHRpbWVvdXRJZF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNraXBBcHBseSkgJHJvb3RTY29wZS4kYXBwbHkoKTtcbiAgICAgIH0sIGRlbGF5KTtcblxuICAgICAgcHJvbWlzZS4kJHRpbWVvdXRJZCA9IHRpbWVvdXRJZDtcbiAgICAgIGRlZmVycmVkc1t0aW1lb3V0SWRdID0gZGVmZXJyZWQ7XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuXG4gICAgIC8qKlxuICAgICAgKiBAbmdkb2MgbWV0aG9kXG4gICAgICAqIEBuYW1lICR0aW1lb3V0I2NhbmNlbFxuICAgICAgKlxuICAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgICogQ2FuY2VscyBhIHRhc2sgYXNzb2NpYXRlZCB3aXRoIHRoZSBgcHJvbWlzZWAuIEFzIGEgcmVzdWx0IG9mIHRoaXMsIHRoZSBwcm9taXNlIHdpbGwgYmVcbiAgICAgICogcmVzb2x2ZWQgd2l0aCBhIHJlamVjdGlvbi5cbiAgICAgICpcbiAgICAgICogQHBhcmFtIHtQcm9taXNlPX0gcHJvbWlzZSBQcm9taXNlIHJldHVybmVkIGJ5IHRoZSBgJHRpbWVvdXRgIGZ1bmN0aW9uLlxuICAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHRhc2sgaGFzbid0IGV4ZWN1dGVkIHlldCBhbmQgd2FzIHN1Y2Nlc3NmdWxseVxuICAgICAgKiAgIGNhbmNlbGVkLlxuICAgICAgKi9cbiAgICB0aW1lb3V0LmNhbmNlbCA9IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgIGlmIChwcm9taXNlICYmIHByb21pc2UuJCR0aW1lb3V0SWQgaW4gZGVmZXJyZWRzKSB7XG4gICAgICAgIC8vIFRpbWVvdXQgY2FuY2VscyBzaG91bGQgbm90IHJlcG9ydCBhbiB1bmhhbmRsZWQgcHJvbWlzZS5cbiAgICAgICAgbWFya1FFeGNlcHRpb25IYW5kbGVkKGRlZmVycmVkc1twcm9taXNlLiQkdGltZW91dElkXS5wcm9taXNlKTtcbiAgICAgICAgZGVmZXJyZWRzW3Byb21pc2UuJCR0aW1lb3V0SWRdLnJlamVjdCgnY2FuY2VsZWQnKTtcbiAgICAgICAgZGVsZXRlIGRlZmVycmVkc1twcm9taXNlLiQkdGltZW91dElkXTtcbiAgICAgICAgcmV0dXJuICRicm93c2VyLmRlZmVyLmNhbmNlbChwcm9taXNlLiQkdGltZW91dElkKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRpbWVvdXQ7XG4gIH1dO1xufVxuXG4vLyBOT1RFOiAgVGhlIHVzYWdlIG9mIHdpbmRvdyBhbmQgZG9jdW1lbnQgaW5zdGVhZCBvZiAkd2luZG93IGFuZCAkZG9jdW1lbnQgaGVyZSBpc1xuLy8gZGVsaWJlcmF0ZS4gIFRoaXMgc2VydmljZSBkZXBlbmRzIG9uIHRoZSBzcGVjaWZpYyBiZWhhdmlvciBvZiBhbmNob3Igbm9kZXMgY3JlYXRlZCBieSB0aGVcbi8vIGJyb3dzZXIgKHJlc29sdmluZyBhbmQgcGFyc2luZyBVUkxzKSB0aGF0IGlzIHVubGlrZWx5IHRvIGJlIHByb3ZpZGVkIGJ5IG1vY2sgb2JqZWN0cyBhbmRcbi8vIGNhdXNlIHVzIHRvIGJyZWFrIHRlc3RzLiAgSW4gYWRkaXRpb24sIHdoZW4gdGhlIGJyb3dzZXIgcmVzb2x2ZXMgYSBVUkwgZm9yIFhIUiwgaXRcbi8vIGRvZXNuJ3Qga25vdyBhYm91dCBtb2NrZWQgbG9jYXRpb25zIGFuZCByZXNvbHZlcyBVUkxzIHRvIHRoZSByZWFsIGRvY3VtZW50IC0gd2hpY2ggaXNcbi8vIGV4YWN0bHkgdGhlIGJlaGF2aW9yIG5lZWRlZCBoZXJlLiAgVGhlcmUgaXMgbGl0dGxlIHZhbHVlIGlzIG1vY2tpbmcgdGhlc2Ugb3V0IGZvciB0aGlzXG4vLyBzZXJ2aWNlLlxudmFyIHVybFBhcnNpbmdOb2RlID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbnZhciBvcmlnaW5VcmwgPSB1cmxSZXNvbHZlKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuXG4vKipcbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBOb3RlcyBmb3Igbm9uLUlFIGJyb3dzZXJzXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gKiBBc3NpZ25pbmcgYSBVUkwgdG8gdGhlIGhyZWYgcHJvcGVydHkgb2YgYW4gYW5jaG9yIERPTSBub2RlLCBldmVuIG9uZSBhdHRhY2hlZCB0byB0aGUgRE9NLFxuICogcmVzdWx0cyBib3RoIGluIHRoZSBub3JtYWxpemluZyBhbmQgcGFyc2luZyBvZiB0aGUgVVJMLiAgTm9ybWFsaXppbmcgbWVhbnMgdGhhdCBhIHJlbGF0aXZlXG4gKiBVUkwgd2lsbCBiZSByZXNvbHZlZCBpbnRvIGFuIGFic29sdXRlIFVSTCBpbiB0aGUgY29udGV4dCBvZiB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuXG4gKiBQYXJzaW5nIG1lYW5zIHRoYXQgdGhlIGFuY2hvciBub2RlJ3MgaG9zdCwgaG9zdG5hbWUsIHByb3RvY29sLCBwb3J0LCBwYXRobmFtZSBhbmQgcmVsYXRlZFxuICogcHJvcGVydGllcyBhcmUgYWxsIHBvcHVsYXRlZCB0byByZWZsZWN0IHRoZSBub3JtYWxpemVkIFVSTC4gIFRoaXMgYXBwcm9hY2ggaGFzIHdpZGVcbiAqIGNvbXBhdGliaWxpdHkgLSBTYWZhcmkgMSssIE1vemlsbGEgMSsgZXRjLiAgU2VlXG4gKiBodHRwOi8vd3d3LmFwdGFuYS5jb20vcmVmZXJlbmNlL2h0bWwvYXBpL0hUTUxBbmNob3JFbGVtZW50Lmh0bWxcbiAqXG4gKiBJbXBsZW1lbnRhdGlvbiBOb3RlcyBmb3IgSUVcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogSUUgPD0gMTAgbm9ybWFsaXplcyB0aGUgVVJMIHdoZW4gYXNzaWduZWQgdG8gdGhlIGFuY2hvciBub2RlIHNpbWlsYXIgdG8gdGhlIG90aGVyXG4gKiBicm93c2Vycy4gIEhvd2V2ZXIsIHRoZSBwYXJzZWQgY29tcG9uZW50cyB3aWxsIG5vdCBiZSBzZXQgaWYgdGhlIFVSTCBhc3NpZ25lZCBkaWQgbm90IHNwZWNpZnlcbiAqIHRoZW0uICAoZS5nLiBpZiB5b3UgYXNzaWduIGEuaHJlZiA9IFwiZm9vXCIsIHRoZW4gYS5wcm90b2NvbCwgYS5ob3N0LCBldGMuIHdpbGwgYmUgZW1wdHkuKSAgV2VcbiAqIHdvcmsgYXJvdW5kIHRoYXQgYnkgcGVyZm9ybWluZyB0aGUgcGFyc2luZyBpbiBhIDJuZCBzdGVwIGJ5IHRha2luZyBhIHByZXZpb3VzbHkgbm9ybWFsaXplZFxuICogVVJMIChlLmcuIGJ5IGFzc2lnbmluZyB0byBhLmhyZWYpIGFuZCBhc3NpZ25pbmcgaXQgYS5ocmVmIGFnYWluLiAgVGhpcyBjb3JyZWN0bHkgcG9wdWxhdGVzIHRoZVxuICogcHJvcGVydGllcyBzdWNoIGFzIHByb3RvY29sLCBob3N0bmFtZSwgcG9ydCwgZXRjLlxuICpcbiAqIFJlZmVyZW5jZXM6XG4gKiAgIGh0dHA6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0hUTUxBbmNob3JFbGVtZW50XG4gKiAgIGh0dHA6Ly93d3cuYXB0YW5hLmNvbS9yZWZlcmVuY2UvaHRtbC9hcGkvSFRNTEFuY2hvckVsZW1lbnQuaHRtbFxuICogICBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAqICAgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9wdWxsLzI5MDJcbiAqICAgaHR0cDovL2phbWVzLnBhZG9sc2V5LmNvbS9qYXZhc2NyaXB0L3BhcnNpbmctdXJscy13aXRoLXRoZS1kb20vXG4gKlxuICogQGtpbmQgZnVuY3Rpb25cbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWQuXG4gKiBAZGVzY3JpcHRpb24gTm9ybWFsaXplcyBhbmQgcGFyc2VzIGEgVVJMLlxuICogQHJldHVybnMge29iamVjdH0gUmV0dXJucyB0aGUgbm9ybWFsaXplZCBVUkwgYXMgYSBkaWN0aW9uYXJ5LlxuICpcbiAqICAgfCBtZW1iZXIgbmFtZSAgIHwgRGVzY3JpcHRpb24gICAgfFxuICogICB8LS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS18XG4gKiAgIHwgaHJlZiAgICAgICAgICB8IEEgbm9ybWFsaXplZCB2ZXJzaW9uIG9mIHRoZSBwcm92aWRlZCBVUkwgaWYgaXQgd2FzIG5vdCBhbiBhYnNvbHV0ZSBVUkwgfFxuICogICB8IHByb3RvY29sICAgICAgfCBUaGUgcHJvdG9jb2wgaW5jbHVkaW5nIHRoZSB0cmFpbGluZyBjb2xvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqICAgfCBob3N0ICAgICAgICAgIHwgVGhlIGhvc3QgYW5kIHBvcnQgKGlmIHRoZSBwb3J0IGlzIG5vbi1kZWZhdWx0KSBvZiB0aGUgbm9ybWFsaXplZFVybCAgICB8XG4gKiAgIHwgc2VhcmNoICAgICAgICB8IFRoZSBzZWFyY2ggcGFyYW1zLCBtaW51cyB0aGUgcXVlc3Rpb24gbWFyayAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogICB8IGhhc2ggICAgICAgICAgfCBUaGUgaGFzaCBzdHJpbmcsIG1pbnVzIHRoZSBoYXNoIHN5bWJvbFxuICogICB8IGhvc3RuYW1lICAgICAgfCBUaGUgaG9zdG5hbWVcbiAqICAgfCBwb3J0ICAgICAgICAgIHwgVGhlIHBvcnQsIHdpdGhvdXQgXCI6XCJcbiAqICAgfCBwYXRobmFtZSAgICAgIHwgVGhlIHBhdGhuYW1lLCBiZWdpbm5pbmcgd2l0aCBcIi9cIlxuICpcbiAqL1xuZnVuY3Rpb24gdXJsUmVzb2x2ZSh1cmwpIHtcbiAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG4gIGlmIChtc2llKSB7XG4gICAgLy8gTm9ybWFsaXplIGJlZm9yZSBwYXJzZS4gIFJlZmVyIEltcGxlbWVudGF0aW9uIE5vdGVzIG9uIHdoeSB0aGlzIGlzXG4gICAgLy8gZG9uZSBpbiB0d28gc3RlcHMgb24gSUUuXG4gICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gIH1cblxuICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gIHJldHVybiB7XG4gICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJylcbiAgICAgID8gdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgIDogJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgfTtcbn1cblxuLyoqXG4gKiBQYXJzZSBhIHJlcXVlc3QgVVJMIGFuZCBkZXRlcm1pbmUgd2hldGhlciB0aGlzIGlzIGEgc2FtZS1vcmlnaW4gcmVxdWVzdCBhcyB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSByZXF1ZXN0VXJsIFRoZSB1cmwgb2YgdGhlIHJlcXVlc3QgYXMgYSBzdHJpbmcgdGhhdCB3aWxsIGJlIHJlc29sdmVkXG4gKiBvciBhIHBhcnNlZCBVUkwgb2JqZWN0LlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgdGhlIHJlcXVlc3QgaXMgZm9yIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgYXBwbGljYXRpb24gZG9jdW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHVybElzU2FtZU9yaWdpbihyZXF1ZXN0VXJsKSB7XG4gIHZhciBwYXJzZWQgPSAoaXNTdHJpbmcocmVxdWVzdFVybCkpID8gdXJsUmVzb2x2ZShyZXF1ZXN0VXJsKSA6IHJlcXVlc3RVcmw7XG4gIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VcmwucHJvdG9jb2wgJiZcbiAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVXJsLmhvc3QpO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBzZXJ2aWNlXG4gKiBAbmFtZSAkd2luZG93XG4gKiBAdGhpc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQSByZWZlcmVuY2UgdG8gdGhlIGJyb3dzZXIncyBgd2luZG93YCBvYmplY3QuIFdoaWxlIGB3aW5kb3dgXG4gKiBpcyBnbG9iYWxseSBhdmFpbGFibGUgaW4gSmF2YVNjcmlwdCwgaXQgY2F1c2VzIHRlc3RhYmlsaXR5IHByb2JsZW1zLCBiZWNhdXNlXG4gKiBpdCBpcyBhIGdsb2JhbCB2YXJpYWJsZS4gSW4gYW5ndWxhciB3ZSBhbHdheXMgcmVmZXIgdG8gaXQgdGhyb3VnaCB0aGVcbiAqIGAkd2luZG93YCBzZXJ2aWNlLCBzbyBpdCBtYXkgYmUgb3ZlcnJpZGRlbiwgcmVtb3ZlZCBvciBtb2NrZWQgZm9yIHRlc3RpbmcuXG4gKlxuICogRXhwcmVzc2lvbnMsIGxpa2UgdGhlIG9uZSBkZWZpbmVkIGZvciB0aGUgYG5nQ2xpY2tgIGRpcmVjdGl2ZSBpbiB0aGUgZXhhbXBsZVxuICogYmVsb3csIGFyZSBldmFsdWF0ZWQgd2l0aCByZXNwZWN0IHRvIHRoZSBjdXJyZW50IHNjb3BlLiAgVGhlcmVmb3JlLCB0aGVyZSBpc1xuICogbm8gcmlzayBvZiBpbmFkdmVydGVudGx5IGNvZGluZyBpbiBhIGRlcGVuZGVuY3kgb24gYSBnbG9iYWwgdmFsdWUgaW4gc3VjaCBhblxuICogZXhwcmVzc2lvbi5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwid2luZG93RXhhbXBsZVwiIG5hbWU9XCJ3aW5kb3ctc2VydmljZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnd2luZG93RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckd2luZG93JywgZnVuY3Rpb24oJHNjb3BlLCAkd2luZG93KSB7XG4gICAgICAgICAgICAgJHNjb3BlLmdyZWV0aW5nID0gJ0hlbGxvLCBXb3JsZCEnO1xuICAgICAgICAgICAgICRzY29wZS5kb0dyZWV0aW5nID0gZnVuY3Rpb24oZ3JlZXRpbmcpIHtcbiAgICAgICAgICAgICAgICR3aW5kb3cuYWxlcnQoZ3JlZXRpbmcpO1xuICAgICAgICAgICAgIH07XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJncmVldGluZ1wiIGFyaWEtbGFiZWw9XCJncmVldGluZ1wiIC8+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZG9HcmVldGluZyhncmVldGluZylcIj5BTEVSVDwvYnV0dG9uPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIGl0KCdzaG91bGQgZGlzcGxheSB0aGUgZ3JlZXRpbmcgaW4gdGhlIGlucHV0IGJveCcsIGZ1bmN0aW9uKCkge1xuICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2dyZWV0aW5nJykpLnNlbmRLZXlzKCdIZWxsbywgRTJFIFRlc3RzJyk7XG4gICAgICAgLy8gSWYgd2UgY2xpY2sgdGhlIGJ1dHRvbiBpdCB3aWxsIGJsb2NrIHRoZSB0ZXN0IHJ1bm5lclxuICAgICAgIC8vIGVsZW1lbnQoJzpidXR0b24nKS5jbGljaygpO1xuICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuZnVuY3Rpb24gJFdpbmRvd1Byb3ZpZGVyKCkge1xuICB0aGlzLiRnZXQgPSB2YWx1ZUZuKHdpbmRvdyk7XG59XG5cbi8qKlxuICogQG5hbWUgJCRjb29raWVSZWFkZXJcbiAqIEByZXF1aXJlcyAkZG9jdW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgaXMgYSBwcml2YXRlIHNlcnZpY2UgZm9yIHJlYWRpbmcgY29va2llcyB1c2VkIGJ5ICRodHRwIGFuZCBuZ0Nvb2tpZXNcbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IGEga2V5L3ZhbHVlIG1hcCBvZiB0aGUgY3VycmVudCBjb29raWVzXG4gKi9cbmZ1bmN0aW9uICQkQ29va2llUmVhZGVyKCRkb2N1bWVudCkge1xuICB2YXIgcmF3RG9jdW1lbnQgPSAkZG9jdW1lbnRbMF0gfHwge307XG4gIHZhciBsYXN0Q29va2llcyA9IHt9O1xuICB2YXIgbGFzdENvb2tpZVN0cmluZyA9ICcnO1xuXG4gIGZ1bmN0aW9uIHNhZmVHZXRDb29raWUocmF3RG9jdW1lbnQpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHJhd0RvY3VtZW50LmNvb2tpZSB8fCAnJztcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2FmZURlY29kZVVSSUNvbXBvbmVudChzdHIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzdHIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb29raWVBcnJheSwgY29va2llLCBpLCBpbmRleCwgbmFtZTtcbiAgICB2YXIgY3VycmVudENvb2tpZVN0cmluZyA9IHNhZmVHZXRDb29raWUocmF3RG9jdW1lbnQpO1xuXG4gICAgaWYgKGN1cnJlbnRDb29raWVTdHJpbmcgIT09IGxhc3RDb29raWVTdHJpbmcpIHtcbiAgICAgIGxhc3RDb29raWVTdHJpbmcgPSBjdXJyZW50Q29va2llU3RyaW5nO1xuICAgICAgY29va2llQXJyYXkgPSBsYXN0Q29va2llU3RyaW5nLnNwbGl0KCc7ICcpO1xuICAgICAgbGFzdENvb2tpZXMgPSB7fTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGNvb2tpZUFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvb2tpZSA9IGNvb2tpZUFycmF5W2ldO1xuICAgICAgICBpbmRleCA9IGNvb2tpZS5pbmRleE9mKCc9Jyk7XG4gICAgICAgIGlmIChpbmRleCA+IDApIHsgLy9pZ25vcmUgbmFtZWxlc3MgY29va2llc1xuICAgICAgICAgIG5hbWUgPSBzYWZlRGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcoMCwgaW5kZXgpKTtcbiAgICAgICAgICAvLyB0aGUgZmlyc3QgdmFsdWUgdGhhdCBpcyBzZWVuIGZvciBhIGNvb2tpZSBpcyB0aGUgbW9zdFxuICAgICAgICAgIC8vIHNwZWNpZmljIG9uZS4gIHZhbHVlcyBmb3IgdGhlIHNhbWUgY29va2llIG5hbWUgdGhhdFxuICAgICAgICAgIC8vIGZvbGxvdyBhcmUgZm9yIGxlc3Mgc3BlY2lmaWMgcGF0aHMuXG4gICAgICAgICAgaWYgKGlzVW5kZWZpbmVkKGxhc3RDb29raWVzW25hbWVdKSkge1xuICAgICAgICAgICAgbGFzdENvb2tpZXNbbmFtZV0gPSBzYWZlRGVjb2RlVVJJQ29tcG9uZW50KGNvb2tpZS5zdWJzdHJpbmcoaW5kZXggKyAxKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsYXN0Q29va2llcztcbiAgfTtcbn1cblxuJCRDb29raWVSZWFkZXIuJGluamVjdCA9IFsnJGRvY3VtZW50J107XG5cbi8qKiBAdGhpcyAqL1xuZnVuY3Rpb24gJCRDb29raWVSZWFkZXJQcm92aWRlcigpIHtcbiAgdGhpcy4kZ2V0ID0gJCRDb29raWVSZWFkZXI7XG59XG5cbi8qIGdsb2JhbCBjdXJyZW5jeUZpbHRlcjogdHJ1ZSxcbiBkYXRlRmlsdGVyOiB0cnVlLFxuIGZpbHRlckZpbHRlcjogdHJ1ZSxcbiBqc29uRmlsdGVyOiB0cnVlLFxuIGxpbWl0VG9GaWx0ZXI6IHRydWUsXG4gbG93ZXJjYXNlRmlsdGVyOiB0cnVlLFxuIG51bWJlckZpbHRlcjogdHJ1ZSxcbiBvcmRlckJ5RmlsdGVyOiB0cnVlLFxuIHVwcGVyY2FzZUZpbHRlcjogdHJ1ZSxcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBwcm92aWRlclxuICogQG5hbWUgJGZpbHRlclByb3ZpZGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBGaWx0ZXJzIGFyZSBqdXN0IGZ1bmN0aW9ucyB3aGljaCB0cmFuc2Zvcm0gaW5wdXQgdG8gYW4gb3V0cHV0LiBIb3dldmVyIGZpbHRlcnMgbmVlZCB0byBiZVxuICogRGVwZW5kZW5jeSBJbmplY3RlZC4gVG8gYWNoaWV2ZSB0aGlzIGEgZmlsdGVyIGRlZmluaXRpb24gY29uc2lzdHMgb2YgYSBmYWN0b3J5IGZ1bmN0aW9uIHdoaWNoIGlzXG4gKiBhbm5vdGF0ZWQgd2l0aCBkZXBlbmRlbmNpZXMgYW5kIGlzIHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyBhIGZpbHRlciBmdW5jdGlvbi5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIEZpbHRlciBuYW1lcyBtdXN0IGJlIHZhbGlkIGFuZ3VsYXIge0BsaW5rIGV4cHJlc3Npb259IGlkZW50aWZpZXJzLCBzdWNoIGFzIGB1cHBlcmNhc2VgIG9yIGBvcmRlckJ5YC5cbiAqIE5hbWVzIHdpdGggc3BlY2lhbCBjaGFyYWN0ZXJzLCBzdWNoIGFzIGh5cGhlbnMgYW5kIGRvdHMsIGFyZSBub3QgYWxsb3dlZC4gSWYgeW91IHdpc2ggdG8gbmFtZXNwYWNlXG4gKiB5b3VyIGZpbHRlcnMsIHRoZW4geW91IGNhbiB1c2UgY2FwaXRhbGl6YXRpb24gKGBteWFwcFN1YnNlY3Rpb25GaWx0ZXJ4YCkgb3IgdW5kZXJzY29yZXNcbiAqIChgbXlhcHBfc3Vic2VjdGlvbl9maWx0ZXJ4YCkuXG4gKiA8L2Rpdj5cbiAqXG4gKiBgYGBqc1xuICogICAvLyBGaWx0ZXIgcmVnaXN0cmF0aW9uXG4gKiAgIGZ1bmN0aW9uIE15TW9kdWxlKCRwcm92aWRlLCAkZmlsdGVyUHJvdmlkZXIpIHtcbiAqICAgICAvLyBjcmVhdGUgYSBzZXJ2aWNlIHRvIGRlbW9uc3RyYXRlIGluamVjdGlvbiAobm90IGFsd2F5cyBuZWVkZWQpXG4gKiAgICAgJHByb3ZpZGUudmFsdWUoJ2dyZWV0JywgZnVuY3Rpb24obmFtZSl7XG4gKiAgICAgICByZXR1cm4gJ0hlbGxvICcgKyBuYW1lICsgJyEnO1xuICogICAgIH0pO1xuICpcbiAqICAgICAvLyByZWdpc3RlciBhIGZpbHRlciBmYWN0b3J5IHdoaWNoIHVzZXMgdGhlXG4gKiAgICAgLy8gZ3JlZXQgc2VydmljZSB0byBkZW1vbnN0cmF0ZSBESS5cbiAqICAgICAkZmlsdGVyUHJvdmlkZXIucmVnaXN0ZXIoJ2dyZWV0JywgZnVuY3Rpb24oZ3JlZXQpe1xuICogICAgICAgLy8gcmV0dXJuIHRoZSBmaWx0ZXIgZnVuY3Rpb24gd2hpY2ggdXNlcyB0aGUgZ3JlZXQgc2VydmljZVxuICogICAgICAgLy8gdG8gZ2VuZXJhdGUgc2FsdXRhdGlvblxuICogICAgICAgcmV0dXJuIGZ1bmN0aW9uKHRleHQpIHtcbiAqICAgICAgICAgLy8gZmlsdGVycyBuZWVkIHRvIGJlIGZvcmdpdmluZyBzbyBjaGVjayBpbnB1dCB2YWxpZGl0eVxuICogICAgICAgICByZXR1cm4gdGV4dCAmJiBncmVldCh0ZXh0KSB8fCB0ZXh0O1xuICogICAgICAgfTtcbiAqICAgICB9KTtcbiAqICAgfVxuICogYGBgXG4gKlxuICogVGhlIGZpbHRlciBmdW5jdGlvbiBpcyByZWdpc3RlcmVkIHdpdGggdGhlIGAkaW5qZWN0b3JgIHVuZGVyIHRoZSBmaWx0ZXIgbmFtZSBzdWZmaXggd2l0aFxuICogYEZpbHRlcmAuXG4gKlxuICogYGBganNcbiAqICAgaXQoJ3Nob3VsZCBiZSB0aGUgc2FtZSBpbnN0YW5jZScsIGluamVjdChcbiAqICAgICBmdW5jdGlvbigkZmlsdGVyUHJvdmlkZXIpIHtcbiAqICAgICAgICRmaWx0ZXJQcm92aWRlci5yZWdpc3RlcigncmV2ZXJzZScsIGZ1bmN0aW9uKCl7XG4gKiAgICAgICAgIHJldHVybiAuLi47XG4gKiAgICAgICB9KTtcbiAqICAgICB9LFxuICogICAgIGZ1bmN0aW9uKCRmaWx0ZXIsIHJldmVyc2VGaWx0ZXIpIHtcbiAqICAgICAgIGV4cGVjdCgkZmlsdGVyKCdyZXZlcnNlJykpLnRvQmUocmV2ZXJzZUZpbHRlcik7XG4gKiAgICAgfSk7XG4gKiBgYGBcbiAqXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgaG93IGFuZ3VsYXIgZmlsdGVycyB3b3JrLCBhbmQgaG93IHRvIGNyZWF0ZSB5b3VyIG93biBmaWx0ZXJzLCBzZWVcbiAqIHtAbGluayBndWlkZS9maWx0ZXIgRmlsdGVyc30gaW4gdGhlIEFuZ3VsYXIgRGV2ZWxvcGVyIEd1aWRlLlxuICovXG5cbi8qKlxuICogQG5nZG9jIHNlcnZpY2VcbiAqIEBuYW1lICRmaWx0ZXJcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZpbHRlcnMgYXJlIHVzZWQgZm9yIGZvcm1hdHRpbmcgZGF0YSBkaXNwbGF5ZWQgdG8gdGhlIHVzZXIuXG4gKlxuICogVGhleSBjYW4gYmUgdXNlZCBpbiB2aWV3IHRlbXBsYXRlcywgY29udHJvbGxlcnMgb3Igc2VydmljZXMuQW5ndWxhciBjb21lc1xuICogd2l0aCBhIGNvbGxlY3Rpb24gb2YgW2J1aWx0LWluIGZpbHRlcnNdKGFwaS9uZy9maWx0ZXIpLCBidXQgaXQgaXMgZWFzeSB0b1xuICogZGVmaW5lIHlvdXIgb3duIGFzIHdlbGwuXG4gKlxuICogVGhlIGdlbmVyYWwgc3ludGF4IGluIHRlbXBsYXRlcyBpcyBhcyBmb2xsb3dzOlxuICpcbiAqIGBgYGh0bWxcbiAqIHt7IGV4cHJlc3Npb24gW3wgZmlsdGVyX25hbWVbOnBhcmFtZXRlcl92YWx1ZV0gLi4uIF0gfX1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIE5hbWUgb2YgdGhlIGZpbHRlciBmdW5jdGlvbiB0byByZXRyaWV2ZVxuICogQHJldHVybiB7RnVuY3Rpb259IHRoZSBmaWx0ZXIgZnVuY3Rpb25cbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwiJGZpbHRlclwiIG1vZHVsZT1cImZpbHRlckV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJNYWluQ3RybFwiPlxuICAgICAgICA8aDM+e3sgb3JpZ2luYWxUZXh0IH19PC9oMz5cbiAgICAgICAgPGgzPnt7IGZpbHRlcmVkVGV4dCB9fTwvaDM+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cblxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICBhbmd1bGFyLm1vZHVsZSgnZmlsdGVyRXhhbXBsZScsIFtdKVxuICAgICAgLmNvbnRyb2xsZXIoJ01haW5DdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkZmlsdGVyKSB7XG4gICAgICAgICRzY29wZS5vcmlnaW5hbFRleHQgPSAnaGVsbG8nO1xuICAgICAgICAkc2NvcGUuZmlsdGVyZWRUZXh0ID0gJGZpbHRlcigndXBwZXJjYXNlJykoJHNjb3BlLm9yaWdpbmFsVGV4dCk7XG4gICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICAqL1xuJEZpbHRlclByb3ZpZGVyLiRpbmplY3QgPSBbJyRwcm92aWRlJ107XG4vKiogQHRoaXMgKi9cbmZ1bmN0aW9uICRGaWx0ZXJQcm92aWRlcigkcHJvdmlkZSkge1xuICB2YXIgc3VmZml4ID0gJ0ZpbHRlcic7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgJGZpbHRlclByb3ZpZGVyI3JlZ2lzdGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfE9iamVjdH0gbmFtZSBOYW1lIG9mIHRoZSBmaWx0ZXIgZnVuY3Rpb24sIG9yIGFuIG9iamVjdCBtYXAgb2YgZmlsdGVycyB3aGVyZVxuICAgKiAgICB0aGUga2V5cyBhcmUgdGhlIGZpbHRlciBuYW1lcyBhbmQgdGhlIHZhbHVlcyBhcmUgdGhlIGZpbHRlciBmYWN0b3JpZXMuXG4gICAqXG4gICAqICAgIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAqICAgICoqTm90ZToqKiBGaWx0ZXIgbmFtZXMgbXVzdCBiZSB2YWxpZCBhbmd1bGFyIHtAbGluayBleHByZXNzaW9ufSBpZGVudGlmaWVycywgc3VjaCBhcyBgdXBwZXJjYXNlYCBvciBgb3JkZXJCeWAuXG4gICAqICAgIE5hbWVzIHdpdGggc3BlY2lhbCBjaGFyYWN0ZXJzLCBzdWNoIGFzIGh5cGhlbnMgYW5kIGRvdHMsIGFyZSBub3QgYWxsb3dlZC4gSWYgeW91IHdpc2ggdG8gbmFtZXNwYWNlXG4gICAqICAgIHlvdXIgZmlsdGVycywgdGhlbiB5b3UgY2FuIHVzZSBjYXBpdGFsaXphdGlvbiAoYG15YXBwU3Vic2VjdGlvbkZpbHRlcnhgKSBvciB1bmRlcnNjb3Jlc1xuICAgKiAgICAoYG15YXBwX3N1YnNlY3Rpb25fZmlsdGVyeGApLlxuICAgKiAgICA8L2Rpdj5cbiAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZhY3RvcnkgSWYgdGhlIGZpcnN0IGFyZ3VtZW50IHdhcyBhIHN0cmluZywgYSBmYWN0b3J5IGZ1bmN0aW9uIGZvciB0aGUgZmlsdGVyIHRvIGJlIHJlZ2lzdGVyZWQuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJlZ2lzdGVyZWQgZmlsdGVyIGluc3RhbmNlLCBvciBpZiBhIG1hcCBvZiBmaWx0ZXJzIHdhcyBwcm92aWRlZCB0aGVuIGEgbWFwXG4gICAqICAgIG9mIHRoZSByZWdpc3RlcmVkIGZpbHRlciBpbnN0YW5jZXMuXG4gICAqL1xuICBmdW5jdGlvbiByZWdpc3RlcihuYW1lLCBmYWN0b3J5KSB7XG4gICAgaWYgKGlzT2JqZWN0KG5hbWUpKSB7XG4gICAgICB2YXIgZmlsdGVycyA9IHt9O1xuICAgICAgZm9yRWFjaChuYW1lLCBmdW5jdGlvbihmaWx0ZXIsIGtleSkge1xuICAgICAgICBmaWx0ZXJzW2tleV0gPSByZWdpc3RlcihrZXksIGZpbHRlcik7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmaWx0ZXJzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJHByb3ZpZGUuZmFjdG9yeShuYW1lICsgc3VmZml4LCBmYWN0b3J5KTtcbiAgICB9XG4gIH1cbiAgdGhpcy5yZWdpc3RlciA9IHJlZ2lzdGVyO1xuXG4gIHRoaXMuJGdldCA9IFsnJGluamVjdG9yJywgZnVuY3Rpb24oJGluamVjdG9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHJldHVybiAkaW5qZWN0b3IuZ2V0KG5hbWUgKyBzdWZmaXgpO1xuICAgIH07XG4gIH1dO1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAvKiBnbG9iYWxcbiAgICBjdXJyZW5jeUZpbHRlcjogZmFsc2UsXG4gICAgZGF0ZUZpbHRlcjogZmFsc2UsXG4gICAgZmlsdGVyRmlsdGVyOiBmYWxzZSxcbiAgICBqc29uRmlsdGVyOiBmYWxzZSxcbiAgICBsaW1pdFRvRmlsdGVyOiBmYWxzZSxcbiAgICBsb3dlcmNhc2VGaWx0ZXI6IGZhbHNlLFxuICAgIG51bWJlckZpbHRlcjogZmFsc2UsXG4gICAgb3JkZXJCeUZpbHRlcjogZmFsc2UsXG4gICAgdXBwZXJjYXNlRmlsdGVyOiBmYWxzZVxuICAqL1xuXG4gIHJlZ2lzdGVyKCdjdXJyZW5jeScsIGN1cnJlbmN5RmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ2RhdGUnLCBkYXRlRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ2ZpbHRlcicsIGZpbHRlckZpbHRlcik7XG4gIHJlZ2lzdGVyKCdqc29uJywganNvbkZpbHRlcik7XG4gIHJlZ2lzdGVyKCdsaW1pdFRvJywgbGltaXRUb0ZpbHRlcik7XG4gIHJlZ2lzdGVyKCdsb3dlcmNhc2UnLCBsb3dlcmNhc2VGaWx0ZXIpO1xuICByZWdpc3RlcignbnVtYmVyJywgbnVtYmVyRmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ29yZGVyQnknLCBvcmRlckJ5RmlsdGVyKTtcbiAgcmVnaXN0ZXIoJ3VwcGVyY2FzZScsIHVwcGVyY2FzZUZpbHRlcik7XG59XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgZmlsdGVyXG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU2VsZWN0cyBhIHN1YnNldCBvZiBpdGVtcyBmcm9tIGBhcnJheWAgYW5kIHJldHVybnMgaXQgYXMgYSBuZXcgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvdXJjZSBhcnJheS5cbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiAgICoqTm90ZSoqOiBJZiB0aGUgYXJyYXkgY29udGFpbnMgb2JqZWN0cyB0aGF0IHJlZmVyZW5jZSB0aGVtc2VsdmVzLCBmaWx0ZXJpbmcgaXMgbm90IHBvc3NpYmxlLlxuICogPC9kaXY+XG4gKiBAcGFyYW0ge3N0cmluZ3xPYmplY3R8ZnVuY3Rpb24oKX0gZXhwcmVzc2lvbiBUaGUgcHJlZGljYXRlIHRvIGJlIHVzZWQgZm9yIHNlbGVjdGluZyBpdGVtcyBmcm9tXG4gKiAgIGBhcnJheWAuXG4gKlxuICogICBDYW4gYmUgb25lIG9mOlxuICpcbiAqICAgLSBgc3RyaW5nYDogVGhlIHN0cmluZyBpcyB1c2VkIGZvciBtYXRjaGluZyBhZ2FpbnN0IHRoZSBjb250ZW50cyBvZiB0aGUgYGFycmF5YC4gQWxsIHN0cmluZ3Mgb3JcbiAqICAgICBvYmplY3RzIHdpdGggc3RyaW5nIHByb3BlcnRpZXMgaW4gYGFycmF5YCB0aGF0IG1hdGNoIHRoaXMgc3RyaW5nIHdpbGwgYmUgcmV0dXJuZWQuIFRoaXMgYWxzb1xuICogICAgIGFwcGxpZXMgdG8gbmVzdGVkIG9iamVjdCBwcm9wZXJ0aWVzLlxuICogICAgIFRoZSBwcmVkaWNhdGUgY2FuIGJlIG5lZ2F0ZWQgYnkgcHJlZml4aW5nIHRoZSBzdHJpbmcgd2l0aCBgIWAuXG4gKlxuICogICAtIGBPYmplY3RgOiBBIHBhdHRlcm4gb2JqZWN0IGNhbiBiZSB1c2VkIHRvIGZpbHRlciBzcGVjaWZpYyBwcm9wZXJ0aWVzIG9uIG9iamVjdHMgY29udGFpbmVkXG4gKiAgICAgYnkgYGFycmF5YC4gRm9yIGV4YW1wbGUgYHtuYW1lOlwiTVwiLCBwaG9uZTpcIjFcIn1gIHByZWRpY2F0ZSB3aWxsIHJldHVybiBhbiBhcnJheSBvZiBpdGVtc1xuICogICAgIHdoaWNoIGhhdmUgcHJvcGVydHkgYG5hbWVgIGNvbnRhaW5pbmcgXCJNXCIgYW5kIHByb3BlcnR5IGBwaG9uZWAgY29udGFpbmluZyBcIjFcIi4gQSBzcGVjaWFsXG4gKiAgICAgcHJvcGVydHkgbmFtZSAoYCRgIGJ5IGRlZmF1bHQpIGNhbiBiZSB1c2VkIChlLmcuIGFzIGluIGB7JDogXCJ0ZXh0XCJ9YCkgdG8gYWNjZXB0IGEgbWF0Y2hcbiAqICAgICBhZ2FpbnN0IGFueSBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0IG9yIGl0cyBuZXN0ZWQgb2JqZWN0IHByb3BlcnRpZXMuIFRoYXQncyBlcXVpdmFsZW50IHRvIHRoZVxuICogICAgIHNpbXBsZSBzdWJzdHJpbmcgbWF0Y2ggd2l0aCBhIGBzdHJpbmdgIGFzIGRlc2NyaWJlZCBhYm92ZS4gVGhlIHNwZWNpYWwgcHJvcGVydHkgbmFtZSBjYW4gYmVcbiAqICAgICBvdmVyd3JpdHRlbiwgdXNpbmcgdGhlIGBhbnlQcm9wZXJ0eUtleWAgcGFyYW1ldGVyLlxuICogICAgIFRoZSBwcmVkaWNhdGUgY2FuIGJlIG5lZ2F0ZWQgYnkgcHJlZml4aW5nIHRoZSBzdHJpbmcgd2l0aCBgIWAuXG4gKiAgICAgRm9yIGV4YW1wbGUgYHtuYW1lOiBcIiFNXCJ9YCBwcmVkaWNhdGUgd2lsbCByZXR1cm4gYW4gYXJyYXkgb2YgaXRlbXMgd2hpY2ggaGF2ZSBwcm9wZXJ0eSBgbmFtZWBcbiAqICAgICBub3QgY29udGFpbmluZyBcIk1cIi5cbiAqXG4gKiAgICAgTm90ZSB0aGF0IGEgbmFtZWQgcHJvcGVydHkgd2lsbCBtYXRjaCBwcm9wZXJ0aWVzIG9uIHRoZSBzYW1lIGxldmVsIG9ubHksIHdoaWxlIHRoZSBzcGVjaWFsXG4gKiAgICAgYCRgIHByb3BlcnR5IHdpbGwgbWF0Y2ggcHJvcGVydGllcyBvbiB0aGUgc2FtZSBsZXZlbCBvciBkZWVwZXIuIEUuZy4gYW4gYXJyYXkgaXRlbSBsaWtlXG4gKiAgICAgYHtuYW1lOiB7Zmlyc3Q6ICdKb2huJywgbGFzdDogJ0RvZSd9fWAgd2lsbCAqKm5vdCoqIGJlIG1hdGNoZWQgYnkgYHtuYW1lOiAnSm9obid9YCwgYnV0XG4gKiAgICAgKip3aWxsKiogYmUgbWF0Y2hlZCBieSBgeyQ6ICdKb2huJ31gLlxuICpcbiAqICAgLSBgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBhcnJheSlgOiBBIHByZWRpY2F0ZSBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byB3cml0ZSBhcmJpdHJhcnkgZmlsdGVycy5cbiAqICAgICBUaGUgZnVuY3Rpb24gaXMgY2FsbGVkIGZvciBlYWNoIGVsZW1lbnQgb2YgdGhlIGFycmF5LCB3aXRoIHRoZSBlbGVtZW50LCBpdHMgaW5kZXgsIGFuZFxuICogICAgIHRoZSBlbnRpcmUgYXJyYXkgaXRzZWxmIGFzIGFyZ3VtZW50cy5cbiAqXG4gKiAgICAgVGhlIGZpbmFsIHJlc3VsdCBpcyBhbiBhcnJheSBvZiB0aG9zZSBlbGVtZW50cyB0aGF0IHRoZSBwcmVkaWNhdGUgcmV0dXJuZWQgdHJ1ZSBmb3IuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbihhY3R1YWwsIGV4cGVjdGVkKXx0cnVlfGZhbHNlfSBbY29tcGFyYXRvcl0gQ29tcGFyYXRvciB3aGljaCBpcyB1c2VkIGluXG4gKiAgICAgZGV0ZXJtaW5pbmcgaWYgdmFsdWVzIHJldHJpZXZlZCB1c2luZyBgZXhwcmVzc2lvbmAgKHdoZW4gaXQgaXMgbm90IGEgZnVuY3Rpb24pIHNob3VsZCBiZVxuICogICAgIGNvbnNpZGVyZWQgYSBtYXRjaCBiYXNlZCBvbiB0aGUgZXhwZWN0ZWQgdmFsdWUgKGZyb20gdGhlIGZpbHRlciBleHByZXNzaW9uKSBhbmQgYWN0dWFsXG4gKiAgICAgdmFsdWUgKGZyb20gdGhlIG9iamVjdCBpbiB0aGUgYXJyYXkpLlxuICpcbiAqICAgQ2FuIGJlIG9uZSBvZjpcbiAqXG4gKiAgIC0gYGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpYDpcbiAqICAgICBUaGUgZnVuY3Rpb24gd2lsbCBiZSBnaXZlbiB0aGUgb2JqZWN0IHZhbHVlIGFuZCB0aGUgcHJlZGljYXRlIHZhbHVlIHRvIGNvbXBhcmUgYW5kXG4gKiAgICAgc2hvdWxkIHJldHVybiB0cnVlIGlmIGJvdGggdmFsdWVzIHNob3VsZCBiZSBjb25zaWRlcmVkIGVxdWFsLlxuICpcbiAqICAgLSBgdHJ1ZWA6IEEgc2hvcnRoYW5kIGZvciBgZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCkgeyByZXR1cm4gYW5ndWxhci5lcXVhbHMoYWN0dWFsLCBleHBlY3RlZCl9YC5cbiAqICAgICBUaGlzIGlzIGVzc2VudGlhbGx5IHN0cmljdCBjb21wYXJpc29uIG9mIGV4cGVjdGVkIGFuZCBhY3R1YWwuXG4gKlxuICogICAtIGBmYWxzZWA6IEEgc2hvcnQgaGFuZCBmb3IgYSBmdW5jdGlvbiB3aGljaCB3aWxsIGxvb2sgZm9yIGEgc3Vic3RyaW5nIG1hdGNoIGluIGEgY2FzZVxuICogICAgIGluc2Vuc2l0aXZlIHdheS4gUHJpbWl0aXZlIHZhbHVlcyBhcmUgY29udmVydGVkIHRvIHN0cmluZ3MuIE9iamVjdHMgYXJlIG5vdCBjb21wYXJlZCBhZ2FpbnN0XG4gKiAgICAgcHJpbWl0aXZlcywgdW5sZXNzIHRoZXkgaGF2ZSBhIGN1c3RvbSBgdG9TdHJpbmdgIG1ldGhvZCAoZS5nLiBgRGF0ZWAgb2JqZWN0cykuXG4gKlxuICpcbiAqICAgRGVmYXVsdHMgdG8gYGZhbHNlYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gW2FueVByb3BlcnR5S2V5XSBUaGUgc3BlY2lhbCBwcm9wZXJ0eSBuYW1lIHRoYXQgbWF0Y2hlcyBhZ2FpbnN0IGFueSBwcm9wZXJ0eS5cbiAqICAgICBCeSBkZWZhdWx0IGAkYC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cImZpbHRlci1maWx0ZXJcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWluaXQ9XCJmcmllbmRzID0gW3tuYW1lOidKb2huJywgcGhvbmU6JzU1NS0xMjc2J30sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtuYW1lOidNYXJ5JywgcGhvbmU6JzgwMC1CSUctTUFSWSd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonTWlrZScsIHBob25lOic1NTUtNDMyMSd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonQWRhbScsIHBob25lOic1NTUtNTY3OCd9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bmFtZTonSnVsaWUnLCBwaG9uZTonNTU1LTg3NjUnfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25hbWU6J0p1bGlldHRlJywgcGhvbmU6JzU1NS01Njc4J31dXCI+PC9kaXY+XG5cbiAgICAgICA8bGFiZWw+U2VhcmNoOiA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2hUZXh0XCI+PC9sYWJlbD5cbiAgICAgICA8dGFibGUgaWQ9XCJzZWFyY2hUZXh0UmVzdWx0c1wiPlxuICAgICAgICAgPHRyPjx0aD5OYW1lPC90aD48dGg+UGhvbmU8L3RoPjwvdHI+XG4gICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBmaWx0ZXI6c2VhcmNoVGV4dFwiPlxuICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgPHRkPnt7ZnJpZW5kLnBob25lfX08L3RkPlxuICAgICAgICAgPC90cj5cbiAgICAgICA8L3RhYmxlPlxuICAgICAgIDxocj5cbiAgICAgICA8bGFiZWw+QW55OiA8aW5wdXQgbmctbW9kZWw9XCJzZWFyY2guJFwiPjwvbGFiZWw+IDxicj5cbiAgICAgICA8bGFiZWw+TmFtZSBvbmx5IDxpbnB1dCBuZy1tb2RlbD1cInNlYXJjaC5uYW1lXCI+PC9sYWJlbD48YnI+XG4gICAgICAgPGxhYmVsPlBob25lIG9ubHkgPGlucHV0IG5nLW1vZGVsPVwic2VhcmNoLnBob25lXCI+PC9sYWJlbD48YnI+XG4gICAgICAgPGxhYmVsPkVxdWFsaXR5IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cInN0cmljdFwiPjwvbGFiZWw+PGJyPlxuICAgICAgIDx0YWJsZSBpZD1cInNlYXJjaE9ialJlc3VsdHNcIj5cbiAgICAgICAgIDx0cj48dGg+TmFtZTwvdGg+PHRoPlBob25lPC90aD48L3RyPlxuICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZE9iaiBpbiBmcmllbmRzIHwgZmlsdGVyOnNlYXJjaDpzdHJpY3RcIj5cbiAgICAgICAgICAgPHRkPnt7ZnJpZW5kT2JqLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgIDx0ZD57e2ZyaWVuZE9iai5waG9uZX19PC90ZD5cbiAgICAgICAgIDwvdHI+XG4gICAgICAgPC90YWJsZT5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIGV4cGVjdEZyaWVuZE5hbWVzID0gZnVuY3Rpb24oZXhwZWN0ZWROYW1lcywga2V5KSB7XG4gICAgICAgICBlbGVtZW50LmFsbChieS5yZXBlYXRlcihrZXkgKyAnIGluIGZyaWVuZHMnKS5jb2x1bW4oa2V5ICsgJy5uYW1lJykpLnRoZW4oZnVuY3Rpb24oYXJyKSB7XG4gICAgICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uKHdkLCBpKSB7XG4gICAgICAgICAgICAgZXhwZWN0KHdkLmdldFRleHQoKSkudG9NYXRjaChleHBlY3RlZE5hbWVzW2ldKTtcbiAgICAgICAgICAgfSk7XG4gICAgICAgICB9KTtcbiAgICAgICB9O1xuXG4gICAgICAgaXQoJ3Nob3VsZCBzZWFyY2ggYWNyb3NzIGFsbCBmaWVsZHMgd2hlbiBmaWx0ZXJpbmcgd2l0aCBhIHN0cmluZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIHNlYXJjaFRleHQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWFyY2hUZXh0JykpO1xuICAgICAgICAgc2VhcmNoVGV4dC5jbGVhcigpO1xuICAgICAgICAgc2VhcmNoVGV4dC5zZW5kS2V5cygnbScpO1xuICAgICAgICAgZXhwZWN0RnJpZW5kTmFtZXMoWydNYXJ5JywgJ01pa2UnLCAnQWRhbSddLCAnZnJpZW5kJyk7XG5cbiAgICAgICAgIHNlYXJjaFRleHQuY2xlYXIoKTtcbiAgICAgICAgIHNlYXJjaFRleHQuc2VuZEtleXMoJzc2Jyk7XG4gICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ0pvaG4nLCAnSnVsaWUnXSwgJ2ZyaWVuZCcpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBzZWFyY2ggaW4gc3BlY2lmaWMgZmllbGRzIHdoZW4gZmlsdGVyaW5nIHdpdGggYSBwcmVkaWNhdGUgb2JqZWN0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgc2VhcmNoQW55ID0gZWxlbWVudChieS5tb2RlbCgnc2VhcmNoLiQnKSk7XG4gICAgICAgICBzZWFyY2hBbnkuY2xlYXIoKTtcbiAgICAgICAgIHNlYXJjaEFueS5zZW5kS2V5cygnaScpO1xuICAgICAgICAgZXhwZWN0RnJpZW5kTmFtZXMoWydNYXJ5JywgJ01pa2UnLCAnSnVsaWUnLCAnSnVsaWV0dGUnXSwgJ2ZyaWVuZE9iaicpO1xuICAgICAgIH0pO1xuICAgICAgIGl0KCdzaG91bGQgdXNlIGEgZXF1YWwgY29tcGFyaXNvbiB3aGVuIGNvbXBhcmF0b3IgaXMgdHJ1ZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIHNlYXJjaE5hbWUgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzZWFyY2gubmFtZScpKTtcbiAgICAgICAgIHZhciBzdHJpY3QgPSBlbGVtZW50KGJ5Lm1vZGVsKCdzdHJpY3QnKSk7XG4gICAgICAgICBzZWFyY2hOYW1lLmNsZWFyKCk7XG4gICAgICAgICBzZWFyY2hOYW1lLnNlbmRLZXlzKCdKdWxpZScpO1xuICAgICAgICAgc3RyaWN0LmNsaWNrKCk7XG4gICAgICAgICBleHBlY3RGcmllbmROYW1lcyhbJ0p1bGllJ10sICdmcmllbmRPYmonKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbmZ1bmN0aW9uIGZpbHRlckZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBleHByZXNzaW9uLCBjb21wYXJhdG9yLCBhbnlQcm9wZXJ0eUtleSkge1xuICAgIGlmICghaXNBcnJheUxpa2UoYXJyYXkpKSB7XG4gICAgICBpZiAoYXJyYXkgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBtaW5FcnIoJ2ZpbHRlcicpKCdub3RhcnJheScsICdFeHBlY3RlZCBhcnJheSBidXQgcmVjZWl2ZWQ6IHswfScsIGFycmF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBhbnlQcm9wZXJ0eUtleSA9IGFueVByb3BlcnR5S2V5IHx8ICckJztcbiAgICB2YXIgZXhwcmVzc2lvblR5cGUgPSBnZXRUeXBlRm9yRmlsdGVyKGV4cHJlc3Npb24pO1xuICAgIHZhciBwcmVkaWNhdGVGbjtcbiAgICB2YXIgbWF0Y2hBZ2FpbnN0QW55UHJvcDtcblxuICAgIHN3aXRjaCAoZXhwcmVzc2lvblR5cGUpIHtcbiAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgcHJlZGljYXRlRm4gPSBleHByZXNzaW9uO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgY2FzZSAnbnVsbCc6XG4gICAgICBjYXNlICdudW1iZXInOlxuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgbWF0Y2hBZ2FpbnN0QW55UHJvcCA9IHRydWU7XG4gICAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHByZWRpY2F0ZUZuID0gY3JlYXRlUHJlZGljYXRlRm4oZXhwcmVzc2lvbiwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGFycmF5LCBwcmVkaWNhdGVGbik7XG4gIH07XG59XG5cbi8vIEhlbHBlciBmdW5jdGlvbnMgZm9yIGBmaWx0ZXJGaWx0ZXJgXG5mdW5jdGlvbiBjcmVhdGVQcmVkaWNhdGVGbihleHByZXNzaW9uLCBjb21wYXJhdG9yLCBhbnlQcm9wZXJ0eUtleSwgbWF0Y2hBZ2FpbnN0QW55UHJvcCkge1xuICB2YXIgc2hvdWxkTWF0Y2hQcmltaXRpdmVzID0gaXNPYmplY3QoZXhwcmVzc2lvbikgJiYgKGFueVByb3BlcnR5S2V5IGluIGV4cHJlc3Npb24pO1xuICB2YXIgcHJlZGljYXRlRm47XG5cbiAgaWYgKGNvbXBhcmF0b3IgPT09IHRydWUpIHtcbiAgICBjb21wYXJhdG9yID0gZXF1YWxzO1xuICB9IGVsc2UgaWYgKCFpc0Z1bmN0aW9uKGNvbXBhcmF0b3IpKSB7XG4gICAgY29tcGFyYXRvciA9IGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpIHtcbiAgICAgIGlmIChpc1VuZGVmaW5lZChhY3R1YWwpKSB7XG4gICAgICAgIC8vIE5vIHN1YnN0cmluZyBtYXRjaGluZyBhZ2FpbnN0IGB1bmRlZmluZWRgXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICgoYWN0dWFsID09PSBudWxsKSB8fCAoZXhwZWN0ZWQgPT09IG51bGwpKSB7XG4gICAgICAgIC8vIE5vIHN1YnN0cmluZyBtYXRjaGluZyBhZ2FpbnN0IGBudWxsYDsgb25seSBtYXRjaCBhZ2FpbnN0IGBudWxsYFxuICAgICAgICByZXR1cm4gYWN0dWFsID09PSBleHBlY3RlZDtcbiAgICAgIH1cbiAgICAgIGlmIChpc09iamVjdChleHBlY3RlZCkgfHwgKGlzT2JqZWN0KGFjdHVhbCkgJiYgIWhhc0N1c3RvbVRvU3RyaW5nKGFjdHVhbCkpKSB7XG4gICAgICAgIC8vIFNob3VsZCBub3QgY29tcGFyZSBwcmltaXRpdmVzIGFnYWluc3Qgb2JqZWN0cywgdW5sZXNzIHRoZXkgaGF2ZSBjdXN0b20gYHRvU3RyaW5nYCBtZXRob2RcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBhY3R1YWwgPSBsb3dlcmNhc2UoJycgKyBhY3R1YWwpO1xuICAgICAgZXhwZWN0ZWQgPSBsb3dlcmNhc2UoJycgKyBleHBlY3RlZCk7XG4gICAgICByZXR1cm4gYWN0dWFsLmluZGV4T2YoZXhwZWN0ZWQpICE9PSAtMTtcbiAgICB9O1xuICB9XG5cbiAgcHJlZGljYXRlRm4gPSBmdW5jdGlvbihpdGVtKSB7XG4gICAgaWYgKHNob3VsZE1hdGNoUHJpbWl0aXZlcyAmJiAhaXNPYmplY3QoaXRlbSkpIHtcbiAgICAgIHJldHVybiBkZWVwQ29tcGFyZShpdGVtLCBleHByZXNzaW9uW2FueVByb3BlcnR5S2V5XSwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIGZhbHNlKTtcbiAgICB9XG4gICAgcmV0dXJuIGRlZXBDb21wYXJlKGl0ZW0sIGV4cHJlc3Npb24sIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5LCBtYXRjaEFnYWluc3RBbnlQcm9wKTtcbiAgfTtcblxuICByZXR1cm4gcHJlZGljYXRlRm47XG59XG5cbmZ1bmN0aW9uIGRlZXBDb21wYXJlKGFjdHVhbCwgZXhwZWN0ZWQsIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5LCBtYXRjaEFnYWluc3RBbnlQcm9wLCBkb250TWF0Y2hXaG9sZU9iamVjdCkge1xuICB2YXIgYWN0dWFsVHlwZSA9IGdldFR5cGVGb3JGaWx0ZXIoYWN0dWFsKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGVGb3JGaWx0ZXIoZXhwZWN0ZWQpO1xuXG4gIGlmICgoZXhwZWN0ZWRUeXBlID09PSAnc3RyaW5nJykgJiYgKGV4cGVjdGVkLmNoYXJBdCgwKSA9PT0gJyEnKSkge1xuICAgIHJldHVybiAhZGVlcENvbXBhcmUoYWN0dWFsLCBleHBlY3RlZC5zdWJzdHJpbmcoMSksIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5LCBtYXRjaEFnYWluc3RBbnlQcm9wKTtcbiAgfSBlbHNlIGlmIChpc0FycmF5KGFjdHVhbCkpIHtcbiAgICAvLyBJbiBjYXNlIGBhY3R1YWxgIGlzIGFuIGFycmF5LCBjb25zaWRlciBpdCBhIG1hdGNoXG4gICAgLy8gaWYgQU5ZIG9mIGl0J3MgaXRlbXMgbWF0Y2hlcyBgZXhwZWN0ZWRgXG4gICAgcmV0dXJuIGFjdHVhbC5zb21lKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiBkZWVwQ29tcGFyZShpdGVtLCBleHBlY3RlZCwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIG1hdGNoQWdhaW5zdEFueVByb3ApO1xuICAgIH0pO1xuICB9XG5cbiAgc3dpdGNoIChhY3R1YWxUeXBlKSB7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHZhciBrZXk7XG4gICAgICBpZiAobWF0Y2hBZ2FpbnN0QW55UHJvcCkge1xuICAgICAgICBmb3IgKGtleSBpbiBhY3R1YWwpIHtcbiAgICAgICAgICAvLyBVbmRlciBjZXJ0YWluLCByYXJlLCBjaXJjdW1zdGFuY2VzLCBrZXkgbWF5IG5vdCBiZSBhIHN0cmluZyBhbmQgYGNoYXJBdGAgd2lsbCBiZSB1bmRlZmluZWRcbiAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzE1NjQ0XG4gICAgICAgICAgaWYgKGtleS5jaGFyQXQgJiYgKGtleS5jaGFyQXQoMCkgIT09ICckJykgJiZcbiAgICAgICAgICAgICAgZGVlcENvbXBhcmUoYWN0dWFsW2tleV0sIGV4cGVjdGVkLCBjb21wYXJhdG9yLCBhbnlQcm9wZXJ0eUtleSwgdHJ1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9udE1hdGNoV2hvbGVPYmplY3QgPyBmYWxzZSA6IGRlZXBDb21wYXJlKGFjdHVhbCwgZXhwZWN0ZWQsIGNvbXBhcmF0b3IsIGFueVByb3BlcnR5S2V5LCBmYWxzZSk7XG4gICAgICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yIChrZXkgaW4gZXhwZWN0ZWQpIHtcbiAgICAgICAgICB2YXIgZXhwZWN0ZWRWYWwgPSBleHBlY3RlZFtrZXldO1xuICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGV4cGVjdGVkVmFsKSB8fCBpc1VuZGVmaW5lZChleHBlY3RlZFZhbCkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBtYXRjaEFueVByb3BlcnR5ID0ga2V5ID09PSBhbnlQcm9wZXJ0eUtleTtcbiAgICAgICAgICB2YXIgYWN0dWFsVmFsID0gbWF0Y2hBbnlQcm9wZXJ0eSA/IGFjdHVhbCA6IGFjdHVhbFtrZXldO1xuICAgICAgICAgIGlmICghZGVlcENvbXBhcmUoYWN0dWFsVmFsLCBleHBlY3RlZFZhbCwgY29tcGFyYXRvciwgYW55UHJvcGVydHlLZXksIG1hdGNoQW55UHJvcGVydHksIG1hdGNoQW55UHJvcGVydHkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmF0b3IoYWN0dWFsLCBleHBlY3RlZCk7XG4gICAgICB9XG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gY29tcGFyYXRvcihhY3R1YWwsIGV4cGVjdGVkKTtcbiAgfVxufVxuXG4vLyBVc2VkIGZvciBlYXNpbHkgZGlmZmVyZW50aWF0aW5nIGJldHdlZW4gYG51bGxgIGFuZCBhY3R1YWwgYG9iamVjdGBcbmZ1bmN0aW9uIGdldFR5cGVGb3JGaWx0ZXIodmFsKSB7XG4gIHJldHVybiAodmFsID09PSBudWxsKSA/ICdudWxsJyA6IHR5cGVvZiB2YWw7XG59XG5cbnZhciBNQVhfRElHSVRTID0gMjI7XG52YXIgREVDSU1BTF9TRVAgPSAnLic7XG52YXIgWkVST19DSEFSID0gJzAnO1xuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGN1cnJlbmN5XG4gKiBAa2luZCBmdW5jdGlvblxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRm9ybWF0cyBhIG51bWJlciBhcyBhIGN1cnJlbmN5IChpZSAkMSwyMzQuNTYpLiBXaGVuIG5vIGN1cnJlbmN5IHN5bWJvbCBpcyBwcm92aWRlZCwgZGVmYXVsdFxuICogc3ltYm9sIGZvciBjdXJyZW50IGxvY2FsZSBpcyB1c2VkLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBhbW91bnQgSW5wdXQgdG8gZmlsdGVyLlxuICogQHBhcmFtIHtzdHJpbmc9fSBzeW1ib2wgQ3VycmVuY3kgc3ltYm9sIG9yIGlkZW50aWZpZXIgdG8gYmUgZGlzcGxheWVkLlxuICogQHBhcmFtIHtudW1iZXI9fSBmcmFjdGlvblNpemUgTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHJvdW5kIHRoZSBhbW91bnQgdG8sIGRlZmF1bHRzIHRvIGRlZmF1bHQgbWF4IGZyYWN0aW9uIHNpemUgZm9yIGN1cnJlbnQgbG9jYWxlXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBGb3JtYXR0ZWQgbnVtYmVyLlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwiY3VycmVuY3lFeGFtcGxlXCIgbmFtZT1cImN1cnJlbmN5LWZpbHRlclwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICBhbmd1bGFyLm1vZHVsZSgnY3VycmVuY3lFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLmFtb3VudCA9IDEyMzQuNTY7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cImFtb3VudFwiIGFyaWEtbGFiZWw9XCJhbW91bnRcIj4gPGJyPlxuICAgICAgICAgZGVmYXVsdCBjdXJyZW5jeSBzeW1ib2wgKCQpOiA8c3BhbiBpZD1cImN1cnJlbmN5LWRlZmF1bHRcIj57e2Ftb3VudCB8IGN1cnJlbmN5fX08L3NwYW4+PGJyPlxuICAgICAgICAgY3VzdG9tIGN1cnJlbmN5IGlkZW50aWZpZXIgKFVTRCQpOiA8c3BhbiBpZD1cImN1cnJlbmN5LWN1c3RvbVwiPnt7YW1vdW50IHwgY3VycmVuY3k6XCJVU0QkXCJ9fTwvc3Bhbj48YnI+XG4gICAgICAgICBubyBmcmFjdGlvbnMgKDApOiA8c3BhbiBpZD1cImN1cnJlbmN5LW5vLWZyYWN0aW9uc1wiPnt7YW1vdW50IHwgY3VycmVuY3k6XCJVU0QkXCI6MH19PC9zcGFuPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGluaXQgd2l0aCAxMjM0LjU2JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY3VycmVuY3ktZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJyQxLDIzNC41NicpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWN1c3RvbScpKS5nZXRUZXh0KCkpLnRvQmUoJ1VTRCQxLDIzNC41NicpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LW5vLWZyYWN0aW9ucycpKS5nZXRUZXh0KCkpLnRvQmUoJ1VTRCQxLDIzNScpO1xuICAgICAgIH0pO1xuICAgICAgIGl0KCdzaG91bGQgdXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PT0gJ3NhZmFyaScpIHtcbiAgICAgICAgICAgLy8gU2FmYXJpIGRvZXMgbm90IHVuZGVyc3RhbmQgdGhlIG1pbnVzIGtleS4gU2VlXG4gICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzQ4MVxuICAgICAgICAgICByZXR1cm47XG4gICAgICAgICB9XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdhbW91bnQnKSkuY2xlYXIoKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2Ftb3VudCcpKS5zZW5kS2V5cygnLTEyMzQnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1kZWZhdWx0JykpLmdldFRleHQoKSkudG9CZSgnLSQxLDIzNC4wMCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2N1cnJlbmN5LWN1c3RvbScpKS5nZXRUZXh0KCkpLnRvQmUoJy1VU0QkMSwyMzQuMDAnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXJyZW5jeS1uby1mcmFjdGlvbnMnKSkuZ2V0VGV4dCgpKS50b0JlKCctVVNEJDEsMjM0Jyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuY3VycmVuY3lGaWx0ZXIuJGluamVjdCA9IFsnJGxvY2FsZSddO1xuZnVuY3Rpb24gY3VycmVuY3lGaWx0ZXIoJGxvY2FsZSkge1xuICB2YXIgZm9ybWF0cyA9ICRsb2NhbGUuTlVNQkVSX0ZPUk1BVFM7XG4gIHJldHVybiBmdW5jdGlvbihhbW91bnQsIGN1cnJlbmN5U3ltYm9sLCBmcmFjdGlvblNpemUpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQoY3VycmVuY3lTeW1ib2wpKSB7XG4gICAgICBjdXJyZW5jeVN5bWJvbCA9IGZvcm1hdHMuQ1VSUkVOQ1lfU1lNO1xuICAgIH1cblxuICAgIGlmIChpc1VuZGVmaW5lZChmcmFjdGlvblNpemUpKSB7XG4gICAgICBmcmFjdGlvblNpemUgPSBmb3JtYXRzLlBBVFRFUk5TWzFdLm1heEZyYWM7XG4gICAgfVxuXG4gICAgLy8gaWYgbnVsbCBvciB1bmRlZmluZWQgcGFzcyBpdCB0aHJvdWdoXG4gICAgcmV0dXJuIChhbW91bnQgPT0gbnVsbClcbiAgICAgICAgPyBhbW91bnRcbiAgICAgICAgOiBmb3JtYXROdW1iZXIoYW1vdW50LCBmb3JtYXRzLlBBVFRFUk5TWzFdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCwgZnJhY3Rpb25TaXplKS5cbiAgICAgICAgICAgIHJlcGxhY2UoL1xcdTAwQTQvZywgY3VycmVuY3lTeW1ib2wpO1xuICB9O1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIG51bWJlclxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEZvcm1hdHMgYSBudW1iZXIgYXMgdGV4dC5cbiAqXG4gKiBJZiB0aGUgaW5wdXQgaXMgbnVsbCBvciB1bmRlZmluZWQsIGl0IHdpbGwganVzdCBiZSByZXR1cm5lZC5cbiAqIElmIHRoZSBpbnB1dCBpcyBpbmZpbml0ZSAoSW5maW5pdHkgb3IgLUluZmluaXR5KSwgdGhlIEluZmluaXR5IHN5bWJvbCAn4oieJyBvciAnLeKInicgaXMgcmV0dXJuZWQsIHJlc3BlY3RpdmVseS5cbiAqIElmIHRoZSBpbnB1dCBpcyBub3QgYSBudW1iZXIgYW4gZW1wdHkgc3RyaW5nIGlzIHJldHVybmVkLlxuICpcbiAqXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd9IG51bWJlciBOdW1iZXIgdG8gZm9ybWF0LlxuICogQHBhcmFtIHsobnVtYmVyfHN0cmluZyk9fSBmcmFjdGlvblNpemUgTnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzIHRvIHJvdW5kIHRoZSBudW1iZXIgdG8uXG4gKiBJZiB0aGlzIGlzIG5vdCBwcm92aWRlZCB0aGVuIHRoZSBmcmFjdGlvbiBzaXplIGlzIGNvbXB1dGVkIGZyb20gdGhlIGN1cnJlbnQgbG9jYWxlJ3MgbnVtYmVyXG4gKiBmb3JtYXR0aW5nIHBhdHRlcm4uIEluIHRoZSBjYXNlIG9mIHRoZSBkZWZhdWx0IGxvY2FsZSwgaXQgd2lsbCBiZSAzLlxuICogQHJldHVybnMge3N0cmluZ30gTnVtYmVyIHJvdW5kZWQgdG8gYGZyYWN0aW9uU2l6ZWAgYXBwcm9wcmlhdGVseSBmb3JtYXR0ZWQgYmFzZWQgb24gdGhlIGN1cnJlbnRcbiAqICAgICAgICAgICAgICAgICAgIGxvY2FsZSAoZS5nLiwgaW4gdGhlIGVuX1VTIGxvY2FsZSBpdCB3aWxsIGhhdmUgXCIuXCIgYXMgdGhlIGRlY2ltYWwgc2VwYXJhdG9yIGFuZFxuICogICAgICAgICAgICAgICAgICAgaW5jbHVkZSBcIixcIiBncm91cCBzZXBhcmF0b3JzIGFmdGVyIGVhY2ggdGhpcmQgZGlnaXQpLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJudW1iZXJGaWx0ZXJFeGFtcGxlXCIgbmFtZT1cIm51bWJlci1maWx0ZXJcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ251bWJlckZpbHRlckV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAkc2NvcGUudmFsID0gMTIzNC41Njc4OTtcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8bGFiZWw+RW50ZXIgbnVtYmVyOiA8aW5wdXQgbmctbW9kZWw9J3ZhbCc+PC9sYWJlbD48YnI+XG4gICAgICAgICBEZWZhdWx0IGZvcm1hdHRpbmc6IDxzcGFuIGlkPSdudW1iZXItZGVmYXVsdCc+e3t2YWwgfCBudW1iZXJ9fTwvc3Bhbj48YnI+XG4gICAgICAgICBObyBmcmFjdGlvbnM6IDxzcGFuPnt7dmFsIHwgbnVtYmVyOjB9fTwvc3Bhbj48YnI+XG4gICAgICAgICBOZWdhdGl2ZSBudW1iZXI6IDxzcGFuPnt7LXZhbCB8IG51bWJlcjo0fX08L3NwYW4+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgZm9ybWF0IG51bWJlcnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdudW1iZXItZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJzEsMjM0LjU2OCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndmFsIHwgbnVtYmVyOjAnKSkuZ2V0VGV4dCgpKS50b0JlKCcxLDIzNScpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnLXZhbCB8IG51bWJlcjo0JykpLmdldFRleHQoKSkudG9CZSgnLTEsMjM0LjU2NzknKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgdXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCd2YWwnKSkuY2xlYXIoKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbCcpKS5zZW5kS2V5cygnMzM3NC4zMzMnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdudW1iZXItZGVmYXVsdCcpKS5nZXRUZXh0KCkpLnRvQmUoJzMsMzc0LjMzMycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndmFsIHwgbnVtYmVyOjAnKSkuZ2V0VGV4dCgpKS50b0JlKCczLDM3NCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnLXZhbCB8IG51bWJlcjo0JykpLmdldFRleHQoKSkudG9CZSgnLTMsMzc0LjMzMzAnKTtcbiAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbm51bWJlckZpbHRlci4kaW5qZWN0ID0gWyckbG9jYWxlJ107XG5mdW5jdGlvbiBudW1iZXJGaWx0ZXIoJGxvY2FsZSkge1xuICB2YXIgZm9ybWF0cyA9ICRsb2NhbGUuTlVNQkVSX0ZPUk1BVFM7XG4gIHJldHVybiBmdW5jdGlvbihudW1iZXIsIGZyYWN0aW9uU2l6ZSkge1xuXG4gICAgLy8gaWYgbnVsbCBvciB1bmRlZmluZWQgcGFzcyBpdCB0aHJvdWdoXG4gICAgcmV0dXJuIChudW1iZXIgPT0gbnVsbClcbiAgICAgICAgPyBudW1iZXJcbiAgICAgICAgOiBmb3JtYXROdW1iZXIobnVtYmVyLCBmb3JtYXRzLlBBVFRFUk5TWzBdLCBmb3JtYXRzLkdST1VQX1NFUCwgZm9ybWF0cy5ERUNJTUFMX1NFUCxcbiAgICAgICAgICAgICAgICAgICAgICAgZnJhY3Rpb25TaXplKTtcbiAgfTtcbn1cblxuLyoqXG4gKiBQYXJzZSBhIG51bWJlciAoYXMgYSBzdHJpbmcpIGludG8gdGhyZWUgY29tcG9uZW50cyB0aGF0IGNhbiBiZSB1c2VkXG4gKiBmb3IgZm9ybWF0dGluZyB0aGUgbnVtYmVyLlxuICpcbiAqIChTaWduaWZpY2FudCBiaXRzIG9mIHRoaXMgcGFyc2UgYWxnb3JpdGhtIGNhbWUgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vTWlrZU1jbC9iaWcuanMvKVxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gbnVtU3RyIFRoZSBudW1iZXIgdG8gcGFyc2VcbiAqIEByZXR1cm4ge29iamVjdH0gQW4gb2JqZWN0IGRlc2NyaWJpbmcgdGhpcyBudW1iZXIsIGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBrZXlzOlxuICogIC0gZCA6IGFuIGFycmF5IG9mIGRpZ2l0cyBjb250YWluaW5nIGxlYWRpbmcgemVyb3MgYXMgbmVjZXNzYXJ5XG4gKiAgLSBpIDogdGhlIG51bWJlciBvZiB0aGUgZGlnaXRzIGluIGBkYCB0aGF0IGFyZSB0byB0aGUgbGVmdCBvZiB0aGUgZGVjaW1hbCBwb2ludFxuICogIC0gZSA6IHRoZSBleHBvbmVudCBmb3IgbnVtYmVycyB0aGF0IHdvdWxkIG5lZWQgbW9yZSB0aGFuIGBNQVhfRElHSVRTYCBkaWdpdHMgaW4gYGRgXG4gKlxuICovXG5mdW5jdGlvbiBwYXJzZShudW1TdHIpIHtcbiAgdmFyIGV4cG9uZW50ID0gMCwgZGlnaXRzLCBudW1iZXJPZkludGVnZXJEaWdpdHM7XG4gIHZhciBpLCBqLCB6ZXJvcztcblxuICAvLyBEZWNpbWFsIHBvaW50P1xuICBpZiAoKG51bWJlck9mSW50ZWdlckRpZ2l0cyA9IG51bVN0ci5pbmRleE9mKERFQ0lNQUxfU0VQKSkgPiAtMSkge1xuICAgIG51bVN0ciA9IG51bVN0ci5yZXBsYWNlKERFQ0lNQUxfU0VQLCAnJyk7XG4gIH1cblxuICAvLyBFeHBvbmVudGlhbCBmb3JtP1xuICBpZiAoKGkgPSBudW1TdHIuc2VhcmNoKC9lL2kpKSA+IDApIHtcbiAgICAvLyBXb3JrIG91dCB0aGUgZXhwb25lbnQuXG4gICAgaWYgKG51bWJlck9mSW50ZWdlckRpZ2l0cyA8IDApIG51bWJlck9mSW50ZWdlckRpZ2l0cyA9IGk7XG4gICAgbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzICs9ICtudW1TdHIuc2xpY2UoaSArIDEpO1xuICAgIG51bVN0ciA9IG51bVN0ci5zdWJzdHJpbmcoMCwgaSk7XG4gIH0gZWxzZSBpZiAobnVtYmVyT2ZJbnRlZ2VyRGlnaXRzIDwgMCkge1xuICAgIC8vIFRoZXJlIHdhcyBubyBkZWNpbWFsIHBvaW50IG9yIGV4cG9uZW50IHNvIGl0IGlzIGFuIGludGVnZXIuXG4gICAgbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzID0gbnVtU3RyLmxlbmd0aDtcbiAgfVxuXG4gIC8vIENvdW50IHRoZSBudW1iZXIgb2YgbGVhZGluZyB6ZXJvcy5cbiAgZm9yIChpID0gMDsgbnVtU3RyLmNoYXJBdChpKSA9PT0gWkVST19DSEFSOyBpKyspIHsgLyogZW1wdHkgKi8gfVxuXG4gIGlmIChpID09PSAoemVyb3MgPSBudW1TdHIubGVuZ3RoKSkge1xuICAgIC8vIFRoZSBkaWdpdHMgYXJlIGFsbCB6ZXJvLlxuICAgIGRpZ2l0cyA9IFswXTtcbiAgICBudW1iZXJPZkludGVnZXJEaWdpdHMgPSAxO1xuICB9IGVsc2Uge1xuICAgIC8vIENvdW50IHRoZSBudW1iZXIgb2YgdHJhaWxpbmcgemVyb3NcbiAgICB6ZXJvcy0tO1xuICAgIHdoaWxlIChudW1TdHIuY2hhckF0KHplcm9zKSA9PT0gWkVST19DSEFSKSB6ZXJvcy0tO1xuXG4gICAgLy8gVHJhaWxpbmcgemVyb3MgYXJlIGluc2lnbmlmaWNhbnQgc28gaWdub3JlIHRoZW1cbiAgICBudW1iZXJPZkludGVnZXJEaWdpdHMgLT0gaTtcbiAgICBkaWdpdHMgPSBbXTtcbiAgICAvLyBDb252ZXJ0IHN0cmluZyB0byBhcnJheSBvZiBkaWdpdHMgd2l0aG91dCBsZWFkaW5nL3RyYWlsaW5nIHplcm9zLlxuICAgIGZvciAoaiA9IDA7IGkgPD0gemVyb3M7IGkrKywgaisrKSB7XG4gICAgICBkaWdpdHNbal0gPSArbnVtU3RyLmNoYXJBdChpKTtcbiAgICB9XG4gIH1cblxuICAvLyBJZiB0aGUgbnVtYmVyIG92ZXJmbG93cyB0aGUgbWF4aW11bSBhbGxvd2VkIGRpZ2l0cyB0aGVuIHVzZSBhbiBleHBvbmVudC5cbiAgaWYgKG51bWJlck9mSW50ZWdlckRpZ2l0cyA+IE1BWF9ESUdJVFMpIHtcbiAgICBkaWdpdHMgPSBkaWdpdHMuc3BsaWNlKDAsIE1BWF9ESUdJVFMgLSAxKTtcbiAgICBleHBvbmVudCA9IG51bWJlck9mSW50ZWdlckRpZ2l0cyAtIDE7XG4gICAgbnVtYmVyT2ZJbnRlZ2VyRGlnaXRzID0gMTtcbiAgfVxuXG4gIHJldHVybiB7IGQ6IGRpZ2l0cywgZTogZXhwb25lbnQsIGk6IG51bWJlck9mSW50ZWdlckRpZ2l0cyB9O1xufVxuXG4vKipcbiAqIFJvdW5kIHRoZSBwYXJzZWQgbnVtYmVyIHRvIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzXG4gKiBUaGlzIGZ1bmN0aW9uIGNoYW5nZWQgdGhlIHBhcnNlZE51bWJlciBpbi1wbGFjZVxuICovXG5mdW5jdGlvbiByb3VuZE51bWJlcihwYXJzZWROdW1iZXIsIGZyYWN0aW9uU2l6ZSwgbWluRnJhYywgbWF4RnJhYykge1xuICAgIHZhciBkaWdpdHMgPSBwYXJzZWROdW1iZXIuZDtcbiAgICB2YXIgZnJhY3Rpb25MZW4gPSBkaWdpdHMubGVuZ3RoIC0gcGFyc2VkTnVtYmVyLmk7XG5cbiAgICAvLyBkZXRlcm1pbmUgZnJhY3Rpb25TaXplIGlmIGl0IGlzIG5vdCBzcGVjaWZpZWQ7IGArZnJhY3Rpb25TaXplYCBjb252ZXJ0cyBpdCB0byBhIG51bWJlclxuICAgIGZyYWN0aW9uU2l6ZSA9IChpc1VuZGVmaW5lZChmcmFjdGlvblNpemUpKSA/IE1hdGgubWluKE1hdGgubWF4KG1pbkZyYWMsIGZyYWN0aW9uTGVuKSwgbWF4RnJhYykgOiArZnJhY3Rpb25TaXplO1xuXG4gICAgLy8gVGhlIGluZGV4IG9mIHRoZSBkaWdpdCB0byB3aGVyZSByb3VuZGluZyBpcyB0byBvY2N1clxuICAgIHZhciByb3VuZEF0ID0gZnJhY3Rpb25TaXplICsgcGFyc2VkTnVtYmVyLmk7XG4gICAgdmFyIGRpZ2l0ID0gZGlnaXRzW3JvdW5kQXRdO1xuXG4gICAgaWYgKHJvdW5kQXQgPiAwKSB7XG4gICAgICAvLyBEcm9wIGZyYWN0aW9uYWwgZGlnaXRzIGJleW9uZCBgcm91bmRBdGBcbiAgICAgIGRpZ2l0cy5zcGxpY2UoTWF0aC5tYXgocGFyc2VkTnVtYmVyLmksIHJvdW5kQXQpKTtcblxuICAgICAgLy8gU2V0IG5vbi1mcmFjdGlvbmFsIGRpZ2l0cyBiZXlvbmQgYHJvdW5kQXRgIHRvIDBcbiAgICAgIGZvciAodmFyIGogPSByb3VuZEF0OyBqIDwgZGlnaXRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRpZ2l0c1tqXSA9IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIHJvdW5kZWQgdG8gemVybyBzbyByZXNldCB0aGUgcGFyc2VkTnVtYmVyXG4gICAgICBmcmFjdGlvbkxlbiA9IE1hdGgubWF4KDAsIGZyYWN0aW9uTGVuKTtcbiAgICAgIHBhcnNlZE51bWJlci5pID0gMTtcbiAgICAgIGRpZ2l0cy5sZW5ndGggPSBNYXRoLm1heCgxLCByb3VuZEF0ID0gZnJhY3Rpb25TaXplICsgMSk7XG4gICAgICBkaWdpdHNbMF0gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCByb3VuZEF0OyBpKyspIGRpZ2l0c1tpXSA9IDA7XG4gICAgfVxuXG4gICAgaWYgKGRpZ2l0ID49IDUpIHtcbiAgICAgIGlmIChyb3VuZEF0IC0gMSA8IDApIHtcbiAgICAgICAgZm9yICh2YXIgayA9IDA7IGsgPiByb3VuZEF0OyBrLS0pIHtcbiAgICAgICAgICBkaWdpdHMudW5zaGlmdCgwKTtcbiAgICAgICAgICBwYXJzZWROdW1iZXIuaSsrO1xuICAgICAgICB9XG4gICAgICAgIGRpZ2l0cy51bnNoaWZ0KDEpO1xuICAgICAgICBwYXJzZWROdW1iZXIuaSsrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlnaXRzW3JvdW5kQXQgLSAxXSsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFBhZCBvdXQgd2l0aCB6ZXJvcyB0byBnZXQgdGhlIHJlcXVpcmVkIGZyYWN0aW9uIGxlbmd0aFxuICAgIGZvciAoOyBmcmFjdGlvbkxlbiA8IE1hdGgubWF4KDAsIGZyYWN0aW9uU2l6ZSk7IGZyYWN0aW9uTGVuKyspIGRpZ2l0cy5wdXNoKDApO1xuXG5cbiAgICAvLyBEbyBhbnkgY2FycnlpbmcsIGUuZy4gYSBkaWdpdCB3YXMgcm91bmRlZCB1cCB0byAxMFxuICAgIHZhciBjYXJyeSA9IGRpZ2l0cy5yZWR1Y2VSaWdodChmdW5jdGlvbihjYXJyeSwgZCwgaSwgZGlnaXRzKSB7XG4gICAgICBkID0gZCArIGNhcnJ5O1xuICAgICAgZGlnaXRzW2ldID0gZCAlIDEwO1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZCAvIDEwKTtcbiAgICB9LCAwKTtcbiAgICBpZiAoY2FycnkpIHtcbiAgICAgIGRpZ2l0cy51bnNoaWZ0KGNhcnJ5KTtcbiAgICAgIHBhcnNlZE51bWJlci5pKys7XG4gICAgfVxufVxuXG4vKipcbiAqIEZvcm1hdCBhIG51bWJlciBpbnRvIGEgc3RyaW5nXG4gKiBAcGFyYW0gIHtudW1iZXJ9IG51bWJlciAgICAgICBUaGUgbnVtYmVyIHRvIGZvcm1hdFxuICogQHBhcmFtICB7e1xuICogICAgICAgICAgIG1pbkZyYWMsIC8vIHRoZSBtaW5pbXVtIG51bWJlciBvZiBkaWdpdHMgcmVxdWlyZWQgaW4gdGhlIGZyYWN0aW9uIHBhcnQgb2YgdGhlIG51bWJlclxuICogICAgICAgICAgIG1heEZyYWMsIC8vIHRoZSBtYXhpbXVtIG51bWJlciBvZiBkaWdpdHMgcmVxdWlyZWQgaW4gdGhlIGZyYWN0aW9uIHBhcnQgb2YgdGhlIG51bWJlclxuICogICAgICAgICAgIGdTaXplLCAgIC8vIG51bWJlciBvZiBkaWdpdHMgaW4gZWFjaCBncm91cCBvZiBzZXBhcmF0ZWQgZGlnaXRzXG4gKiAgICAgICAgICAgbGdTaXplLCAgLy8gbnVtYmVyIG9mIGRpZ2l0cyBpbiB0aGUgbGFzdCBncm91cCBvZiBkaWdpdHMgYmVmb3JlIHRoZSBkZWNpbWFsIHNlcGFyYXRvclxuICogICAgICAgICAgIG5lZ1ByZSwgIC8vIHRoZSBzdHJpbmcgdG8gZ28gaW4gZnJvbnQgb2YgYSBuZWdhdGl2ZSBudW1iZXIgKGUuZy4gYC1gIG9yIGAoYCkpXG4gKiAgICAgICAgICAgcG9zUHJlLCAgLy8gdGhlIHN0cmluZyB0byBnbyBpbiBmcm9udCBvZiBhIHBvc2l0aXZlIG51bWJlclxuICogICAgICAgICAgIG5lZ1N1ZiwgIC8vIHRoZSBzdHJpbmcgdG8gZ28gYWZ0ZXIgYSBuZWdhdGl2ZSBudW1iZXIgKGUuZy4gYClgKVxuICogICAgICAgICAgIHBvc1N1ZiAgIC8vIHRoZSBzdHJpbmcgdG8gZ28gYWZ0ZXIgYSBwb3NpdGl2ZSBudW1iZXJcbiAqICAgICAgICAgfX0gcGF0dGVyblxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFNlcCAgICAgVGhlIHN0cmluZyB0byBzZXBhcmF0ZSBncm91cHMgb2YgbnVtYmVyIChlLmcuIGAsYClcbiAqIEBwYXJhbSAge3N0cmluZ30gZGVjaW1hbFNlcCAgIFRoZSBzdHJpbmcgdG8gYWN0IGFzIHRoZSBkZWNpbWFsIHNlcGFyYXRvciAoZS5nLiBgLmApXG4gKiBAcGFyYW0gIHtbdHlwZV19IGZyYWN0aW9uU2l6ZSBUaGUgc2l6ZSBvZiB0aGUgZnJhY3Rpb25hbCBwYXJ0IG9mIHRoZSBudW1iZXJcbiAqIEByZXR1cm4ge3N0cmluZ30gICAgICAgICAgICAgIFRoZSBudW1iZXIgZm9ybWF0dGVkIGFzIGEgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGZvcm1hdE51bWJlcihudW1iZXIsIHBhdHRlcm4sIGdyb3VwU2VwLCBkZWNpbWFsU2VwLCBmcmFjdGlvblNpemUpIHtcblxuICBpZiAoIShpc1N0cmluZyhudW1iZXIpIHx8IGlzTnVtYmVyKG51bWJlcikpIHx8IGlzTmFOKG51bWJlcikpIHJldHVybiAnJztcblxuICB2YXIgaXNJbmZpbml0eSA9ICFpc0Zpbml0ZShudW1iZXIpO1xuICB2YXIgaXNaZXJvID0gZmFsc2U7XG4gIHZhciBudW1TdHIgPSBNYXRoLmFicyhudW1iZXIpICsgJycsXG4gICAgICBmb3JtYXR0ZWRUZXh0ID0gJycsXG4gICAgICBwYXJzZWROdW1iZXI7XG5cbiAgaWYgKGlzSW5maW5pdHkpIHtcbiAgICBmb3JtYXR0ZWRUZXh0ID0gJ1xcdTIyMWUnO1xuICB9IGVsc2Uge1xuICAgIHBhcnNlZE51bWJlciA9IHBhcnNlKG51bVN0cik7XG5cbiAgICByb3VuZE51bWJlcihwYXJzZWROdW1iZXIsIGZyYWN0aW9uU2l6ZSwgcGF0dGVybi5taW5GcmFjLCBwYXR0ZXJuLm1heEZyYWMpO1xuXG4gICAgdmFyIGRpZ2l0cyA9IHBhcnNlZE51bWJlci5kO1xuICAgIHZhciBpbnRlZ2VyTGVuID0gcGFyc2VkTnVtYmVyLmk7XG4gICAgdmFyIGV4cG9uZW50ID0gcGFyc2VkTnVtYmVyLmU7XG4gICAgdmFyIGRlY2ltYWxzID0gW107XG4gICAgaXNaZXJvID0gZGlnaXRzLnJlZHVjZShmdW5jdGlvbihpc1plcm8sIGQpIHsgcmV0dXJuIGlzWmVybyAmJiAhZDsgfSwgdHJ1ZSk7XG5cbiAgICAvLyBwYWQgemVyb3MgZm9yIHNtYWxsIG51bWJlcnNcbiAgICB3aGlsZSAoaW50ZWdlckxlbiA8IDApIHtcbiAgICAgIGRpZ2l0cy51bnNoaWZ0KDApO1xuICAgICAgaW50ZWdlckxlbisrO1xuICAgIH1cblxuICAgIC8vIGV4dHJhY3QgZGVjaW1hbHMgZGlnaXRzXG4gICAgaWYgKGludGVnZXJMZW4gPiAwKSB7XG4gICAgICBkZWNpbWFscyA9IGRpZ2l0cy5zcGxpY2UoaW50ZWdlckxlbiwgZGlnaXRzLmxlbmd0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlY2ltYWxzID0gZGlnaXRzO1xuICAgICAgZGlnaXRzID0gWzBdO1xuICAgIH1cblxuICAgIC8vIGZvcm1hdCB0aGUgaW50ZWdlciBkaWdpdHMgd2l0aCBncm91cGluZyBzZXBhcmF0b3JzXG4gICAgdmFyIGdyb3VwcyA9IFtdO1xuICAgIGlmIChkaWdpdHMubGVuZ3RoID49IHBhdHRlcm4ubGdTaXplKSB7XG4gICAgICBncm91cHMudW5zaGlmdChkaWdpdHMuc3BsaWNlKC1wYXR0ZXJuLmxnU2l6ZSwgZGlnaXRzLmxlbmd0aCkuam9pbignJykpO1xuICAgIH1cbiAgICB3aGlsZSAoZGlnaXRzLmxlbmd0aCA+IHBhdHRlcm4uZ1NpemUpIHtcbiAgICAgIGdyb3Vwcy51bnNoaWZ0KGRpZ2l0cy5zcGxpY2UoLXBhdHRlcm4uZ1NpemUsIGRpZ2l0cy5sZW5ndGgpLmpvaW4oJycpKTtcbiAgICB9XG4gICAgaWYgKGRpZ2l0cy5sZW5ndGgpIHtcbiAgICAgIGdyb3Vwcy51bnNoaWZ0KGRpZ2l0cy5qb2luKCcnKSk7XG4gICAgfVxuICAgIGZvcm1hdHRlZFRleHQgPSBncm91cHMuam9pbihncm91cFNlcCk7XG5cbiAgICAvLyBhcHBlbmQgdGhlIGRlY2ltYWwgZGlnaXRzXG4gICAgaWYgKGRlY2ltYWxzLmxlbmd0aCkge1xuICAgICAgZm9ybWF0dGVkVGV4dCArPSBkZWNpbWFsU2VwICsgZGVjaW1hbHMuam9pbignJyk7XG4gICAgfVxuXG4gICAgaWYgKGV4cG9uZW50KSB7XG4gICAgICBmb3JtYXR0ZWRUZXh0ICs9ICdlKycgKyBleHBvbmVudDtcbiAgICB9XG4gIH1cbiAgaWYgKG51bWJlciA8IDAgJiYgIWlzWmVybykge1xuICAgIHJldHVybiBwYXR0ZXJuLm5lZ1ByZSArIGZvcm1hdHRlZFRleHQgKyBwYXR0ZXJuLm5lZ1N1ZjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcGF0dGVybi5wb3NQcmUgKyBmb3JtYXR0ZWRUZXh0ICsgcGF0dGVybi5wb3NTdWY7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFkTnVtYmVyKG51bSwgZGlnaXRzLCB0cmltLCBuZWdXcmFwKSB7XG4gIHZhciBuZWcgPSAnJztcbiAgaWYgKG51bSA8IDAgfHwgKG5lZ1dyYXAgJiYgbnVtIDw9IDApKSB7XG4gICAgaWYgKG5lZ1dyYXApIHtcbiAgICAgIG51bSA9IC1udW0gKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW0gPSAtbnVtO1xuICAgICAgbmVnID0gJy0nO1xuICAgIH1cbiAgfVxuICBudW0gPSAnJyArIG51bTtcbiAgd2hpbGUgKG51bS5sZW5ndGggPCBkaWdpdHMpIG51bSA9IFpFUk9fQ0hBUiArIG51bTtcbiAgaWYgKHRyaW0pIHtcbiAgICBudW0gPSBudW0uc3Vic3RyKG51bS5sZW5ndGggLSBkaWdpdHMpO1xuICB9XG4gIHJldHVybiBuZWcgKyBudW07XG59XG5cblxuZnVuY3Rpb24gZGF0ZUdldHRlcihuYW1lLCBzaXplLCBvZmZzZXQsIHRyaW0sIG5lZ1dyYXApIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG4gIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgdmFyIHZhbHVlID0gZGF0ZVsnZ2V0JyArIG5hbWVdKCk7XG4gICAgaWYgKG9mZnNldCA+IDAgfHwgdmFsdWUgPiAtb2Zmc2V0KSB7XG4gICAgICB2YWx1ZSArPSBvZmZzZXQ7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gMCAmJiBvZmZzZXQgPT09IC0xMikgdmFsdWUgPSAxMjtcbiAgICByZXR1cm4gcGFkTnVtYmVyKHZhbHVlLCBzaXplLCB0cmltLCBuZWdXcmFwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGF0ZVN0ckdldHRlcihuYW1lLCBzaG9ydEZvcm0sIHN0YW5kQWxvbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUsIGZvcm1hdHMpIHtcbiAgICB2YXIgdmFsdWUgPSBkYXRlWydnZXQnICsgbmFtZV0oKTtcbiAgICB2YXIgcHJvcFByZWZpeCA9IChzdGFuZEFsb25lID8gJ1NUQU5EQUxPTkUnIDogJycpICsgKHNob3J0Rm9ybSA/ICdTSE9SVCcgOiAnJyk7XG4gICAgdmFyIGdldCA9IHVwcGVyY2FzZShwcm9wUHJlZml4ICsgbmFtZSk7XG5cbiAgICByZXR1cm4gZm9ybWF0c1tnZXRdW3ZhbHVlXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGltZVpvbmVHZXR0ZXIoZGF0ZSwgZm9ybWF0cywgb2Zmc2V0KSB7XG4gIHZhciB6b25lID0gLTEgKiBvZmZzZXQ7XG4gIHZhciBwYWRkZWRab25lID0gKHpvbmUgPj0gMCkgPyAnKycgOiAnJztcblxuICBwYWRkZWRab25lICs9IHBhZE51bWJlcihNYXRoW3pvbmUgPiAwID8gJ2Zsb29yJyA6ICdjZWlsJ10oem9uZSAvIDYwKSwgMikgK1xuICAgICAgICAgICAgICAgIHBhZE51bWJlcihNYXRoLmFicyh6b25lICUgNjApLCAyKTtcblxuICByZXR1cm4gcGFkZGVkWm9uZTtcbn1cblxuZnVuY3Rpb24gZ2V0Rmlyc3RUaHVyc2RheU9mWWVhcih5ZWFyKSB7XG4gICAgLy8gMCA9IGluZGV4IG9mIEphbnVhcnlcbiAgICB2YXIgZGF5T2ZXZWVrT25GaXJzdCA9IChuZXcgRGF0ZSh5ZWFyLCAwLCAxKSkuZ2V0RGF5KCk7XG4gICAgLy8gNCA9IGluZGV4IG9mIFRodXJzZGF5ICgrMSB0byBhY2NvdW50IGZvciAxc3QgPSA1KVxuICAgIC8vIDExID0gaW5kZXggb2YgKm5leHQqIFRodXJzZGF5ICgrMSBhY2NvdW50IGZvciAxc3QgPSAxMilcbiAgICByZXR1cm4gbmV3IERhdGUoeWVhciwgMCwgKChkYXlPZldlZWtPbkZpcnN0IDw9IDQpID8gNSA6IDEyKSAtIGRheU9mV2Vla09uRmlyc3QpO1xufVxuXG5mdW5jdGlvbiBnZXRUaHVyc2RheVRoaXNXZWVrKGRhdGV0aW1lKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGRhdGV0aW1lLmdldEZ1bGxZZWFyKCksIGRhdGV0aW1lLmdldE1vbnRoKCksXG4gICAgICAvLyA0ID0gaW5kZXggb2YgVGh1cnNkYXlcbiAgICAgIGRhdGV0aW1lLmdldERhdGUoKSArICg0IC0gZGF0ZXRpbWUuZ2V0RGF5KCkpKTtcbn1cblxuZnVuY3Rpb24gd2Vla0dldHRlcihzaXplKSB7XG4gICByZXR1cm4gZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgdmFyIGZpcnN0VGh1cnMgPSBnZXRGaXJzdFRodXJzZGF5T2ZZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSksXG4gICAgICAgICB0aGlzVGh1cnMgPSBnZXRUaHVyc2RheVRoaXNXZWVrKGRhdGUpO1xuXG4gICAgICB2YXIgZGlmZiA9ICt0aGlzVGh1cnMgLSArZmlyc3RUaHVycyxcbiAgICAgICAgIHJlc3VsdCA9IDEgKyBNYXRoLnJvdW5kKGRpZmYgLyA2LjA0OGU4KTsgLy8gNi4wNDhlOCBtcyBwZXIgd2Vla1xuXG4gICAgICByZXR1cm4gcGFkTnVtYmVyKHJlc3VsdCwgc2l6ZSk7XG4gICB9O1xufVxuXG5mdW5jdGlvbiBhbXBtR2V0dGVyKGRhdGUsIGZvcm1hdHMpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKSA8IDEyID8gZm9ybWF0cy5BTVBNU1swXSA6IGZvcm1hdHMuQU1QTVNbMV07XG59XG5cbmZ1bmN0aW9uIGVyYUdldHRlcihkYXRlLCBmb3JtYXRzKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCkgPD0gMCA/IGZvcm1hdHMuRVJBU1swXSA6IGZvcm1hdHMuRVJBU1sxXTtcbn1cblxuZnVuY3Rpb24gbG9uZ0VyYUdldHRlcihkYXRlLCBmb3JtYXRzKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCkgPD0gMCA/IGZvcm1hdHMuRVJBTkFNRVNbMF0gOiBmb3JtYXRzLkVSQU5BTUVTWzFdO1xufVxuXG52YXIgREFURV9GT1JNQVRTID0ge1xuICB5eXl5OiBkYXRlR2V0dGVyKCdGdWxsWWVhcicsIDQsIDAsIGZhbHNlLCB0cnVlKSxcbiAgICB5eTogZGF0ZUdldHRlcignRnVsbFllYXInLCAyLCAwLCB0cnVlLCB0cnVlKSxcbiAgICAgeTogZGF0ZUdldHRlcignRnVsbFllYXInLCAxLCAwLCBmYWxzZSwgdHJ1ZSksXG4gIE1NTU06IGRhdGVTdHJHZXR0ZXIoJ01vbnRoJyksXG4gICBNTU06IGRhdGVTdHJHZXR0ZXIoJ01vbnRoJywgdHJ1ZSksXG4gICAgTU06IGRhdGVHZXR0ZXIoJ01vbnRoJywgMiwgMSksXG4gICAgIE06IGRhdGVHZXR0ZXIoJ01vbnRoJywgMSwgMSksXG4gIExMTEw6IGRhdGVTdHJHZXR0ZXIoJ01vbnRoJywgZmFsc2UsIHRydWUpLFxuICAgIGRkOiBkYXRlR2V0dGVyKCdEYXRlJywgMiksXG4gICAgIGQ6IGRhdGVHZXR0ZXIoJ0RhdGUnLCAxKSxcbiAgICBISDogZGF0ZUdldHRlcignSG91cnMnLCAyKSxcbiAgICAgSDogZGF0ZUdldHRlcignSG91cnMnLCAxKSxcbiAgICBoaDogZGF0ZUdldHRlcignSG91cnMnLCAyLCAtMTIpLFxuICAgICBoOiBkYXRlR2V0dGVyKCdIb3VycycsIDEsIC0xMiksXG4gICAgbW06IGRhdGVHZXR0ZXIoJ01pbnV0ZXMnLCAyKSxcbiAgICAgbTogZGF0ZUdldHRlcignTWludXRlcycsIDEpLFxuICAgIHNzOiBkYXRlR2V0dGVyKCdTZWNvbmRzJywgMiksXG4gICAgIHM6IGRhdGVHZXR0ZXIoJ1NlY29uZHMnLCAxKSxcbiAgICAgLy8gd2hpbGUgSVNPIDg2MDEgcmVxdWlyZXMgZnJhY3Rpb25zIHRvIGJlIHByZWZpeGVkIHdpdGggYC5gIG9yIGAsYFxuICAgICAvLyB3ZSBjYW4gYmUganVzdCBzYWZlbHkgcmVseSBvbiB1c2luZyBgc3NzYCBzaW5jZSB3ZSBjdXJyZW50bHkgZG9uJ3Qgc3VwcG9ydCBzaW5nbGUgb3IgdHdvIGRpZ2l0IGZyYWN0aW9uc1xuICAgc3NzOiBkYXRlR2V0dGVyKCdNaWxsaXNlY29uZHMnLCAzKSxcbiAgRUVFRTogZGF0ZVN0ckdldHRlcignRGF5JyksXG4gICBFRUU6IGRhdGVTdHJHZXR0ZXIoJ0RheScsIHRydWUpLFxuICAgICBhOiBhbXBtR2V0dGVyLFxuICAgICBaOiB0aW1lWm9uZUdldHRlcixcbiAgICB3dzogd2Vla0dldHRlcigyKSxcbiAgICAgdzogd2Vla0dldHRlcigxKSxcbiAgICAgRzogZXJhR2V0dGVyLFxuICAgICBHRzogZXJhR2V0dGVyLFxuICAgICBHR0c6IGVyYUdldHRlcixcbiAgICAgR0dHRzogbG9uZ0VyYUdldHRlclxufTtcblxudmFyIERBVEVfRk9STUFUU19TUExJVCA9IC8oKD86W155TUxkSGhtc2FaRXdHJ10rKXwoPzonKD86W14nXXwnJykqJyl8KD86RSt8eSt8TSt8TCt8ZCt8SCt8aCt8bSt8cyt8YXxafEcrfHcrKSkoW1xcc1xcU10qKS8sXG4gICAgTlVNQkVSX1NUUklORyA9IC9eLT9cXGQrJC87XG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgZGF0ZVxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICAgRm9ybWF0cyBgZGF0ZWAgdG8gYSBzdHJpbmcgYmFzZWQgb24gdGhlIHJlcXVlc3RlZCBgZm9ybWF0YC5cbiAqXG4gKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gYmUgY29tcG9zZWQgb2YgdGhlIGZvbGxvd2luZyBlbGVtZW50czpcbiAqXG4gKiAgICogYCd5eXl5J2A6IDQgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciAoZS5nLiBBRCAxID0+IDAwMDEsIEFEIDIwMTAgPT4gMjAxMClcbiAqICAgKiBgJ3l5J2A6IDIgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgcGFkZGVkICgwMC05OSkuIChlLmcuIEFEIDIwMDEgPT4gMDEsIEFEIDIwMTAgPT4gMTApXG4gKiAgICogYCd5J2A6IDEgZGlnaXQgcmVwcmVzZW50YXRpb24gb2YgeWVhciwgZS5nLiAoQUQgMSA9PiAxLCBBRCAxOTkgPT4gMTk5KVxuICogICAqIGAnTU1NTSdgOiBNb250aCBpbiB5ZWFyIChKYW51YXJ5LURlY2VtYmVyKVxuICogICAqIGAnTU1NJ2A6IE1vbnRoIGluIHllYXIgKEphbi1EZWMpXG4gKiAgICogYCdNTSdgOiBNb250aCBpbiB5ZWFyLCBwYWRkZWQgKDAxLTEyKVxuICogICAqIGAnTSdgOiBNb250aCBpbiB5ZWFyICgxLTEyKVxuICogICAqIGAnTExMTCdgOiBTdGFuZC1hbG9uZSBtb250aCBpbiB5ZWFyIChKYW51YXJ5LURlY2VtYmVyKVxuICogICAqIGAnZGQnYDogRGF5IGluIG1vbnRoLCBwYWRkZWQgKDAxLTMxKVxuICogICAqIGAnZCdgOiBEYXkgaW4gbW9udGggKDEtMzEpXG4gKiAgICogYCdFRUVFJ2A6IERheSBpbiBXZWVrLChTdW5kYXktU2F0dXJkYXkpXG4gKiAgICogYCdFRUUnYDogRGF5IGluIFdlZWssIChTdW4tU2F0KVxuICogICAqIGAnSEgnYDogSG91ciBpbiBkYXksIHBhZGRlZCAoMDAtMjMpXG4gKiAgICogYCdIJ2A6IEhvdXIgaW4gZGF5ICgwLTIzKVxuICogICAqIGAnaGgnYDogSG91ciBpbiBBTS9QTSwgcGFkZGVkICgwMS0xMilcbiAqICAgKiBgJ2gnYDogSG91ciBpbiBBTS9QTSwgKDEtMTIpXG4gKiAgICogYCdtbSdgOiBNaW51dGUgaW4gaG91ciwgcGFkZGVkICgwMC01OSlcbiAqICAgKiBgJ20nYDogTWludXRlIGluIGhvdXIgKDAtNTkpXG4gKiAgICogYCdzcydgOiBTZWNvbmQgaW4gbWludXRlLCBwYWRkZWQgKDAwLTU5KVxuICogICAqIGAncydgOiBTZWNvbmQgaW4gbWludXRlICgwLTU5KVxuICogICAqIGAnc3NzJ2A6IE1pbGxpc2Vjb25kIGluIHNlY29uZCwgcGFkZGVkICgwMDAtOTk5KVxuICogICAqIGAnYSdgOiBBTS9QTSBtYXJrZXJcbiAqICAgKiBgJ1onYDogNCBkaWdpdCAoK3NpZ24pIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0aW1lem9uZSBvZmZzZXQgKC0xMjAwLSsxMjAwKVxuICogICAqIGAnd3cnYDogV2VlayBvZiB5ZWFyLCBwYWRkZWQgKDAwLTUzKS4gV2VlayAwMSBpcyB0aGUgd2VlayB3aXRoIHRoZSBmaXJzdCBUaHVyc2RheSBvZiB0aGUgeWVhclxuICogICAqIGAndydgOiBXZWVrIG9mIHllYXIgKDAtNTMpLiBXZWVrIDEgaXMgdGhlIHdlZWsgd2l0aCB0aGUgZmlyc3QgVGh1cnNkYXkgb2YgdGhlIHllYXJcbiAqICAgKiBgJ0cnYCwgYCdHRydgLCBgJ0dHRydgOiBUaGUgYWJicmV2aWF0ZWQgZm9ybSBvZiB0aGUgZXJhIHN0cmluZyAoZS5nLiAnQUQnKVxuICogICAqIGAnR0dHRydgOiBUaGUgbG9uZyBmb3JtIG9mIHRoZSBlcmEgc3RyaW5nIChlLmcuICdBbm5vIERvbWluaScpXG4gKlxuICogICBgZm9ybWF0YCBzdHJpbmcgY2FuIGFsc28gYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgcHJlZGVmaW5lZFxuICogICB7QGxpbmsgZ3VpZGUvaTE4biBsb2NhbGl6YWJsZSBmb3JtYXRzfTpcbiAqXG4gKiAgICogYCdtZWRpdW0nYDogZXF1aXZhbGVudCB0byBgJ01NTSBkLCB5IGg6bW06c3MgYSdgIGZvciBlbl9VUyBsb2NhbGVcbiAqICAgICAoZS5nLiBTZXAgMywgMjAxMCAxMjowNTowOCBQTSlcbiAqICAgKiBgJ3Nob3J0J2A6IGVxdWl2YWxlbnQgdG8gYCdNL2QveXkgaDptbSBhJ2AgZm9yIGVuX1VTICBsb2NhbGUgKGUuZy4gOS8zLzEwIDEyOjA1IFBNKVxuICogICAqIGAnZnVsbERhdGUnYDogZXF1aXZhbGVudCB0byBgJ0VFRUUsIE1NTU0gZCwgeSdgIGZvciBlbl9VUyAgbG9jYWxlXG4gKiAgICAgKGUuZy4gRnJpZGF5LCBTZXB0ZW1iZXIgMywgMjAxMClcbiAqICAgKiBgJ2xvbmdEYXRlJ2A6IGVxdWl2YWxlbnQgdG8gYCdNTU1NIGQsIHknYCBmb3IgZW5fVVMgIGxvY2FsZSAoZS5nLiBTZXB0ZW1iZXIgMywgMjAxMClcbiAqICAgKiBgJ21lZGl1bURhdGUnYDogZXF1aXZhbGVudCB0byBgJ01NTSBkLCB5J2AgZm9yIGVuX1VTICBsb2NhbGUgKGUuZy4gU2VwIDMsIDIwMTApXG4gKiAgICogYCdzaG9ydERhdGUnYDogZXF1aXZhbGVudCB0byBgJ00vZC95eSdgIGZvciBlbl9VUyBsb2NhbGUgKGUuZy4gOS8zLzEwKVxuICogICAqIGAnbWVkaXVtVGltZSdgOiBlcXVpdmFsZW50IHRvIGAnaDptbTpzcyBhJ2AgZm9yIGVuX1VTIGxvY2FsZSAoZS5nLiAxMjowNTowOCBQTSlcbiAqICAgKiBgJ3Nob3J0VGltZSdgOiBlcXVpdmFsZW50IHRvIGAnaDptbSBhJ2AgZm9yIGVuX1VTIGxvY2FsZSAoZS5nLiAxMjowNSBQTSlcbiAqXG4gKiAgIGBmb3JtYXRgIHN0cmluZyBjYW4gY29udGFpbiBsaXRlcmFsIHZhbHVlcy4gVGhlc2UgbmVlZCB0byBiZSBlc2NhcGVkIGJ5IHN1cnJvdW5kaW5nIHdpdGggc2luZ2xlIHF1b3RlcyAoZS5nLlxuICogICBgXCJoICdpbiB0aGUgbW9ybmluZydcImApLiBJbiBvcmRlciB0byBvdXRwdXQgYSBzaW5nbGUgcXVvdGUsIGVzY2FwZSBpdCAtIGkuZS4sIHR3byBzaW5nbGUgcXVvdGVzIGluIGEgc2VxdWVuY2VcbiAqICAgKGUuZy4gYFwiaCAnbycnY2xvY2snXCJgKS5cbiAqXG4gKiAgIEFueSBvdGhlciBjaGFyYWN0ZXJzIGluIHRoZSBgZm9ybWF0YCBzdHJpbmcgd2lsbCBiZSBvdXRwdXQgYXMtaXMuXG4gKlxuICogQHBhcmFtIHsoRGF0ZXxudW1iZXJ8c3RyaW5nKX0gZGF0ZSBEYXRlIHRvIGZvcm1hdCBlaXRoZXIgYXMgRGF0ZSBvYmplY3QsIG1pbGxpc2Vjb25kcyAoc3RyaW5nIG9yXG4gKiAgICBudW1iZXIpIG9yIHZhcmlvdXMgSVNPIDg2MDEgZGF0ZXRpbWUgc3RyaW5nIGZvcm1hdHMgKGUuZy4geXl5eS1NTS1kZFRISDptbTpzcy5zc3NaIGFuZCBpdHNcbiAqICAgIHNob3J0ZXIgdmVyc2lvbnMgbGlrZSB5eXl5LU1NLWRkVEhIOm1tWiwgeXl5eS1NTS1kZCBvciB5eXl5TU1kZFRISG1tc3NaKS4gSWYgbm8gdGltZXpvbmUgaXNcbiAqICAgIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGlucHV0LCB0aGUgdGltZSBpcyBjb25zaWRlcmVkIHRvIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gZm9ybWF0IEZvcm1hdHRpbmcgcnVsZXMgKHNlZSBEZXNjcmlwdGlvbikuIElmIG5vdCBzcGVjaWZpZWQsXG4gKiAgICBgbWVkaXVtRGF0ZWAgaXMgdXNlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gdGltZXpvbmUgVGltZXpvbmUgdG8gYmUgdXNlZCBmb3IgZm9ybWF0dGluZy4gSXQgdW5kZXJzdGFuZHMgVVRDL0dNVCBhbmQgdGhlXG4gKiAgICBjb250aW5lbnRhbCBVUyB0aW1lIHpvbmUgYWJicmV2aWF0aW9ucywgYnV0IGZvciBnZW5lcmFsIHVzZSwgdXNlIGEgdGltZSB6b25lIG9mZnNldCwgZm9yXG4gKiAgICBleGFtcGxlLCBgJyswNDMwJ2AgKDQgaG91cnMsIDMwIG1pbnV0ZXMgZWFzdCBvZiB0aGUgR3JlZW53aWNoIG1lcmlkaWFuKVxuICogICAgSWYgbm90IHNwZWNpZmllZCwgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyIHdpbGwgYmUgdXNlZC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEZvcm1hdHRlZCBzdHJpbmcgb3IgdGhlIGlucHV0IGlmIGlucHV0IGlzIG5vdCByZWNvZ25pemVkIGFzIGRhdGUvbWlsbGlzLlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwiZmlsdGVyLWRhdGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ319PC9zcGFuPjpcbiAgICAgICAgICAgPHNwYW4+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTonbWVkaXVtJ319PC9zcGFuPjxicj5cbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJ319PC9zcGFuPjpcbiAgICAgICAgICA8c3Bhbj57ezEyODgzMjM2MjMwMDYgfCBkYXRlOid5eXl5LU1NLWRkIEhIOm1tOnNzIFonfX08L3NwYW4+PGJyPlxuICAgICAgIDxzcGFuIG5nLW5vbi1iaW5kYWJsZT57ezEyODgzMjM2MjMwMDYgfCBkYXRlOidNTS9kZC95eXl5IEAgaDptbWEnfX08L3NwYW4+OlxuICAgICAgICAgIDxzcGFuPnt7JzEyODgzMjM2MjMwMDYnIHwgZGF0ZTonTU0vZGQveXl5eSBAIGg6bW1hJ319PC9zcGFuPjxicj5cbiAgICAgICA8c3BhbiBuZy1ub24tYmluZGFibGU+e3sxMjg4MzIzNjIzMDA2IHwgZGF0ZTpcIk1NL2RkL3l5eXkgJ2F0JyBoOm1tYVwifX08L3NwYW4+OlxuICAgICAgICAgIDxzcGFuPnt7JzEyODgzMjM2MjMwMDYnIHwgZGF0ZTpcIk1NL2RkL3l5eXkgJ2F0JyBoOm1tYVwifX08L3NwYW4+PGJyPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGZvcm1hdCBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKFwiMTI4ODMyMzYyMzAwNiB8IGRhdGU6J21lZGl1bSdcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b01hdGNoKC9PY3QgMlxcZCwgMjAxMCBcXGR7MSwyfTpcXGR7Mn06XFxkezJ9IChBTXxQTSkvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoXCIxMjg4MzIzNjIzMDA2IHwgZGF0ZToneXl5eS1NTS1kZCBISDptbTpzcyBaJ1wiKSkuZ2V0VGV4dCgpKS5cbiAgICAgICAgICAgIHRvTWF0Y2goLzIwMTAtMTAtMlxcZCBcXGR7Mn06XFxkezJ9OlxcZHsyfSAoLXxcXCspP1xcZHs0fS8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZyhcIicxMjg4MzIzNjIzMDA2JyB8IGRhdGU6J01NL2RkL3l5eXkgQCBoOm1tYSdcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b01hdGNoKC8xMFxcLzJcXGRcXC8yMDEwIEAgXFxkezEsMn06XFxkezJ9KEFNfFBNKS8pO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZyhcIicxMjg4MzIzNjIzMDA2JyB8IGRhdGU6XFxcIk1NL2RkL3l5eXkgJ2F0JyBoOm1tYVxcXCJcIikpLmdldFRleHQoKSkuXG4gICAgICAgICAgICB0b01hdGNoKC8xMFxcLzJcXGRcXC8yMDEwIGF0IFxcZHsxLDJ9OlxcZHsyfShBTXxQTSkvKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5kYXRlRmlsdGVyLiRpbmplY3QgPSBbJyRsb2NhbGUnXTtcbmZ1bmN0aW9uIGRhdGVGaWx0ZXIoJGxvY2FsZSkge1xuXG5cbiAgdmFyIFJfSVNPODYwMV9TVFIgPSAvXihcXGR7NH0pLT8oXFxkXFxkKS0/KFxcZFxcZCkoPzpUKFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86Oj8oXFxkXFxkKSg/OlxcLihcXGQrKSk/KT8pPyhafChbKy1dKShcXGRcXGQpOj8oXFxkXFxkKSk/KT8kLztcbiAgICAgICAgICAgICAgICAgICAgIC8vIDEgICAgICAgIDIgICAgICAgMyAgICAgICAgIDQgICAgICAgICAgNSAgICAgICAgICA2ICAgICAgICAgIDcgICAgICAgICAgOCAgOSAgICAgMTAgICAgICAxMVxuICBmdW5jdGlvbiBqc29uU3RyaW5nVG9EYXRlKHN0cmluZykge1xuICAgIHZhciBtYXRjaDtcbiAgICBpZiAoKG1hdGNoID0gc3RyaW5nLm1hdGNoKFJfSVNPODYwMV9TVFIpKSkge1xuICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgwKSxcbiAgICAgICAgICB0ekhvdXIgPSAwLFxuICAgICAgICAgIHR6TWluICA9IDAsXG4gICAgICAgICAgZGF0ZVNldHRlciA9IG1hdGNoWzhdID8gZGF0ZS5zZXRVVENGdWxsWWVhciA6IGRhdGUuc2V0RnVsbFllYXIsXG4gICAgICAgICAgdGltZVNldHRlciA9IG1hdGNoWzhdID8gZGF0ZS5zZXRVVENIb3VycyA6IGRhdGUuc2V0SG91cnM7XG5cbiAgICAgIGlmIChtYXRjaFs5XSkge1xuICAgICAgICB0ekhvdXIgPSB0b0ludChtYXRjaFs5XSArIG1hdGNoWzEwXSk7XG4gICAgICAgIHR6TWluID0gdG9JbnQobWF0Y2hbOV0gKyBtYXRjaFsxMV0pO1xuICAgICAgfVxuICAgICAgZGF0ZVNldHRlci5jYWxsKGRhdGUsIHRvSW50KG1hdGNoWzFdKSwgdG9JbnQobWF0Y2hbMl0pIC0gMSwgdG9JbnQobWF0Y2hbM10pKTtcbiAgICAgIHZhciBoID0gdG9JbnQobWF0Y2hbNF0gfHwgMCkgLSB0ekhvdXI7XG4gICAgICB2YXIgbSA9IHRvSW50KG1hdGNoWzVdIHx8IDApIC0gdHpNaW47XG4gICAgICB2YXIgcyA9IHRvSW50KG1hdGNoWzZdIHx8IDApO1xuICAgICAgdmFyIG1zID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KCcwLicgKyAobWF0Y2hbN10gfHwgMCkpICogMTAwMCk7XG4gICAgICB0aW1lU2V0dGVyLmNhbGwoZGF0ZSwgaCwgbSwgcywgbXMpO1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmc7XG4gIH1cblxuXG4gIHJldHVybiBmdW5jdGlvbihkYXRlLCBmb3JtYXQsIHRpbWV6b25lKSB7XG4gICAgdmFyIHRleHQgPSAnJyxcbiAgICAgICAgcGFydHMgPSBbXSxcbiAgICAgICAgZm4sIG1hdGNoO1xuXG4gICAgZm9ybWF0ID0gZm9ybWF0IHx8ICdtZWRpdW1EYXRlJztcbiAgICBmb3JtYXQgPSAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFNbZm9ybWF0XSB8fCBmb3JtYXQ7XG4gICAgaWYgKGlzU3RyaW5nKGRhdGUpKSB7XG4gICAgICBkYXRlID0gTlVNQkVSX1NUUklORy50ZXN0KGRhdGUpID8gdG9JbnQoZGF0ZSkgOiBqc29uU3RyaW5nVG9EYXRlKGRhdGUpO1xuICAgIH1cblxuICAgIGlmIChpc051bWJlcihkYXRlKSkge1xuICAgICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuICAgIH1cblxuICAgIGlmICghaXNEYXRlKGRhdGUpIHx8ICFpc0Zpbml0ZShkYXRlLmdldFRpbWUoKSkpIHtcbiAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIHdoaWxlIChmb3JtYXQpIHtcbiAgICAgIG1hdGNoID0gREFURV9GT1JNQVRTX1NQTElULmV4ZWMoZm9ybWF0KTtcbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBwYXJ0cyA9IGNvbmNhdChwYXJ0cywgbWF0Y2gsIDEpO1xuICAgICAgICBmb3JtYXQgPSBwYXJ0cy5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnRzLnB1c2goZm9ybWF0KTtcbiAgICAgICAgZm9ybWF0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGF0ZVRpbWV6b25lT2Zmc2V0ID0gZGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICAgIGlmICh0aW1lem9uZSkge1xuICAgICAgZGF0ZVRpbWV6b25lT2Zmc2V0ID0gdGltZXpvbmVUb09mZnNldCh0aW1lem9uZSwgZGF0ZVRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIGRhdGUgPSBjb252ZXJ0VGltZXpvbmVUb0xvY2FsKGRhdGUsIHRpbWV6b25lLCB0cnVlKTtcbiAgICB9XG4gICAgZm9yRWFjaChwYXJ0cywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIGZuID0gREFURV9GT1JNQVRTW3ZhbHVlXTtcbiAgICAgIHRleHQgKz0gZm4gPyBmbihkYXRlLCAkbG9jYWxlLkRBVEVUSU1FX0ZPUk1BVFMsIGRhdGVUaW1lem9uZU9mZnNldClcbiAgICAgICAgICAgICAgICAgOiB2YWx1ZSA9PT0gJ1xcJ1xcJycgPyAnXFwnJyA6IHZhbHVlLnJlcGxhY2UoLyheJ3wnJCkvZywgJycpLnJlcGxhY2UoLycnL2csICdcXCcnKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0ZXh0O1xuICB9O1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUganNvblxuICogQGtpbmQgZnVuY3Rpb25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqICAgQWxsb3dzIHlvdSB0byBjb252ZXJ0IGEgSmF2YVNjcmlwdCBvYmplY3QgaW50byBKU09OIHN0cmluZy5cbiAqXG4gKiAgIFRoaXMgZmlsdGVyIGlzIG1vc3RseSB1c2VmdWwgZm9yIGRlYnVnZ2luZy4gV2hlbiB1c2luZyB0aGUgZG91YmxlIGN1cmx5IHt7dmFsdWV9fSBub3RhdGlvblxuICogICB0aGUgYmluZGluZyBpcyBhdXRvbWF0aWNhbGx5IGNvbnZlcnRlZCB0byBKU09OLlxuICpcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IEFueSBKYXZhU2NyaXB0IG9iamVjdCAoaW5jbHVkaW5nIGFycmF5cyBhbmQgcHJpbWl0aXZlIHR5cGVzKSB0byBmaWx0ZXIuXG4gKiBAcGFyYW0ge251bWJlcj19IHNwYWNpbmcgVGhlIG51bWJlciBvZiBzcGFjZXMgdG8gdXNlIHBlciBpbmRlbnRhdGlvbiwgZGVmYXVsdHMgdG8gMi5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEpTT04gc3RyaW5nLlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cImZpbHRlci1qc29uXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHByZSBpZD1cImRlZmF1bHQtc3BhY2luZ1wiPnt7IHsnbmFtZSc6J3ZhbHVlJ30gfCBqc29uIH19PC9wcmU+XG4gICAgICAgPHByZSBpZD1cImN1c3RvbS1zcGFjaW5nXCI+e3sgeyduYW1lJzondmFsdWUnfSB8IGpzb246NCB9fTwvcHJlPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGpzb25pZnkgZmlsdGVyZWQgb2JqZWN0cycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2RlZmF1bHQtc3BhY2luZycpKS5nZXRUZXh0KCkpLnRvTWF0Y2goL1xce1xcbiB7Mn1cIm5hbWVcIjogP1widmFsdWVcIlxcbn0vKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjdXN0b20tc3BhY2luZycpKS5nZXRUZXh0KCkpLnRvTWF0Y2goL1xce1xcbiB7NH1cIm5hbWVcIjogP1widmFsdWVcIlxcbn0vKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICpcbiAqL1xuZnVuY3Rpb24ganNvbkZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgc3BhY2luZykge1xuICAgIGlmIChpc1VuZGVmaW5lZChzcGFjaW5nKSkge1xuICAgICAgICBzcGFjaW5nID0gMjtcbiAgICB9XG4gICAgcmV0dXJuIHRvSnNvbihvYmplY3QsIHNwYWNpbmcpO1xuICB9O1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGZpbHRlclxuICogQG5hbWUgbG93ZXJjYXNlXG4gKiBAa2luZCBmdW5jdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0cyBzdHJpbmcgdG8gbG93ZXJjYXNlLlxuICpcbiAqIFNlZSB0aGUge0BsaW5rIG5nLnVwcGVyY2FzZSB1cHBlcmNhc2UgZmlsdGVyIGRvY3VtZW50YXRpb259IGZvciBhIGZ1bmN0aW9uYWxseSBpZGVudGljYWwgZXhhbXBsZS5cbiAqXG4gKiBAc2VlIGFuZ3VsYXIubG93ZXJjYXNlXG4gKi9cbnZhciBsb3dlcmNhc2VGaWx0ZXIgPSB2YWx1ZUZuKGxvd2VyY2FzZSk7XG5cblxuLyoqXG4gKiBAbmdkb2MgZmlsdGVyXG4gKiBAbmFtZSB1cHBlcmNhc2VcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnRzIHN0cmluZyB0byB1cHBlcmNhc2UuXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwidXBwZXJjYXNlRmlsdGVyRXhhbXBsZVwiIG5hbWU9XCJmaWx0ZXItdXBwZXJjYXNlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd1cHBlcmNhc2VGaWx0ZXJFeGFtcGxlJywgW10pXG4gICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgJHNjb3BlLnRpdGxlID0gJ1RoaXMgaXMgYSB0aXRsZSc7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPCEtLSBUaGlzIHRpdGxlIHNob3VsZCBiZSBmb3JtYXR0ZWQgbm9ybWFsbHkgLS0+XG4gICAgICAgICA8aDE+e3t0aXRsZX19PC9oMT5cbiAgICAgICAgIDwhLS0gVGhpcyB0aXRsZSBzaG91bGQgYmUgY2FwaXRhbGl6ZWQgLS0+XG4gICAgICAgICA8aDE+e3t0aXRsZSB8IHVwcGVyY2FzZX19PC9oMT5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgdXBwZXJjYXNlRmlsdGVyID0gdmFsdWVGbih1cHBlcmNhc2UpO1xuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIGxpbWl0VG9cbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDcmVhdGVzIGEgbmV3IGFycmF5IG9yIHN0cmluZyBjb250YWluaW5nIG9ubHkgYSBzcGVjaWZpZWQgbnVtYmVyIG9mIGVsZW1lbnRzLiBUaGUgZWxlbWVudHMgYXJlXG4gKiB0YWtlbiBmcm9tIGVpdGhlciB0aGUgYmVnaW5uaW5nIG9yIHRoZSBlbmQgb2YgdGhlIHNvdXJjZSBhcnJheSwgc3RyaW5nIG9yIG51bWJlciwgYXMgc3BlY2lmaWVkIGJ5XG4gKiB0aGUgdmFsdWUgYW5kIHNpZ24gKHBvc2l0aXZlIG9yIG5lZ2F0aXZlKSBvZiBgbGltaXRgLiBPdGhlciBhcnJheS1saWtlIG9iamVjdHMgYXJlIGFsc28gc3VwcG9ydGVkXG4gKiAoZS5nLiBhcnJheSBzdWJjbGFzc2VzLCBOb2RlTGlzdHMsIGpxTGl0ZS9qUXVlcnkgY29sbGVjdGlvbnMgZXRjKS4gSWYgYSBudW1iZXIgaXMgdXNlZCBhcyBpbnB1dCxcbiAqIGl0IGlzIGNvbnZlcnRlZCB0byBhIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fEFycmF5TGlrZXxzdHJpbmd8bnVtYmVyfSBpbnB1dCAtIEFycmF5L2FycmF5LWxpa2UsIHN0cmluZyBvciBudW1iZXIgdG8gYmUgbGltaXRlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gbGltaXQgLSBUaGUgbGVuZ3RoIG9mIHRoZSByZXR1cm5lZCBhcnJheSBvciBzdHJpbmcuIElmIHRoZSBgbGltaXRgIG51bWJlclxuICogICAgIGlzIHBvc2l0aXZlLCBgbGltaXRgIG51bWJlciBvZiBpdGVtcyBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHNvdXJjZSBhcnJheS9zdHJpbmcgYXJlIGNvcGllZC5cbiAqICAgICBJZiB0aGUgbnVtYmVyIGlzIG5lZ2F0aXZlLCBgbGltaXRgIG51bWJlciAgb2YgaXRlbXMgZnJvbSB0aGUgZW5kIG9mIHRoZSBzb3VyY2UgYXJyYXkvc3RyaW5nXG4gKiAgICAgYXJlIGNvcGllZC4gVGhlIGBsaW1pdGAgd2lsbCBiZSB0cmltbWVkIGlmIGl0IGV4Y2VlZHMgYGFycmF5Lmxlbmd0aGAuIElmIGBsaW1pdGAgaXMgdW5kZWZpbmVkLFxuICogICAgIHRoZSBpbnB1dCB3aWxsIGJlIHJldHVybmVkIHVuY2hhbmdlZC5cbiAqIEBwYXJhbSB7KHN0cmluZ3xudW1iZXIpPX0gYmVnaW4gLSBJbmRleCBhdCB3aGljaCB0byBiZWdpbiBsaW1pdGF0aW9uLiBBcyBhIG5lZ2F0aXZlIGluZGV4LFxuICogICAgIGBiZWdpbmAgaW5kaWNhdGVzIGFuIG9mZnNldCBmcm9tIHRoZSBlbmQgb2YgYGlucHV0YC4gRGVmYXVsdHMgdG8gYDBgLlxuICogQHJldHVybnMge0FycmF5fHN0cmluZ30gQSBuZXcgc3ViLWFycmF5IG9yIHN1YnN0cmluZyBvZiBsZW5ndGggYGxpbWl0YCBvciBsZXNzIGlmIHRoZSBpbnB1dCBoYWRcbiAqICAgICBsZXNzIHRoYW4gYGxpbWl0YCBlbGVtZW50cy5cbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwibGltaXRUb0V4YW1wbGVcIiBuYW1lPVwibGltaXQtdG8tZmlsdGVyXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdsaW1pdFRvRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5udW1iZXJzID0gWzEsMiwzLDQsNSw2LDcsOCw5XTtcbiAgICAgICAgICAgICAkc2NvcGUubGV0dGVycyA9IFwiYWJjZGVmZ2hpXCI7XG4gICAgICAgICAgICAgJHNjb3BlLmxvbmdOdW1iZXIgPSAyMzQ1NDMyMzQyO1xuICAgICAgICAgICAgICRzY29wZS5udW1MaW1pdCA9IDM7XG4gICAgICAgICAgICAgJHNjb3BlLmxldHRlckxpbWl0ID0gMztcbiAgICAgICAgICAgICAkc2NvcGUubG9uZ051bWJlckxpbWl0ID0gMztcbiAgICAgICAgICAgfV0pO1xuICAgICAgIDwvc2NyaXB0PlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICBMaW1pdCB7e251bWJlcnN9fSB0bzpcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgc3RlcD1cIjFcIiBuZy1tb2RlbD1cIm51bUxpbWl0XCI+XG4gICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgPHA+T3V0cHV0IG51bWJlcnM6IHt7IG51bWJlcnMgfCBsaW1pdFRvOm51bUxpbWl0IH19PC9wPlxuICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgTGltaXQge3tsZXR0ZXJzfX0gdG86XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIHN0ZXA9XCIxXCIgbmctbW9kZWw9XCJsZXR0ZXJMaW1pdFwiPlxuICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgIDxwPk91dHB1dCBsZXR0ZXJzOiB7eyBsZXR0ZXJzIHwgbGltaXRUbzpsZXR0ZXJMaW1pdCB9fTwvcD5cbiAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgIExpbWl0IHt7bG9uZ051bWJlcn19IHRvOlxuICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBzdGVwPVwiMVwiIG5nLW1vZGVsPVwibG9uZ051bWJlckxpbWl0XCI+XG4gICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgPHA+T3V0cHV0IGxvbmcgbnVtYmVyOiB7eyBsb25nTnVtYmVyIHwgbGltaXRUbzpsb25nTnVtYmVyTGltaXQgfX08L3A+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBudW1MaW1pdElucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbnVtTGltaXQnKSk7XG4gICAgICAgdmFyIGxldHRlckxpbWl0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdsZXR0ZXJMaW1pdCcpKTtcbiAgICAgICB2YXIgbG9uZ051bWJlckxpbWl0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdsb25nTnVtYmVyTGltaXQnKSk7XG4gICAgICAgdmFyIGxpbWl0ZWROdW1iZXJzID0gZWxlbWVudChieS5iaW5kaW5nKCdudW1iZXJzIHwgbGltaXRUbzpudW1MaW1pdCcpKTtcbiAgICAgICB2YXIgbGltaXRlZExldHRlcnMgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2xldHRlcnMgfCBsaW1pdFRvOmxldHRlckxpbWl0JykpO1xuICAgICAgIHZhciBsaW1pdGVkTG9uZ051bWJlciA9IGVsZW1lbnQoYnkuYmluZGluZygnbG9uZ051bWJlciB8IGxpbWl0VG86bG9uZ051bWJlckxpbWl0JykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBsaW1pdCB0aGUgbnVtYmVyIGFycmF5IHRvIGZpcnN0IHRocmVlIGl0ZW1zJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QobnVtTGltaXRJbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJzMnKTtcbiAgICAgICAgIGV4cGVjdChsZXR0ZXJMaW1pdElucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnMycpO1xuICAgICAgICAgZXhwZWN0KGxvbmdOdW1iZXJMaW1pdElucHV0LmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnMycpO1xuICAgICAgICAgZXhwZWN0KGxpbWl0ZWROdW1iZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IG51bWJlcnM6IFsxLDIsM10nKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTGV0dGVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsZXR0ZXJzOiBhYmMnKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTG9uZ051bWJlci5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsb25nIG51bWJlcjogMjM0Jyk7XG4gICAgICAgfSk7XG5cbiAgICAgICAvLyBUaGVyZSBpcyBhIGJ1ZyBpbiBzYWZhcmkgYW5kIHByb3RyYWN0b3IgdGhhdCBkb2Vzbid0IGxpa2UgdGhlIG1pbnVzIGtleVxuICAgICAgIC8vIGl0KCdzaG91bGQgdXBkYXRlIHRoZSBvdXRwdXQgd2hlbiAtMyBpcyBlbnRlcmVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgLy8gICBudW1MaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgLy8gICBudW1MaW1pdElucHV0LnNlbmRLZXlzKCctMycpO1xuICAgICAgIC8vICAgbGV0dGVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgIC8vICAgbGV0dGVyTGltaXRJbnB1dC5zZW5kS2V5cygnLTMnKTtcbiAgICAgICAvLyAgIGxvbmdOdW1iZXJMaW1pdElucHV0LmNsZWFyKCk7XG4gICAgICAgLy8gICBsb25nTnVtYmVyTGltaXRJbnB1dC5zZW5kS2V5cygnLTMnKTtcbiAgICAgICAvLyAgIGV4cGVjdChsaW1pdGVkTnVtYmVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBudW1iZXJzOiBbNyw4LDldJyk7XG4gICAgICAgLy8gICBleHBlY3QobGltaXRlZExldHRlcnMuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbGV0dGVyczogZ2hpJyk7XG4gICAgICAgLy8gICBleHBlY3QobGltaXRlZExvbmdOdW1iZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCdPdXRwdXQgbG9uZyBudW1iZXI6IDM0MicpO1xuICAgICAgIC8vIH0pO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBub3QgZXhjZWVkIHRoZSBtYXhpbXVtIHNpemUgb2YgaW5wdXQgYXJyYXknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIG51bUxpbWl0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgIG51bUxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpO1xuICAgICAgICAgbGV0dGVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbGV0dGVyTGltaXRJbnB1dC5zZW5kS2V5cygnMTAwJyk7XG4gICAgICAgICBsb25nTnVtYmVyTGltaXRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbG9uZ051bWJlckxpbWl0SW5wdXQuc2VuZEtleXMoJzEwMCcpO1xuICAgICAgICAgZXhwZWN0KGxpbWl0ZWROdW1iZXJzLmdldFRleHQoKSkudG9FcXVhbCgnT3V0cHV0IG51bWJlcnM6IFsxLDIsMyw0LDUsNiw3LDgsOV0nKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTGV0dGVycy5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsZXR0ZXJzOiBhYmNkZWZnaGknKTtcbiAgICAgICAgIGV4cGVjdChsaW1pdGVkTG9uZ051bWJlci5nZXRUZXh0KCkpLnRvRXF1YWwoJ091dHB1dCBsb25nIG51bWJlcjogMjM0NTQzMjM0MicpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4qL1xuZnVuY3Rpb24gbGltaXRUb0ZpbHRlcigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBsaW1pdCwgYmVnaW4pIHtcbiAgICBpZiAoTWF0aC5hYnMoTnVtYmVyKGxpbWl0KSkgPT09IEluZmluaXR5KSB7XG4gICAgICBsaW1pdCA9IE51bWJlcihsaW1pdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbWl0ID0gdG9JbnQobGltaXQpO1xuICAgIH1cbiAgICBpZiAoaXNOdW1iZXJOYU4obGltaXQpKSByZXR1cm4gaW5wdXQ7XG5cbiAgICBpZiAoaXNOdW1iZXIoaW5wdXQpKSBpbnB1dCA9IGlucHV0LnRvU3RyaW5nKCk7XG4gICAgaWYgKCFpc0FycmF5TGlrZShpbnB1dCkpIHJldHVybiBpbnB1dDtcblxuICAgIGJlZ2luID0gKCFiZWdpbiB8fCBpc05hTihiZWdpbikpID8gMCA6IHRvSW50KGJlZ2luKTtcbiAgICBiZWdpbiA9IChiZWdpbiA8IDApID8gTWF0aC5tYXgoMCwgaW5wdXQubGVuZ3RoICsgYmVnaW4pIDogYmVnaW47XG5cbiAgICBpZiAobGltaXQgPj0gMCkge1xuICAgICAgcmV0dXJuIHNsaWNlRm4oaW5wdXQsIGJlZ2luLCBiZWdpbiArIGxpbWl0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGJlZ2luID09PSAwKSB7XG4gICAgICAgIHJldHVybiBzbGljZUZuKGlucHV0LCBsaW1pdCwgaW5wdXQubGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzbGljZUZuKGlucHV0LCBNYXRoLm1heCgwLCBiZWdpbiArIGxpbWl0KSwgYmVnaW4pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gc2xpY2VGbihpbnB1dCwgYmVnaW4sIGVuZCkge1xuICBpZiAoaXNTdHJpbmcoaW5wdXQpKSByZXR1cm4gaW5wdXQuc2xpY2UoYmVnaW4sIGVuZCk7XG5cbiAgcmV0dXJuIHNsaWNlLmNhbGwoaW5wdXQsIGJlZ2luLCBlbmQpO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBmaWx0ZXJcbiAqIEBuYW1lIG9yZGVyQnlcbiAqIEBraW5kIGZ1bmN0aW9uXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm5zIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGl0ZW1zIGZyb20gdGhlIHNwZWNpZmllZCBgY29sbGVjdGlvbmAsIG9yZGVyZWQgYnkgYSBgY29tcGFyYXRvcmBcbiAqIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSB2YWx1ZXMgY29tcHV0ZWQgdXNpbmcgdGhlIGBleHByZXNzaW9uYCBwcmVkaWNhdGUuXG4gKlxuICogRm9yIGV4YW1wbGUsIGBbe2lkOiAnZm9vJ30sIHtpZDogJ2Jhcid9XSB8IG9yZGVyQnk6J2lkJ2Agd291bGQgcmVzdWx0IGluXG4gKiBgW3tpZDogJ2Jhcid9LCB7aWQ6ICdmb28nfV1gLlxuICpcbiAqIFRoZSBgY29sbGVjdGlvbmAgY2FuIGJlIGFuIEFycmF5IG9yIGFycmF5LWxpa2Ugb2JqZWN0IChlLmcuIE5vZGVMaXN0LCBqUXVlcnkgb2JqZWN0LCBUeXBlZEFycmF5LFxuICogU3RyaW5nLCBldGMpLlxuICpcbiAqIFRoZSBgZXhwcmVzc2lvbmAgY2FuIGJlIGEgc2luZ2xlIHByZWRpY2F0ZSwgb3IgYSBsaXN0IG9mIHByZWRpY2F0ZXMgZWFjaCBzZXJ2aW5nIGFzIGEgdGllLWJyZWFrZXJcbiAqIGZvciB0aGUgcHJlY2VkaW5nIG9uZS4gVGhlIGBleHByZXNzaW9uYCBpcyBldmFsdWF0ZWQgYWdhaW5zdCBlYWNoIGl0ZW0gYW5kIHRoZSBvdXRwdXQgaXMgdXNlZFxuICogZm9yIGNvbXBhcmluZyB3aXRoIG90aGVyIGl0ZW1zLlxuICpcbiAqIFlvdSBjYW4gY2hhbmdlIHRoZSBzb3J0aW5nIG9yZGVyIGJ5IHNldHRpbmcgYHJldmVyc2VgIHRvIGB0cnVlYC4gQnkgZGVmYXVsdCwgaXRlbXMgYXJlIHNvcnRlZCBpblxuICogYXNjZW5kaW5nIG9yZGVyLlxuICpcbiAqIFRoZSBjb21wYXJpc29uIGlzIGRvbmUgdXNpbmcgdGhlIGBjb21wYXJhdG9yYCBmdW5jdGlvbi4gSWYgbm9uZSBpcyBzcGVjaWZpZWQsIGEgZGVmYXVsdCwgYnVpbHQtaW5cbiAqIGNvbXBhcmF0b3IgaXMgdXNlZCAoc2VlIGJlbG93IGZvciBkZXRhaWxzIC0gaW4gYSBudXRzaGVsbCwgaXQgY29tcGFyZXMgbnVtYmVycyBudW1lcmljYWxseSBhbmRcbiAqIHN0cmluZ3MgYWxwaGFiZXRpY2FsbHkpLlxuICpcbiAqICMjIyBVbmRlciB0aGUgaG9vZFxuICpcbiAqIE9yZGVyaW5nIHRoZSBzcGVjaWZpZWQgYGNvbGxlY3Rpb25gIGhhcHBlbnMgaW4gdHdvIHBoYXNlczpcbiAqXG4gKiAxLiBBbGwgaXRlbXMgYXJlIHBhc3NlZCB0aHJvdWdoIHRoZSBwcmVkaWNhdGUgKG9yIHByZWRpY2F0ZXMpLCBhbmQgdGhlIHJldHVybmVkIHZhbHVlcyBhcmUgc2F2ZWRcbiAqICAgIGFsb25nIHdpdGggdGhlaXIgdHlwZSAoYHN0cmluZ2AsIGBudW1iZXJgIGV0YykuIEZvciBleGFtcGxlLCBhbiBpdGVtIGB7bGFiZWw6ICdmb28nfWAsIHBhc3NlZFxuICogICAgdGhyb3VnaCBhIHByZWRpY2F0ZSB0aGF0IGV4dHJhY3RzIHRoZSB2YWx1ZSBvZiB0aGUgYGxhYmVsYCBwcm9wZXJ0eSwgd291bGQgYmUgdHJhbnNmb3JtZWQgdG86XG4gKiAgICBgYGBcbiAqICAgIHtcbiAqICAgICAgdmFsdWU6ICdmb28nLFxuICogICAgICB0eXBlOiAnc3RyaW5nJyxcbiAqICAgICAgaW5kZXg6IC4uLlxuICogICAgfVxuICogICAgYGBgXG4gKiAyLiBUaGUgY29tcGFyYXRvciBmdW5jdGlvbiBpcyB1c2VkIHRvIHNvcnQgdGhlIGl0ZW1zLCBiYXNlZCBvbiB0aGUgZGVyaXZlZCB2YWx1ZXMsIHR5cGVzIGFuZFxuICogICAgaW5kaWNlcy5cbiAqXG4gKiBJZiB5b3UgdXNlIGEgY3VzdG9tIGNvbXBhcmF0b3IsIGl0IHdpbGwgYmUgY2FsbGVkIHdpdGggcGFpcnMgb2Ygb2JqZWN0cyBvZiB0aGUgZm9ybVxuICogYHt2YWx1ZTogLi4uLCB0eXBlOiAnLi4uJywgaW5kZXg6IC4uLn1gIGFuZCBpcyBleHBlY3RlZCB0byByZXR1cm4gYDBgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVhbFxuICogKGFzIGZhciBhcyB0aGUgY29tcGFyYXRvciBpcyBjb25jZXJuZWQpLCBgLTFgIGlmIHRoZSAxc3Qgb25lIHNob3VsZCBiZSByYW5rZWQgaGlnaGVyIHRoYW4gdGhlXG4gKiBzZWNvbmQsIG9yIGAxYCBvdGhlcndpc2UuXG4gKlxuICogSW4gb3JkZXIgdG8gZW5zdXJlIHRoYXQgdGhlIHNvcnRpbmcgd2lsbCBiZSBkZXRlcm1pbmlzdGljIGFjcm9zcyBwbGF0Zm9ybXMsIGlmIG5vbmUgb2YgdGhlXG4gKiBzcGVjaWZpZWQgcHJlZGljYXRlcyBjYW4gZGlzdGluZ3Vpc2ggYmV0d2VlbiB0d28gaXRlbXMsIGBvcmRlckJ5YCB3aWxsIGF1dG9tYXRpY2FsbHkgaW50cm9kdWNlIGFcbiAqIGR1bW15IHByZWRpY2F0ZSB0aGF0IHJldHVybnMgdGhlIGl0ZW0ncyBpbmRleCBhcyBgdmFsdWVgLlxuICogKElmIHlvdSBhcmUgdXNpbmcgYSBjdXN0b20gY29tcGFyYXRvciwgbWFrZSBzdXJlIGl0IGNhbiBoYW5kbGUgdGhpcyBwcmVkaWNhdGUgYXMgd2VsbC4pXG4gKlxuICogSWYgYSBjdXN0b20gY29tcGFyYXRvciBzdGlsbCBjYW4ndCBkaXN0aW5ndWlzaCBiZXR3ZWVuIHR3byBpdGVtcywgdGhlbiB0aGV5IHdpbGwgYmUgc29ydGVkIGJhc2VkXG4gKiBvbiB0aGVpciBpbmRleCB1c2luZyB0aGUgYnVpbHQtaW4gY29tcGFyYXRvci5cbiAqXG4gKiBGaW5hbGx5LCBpbiBhbiBhdHRlbXB0IHRvIHNpbXBsaWZ5IHRoaW5ncywgaWYgYSBwcmVkaWNhdGUgcmV0dXJucyBhbiBvYmplY3QgYXMgdGhlIGV4dHJhY3RlZFxuICogdmFsdWUgZm9yIGFuIGl0ZW0sIGBvcmRlckJ5YCB3aWxsIHRyeSB0byBjb252ZXJ0IHRoYXQgb2JqZWN0IHRvIGEgcHJpbWl0aXZlIHZhbHVlLCBiZWZvcmUgcGFzc2luZ1xuICogaXQgdG8gdGhlIGNvbXBhcmF0b3IuIFRoZSBmb2xsb3dpbmcgcnVsZXMgZ292ZXJuIHRoZSBjb252ZXJzaW9uOlxuICpcbiAqIDEuIElmIHRoZSBvYmplY3QgaGFzIGEgYHZhbHVlT2YoKWAgbWV0aG9kIHRoYXQgcmV0dXJucyBhIHByaW1pdGl2ZSwgaXRzIHJldHVybiB2YWx1ZSB3aWxsIGJlXG4gKiAgICB1c2VkIGluc3RlYWQuPGJyIC8+XG4gKiAgICAoSWYgdGhlIG9iamVjdCBoYXMgYSBgdmFsdWVPZigpYCBtZXRob2QgdGhhdCByZXR1cm5zIGFub3RoZXIgb2JqZWN0LCB0aGVuIHRoZSByZXR1cm5lZCBvYmplY3RcbiAqICAgIHdpbGwgYmUgdXNlZCBpbiBzdWJzZXF1ZW50IHN0ZXBzLilcbiAqIDIuIElmIHRoZSBvYmplY3QgaGFzIGEgY3VzdG9tIGB0b1N0cmluZygpYCBtZXRob2QgKGkuZS4gbm90IHRoZSBvbmUgaW5oZXJpdGVkIGZyb20gYE9iamVjdGApIHRoYXRcbiAqICAgIHJldHVybnMgYSBwcmltaXRpdmUsIGl0cyByZXR1cm4gdmFsdWUgd2lsbCBiZSB1c2VkIGluc3RlYWQuPGJyIC8+XG4gKiAgICAoSWYgdGhlIG9iamVjdCBoYXMgYSBgdG9TdHJpbmcoKWAgbWV0aG9kIHRoYXQgcmV0dXJucyBhbm90aGVyIG9iamVjdCwgdGhlbiB0aGUgcmV0dXJuZWQgb2JqZWN0XG4gKiAgICB3aWxsIGJlIHVzZWQgaW4gc3Vic2VxdWVudCBzdGVwcy4pXG4gKiAzLiBObyBjb252ZXJzaW9uOyB0aGUgb2JqZWN0IGl0c2VsZiBpcyB1c2VkLlxuICpcbiAqICMjIyBUaGUgZGVmYXVsdCBjb21wYXJhdG9yXG4gKlxuICogVGhlIGRlZmF1bHQsIGJ1aWx0LWluIGNvbXBhcmF0b3Igc2hvdWxkIGJlIHN1ZmZpY2llbnQgZm9yIG1vc3QgdXNlY2FzZXMuIEluIHNob3J0LCBpdCBjb21wYXJlc1xuICogbnVtYmVycyBudW1lcmljYWxseSwgc3RyaW5ncyBhbHBoYWJldGljYWxseSAoYW5kIGNhc2UtaW5zZW5zaXRpdmVseSksIGZvciBvYmplY3RzIGZhbGxzIGJhY2sgdG9cbiAqIHVzaW5nIHRoZWlyIGluZGV4IGluIHRoZSBvcmlnaW5hbCBjb2xsZWN0aW9uLCBhbmQgc29ydHMgdmFsdWVzIG9mIGRpZmZlcmVudCB0eXBlcyBieSB0eXBlLlxuICpcbiAqIE1vcmUgc3BlY2lmaWNhbGx5LCBpdCBmb2xsb3dzIHRoZXNlIHN0ZXBzIHRvIGRldGVybWluZSB0aGUgcmVsYXRpdmUgb3JkZXIgb2YgaXRlbXM6XG4gKlxuICogMS4gSWYgdGhlIGNvbXBhcmVkIHZhbHVlcyBhcmUgb2YgZGlmZmVyZW50IHR5cGVzLCBjb21wYXJlIHRoZSB0eXBlcyB0aGVtc2VsdmVzIGFscGhhYmV0aWNhbGx5LlxuICogMi4gSWYgYm90aCB2YWx1ZXMgYXJlIG9mIHR5cGUgYHN0cmluZ2AsIGNvbXBhcmUgdGhlbSBhbHBoYWJldGljYWxseSBpbiBhIGNhc2UtIGFuZFxuICogICAgbG9jYWxlLWluc2Vuc2l0aXZlIHdheS5cbiAqIDMuIElmIGJvdGggdmFsdWVzIGFyZSBvYmplY3RzLCBjb21wYXJlIHRoZWlyIGluZGljZXMgaW5zdGVhZC5cbiAqIDQuIE90aGVyd2lzZSwgcmV0dXJuOlxuICogICAgLSAgYDBgLCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVhbCAoYnkgc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb24sIGkuZS4gdXNpbmcgYD09PWApLlxuICogICAgLSBgLTFgLCBpZiB0aGUgMXN0IHZhbHVlIGlzIFwibGVzcyB0aGFuXCIgdGhlIDJuZCB2YWx1ZSAoY29tcGFyZWQgdXNpbmcgdGhlIGA8YCBvcGVyYXRvcikuXG4gKiAgICAtICBgMWAsIG90aGVyd2lzZS5cbiAqXG4gKiAqKk5vdGU6KiogSWYgeW91IG5vdGljZSBudW1iZXJzIG5vdCBiZWluZyBzb3J0ZWQgYXMgZXhwZWN0ZWQsIG1ha2Ugc3VyZSB0aGV5IGFyZSBhY3R1YWxseSBiZWluZ1xuICogICAgICAgICAgIHNhdmVkIGFzIG51bWJlcnMgYW5kIG5vdCBzdHJpbmdzLlxuICogKipOb3RlOioqIEZvciB0aGUgcHVycG9zZSBvZiBzb3J0aW5nLCBgbnVsbGAgdmFsdWVzIGFyZSB0cmVhdGVkIGFzIHRoZSBzdHJpbmcgYCdudWxsJ2AgKGkuZS5cbiAqICAgICAgICAgICBgdHlwZTogJ3N0cmluZydgLCBgdmFsdWU6ICdudWxsJ2ApLiBUaGlzIG1heSBjYXVzZSB1bmV4cGVjdGVkIHNvcnQgb3JkZXIgcmVsYXRpdmUgdG9cbiAqICAgICAgICAgICBvdGhlciB2YWx1ZXMuXG4gKlxuICogQHBhcmFtIHtBcnJheXxBcnJheUxpa2V9IGNvbGxlY3Rpb24gLSBUaGUgY29sbGVjdGlvbiAoYXJyYXkgb3IgYXJyYXktbGlrZSBvYmplY3QpIHRvIHNvcnQuXG4gKiBAcGFyYW0geyhGdW5jdGlvbnxzdHJpbmd8QXJyYXkuPEZ1bmN0aW9ufHN0cmluZz4pPX0gZXhwcmVzc2lvbiAtIEEgcHJlZGljYXRlIChvciBsaXN0IG9mXG4gKiAgICBwcmVkaWNhdGVzKSB0byBiZSB1c2VkIGJ5IHRoZSBjb21wYXJhdG9yIHRvIGRldGVybWluZSB0aGUgb3JkZXIgb2YgZWxlbWVudHMuXG4gKlxuICogICAgQ2FuIGJlIG9uZSBvZjpcbiAqXG4gKiAgICAtIGBGdW5jdGlvbmA6IEEgZ2V0dGVyIGZ1bmN0aW9uLiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdpdGggZWFjaCBpdGVtIGFzIGFyZ3VtZW50IGFuZFxuICogICAgICB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYmUgdXNlZCBmb3Igc29ydGluZy5cbiAqICAgIC0gYHN0cmluZ2A6IEFuIEFuZ3VsYXIgZXhwcmVzc2lvbi4gVGhpcyBleHByZXNzaW9uIHdpbGwgYmUgZXZhbHVhdGVkIGFnYWluc3QgZWFjaCBpdGVtIGFuZCB0aGVcbiAqICAgICAgcmVzdWx0IHdpbGwgYmUgdXNlZCBmb3Igc29ydGluZy4gRm9yIGV4YW1wbGUsIHVzZSBgJ2xhYmVsJ2AgdG8gc29ydCBieSBhIHByb3BlcnR5IGNhbGxlZFxuICogICAgICBgbGFiZWxgIG9yIGAnbGFiZWwuc3Vic3RyaW5nKDAsIDMpJ2AgdG8gc29ydCBieSB0aGUgZmlyc3QgMyBjaGFyYWN0ZXJzIG9mIHRoZSBgbGFiZWxgXG4gKiAgICAgIHByb3BlcnR5LjxiciAvPlxuICogICAgICAoVGhlIHJlc3VsdCBvZiBhIGNvbnN0YW50IGV4cHJlc3Npb24gaXMgaW50ZXJwcmV0ZWQgYXMgYSBwcm9wZXJ0eSBuYW1lIHRvIGJlIHVzZWQgZm9yXG4gKiAgICAgIGNvbXBhcmlzb24uIEZvciBleGFtcGxlLCB1c2UgYCdcInNwZWNpYWwgbmFtZVwiJ2AgKG5vdGUgdGhlIGV4dHJhIHBhaXIgb2YgcXVvdGVzKSB0byBzb3J0IGJ5IGFcbiAqICAgICAgcHJvcGVydHkgY2FsbGVkIGBzcGVjaWFsIG5hbWVgLik8YnIgLz5cbiAqICAgICAgQW4gZXhwcmVzc2lvbiBjYW4gYmUgb3B0aW9uYWxseSBwcmVmaXhlZCB3aXRoIGArYCBvciBgLWAgdG8gY29udHJvbCB0aGUgc29ydGluZyBkaXJlY3Rpb24sXG4gKiAgICAgIGFzY2VuZGluZyBvciBkZXNjZW5kaW5nLiBGb3IgZXhhbXBsZSwgYCcrbGFiZWwnYCBvciBgJy1sYWJlbCdgLiBJZiBubyBwcm9wZXJ0eSBpcyBwcm92aWRlZCxcbiAqICAgICAgKGUuZy4gYCcrJ2Agb3IgYCctJ2ApLCB0aGUgY29sbGVjdGlvbiBlbGVtZW50IGl0c2VsZiBpcyB1c2VkIGluIGNvbXBhcmlzb25zLlxuICogICAgLSBgQXJyYXlgOiBBbiBhcnJheSBvZiBmdW5jdGlvbiBhbmQvb3Igc3RyaW5nIHByZWRpY2F0ZXMuIElmIGEgcHJlZGljYXRlIGNhbm5vdCBkZXRlcm1pbmUgdGhlXG4gKiAgICAgIHJlbGF0aXZlIG9yZGVyIG9mIHR3byBpdGVtcywgdGhlIG5leHQgcHJlZGljYXRlIGlzIHVzZWQgYXMgYSB0aWUtYnJlYWtlci5cbiAqXG4gKiAqKk5vdGU6KiogSWYgdGhlIHByZWRpY2F0ZSBpcyBtaXNzaW5nIG9yIGVtcHR5IHRoZW4gaXQgZGVmYXVsdHMgdG8gYCcrJ2AuXG4gKlxuICogQHBhcmFtIHtib29sZWFuPX0gcmV2ZXJzZSAtIElmIGB0cnVlYCwgcmV2ZXJzZSB0aGUgc29ydGluZyBvcmRlci5cbiAqIEBwYXJhbSB7KEZ1bmN0aW9uKT19IGNvbXBhcmF0b3IgLSBUaGUgY29tcGFyYXRvciBmdW5jdGlvbiB1c2VkIHRvIGRldGVybWluZSB0aGUgcmVsYXRpdmUgb3JkZXIgb2ZcbiAqICAgIHZhbHVlIHBhaXJzLiBJZiBvbWl0dGVkLCB0aGUgYnVpbHQtaW4gY29tcGFyYXRvciB3aWxsIGJlIHVzZWQuXG4gKlxuICogQHJldHVybnMge0FycmF5fSAtIFRoZSBzb3J0ZWQgYXJyYXkuXG4gKlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgT3JkZXJpbmcgYSB0YWJsZSB3aXRoIGBuZ1JlcGVhdGBcbiAqXG4gKiBUaGUgZXhhbXBsZSBiZWxvdyBkZW1vbnN0cmF0ZXMgYSBzaW1wbGUge0BsaW5rIG5nUmVwZWF0IG5nUmVwZWF0fSwgd2hlcmUgdGhlIGRhdGEgaXMgc29ydGVkIGJ5XG4gKiBhZ2UgaW4gZGVzY2VuZGluZyBvcmRlciAoZXhwcmVzc2lvbiBpcyBzZXQgdG8gYCctYWdlJ2ApLiBUaGUgYGNvbXBhcmF0b3JgIGlzIG5vdCBzZXQsIHdoaWNoIG1lYW5zXG4gKiBpdCBkZWZhdWx0cyB0byB0aGUgYnVpbHQtaW4gY29tcGFyYXRvci5cbiAqXG4gICA8ZXhhbXBsZSBuYW1lPVwib3JkZXJCeS1zdGF0aWNcIiBtb2R1bGU9XCJvcmRlckJ5RXhhbXBsZTFcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPHRhYmxlIGNsYXNzPVwiZnJpZW5kc1wiPlxuICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgPHRoPk5hbWU8L3RoPlxuICAgICAgICAgICAgIDx0aD5QaG9uZSBOdW1iZXI8L3RoPlxuICAgICAgICAgICAgIDx0aD5BZ2U8L3RoPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBvcmRlckJ5OictYWdlJ1wiPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5uYW1lfX08L3RkPlxuICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5waG9uZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQuYWdlfX08L3RkPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgPC90YWJsZT5cbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ29yZGVyQnlFeGFtcGxlMScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBbXG4gICAgICAgICAgICAge25hbWU6ICdKb2huJywgICBwaG9uZTogJzU1NS0xMjEyJywgIGFnZTogMTB9LFxuICAgICAgICAgICAgIHtuYW1lOiAnTWFyeScsICAgcGhvbmU6ICc1NTUtOTg3NicsICBhZ2U6IDE5fSxcbiAgICAgICAgICAgICB7bmFtZTogJ01pa2UnLCAgIHBob25lOiAnNTU1LTQzMjEnLCAgYWdlOiAyMX0sXG4gICAgICAgICAgICAge25hbWU6ICdBZGFtJywgICBwaG9uZTogJzU1NS01Njc4JywgIGFnZTogMzV9LFxuICAgICAgICAgICAgIHtuYW1lOiAnSnVsaWUnLCAgcGhvbmU6ICc1NTUtODc2NScsICBhZ2U6IDI5fVxuICAgICAgICAgICBdO1xuICAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAuZnJpZW5kcyB7XG4gICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICAgICAgIH1cblxuICAgICAgIC5mcmllbmRzIHRoIHtcbiAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZDtcbiAgICAgICB9XG4gICAgICAgLmZyaWVuZHMgdGQsIC5mcmllbmRzIHRoIHtcbiAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQ7XG4gICAgICAgICBwYWRkaW5nOiA1cHggMTBweDtcbiAgICAgICB9XG4gICAgICAgLmZyaWVuZHMgdGQ6Zmlyc3QtY2hpbGQsIC5mcmllbmRzIHRoOmZpcnN0LWNoaWxkIHtcbiAgICAgICAgIGJvcmRlci1sZWZ0OiBub25lO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgLy8gRWxlbWVudCBsb2NhdG9yc1xuICAgICAgIHZhciBuYW1lcyA9IGVsZW1lbnQuYWxsKGJ5LnJlcGVhdGVyKCdmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpKTtcblxuICAgICAgIGl0KCdzaG91bGQgc29ydCBmcmllbmRzIGJ5IGFnZSBpbiByZXZlcnNlIG9yZGVyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDApLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCgxKS5nZXRUZXh0KCkpLnRvQmUoJ0p1bGllJyk7XG4gICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDIpLmdldFRleHQoKSkudG9CZSgnTWlrZScpO1xuICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCgzKS5nZXRUZXh0KCkpLnRvQmUoJ01hcnknKTtcbiAgICAgICAgIGV4cGVjdChuYW1lcy5nZXQoNCkuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqIDxociAvPlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgQ2hhbmdpbmcgcGFyYW1ldGVycyBkeW5hbWljYWxseVxuICpcbiAqIEFsbCBwYXJhbWV0ZXJzIGNhbiBiZSBjaGFuZ2VkIGR5bmFtaWNhbGx5LiBUaGUgbmV4dCBleGFtcGxlIHNob3dzIGhvdyB5b3UgY2FuIG1ha2UgdGhlIGNvbHVtbnMgb2ZcbiAqIGEgdGFibGUgc29ydGFibGUsIGJ5IGJpbmRpbmcgdGhlIGBleHByZXNzaW9uYCBhbmQgYHJldmVyc2VgIHBhcmFtZXRlcnMgdG8gc2NvcGUgcHJvcGVydGllcy5cbiAqXG4gICA8ZXhhbXBsZSBuYW1lPVwib3JkZXJCeS1keW5hbWljXCIgbW9kdWxlPVwib3JkZXJCeUV4YW1wbGUyXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxwcmU+U29ydCBieSA9IHt7cHJvcGVydHlOYW1lfX07IHJldmVyc2UgPSB7e3JldmVyc2V9fTwvcHJlPlxuICAgICAgICAgPGhyLz5cbiAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJwcm9wZXJ0eU5hbWUgPSBudWxsOyByZXZlcnNlID0gZmFsc2VcIj5TZXQgdG8gdW5zb3J0ZWQ8L2J1dHRvbj5cbiAgICAgICAgIDxoci8+XG4gICAgICAgICA8dGFibGUgY2xhc3M9XCJmcmllbmRzXCI+XG4gICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic29ydEJ5KCduYW1lJylcIj5OYW1lPC9idXR0b24+XG4gICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInNvcnRvcmRlclwiIG5nLXNob3c9XCJwcm9wZXJ0eU5hbWUgPT09ICduYW1lJ1wiIG5nLWNsYXNzPVwie3JldmVyc2U6IHJldmVyc2V9XCI+PC9zcGFuPlxuICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNvcnRCeSgncGhvbmUnKVwiPlBob25lIE51bWJlcjwvYnV0dG9uPlxuICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzb3J0b3JkZXJcIiBuZy1zaG93PVwicHJvcGVydHlOYW1lID09PSAncGhvbmUnXCIgbmctY2xhc3M9XCJ7cmV2ZXJzZTogcmV2ZXJzZX1cIj48L3NwYW4+XG4gICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICAgICA8dGg+XG4gICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic29ydEJ5KCdhZ2UnKVwiPkFnZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzb3J0b3JkZXJcIiBuZy1zaG93PVwicHJvcGVydHlOYW1lID09PSAnYWdlJ1wiIG5nLWNsYXNzPVwie3JldmVyc2U6IHJldmVyc2V9XCI+PC9zcGFuPlxuICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9XCJmcmllbmQgaW4gZnJpZW5kcyB8IG9yZGVyQnk6cHJvcGVydHlOYW1lOnJldmVyc2VcIj5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLmFnZX19PC90ZD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgIDwvdGFibGU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcmRlckJ5RXhhbXBsZTInLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgIHZhciBmcmllbmRzID0gW1xuICAgICAgICAgICAgIHtuYW1lOiAnSm9obicsICAgcGhvbmU6ICc1NTUtMTIxMicsICBhZ2U6IDEwfSxcbiAgICAgICAgICAgICB7bmFtZTogJ01hcnknLCAgIHBob25lOiAnNTU1LTk4NzYnLCAgYWdlOiAxOX0sXG4gICAgICAgICAgICAge25hbWU6ICdNaWtlJywgICBwaG9uZTogJzU1NS00MzIxJywgIGFnZTogMjF9LFxuICAgICAgICAgICAgIHtuYW1lOiAnQWRhbScsICAgcGhvbmU6ICc1NTUtNTY3OCcsICBhZ2U6IDM1fSxcbiAgICAgICAgICAgICB7bmFtZTogJ0p1bGllJywgIHBob25lOiAnNTU1LTg3NjUnLCAgYWdlOiAyOX1cbiAgICAgICAgICAgXTtcblxuICAgICAgICAgICAkc2NvcGUucHJvcGVydHlOYW1lID0gJ2FnZSc7XG4gICAgICAgICAgICRzY29wZS5yZXZlcnNlID0gdHJ1ZTtcbiAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBmcmllbmRzO1xuXG4gICAgICAgICAgICRzY29wZS5zb3J0QnkgPSBmdW5jdGlvbihwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgICAgICAkc2NvcGUucmV2ZXJzZSA9ICgkc2NvcGUucHJvcGVydHlOYW1lID09PSBwcm9wZXJ0eU5hbWUpID8gISRzY29wZS5yZXZlcnNlIDogZmFsc2U7XG4gICAgICAgICAgICAgJHNjb3BlLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcbiAgICAgICAgICAgfTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLmZyaWVuZHMge1xuICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICAgICB9XG5cbiAgICAgICAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkLCAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkO1xuICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkOmZpcnN0LWNoaWxkLCAuZnJpZW5kcyB0aDpmaXJzdC1jaGlsZCB7XG4gICAgICAgICBib3JkZXItbGVmdDogbm9uZTtcbiAgICAgICB9XG5cbiAgICAgICAuc29ydG9yZGVyOmFmdGVyIHtcbiAgICAgICAgIGNvbnRlbnQ6ICdcXDI1YjInOyAgIC8vIEJMQUNLIFVQLVBPSU5USU5HIFRSSUFOR0xFXG4gICAgICAgfVxuICAgICAgIC5zb3J0b3JkZXIucmV2ZXJzZTphZnRlciB7XG4gICAgICAgICBjb250ZW50OiAnXFwyNWJjJzsgICAvLyBCTEFDSyBET1dOLVBPSU5USU5HIFRSSUFOR0xFXG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAvLyBFbGVtZW50IGxvY2F0b3JzXG4gICAgICAgdmFyIHVuc29ydEJ1dHRvbiA9IGVsZW1lbnQoYnkucGFydGlhbEJ1dHRvblRleHQoJ3Vuc29ydGVkJykpO1xuICAgICAgIHZhciBuYW1lSGVhZGVyID0gZWxlbWVudChieS5wYXJ0aWFsQnV0dG9uVGV4dCgnTmFtZScpKTtcbiAgICAgICB2YXIgcGhvbmVIZWFkZXIgPSBlbGVtZW50KGJ5LnBhcnRpYWxCdXR0b25UZXh0KCdQaG9uZScpKTtcbiAgICAgICB2YXIgYWdlSGVhZGVyID0gZWxlbWVudChieS5wYXJ0aWFsQnV0dG9uVGV4dCgnQWdlJykpO1xuICAgICAgIHZhciBmaXJzdE5hbWUgPSBlbGVtZW50KGJ5LnJlcGVhdGVyKCdmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpLnJvdygwKSk7XG4gICAgICAgdmFyIGxhc3ROYW1lID0gZWxlbWVudChieS5yZXBlYXRlcignZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKS5yb3coNCkpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBzb3J0IGZyaWVuZHMgYnkgc29tZSBwcm9wZXJ0eSwgd2hlbiBjbGlja2luZyBvbiB0aGUgY29sdW1uIGhlYWRlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcblxuICAgICAgICAgcGhvbmVIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdNYXJ5Jyk7XG5cbiAgICAgICAgIG5hbWVIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdNaWtlJyk7XG5cbiAgICAgICAgIGFnZUhlYWRlci5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgc29ydCBmcmllbmRzIGluIHJldmVyc2Ugb3JkZXIsIHdoZW4gY2xpY2tpbmcgb24gdGhlIHNhbWUgY29sdW1uJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuXG4gICAgICAgICBhZ2VIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG5cbiAgICAgICAgIGFnZUhlYWRlci5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgcmVzdG9yZSB0aGUgb3JpZ2luYWwgb3JkZXIsIHdoZW4gY2xpY2tpbmcgXCJTZXQgdG8gdW5zb3J0ZWRcIicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcblxuICAgICAgICAgdW5zb3J0QnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSnVsaWUnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICogPGhyIC8+XG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBVc2luZyBgb3JkZXJCeWAgaW5zaWRlIGEgY29udHJvbGxlclxuICpcbiAqIEl0IGlzIGFsc28gcG9zc2libGUgdG8gY2FsbCB0aGUgYG9yZGVyQnlgIGZpbHRlciBtYW51YWxseSwgYnkgaW5qZWN0aW5nIGBvcmRlckJ5RmlsdGVyYCwgYW5kXG4gKiBjYWxsaW5nIGl0IHdpdGggdGhlIGRlc2lyZWQgcGFyYW1ldGVycy4gKEFsdGVybmF0aXZlbHksIHlvdSBjb3VsZCBpbmplY3QgdGhlIGAkZmlsdGVyYCBmYWN0b3J5XG4gKiBhbmQgcmV0cmlldmUgdGhlIGBvcmRlckJ5YCBmaWx0ZXIgd2l0aCBgJGZpbHRlcignb3JkZXJCeScpYC4pXG4gKlxuICAgPGV4YW1wbGUgbmFtZT1cIm9yZGVyQnktY2FsbC1tYW51YWxseVwiIG1vZHVsZT1cIm9yZGVyQnlFeGFtcGxlM1wiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8cHJlPlNvcnQgYnkgPSB7e3Byb3BlcnR5TmFtZX19OyByZXZlcnNlID0ge3tyZXZlcnNlfX08L3ByZT5cbiAgICAgICAgIDxoci8+XG4gICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwic29ydEJ5KG51bGwpXCI+U2V0IHRvIHVuc29ydGVkPC9idXR0b24+XG4gICAgICAgICA8aHIvPlxuICAgICAgICAgPHRhYmxlIGNsYXNzPVwiZnJpZW5kc1wiPlxuICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNvcnRCeSgnbmFtZScpXCI+TmFtZTwvYnV0dG9uPlxuICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzb3J0b3JkZXJcIiBuZy1zaG93PVwicHJvcGVydHlOYW1lID09PSAnbmFtZSdcIiBuZy1jbGFzcz1cIntyZXZlcnNlOiByZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICAgIDx0aD5cbiAgICAgICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzb3J0QnkoJ3Bob25lJylcIj5QaG9uZSBOdW1iZXI8L2J1dHRvbj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic29ydG9yZGVyXCIgbmctc2hvdz1cInByb3BlcnR5TmFtZSA9PT0gJ3Bob25lJ1wiIG5nLWNsYXNzPVwie3JldmVyc2U6IHJldmVyc2V9XCI+PC9zcGFuPlxuICAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICAgPHRoPlxuICAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNvcnRCeSgnYWdlJylcIj5BZ2U8L2J1dHRvbj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic29ydG9yZGVyXCIgbmctc2hvdz1cInByb3BlcnR5TmFtZSA9PT0gJ2FnZSdcIiBuZy1jbGFzcz1cIntyZXZlcnNlOiByZXZlcnNlfVwiPjwvc3Bhbj5cbiAgICAgICAgICAgICA8L3RoPlxuICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHNcIj5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICA8dGQ+e3tmcmllbmQucGhvbmV9fTwvdGQ+XG4gICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLmFnZX19PC90ZD5cbiAgICAgICAgICAgPC90cj5cbiAgICAgICAgIDwvdGFibGU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcmRlckJ5RXhhbXBsZTMnLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJ29yZGVyQnlGaWx0ZXInLCBmdW5jdGlvbigkc2NvcGUsIG9yZGVyQnkpIHtcbiAgICAgICAgICAgdmFyIGZyaWVuZHMgPSBbXG4gICAgICAgICAgICAge25hbWU6ICdKb2huJywgICBwaG9uZTogJzU1NS0xMjEyJywgIGFnZTogMTB9LFxuICAgICAgICAgICAgIHtuYW1lOiAnTWFyeScsICAgcGhvbmU6ICc1NTUtOTg3NicsICBhZ2U6IDE5fSxcbiAgICAgICAgICAgICB7bmFtZTogJ01pa2UnLCAgIHBob25lOiAnNTU1LTQzMjEnLCAgYWdlOiAyMX0sXG4gICAgICAgICAgICAge25hbWU6ICdBZGFtJywgICBwaG9uZTogJzU1NS01Njc4JywgIGFnZTogMzV9LFxuICAgICAgICAgICAgIHtuYW1lOiAnSnVsaWUnLCAgcGhvbmU6ICc1NTUtODc2NScsICBhZ2U6IDI5fVxuICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICRzY29wZS5wcm9wZXJ0eU5hbWUgPSAnYWdlJztcbiAgICAgICAgICAgJHNjb3BlLnJldmVyc2UgPSB0cnVlO1xuICAgICAgICAgICAkc2NvcGUuZnJpZW5kcyA9IG9yZGVyQnkoZnJpZW5kcywgJHNjb3BlLnByb3BlcnR5TmFtZSwgJHNjb3BlLnJldmVyc2UpO1xuXG4gICAgICAgICAgICRzY29wZS5zb3J0QnkgPSBmdW5jdGlvbihwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgICAgICAkc2NvcGUucmV2ZXJzZSA9IChwcm9wZXJ0eU5hbWUgIT09IG51bGwgJiYgJHNjb3BlLnByb3BlcnR5TmFtZSA9PT0gcHJvcGVydHlOYW1lKVxuICAgICAgICAgICAgICAgICA/ICEkc2NvcGUucmV2ZXJzZSA6IGZhbHNlO1xuICAgICAgICAgICAgICRzY29wZS5wcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eU5hbWU7XG4gICAgICAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBvcmRlckJ5KGZyaWVuZHMsICRzY29wZS5wcm9wZXJ0eU5hbWUsICRzY29wZS5yZXZlcnNlKTtcbiAgICAgICAgICAgfTtcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLmZyaWVuZHMge1xuICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICAgICB9XG5cbiAgICAgICAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkLCAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkO1xuICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkOmZpcnN0LWNoaWxkLCAuZnJpZW5kcyB0aDpmaXJzdC1jaGlsZCB7XG4gICAgICAgICBib3JkZXItbGVmdDogbm9uZTtcbiAgICAgICB9XG5cbiAgICAgICAuc29ydG9yZGVyOmFmdGVyIHtcbiAgICAgICAgIGNvbnRlbnQ6ICdcXDI1YjInOyAgIC8vIEJMQUNLIFVQLVBPSU5USU5HIFRSSUFOR0xFXG4gICAgICAgfVxuICAgICAgIC5zb3J0b3JkZXIucmV2ZXJzZTphZnRlciB7XG4gICAgICAgICBjb250ZW50OiAnXFwyNWJjJzsgICAvLyBCTEFDSyBET1dOLVBPSU5USU5HIFRSSUFOR0xFXG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAvLyBFbGVtZW50IGxvY2F0b3JzXG4gICAgICAgdmFyIHVuc29ydEJ1dHRvbiA9IGVsZW1lbnQoYnkucGFydGlhbEJ1dHRvblRleHQoJ3Vuc29ydGVkJykpO1xuICAgICAgIHZhciBuYW1lSGVhZGVyID0gZWxlbWVudChieS5wYXJ0aWFsQnV0dG9uVGV4dCgnTmFtZScpKTtcbiAgICAgICB2YXIgcGhvbmVIZWFkZXIgPSBlbGVtZW50KGJ5LnBhcnRpYWxCdXR0b25UZXh0KCdQaG9uZScpKTtcbiAgICAgICB2YXIgYWdlSGVhZGVyID0gZWxlbWVudChieS5wYXJ0aWFsQnV0dG9uVGV4dCgnQWdlJykpO1xuICAgICAgIHZhciBmaXJzdE5hbWUgPSBlbGVtZW50KGJ5LnJlcGVhdGVyKCdmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpLnJvdygwKSk7XG4gICAgICAgdmFyIGxhc3ROYW1lID0gZWxlbWVudChieS5yZXBlYXRlcignZnJpZW5kcycpLmNvbHVtbignZnJpZW5kLm5hbWUnKS5yb3coNCkpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBzb3J0IGZyaWVuZHMgYnkgc29tZSBwcm9wZXJ0eSwgd2hlbiBjbGlja2luZyBvbiB0aGUgY29sdW1uIGhlYWRlcicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcblxuICAgICAgICAgcGhvbmVIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdNYXJ5Jyk7XG5cbiAgICAgICAgIG5hbWVIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdNaWtlJyk7XG5cbiAgICAgICAgIGFnZUhlYWRlci5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgc29ydCBmcmllbmRzIGluIHJldmVyc2Ugb3JkZXIsIHdoZW4gY2xpY2tpbmcgb24gdGhlIHNhbWUgY29sdW1uJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnQWRhbScpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuXG4gICAgICAgICBhZ2VIZWFkZXIuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChmaXJzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdKb2huJyk7XG4gICAgICAgICBleHBlY3QobGFzdE5hbWUuZ2V0VGV4dCgpKS50b0JlKCdBZGFtJyk7XG5cbiAgICAgICAgIGFnZUhlYWRlci5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcbiAgICAgICB9KTtcblxuICAgICAgIGl0KCdzaG91bGQgcmVzdG9yZSB0aGUgb3JpZ2luYWwgb3JkZXIsIHdoZW4gY2xpY2tpbmcgXCJTZXQgdG8gdW5zb3J0ZWRcIicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZpcnN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChsYXN0TmFtZS5nZXRUZXh0KCkpLnRvQmUoJ0pvaG4nKTtcblxuICAgICAgICAgdW5zb3J0QnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZmlyc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICAgICAgICAgZXhwZWN0KGxhc3ROYW1lLmdldFRleHQoKSkudG9CZSgnSnVsaWUnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICogPGhyIC8+XG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBVc2luZyBhIGN1c3RvbSBjb21wYXJhdG9yXG4gKlxuICogSWYgeW91IGhhdmUgdmVyeSBzcGVjaWZpYyByZXF1aXJlbWVudHMgYWJvdXQgdGhlIHdheSBpdGVtcyBhcmUgc29ydGVkLCB5b3UgY2FuIHBhc3MgeW91ciBvd25cbiAqIGNvbXBhcmF0b3IgZnVuY3Rpb24uIEZvciBleGFtcGxlLCB5b3UgbWlnaHQgbmVlZCB0byBjb21wYXJlIHNvbWUgc3RyaW5ncyBpbiBhIGxvY2FsZS1zZW5zaXRpdmVcbiAqIHdheS4gKFdoZW4gc3BlY2lmeWluZyBhIGN1c3RvbSBjb21wYXJhdG9yLCB5b3UgYWxzbyBuZWVkIHRvIHBhc3MgYSB2YWx1ZSBmb3IgdGhlIGByZXZlcnNlYFxuICogYXJndW1lbnQgLSBwYXNzaW5nIGBmYWxzZWAgcmV0YWlucyB0aGUgZGVmYXVsdCBzb3J0aW5nIG9yZGVyLCBpLmUuIGFzY2VuZGluZy4pXG4gKlxuICAgPGV4YW1wbGUgbmFtZT1cIm9yZGVyQnktY3VzdG9tLWNvbXBhcmF0b3JcIiBtb2R1bGU9XCJvcmRlckJ5RXhhbXBsZTRcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgPGRpdiBjbGFzcz1cImZyaWVuZHMtY29udGFpbmVyIGN1c3RvbS1jb21wYXJhdG9yXCI+XG4gICAgICAgICAgIDxoMz5Mb2NhbGUtc2Vuc2l0aXZlIENvbXBhcmF0b3I8L2gzPlxuICAgICAgICAgICA8dGFibGUgY2xhc3M9XCJmcmllbmRzXCI+XG4gICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICAgPHRoPk5hbWU8L3RoPlxuICAgICAgICAgICAgICAgPHRoPkZhdm9yaXRlIExldHRlcjwvdGg+XG4gICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgICA8dHIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBvcmRlckJ5OidmYXZvcml0ZUxldHRlcic6ZmFsc2U6bG9jYWxlU2Vuc2l0aXZlQ29tcGFyYXRvclwiPlxuICAgICAgICAgICAgICAgPHRkPnt7ZnJpZW5kLm5hbWV9fTwvdGQ+XG4gICAgICAgICAgICAgICA8dGQ+e3tmcmllbmQuZmF2b3JpdGVMZXR0ZXJ9fTwvdGQ+XG4gICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgIDwvZGl2PlxuICAgICAgICAgPGRpdiBjbGFzcz1cImZyaWVuZHMtY29udGFpbmVyIGRlZmF1bHQtY29tcGFyYXRvclwiPlxuICAgICAgICAgICA8aDM+RGVmYXVsdCBDb21wYXJhdG9yPC9oMz5cbiAgICAgICAgICAgPHRhYmxlIGNsYXNzPVwiZnJpZW5kc1wiPlxuICAgICAgICAgICAgIDx0cj5cbiAgICAgICAgICAgICAgIDx0aD5OYW1lPC90aD5cbiAgICAgICAgICAgICAgIDx0aD5GYXZvcml0ZSBMZXR0ZXI8L3RoPlxuICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgPHRyIG5nLXJlcGVhdD1cImZyaWVuZCBpbiBmcmllbmRzIHwgb3JkZXJCeTonZmF2b3JpdGVMZXR0ZXInXCI+XG4gICAgICAgICAgICAgICA8dGQ+e3tmcmllbmQubmFtZX19PC90ZD5cbiAgICAgICAgICAgICAgIDx0ZD57e2ZyaWVuZC5mYXZvcml0ZUxldHRlcn19PC90ZD5cbiAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgPC9kaXY+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgIGFuZ3VsYXIubW9kdWxlKCdvcmRlckJ5RXhhbXBsZTQnLCBbXSlcbiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICRzY29wZS5mcmllbmRzID0gW1xuICAgICAgICAgICAgIHtuYW1lOiAnSm9obicsICAgZmF2b3JpdGVMZXR0ZXI6ICfDhCd9LFxuICAgICAgICAgICAgIHtuYW1lOiAnTWFyeScsICAgZmF2b3JpdGVMZXR0ZXI6ICfDnCd9LFxuICAgICAgICAgICAgIHtuYW1lOiAnTWlrZScsICAgZmF2b3JpdGVMZXR0ZXI6ICfDlid9LFxuICAgICAgICAgICAgIHtuYW1lOiAnQWRhbScsICAgZmF2b3JpdGVMZXR0ZXI6ICdIJ30sXG4gICAgICAgICAgICAge25hbWU6ICdKdWxpZScsICBmYXZvcml0ZUxldHRlcjogJ1onfVxuICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICRzY29wZS5sb2NhbGVTZW5zaXRpdmVDb21wYXJhdG9yID0gZnVuY3Rpb24odjEsIHYyKSB7XG4gICAgICAgICAgICAgLy8gSWYgd2UgZG9uJ3QgZ2V0IHN0cmluZ3MsIGp1c3QgY29tcGFyZSBieSBpbmRleFxuICAgICAgICAgICAgIGlmICh2MS50eXBlICE9PSAnc3RyaW5nJyB8fCB2Mi50eXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgcmV0dXJuICh2MS5pbmRleCA8IHYyLmluZGV4KSA/IC0xIDogMTtcbiAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAvLyBDb21wYXJlIHN0cmluZ3MgYWxwaGFiZXRpY2FsbHksIHRha2luZyBsb2NhbGUgaW50byBhY2NvdW50XG4gICAgICAgICAgICAgcmV0dXJuIHYxLnZhbHVlLmxvY2FsZUNvbXBhcmUodjIudmFsdWUpO1xuICAgICAgICAgICB9O1xuICAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAuZnJpZW5kcy1jb250YWluZXIge1xuICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICAgbWFyZ2luOiAwIDMwcHg7XG4gICAgICAgfVxuXG4gICAgICAgLmZyaWVuZHMge1xuICAgICAgICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgICAgICB9XG5cbiAgICAgICAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQ7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkLCAuZnJpZW5kcyB0aCB7XG4gICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkO1xuICAgICAgICAgcGFkZGluZzogNXB4IDEwcHg7XG4gICAgICAgfVxuICAgICAgIC5mcmllbmRzIHRkOmZpcnN0LWNoaWxkLCAuZnJpZW5kcyB0aDpmaXJzdC1jaGlsZCB7XG4gICAgICAgICBib3JkZXItbGVmdDogbm9uZTtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIC8vIEVsZW1lbnQgbG9jYXRvcnNcbiAgICAgICB2YXIgY29udGFpbmVyID0gZWxlbWVudChieS5jc3MoJy5jdXN0b20tY29tcGFyYXRvcicpKTtcbiAgICAgICB2YXIgbmFtZXMgPSBjb250YWluZXIuYWxsKGJ5LnJlcGVhdGVyKCdmcmllbmRzJykuY29sdW1uKCdmcmllbmQubmFtZScpKTtcblxuICAgICAgIGl0KCdzaG91bGQgc29ydCBmcmllbmRzIGJ5IGZhdm9yaXRlIGxldHRlciAoaW4gY29ycmVjdCBhbHBoYWJldGljYWwgb3JkZXIpJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDApLmdldFRleHQoKSkudG9CZSgnSm9obicpO1xuICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCgxKS5nZXRUZXh0KCkpLnRvQmUoJ0FkYW0nKTtcbiAgICAgICAgIGV4cGVjdChuYW1lcy5nZXQoMikuZ2V0VGV4dCgpKS50b0JlKCdNaWtlJyk7XG4gICAgICAgICBleHBlY3QobmFtZXMuZ2V0KDMpLmdldFRleHQoKSkudG9CZSgnTWFyeScpO1xuICAgICAgICAgZXhwZWN0KG5hbWVzLmdldCg0KS5nZXRUZXh0KCkpLnRvQmUoJ0p1bGllJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqXG4gKi9cbm9yZGVyQnlGaWx0ZXIuJGluamVjdCA9IFsnJHBhcnNlJ107XG5mdW5jdGlvbiBvcmRlckJ5RmlsdGVyKCRwYXJzZSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIHNvcnRQcmVkaWNhdGUsIHJldmVyc2VPcmRlciwgY29tcGFyZUZuKSB7XG5cbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIGFycmF5O1xuICAgIGlmICghaXNBcnJheUxpa2UoYXJyYXkpKSB7XG4gICAgICB0aHJvdyBtaW5FcnIoJ29yZGVyQnknKSgnbm90YXJyYXknLCAnRXhwZWN0ZWQgYXJyYXkgYnV0IHJlY2VpdmVkOiB7MH0nLCBhcnJheSk7XG4gICAgfVxuXG4gICAgaWYgKCFpc0FycmF5KHNvcnRQcmVkaWNhdGUpKSB7IHNvcnRQcmVkaWNhdGUgPSBbc29ydFByZWRpY2F0ZV07IH1cbiAgICBpZiAoc29ydFByZWRpY2F0ZS5sZW5ndGggPT09IDApIHsgc29ydFByZWRpY2F0ZSA9IFsnKyddOyB9XG5cbiAgICB2YXIgcHJlZGljYXRlcyA9IHByb2Nlc3NQcmVkaWNhdGVzKHNvcnRQcmVkaWNhdGUpO1xuXG4gICAgdmFyIGRlc2NlbmRpbmcgPSByZXZlcnNlT3JkZXIgPyAtMSA6IDE7XG5cbiAgICAvLyBEZWZpbmUgdGhlIGBjb21wYXJlKClgIGZ1bmN0aW9uLiBVc2UgYSBkZWZhdWx0IGNvbXBhcmF0b3IgaWYgbm9uZSBpcyBzcGVjaWZpZWQuXG4gICAgdmFyIGNvbXBhcmUgPSBpc0Z1bmN0aW9uKGNvbXBhcmVGbikgPyBjb21wYXJlRm4gOiBkZWZhdWx0Q29tcGFyZTtcblxuICAgIC8vIFRoZSBuZXh0IHRocmVlIGxpbmVzIGFyZSBhIHZlcnNpb24gb2YgYSBTd2FydHppYW4gVHJhbnNmb3JtIGlkaW9tIGZyb20gUGVybFxuICAgIC8vIChzb21ldGltZXMgY2FsbGVkIHRoZSBEZWNvcmF0ZS1Tb3J0LVVuZGVjb3JhdGUgaWRpb20pXG4gICAgLy8gU2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1NjaHdhcnR6aWFuX3RyYW5zZm9ybVxuICAgIHZhciBjb21wYXJlVmFsdWVzID0gQXJyYXkucHJvdG90eXBlLm1hcC5jYWxsKGFycmF5LCBnZXRDb21wYXJpc29uT2JqZWN0KTtcbiAgICBjb21wYXJlVmFsdWVzLnNvcnQoZG9Db21wYXJpc29uKTtcbiAgICBhcnJheSA9IGNvbXBhcmVWYWx1ZXMubWFwKGZ1bmN0aW9uKGl0ZW0pIHsgcmV0dXJuIGl0ZW0udmFsdWU7IH0pO1xuXG4gICAgcmV0dXJuIGFycmF5O1xuXG4gICAgZnVuY3Rpb24gZ2V0Q29tcGFyaXNvbk9iamVjdCh2YWx1ZSwgaW5kZXgpIHtcbiAgICAgIC8vIE5PVEU6IFdlIGFyZSBhZGRpbmcgYW4gZXh0cmEgYHRpZUJyZWFrZXJgIHZhbHVlIGJhc2VkIG9uIHRoZSBlbGVtZW50J3MgaW5kZXguXG4gICAgICAvLyBUaGlzIHdpbGwgYmUgdXNlZCB0byBrZWVwIHRoZSBzb3J0IHN0YWJsZSB3aGVuIG5vbmUgb2YgdGhlIGlucHV0IHByZWRpY2F0ZXMgY2FuXG4gICAgICAvLyBkaXN0aW5ndWlzaCBiZXR3ZWVuIHR3byBlbGVtZW50cy5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgdGllQnJlYWtlcjoge3ZhbHVlOiBpbmRleCwgdHlwZTogJ251bWJlcicsIGluZGV4OiBpbmRleH0sXG4gICAgICAgIHByZWRpY2F0ZVZhbHVlczogcHJlZGljYXRlcy5tYXAoZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGdldFByZWRpY2F0ZVZhbHVlKHByZWRpY2F0ZS5nZXQodmFsdWUpLCBpbmRleCk7XG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRvQ29tcGFyaXNvbih2MSwgdjIpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHByZWRpY2F0ZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY29tcGFyZSh2MS5wcmVkaWNhdGVWYWx1ZXNbaV0sIHYyLnByZWRpY2F0ZVZhbHVlc1tpXSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0ICogcHJlZGljYXRlc1tpXS5kZXNjZW5kaW5nICogZGVzY2VuZGluZztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gKGNvbXBhcmUodjEudGllQnJlYWtlciwgdjIudGllQnJlYWtlcikgfHwgZGVmYXVsdENvbXBhcmUodjEudGllQnJlYWtlciwgdjIudGllQnJlYWtlcikpICogZGVzY2VuZGluZztcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc1ByZWRpY2F0ZXMoc29ydFByZWRpY2F0ZXMpIHtcbiAgICByZXR1cm4gc29ydFByZWRpY2F0ZXMubWFwKGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGRlc2NlbmRpbmcgPSAxLCBnZXQgPSBpZGVudGl0eTtcblxuICAgICAgaWYgKGlzRnVuY3Rpb24ocHJlZGljYXRlKSkge1xuICAgICAgICBnZXQgPSBwcmVkaWNhdGU7XG4gICAgICB9IGVsc2UgaWYgKGlzU3RyaW5nKHByZWRpY2F0ZSkpIHtcbiAgICAgICAgaWYgKChwcmVkaWNhdGUuY2hhckF0KDApID09PSAnKycgfHwgcHJlZGljYXRlLmNoYXJBdCgwKSA9PT0gJy0nKSkge1xuICAgICAgICAgIGRlc2NlbmRpbmcgPSBwcmVkaWNhdGUuY2hhckF0KDApID09PSAnLScgPyAtMSA6IDE7XG4gICAgICAgICAgcHJlZGljYXRlID0gcHJlZGljYXRlLnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocHJlZGljYXRlICE9PSAnJykge1xuICAgICAgICAgIGdldCA9ICRwYXJzZShwcmVkaWNhdGUpO1xuICAgICAgICAgIGlmIChnZXQuY29uc3RhbnQpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBnZXQoKTtcbiAgICAgICAgICAgIGdldCA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZVtrZXldOyB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHtnZXQ6IGdldCwgZGVzY2VuZGluZzogZGVzY2VuZGluZ307XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgICBjYXNlICdudW1iZXInOiAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlICdib29sZWFuJzogLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gb2JqZWN0VmFsdWUodmFsdWUpIHtcbiAgICAvLyBJZiBgdmFsdWVPZmAgaXMgYSB2YWxpZCBmdW5jdGlvbiB1c2UgdGhhdFxuICAgIGlmIChpc0Z1bmN0aW9uKHZhbHVlLnZhbHVlT2YpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnZhbHVlT2YoKTtcbiAgICAgIGlmIChpc1ByaW1pdGl2ZSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgLy8gSWYgYHRvU3RyaW5nYCBpcyBhIHZhbGlkIGZ1bmN0aW9uIGFuZCBub3QgdGhlIG9uZSBmcm9tIGBPYmplY3QucHJvdG90eXBlYCB1c2UgdGhhdFxuICAgIGlmIChoYXNDdXN0b21Ub1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgIGlmIChpc1ByaW1pdGl2ZSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQcmVkaWNhdGVWYWx1ZSh2YWx1ZSwgaW5kZXgpIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHR5cGUgPSAnc3RyaW5nJztcbiAgICAgIHZhbHVlID0gJ251bGwnO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhbHVlID0gb2JqZWN0VmFsdWUodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4ge3ZhbHVlOiB2YWx1ZSwgdHlwZTogdHlwZSwgaW5kZXg6IGluZGV4fTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlKHYxLCB2Mikge1xuICAgIHZhciByZXN1bHQgPSAwO1xuICAgIHZhciB0eXBlMSA9IHYxLnR5cGU7XG4gICAgdmFyIHR5cGUyID0gdjIudHlwZTtcblxuICAgIGlmICh0eXBlMSA9PT0gdHlwZTIpIHtcbiAgICAgIHZhciB2YWx1ZTEgPSB2MS52YWx1ZTtcbiAgICAgIHZhciB2YWx1ZTIgPSB2Mi52YWx1ZTtcblxuICAgICAgaWYgKHR5cGUxID09PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBDb21wYXJlIHN0cmluZ3MgY2FzZS1pbnNlbnNpdGl2ZWx5XG4gICAgICAgIHZhbHVlMSA9IHZhbHVlMS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB2YWx1ZTIgPSB2YWx1ZTIudG9Mb3dlckNhc2UoKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZTEgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIEZvciBiYXNpYyBvYmplY3RzLCB1c2UgdGhlIHBvc2l0aW9uIG9mIHRoZSBvYmplY3RcbiAgICAgICAgLy8gaW4gdGhlIGNvbGxlY3Rpb24gaW5zdGVhZCBvZiB0aGUgdmFsdWVcbiAgICAgICAgaWYgKGlzT2JqZWN0KHZhbHVlMSkpIHZhbHVlMSA9IHYxLmluZGV4O1xuICAgICAgICBpZiAoaXNPYmplY3QodmFsdWUyKSkgdmFsdWUyID0gdjIuaW5kZXg7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZTEgIT09IHZhbHVlMikge1xuICAgICAgICByZXN1bHQgPSB2YWx1ZTEgPCB2YWx1ZTIgPyAtMSA6IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IHR5cGUxIDwgdHlwZTIgPyAtMSA6IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBuZ0RpcmVjdGl2ZShkaXJlY3RpdmUpIHtcbiAgaWYgKGlzRnVuY3Rpb24oZGlyZWN0aXZlKSkge1xuICAgIGRpcmVjdGl2ZSA9IHtcbiAgICAgIGxpbms6IGRpcmVjdGl2ZVxuICAgIH07XG4gIH1cbiAgZGlyZWN0aXZlLnJlc3RyaWN0ID0gZGlyZWN0aXZlLnJlc3RyaWN0IHx8ICdBQyc7XG4gIHJldHVybiB2YWx1ZUZuKGRpcmVjdGl2ZSk7XG59XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgYVxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE1vZGlmaWVzIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHRoZSBodG1sIGEgdGFnIHNvIHRoYXQgdGhlIGRlZmF1bHQgYWN0aW9uIGlzIHByZXZlbnRlZCB3aGVuXG4gKiB0aGUgaHJlZiBhdHRyaWJ1dGUgaXMgZW1wdHkuXG4gKlxuICogRm9yIGR5bmFtaWNhbGx5IGNyZWF0aW5nIGBocmVmYCBhdHRyaWJ1dGVzIGZvciBhIHRhZ3MsIHNlZSB0aGUge0BsaW5rIG5nLm5nSHJlZiBgbmdIcmVmYH0gZGlyZWN0aXZlLlxuICovXG52YXIgaHRtbEFuY2hvckRpcmVjdGl2ZSA9IHZhbHVlRm4oe1xuICByZXN0cmljdDogJ0UnLFxuICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgaWYgKCFhdHRyLmhyZWYgJiYgIWF0dHIueGxpbmtIcmVmKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQpIHtcbiAgICAgICAgLy8gSWYgdGhlIGxpbmtlZCBlbGVtZW50IGlzIG5vdCBhbiBhbmNob3IgdGFnIGFueW1vcmUsIGRvIG5vdGhpbmdcbiAgICAgICAgaWYgKGVsZW1lbnRbMF0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gJ2EnKSByZXR1cm47XG5cbiAgICAgICAgLy8gU1ZHQUVsZW1lbnQgZG9lcyBub3QgdXNlIHRoZSBocmVmIGF0dHJpYnV0ZSwgYnV0IHJhdGhlciB0aGUgJ3hsaW5rSHJlZicgYXR0cmlidXRlLlxuICAgICAgICB2YXIgaHJlZiA9IHRvU3RyaW5nLmNhbGwoZWxlbWVudC5wcm9wKCdocmVmJykpID09PSAnW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ10nID9cbiAgICAgICAgICAgICAgICAgICAneGxpbms6aHJlZicgOiAnaHJlZic7XG4gICAgICAgIGVsZW1lbnQub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAvLyBpZiB3ZSBoYXZlIG5vIGhyZWYgdXJsLCB0aGVuIGRvbid0IG5hdmlnYXRlIGFueXdoZXJlLlxuICAgICAgICAgIGlmICghZWxlbWVudC5hdHRyKGhyZWYpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdIcmVmXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDk5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYW4gaHJlZiBhdHRyaWJ1dGUgd2lsbFxuICogbWFrZSB0aGUgbGluayBnbyB0byB0aGUgd3JvbmcgVVJMIGlmIHRoZSB1c2VyIGNsaWNrcyBpdCBiZWZvcmVcbiAqIEFuZ3VsYXIgaGFzIGEgY2hhbmNlIHRvIHJlcGxhY2UgdGhlIGB7e2hhc2h9fWAgbWFya3VwIHdpdGggaXRzXG4gKiB2YWx1ZS4gVW50aWwgQW5ndWxhciByZXBsYWNlcyB0aGUgbWFya3VwIHRoZSBsaW5rIHdpbGwgYmUgYnJva2VuXG4gKiBhbmQgd2lsbCBtb3N0IGxpa2VseSByZXR1cm4gYSA0MDQgZXJyb3IuIFRoZSBgbmdIcmVmYCBkaXJlY3RpdmVcbiAqIHNvbHZlcyB0aGlzIHByb2JsZW0uXG4gKlxuICogVGhlIHdyb25nIHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxhIGhyZWY9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX1cIj5saW5rMTwvYT5cbiAqIGBgYFxuICpcbiAqIFRoZSBjb3JyZWN0IHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxhIG5nLWhyZWY9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX1cIj5saW5rMTwvYT5cbiAqIGBgYFxuICpcbiAqIEBlbGVtZW50IEFcbiAqIEBwYXJhbSB7dGVtcGxhdGV9IG5nSHJlZiBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuXG4gKlxuICogQGV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyB2YXJpb3VzIGNvbWJpbmF0aW9ucyBvZiBgaHJlZmAsIGBuZy1ocmVmYCBhbmQgYG5nLWNsaWNrYCBhdHRyaWJ1dGVzXG4gKiBpbiBsaW5rcyBhbmQgdGhlaXIgZGlmZmVyZW50IGJlaGF2aW9yczpcbiAgICA8ZXhhbXBsZSBuYW1lPVwibmctaHJlZlwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwidmFsdWVcIiAvPjxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstMVwiIGhyZWYgbmctY2xpY2s9XCJ2YWx1ZSA9IDFcIj5saW5rIDE8L2E+IChsaW5rLCBkb24ndCByZWxvYWQpPGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay0yXCIgaHJlZj1cIlwiIG5nLWNsaWNrPVwidmFsdWUgPSAyXCI+bGluayAyPC9hPiAobGluaywgZG9uJ3QgcmVsb2FkKTxiciAvPlxuICAgICAgICA8YSBpZD1cImxpbmstM1wiIG5nLWhyZWY9XCIve3snMTIzJ319XCI+bGluayAzPC9hPiAobGluaywgcmVsb2FkISk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTRcIiBocmVmPVwiXCIgbmFtZT1cInh4XCIgbmctY2xpY2s9XCJ2YWx1ZSA9IDRcIj5hbmNob3I8L2E+IChsaW5rLCBkb24ndCByZWxvYWQpPGJyIC8+XG4gICAgICAgIDxhIGlkPVwibGluay01XCIgbmFtZT1cInh4eFwiIG5nLWNsaWNrPVwidmFsdWUgPSA1XCI+YW5jaG9yPC9hPiAobm8gbGluayk8YnIgLz5cbiAgICAgICAgPGEgaWQ9XCJsaW5rLTZcIiBuZy1ocmVmPVwie3t2YWx1ZX19XCI+bGluazwvYT4gKGxpbmssIGNoYW5nZSBsb2NhdGlvbilcbiAgICAgIDwvZmlsZT5cbiAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gaHJlZiB3aXRob3V0IHZhbHVlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay0xJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnMScpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTEnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUoJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBocmVmIGVtcHR5IHN0cmluZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstMicpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJzInKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay0yJykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b0JlKCcnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGFuZCBjaGFuZ2UgdXJsIHdoZW4gbmctaHJlZiBzcGVjaWZpZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay0zJykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b01hdGNoKC9cXC8xMjMkLyk7XG5cbiAgICAgICAgICBlbGVtZW50KGJ5LmlkKCdsaW5rLTMnKSkuY2xpY2soKTtcblxuICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIG5hdmlnYXRlIGF3YXkgZnJvbSBhbiBBbmd1bGFyIHBhZ2UsIHNvIHdlIG5lZWRcbiAgICAgICAgICAvLyB0byB1c2UgYnJvd3Nlci5kcml2ZXIgdG8gZ2V0IHRoZSBiYXNlIHdlYmRyaXZlci5cblxuICAgICAgICAgIGJyb3dzZXIud2FpdChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBicm93c2VyLmRyaXZlci5nZXRDdXJyZW50VXJsKCkudGhlbihmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHVybC5tYXRjaCgvXFwvMTIzJC8pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgNTAwMCwgJ3BhZ2Ugc2hvdWxkIG5hdmlnYXRlIHRvIC8xMjMnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBleGVjdXRlIG5nLWNsaWNrIGJ1dCBub3QgcmVsb2FkIHdoZW4gaHJlZiBlbXB0eSBzdHJpbmcgYW5kIG5hbWUgc3BlY2lmaWVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay00JykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9FcXVhbCgnNCcpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdsaW5rLTQnKSkuZ2V0QXR0cmlidXRlKCdocmVmJykpLnRvQmUoJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGV4ZWN1dGUgbmctY2xpY2sgYnV0IG5vdCByZWxvYWQgd2hlbiBubyBocmVmIGJ1dCBuYW1lIHNwZWNpZmllZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2xpbmstNScpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5Lm1vZGVsKCd2YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJzUnKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay01JykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b0JlKG51bGwpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIG9ubHkgY2hhbmdlIHVybCB3aGVuIG9ubHkgbmctaHJlZicsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3ZhbHVlJykpLmNsZWFyKCk7XG4gICAgICAgICAgZWxlbWVudChieS5tb2RlbCgndmFsdWUnKSkuc2VuZEtleXMoJzYnKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnbGluay02JykpLmdldEF0dHJpYnV0ZSgnaHJlZicpKS50b01hdGNoKC9cXC82JC8pO1xuXG4gICAgICAgICAgZWxlbWVudChieS5pZCgnbGluay02JykpLmNsaWNrKCk7XG5cbiAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCB3ZSBuYXZpZ2F0ZSBhd2F5IGZyb20gYW4gQW5ndWxhciBwYWdlLCBzbyB3ZSBuZWVkXG4gICAgICAgICAgLy8gdG8gdXNlIGJyb3dzZXIuZHJpdmVyIHRvIGdldCB0aGUgYmFzZSB3ZWJkcml2ZXIuXG4gICAgICAgICAgYnJvd3Nlci53YWl0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIGJyb3dzZXIuZHJpdmVyLmdldEN1cnJlbnRVcmwoKS50aGVuKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICByZXR1cm4gdXJsLm1hdGNoKC9cXC82JC8pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgNTAwMCwgJ3BhZ2Ugc2hvdWxkIG5hdmlnYXRlIHRvIC82Jyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nU3JjXG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDk5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBVc2luZyBBbmd1bGFyIG1hcmt1cCBsaWtlIGB7e2hhc2h9fWAgaW4gYSBgc3JjYCBhdHRyaWJ1dGUgZG9lc24ndFxuICogd29yayByaWdodDogVGhlIGJyb3dzZXIgd2lsbCBmZXRjaCBmcm9tIHRoZSBVUkwgd2l0aCB0aGUgbGl0ZXJhbFxuICogdGV4dCBge3toYXNofX1gIHVudGlsIEFuZ3VsYXIgcmVwbGFjZXMgdGhlIGV4cHJlc3Npb24gaW5zaWRlXG4gKiBge3toYXNofX1gLiBUaGUgYG5nU3JjYCBkaXJlY3RpdmUgc29sdmVzIHRoaXMgcHJvYmxlbS5cbiAqXG4gKiBUaGUgYnVnZ3kgd2F5IHRvIHdyaXRlIGl0OlxuICogYGBgaHRtbFxuICogPGltZyBzcmM9XCJodHRwOi8vd3d3LmdyYXZhdGFyLmNvbS9hdmF0YXIve3toYXNofX1cIiBhbHQ9XCJEZXNjcmlwdGlvblwiLz5cbiAqIGBgYFxuICpcbiAqIFRoZSBjb3JyZWN0IHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxpbWcgbmctc3JjPVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19XCIgYWx0PVwiRGVzY3JpcHRpb25cIiAvPlxuICogYGBgXG4gKlxuICogQGVsZW1lbnQgSU1HXG4gKiBAcGFyYW0ge3RlbXBsYXRlfSBuZ1NyYyBhbnkgc3RyaW5nIHdoaWNoIGNhbiBjb250YWluIGB7e319YCBtYXJrdXAuXG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1NyY3NldFxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSA5OVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVXNpbmcgQW5ndWxhciBtYXJrdXAgbGlrZSBge3toYXNofX1gIGluIGEgYHNyY3NldGAgYXR0cmlidXRlIGRvZXNuJ3RcbiAqIHdvcmsgcmlnaHQ6IFRoZSBicm93c2VyIHdpbGwgZmV0Y2ggZnJvbSB0aGUgVVJMIHdpdGggdGhlIGxpdGVyYWxcbiAqIHRleHQgYHt7aGFzaH19YCB1bnRpbCBBbmd1bGFyIHJlcGxhY2VzIHRoZSBleHByZXNzaW9uIGluc2lkZVxuICogYHt7aGFzaH19YC4gVGhlIGBuZ1NyY3NldGAgZGlyZWN0aXZlIHNvbHZlcyB0aGlzIHByb2JsZW0uXG4gKlxuICogVGhlIGJ1Z2d5IHdheSB0byB3cml0ZSBpdDpcbiAqIGBgYGh0bWxcbiAqIDxpbWcgc3Jjc2V0PVwiaHR0cDovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyL3t7aGFzaH19IDJ4XCIgYWx0PVwiRGVzY3JpcHRpb25cIi8+XG4gKiBgYGBcbiAqXG4gKiBUaGUgY29ycmVjdCB3YXkgdG8gd3JpdGUgaXQ6XG4gKiBgYGBodG1sXG4gKiA8aW1nIG5nLXNyY3NldD1cImh0dHA6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci97e2hhc2h9fSAyeFwiIGFsdD1cIkRlc2NyaXB0aW9uXCIgLz5cbiAqIGBgYFxuICpcbiAqIEBlbGVtZW50IElNR1xuICogQHBhcmFtIHt0ZW1wbGF0ZX0gbmdTcmNzZXQgYW55IHN0cmluZyB3aGljaCBjYW4gY29udGFpbiBge3t9fWAgbWFya3VwLlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdEaXNhYmxlZFxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGlzIGRpcmVjdGl2ZSBzZXRzIHRoZSBgZGlzYWJsZWRgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCAodHlwaWNhbGx5IGEgZm9ybSBjb250cm9sLFxuICogZS5nLiBgaW5wdXRgLCBgYnV0dG9uYCwgYHNlbGVjdGAgZXRjLikgaWYgdGhlXG4gKiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpbnNpZGUgYG5nRGlzYWJsZWRgIGV2YWx1YXRlcyB0byB0cnV0aHkuXG4gKlxuICogQSBzcGVjaWFsIGRpcmVjdGl2ZSBpcyBuZWNlc3NhcnkgYmVjYXVzZSB3ZSBjYW5ub3QgdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoZSBgZGlzYWJsZWRgXG4gKiBhdHRyaWJ1dGUuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbiBndWlkZX0gZm9yIG1vcmUgaW5mby5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJuZy1kaXNhYmxlZFwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGxhYmVsPkNsaWNrIG1lIHRvIHRvZ2dsZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiPjwvbGFiZWw+PGJyLz5cbiAgICAgICAgPGJ1dHRvbiBuZy1tb2RlbD1cImJ1dHRvblwiIG5nLWRpc2FibGVkPVwiY2hlY2tlZFwiPkJ1dHRvbjwvYnV0dG9uPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSBidXR0b24nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJ2J1dHRvbicpKS5nZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpLnRvQmVGYWxzeSgpO1xuICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJ2J1dHRvbicpKS5nZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IElOUFVUXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nRGlzYWJsZWQgSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSxcbiAqICAgICB0aGVuIHRoZSBgZGlzYWJsZWRgIGF0dHJpYnV0ZSB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NoZWNrZWRcbiAqIEByZXN0cmljdCBBXG4gKiBAcHJpb3JpdHkgMTAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTZXRzIHRoZSBgY2hlY2tlZGAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50LCBpZiB0aGUgZXhwcmVzc2lvbiBpbnNpZGUgYG5nQ2hlY2tlZGAgaXMgdHJ1dGh5LlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIGRpcmVjdGl2ZSBzaG91bGQgbm90IGJlIHVzZWQgdG9nZXRoZXIgd2l0aCB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LFxuICogYXMgdGhpcyBjYW4gbGVhZCB0byB1bmV4cGVjdGVkIGJlaGF2aW9yLlxuICpcbiAqIEEgc3BlY2lhbCBkaXJlY3RpdmUgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2UgY2Fubm90IHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGUgYGNoZWNrZWRgXG4gKiBhdHRyaWJ1dGUuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbiBndWlkZX0gZm9yIG1vcmUgaW5mby5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJuZy1jaGVja2VkXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8bGFiZWw+Q2hlY2sgbWUgdG8gY2hlY2sgYm90aDogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwibWFzdGVyXCI+PC9sYWJlbD48YnIvPlxuICAgICAgICA8aW5wdXQgaWQ9XCJjaGVja1NsYXZlXCIgdHlwZT1cImNoZWNrYm94XCIgbmctY2hlY2tlZD1cIm1hc3RlclwiIGFyaWEtbGFiZWw9XCJTbGF2ZSBpbnB1dFwiPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIGJvdGggY2hlY2tCb3hlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdjaGVja1NsYXZlJykpLmdldEF0dHJpYnV0ZSgnY2hlY2tlZCcpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdtYXN0ZXInKSkuY2xpY2soKTtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnY2hlY2tTbGF2ZScpKS5nZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnKSkudG9CZVRydXRoeSgpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgSU5QVVRcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDaGVja2VkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiB0aGUgYGNoZWNrZWRgIGF0dHJpYnV0ZSB3aWxsIGJlIHNldCBvbiB0aGUgZWxlbWVudFxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1JlYWRvbmx5XG4gKiBAcmVzdHJpY3QgQVxuICogQHByaW9yaXR5IDEwMFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFNldHMgdGhlIGByZWFkb25seWAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50LCBpZiB0aGUgZXhwcmVzc2lvbiBpbnNpZGUgYG5nUmVhZG9ubHlgIGlzIHRydXRoeS5cbiAqIE5vdGUgdGhhdCBgcmVhZG9ubHlgIGFwcGxpZXMgb25seSB0byBgaW5wdXRgIGVsZW1lbnRzIHdpdGggc3BlY2lmaWMgdHlwZXMuIFtTZWUgdGhlIGlucHV0IGRvY3Mgb25cbiAqIE1ETl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9FbGVtZW50L2lucHV0I2F0dHItcmVhZG9ubHkpIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIEEgc3BlY2lhbCBkaXJlY3RpdmUgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2UgY2Fubm90IHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGUgYHJlYWRvbmx5YFxuICogYXR0cmlidXRlLiBTZWUgdGhlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uIGludGVycG9sYXRpb24gZ3VpZGV9IGZvciBtb3JlIGluZm8uXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwibmctcmVhZG9ubHlcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxsYWJlbD5DaGVjayBtZSB0byBtYWtlIHRleHQgcmVhZG9ubHk6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIj48L2xhYmVsPjxici8+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLXJlYWRvbmx5PVwiY2hlY2tlZFwiIHZhbHVlPVwiSSdtIEFuZ3VsYXJcIiBhcmlhLWxhYmVsPVwiUmVhZG9ubHkgZmllbGRcIiAvPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSByZWFkb25seSBhdHRyJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdbdHlwZT1cInRleHRcIl0nKSkuZ2V0QXR0cmlidXRlKCdyZWFkb25seScpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuY3NzKCdbdHlwZT1cInRleHRcIl0nKSkuZ2V0QXR0cmlidXRlKCdyZWFkb25seScpKS50b0JlVHJ1dGh5KCk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAZWxlbWVudCBJTlBVVFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1JlYWRvbmx5IElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcInJlYWRvbmx5XCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdTZWxlY3RlZFxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXRzIHRoZSBgc2VsZWN0ZWRgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCwgaWYgdGhlIGV4cHJlc3Npb24gaW5zaWRlIGBuZ1NlbGVjdGVkYCBpcyB0cnV0aHkuXG4gKlxuICogQSBzcGVjaWFsIGRpcmVjdGl2ZSBpcyBuZWNlc3NhcnkgYmVjYXVzZSB3ZSBjYW5ub3QgdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoZSBgc2VsZWN0ZWRgXG4gKiBhdHRyaWJ1dGUuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbiBndWlkZX0gZm9yIG1vcmUgaW5mby5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogICAqKk5vdGU6KiogYG5nU2VsZWN0ZWRgIGRvZXMgbm90IGludGVyYWN0IHdpdGggdGhlIGBzZWxlY3RgIGFuZCBgbmdNb2RlbGAgZGlyZWN0aXZlcywgaXQgb25seVxuICogICBzZXRzIHRoZSBgc2VsZWN0ZWRgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudC4gSWYgeW91IGFyZSB1c2luZyBgbmdNb2RlbGAgb24gdGhlIHNlbGVjdCwgeW91XG4gKiAgIHNob3VsZCBub3QgdXNlIGBuZ1NlbGVjdGVkYCBvbiB0aGUgb3B0aW9ucywgYXMgYG5nTW9kZWxgIHdpbGwgc2V0IHRoZSBzZWxlY3QgdmFsdWUgYW5kXG4gKiAgIHNlbGVjdGVkIG9wdGlvbnMuXG4gKiA8L2Rpdj5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJuZy1zZWxlY3RlZFwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPGxhYmVsPkNoZWNrIG1lIHRvIHNlbGVjdDogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwic2VsZWN0ZWRcIj48L2xhYmVsPjxici8+XG4gICAgICAgIDxzZWxlY3QgYXJpYS1sYWJlbD1cIm5nU2VsZWN0ZWQgZGVtb1wiPlxuICAgICAgICAgIDxvcHRpb24+SGVsbG8hPC9vcHRpb24+XG4gICAgICAgICAgPG9wdGlvbiBpZD1cImdyZWV0XCIgbmctc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiPkdyZWV0aW5ncyE8L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIGl0KCdzaG91bGQgc2VsZWN0IEdyZWV0aW5ncyEnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZ3JlZXQnKSkuZ2V0QXR0cmlidXRlKCdzZWxlY3RlZCcpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzZWxlY3RlZCcpKS5jbGljaygpO1xuICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdncmVldCcpKS5nZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJykpLnRvQmVUcnV0aHkoKTtcbiAgICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICpcbiAqIEBlbGVtZW50IE9QVElPTlxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1NlbGVjdGVkIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHksXG4gKiAgICAgdGhlbiBzcGVjaWFsIGF0dHJpYnV0ZSBcInNlbGVjdGVkXCIgd2lsbCBiZSBzZXQgb24gdGhlIGVsZW1lbnRcbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nT3BlblxuICogQHJlc3RyaWN0IEFcbiAqIEBwcmlvcml0eSAxMDBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBTZXRzIHRoZSBgb3BlbmAgYXR0cmlidXRlIG9uIHRoZSBlbGVtZW50LCBpZiB0aGUgZXhwcmVzc2lvbiBpbnNpZGUgYG5nT3BlbmAgaXMgdHJ1dGh5LlxuICpcbiAqIEEgc3BlY2lhbCBkaXJlY3RpdmUgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2UgY2Fubm90IHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGUgYG9wZW5gXG4gKiBhdHRyaWJ1dGUuIFNlZSB0aGUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24gaW50ZXJwb2xhdGlvbiBndWlkZX0gZm9yIG1vcmUgaW5mby5cbiAqXG4gKiAjIyBBIG5vdGUgYWJvdXQgYnJvd3NlciBjb21wYXRpYmlsaXR5XG4gKlxuICogSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgdGhlIGBkZXRhaWxzYCBlbGVtZW50LCBpdCBpc1xuICogcmVjb21tZW5kZWQgdG8gdXNlIHtAbGluayBuZy5uZ1Nob3d9IGFuZCB7QGxpbmsgbmcubmdIaWRlfSBpbnN0ZWFkLlxuICpcbiAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG5hbWU9XCJuZy1vcGVuXCI+XG4gICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxsYWJlbD5Ub2dnbGUgZGV0YWlsczogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwib3BlblwiPjwvbGFiZWw+PGJyLz5cbiAgICAgICAgIDxkZXRhaWxzIGlkPVwiZGV0YWlsc1wiIG5nLW9wZW49XCJvcGVuXCI+XG4gICAgICAgICAgICA8c3VtbWFyeT5MaXN0PC9zdW1tYXJ5PlxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICA8bGk+QXBwbGU8L2xpPlxuICAgICAgICAgICAgICA8bGk+T3JhbmdlPC9saT5cbiAgICAgICAgICAgICAgPGxpPkR1cmlhbjwvbGk+XG4gICAgICAgICAgICA8L3VsPlxuICAgICAgICAgPC9kZXRhaWxzPlxuICAgICAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICBpdCgnc2hvdWxkIHRvZ2dsZSBvcGVuJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmlkKCdkZXRhaWxzJykpLmdldEF0dHJpYnV0ZSgnb3BlbicpKS50b0JlRmFsc3koKTtcbiAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnb3BlbicpKS5jbGljaygpO1xuICAgICAgICAgICBleHBlY3QoZWxlbWVudChieS5pZCgnZGV0YWlscycpKS5nZXRBdHRyaWJ1dGUoJ29wZW4nKSkudG9CZVRydXRoeSgpO1xuICAgICAgICAgfSk7XG4gICAgICAgPC9maWxlPlxuICAgICA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgREVUQUlMU1xuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ09wZW4gSWYgdGhlIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259IGlzIHRydXRoeSxcbiAqICAgICB0aGVuIHNwZWNpYWwgYXR0cmlidXRlIFwib3BlblwiIHdpbGwgYmUgc2V0IG9uIHRoZSBlbGVtZW50XG4gKi9cblxudmFyIG5nQXR0cmlidXRlQWxpYXNEaXJlY3RpdmVzID0ge307XG5cbi8vIGJvb2xlYW4gYXR0cnMgYXJlIGV2YWx1YXRlZFxuZm9yRWFjaChCT09MRUFOX0FUVFIsIGZ1bmN0aW9uKHByb3BOYW1lLCBhdHRyTmFtZSkge1xuICAvLyBiaW5kaW5nIHRvIG11bHRpcGxlIGlzIG5vdCBzdXBwb3J0ZWRcbiAgaWYgKHByb3BOYW1lID09PSAnbXVsdGlwbGUnKSByZXR1cm47XG5cbiAgZnVuY3Rpb24gZGVmYXVsdExpbmtGbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgIHNjb3BlLiR3YXRjaChhdHRyW25vcm1hbGl6ZWRdLCBmdW5jdGlvbiBuZ0Jvb2xlYW5BdHRyV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgIGF0dHIuJHNldChhdHRyTmFtZSwgISF2YWx1ZSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgbm9ybWFsaXplZCA9IGRpcmVjdGl2ZU5vcm1hbGl6ZSgnbmctJyArIGF0dHJOYW1lKTtcbiAgdmFyIGxpbmtGbiA9IGRlZmF1bHRMaW5rRm47XG5cbiAgaWYgKHByb3BOYW1lID09PSAnY2hlY2tlZCcpIHtcbiAgICBsaW5rRm4gPSBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgLy8gZW5zdXJpbmcgbmdDaGVja2VkIGRvZXNuJ3QgaW50ZXJmZXJlIHdpdGggbmdNb2RlbCB3aGVuIGJvdGggYXJlIHNldCBvbiB0aGUgc2FtZSBpbnB1dFxuICAgICAgaWYgKGF0dHIubmdNb2RlbCAhPT0gYXR0cltub3JtYWxpemVkXSkge1xuICAgICAgICBkZWZhdWx0TGlua0ZuKHNjb3BlLCBlbGVtZW50LCBhdHRyKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXNbbm9ybWFsaXplZF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAgIHByaW9yaXR5OiAxMDAsXG4gICAgICBsaW5rOiBsaW5rRm5cbiAgICB9O1xuICB9O1xufSk7XG5cbi8vIGFsaWFzZWQgaW5wdXQgYXR0cnMgYXJlIGV2YWx1YXRlZFxuZm9yRWFjaChBTElBU0VEX0FUVFIsIGZ1bmN0aW9uKGh0bWxBdHRyLCBuZ0F0dHIpIHtcbiAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXNbbmdBdHRyXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBwcmlvcml0eTogMTAwLFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgLy9zcGVjaWFsIGNhc2UgbmdQYXR0ZXJuIHdoZW4gYSBsaXRlcmFsIHJlZ3VsYXIgZXhwcmVzc2lvbiB2YWx1ZVxuICAgICAgICAvL2lzIHVzZWQgYXMgdGhlIGV4cHJlc3Npb24gKHRoaXMgd2F5IHdlIGRvbid0IGhhdmUgdG8gd2F0Y2ggYW55dGhpbmcpLlxuICAgICAgICBpZiAobmdBdHRyID09PSAnbmdQYXR0ZXJuJyAmJiBhdHRyLm5nUGF0dGVybi5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgICAgICAgIHZhciBtYXRjaCA9IGF0dHIubmdQYXR0ZXJuLm1hdGNoKFJFR0VYX1NUUklOR19SRUdFWFApO1xuICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgYXR0ci4kc2V0KCduZ1BhdHRlcm4nLCBuZXcgUmVnRXhwKG1hdGNoWzFdLCBtYXRjaFsyXSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNjb3BlLiR3YXRjaChhdHRyW25nQXR0cl0sIGZ1bmN0aW9uIG5nQXR0ckFsaWFzV2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICBhdHRyLiRzZXQobmdBdHRyLCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH07XG59KTtcblxuLy8gbmctc3JjLCBuZy1zcmNzZXQsIG5nLWhyZWYgYXJlIGludGVycG9sYXRlZFxuZm9yRWFjaChbJ3NyYycsICdzcmNzZXQnLCAnaHJlZiddLCBmdW5jdGlvbihhdHRyTmFtZSkge1xuICB2YXIgbm9ybWFsaXplZCA9IGRpcmVjdGl2ZU5vcm1hbGl6ZSgnbmctJyArIGF0dHJOYW1lKTtcbiAgbmdBdHRyaWJ1dGVBbGlhc0RpcmVjdGl2ZXNbbm9ybWFsaXplZF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJpb3JpdHk6IDk5LCAvLyBpdCBuZWVkcyB0byBydW4gYWZ0ZXIgdGhlIGF0dHJpYnV0ZXMgYXJlIGludGVycG9sYXRlZFxuICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgdmFyIHByb3BOYW1lID0gYXR0ck5hbWUsXG4gICAgICAgICAgICBuYW1lID0gYXR0ck5hbWU7XG5cbiAgICAgICAgaWYgKGF0dHJOYW1lID09PSAnaHJlZicgJiZcbiAgICAgICAgICAgIHRvU3RyaW5nLmNhbGwoZWxlbWVudC5wcm9wKCdocmVmJykpID09PSAnW29iamVjdCBTVkdBbmltYXRlZFN0cmluZ10nKSB7XG4gICAgICAgICAgbmFtZSA9ICd4bGlua0hyZWYnO1xuICAgICAgICAgIGF0dHIuJGF0dHJbbmFtZV0gPSAneGxpbms6aHJlZic7XG4gICAgICAgICAgcHJvcE5hbWUgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgYXR0ci4kb2JzZXJ2ZShub3JtYWxpemVkLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChhdHRyTmFtZSA9PT0gJ2hyZWYnKSB7XG4gICAgICAgICAgICAgIGF0dHIuJHNldChuYW1lLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhdHRyLiRzZXQobmFtZSwgdmFsdWUpO1xuXG4gICAgICAgICAgLy8gU3VwcG9ydDogSUUgOS0xMSBvbmx5XG4gICAgICAgICAgLy8gT24gSUUsIGlmIFwibmc6c3JjXCIgZGlyZWN0aXZlIGRlY2xhcmF0aW9uIGlzIHVzZWQgYW5kIFwic3JjXCIgYXR0cmlidXRlIGRvZXNuJ3QgZXhpc3RcbiAgICAgICAgICAvLyB0aGVuIGNhbGxpbmcgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3NyYycsICdmb28nKSBkb2Vzbid0IGRvIGFueXRoaW5nLCBzbyB3ZSBuZWVkXG4gICAgICAgICAgLy8gdG8gc2V0IHRoZSBwcm9wZXJ0eSBhcyB3ZWxsIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LlxuICAgICAgICAgIC8vIFdlIHVzZSBhdHRyW2F0dHJOYW1lXSB2YWx1ZSBzaW5jZSAkc2V0IGNhbiBzYW5pdGl6ZSB0aGUgdXJsLlxuICAgICAgICAgIGlmIChtc2llICYmIHByb3BOYW1lKSBlbGVtZW50LnByb3AocHJvcE5hbWUsIGF0dHJbbmFtZV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufSk7XG5cbi8qIGdsb2JhbCAtbnVsbEZvcm1DdHJsLCAtUEVORElOR19DTEFTUywgLVNVQk1JVFRFRF9DTEFTU1xuICovXG52YXIgbnVsbEZvcm1DdHJsID0ge1xuICAkYWRkQ29udHJvbDogbm9vcCxcbiAgJCRyZW5hbWVDb250cm9sOiBudWxsRm9ybVJlbmFtZUNvbnRyb2wsXG4gICRyZW1vdmVDb250cm9sOiBub29wLFxuICAkc2V0VmFsaWRpdHk6IG5vb3AsXG4gICRzZXREaXJ0eTogbm9vcCxcbiAgJHNldFByaXN0aW5lOiBub29wLFxuICAkc2V0U3VibWl0dGVkOiBub29wXG59LFxuUEVORElOR19DTEFTUyA9ICduZy1wZW5kaW5nJyxcblNVQk1JVFRFRF9DTEFTUyA9ICduZy1zdWJtaXR0ZWQnO1xuXG5mdW5jdGlvbiBudWxsRm9ybVJlbmFtZUNvbnRyb2woY29udHJvbCwgbmFtZSkge1xuICBjb250cm9sLiRuYW1lID0gbmFtZTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlclxuICpcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHByaXN0aW5lIFRydWUgaWYgdXNlciBoYXMgbm90IGludGVyYWN0ZWQgd2l0aCB0aGUgZm9ybSB5ZXQuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRkaXJ0eSBUcnVlIGlmIHVzZXIgaGFzIGFscmVhZHkgaW50ZXJhY3RlZCB3aXRoIHRoZSBmb3JtLlxuICogQHByb3BlcnR5IHtib29sZWFufSAkdmFsaWQgVHJ1ZSBpZiBhbGwgb2YgdGhlIGNvbnRhaW5pbmcgZm9ybXMgYW5kIGNvbnRyb2xzIGFyZSB2YWxpZC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJGludmFsaWQgVHJ1ZSBpZiBhdCBsZWFzdCBvbmUgY29udGFpbmluZyBjb250cm9sIG9yIGZvcm0gaXMgaW52YWxpZC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHN1Ym1pdHRlZCBUcnVlIGlmIHVzZXIgaGFzIHN1Ym1pdHRlZCB0aGUgZm9ybSBldmVuIGlmIGl0cyBpbnZhbGlkLlxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkcGVuZGluZyBBbiBvYmplY3QgaGFzaCwgY29udGFpbmluZyByZWZlcmVuY2VzIHRvIGNvbnRyb2xzIG9yIGZvcm1zIHdpdGhcbiAqICBwZW5kaW5nIHZhbGlkYXRvcnMsIHdoZXJlOlxuICpcbiAqICAtIGtleXMgYXJlIHZhbGlkYXRpb25zIHRva2VucyAoZXJyb3IgbmFtZXMpLlxuICogIC0gdmFsdWVzIGFyZSBhcnJheXMgb2YgY29udHJvbHMgb3IgZm9ybXMgdGhhdCBoYXZlIGEgcGVuZGluZyB2YWxpZGF0b3IgZm9yIHRoZSBnaXZlbiBlcnJvciBuYW1lLlxuICpcbiAqIFNlZSB7QGxpbmsgZm9ybS5Gb3JtQ29udHJvbGxlciMkZXJyb3IgJGVycm9yfSBmb3IgYSBsaXN0IG9mIGJ1aWx0LWluIHZhbGlkYXRpb24gdG9rZW5zLlxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkZXJyb3IgQW4gb2JqZWN0IGhhc2gsIGNvbnRhaW5pbmcgcmVmZXJlbmNlcyB0byBjb250cm9scyBvciBmb3JtcyB3aXRoIGZhaWxpbmdcbiAqICB2YWxpZGF0b3JzLCB3aGVyZTpcbiAqXG4gKiAgLSBrZXlzIGFyZSB2YWxpZGF0aW9uIHRva2VucyAoZXJyb3IgbmFtZXMpLFxuICogIC0gdmFsdWVzIGFyZSBhcnJheXMgb2YgY29udHJvbHMgb3IgZm9ybXMgdGhhdCBoYXZlIGEgZmFpbGluZyB2YWxpZGF0b3IgZm9yIHRoZSBnaXZlbiBlcnJvciBuYW1lLlxuICpcbiAqICBCdWlsdC1pbiB2YWxpZGF0aW9uIHRva2VuczpcbiAqICAtIGBlbWFpbGBcbiAqICAtIGBtYXhgXG4gKiAgLSBgbWF4bGVuZ3RoYFxuICogIC0gYG1pbmBcbiAqICAtIGBtaW5sZW5ndGhgXG4gKiAgLSBgbnVtYmVyYFxuICogIC0gYHBhdHRlcm5gXG4gKiAgLSBgcmVxdWlyZWRgXG4gKiAgLSBgdXJsYFxuICogIC0gYGRhdGVgXG4gKiAgLSBgZGF0ZXRpbWVsb2NhbGBcbiAqICAtIGB0aW1lYFxuICogIC0gYHdlZWtgXG4gKiAgLSBgbW9udGhgXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgRm9ybUNvbnRyb2xsZXJgIGtlZXBzIHRyYWNrIG9mIGFsbCBpdHMgY29udHJvbHMgYW5kIG5lc3RlZCBmb3JtcyBhcyB3ZWxsIGFzIHRoZSBzdGF0ZSBvZiB0aGVtLFxuICogc3VjaCBhcyBiZWluZyB2YWxpZC9pbnZhbGlkIG9yIGRpcnR5L3ByaXN0aW5lLlxuICpcbiAqIEVhY2gge0BsaW5rIG5nLmRpcmVjdGl2ZTpmb3JtIGZvcm19IGRpcmVjdGl2ZSBjcmVhdGVzIGFuIGluc3RhbmNlXG4gKiBvZiBgRm9ybUNvbnRyb2xsZXJgLlxuICpcbiAqL1xuLy9hc2tzIGZvciAkc2NvcGUgdG8gZm9vbCB0aGUgQkMgY29udHJvbGxlciBtb2R1bGVcbkZvcm1Db250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50JywgJyRhdHRycycsICckc2NvcGUnLCAnJGFuaW1hdGUnLCAnJGludGVycG9sYXRlJ107XG5mdW5jdGlvbiBGb3JtQ29udHJvbGxlcigkZWxlbWVudCwgJGF0dHJzLCAkc2NvcGUsICRhbmltYXRlLCAkaW50ZXJwb2xhdGUpIHtcbiAgdGhpcy4kJGNvbnRyb2xzID0gW107XG5cbiAgLy8gaW5pdCBzdGF0ZVxuICB0aGlzLiRlcnJvciA9IHt9O1xuICB0aGlzLiQkc3VjY2VzcyA9IHt9O1xuICB0aGlzLiRwZW5kaW5nID0gdW5kZWZpbmVkO1xuICB0aGlzLiRuYW1lID0gJGludGVycG9sYXRlKCRhdHRycy5uYW1lIHx8ICRhdHRycy5uZ0Zvcm0gfHwgJycpKCRzY29wZSk7XG4gIHRoaXMuJGRpcnR5ID0gZmFsc2U7XG4gIHRoaXMuJHByaXN0aW5lID0gdHJ1ZTtcbiAgdGhpcy4kdmFsaWQgPSB0cnVlO1xuICB0aGlzLiRpbnZhbGlkID0gZmFsc2U7XG4gIHRoaXMuJHN1Ym1pdHRlZCA9IGZhbHNlO1xuICB0aGlzLiQkcGFyZW50Rm9ybSA9IG51bGxGb3JtQ3RybDtcblxuICB0aGlzLiQkZWxlbWVudCA9ICRlbGVtZW50O1xuICB0aGlzLiQkYW5pbWF0ZSA9ICRhbmltYXRlO1xuXG4gIHNldHVwVmFsaWRpdHkodGhpcyk7XG59XG5cbkZvcm1Db250cm9sbGVyLnByb3RvdHlwZSA9IHtcbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkcm9sbGJhY2tWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJvbGxiYWNrIGFsbCBmb3JtIGNvbnRyb2xzIHBlbmRpbmcgdXBkYXRlcyB0byB0aGUgYCRtb2RlbFZhbHVlYC5cbiAgICpcbiAgICogVXBkYXRlcyBtYXkgYmUgcGVuZGluZyBieSBhIGRlYm91bmNlZCBldmVudCBvciBiZWNhdXNlIHRoZSBpbnB1dCBpcyB3YWl0aW5nIGZvciBhIHNvbWUgZnV0dXJlXG4gICAqIGV2ZW50IGRlZmluZWQgaW4gYG5nLW1vZGVsLW9wdGlvbnNgLiBUaGlzIG1ldGhvZCBpcyB0eXBpY2FsbHkgbmVlZGVkIGJ5IHRoZSByZXNldCBidXR0b24gb2ZcbiAgICogYSBmb3JtIHRoYXQgdXNlcyBgbmctbW9kZWwtb3B0aW9uc2AgdG8gcGVuZCB1cGRhdGVzLlxuICAgKi9cbiAgJHJvbGxiYWNrVmlld1ZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICBmb3JFYWNoKHRoaXMuJCRjb250cm9scywgZnVuY3Rpb24oY29udHJvbCkge1xuICAgICAgY29udHJvbC4kcm9sbGJhY2tWaWV3VmFsdWUoKTtcbiAgICB9KTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRjb21taXRWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENvbW1pdCBhbGwgZm9ybSBjb250cm9scyBwZW5kaW5nIHVwZGF0ZXMgdG8gdGhlIGAkbW9kZWxWYWx1ZWAuXG4gICAqXG4gICAqIFVwZGF0ZXMgbWF5IGJlIHBlbmRpbmcgYnkgYSBkZWJvdW5jZWQgZXZlbnQgb3IgYmVjYXVzZSB0aGUgaW5wdXQgaXMgd2FpdGluZyBmb3IgYSBzb21lIGZ1dHVyZVxuICAgKiBldmVudCBkZWZpbmVkIGluIGBuZy1tb2RlbC1vcHRpb25zYC4gVGhpcyBtZXRob2QgaXMgcmFyZWx5IG5lZWRlZCBhcyBgTmdNb2RlbENvbnRyb2xsZXJgXG4gICAqIHVzdWFsbHkgaGFuZGxlcyBjYWxsaW5nIHRoaXMgaW4gcmVzcG9uc2UgdG8gaW5wdXQgZXZlbnRzLlxuICAgKi9cbiAgJGNvbW1pdFZpZXdWYWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgZm9yRWFjaCh0aGlzLiQkY29udHJvbHMsIGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAgIGNvbnRyb2wuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJGFkZENvbnRyb2xcbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbnRyb2wgY29udHJvbCBvYmplY3QsIGVpdGhlciBhIHtAbGluayBmb3JtLkZvcm1Db250cm9sbGVyfSBvciBhblxuICAgKiB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlcn1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFJlZ2lzdGVyIGEgY29udHJvbCB3aXRoIHRoZSBmb3JtLiBJbnB1dCBlbGVtZW50cyB1c2luZyBuZ01vZGVsQ29udHJvbGxlciBkbyB0aGlzIGF1dG9tYXRpY2FsbHlcbiAgICogd2hlbiB0aGV5IGFyZSBsaW5rZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgY29udHJvbCB3aWxsIG5vdCBiZSByZWZsZWN0ZWQgb24gdGhlIG5ldyBwYXJlbnQgZm9ybS4gVGhpc1xuICAgKiBpcyBub3QgYW4gaXNzdWUgd2l0aCBub3JtYWwgdXNlLCBhcyBmcmVzaGx5IGNvbXBpbGVkIGFuZCBsaW5rZWQgY29udHJvbHMgYXJlIGluIGEgYCRwcmlzdGluZWBcbiAgICogc3RhdGUuXG4gICAqXG4gICAqIEhvd2V2ZXIsIGlmIHRoZSBtZXRob2QgaXMgdXNlZCBwcm9ncmFtbWF0aWNhbGx5LCBmb3IgZXhhbXBsZSBieSBhZGRpbmcgZHluYW1pY2FsbHkgY3JlYXRlZCBjb250cm9scyxcbiAgICogb3IgY29udHJvbHMgdGhhdCBoYXZlIGJlZW4gcHJldmlvdXNseSByZW1vdmVkIHdpdGhvdXQgZGVzdHJveWluZyB0aGVpciBjb3JyZXNwb25kaW5nIERPTSBlbGVtZW50LFxuICAgKiBpdCdzIHRoZSBkZXZlbG9wZXJzIHJlc3BvbnNpYmlsaXR5IHRvIG1ha2Ugc3VyZSB0aGUgY3VycmVudCBzdGF0ZSBwcm9wYWdhdGVzIHRvIHRoZSBwYXJlbnQgZm9ybS5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUsIGlmIGFuIGlucHV0IGNvbnRyb2wgaXMgYWRkZWQgdGhhdCBpcyBhbHJlYWR5IGAkZGlydHlgIGFuZCBoYXMgYCRlcnJvcmAgcHJvcGVydGllcyxcbiAgICogY2FsbGluZyBgJHNldERpcnR5KClgIGFuZCBgJHZhbGlkYXRlKClgIGFmdGVyd2FyZHMgd2lsbCBwcm9wYWdhdGUgdGhlIHN0YXRlIHRvIHRoZSBwYXJlbnQgZm9ybS5cbiAgICovXG4gICRhZGRDb250cm9sOiBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgLy8gQnJlYWtpbmcgY2hhbmdlIC0gYmVmb3JlLCBpbnB1dHMgd2hvc2UgbmFtZSB3YXMgXCJoYXNPd25Qcm9wZXJ0eVwiIHdlcmUgcXVpZXRseSBpZ25vcmVkXG4gICAgLy8gYW5kIG5vdCBhZGRlZCB0byB0aGUgc2NvcGUuICBOb3cgd2UgdGhyb3cgYW4gZXJyb3IuXG4gICAgYXNzZXJ0Tm90SGFzT3duUHJvcGVydHkoY29udHJvbC4kbmFtZSwgJ2lucHV0Jyk7XG4gICAgdGhpcy4kJGNvbnRyb2xzLnB1c2goY29udHJvbCk7XG5cbiAgICBpZiAoY29udHJvbC4kbmFtZSkge1xuICAgICAgdGhpc1tjb250cm9sLiRuYW1lXSA9IGNvbnRyb2w7XG4gICAgfVxuXG4gICAgY29udHJvbC4kJHBhcmVudEZvcm0gPSB0aGlzO1xuICB9LFxuXG4gIC8vIFByaXZhdGUgQVBJOiByZW5hbWUgYSBmb3JtIGNvbnRyb2xcbiAgJCRyZW5hbWVDb250cm9sOiBmdW5jdGlvbihjb250cm9sLCBuZXdOYW1lKSB7XG4gICAgdmFyIG9sZE5hbWUgPSBjb250cm9sLiRuYW1lO1xuXG4gICAgaWYgKHRoaXNbb2xkTmFtZV0gPT09IGNvbnRyb2wpIHtcbiAgICAgIGRlbGV0ZSB0aGlzW29sZE5hbWVdO1xuICAgIH1cbiAgICB0aGlzW25ld05hbWVdID0gY29udHJvbDtcbiAgICBjb250cm9sLiRuYW1lID0gbmV3TmFtZTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBmb3JtLkZvcm1Db250cm9sbGVyIyRyZW1vdmVDb250cm9sXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBjb250cm9sIGNvbnRyb2wgb2JqZWN0LCBlaXRoZXIgYSB7QGxpbmsgZm9ybS5Gb3JtQ29udHJvbGxlcn0gb3IgYW5cbiAgICoge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXJ9XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBEZXJlZ2lzdGVyIGEgY29udHJvbCBmcm9tIHRoZSBmb3JtLlxuICAgKlxuICAgKiBJbnB1dCBlbGVtZW50cyB1c2luZyBuZ01vZGVsQ29udHJvbGxlciBkbyB0aGlzIGF1dG9tYXRpY2FsbHkgd2hlbiB0aGV5IGFyZSBkZXN0cm95ZWQuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBvbmx5IHRoZSByZW1vdmVkIGNvbnRyb2wncyB2YWxpZGF0aW9uIHN0YXRlIChgJGVycm9yc2BldGMuKSB3aWxsIGJlIHJlbW92ZWQgZnJvbSB0aGVcbiAgICogZm9ybS4gYCRkaXJ0eWAsIGAkc3VibWl0dGVkYCBzdGF0ZXMgd2lsbCBub3QgYmUgY2hhbmdlZCwgYmVjYXVzZSB0aGUgZXhwZWN0ZWQgYmVoYXZpb3IgY2FuIGJlXG4gICAqIGRpZmZlcmVudCBmcm9tIGNhc2UgdG8gY2FzZS4gRm9yIGV4YW1wbGUsIHJlbW92aW5nIHRoZSBvbmx5IGAkZGlydHlgIGNvbnRyb2wgZnJvbSBhIGZvcm0gbWF5IG9yXG4gICAqIG1heSBub3QgbWVhbiB0aGF0IHRoZSBmb3JtIGlzIHN0aWxsIGAkZGlydHlgLlxuICAgKi9cbiAgJHJlbW92ZUNvbnRyb2w6IGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICBpZiAoY29udHJvbC4kbmFtZSAmJiB0aGlzW2NvbnRyb2wuJG5hbWVdID09PSBjb250cm9sKSB7XG4gICAgICBkZWxldGUgdGhpc1tjb250cm9sLiRuYW1lXTtcbiAgICB9XG4gICAgZm9yRWFjaCh0aGlzLiRwZW5kaW5nLCBmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWludmFsaWQtdGhpc1xuICAgICAgdGhpcy4kc2V0VmFsaWRpdHkobmFtZSwgbnVsbCwgY29udHJvbCk7XG4gICAgfSwgdGhpcyk7XG4gICAgZm9yRWFjaCh0aGlzLiRlcnJvciwgZnVuY3Rpb24odmFsdWUsIG5hbWUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbnZhbGlkLXRoaXNcbiAgICAgIHRoaXMuJHNldFZhbGlkaXR5KG5hbWUsIG51bGwsIGNvbnRyb2wpO1xuICAgIH0sIHRoaXMpO1xuICAgIGZvckVhY2godGhpcy4kJHN1Y2Nlc3MsIGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8taW52YWxpZC10aGlzXG4gICAgICB0aGlzLiRzZXRWYWxpZGl0eShuYW1lLCBudWxsLCBjb250cm9sKTtcbiAgICB9LCB0aGlzKTtcblxuICAgIGFycmF5UmVtb3ZlKHRoaXMuJCRjb250cm9scywgY29udHJvbCk7XG4gICAgY29udHJvbC4kJHBhcmVudEZvcm0gPSBudWxsRm9ybUN0cmw7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0RGlydHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGZvcm0gdG8gYSBkaXJ0eSBzdGF0ZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2QgY2FuIGJlIGNhbGxlZCB0byBhZGQgdGhlICduZy1kaXJ0eScgY2xhc3MgYW5kIHNldCB0aGUgZm9ybSB0byBhIGRpcnR5XG4gICAqIHN0YXRlIChuZy1kaXJ0eSBjbGFzcykuIFRoaXMgbWV0aG9kIHdpbGwgYWxzbyBwcm9wYWdhdGUgdG8gcGFyZW50IGZvcm1zLlxuICAgKi9cbiAgJHNldERpcnR5OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiQkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MpO1xuICAgIHRoaXMuJCRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCBESVJUWV9DTEFTUyk7XG4gICAgdGhpcy4kZGlydHkgPSB0cnVlO1xuICAgIHRoaXMuJHByaXN0aW5lID0gZmFsc2U7XG4gICAgdGhpcy4kJHBhcmVudEZvcm0uJHNldERpcnR5KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0UHJpc3RpbmVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGZvcm0gdG8gaXRzIHByaXN0aW5lIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBzZXRzIHRoZSBmb3JtJ3MgYCRwcmlzdGluZWAgc3RhdGUgdG8gdHJ1ZSwgdGhlIGAkZGlydHlgIHN0YXRlIHRvIGZhbHNlLCByZW1vdmVzXG4gICAqIHRoZSBgbmctZGlydHlgIGNsYXNzIGFuZCBhZGRzIHRoZSBgbmctcHJpc3RpbmVgIGNsYXNzLiBBZGRpdGlvbmFsbHksIGl0IHNldHMgdGhlIGAkc3VibWl0dGVkYFxuICAgKiBzdGF0ZSB0byBmYWxzZS5cbiAgICpcbiAgICogVGhpcyBtZXRob2Qgd2lsbCBhbHNvIHByb3BhZ2F0ZSB0byBhbGwgdGhlIGNvbnRyb2xzIGNvbnRhaW5lZCBpbiB0aGlzIGZvcm0uXG4gICAqXG4gICAqIFNldHRpbmcgYSBmb3JtIGJhY2sgdG8gYSBwcmlzdGluZSBzdGF0ZSBpcyBvZnRlbiB1c2VmdWwgd2hlbiB3ZSB3YW50IHRvICdyZXVzZScgYSBmb3JtIGFmdGVyXG4gICAqIHNhdmluZyBvciByZXNldHRpbmcgaXQuXG4gICAqL1xuICAkc2V0UHJpc3RpbmU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJCRhbmltYXRlLnNldENsYXNzKHRoaXMuJCRlbGVtZW50LCBQUklTVElORV9DTEFTUywgRElSVFlfQ0xBU1MgKyAnICcgKyBTVUJNSVRURURfQ0xBU1MpO1xuICAgIHRoaXMuJGRpcnR5ID0gZmFsc2U7XG4gICAgdGhpcy4kcHJpc3RpbmUgPSB0cnVlO1xuICAgIHRoaXMuJHN1Ym1pdHRlZCA9IGZhbHNlO1xuICAgIGZvckVhY2godGhpcy4kJGNvbnRyb2xzLCBmdW5jdGlvbihjb250cm9sKSB7XG4gICAgICBjb250cm9sLiRzZXRQcmlzdGluZSgpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFVudG91Y2hlZFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgZm9ybSB0byBpdHMgdW50b3VjaGVkIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgJ25nLXRvdWNoZWQnIGNsYXNzIGFuZCBzZXQgdGhlIGZvcm0gY29udHJvbHMgdG8gdGhlaXJcbiAgICogdW50b3VjaGVkIHN0YXRlIChuZy11bnRvdWNoZWQgY2xhc3MpLlxuICAgKlxuICAgKiBTZXR0aW5nIGEgZm9ybSBjb250cm9scyBiYWNrIHRvIHRoZWlyIHVudG91Y2hlZCBzdGF0ZSBpcyBvZnRlbiB1c2VmdWwgd2hlbiBzZXR0aW5nIHRoZSBmb3JtXG4gICAqIGJhY2sgdG8gaXRzIHByaXN0aW5lIHN0YXRlLlxuICAgKi9cbiAgJHNldFVudG91Y2hlZDogZnVuY3Rpb24oKSB7XG4gICAgZm9yRWFjaCh0aGlzLiQkY29udHJvbHMsIGZ1bmN0aW9uKGNvbnRyb2wpIHtcbiAgICAgIGNvbnRyb2wuJHNldFVudG91Y2hlZCgpO1xuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIGZvcm0uRm9ybUNvbnRyb2xsZXIjJHNldFN1Ym1pdHRlZFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgZm9ybSB0byBpdHMgc3VibWl0dGVkIHN0YXRlLlxuICAgKi9cbiAgJHNldFN1Ym1pdHRlZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy4kJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIFNVQk1JVFRFRF9DTEFTUyk7XG4gICAgdGhpcy4kc3VibWl0dGVkID0gdHJ1ZTtcbiAgICB0aGlzLiQkcGFyZW50Rm9ybS4kc2V0U3VibWl0dGVkKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQG5nZG9jIG1ldGhvZFxuICogQG5hbWUgZm9ybS5Gb3JtQ29udHJvbGxlciMkc2V0VmFsaWRpdHlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENoYW5nZSB0aGUgdmFsaWRpdHkgc3RhdGUgb2YgdGhlIGZvcm0sIGFuZCBub3RpZnkgdGhlIHBhcmVudCBmb3JtIChpZiBhbnkpLlxuICpcbiAqIEFwcGxpY2F0aW9uIGRldmVsb3BlcnMgd2lsbCByYXJlbHkgbmVlZCB0byBjYWxsIHRoaXMgbWV0aG9kIGRpcmVjdGx5LiBJdCBpcyB1c2VkIGludGVybmFsbHksIGJ5XG4gKiB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0VmFsaWRpdHkgTmdNb2RlbENvbnRyb2xsZXIuJHNldFZhbGlkaXR5KCl9LCB0byBwcm9wYWdhdGUgYVxuICogY29udHJvbCdzIHZhbGlkaXR5IHN0YXRlIHRvIHRoZSBwYXJlbnQgYEZvcm1Db250cm9sbGVyYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdmFsaWRhdGlvbkVycm9yS2V5IE5hbWUgb2YgdGhlIHZhbGlkYXRvci4gVGhlIGB2YWxpZGF0aW9uRXJyb3JLZXlgIHdpbGwgYmVcbiAqICAgICAgICBhc3NpZ25lZCB0byBlaXRoZXIgYCRlcnJvclt2YWxpZGF0aW9uRXJyb3JLZXldYCBvciBgJHBlbmRpbmdbdmFsaWRhdGlvbkVycm9yS2V5XWAgKGZvclxuICogICAgICAgIHVuZnVsZmlsbGVkIGAkYXN5bmNWYWxpZGF0b3JzYCksIHNvIHRoYXQgaXQgaXMgYXZhaWxhYmxlIGZvciBkYXRhLWJpbmRpbmcuIFRoZVxuICogICAgICAgIGB2YWxpZGF0aW9uRXJyb3JLZXlgIHNob3VsZCBiZSBpbiBjYW1lbENhc2UgYW5kIHdpbGwgZ2V0IGNvbnZlcnRlZCBpbnRvIGRhc2gtY2FzZSBmb3JcbiAqICAgICAgICBjbGFzcyBuYW1lLiBFeGFtcGxlOiBgbXlFcnJvcmAgd2lsbCByZXN1bHQgaW4gYG5nLXZhbGlkLW15LWVycm9yYCBhbmRcbiAqICAgICAgICBgbmctaW52YWxpZC1teS1lcnJvcmAgY2xhc3NlcyBhbmQgY2FuIGJlIGJvdW5kIHRvIGFzIGB7eyBzb21lRm9ybS4kZXJyb3IubXlFcnJvciB9fWAuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGlzVmFsaWQgV2hldGhlciB0aGUgY3VycmVudCBzdGF0ZSBpcyB2YWxpZCAodHJ1ZSksIGludmFsaWQgKGZhbHNlKSwgcGVuZGluZ1xuICogICAgICAgICh1bmRlZmluZWQpLCAgb3Igc2tpcHBlZCAobnVsbCkuIFBlbmRpbmcgaXMgdXNlZCBmb3IgdW5mdWxmaWxsZWQgYCRhc3luY1ZhbGlkYXRvcnNgLlxuICogICAgICAgIFNraXBwZWQgaXMgdXNlZCBieSBBbmd1bGFySlMgd2hlbiB2YWxpZGF0b3JzIGRvIG5vdCBydW4gYmVjYXVzZSBvZiBwYXJzZSBlcnJvcnMgYW5kIHdoZW5cbiAqICAgICAgICBgJGFzeW5jVmFsaWRhdG9yc2AgZG8gbm90IHJ1biBiZWNhdXNlIGFueSBvZiB0aGUgYCR2YWxpZGF0b3JzYCBmYWlsZWQuXG4gKiBAcGFyYW0ge05nTW9kZWxDb250cm9sbGVyIHwgRm9ybUNvbnRyb2xsZXJ9IGNvbnRyb2xsZXIgLSBUaGUgY29udHJvbGxlciB3aG9zZSB2YWxpZGl0eSBzdGF0ZSBpc1xuICogICAgICAgIHRyaWdnZXJpbmcgdGhlIGNoYW5nZS5cbiAqL1xuYWRkU2V0VmFsaWRpdHlNZXRob2Qoe1xuICBjbGF6ejogRm9ybUNvbnRyb2xsZXIsXG4gIHNldDogZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSwgY29udHJvbGxlcikge1xuICAgIHZhciBsaXN0ID0gb2JqZWN0W3Byb3BlcnR5XTtcbiAgICBpZiAoIWxpc3QpIHtcbiAgICAgIG9iamVjdFtwcm9wZXJ0eV0gPSBbY29udHJvbGxlcl07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpbmRleCA9IGxpc3QuaW5kZXhPZihjb250cm9sbGVyKTtcbiAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgbGlzdC5wdXNoKGNvbnRyb2xsZXIpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgdW5zZXQ6IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHksIGNvbnRyb2xsZXIpIHtcbiAgICB2YXIgbGlzdCA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgaWYgKCFsaXN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFycmF5UmVtb3ZlKGxpc3QsIGNvbnRyb2xsZXIpO1xuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgZGVsZXRlIG9iamVjdFtwcm9wZXJ0eV07XG4gICAgfVxuICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0Zvcm1cbiAqIEByZXN0cmljdCBFQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIE5lc3RhYmxlIGFsaWFzIG9mIHtAbGluayBuZy5kaXJlY3RpdmU6Zm9ybSBgZm9ybWB9IGRpcmVjdGl2ZS4gSFRNTFxuICogZG9lcyBub3QgYWxsb3cgbmVzdGluZyBvZiBmb3JtIGVsZW1lbnRzLiBJdCBpcyB1c2VmdWwgdG8gbmVzdCBmb3JtcywgZm9yIGV4YW1wbGUgaWYgdGhlIHZhbGlkaXR5IG9mIGFcbiAqIHN1Yi1ncm91cCBvZiBjb250cm9scyBuZWVkcyB0byBiZSBkZXRlcm1pbmVkLlxuICpcbiAqIE5vdGU6IHRoZSBwdXJwb3NlIG9mIGBuZ0Zvcm1gIGlzIHRvIGdyb3VwIGNvbnRyb2xzLFxuICogYnV0IG5vdCB0byBiZSBhIHJlcGxhY2VtZW50IGZvciB0aGUgYDxmb3JtPmAgdGFnIHdpdGggYWxsIG9mIGl0cyBjYXBhYmlsaXRpZXNcbiAqIChlLmcuIHBvc3RpbmcgdG8gdGhlIHNlcnZlciwgLi4uKS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nRm9ybXxuYW1lIE5hbWUgb2YgdGhlIGZvcm0uIElmIHNwZWNpZmllZCwgdGhlIGZvcm0gY29udHJvbGxlciB3aWxsIGJlIHB1Ymxpc2hlZCBpbnRvXG4gKiAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZCBzY29wZSwgdW5kZXIgdGhpcyBuYW1lLlxuICpcbiAqL1xuXG4gLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBmb3JtXG4gKiBAcmVzdHJpY3QgRVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRGlyZWN0aXZlIHRoYXQgaW5zdGFudGlhdGVzXG4gKiB7QGxpbmsgZm9ybS5Gb3JtQ29udHJvbGxlciBGb3JtQ29udHJvbGxlcn0uXG4gKlxuICogSWYgdGhlIGBuYW1lYCBhdHRyaWJ1dGUgaXMgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIGlzIHB1Ymxpc2hlZCBvbnRvIHRoZSBjdXJyZW50IHNjb3BlIHVuZGVyXG4gKiB0aGlzIG5hbWUuXG4gKlxuICogIyBBbGlhczoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9XG4gKlxuICogSW4gQW5ndWxhciwgZm9ybXMgY2FuIGJlIG5lc3RlZC4gVGhpcyBtZWFucyB0aGF0IHRoZSBvdXRlciBmb3JtIGlzIHZhbGlkIHdoZW4gYWxsIG9mIHRoZSBjaGlsZFxuICogZm9ybXMgYXJlIHZhbGlkIGFzIHdlbGwuIEhvd2V2ZXIsIGJyb3dzZXJzIGRvIG5vdCBhbGxvdyBuZXN0aW5nIG9mIGA8Zm9ybT5gIGVsZW1lbnRzLCBzb1xuICogQW5ndWxhciBwcm92aWRlcyB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Zvcm0gYG5nRm9ybWB9IGRpcmVjdGl2ZSwgd2hpY2ggYmVoYXZlcyBpZGVudGljYWxseSB0b1xuICogYGZvcm1gIGJ1dCBjYW4gYmUgbmVzdGVkLiBOZXN0ZWQgZm9ybXMgY2FuIGJlIHVzZWZ1bCwgZm9yIGV4YW1wbGUsIGlmIHRoZSB2YWxpZGl0eSBvZiBhIHN1Yi1ncm91cFxuICogb2YgY29udHJvbHMgbmVlZHMgdG8gYmUgZGV0ZXJtaW5lZC5cbiAqXG4gKiAjIENTUyBjbGFzc2VzXG4gKiAgLSBgbmctdmFsaWRgIGlzIHNldCBpZiB0aGUgZm9ybSBpcyB2YWxpZC5cbiAqICAtIGBuZy1pbnZhbGlkYCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgaW52YWxpZC5cbiAqICAtIGBuZy1wZW5kaW5nYCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgcGVuZGluZy5cbiAqICAtIGBuZy1wcmlzdGluZWAgaXMgc2V0IGlmIHRoZSBmb3JtIGlzIHByaXN0aW5lLlxuICogIC0gYG5nLWRpcnR5YCBpcyBzZXQgaWYgdGhlIGZvcm0gaXMgZGlydHkuXG4gKiAgLSBgbmctc3VibWl0dGVkYCBpcyBzZXQgaWYgdGhlIGZvcm0gd2FzIHN1Ym1pdHRlZC5cbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCBuZ0FuaW1hdGUgY2FuIGRldGVjdCBlYWNoIG9mIHRoZXNlIGNsYXNzZXMgd2hlbiBhZGRlZCBhbmQgcmVtb3ZlZC5cbiAqXG4gKlxuICogIyBTdWJtaXR0aW5nIGEgZm9ybSBhbmQgcHJldmVudGluZyB0aGUgZGVmYXVsdCBhY3Rpb25cbiAqXG4gKiBTaW5jZSB0aGUgcm9sZSBvZiBmb3JtcyBpbiBjbGllbnQtc2lkZSBBbmd1bGFyIGFwcGxpY2F0aW9ucyBpcyBkaWZmZXJlbnQgdGhhbiBpbiBjbGFzc2ljYWxcbiAqIHJvdW5kdHJpcCBhcHBzLCBpdCBpcyBkZXNpcmFibGUgZm9yIHRoZSBicm93c2VyIG5vdCB0byB0cmFuc2xhdGUgdGhlIGZvcm0gc3VibWlzc2lvbiBpbnRvIGEgZnVsbFxuICogcGFnZSByZWxvYWQgdGhhdCBzZW5kcyB0aGUgZGF0YSB0byB0aGUgc2VydmVyLiBJbnN0ZWFkIHNvbWUgamF2YXNjcmlwdCBsb2dpYyBzaG91bGQgYmUgdHJpZ2dlcmVkXG4gKiB0byBoYW5kbGUgdGhlIGZvcm0gc3VibWlzc2lvbiBpbiBhbiBhcHBsaWNhdGlvbi1zcGVjaWZpYyB3YXkuXG4gKlxuICogRm9yIHRoaXMgcmVhc29uLCBBbmd1bGFyIHByZXZlbnRzIHRoZSBkZWZhdWx0IGFjdGlvbiAoZm9ybSBzdWJtaXNzaW9uIHRvIHRoZSBzZXJ2ZXIpIHVubGVzcyB0aGVcbiAqIGA8Zm9ybT5gIGVsZW1lbnQgaGFzIGFuIGBhY3Rpb25gIGF0dHJpYnV0ZSBzcGVjaWZpZWQuXG4gKlxuICogWW91IGNhbiB1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgdHdvIHdheXMgdG8gc3BlY2lmeSB3aGF0IGphdmFzY3JpcHQgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgd2hlblxuICogYSBmb3JtIGlzIHN1Ym1pdHRlZDpcbiAqXG4gKiAtIHtAbGluayBuZy5kaXJlY3RpdmU6bmdTdWJtaXQgbmdTdWJtaXR9IGRpcmVjdGl2ZSBvbiB0aGUgZm9ybSBlbGVtZW50XG4gKiAtIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfSBkaXJlY3RpdmUgb24gdGhlIGZpcnN0XG4gICogIGJ1dHRvbiBvciBpbnB1dCBmaWVsZCBvZiB0eXBlIHN1Ym1pdCAoaW5wdXRbdHlwZT1zdWJtaXRdKVxuICpcbiAqIFRvIHByZXZlbnQgZG91YmxlIGV4ZWN1dGlvbiBvZiB0aGUgaGFuZGxlciwgdXNlIG9ubHkgb25lIG9mIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nU3VibWl0IG5nU3VibWl0fVxuICogb3Ige0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsaWNrIG5nQ2xpY2t9IGRpcmVjdGl2ZXMuXG4gKiBUaGlzIGlzIGJlY2F1c2Ugb2YgdGhlIGZvbGxvd2luZyBmb3JtIHN1Ym1pc3Npb24gcnVsZXMgaW4gdGhlIEhUTUwgc3BlY2lmaWNhdGlvbjpcbiAqXG4gKiAtIElmIGEgZm9ybSBoYXMgb25seSBvbmUgaW5wdXQgZmllbGQgdGhlbiBoaXR0aW5nIGVudGVyIGluIHRoaXMgZmllbGQgdHJpZ2dlcnMgZm9ybSBzdWJtaXRcbiAqIChgbmdTdWJtaXRgKVxuICogLSBpZiBhIGZvcm0gaGFzIDIrIGlucHV0IGZpZWxkcyBhbmQgbm8gYnV0dG9ucyBvciBpbnB1dFt0eXBlPXN1Ym1pdF0gdGhlbiBoaXR0aW5nIGVudGVyXG4gKiBkb2Vzbid0IHRyaWdnZXIgc3VibWl0XG4gKiAtIGlmIGEgZm9ybSBoYXMgb25lIG9yIG1vcmUgaW5wdXQgZmllbGRzIGFuZCBvbmUgb3IgbW9yZSBidXR0b25zIG9yIGlucHV0W3R5cGU9c3VibWl0XSB0aGVuXG4gKiBoaXR0aW5nIGVudGVyIGluIGFueSBvZiB0aGUgaW5wdXQgZmllbGRzIHdpbGwgdHJpZ2dlciB0aGUgY2xpY2sgaGFuZGxlciBvbiB0aGUgKmZpcnN0KiBidXR0b24gb3JcbiAqIGlucHV0W3R5cGU9c3VibWl0XSAoYG5nQ2xpY2tgKSAqYW5kKiBhIHN1Ym1pdCBoYW5kbGVyIG9uIHRoZSBlbmNsb3NpbmcgZm9ybSAoYG5nU3VibWl0YClcbiAqXG4gKiBBbnkgcGVuZGluZyBgbmdNb2RlbE9wdGlvbnNgIGNoYW5nZXMgd2lsbCB0YWtlIHBsYWNlIGltbWVkaWF0ZWx5IHdoZW4gYW4gZW5jbG9zaW5nIGZvcm0gaXNcbiAqIHN1Ym1pdHRlZC4gTm90ZSB0aGF0IGBuZ0NsaWNrYCBldmVudHMgd2lsbCBvY2N1ciBiZWZvcmUgdGhlIG1vZGVsIGlzIHVwZGF0ZWQuIFVzZSBgbmdTdWJtaXRgXG4gKiB0byBoYXZlIGFjY2VzcyB0byB0aGUgdXBkYXRlZCBtb2RlbC5cbiAqXG4gKiAjIyBBbmltYXRpb24gSG9va3NcbiAqXG4gKiBBbmltYXRpb25zIGluIG5nRm9ybSBhcmUgdHJpZ2dlcmVkIHdoZW4gYW55IG9mIHRoZSBhc3NvY2lhdGVkIENTUyBjbGFzc2VzIGFyZSBhZGRlZCBhbmQgcmVtb3ZlZC5cbiAqIFRoZXNlIGNsYXNzZXMgYXJlOiBgLm5nLXByaXN0aW5lYCwgYC5uZy1kaXJ0eWAsIGAubmctaW52YWxpZGAgYW5kIGAubmctdmFsaWRgIGFzIHdlbGwgYXMgYW55XG4gKiBvdGhlciB2YWxpZGF0aW9ucyB0aGF0IGFyZSBwZXJmb3JtZWQgd2l0aGluIHRoZSBmb3JtLiBBbmltYXRpb25zIGluIG5nRm9ybSBhcmUgc2ltaWxhciB0byBob3dcbiAqIHRoZXkgd29yayBpbiBuZ0NsYXNzIGFuZCBhbmltYXRpb25zIGNhbiBiZSBob29rZWQgaW50byB1c2luZyBDU1MgdHJhbnNpdGlvbnMsIGtleWZyYW1lcyBhcyB3ZWxsXG4gKiBhcyBKUyBhbmltYXRpb25zLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBhIHNpbXBsZSB3YXkgdG8gdXRpbGl6ZSBDU1MgdHJhbnNpdGlvbnMgdG8gc3R5bGUgYSBmb3JtIGVsZW1lbnRcbiAqIHRoYXQgaGFzIGJlZW4gcmVuZGVyZWQgYXMgaW52YWxpZCBhZnRlciBpdCBoYXMgYmVlbiB2YWxpZGF0ZWQ6XG4gKlxuICogPHByZT5cbiAqIC8vYmUgc3VyZSB0byBpbmNsdWRlIG5nQW5pbWF0ZSBhcyBhIG1vZHVsZSB0byBob29rIGludG8gbW9yZVxuICogLy9hZHZhbmNlZCBhbmltYXRpb25zXG4gKiAubXktZm9ybSB7XG4gKiAgIHRyYW5zaXRpb246MC41cyBsaW5lYXIgYWxsO1xuICogICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAqIH1cbiAqIC5teS1mb3JtLm5nLWludmFsaWQge1xuICogICBiYWNrZ3JvdW5kOiByZWQ7XG4gKiAgIGNvbG9yOndoaXRlO1xuICogfVxuICogPC9wcmU+XG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwibmctZm9ybVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIGZpeEJhc2U9XCJ0cnVlXCIgbW9kdWxlPVwiZm9ybUV4YW1wbGVcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdmb3JtRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRm9ybUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS51c2VyVHlwZSA9ICdndWVzdCc7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8c3R5bGU+XG4gICAgICAgIC5teS1mb3JtIHtcbiAgICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgfVxuICAgICAgICAubXktZm9ybS5uZy1pbnZhbGlkIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiByZWQ7XG4gICAgICAgIH1cbiAgICAgICA8L3N0eWxlPlxuICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRm9ybUNvbnRyb2xsZXJcIiBjbGFzcz1cIm15LWZvcm1cIj5cbiAgICAgICAgIHVzZXJUeXBlOiA8aW5wdXQgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJ1c2VyVHlwZVwiIHJlcXVpcmVkPlxuICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+UmVxdWlyZWQhPC9zcGFuPjxicj5cbiAgICAgICAgIDxjb2RlPnVzZXJUeXBlID0ge3t1c2VyVHlwZX19PC9jb2RlPjxicj5cbiAgICAgICAgIDxjb2RlPm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvY29kZT48YnI+XG4gICAgICAgICA8Y29kZT5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L2NvZGU+PGJyPlxuICAgICAgICAgPGNvZGU+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC9jb2RlPjxicj5cbiAgICAgICAgIDxjb2RlPm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC9jb2RlPjxicj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgdXNlclR5cGUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ3VzZXJUeXBlJykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyVHlwZS5nZXRUZXh0KCkpLnRvQ29udGFpbignZ3Vlc3QnKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHVzZXJUeXBlID0gZWxlbWVudChieS5iaW5kaW5nKCd1c2VyVHlwZScpKTtcbiAgICAgICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG4gICAgICAgICAgdmFyIHVzZXJJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXJUeXBlJykpO1xuXG4gICAgICAgICAgdXNlcklucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlcklucHV0LnNlbmRLZXlzKCcnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyVHlwZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3VzZXJUeXBlID0nKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgTmFtZSBvZiB0aGUgZm9ybS4gSWYgc3BlY2lmaWVkLCB0aGUgZm9ybSBjb250cm9sbGVyIHdpbGwgYmUgcHVibGlzaGVkIGludG9cbiAqICAgICAgICAgICAgICAgICAgICAgICByZWxhdGVkIHNjb3BlLCB1bmRlciB0aGlzIG5hbWUuXG4gKi9cbnZhciBmb3JtRGlyZWN0aXZlRmFjdG9yeSA9IGZ1bmN0aW9uKGlzTmdGb3JtKSB7XG4gIHJldHVybiBbJyR0aW1lb3V0JywgJyRwYXJzZScsIGZ1bmN0aW9uKCR0aW1lb3V0LCAkcGFyc2UpIHtcbiAgICB2YXIgZm9ybURpcmVjdGl2ZSA9IHtcbiAgICAgIG5hbWU6ICdmb3JtJyxcbiAgICAgIHJlc3RyaWN0OiBpc05nRm9ybSA/ICdFQUMnIDogJ0UnLFxuICAgICAgcmVxdWlyZTogWydmb3JtJywgJ15eP2Zvcm0nXSwgLy9maXJzdCBpcyB0aGUgZm9ybSdzIG93biBjdHJsLCBzZWNvbmQgaXMgYW4gb3B0aW9uYWwgcGFyZW50IGZvcm1cbiAgICAgIGNvbnRyb2xsZXI6IEZvcm1Db250cm9sbGVyLFxuICAgICAgY29tcGlsZTogZnVuY3Rpb24gbmdGb3JtQ29tcGlsZShmb3JtRWxlbWVudCwgYXR0cikge1xuICAgICAgICAvLyBTZXR1cCBpbml0aWFsIHN0YXRlIG9mIHRoZSBjb250cm9sXG4gICAgICAgIGZvcm1FbGVtZW50LmFkZENsYXNzKFBSSVNUSU5FX0NMQVNTKS5hZGRDbGFzcyhWQUxJRF9DTEFTUyk7XG5cbiAgICAgICAgdmFyIG5hbWVBdHRyID0gYXR0ci5uYW1lID8gJ25hbWUnIDogKGlzTmdGb3JtICYmIGF0dHIubmdGb3JtID8gJ25nRm9ybScgOiBmYWxzZSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBwcmU6IGZ1bmN0aW9uIG5nRm9ybVByZUxpbmsoc2NvcGUsIGZvcm1FbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICAgICAgdmFyIGNvbnRyb2xsZXIgPSBjdHJsc1swXTtcblxuICAgICAgICAgICAgLy8gaWYgYGFjdGlvbmAgYXR0ciBpcyBub3QgcHJlc2VudCBvbiB0aGUgZm9ybSwgcHJldmVudCB0aGUgZGVmYXVsdCBhY3Rpb24gKHN1Ym1pc3Npb24pXG4gICAgICAgICAgICBpZiAoISgnYWN0aW9uJyBpbiBhdHRyKSkge1xuICAgICAgICAgICAgICAvLyB3ZSBjYW4ndCB1c2UganEgZXZlbnRzIGJlY2F1c2UgaWYgYSBmb3JtIGlzIGRlc3Ryb3llZCBkdXJpbmcgc3VibWlzc2lvbiB0aGUgZGVmYXVsdFxuICAgICAgICAgICAgICAvLyBhY3Rpb24gaXMgbm90IHByZXZlbnRlZC4gc2VlICMxMjM4XG4gICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgIC8vIElFIDkgaXMgbm90IGFmZmVjdGVkIGJlY2F1c2UgaXQgZG9lc24ndCBmaXJlIGEgc3VibWl0IGV2ZW50IGFuZCB0cnkgdG8gZG8gYSBmdWxsXG4gICAgICAgICAgICAgIC8vIHBhZ2UgcmVsb2FkIGlmIHRoZSBmb3JtIHdhcyBkZXN0cm95ZWQgYnkgc3VibWlzc2lvbiBvZiB0aGUgZm9ybSB2aWEgYSBjbGljayBoYW5kbGVyXG4gICAgICAgICAgICAgIC8vIG9uIGEgYnV0dG9uIGluIHRoZSBmb3JtLiBMb29rcyBsaWtlIGFuIElFOSBzcGVjaWZpYyBidWcuXG4gICAgICAgICAgICAgIHZhciBoYW5kbGVGb3JtU3VibWlzc2lvbiA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgY29udHJvbGxlci4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICAgICAgICAgICAgICAgICBjb250cm9sbGVyLiRzZXRTdWJtaXR0ZWQoKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgZm9ybUVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgaGFuZGxlRm9ybVN1Ym1pc3Npb24pO1xuXG4gICAgICAgICAgICAgIC8vIHVucmVnaXN0ZXIgdGhlIHByZXZlbnREZWZhdWx0IGxpc3RlbmVyIHNvIHRoYXQgd2UgZG9uJ3Qgbm90IGxlYWsgbWVtb3J5IGJ1dCBpbiBhXG4gICAgICAgICAgICAgIC8vIHdheSB0aGF0IHdpbGwgYWNoaWV2ZSB0aGUgcHJldmVudGlvbiBvZiB0aGUgZGVmYXVsdCBhY3Rpb24uXG4gICAgICAgICAgICAgIGZvcm1FbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgZm9ybUVsZW1lbnRbMF0ucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VibWl0JywgaGFuZGxlRm9ybVN1Ym1pc3Npb24pO1xuICAgICAgICAgICAgICAgIH0sIDAsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYXJlbnRGb3JtQ3RybCA9IGN0cmxzWzFdIHx8IGNvbnRyb2xsZXIuJCRwYXJlbnRGb3JtO1xuICAgICAgICAgICAgcGFyZW50Rm9ybUN0cmwuJGFkZENvbnRyb2woY29udHJvbGxlcik7XG5cbiAgICAgICAgICAgIHZhciBzZXR0ZXIgPSBuYW1lQXR0ciA/IGdldFNldHRlcihjb250cm9sbGVyLiRuYW1lKSA6IG5vb3A7XG5cbiAgICAgICAgICAgIGlmIChuYW1lQXR0cikge1xuICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICBhdHRyLiRvYnNlcnZlKG5hbWVBdHRyLCBmdW5jdGlvbihuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmIChjb250cm9sbGVyLiRuYW1lID09PSBuZXdWYWx1ZSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHNldHRlcihzY29wZSwgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLiQkcGFyZW50Rm9ybS4kJHJlbmFtZUNvbnRyb2woY29udHJvbGxlciwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgICAgIHNldHRlciA9IGdldFNldHRlcihjb250cm9sbGVyLiRuYW1lKTtcbiAgICAgICAgICAgICAgICBzZXR0ZXIoc2NvcGUsIGNvbnRyb2xsZXIpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvcm1FbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBjb250cm9sbGVyLiQkcGFyZW50Rm9ybS4kcmVtb3ZlQ29udHJvbChjb250cm9sbGVyKTtcbiAgICAgICAgICAgICAgc2V0dGVyKHNjb3BlLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICBleHRlbmQoY29udHJvbGxlciwgbnVsbEZvcm1DdHJsKTsgLy9zdG9wIHByb3BhZ2F0aW5nIGNoaWxkIGRlc3RydWN0aW9uIGhhbmRsZXJzIHVwd2FyZHNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIGZvcm1EaXJlY3RpdmU7XG5cbiAgICBmdW5jdGlvbiBnZXRTZXR0ZXIoZXhwcmVzc2lvbikge1xuICAgICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7XG4gICAgICAgIC8vY3JlYXRlIGFuIGFzc2lnbmFibGUgZXhwcmVzc2lvbiwgc28gZm9ybXMgd2l0aCBhbiBlbXB0eSBuYW1lIGNhbiBiZSByZW5hbWVkIGxhdGVyXG4gICAgICAgIHJldHVybiAkcGFyc2UoJ3RoaXNbXCJcIl0nKS5hc3NpZ247XG4gICAgICB9XG4gICAgICByZXR1cm4gJHBhcnNlKGV4cHJlc3Npb24pLmFzc2lnbiB8fCBub29wO1xuICAgIH1cbiAgfV07XG59O1xuXG52YXIgZm9ybURpcmVjdGl2ZSA9IGZvcm1EaXJlY3RpdmVGYWN0b3J5KCk7XG52YXIgbmdGb3JtRGlyZWN0aXZlID0gZm9ybURpcmVjdGl2ZUZhY3RvcnkodHJ1ZSk7XG5cblxuXG4vLyBoZWxwZXIgbWV0aG9kc1xuZnVuY3Rpb24gc2V0dXBWYWxpZGl0eShpbnN0YW5jZSkge1xuICBpbnN0YW5jZS4kJGNsYXNzQ2FjaGUgPSB7fTtcbiAgaW5zdGFuY2UuJCRjbGFzc0NhY2hlW0lOVkFMSURfQ0xBU1NdID0gIShpbnN0YW5jZS4kJGNsYXNzQ2FjaGVbVkFMSURfQ0xBU1NdID0gaW5zdGFuY2UuJCRlbGVtZW50Lmhhc0NsYXNzKFZBTElEX0NMQVNTKSk7XG59XG5mdW5jdGlvbiBhZGRTZXRWYWxpZGl0eU1ldGhvZChjb250ZXh0KSB7XG4gIHZhciBjbGF6eiA9IGNvbnRleHQuY2xhenosXG4gICAgICBzZXQgPSBjb250ZXh0LnNldCxcbiAgICAgIHVuc2V0ID0gY29udGV4dC51bnNldDtcblxuICBjbGF6ei5wcm90b3R5cGUuJHNldFZhbGlkaXR5ID0gZnVuY3Rpb24odmFsaWRhdGlvbkVycm9yS2V5LCBzdGF0ZSwgY29udHJvbGxlcikge1xuICAgIGlmIChpc1VuZGVmaW5lZChzdGF0ZSkpIHtcbiAgICAgIGNyZWF0ZUFuZFNldCh0aGlzLCAnJHBlbmRpbmcnLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1bnNldEFuZENsZWFudXAodGhpcywgJyRwZW5kaW5nJywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICB9XG4gICAgaWYgKCFpc0Jvb2xlYW4oc3RhdGUpKSB7XG4gICAgICB1bnNldCh0aGlzLiRlcnJvciwgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgIHVuc2V0KHRoaXMuJCRzdWNjZXNzLCB2YWxpZGF0aW9uRXJyb3JLZXksIGNvbnRyb2xsZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgdW5zZXQodGhpcy4kZXJyb3IsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICAgIHNldCh0aGlzLiQkc3VjY2VzcywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldCh0aGlzLiRlcnJvciwgdmFsaWRhdGlvbkVycm9yS2V5LCBjb250cm9sbGVyKTtcbiAgICAgICAgdW5zZXQodGhpcy4kJHN1Y2Nlc3MsIHZhbGlkYXRpb25FcnJvcktleSwgY29udHJvbGxlcik7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0aGlzLiRwZW5kaW5nKSB7XG4gICAgICBjYWNoZWRUb2dnbGVDbGFzcyh0aGlzLCBQRU5ESU5HX0NMQVNTLCB0cnVlKTtcbiAgICAgIHRoaXMuJHZhbGlkID0gdGhpcy4kaW52YWxpZCA9IHVuZGVmaW5lZDtcbiAgICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3ModGhpcywgJycsIG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWNoZWRUb2dnbGVDbGFzcyh0aGlzLCBQRU5ESU5HX0NMQVNTLCBmYWxzZSk7XG4gICAgICB0aGlzLiR2YWxpZCA9IGlzT2JqZWN0RW1wdHkodGhpcy4kZXJyb3IpO1xuICAgICAgdGhpcy4kaW52YWxpZCA9ICF0aGlzLiR2YWxpZDtcbiAgICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3ModGhpcywgJycsIHRoaXMuJHZhbGlkKTtcbiAgICB9XG5cbiAgICAvLyByZS1yZWFkIHRoZSBzdGF0ZSBhcyB0aGUgc2V0L3Vuc2V0IG1ldGhvZHMgY291bGQgaGF2ZVxuICAgIC8vIGNvbWJpbmVkIHN0YXRlIGluIHRoaXMuJGVycm9yW3ZhbGlkYXRpb25FcnJvcl0gKHVzZWQgZm9yIGZvcm1zKSxcbiAgICAvLyB3aGVyZSBzZXR0aW5nL3Vuc2V0dGluZyBvbmx5IGluY3JlbWVudHMvZGVjcmVtZW50cyB0aGUgdmFsdWUsXG4gICAgLy8gYW5kIGRvZXMgbm90IHJlcGxhY2UgaXQuXG4gICAgdmFyIGNvbWJpbmVkU3RhdGU7XG4gICAgaWYgKHRoaXMuJHBlbmRpbmcgJiYgdGhpcy4kcGVuZGluZ1t2YWxpZGF0aW9uRXJyb3JLZXldKSB7XG4gICAgICBjb21iaW5lZFN0YXRlID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSBpZiAodGhpcy4kZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XSkge1xuICAgICAgY29tYmluZWRTdGF0ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAodGhpcy4kJHN1Y2Nlc3NbdmFsaWRhdGlvbkVycm9yS2V5XSkge1xuICAgICAgY29tYmluZWRTdGF0ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbWJpbmVkU3RhdGUgPSBudWxsO1xuICAgIH1cblxuICAgIHRvZ2dsZVZhbGlkYXRpb25Dc3ModGhpcywgdmFsaWRhdGlvbkVycm9yS2V5LCBjb21iaW5lZFN0YXRlKTtcbiAgICB0aGlzLiQkcGFyZW50Rm9ybS4kc2V0VmFsaWRpdHkodmFsaWRhdGlvbkVycm9yS2V5LCBjb21iaW5lZFN0YXRlLCB0aGlzKTtcbiAgfTtcblxuICBmdW5jdGlvbiBjcmVhdGVBbmRTZXQoY3RybCwgbmFtZSwgdmFsdWUsIGNvbnRyb2xsZXIpIHtcbiAgICBpZiAoIWN0cmxbbmFtZV0pIHtcbiAgICAgIGN0cmxbbmFtZV0gPSB7fTtcbiAgICB9XG4gICAgc2V0KGN0cmxbbmFtZV0sIHZhbHVlLCBjb250cm9sbGVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuc2V0QW5kQ2xlYW51cChjdHJsLCBuYW1lLCB2YWx1ZSwgY29udHJvbGxlcikge1xuICAgIGlmIChjdHJsW25hbWVdKSB7XG4gICAgICB1bnNldChjdHJsW25hbWVdLCB2YWx1ZSwgY29udHJvbGxlcik7XG4gICAgfVxuICAgIGlmIChpc09iamVjdEVtcHR5KGN0cmxbbmFtZV0pKSB7XG4gICAgICBjdHJsW25hbWVdID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhY2hlZFRvZ2dsZUNsYXNzKGN0cmwsIGNsYXNzTmFtZSwgc3dpdGNoVmFsdWUpIHtcbiAgICBpZiAoc3dpdGNoVmFsdWUgJiYgIWN0cmwuJCRjbGFzc0NhY2hlW2NsYXNzTmFtZV0pIHtcbiAgICAgIGN0cmwuJCRhbmltYXRlLmFkZENsYXNzKGN0cmwuJCRlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgY3RybC4kJGNsYXNzQ2FjaGVbY2xhc3NOYW1lXSA9IHRydWU7XG4gICAgfSBlbHNlIGlmICghc3dpdGNoVmFsdWUgJiYgY3RybC4kJGNsYXNzQ2FjaGVbY2xhc3NOYW1lXSkge1xuICAgICAgY3RybC4kJGFuaW1hdGUucmVtb3ZlQ2xhc3MoY3RybC4kJGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICBjdHJsLiQkY2xhc3NDYWNoZVtjbGFzc05hbWVdID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG9nZ2xlVmFsaWRhdGlvbkNzcyhjdHJsLCB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQpIHtcbiAgICB2YWxpZGF0aW9uRXJyb3JLZXkgPSB2YWxpZGF0aW9uRXJyb3JLZXkgPyAnLScgKyBzbmFrZV9jYXNlKHZhbGlkYXRpb25FcnJvcktleSwgJy0nKSA6ICcnO1xuXG4gICAgY2FjaGVkVG9nZ2xlQ2xhc3MoY3RybCwgVkFMSURfQ0xBU1MgKyB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQgPT09IHRydWUpO1xuICAgIGNhY2hlZFRvZ2dsZUNsYXNzKGN0cmwsIElOVkFMSURfQ0xBU1MgKyB2YWxpZGF0aW9uRXJyb3JLZXksIGlzVmFsaWQgPT09IGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICBpZiAob2JqKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyogZ2xvYmFsXG4gIFZBTElEX0NMQVNTOiBmYWxzZSxcbiAgSU5WQUxJRF9DTEFTUzogZmFsc2UsXG4gIFBSSVNUSU5FX0NMQVNTOiBmYWxzZSxcbiAgRElSVFlfQ0xBU1M6IGZhbHNlLFxuICBuZ01vZGVsTWluRXJyOiBmYWxzZVxuKi9cblxuLy8gUmVnZXggY29kZSB3YXMgaW5pdGlhbGx5IG9idGFpbmVkIGZyb20gU08gcHJpb3IgdG8gbW9kaWZpY2F0aW9uOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8zMTQzMDcwL2phdmFzY3JpcHQtcmVnZXgtaXNvLWRhdGV0aW1lI2Fuc3dlci0zMTQzMjMxXG52YXIgSVNPX0RBVEVfUkVHRVhQID0gL15cXGR7NCx9LVswMV1cXGQtWzAtM11cXGRUWzAtMl1cXGQ6WzAtNV1cXGQ6WzAtNV1cXGRcXC5cXGQrKD86WystXVswLTJdXFxkOlswLTVdXFxkfFopJC87XG4vLyBTZWUgdmFsaWQgVVJMcyBpbiBSRkMzOTg3IChodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzOTg3KVxuLy8gTm90ZTogV2UgYXJlIGJlaW5nIG1vcmUgbGVuaWVudCwgYmVjYXVzZSBicm93c2VycyBhcmUgdG9vLlxuLy8gICAxLiBTY2hlbWVcbi8vICAgMi4gU2xhc2hlc1xuLy8gICAzLiBVc2VybmFtZVxuLy8gICA0LiBQYXNzd29yZFxuLy8gICA1LiBIb3N0bmFtZVxuLy8gICA2LiBQb3J0XG4vLyAgIDcuIFBhdGhcbi8vICAgOC4gUXVlcnlcbi8vICAgOS4gRnJhZ21lbnRcbi8vICAgICAgICAgICAgICAgICAxMTExMTExMTExMTExMTExIDIyMiAgIDMzMzMzMyAgICA0NDQ0NCAgICAgICAgNTU1NTU1NTU1NTU1NTU1NTU1NTU1NTUgICAgIDY2NiAgICAgNzc3Nzc3NzcgICAgIDg4ODg4ODggICAgIDk5OVxudmFyIFVSTF9SRUdFWFAgPSAvXlthLXpdW2EtelxcZC4rLV0qOlxcLyooPzpbXjpAXSsoPzo6W15AXSspP0ApPyg/OlteXFxzOi8/I10rfFxcW1thLWZcXGQ6XStdKSg/OjpcXGQrKT8oPzpcXC9bXj8jXSopPyg/OlxcP1teI10qKT8oPzojLiopPyQvaTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtbGVuXG52YXIgRU1BSUxfUkVHRVhQID0gL14oPz0uezEsMjU0fSQpKD89LnsxLDY0fUApWy0hIyQlJicqKy8wLTk9P0EtWl5fYGEtent8fX5dKyhcXC5bLSEjJCUmJyorLzAtOT0/QS1aXl9gYS16e3x9fl0rKSpAW0EtWmEtejAtOV0oW0EtWmEtejAtOS1dezAsNjF9W0EtWmEtejAtOV0pPyhcXC5bQS1aYS16MC05XShbQS1aYS16MC05LV17MCw2MX1bQS1aYS16MC05XSk/KSokLztcbnZhciBOVU1CRVJfUkVHRVhQID0gL15cXHMqKC18XFwrKT8oXFxkK3woXFxkKihcXC5cXGQqKSkpKFtlRV1bKy1dP1xcZCspP1xccyokLztcbnZhciBEQVRFX1JFR0VYUCA9IC9eKFxcZHs0LH0pLShcXGR7Mn0pLShcXGR7Mn0pJC87XG52YXIgREFURVRJTUVMT0NBTF9SRUdFWFAgPSAvXihcXGR7NCx9KS0oXFxkXFxkKS0oXFxkXFxkKVQoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKShcXC5cXGR7MSwzfSk/KT8kLztcbnZhciBXRUVLX1JFR0VYUCA9IC9eKFxcZHs0LH0pLVcoXFxkXFxkKSQvO1xudmFyIE1PTlRIX1JFR0VYUCA9IC9eKFxcZHs0LH0pLShcXGRcXGQpJC87XG52YXIgVElNRV9SRUdFWFAgPSAvXihcXGRcXGQpOihcXGRcXGQpKD86OihcXGRcXGQpKFxcLlxcZHsxLDN9KT8pPyQvO1xuXG52YXIgUEFSVElBTF9WQUxJREFUSU9OX0VWRU5UUyA9ICdrZXlkb3duIHdoZWVsIG1vdXNlZG93bic7XG52YXIgUEFSVElBTF9WQUxJREFUSU9OX1RZUEVTID0gY3JlYXRlTWFwKCk7XG5mb3JFYWNoKCdkYXRlLGRhdGV0aW1lLWxvY2FsLG1vbnRoLHRpbWUsd2Vlaycuc3BsaXQoJywnKSwgZnVuY3Rpb24odHlwZSkge1xuICBQQVJUSUFMX1ZBTElEQVRJT05fVFlQRVNbdHlwZV0gPSB0cnVlO1xufSk7XG5cbnZhciBpbnB1dFR5cGUgPSB7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFt0ZXh0XVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU3RhbmRhcmQgSFRNTCB0ZXh0IGlucHV0IHdpdGggYW5ndWxhciBkYXRhIGJpbmRpbmcsIGluaGVyaXRlZCBieSBtb3N0IG9mIHRoZSBgaW5wdXRgIGVsZW1lbnRzLlxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gICAqICAgIG1pbmxlbmd0aC5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICAgKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2ZcbiAgICogICAgYW55IGxlbmd0aC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBwYXR0ZXJuIFNpbWlsYXIgdG8gYG5nUGF0dGVybmAgZXhjZXB0IHRoYXQgdGhlIGF0dHJpYnV0ZSB2YWx1ZSBpcyB0aGUgYWN0dWFsIHN0cmluZ1xuICAgKiAgICB0aGF0IGNvbnRhaW5zIHRoZSByZWd1bGFyIGV4cHJlc3Npb24gYm9keSB0aGF0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgcmVndWxhciBleHByZXNzaW9uXG4gICAqICAgIGFzIGluIHRoZSBuZ1BhdHRlcm4gZGlyZWN0aXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlICR2aWV3VmFsdWV9XG4gICAqICAgIGRvZXMgbm90IG1hdGNoIGEgUmVnRXhwIGZvdW5kIGJ5IGV2YWx1YXRpbmcgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGUgYXR0cmlidXRlIHZhbHVlLlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwXG4gICAqICAgIGFmdGVyIHdyYXBwaW5nIGl0IGluIGBeYCBhbmQgYCRgIGNoYXJhY3RlcnMuIEZvciBpbnN0YW5jZSwgYFwiYWJjXCJgIHdpbGwgYmUgY29udmVydGVkIHRvXG4gICAqICAgIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC48YnIgLz5cbiAgICogICAgKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAgICogICAgc3RhcnQgYXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHNlYXJjaCdzIG1hdGNoLCB0aHVzIG5vdCB0YWtpbmcgdGhlIHdob2xlIGlucHV0IHZhbHVlIGludG9cbiAgICogICAgYWNjb3VudC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbj19IFtuZ1RyaW09dHJ1ZV0gSWYgc2V0IHRvIGZhbHNlIEFuZ3VsYXIgd2lsbCBub3QgYXV0b21hdGljYWxseSB0cmltIHRoZSBpbnB1dC5cbiAgICogICAgVGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZCBmb3IgaW5wdXRbdHlwZT1wYXNzd29yZF0gY29udHJvbHMsIHdoaWNoIHdpbGwgbmV2ZXIgdHJpbSB0aGVcbiAgICogICAgaW5wdXQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwidGV4dC1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJ0ZXh0SW5wdXRFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgndGV4dElucHV0RXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgICAgICAgdGV4dDogJ2d1ZXN0JyxcbiAgICAgICAgICAgICAgICAgd29yZDogL15cXHMqXFx3KlxccyokL1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPlNpbmdsZSB3b3JkOlxuICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS50ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgbmctcGF0dGVybj1cImV4YW1wbGUud29yZFwiIHJlcXVpcmVkIG5nLXRyaW09XCJmYWxzZVwiPlxuICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5wYXR0ZXJuXCI+XG4gICAgICAgICAgICAgICBTaW5nbGUgd29yZCBvbmx5ITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgIDxjb2RlPnRleHQgPSB7e2V4YW1wbGUudGV4dH19PC9jb2RlPjxici8+XG4gICAgICAgICAgIDxjb2RlPm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvY29kZT48YnIvPlxuICAgICAgICAgICA8Y29kZT5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L2NvZGU+PGJyLz5cbiAgICAgICAgICAgPGNvZGU+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC9jb2RlPjxici8+XG4gICAgICAgICAgIDxjb2RlPm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC9jb2RlPjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICB2YXIgdGV4dCA9IGVsZW1lbnQoYnkuYmluZGluZygnZXhhbXBsZS50ZXh0JykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnRleHQnKSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9Db250YWluKCdndWVzdCcpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9FcXVhbCgndGV4dCA9Jyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgbXVsdGkgd29yZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdoZWxsbyB3b3JsZCcpO1xuXG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIDwvZmlsZT5cbiAgICAgIDwvZXhhbXBsZT5cbiAgICovXG4gICd0ZXh0JzogdGV4dElucHV0VHlwZSxcblxuICAgIC8qKlxuICAgICAqIEBuZ2RvYyBpbnB1dFxuICAgICAqIEBuYW1lIGlucHV0W2RhdGVdXG4gICAgICpcbiAgICAgKiBAZGVzY3JpcHRpb25cbiAgICAgKiBJbnB1dCB3aXRoIGRhdGUgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAgICogdGhlIEhUTUw1IGRhdGUgaW5wdXQsIGEgdGV4dCBlbGVtZW50IHdpbGwgYmUgdXNlZC4gSW4gdGhhdCBjYXNlLCB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAgICogZGF0ZSBmb3JtYXQgKHl5eXktTU0tZGQpLCBmb3IgZXhhbXBsZTogYDIwMDktMDEtMDZgLiBTaW5jZSBtYW55XG4gICAgICogbW9kZXJuIGJyb3dzZXJzIGRvIG5vdCB5ZXQgc3VwcG9ydCB0aGlzIGlucHV0IHR5cGUsIGl0IGlzIGltcG9ydGFudCB0byBwcm92aWRlIGN1ZXMgdG8gdXNlcnMgb24gdGhlXG4gICAgICogZXhwZWN0ZWQgaW5wdXQgZm9ybWF0IHZpYSBhIHBsYWNlaG9sZGVyIG9yIGxhYmVsLlxuICAgICAqXG4gICAgICogVGhlIG1vZGVsIG11c3QgYWx3YXlzIGJlIGEgRGF0ZSBvYmplY3QsIG90aGVyd2lzZSBBbmd1bGFyIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICAqXG4gICAgICogVGhlIHRpbWV6b25lIHRvIGJlIHVzZWQgdG8gcmVhZC93cml0ZSB0aGUgYERhdGVgIGluc3RhbmNlIGluIHRoZSBtb2RlbCBjYW4gYmUgZGVmaW5lZCB1c2luZ1xuICAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLiBUaGlzIG11c3QgYmUgYVxuICAgICAqICAgdmFsaWQgSVNPIGRhdGUgc3RyaW5nICh5eXl5LU1NLWRkKS4gWW91IGNhbiBhbHNvIHVzZSBpbnRlcnBvbGF0aW9uIGluc2lkZSB0aGlzIGF0dHJpYnV0ZVxuICAgICAqICAgKGUuZy4gYG1pbj1cInt7bWluRGF0ZSB8IGRhdGU6J3l5eXktTU0tZGQnfX1cImApLiBOb3RlIHRoYXQgYG1pbmAgd2lsbCBhbHNvIGFkZCBuYXRpdmUgSFRNTDVcbiAgICAgKiAgIGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuIFRoaXMgbXVzdCBiZVxuICAgICAqICAgYSB2YWxpZCBJU08gZGF0ZSBzdHJpbmcgKHl5eXktTU0tZGQpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXMgYXR0cmlidXRlXG4gICAgICogICAoZS5nLiBgbWF4PVwie3ttYXhEYXRlIHwgZGF0ZToneXl5eS1NTS1kZCd9fVwiYCkuIE5vdGUgdGhhdCBgbWF4YCB3aWxsIGFsc28gYWRkIG5hdGl2ZSBIVE1MNVxuICAgICAqICAgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyBkYXRlIHN0cmluZ1xuICAgICAqICAgdGhlIGBuZ01pbmAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtaW5gIGF0dHJpYnV0ZS5cbiAgICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8gdGhlIERhdGUgLyBJU08gZGF0ZSBzdHJpbmdcbiAgICAgKiAgIHRoZSBgbmdNYXhgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWF4YCBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgIDxleGFtcGxlIG5hbWU9XCJkYXRlLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImRhdGVJbnB1dEV4YW1wbGVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdkYXRlSW5wdXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAuY29udHJvbGxlcignRGF0ZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMjAxMywgOSwgMjIpXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgICAgIDxsYWJlbCBmb3I9XCJleGFtcGxlSW5wdXRcIj5QaWNrIGEgZGF0ZSBpbiAyMDEzOjwvbGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJkYXRlXCIgaWQ9XCJleGFtcGxlSW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cInl5eXktTU0tZGRcIiBtaW49XCIyMDEzLTAxLTAxXCIgbWF4PVwiMjAxMy0xMi0zMVwiIHJlcXVpcmVkIC8+XG4gICAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5kYXRlXCI+XG4gICAgICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+XG4gICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU0tZGRcIn19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiR2YWxpZCA9IHt7bXlGb3JtLmlucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgICA8dHQ+bXlGb3JtLiRlcnJvci5yZXF1aXJlZCA9IHt7ISFteUZvcm0uJGVycm9yLnJlcXVpcmVkfX08L3R0Pjxici8+XG4gICAgICAgPC9mb3JtPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NLWRkXCInKSk7XG4gICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcblxuICAgICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAgIC8vIGZvciB2YXJpb3VzIGJyb3dzZXJzIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgICAgZnVuY3Rpb24gc2V0SW5wdXQodmFsKSB7XG4gICAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgICAgXCJpcHQudmFsdWUgPSAnXCIgKyB2YWwgKyBcIic7XCIgK1xuICAgICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMy0xMC0yMicpO1xuICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgc2V0SW5wdXQoJycpO1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgICB9KTtcblxuICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMS0wMScpO1xuICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgICAgPC9leGFtcGxlPlxuICAgICAqL1xuICAnZGF0ZSc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ2RhdGUnLCBEQVRFX1JFR0VYUCxcbiAgICAgICAgIGNyZWF0ZURhdGVQYXJzZXIoREFURV9SRUdFWFAsIFsneXl5eScsICdNTScsICdkZCddKSxcbiAgICAgICAgICd5eXl5LU1NLWRkJyksXG5cbiAgIC8qKlxuICAgICogQG5nZG9jIGlucHV0XG4gICAgKiBAbmFtZSBpbnB1dFtkYXRldGltZS1sb2NhbF1cbiAgICAqXG4gICAgKiBAZGVzY3JpcHRpb25cbiAgICAqIElucHV0IHdpdGggZGF0ZXRpbWUgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAgKiB0aGUgSFRNTDUgZGF0ZSBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAgKiBsb2NhbCBkYXRldGltZSBmb3JtYXQgKHl5eXktTU0tZGRUSEg6bW06c3MpLCBmb3IgZXhhbXBsZTogYDIwMTAtMTItMjhUMTQ6NTc6MDBgLlxuICAgICpcbiAgICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICpcbiAgICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICAqXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuXG4gICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyBkYXRldGltZSBmb3JtYXQgKHl5eXktTU0tZGRUSEg6bW06c3MpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb25cbiAgICAqICAgaW5zaWRlIHRoaXMgYXR0cmlidXRlIChlLmcuIGBtaW49XCJ7e21pbkRhdGV0aW1lTG9jYWwgfCBkYXRlOid5eXl5LU1NLWRkVEhIOm1tOnNzJ319XCJgKS5cbiAgICAqICAgTm90ZSB0aGF0IGBtaW5gIHdpbGwgYWxzbyBhZGQgbmF0aXZlIEhUTUw1IGNvbnN0cmFpbnQgdmFsaWRhdGlvbi5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXIgdGhhbiBgbWF4YC5cbiAgICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIGRhdGV0aW1lIGZvcm1hdCAoeXl5eS1NTS1kZFRISDptbTpzcykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvblxuICAgICogICBpbnNpZGUgdGhpcyBhdHRyaWJ1dGUgKGUuZy4gYG1heD1cInt7bWF4RGF0ZXRpbWVMb2NhbCB8IGRhdGU6J3l5eXktTU0tZGRUSEg6bW06c3MnfX1cImApLlxuICAgICogICBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZCBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgICogQHBhcmFtIHsoZGF0ZXxzdHJpbmcpPX0gbmdNaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgdG8gdGhlIERhdGUgLyBJU08gZGF0ZXRpbWUgc3RyaW5nXG4gICAgKiAgIHRoZSBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSB0byB0aGUgRGF0ZSAvIElTTyBkYXRldGltZSBzdHJpbmdcbiAgICAqICAgdGhlIGBuZ01heGAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtYXhgIGF0dHJpYnV0ZS5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICpcbiAgICAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cImRhdGV0aW1lbG9jYWwtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwiZGF0ZUV4YW1wbGVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPHNjcmlwdD5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2RhdGVFeGFtcGxlJywgW10pXG4gICAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS5leGFtcGxlID0ge1xuICAgICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMjAxMCwgMTEsIDI4LCAxNCwgNTcpXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1dKTtcbiAgICAgIDwvc2NyaXB0PlxuICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJEYXRlQ29udHJvbGxlciBhcyBkYXRlQ3RybFwiPlxuICAgICAgICA8bGFiZWwgZm9yPVwiZXhhbXBsZUlucHV0XCI+UGljayBhIGRhdGUgYmV0d2VlbiBpbiAyMDEzOjwvbGFiZWw+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBpZD1cImV4YW1wbGVJbnB1dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS52YWx1ZVwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cInl5eXktTU0tZGRUSEg6bW06c3NcIiBtaW49XCIyMDAxLTAxLTAxVDAwOjAwOjAwXCIgbWF4PVwiMjAxMy0xMi0zMVQwMDowMDowMFwiIHJlcXVpcmVkIC8+XG4gICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IuZGF0ZXRpbWVsb2NhbFwiPlxuICAgICAgICAgICAgICBOb3QgYSB2YWxpZCBkYXRlITwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDx0dD52YWx1ZSA9IHt7ZXhhbXBsZS52YWx1ZSB8IGRhdGU6IFwieXl5eS1NTS1kZFRISDptbTpzc1wifX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NLWRkVEhIOm1tOnNzXCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG5cbiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgIH1cblxuICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMC0xMi0yOFQxNDo1NzowMCcpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMS0wMVQyMzo1OTowMCcpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAgICAqL1xuICAnZGF0ZXRpbWUtbG9jYWwnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdkYXRldGltZWxvY2FsJywgREFURVRJTUVMT0NBTF9SRUdFWFAsXG4gICAgICBjcmVhdGVEYXRlUGFyc2VyKERBVEVUSU1FTE9DQUxfUkVHRVhQLCBbJ3l5eXknLCAnTU0nLCAnZGQnLCAnSEgnLCAnbW0nLCAnc3MnLCAnc3NzJ10pLFxuICAgICAgJ3l5eXktTU0tZGRUSEg6bW06c3Muc3NzJyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFt0aW1lXVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSW5wdXQgd2l0aCB0aW1lIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLiBJbiBicm93c2VycyB0aGF0IGRvIG5vdCB5ZXQgc3VwcG9ydFxuICAgKiB0aGUgSFRNTDUgdGltZSBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAqIGxvY2FsIHRpbWUgZm9ybWF0IChISDptbTpzcyksIGZvciBleGFtcGxlOiBgMTQ6NTc6MDBgLiBNb2RlbCBtdXN0IGJlIGEgRGF0ZSBvYmplY3QuIFRoaXMgYmluZGluZyB3aWxsIGFsd2F5cyBvdXRwdXQgYVxuICAgKiBEYXRlIG9iamVjdCB0byB0aGUgbW9kZWwgb2YgSmFudWFyeSAxLCAxOTcwLCBvciBsb2NhbCBkYXRlIGBuZXcgRGF0ZSgxOTcwLCAwLCAxLCBISCwgbW0sIHNzKWAuXG4gICAqXG4gICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAqXG4gICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxuICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyB0aW1lIGZvcm1hdCAoSEg6bW06c3MpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1pbj1cInt7bWluVGltZSB8IGRhdGU6J0hIOm1tOnNzJ319XCJgKS4gTm90ZSB0aGF0IGBtaW5gIHdpbGwgYWxzbyBhZGRcbiAgICogICBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIHRpbWUgZm9ybWF0IChISDptbTpzcykuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpc1xuICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWF4PVwie3ttYXhUaW1lIHwgZGF0ZTonSEg6bW06c3MnfX1cImApLiBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZFxuICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB0aW1lIHN0cmluZyB0aGVcbiAgICogICBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB0aW1lIHN0cmluZyB0aGVcbiAgICogICBgbmdNYXhgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWF4YCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJ0aW1lLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cInRpbWVFeGFtcGxlXCI+XG4gICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICA8c2NyaXB0PlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ3RpbWVFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMTk3MCwgMCwgMSwgMTQsIDU3LCAwKVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICAgPC9zY3JpcHQ+XG4gICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICAgPGxhYmVsIGZvcj1cImV4YW1wbGVJbnB1dFwiPlBpY2sgYSB0aW1lIGJldHdlZW4gOGFtIGFuZCA1cG06PC9sYWJlbD5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0aW1lXCIgaWQ9XCJleGFtcGxlSW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJISDptbTpzc1wiIG1pbj1cIjA4OjAwOjAwXCIgbWF4PVwiMTc6MDA6MDBcIiByZXF1aXJlZCAvPlxuICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnRpbWVcIj5cbiAgICAgICAgICAgICAgTm90IGEgdmFsaWQgZGF0ZSE8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcIkhIOm1tOnNzXCJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICA8L2Zvcm0+XG4gICA8L2ZpbGU+XG4gICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICB2YXIgdmFsdWUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcIkhIOm1tOnNzXCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG5cbiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgIH1cblxuICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMTQ6NTc6MDAnKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gdHJ1ZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdteUZvcm0uaW5wdXQuJHZhbGlkID0gZmFsc2UnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgb3ZlciBtYXgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJzIzOjU5OjAwJyk7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignJyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICB9KTtcbiAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAgICovXG4gICd0aW1lJzogY3JlYXRlRGF0ZUlucHV0VHlwZSgndGltZScsIFRJTUVfUkVHRVhQLFxuICAgICAgY3JlYXRlRGF0ZVBhcnNlcihUSU1FX1JFR0VYUCwgWydISCcsICdtbScsICdzcycsICdzc3MnXSksXG4gICAgICdISDptbTpzcy5zc3MnKSxcblxuICAgLyoqXG4gICAgKiBAbmdkb2MgaW5wdXRcbiAgICAqIEBuYW1lIGlucHV0W3dlZWtdXG4gICAgKlxuICAgICogQGRlc2NyaXB0aW9uXG4gICAgKiBJbnB1dCB3aXRoIHdlZWstb2YtdGhlLXllYXIgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24gdG8gRGF0ZS4gSW4gYnJvd3NlcnMgdGhhdCBkbyBub3QgeWV0IHN1cHBvcnRcbiAgICAqIHRoZSBIVE1MNSB3ZWVrIGlucHV0LCBhIHRleHQgZWxlbWVudCB3aWxsIGJlIHVzZWQuIEluIHRoYXQgY2FzZSwgdGhlIHRleHQgbXVzdCBiZSBlbnRlcmVkIGluIGEgdmFsaWQgSVNPLTg2MDFcbiAgICAqIHdlZWsgZm9ybWF0ICh5eXl5LVcjIyksIGZvciBleGFtcGxlOiBgMjAxMy1XMDJgLlxuICAgICpcbiAgICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgICogSW52YWxpZCBgRGF0ZWAgb2JqZWN0cyAoZGF0ZXMgd2hvc2UgYGdldFRpbWUoKWAgaXMgYE5hTmApIHdpbGwgYmUgcmVuZGVyZWQgYXMgYW4gZW1wdHkgc3RyaW5nLlxuICAgICpcbiAgICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdNb2RlbE9wdGlvbnMgbmdNb2RlbE9wdGlvbnN9LiBCeSBkZWZhdWx0LCB0aGlzIGlzIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3Nlci5cbiAgICAqXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBsZXNzIHRoYW4gYG1pbmAuXG4gICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyB3ZWVrIGZvcm1hdCAoeXl5eS1XIyMpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICAqICAgYXR0cmlidXRlIChlLmcuIGBtaW49XCJ7e21pbldlZWsgfCBkYXRlOid5eXl5LVd3dyd9fVwiYCkuIE5vdGUgdGhhdCBgbWluYCB3aWxsIGFsc28gYWRkXG4gICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyB3ZWVrIGZvcm1hdCAoeXl5eS1XIyMpLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICAqICAgYXR0cmlidXRlIChlLmcuIGBtYXg9XCJ7e21heFdlZWsgfCBkYXRlOid5eXl5LVd3dyd9fVwiYCkuIE5vdGUgdGhhdCBgbWF4YCB3aWxsIGFsc28gYWRkXG4gICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAgKiBAcGFyYW0geyhkYXRlfHN0cmluZyk9fSBuZ01pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG8gdGhlIERhdGUgLyBJU08gd2VlayBzdHJpbmdcbiAgICAqICAgdGhlIGBuZ01pbmAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8uIE5vdGUgdGhhdCBpdCBkb2VzIG5vdCBzZXQgdGhlIGBtaW5gIGF0dHJpYnV0ZS5cbiAgICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB3ZWVrIHN0cmluZ1xuICAgICogICB0aGUgYG5nTWF4YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0by4gTm90ZSB0aGF0IGl0IGRvZXMgbm90IHNldCB0aGUgYG1heGAgYXR0cmlidXRlLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAgKlxuICAgICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwid2Vlay1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJ3ZWVrRXhhbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8c2NyaXB0PlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ3dlZWtFeGFtcGxlJywgW10pXG4gICAgICAgIC5jb250cm9sbGVyKCdEYXRlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICB2YWx1ZTogbmV3IERhdGUoMjAxMywgMCwgMylcbiAgICAgICAgICB9O1xuICAgICAgICB9XSk7XG4gICAgICA8L3NjcmlwdD5cbiAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICAgPGxhYmVsPlBpY2sgYSBkYXRlIGJldHdlZW4gaW4gMjAxMzpcbiAgICAgICAgICA8aW5wdXQgaWQ9XCJleGFtcGxlSW5wdXRcIiB0eXBlPVwid2Vla1wiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS52YWx1ZVwiXG4gICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiWVlZWS1XIyNcIiBtaW49XCIyMDEyLVczMlwiXG4gICAgICAgICAgICAgICAgIG1heD1cIjIwMTMtVzUyXCIgcmVxdWlyZWQgLz5cbiAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPGRpdiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci53ZWVrXCI+XG4gICAgICAgICAgICAgIE5vdCBhIHZhbGlkIGRhdGUhPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPHR0PnZhbHVlID0ge3tleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LVd3d1wifX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LVd3d1wiJykpO1xuICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuXG4gICAgICAvLyBjdXJyZW50bHkgcHJvdHJhY3Rvci93ZWJkcml2ZXIgZG9lcyBub3Qgc3VwcG9ydFxuICAgICAgLy8gc2VuZGluZyBrZXlzIHRvIGFsbCBrbm93biBIVE1MNSBpbnB1dCBjb250cm9sc1xuICAgICAgLy8gZm9yIHZhcmlvdXMgYnJvd3NlcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL3Byb3RyYWN0b3IvaXNzdWVzLzU2MikuXG4gICAgICBmdW5jdGlvbiBzZXRJbnB1dCh2YWwpIHtcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudCBhbmQgZm9yY2UgdmFsaWRhdGlvbi5cbiAgICAgICAgdmFyIHNjciA9IFwidmFyIGlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleGFtcGxlSW5wdXQnKTsgXCIgK1xuICAgICAgICBcImlwdC52YWx1ZSA9ICdcIiArIHZhbCArIFwiJztcIiArXG4gICAgICAgIFwiYW5ndWxhci5lbGVtZW50KGlwdCkuc2NvcGUoKS4kYXBwbHkoZnVuY3Rpb24ocykgeyBzLm15Rm9ybVtpcHQubmFtZV0uJHNldFZpZXdWYWx1ZSgnXCIgKyB2YWwgKyBcIicpOyB9KTtcIjtcbiAgICAgICAgYnJvd3Nlci5leGVjdXRlU2NyaXB0KHNjcik7XG4gICAgICB9XG5cbiAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzIwMTMtVzAxJyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IHRydWUnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0SW5wdXQoJycpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0VxdWFsKCd2YWx1ZSA9Jyk7XG4gICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignbXlGb3JtLmlucHV0LiR2YWxpZCA9IGZhbHNlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG92ZXIgbWF4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcyMDE1LVcwMScpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAgICAqL1xuICAnd2Vlayc6IGNyZWF0ZURhdGVJbnB1dFR5cGUoJ3dlZWsnLCBXRUVLX1JFR0VYUCwgd2Vla1BhcnNlciwgJ3l5eXktV3d3JyksXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFttb250aF1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIElucHV0IHdpdGggbW9udGggdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIEluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHlldCBzdXBwb3J0XG4gICAqIHRoZSBIVE1MNSBtb250aCBpbnB1dCwgYSB0ZXh0IGVsZW1lbnQgd2lsbCBiZSB1c2VkLiBJbiB0aGF0IGNhc2UsIHRoZSB0ZXh0IG11c3QgYmUgZW50ZXJlZCBpbiBhIHZhbGlkIElTTy04NjAxXG4gICAqIG1vbnRoIGZvcm1hdCAoeXl5eS1NTSksIGZvciBleGFtcGxlOiBgMjAwOS0wMWAuXG4gICAqXG4gICAqIFRoZSBtb2RlbCBtdXN0IGFsd2F5cyBiZSBhIERhdGUgb2JqZWN0LCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKiBJbnZhbGlkIGBEYXRlYCBvYmplY3RzIChkYXRlcyB3aG9zZSBgZ2V0VGltZSgpYCBpcyBgTmFOYCkgd2lsbCBiZSByZW5kZXJlZCBhcyBhbiBlbXB0eSBzdHJpbmcuXG4gICAqIElmIHRoZSBtb2RlbCBpcyBub3Qgc2V0IHRvIHRoZSBmaXJzdCBvZiB0aGUgbW9udGgsIHRoZSBuZXh0IHZpZXcgdG8gbW9kZWwgdXBkYXRlIHdpbGwgc2V0IGl0XG4gICAqIHRvIHRoZSBmaXJzdCBvZiB0aGUgbW9udGguXG4gICAqXG4gICAqIFRoZSB0aW1lem9uZSB0byBiZSB1c2VkIHRvIHJlYWQvd3JpdGUgdGhlIGBEYXRlYCBpbnN0YW5jZSBpbiB0aGUgbW9kZWwgY2FuIGJlIGRlZmluZWQgdXNpbmdcbiAgICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30uIEJ5IGRlZmF1bHQsIHRoaXMgaXMgdGhlIHRpbWV6b25lIG9mIHRoZSBicm93c2VyLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtaW4gU2V0cyB0aGUgYG1pbmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgbGVzcyB0aGFuIGBtaW5gLlxuICAgKiAgIFRoaXMgbXVzdCBiZSBhIHZhbGlkIElTTyBtb250aCBmb3JtYXQgKHl5eXktTU0pLiBZb3UgY2FuIGFsc28gdXNlIGludGVycG9sYXRpb24gaW5zaWRlIHRoaXNcbiAgICogICBhdHRyaWJ1dGUgKGUuZy4gYG1pbj1cInt7bWluTW9udGggfCBkYXRlOid5eXl5LU1NJ319XCJgKS4gTm90ZSB0aGF0IGBtaW5gIHdpbGwgYWxzbyBhZGRcbiAgICogICBuYXRpdmUgSFRNTDUgY29uc3RyYWludCB2YWxpZGF0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG1heGAuXG4gICAqICAgVGhpcyBtdXN0IGJlIGEgdmFsaWQgSVNPIG1vbnRoIGZvcm1hdCAoeXl5eS1NTSkuIFlvdSBjYW4gYWxzbyB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgdGhpc1xuICAgKiAgIGF0dHJpYnV0ZSAoZS5nLiBgbWF4PVwie3ttYXhNb250aCB8IGRhdGU6J3l5eXktTU0nfX1cImApLiBOb3RlIHRoYXQgYG1heGAgd2lsbCBhbHNvIGFkZFxuICAgKiAgIG5hdGl2ZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24uXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB3ZWVrIHN0cmluZ1xuICAgKiAgIHRoZSBgbmdNaW5gIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWluYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7KGRhdGV8c3RyaW5nKT19IG5nTWF4IFNldHMgdGhlIGBtYXhgIHZhbGlkYXRpb24gY29uc3RyYWludCB0byB0aGUgRGF0ZSAvIElTTyB3ZWVrIHN0cmluZ1xuICAgKiAgIHRoZSBgbmdNYXhgIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvLiBOb3RlIHRoYXQgaXQgZG9lcyBub3Qgc2V0IHRoZSBgbWF4YCBhdHRyaWJ1dGUuXG5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nUmVxdWlyZWQgQWRkcyBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBhbmQgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGNvbnN0cmFpbnQgdG9cbiAgICogICAgdGhlIGVsZW1lbnQgd2hlbiB0aGUgbmdSZXF1aXJlZCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byB0cnVlLiBVc2UgYG5nUmVxdWlyZWRgIGluc3RlYWQgb2ZcbiAgICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm1vbnRoLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cIm1vbnRoRXhhbXBsZVwiPlxuICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgPHNjcmlwdD5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdtb250aEV4YW1wbGUnLCBbXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0RhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUuZXhhbXBsZSA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgRGF0ZSgyMDEzLCA5LCAxKVxuICAgICAgICAgIH07XG4gICAgICAgIH1dKTtcbiAgICAgPC9zY3JpcHQ+XG4gICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRGF0ZUNvbnRyb2xsZXIgYXMgZGF0ZUN0cmxcIj5cbiAgICAgICA8bGFiZWwgZm9yPVwiZXhhbXBsZUlucHV0XCI+UGljayBhIG1vbnRoIGluIDIwMTM6PC9sYWJlbD5cbiAgICAgICA8aW5wdXQgaWQ9XCJleGFtcGxlSW5wdXRcIiB0eXBlPVwibW9udGhcIiBuYW1lPVwiaW5wdXRcIiBuZy1tb2RlbD1cImV4YW1wbGUudmFsdWVcIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwieXl5eS1NTVwiIG1pbj1cIjIwMTMtMDFcIiBtYXg9XCIyMDEzLTEyXCIgcmVxdWlyZWQgLz5cbiAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICA8c3BhbiBjbGFzcz1cImVycm9yXCIgbmctc2hvdz1cIm15Rm9ybS5pbnB1dC4kZXJyb3IubW9udGhcIj5cbiAgICAgICAgICAgIE5vdCBhIHZhbGlkIG1vbnRoITwvc3Bhbj5cbiAgICAgICA8L2Rpdj5cbiAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWUgfCBkYXRlOiBcInl5eXktTU1cIn19PC90dD48YnIvPlxuICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICA8dHQ+bXlGb3JtLiR2YWxpZCA9IHt7bXlGb3JtLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgPC9mb3JtPlxuICAgPC9maWxlPlxuICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlIHwgZGF0ZTogXCJ5eXl5LU1NXCInKSk7XG4gICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5pbnB1dC4kdmFsaWQnKSk7XG5cbiAgICAgIC8vIGN1cnJlbnRseSBwcm90cmFjdG9yL3dlYmRyaXZlciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAvLyBzZW5kaW5nIGtleXMgdG8gYWxsIGtub3duIEhUTUw1IGlucHV0IGNvbnRyb2xzXG4gICAgICAvLyBmb3IgdmFyaW91cyBicm93c2VycyAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9pc3N1ZXMvNTYyKS5cbiAgICAgIGZ1bmN0aW9uIHNldElucHV0KHZhbCkge1xuICAgICAgICAvLyBzZXQgdGhlIHZhbHVlIG9mIHRoZSBlbGVtZW50IGFuZCBmb3JjZSB2YWxpZGF0aW9uLlxuICAgICAgICB2YXIgc2NyID0gXCJ2YXIgaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2V4YW1wbGVJbnB1dCcpOyBcIiArXG4gICAgICAgIFwiaXB0LnZhbHVlID0gJ1wiICsgdmFsICsgXCInO1wiICtcbiAgICAgICAgXCJhbmd1bGFyLmVsZW1lbnQoaXB0KS5zY29wZSgpLiRhcHBseShmdW5jdGlvbihzKSB7IHMubXlGb3JtW2lwdC5uYW1lXS4kc2V0Vmlld1ZhbHVlKCdcIiArIHZhbCArIFwiJyk7IH0pO1wiO1xuICAgICAgICBicm93c2VyLmV4ZWN1dGVTY3JpcHQoc2NyKTtcbiAgICAgIH1cblxuICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvQ29udGFpbignMjAxMy0xMCcpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSB0cnVlJyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNldElucHV0KCcnKTtcbiAgICAgICAgZXhwZWN0KHZhbHVlLmdldFRleHQoKSkudG9FcXVhbCgndmFsdWUgPScpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZXRJbnB1dCgnMjAxNS0wMScpO1xuICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJycpO1xuICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ215Rm9ybS5pbnB1dC4kdmFsaWQgPSBmYWxzZScpO1xuICAgICAgfSk7XG4gICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gICAqL1xuICAnbW9udGgnOiBjcmVhdGVEYXRlSW5wdXRUeXBlKCdtb250aCcsIE1PTlRIX1JFR0VYUCxcbiAgICAgY3JlYXRlRGF0ZVBhcnNlcihNT05USF9SRUdFWFAsIFsneXl5eScsICdNTSddKSxcbiAgICAgJ3l5eXktTU0nKSxcblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W251bWJlcl1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFRleHQgaW5wdXQgd2l0aCBudW1iZXIgdmFsaWRhdGlvbiBhbmQgdHJhbnNmb3JtYXRpb24uIFNldHMgdGhlIGBudW1iZXJgIHZhbGlkYXRpb25cbiAgICogZXJyb3IgaWYgbm90IGEgdmFsaWQgbnVtYmVyLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiBUaGUgbW9kZWwgbXVzdCBhbHdheXMgYmUgb2YgdHlwZSBgbnVtYmVyYCBvdGhlcndpc2UgQW5ndWxhciB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgKiBCZSBhd2FyZSB0aGF0IGEgc3RyaW5nIGNvbnRhaW5pbmcgYSBudW1iZXIgaXMgbm90IGVub3VnaC4gU2VlIHRoZSB7QGxpbmsgbmdNb2RlbDpudW1mbXR9XG4gICAqIGVycm9yIGRvY3MgZm9yIG1vcmUgaW5mb3JtYXRpb24gYW5kIGFuIGV4YW1wbGUgb2YgaG93IHRvIGNvbnZlcnQgeW91ciBtb2RlbCBpZiBuZWNlc3NhcnkuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiAjIyBJc3N1ZXMgd2l0aCBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb25cbiAgICpcbiAgICogSW4gYnJvd3NlcnMgdGhhdCBmb2xsb3cgdGhlXG4gICAqIFtIVE1MNSBzcGVjaWZpY2F0aW9uXShodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI251bWJlci1zdGF0ZS0lMjh0eXBlPW51bWJlciUyOSksXG4gICAqIGBpbnB1dFtudW1iZXJdYCBkb2VzIG5vdCB3b3JrIGFzIGV4cGVjdGVkIHdpdGgge0BsaW5rIG5nTW9kZWxPcHRpb25zIGBuZ01vZGVsT3B0aW9ucy5hbGxvd0ludmFsaWRgfS5cbiAgICogSWYgYSBub24tbnVtYmVyIGlzIGVudGVyZWQgaW4gdGhlIGlucHV0LCB0aGUgYnJvd3NlciB3aWxsIHJlcG9ydCB0aGUgdmFsdWUgYXMgYW4gZW1wdHkgc3RyaW5nLFxuICAgKiB3aGljaCBtZWFucyB0aGUgdmlldyAvIG1vZGVsIHZhbHVlcyBpbiBgbmdNb2RlbGAgYW5kIHN1YnNlcXVlbnRseSB0aGUgc2NvcGUgdmFsdWVcbiAgICogd2lsbCBhbHNvIGJlIGFuIGVtcHR5IHN0cmluZy5cbiAgICpcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbWluIFNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWluYC5cbiAgICogICAgQ2FuIGJlIGludGVycG9sYXRlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBtYXggU2V0cyB0aGUgYG1heGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgaXMgZ3JlYXRlciB0aGFuIGBtYXhgLlxuICAgKiAgICBDYW4gYmUgaW50ZXJwb2xhdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nTWluIExpa2UgYG1pbmAsIHNldHMgdGhlIGBtaW5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbmdNaW5gLFxuICAgKiAgICBidXQgZG9lcyBub3QgdHJpZ2dlciBIVE1MNSBuYXRpdmUgdmFsaWRhdGlvbi4gVGFrZXMgYW4gZXhwcmVzc2lvbi5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ01heCBMaWtlIGBtYXhgLCBzZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBpcyBncmVhdGVyIHRoYW4gYG5nTWF4YCxcbiAgICogICAgYnV0IGRvZXMgbm90IHRyaWdnZXIgSFRNTDUgbmF0aXZlIHZhbGlkYXRpb24uIFRha2VzIGFuIGV4cHJlc3Npb24uXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gc3RlcCBTZXRzIHRoZSBgc3RlcGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGVudGVyZWQgZG9lcyBub3QgZml0IHRoZSBgc3RlcGAgY29uc3RyYWludC5cbiAgICogICAgQ2FuIGJlIGludGVycG9sYXRlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1N0ZXAgTGlrZSBgc3RlcGAsIHNldHMgdGhlIGBzdGVwYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgZW50ZXJlZCBkb2VzIG5vdCBmaXQgdGhlIGBuZ1N0ZXBgIGNvbnN0cmFpbnQsXG4gICAqICAgIGJ1dCBkb2VzIG5vdCB0cmlnZ2VyIEhUTUw1IG5hdGl2ZSB2YWxpZGF0aW9uLiBUYWtlcyBhbiBleHByZXNzaW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cbiAgICogICAgbWlubGVuZ3RoLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gICAqICAgIG1heGxlbmd0aC4gU2V0dGluZyB0aGUgYXR0cmlidXRlIHRvIGEgbmVnYXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIGFsbG93cyB2aWV3IHZhbHVlcyBvZlxuICAgKiAgICBhbnkgbGVuZ3RoLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHBhdHRlcm4gU2ltaWxhciB0byBgbmdQYXR0ZXJuYCBleGNlcHQgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlIGlzIHRoZSBhY3R1YWwgc3RyaW5nXG4gICAqICAgIHRoYXQgY29udGFpbnMgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBib2R5IHRoYXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSByZWd1bGFyIGV4cHJlc3Npb25cbiAgICogICAgYXMgaW4gdGhlIG5nUGF0dGVybiBkaXJlY3RpdmUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgJHZpZXdWYWx1ZX1cbiAgICogICAgZG9lcyBub3QgbWF0Y2ggYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAgICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAgICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICAgKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICAgKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICAgKiAgICBhY2NvdW50LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJudW1iZXItaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwibnVtYmVyRXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ251bWJlckV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmV4YW1wbGUgPSB7XG4gICAgICAgICAgICAgICAgIHZhbHVlOiAxMlxuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPk51bWJlcjpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwiZXhhbXBsZS52YWx1ZVwiXG4gICAgICAgICAgICAgICAgICAgIG1pbj1cIjBcIiBtYXg9XCI5OVwiIHJlcXVpcmVkPlxuICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLm51bWJlclwiPlxuICAgICAgICAgICAgICAgTm90IHZhbGlkIG51bWJlciE8L3NwYW4+XG4gICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICA8dHQ+dmFsdWUgPSB7e2V4YW1wbGUudmFsdWV9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kZXJyb3IgPSB7e215Rm9ybS5pbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHZhbHVlID0gZWxlbWVudChieS5iaW5kaW5nKCdleGFtcGxlLnZhbHVlJykpO1xuICAgICAgICAgIHZhciB2YWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmlucHV0LiR2YWxpZCcpKTtcbiAgICAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdleGFtcGxlLnZhbHVlJykpO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzEyJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBlbXB0eScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcnKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBvdmVyIG1heCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcxMjMnKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZS5nZXRUZXh0KCkpLnRvRXF1YWwoJ3ZhbHVlID0nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ251bWJlcic6IG51bWJlcklucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbdXJsXVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGV4dCBpbnB1dCB3aXRoIFVSTCB2YWxpZGF0aW9uLiBTZXRzIHRoZSBgdXJsYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgY29udGVudCBpcyBub3QgYVxuICAgKiB2YWxpZCBVUkwuXG4gICAqXG4gICAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gICAqICoqTm90ZToqKiBgaW5wdXRbdXJsXWAgdXNlcyBhIHJlZ2V4IHRvIHZhbGlkYXRlIHVybHMgdGhhdCBpcyBkZXJpdmVkIGZyb20gdGhlIHJlZ2V4XG4gICAqIHVzZWQgaW4gQ2hyb21pdW0uIElmIHlvdSBuZWVkIHN0cmljdGVyIHZhbGlkYXRpb24sIHlvdSBjYW4gdXNlIGBuZy1wYXR0ZXJuYCBvciBtb2RpZnlcbiAgICogdGhlIGJ1aWx0LWluIHZhbGlkYXRvcnMgKHNlZSB0aGUge0BsaW5rIGd1aWRlL2Zvcm1zIEZvcm1zIGd1aWRlfSlcbiAgICogPC9kaXY+XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIGByZXF1aXJlZGAgYXR0cmlidXRlIGFuZCBgcmVxdWlyZWRgIHZhbGlkYXRpb24gY29uc3RyYWludCB0b1xuICAgKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICAgKiAgICBgcmVxdWlyZWRgIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZS5cbiAgICogQHBhcmFtIHtudW1iZXI9fSBuZ01pbmxlbmd0aCBTZXRzIGBtaW5sZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBzaG9ydGVyIHRoYW5cbiAgICogICAgbWlubGVuZ3RoLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gICAqICAgIG1heGxlbmd0aC4gU2V0dGluZyB0aGUgYXR0cmlidXRlIHRvIGEgbmVnYXRpdmUgb3Igbm9uLW51bWVyaWMgdmFsdWUsIGFsbG93cyB2aWV3IHZhbHVlcyBvZlxuICAgKiAgICBhbnkgbGVuZ3RoLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHBhdHRlcm4gU2ltaWxhciB0byBgbmdQYXR0ZXJuYCBleGNlcHQgdGhhdCB0aGUgYXR0cmlidXRlIHZhbHVlIGlzIHRoZSBhY3R1YWwgc3RyaW5nXG4gICAqICAgIHRoYXQgY29udGFpbnMgdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBib2R5IHRoYXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSByZWd1bGFyIGV4cHJlc3Npb25cbiAgICogICAgYXMgaW4gdGhlIG5nUGF0dGVybiBkaXJlY3RpdmUuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdQYXR0ZXJuIFNldHMgYHBhdHRlcm5gIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSBuZ01vZGVsIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgJHZpZXdWYWx1ZX1cbiAgICogICAgZG9lcyBub3QgbWF0Y2ggYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICAgKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZW4gaXQgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYSBSZWdFeHBcbiAgICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAgICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICAgKiAgICAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICAgKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICAgKiAgICBhY2NvdW50LlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIGlucHV0IGNoYW5nZXMgZHVlIHRvIHVzZXJcbiAgICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJ1cmwtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwidXJsRXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3VybEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLnVybCA9IHtcbiAgICAgICAgICAgICAgICAgdGV4dDogJ2h0dHA6Ly9nb29nbGUuY29tJ1xuICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPlVSTDpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInVybFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1vZGVsPVwidXJsLnRleHRcIiByZXF1aXJlZD5cbiAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZFwiPlxuICAgICAgICAgICAgICAgUmVxdWlyZWQhPC9zcGFuPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci51cmxcIj5cbiAgICAgICAgICAgICAgIE5vdCB2YWxpZCB1cmwhPC9zcGFuPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgPHR0PnRleHQgPSB7e3VybC50ZXh0fX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJHZhbGlkID0ge3tteUZvcm0uaW5wdXQuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uaW5wdXQuJGVycm9yID0ge3tteUZvcm0uaW5wdXQuJGVycm9yfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IudXJsID0ge3shIW15Rm9ybS4kZXJyb3IudXJsfX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICAgICB2YXIgdGV4dCA9IGVsZW1lbnQoYnkuYmluZGluZygndXJsLnRleHQnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VybC50ZXh0JykpO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvQ29udGFpbignaHR0cDovL2dvb2dsZS5jb20nKTtcbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpbnB1dC5jbGVhcigpO1xuICAgICAgICAgICAgaW5wdXQuc2VuZEtleXMoJycpO1xuXG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCB1cmwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnYm94Jyk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3VybCc6IHVybElucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbZW1haWxdXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBUZXh0IGlucHV0IHdpdGggZW1haWwgdmFsaWRhdGlvbi4gU2V0cyB0aGUgYGVtYWlsYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiBub3QgYSB2YWxpZCBlbWFpbFxuICAgKiBhZGRyZXNzLlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICAgKiAqKk5vdGU6KiogYGlucHV0W2VtYWlsXWAgdXNlcyBhIHJlZ2V4IHRvIHZhbGlkYXRlIGVtYWlsIGFkZHJlc3NlcyB0aGF0IGlzIGRlcml2ZWQgZnJvbSB0aGUgcmVnZXhcbiAgICogdXNlZCBpbiBDaHJvbWl1bS4gSWYgeW91IG5lZWQgc3RyaWN0ZXIgdmFsaWRhdGlvbiAoZS5nLiByZXF1aXJpbmcgYSB0b3AtbGV2ZWwgZG9tYWluKSwgeW91IGNhblxuICAgKiB1c2UgYG5nLXBhdHRlcm5gIG9yIG1vZGlmeSB0aGUgYnVpbHQtaW4gdmFsaWRhdG9ycyAoc2VlIHRoZSB7QGxpbmsgZ3VpZGUvZm9ybXMgRm9ybXMgZ3VpZGV9KVxuICAgKiA8L2Rpdj5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gICAqICAgIHRoZSBlbGVtZW50IHdoZW4gdGhlIG5nUmVxdWlyZWQgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gdHJ1ZS4gVXNlIGBuZ1JlcXVpcmVkYCBpbnN0ZWFkIG9mXG4gICAqICAgIGByZXF1aXJlZGAgd2hlbiB5b3Ugd2FudCB0byBkYXRhLWJpbmQgdG8gdGhlIGByZXF1aXJlZGAgYXR0cmlidXRlLlxuICAgKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICAgKiAgICBtaW5sZW5ndGguXG4gICAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNYXhsZW5ndGggU2V0cyBgbWF4bGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbG9uZ2VyIHRoYW5cbiAgICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mXG4gICAqICAgIGFueSBsZW5ndGguXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gcGF0dGVybiBTaW1pbGFyIHRvIGBuZ1BhdHRlcm5gIGV4Y2VwdCB0aGF0IHRoZSBhdHRyaWJ1dGUgdmFsdWUgaXMgdGhlIGFjdHVhbCBzdHJpbmdcbiAgICogICAgdGhhdCBjb250YWlucyB0aGUgcmVndWxhciBleHByZXNzaW9uIGJvZHkgdGhhdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgKiAgICBhcyBpbiB0aGUgbmdQYXR0ZXJuIGRpcmVjdGl2ZS5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIG5nTW9kZWwge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZSAkdmlld1ZhbHVlfVxuICAgKiAgICBkb2VzIG5vdCBtYXRjaCBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gICAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICAgKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICAgKiAgICBgbmV3IFJlZ0V4cCgnXmFiYyQnKWAuPGJyIC8+XG4gICAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gICAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gICAqICAgIGFjY291bnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICAgKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgICAgPGV4YW1wbGUgbmFtZT1cImVtYWlsLWlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImVtYWlsRXhhbXBsZVwiPlxuICAgICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2VtYWlsRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICAkc2NvcGUuZW1haWwgPSB7XG4gICAgICAgICAgICAgICAgIHRleHQ6ICdtZUBleGFtcGxlLmNvbSdcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgICA8bGFiZWw+RW1haWw6XG4gICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImVtYWlsXCIgbmFtZT1cImlucHV0XCIgbmctbW9kZWw9XCJlbWFpbC50ZXh0XCIgcmVxdWlyZWQ+XG4gICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmlucHV0LiRlcnJvci5lbWFpbFwiPlxuICAgICAgICAgICAgICAgICBOb3QgdmFsaWQgZW1haWwhPC9zcGFuPlxuICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgIDx0dD50ZXh0ID0ge3tlbWFpbC50ZXh0fX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS5pbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5pbnB1dC4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgICA8dHQ+bXlGb3JtLmlucHV0LiRlcnJvciA9IHt7bXlGb3JtLmlucHV0LiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uJHZhbGlkID0ge3tteUZvcm0uJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICAgICAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLmVtYWlsID0ge3shIW15Rm9ybS4kZXJyb3IuZW1haWx9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHRleHQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2VtYWlsLnRleHQnKSk7XG4gICAgICAgICAgdmFyIHZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0uaW5wdXQuJHZhbGlkJykpO1xuICAgICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ2VtYWlsLnRleHQnKSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGV4cGVjdCh0ZXh0LmdldFRleHQoKSkudG9Db250YWluKCdtZUBleGFtcGxlLmNvbScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIGJlIGludmFsaWQgaWYgZW1wdHknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnJyk7XG4gICAgICAgICAgICBleHBlY3QodGV4dC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3RleHQgPScpO1xuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIG5vdCBlbWFpbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCd4eHgnKTtcblxuICAgICAgICAgICAgZXhwZWN0KHZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAnZW1haWwnOiBlbWFpbElucHV0VHlwZSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgaW5wdXRcbiAgICogQG5hbWUgaW5wdXRbcmFkaW9dXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBIVE1MIHJhZGlvIGJ1dHRvbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgVGhlIHZhbHVlIHRvIHdoaWNoIHRoZSBgbmdNb2RlbGAgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gc2VsZWN0ZWQuXG4gICAqICAgIE5vdGUgdGhhdCBgdmFsdWVgIG9ubHkgc3VwcG9ydHMgYHN0cmluZ2AgdmFsdWVzLCBpLmUuIHRoZSBzY29wZSBtb2RlbCBuZWVkcyB0byBiZSBhIHN0cmluZyxcbiAgICogICAgdG9vLiBVc2UgYG5nVmFsdWVgIGlmIHlvdSBuZWVkIGNvbXBsZXggbW9kZWxzIChgbnVtYmVyYCwgYG9iamVjdGAsIC4uLikuXG4gICAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZ1ZhbHVlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byB3aGljaCBgbmdNb2RlbGAgd2lsbCBiZSBiZSBzZXQgd2hlbiB0aGUgcmFkaW9cbiAgICogICAgaXMgc2VsZWN0ZWQuIFNob3VsZCBiZSB1c2VkIGluc3RlYWQgb2YgdGhlIGB2YWx1ZWAgYXR0cmlidXRlIGlmIHlvdSBuZWVkXG4gICAqICAgIGEgbm9uLXN0cmluZyBgbmdNb2RlbGAgKGBib29sZWFuYCwgYGFycmF5YCwgLi4uKS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJyYWRpby1pbnB1dC1kaXJlY3RpdmVcIiBtb2R1bGU9XCJyYWRpb0V4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdyYWRpb0V4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgJHNjb3BlLmNvbG9yID0ge1xuICAgICAgICAgICAgICAgICBuYW1lOiAnYmx1ZSdcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAkc2NvcGUuc3BlY2lhbFZhbHVlID0ge1xuICAgICAgICAgICAgICAgICBcImlkXCI6IFwiMTIzNDVcIixcbiAgICAgICAgICAgICAgICAgXCJ2YWx1ZVwiOiBcImdyZWVuXCJcbiAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgfV0pO1xuICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmctbW9kZWw9XCJjb2xvci5uYW1lXCIgdmFsdWU9XCJyZWRcIj5cbiAgICAgICAgICAgICBSZWRcbiAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3IubmFtZVwiIG5nLXZhbHVlPVwic3BlY2lhbFZhbHVlXCI+XG4gICAgICAgICAgICAgR3JlZW5cbiAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5nLW1vZGVsPVwiY29sb3IubmFtZVwiIHZhbHVlPVwiYmx1ZVwiPlxuICAgICAgICAgICAgIEJsdWVcbiAgICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgICA8dHQ+Y29sb3IgPSB7e2NvbG9yLm5hbWUgfCBqc29ufX08L3R0Pjxici8+XG4gICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgIE5vdGUgdGhhdCBgbmctdmFsdWU9XCJzcGVjaWFsVmFsdWVcImAgc2V0cyByYWRpbyBpdGVtJ3MgdmFsdWUgdG8gYmUgdGhlIHZhbHVlIG9mIGAkc2NvcGUuc3BlY2lhbFZhbHVlYC5cbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2Ugc3RhdGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpbnB1dHMgPSBlbGVtZW50LmFsbChieS5tb2RlbCgnY29sb3IubmFtZScpKTtcbiAgICAgICAgICAgIHZhciBjb2xvciA9IGVsZW1lbnQoYnkuYmluZGluZygnY29sb3IubmFtZScpKTtcblxuICAgICAgICAgICAgZXhwZWN0KGNvbG9yLmdldFRleHQoKSkudG9Db250YWluKCdibHVlJyk7XG5cbiAgICAgICAgICAgIGlucHV0cy5nZXQoMCkuY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xvci5nZXRUZXh0KCkpLnRvQ29udGFpbigncmVkJyk7XG5cbiAgICAgICAgICAgIGlucHV0cy5nZXQoMSkuY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChjb2xvci5nZXRUZXh0KCkpLnRvQ29udGFpbignZ3JlZW4nKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuICAgKi9cbiAgJ3JhZGlvJzogcmFkaW9JbnB1dFR5cGUsXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBpbnB1dFxuICAgKiBAbmFtZSBpbnB1dFtyYW5nZV1cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIE5hdGl2ZSByYW5nZSBpbnB1dCB3aXRoIHZhbGlkYXRpb24gYW5kIHRyYW5zZm9ybWF0aW9uLlxuICAgKlxuICAgKiBUaGUgbW9kZWwgZm9yIHRoZSByYW5nZSBpbnB1dCBtdXN0IGFsd2F5cyBiZSBhIGBOdW1iZXJgLlxuICAgKlxuICAgKiBJRTkgYW5kIG90aGVyIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgdGhlIGByYW5nZWAgdHlwZSBmYWxsIGJhY2tcbiAgICogdG8gYSB0ZXh0IGlucHV0IHdpdGhvdXQgYW55IGRlZmF1bHQgdmFsdWVzIGZvciBgbWluYCwgYG1heGAgYW5kIGBzdGVwYC4gTW9kZWwgYmluZGluZyxcbiAgICogdmFsaWRhdGlvbiBhbmQgbnVtYmVyIHBhcnNpbmcgYXJlIG5ldmVydGhlbGVzcyBzdXBwb3J0ZWQuXG4gICAqXG4gICAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCByYW5nZSAobGF0ZXN0IENocm9tZSwgU2FmYXJpLCBGaXJlZm94LCBFZGdlKSB0cmVhdCBgaW5wdXRbcmFuZ2VdYFxuICAgKiBpbiBhIHdheSB0aGF0IG5ldmVyIGFsbG93cyB0aGUgaW5wdXQgdG8gaG9sZCBhbiBpbnZhbGlkIHZhbHVlLiBUaGF0IG1lYW5zOlxuICAgKiAtIGFueSBub24tbnVtZXJpY2FsIHZhbHVlIGlzIHNldCB0byBgKG1heCArIG1pbikgLyAyYC5cbiAgICogLSBhbnkgbnVtZXJpY2FsIHZhbHVlIHRoYXQgaXMgbGVzcyB0aGFuIHRoZSBjdXJyZW50IG1pbiB2YWwsIG9yIGdyZWF0ZXIgdGhhbiB0aGUgY3VycmVudCBtYXggdmFsXG4gICAqIGlzIHNldCB0byB0aGUgbWluIC8gbWF4IHZhbCByZXNwZWN0aXZlbHkuXG4gICAqIC0gYWRkaXRpb25hbGx5LCB0aGUgY3VycmVudCBgc3RlcGAgaXMgcmVzcGVjdGVkLCBzbyB0aGUgbmVhcmVzdCB2YWx1ZSB0aGF0IHNhdGlzZmllcyBhIHN0ZXBcbiAgICogaXMgdXNlZC5cbiAgICpcbiAgICogU2VlIHRoZSBbSFRNTCBTcGVjIG9uIGlucHV0W3R5cGU9cmFuZ2VdXShodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvZm9ybXMuaHRtbCNyYW5nZS1zdGF0ZS0odHlwZT1yYW5nZSkpXG4gICAqIGZvciBtb3JlIGluZm8uXG4gICAqXG4gICAqIFRoaXMgaGFzIHRoZSBmb2xsb3dpbmcgY29uc2VxdWVuY2VzIGZvciBBbmd1bGFyOlxuICAgKlxuICAgKiBTaW5jZSB0aGUgZWxlbWVudCB2YWx1ZSBzaG91bGQgYWx3YXlzIHJlZmxlY3QgdGhlIGN1cnJlbnQgbW9kZWwgdmFsdWUsIGEgcmFuZ2UgaW5wdXRcbiAgICogd2lsbCBzZXQgdGhlIGJvdW5kIG5nTW9kZWwgZXhwcmVzc2lvbiB0byB0aGUgdmFsdWUgdGhhdCB0aGUgYnJvd3NlciBoYXMgc2V0IGZvciB0aGVcbiAgICogaW5wdXQgZWxlbWVudC4gRm9yIGV4YW1wbGUsIGluIHRoZSBmb2xsb3dpbmcgaW5wdXQgYDxpbnB1dCB0eXBlPVwicmFuZ2VcIiBuZy1tb2RlbD1cIm1vZGVsLnZhbHVlXCI+YCxcbiAgICogaWYgdGhlIGFwcGxpY2F0aW9uIHNldHMgYG1vZGVsLnZhbHVlID0gbnVsbGAsIHRoZSBicm93c2VyIHdpbGwgc2V0IHRoZSBpbnB1dCB0byBgJzUwJ2AuXG4gICAqIEFuZ3VsYXIgd2lsbCB0aGVuIHNldCB0aGUgbW9kZWwgdG8gYDUwYCwgdG8gcHJldmVudCBpbnB1dCBhbmQgbW9kZWwgdmFsdWUgYmVpbmcgb3V0IG9mIHN5bmMuXG4gICAqXG4gICAqIFRoYXQgbWVhbnMgdGhlIG1vZGVsIGZvciByYW5nZSB3aWxsIGltbWVkaWF0ZWx5IGJlIHNldCB0byBgNTBgIGFmdGVyIGBuZ01vZGVsYCBoYXMgYmVlblxuICAgKiBpbml0aWFsaXplZC4gSXQgYWxzbyBtZWFucyBhIHJhbmdlIGlucHV0IGNhbiBuZXZlciBoYXZlIHRoZSByZXF1aXJlZCBlcnJvci5cbiAgICpcbiAgICogVGhpcyBkb2VzIG5vdCBvbmx5IGFmZmVjdCBjaGFuZ2VzIHRvIHRoZSBtb2RlbCB2YWx1ZSwgYnV0IGFsc28gdG8gdGhlIHZhbHVlcyBvZiB0aGUgYG1pbmAsXG4gICAqIGBtYXhgLCBhbmQgYHN0ZXBgIGF0dHJpYnV0ZXMuIFdoZW4gdGhlc2UgY2hhbmdlIGluIGEgd2F5IHRoYXQgd2lsbCBjYXVzZSB0aGUgYnJvd3NlciB0byBtb2RpZnlcbiAgICogdGhlIGlucHV0IHZhbHVlLCBBbmd1bGFyIHdpbGwgYWxzbyB1cGRhdGUgdGhlIG1vZGVsIHZhbHVlLlxuICAgKlxuICAgKiBBdXRvbWF0aWMgdmFsdWUgYWRqdXN0bWVudCBhbHNvIG1lYW5zIHRoYXQgYSByYW5nZSBpbnB1dCBlbGVtZW50IGNhbiBuZXZlciBoYXZlIHRoZSBgcmVxdWlyZWRgLFxuICAgKiBgbWluYCwgb3IgYG1heGAgZXJyb3JzLlxuICAgKlxuICAgKiBIb3dldmVyLCBgc3RlcGAgaXMgY3VycmVudGx5IG9ubHkgZnVsbHkgaW1wbGVtZW50ZWQgYnkgRmlyZWZveC4gT3RoZXIgYnJvd3NlcnMgaGF2ZSBwcm9ibGVtc1xuICAgKiB3aGVuIHRoZSBzdGVwIHZhbHVlIGNoYW5nZXMgZHluYW1pY2FsbHkgLSB0aGV5IGRvIG5vdCBhZGp1c3QgdGhlIGVsZW1lbnQgdmFsdWUgY29ycmVjdGx5LCBidXRcbiAgICogaW5zdGVhZCBtYXkgc2V0IHRoZSBgc3RlcE1pc21hdGNoYCBlcnJvci4gSWYgdGhhdCdzIHRoZSBjYXNlLCB0aGUgQW5ndWxhciB3aWxsIHNldCB0aGUgYHN0ZXBgXG4gICAqIGVycm9yIG9uIHRoZSBpbnB1dCwgYW5kIHNldCB0aGUgbW9kZWwgdG8gYHVuZGVmaW5lZGAuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBgaW5wdXRbcmFuZ2VdYCBpcyBub3QgY29tcGF0aWJsZSB3aXRoYG5nTWF4YCwgYG5nTWluYCwgYW5kIGBuZ1N0ZXBgLCBiZWNhdXNlIHRoZXkgZG9cbiAgICogbm90IHNldCB0aGUgYG1pbmAgYW5kIGBtYXhgIGF0dHJpYnV0ZXMsIHdoaWNoIG1lYW5zIHRoYXQgdGhlIGJyb3dzZXIgd29uJ3QgYXV0b21hdGljYWxseSBhZGp1c3RcbiAgICogdGhlIGlucHV0IHZhbHVlIGJhc2VkIG9uIHRoZWlyIHZhbHVlcywgYW5kIHdpbGwgYWx3YXlzIGFzc3VtZSBtaW4gPSAwLCBtYXggPSAxMDAsIGFuZCBzdGVwID0gMS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9ICBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1pbiBTZXRzIHRoZSBgbWluYCB2YWxpZGF0aW9uIHRvIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGdyZWF0ZXJcbiAgICogICAgICAgICAgICAgICAgICB0aGFuIGBtaW5gLiBDYW4gYmUgaW50ZXJwb2xhdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG1heCBTZXRzIHRoZSBgbWF4YCB2YWxpZGF0aW9uIHRvIGVuc3VyZSB0aGF0IHRoZSB2YWx1ZSBlbnRlcmVkIGlzIGxlc3MgdGhhbiBgbWF4YC5cbiAgICogICAgICAgICAgICAgICAgICBDYW4gYmUgaW50ZXJwb2xhdGVkLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IHN0ZXAgU2V0cyB0aGUgYHN0ZXBgIHZhbGlkYXRpb24gdG8gZW5zdXJlIHRoYXQgdGhlIHZhbHVlIGVudGVyZWQgbWF0Y2hlcyB0aGUgYHN0ZXBgXG4gICAqICAgICAgICAgICAgICAgICAgQ2FuIGJlIGludGVycG9sYXRlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiB0aGUgbmdNb2RlbCB2YWx1ZSBjaGFuZ2VzIGR1ZVxuICAgKiAgICAgICAgICAgICAgICAgIHRvIHVzZXIgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAgICogQHBhcmFtIHtleHByZXNzaW9uPX0gbmdDaGVja2VkIElmIHRoZSBleHByZXNzaW9uIGlzIHRydXRoeSwgdGhlbiB0aGUgYGNoZWNrZWRgIGF0dHJpYnV0ZSB3aWxsIGJlIHNldCBvbiB0aGVcbiAgICogICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC4gKipOb3RlKiogOiBgbmdDaGVja2VkYCBzaG91bGQgbm90IGJlIHVzZWQgYWxvbmdzaWRlIGBuZ01vZGVsYC5cbiAgICogICAgICAgICAgICAgICAgICAgICAgQ2hlY2tvdXQge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NoZWNrZWQgbmdDaGVja2VkfSBmb3IgdXNhZ2UuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwicmFuZ2UtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwicmFuZ2VFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdyYW5nZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUudmFsdWUgPSA3NTtcbiAgICAgICAgICAgICAgICAkc2NvcGUubWluID0gMTA7XG4gICAgICAgICAgICAgICAgJHNjb3BlLm1heCA9IDkwO1xuICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuXG4gICAgICAgICAgICBNb2RlbCBhcyByYW5nZTogPGlucHV0IHR5cGU9XCJyYW5nZVwiIG5hbWU9XCJyYW5nZVwiIG5nLW1vZGVsPVwidmFsdWVcIiBtaW49XCJ7e21pbn19XCIgIG1heD1cInt7bWF4fX1cIj5cbiAgICAgICAgICAgIDxocj5cbiAgICAgICAgICAgIE1vZGVsIGFzIG51bWJlcjogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cInZhbHVlXCI+PGJyPlxuICAgICAgICAgICAgTWluOiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwibWluXCI+PGJyPlxuICAgICAgICAgICAgTWF4OiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwibWF4XCI+PGJyPlxuICAgICAgICAgICAgdmFsdWUgPSA8Y29kZT57e3ZhbHVlfX08L2NvZGU+PGJyLz5cbiAgICAgICAgICAgIG15Rm9ybS5yYW5nZS4kdmFsaWQgPSA8Y29kZT57e215Rm9ybS5yYW5nZS4kdmFsaWR9fTwvY29kZT48YnIvPlxuICAgICAgICAgICAgbXlGb3JtLnJhbmdlLiRlcnJvciA9IDxjb2RlPnt7bXlGb3JtLnJhbmdlLiRlcnJvcn19PC9jb2RlPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuXG4gICAqICMjIFJhbmdlIElucHV0IHdpdGggbmdNaW4gJiBuZ01heCBhdHRyaWJ1dGVzXG5cbiAgICogQGV4YW1wbGVcbiAgICAgIDxleGFtcGxlIG5hbWU9XCJyYW5nZS1pbnB1dC1kaXJlY3RpdmUtbmdcIiBtb2R1bGU9XCJyYW5nZUV4YW1wbGVcIj5cbiAgICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ3JhbmdlRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICAgICRzY29wZS52YWx1ZSA9IDc1O1xuICAgICAgICAgICAgICAgICRzY29wZS5taW4gPSAxMDtcbiAgICAgICAgICAgICAgICAkc2NvcGUubWF4ID0gOTA7XG4gICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgICBNb2RlbCBhcyByYW5nZTogPGlucHV0IHR5cGU9XCJyYW5nZVwiIG5hbWU9XCJyYW5nZVwiIG5nLW1vZGVsPVwidmFsdWVcIiBuZy1taW49XCJtaW5cIiBuZy1tYXg9XCJtYXhcIj5cbiAgICAgICAgICAgIDxocj5cbiAgICAgICAgICAgIE1vZGVsIGFzIG51bWJlcjogPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cInZhbHVlXCI+PGJyPlxuICAgICAgICAgICAgTWluOiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwibWluXCI+PGJyPlxuICAgICAgICAgICAgTWF4OiA8aW5wdXQgdHlwZT1cIm51bWJlclwiIG5nLW1vZGVsPVwibWF4XCI+PGJyPlxuICAgICAgICAgICAgdmFsdWUgPSA8Y29kZT57e3ZhbHVlfX08L2NvZGU+PGJyLz5cbiAgICAgICAgICAgIG15Rm9ybS5yYW5nZS4kdmFsaWQgPSA8Y29kZT57e215Rm9ybS5yYW5nZS4kdmFsaWR9fTwvY29kZT48YnIvPlxuICAgICAgICAgICAgbXlGb3JtLnJhbmdlLiRlcnJvciA9IDxjb2RlPnt7bXlGb3JtLnJhbmdlLiRlcnJvcn19PC9jb2RlPlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9maWxlPlxuICAgICAgPC9leGFtcGxlPlxuXG4gICAqL1xuICAncmFuZ2UnOiByYW5nZUlucHV0VHlwZSxcblxuICAvKipcbiAgICogQG5nZG9jIGlucHV0XG4gICAqIEBuYW1lIGlucHV0W2NoZWNrYm94XVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogSFRNTCBjaGVja2JveC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICAgKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG5nVHJ1ZVZhbHVlIFRoZSB2YWx1ZSB0byB3aGljaCB0aGUgZXhwcmVzc2lvbiBzaG91bGQgYmUgc2V0IHdoZW4gc2VsZWN0ZWQuXG4gICAqIEBwYXJhbSB7ZXhwcmVzc2lvbj19IG5nRmFsc2VWYWx1ZSBUaGUgdmFsdWUgdG8gd2hpY2ggdGhlIGV4cHJlc3Npb24gc2hvdWxkIGJlIHNldCB3aGVuIG5vdCBzZWxlY3RlZC5cbiAgICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gICAqICAgIGludGVyYWN0aW9uIHdpdGggdGhlIGlucHV0IGVsZW1lbnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAgICA8ZXhhbXBsZSBuYW1lPVwiY2hlY2tib3gtaW5wdXQtZGlyZWN0aXZlXCIgbW9kdWxlPVwiY2hlY2tib3hFeGFtcGxlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICA8c2NyaXB0PlxuICAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgnY2hlY2tib3hFeGFtcGxlJywgW10pXG4gICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgICRzY29wZS5jaGVja2JveE1vZGVsID0ge1xuICAgICAgICAgICAgICAgIHZhbHVlMSA6IHRydWUsXG4gICAgICAgICAgICAgICAgdmFsdWUyIDogJ1lFUydcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICB9XSk7XG4gICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgICAgPGxhYmVsPlZhbHVlMTpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2JveE1vZGVsLnZhbHVlMVwiPlxuICAgICAgICAgICA8L2xhYmVsPjxici8+XG4gICAgICAgICAgIDxsYWJlbD5WYWx1ZTI6XG4gICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tib3hNb2RlbC52YWx1ZTJcIlxuICAgICAgICAgICAgICAgICAgICBuZy10cnVlLXZhbHVlPVwiJ1lFUydcIiBuZy1mYWxzZS12YWx1ZT1cIidOTydcIj5cbiAgICAgICAgICAgIDwvbGFiZWw+PGJyLz5cbiAgICAgICAgICAgPHR0PnZhbHVlMSA9IHt7Y2hlY2tib3hNb2RlbC52YWx1ZTF9fTwvdHQ+PGJyLz5cbiAgICAgICAgICAgPHR0PnZhbHVlMiA9IHt7Y2hlY2tib3hNb2RlbC52YWx1ZTJ9fTwvdHQ+PGJyLz5cbiAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgIDwvZmlsZT5cbiAgICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHN0YXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUxID0gZWxlbWVudChieS5iaW5kaW5nKCdjaGVja2JveE1vZGVsLnZhbHVlMScpKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZTIgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ2NoZWNrYm94TW9kZWwudmFsdWUyJykpO1xuXG4gICAgICAgICAgICBleHBlY3QodmFsdWUxLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUyLmdldFRleHQoKSkudG9Db250YWluKCdZRVMnKTtcblxuICAgICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnY2hlY2tib3hNb2RlbC52YWx1ZTEnKSkuY2xpY2soKTtcbiAgICAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrYm94TW9kZWwudmFsdWUyJykpLmNsaWNrKCk7XG5cbiAgICAgICAgICAgIGV4cGVjdCh2YWx1ZTEuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgICBleHBlY3QodmFsdWUyLmdldFRleHQoKSkudG9Db250YWluKCdOTycpO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICAqL1xuICAnY2hlY2tib3gnOiBjaGVja2JveElucHV0VHlwZSxcblxuICAnaGlkZGVuJzogbm9vcCxcbiAgJ2J1dHRvbic6IG5vb3AsXG4gICdzdWJtaXQnOiBub29wLFxuICAncmVzZXQnOiBub29wLFxuICAnZmlsZSc6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpIHtcbiAgY3RybC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpID8gdmFsdWUgOiB2YWx1ZS50b1N0cmluZygpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdGV4dElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIGJhc2VJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3Nlcik7XG4gIHN0cmluZ0Jhc2VkSW5wdXRUeXBlKGN0cmwpO1xufVxuXG5mdW5jdGlvbiBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgdmFyIHR5cGUgPSBsb3dlcmNhc2UoZWxlbWVudFswXS50eXBlKTtcblxuICAvLyBJbiBjb21wb3NpdGlvbiBtb2RlLCB1c2VycyBhcmUgc3RpbGwgaW5wdXR0aW5nIGludGVybWVkaWF0ZSB0ZXh0IGJ1ZmZlcixcbiAgLy8gaG9sZCB0aGUgbGlzdGVuZXIgdW50aWwgY29tcG9zaXRpb24gaXMgZG9uZS5cbiAgLy8gTW9yZSBhYm91dCBjb21wb3NpdGlvbiBldmVudHM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Db21wb3NpdGlvbkV2ZW50XG4gIGlmICghJHNuaWZmZXIuYW5kcm9pZCkge1xuICAgIHZhciBjb21wb3NpbmcgPSBmYWxzZTtcblxuICAgIGVsZW1lbnQub24oJ2NvbXBvc2l0aW9uc3RhcnQnLCBmdW5jdGlvbigpIHtcbiAgICAgIGNvbXBvc2luZyA9IHRydWU7XG4gICAgfSk7XG5cbiAgICBlbGVtZW50Lm9uKCdjb21wb3NpdGlvbmVuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgY29tcG9zaW5nID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIHRpbWVvdXQ7XG5cbiAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24oZXYpIHtcbiAgICBpZiAodGltZW91dCkge1xuICAgICAgJGJyb3dzZXIuZGVmZXIuY2FuY2VsKHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgfVxuICAgIGlmIChjb21wb3NpbmcpIHJldHVybjtcbiAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnZhbCgpLFxuICAgICAgICBldmVudCA9IGV2ICYmIGV2LnR5cGU7XG5cbiAgICAvLyBCeSBkZWZhdWx0IHdlIHdpbGwgdHJpbSB0aGUgdmFsdWVcbiAgICAvLyBJZiB0aGUgYXR0cmlidXRlIG5nLXRyaW0gZXhpc3RzIHdlIHdpbGwgYXZvaWQgdHJpbW1pbmdcbiAgICAvLyBJZiBpbnB1dCB0eXBlIGlzICdwYXNzd29yZCcsIHRoZSB2YWx1ZSBpcyBuZXZlciB0cmltbWVkXG4gICAgaWYgKHR5cGUgIT09ICdwYXNzd29yZCcgJiYgKCFhdHRyLm5nVHJpbSB8fCBhdHRyLm5nVHJpbSAhPT0gJ2ZhbHNlJykpIHtcbiAgICAgIHZhbHVlID0gdHJpbSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gSWYgYSBjb250cm9sIGlzIHN1ZmZlcmluZyBmcm9tIGJhZCBpbnB1dCAoZHVlIHRvIG5hdGl2ZSB2YWxpZGF0b3JzKSwgYnJvd3NlcnMgZGlzY2FyZCBpdHNcbiAgICAvLyB2YWx1ZSwgc28gaXQgbWF5IGJlIG5lY2Vzc2FyeSB0byByZXZhbGlkYXRlIChieSBjYWxsaW5nICRzZXRWaWV3VmFsdWUgYWdhaW4pIGV2ZW4gaWYgdGhlXG4gICAgLy8gY29udHJvbCdzIHZhbHVlIGlzIHRoZSBzYW1lIGVtcHR5IHZhbHVlIHR3aWNlIGluIGEgcm93LlxuICAgIGlmIChjdHJsLiR2aWV3VmFsdWUgIT09IHZhbHVlIHx8ICh2YWx1ZSA9PT0gJycgJiYgY3RybC4kJGhhc05hdGl2ZVZhbGlkYXRvcnMpKSB7XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUodmFsdWUsIGV2ZW50KTtcbiAgICB9XG4gIH07XG5cbiAgLy8gaWYgdGhlIGJyb3dzZXIgZG9lcyBzdXBwb3J0IFwiaW5wdXRcIiBldmVudCwgd2UgYXJlIGZpbmUgLSBleGNlcHQgb24gSUU5IHdoaWNoIGRvZXNuJ3QgZmlyZSB0aGVcbiAgLy8gaW5wdXQgZXZlbnQgb24gYmFja3NwYWNlLCBkZWxldGUgb3IgY3V0XG4gIGlmICgkc25pZmZlci5oYXNFdmVudCgnaW5wdXQnKSkge1xuICAgIGVsZW1lbnQub24oJ2lucHV0JywgbGlzdGVuZXIpO1xuICB9IGVsc2Uge1xuICAgIHZhciBkZWZlckxpc3RlbmVyID0gZnVuY3Rpb24oZXYsIGlucHV0LCBvcmlnVmFsdWUpIHtcbiAgICAgIGlmICghdGltZW91dCkge1xuICAgICAgICB0aW1lb3V0ID0gJGJyb3dzZXIuZGVmZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgaWYgKCFpbnB1dCB8fCBpbnB1dC52YWx1ZSAhPT0gb3JpZ1ZhbHVlKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcihldik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZWxlbWVudC5vbigna2V5ZG93bicsIC8qKiBAdGhpcyAqLyBmdW5jdGlvbihldmVudCkge1xuICAgICAgdmFyIGtleSA9IGV2ZW50LmtleUNvZGU7XG5cbiAgICAgIC8vIGlnbm9yZVxuICAgICAgLy8gICAgY29tbWFuZCAgICAgICAgICAgIG1vZGlmaWVycyAgICAgICAgICAgICAgICAgICBhcnJvd3NcbiAgICAgIGlmIChrZXkgPT09IDkxIHx8ICgxNSA8IGtleSAmJiBrZXkgPCAxOSkgfHwgKDM3IDw9IGtleSAmJiBrZXkgPD0gNDApKSByZXR1cm47XG5cbiAgICAgIGRlZmVyTGlzdGVuZXIoZXZlbnQsIHRoaXMsIHRoaXMudmFsdWUpO1xuICAgIH0pO1xuXG4gICAgLy8gaWYgdXNlciBtb2RpZmllcyBpbnB1dCB2YWx1ZSB1c2luZyBjb250ZXh0IG1lbnUgaW4gSUUsIHdlIG5lZWQgXCJwYXN0ZVwiIGFuZCBcImN1dFwiIGV2ZW50cyB0byBjYXRjaCBpdFxuICAgIGlmICgkc25pZmZlci5oYXNFdmVudCgncGFzdGUnKSkge1xuICAgICAgZWxlbWVudC5vbigncGFzdGUgY3V0JywgZGVmZXJMaXN0ZW5lcik7XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdXNlciBwYXN0ZSBpbnRvIGlucHV0IHVzaW5nIG1vdXNlIG9uIG9sZGVyIGJyb3dzZXJcbiAgLy8gb3IgZm9ybSBhdXRvY29tcGxldGUgb24gbmV3ZXIgYnJvd3Nlciwgd2UgbmVlZCBcImNoYW5nZVwiIGV2ZW50IHRvIGNhdGNoIGl0XG4gIGVsZW1lbnQub24oJ2NoYW5nZScsIGxpc3RlbmVyKTtcblxuICAvLyBTb21lIG5hdGl2ZSBpbnB1dCB0eXBlcyAoZGF0ZS1mYW1pbHkpIGhhdmUgdGhlIGFiaWxpdHkgdG8gY2hhbmdlIHZhbGlkaXR5IHdpdGhvdXRcbiAgLy8gZmlyaW5nIGFueSBpbnB1dC9jaGFuZ2UgZXZlbnRzLlxuICAvLyBGb3IgdGhlc2UgZXZlbnQgdHlwZXMsIHdoZW4gbmF0aXZlIHZhbGlkYXRvcnMgYXJlIHByZXNlbnQgYW5kIHRoZSBicm93c2VyIHN1cHBvcnRzIHRoZSB0eXBlLFxuICAvLyBjaGVjayBmb3IgdmFsaWRpdHkgY2hhbmdlcyBvbiB2YXJpb3VzIERPTSBldmVudHMuXG4gIGlmIChQQVJUSUFMX1ZBTElEQVRJT05fVFlQRVNbdHlwZV0gJiYgY3RybC4kJGhhc05hdGl2ZVZhbGlkYXRvcnMgJiYgdHlwZSA9PT0gYXR0ci50eXBlKSB7XG4gICAgZWxlbWVudC5vbihQQVJUSUFMX1ZBTElEQVRJT05fRVZFTlRTLCAvKiogQHRoaXMgKi8gZnVuY3Rpb24oZXYpIHtcbiAgICAgIGlmICghdGltZW91dCkge1xuICAgICAgICB2YXIgdmFsaWRpdHkgPSB0aGlzW1ZBTElESVRZX1NUQVRFX1BST1BFUlRZXTtcbiAgICAgICAgdmFyIG9yaWdCYWRJbnB1dCA9IHZhbGlkaXR5LmJhZElucHV0O1xuICAgICAgICB2YXIgb3JpZ1R5cGVNaXNtYXRjaCA9IHZhbGlkaXR5LnR5cGVNaXNtYXRjaDtcbiAgICAgICAgdGltZW91dCA9ICRicm93c2VyLmRlZmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgIGlmICh2YWxpZGl0eS5iYWRJbnB1dCAhPT0gb3JpZ0JhZElucHV0IHx8IHZhbGlkaXR5LnR5cGVNaXNtYXRjaCAhPT0gb3JpZ1R5cGVNaXNtYXRjaCkge1xuICAgICAgICAgICAgbGlzdGVuZXIoZXYpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAvLyBXb3JrYXJvdW5kIGZvciBGaXJlZm94IHZhbGlkYXRpb24gIzEyMTAyLlxuICAgIHZhciB2YWx1ZSA9IGN0cmwuJGlzRW1wdHkoY3RybC4kdmlld1ZhbHVlKSA/ICcnIDogY3RybC4kdmlld1ZhbHVlO1xuICAgIGlmIChlbGVtZW50LnZhbCgpICE9PSB2YWx1ZSkge1xuICAgICAgZWxlbWVudC52YWwodmFsdWUpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gd2Vla1BhcnNlcihpc29XZWVrLCBleGlzdGluZ0RhdGUpIHtcbiAgaWYgKGlzRGF0ZShpc29XZWVrKSkge1xuICAgIHJldHVybiBpc29XZWVrO1xuICB9XG5cbiAgaWYgKGlzU3RyaW5nKGlzb1dlZWspKSB7XG4gICAgV0VFS19SRUdFWFAubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgcGFydHMgPSBXRUVLX1JFR0VYUC5leGVjKGlzb1dlZWspO1xuICAgIGlmIChwYXJ0cykge1xuICAgICAgdmFyIHllYXIgPSArcGFydHNbMV0sXG4gICAgICAgICAgd2VlayA9ICtwYXJ0c1syXSxcbiAgICAgICAgICBob3VycyA9IDAsXG4gICAgICAgICAgbWludXRlcyA9IDAsXG4gICAgICAgICAgc2Vjb25kcyA9IDAsXG4gICAgICAgICAgbWlsbGlzZWNvbmRzID0gMCxcbiAgICAgICAgICBmaXJzdFRodXJzID0gZ2V0Rmlyc3RUaHVyc2RheU9mWWVhcih5ZWFyKSxcbiAgICAgICAgICBhZGREYXlzID0gKHdlZWsgLSAxKSAqIDc7XG5cbiAgICAgIGlmIChleGlzdGluZ0RhdGUpIHtcbiAgICAgICAgaG91cnMgPSBleGlzdGluZ0RhdGUuZ2V0SG91cnMoKTtcbiAgICAgICAgbWludXRlcyA9IGV4aXN0aW5nRGF0ZS5nZXRNaW51dGVzKCk7XG4gICAgICAgIHNlY29uZHMgPSBleGlzdGluZ0RhdGUuZ2V0U2Vjb25kcygpO1xuICAgICAgICBtaWxsaXNlY29uZHMgPSBleGlzdGluZ0RhdGUuZ2V0TWlsbGlzZWNvbmRzKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgRGF0ZSh5ZWFyLCAwLCBmaXJzdFRodXJzLmdldERhdGUoKSArIGFkZERheXMsIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBtaWxsaXNlY29uZHMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBOYU47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURhdGVQYXJzZXIocmVnZXhwLCBtYXBwaW5nKSB7XG4gIHJldHVybiBmdW5jdGlvbihpc28sIGRhdGUpIHtcbiAgICB2YXIgcGFydHMsIG1hcDtcblxuICAgIGlmIChpc0RhdGUoaXNvKSkge1xuICAgICAgcmV0dXJuIGlzbztcbiAgICB9XG5cbiAgICBpZiAoaXNTdHJpbmcoaXNvKSkge1xuICAgICAgLy8gV2hlbiBhIGRhdGUgaXMgSlNPTidpZmllZCB0byB3cmFwcyBpdHNlbGYgaW5zaWRlIG9mIGFuIGV4dHJhXG4gICAgICAvLyBzZXQgb2YgZG91YmxlIHF1b3Rlcy4gVGhpcyBtYWtlcyB0aGUgZGF0ZSBwYXJzaW5nIGNvZGUgdW5hYmxlXG4gICAgICAvLyB0byBtYXRjaCB0aGUgZGF0ZSBzdHJpbmcgYW5kIHBhcnNlIGl0IGFzIGEgZGF0ZS5cbiAgICAgIGlmIChpc28uY2hhckF0KDApID09PSAnXCInICYmIGlzby5jaGFyQXQoaXNvLmxlbmd0aCAtIDEpID09PSAnXCInKSB7XG4gICAgICAgIGlzbyA9IGlzby5zdWJzdHJpbmcoMSwgaXNvLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgaWYgKElTT19EQVRFX1JFR0VYUC50ZXN0KGlzbykpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGlzbyk7XG4gICAgICB9XG4gICAgICByZWdleHAubGFzdEluZGV4ID0gMDtcbiAgICAgIHBhcnRzID0gcmVnZXhwLmV4ZWMoaXNvKTtcblxuICAgICAgaWYgKHBhcnRzKSB7XG4gICAgICAgIHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgIGlmIChkYXRlKSB7XG4gICAgICAgICAgbWFwID0ge1xuICAgICAgICAgICAgeXl5eTogZGF0ZS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgTU06IGRhdGUuZ2V0TW9udGgoKSArIDEsXG4gICAgICAgICAgICBkZDogZGF0ZS5nZXREYXRlKCksXG4gICAgICAgICAgICBISDogZGF0ZS5nZXRIb3VycygpLFxuICAgICAgICAgICAgbW06IGRhdGUuZ2V0TWludXRlcygpLFxuICAgICAgICAgICAgc3M6IGRhdGUuZ2V0U2Vjb25kcygpLFxuICAgICAgICAgICAgc3NzOiBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC8gMTAwMFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWFwID0geyB5eXl5OiAxOTcwLCBNTTogMSwgZGQ6IDEsIEhIOiAwLCBtbTogMCwgc3M6IDAsIHNzczogMCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yRWFjaChwYXJ0cywgZnVuY3Rpb24ocGFydCwgaW5kZXgpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPCBtYXBwaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgbWFwW21hcHBpbmdbaW5kZXhdXSA9ICtwYXJ0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShtYXAueXl5eSwgbWFwLk1NIC0gMSwgbWFwLmRkLCBtYXAuSEgsIG1hcC5tbSwgbWFwLnNzIHx8IDAsIG1hcC5zc3MgKiAxMDAwIHx8IDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBOYU47XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZURhdGVJbnB1dFR5cGUodHlwZSwgcmVnZXhwLCBwYXJzZURhdGUsIGZvcm1hdCkge1xuICByZXR1cm4gZnVuY3Rpb24gZHluYW1pY0RhdGVJbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwsICRzbmlmZmVyLCAkYnJvd3NlciwgJGZpbHRlcikge1xuICAgIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCk7XG4gICAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcbiAgICB2YXIgdGltZXpvbmUgPSBjdHJsICYmIGN0cmwuJG9wdGlvbnMuZ2V0T3B0aW9uKCd0aW1lem9uZScpO1xuICAgIHZhciBwcmV2aW91c0RhdGU7XG5cbiAgICBjdHJsLiQkcGFyc2VyTmFtZSA9IHR5cGU7XG4gICAgY3RybC4kcGFyc2Vycy5wdXNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBpZiAoY3RybC4kaXNFbXB0eSh2YWx1ZSkpIHJldHVybiBudWxsO1xuICAgICAgaWYgKHJlZ2V4cC50ZXN0KHZhbHVlKSkge1xuICAgICAgICAvLyBOb3RlOiBXZSBjYW5ub3QgcmVhZCBjdHJsLiRtb2RlbFZhbHVlLCBhcyB0aGVyZSBtaWdodCBiZSBhIGRpZmZlcmVudFxuICAgICAgICAvLyBwYXJzZXIvZm9ybWF0dGVyIGluIHRoZSBwcm9jZXNzaW5nIGNoYWluIHNvIHRoYXQgdGhlIG1vZGVsXG4gICAgICAgIC8vIGNvbnRhaW5zIHNvbWUgZGlmZmVyZW50IGRhdGEgZm9ybWF0IVxuICAgICAgICB2YXIgcGFyc2VkRGF0ZSA9IHBhcnNlRGF0ZSh2YWx1ZSwgcHJldmlvdXNEYXRlKTtcbiAgICAgICAgaWYgKHRpbWV6b25lKSB7XG4gICAgICAgICAgcGFyc2VkRGF0ZSA9IGNvbnZlcnRUaW1lem9uZVRvTG9jYWwocGFyc2VkRGF0ZSwgdGltZXpvbmUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJzZWREYXRlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9KTtcblxuICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKHZhbHVlICYmICFpc0RhdGUodmFsdWUpKSB7XG4gICAgICAgIHRocm93IG5nTW9kZWxNaW5FcnIoJ2RhdGVmbXQnLCAnRXhwZWN0ZWQgYHswfWAgdG8gYmUgYSBkYXRlJywgdmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKGlzVmFsaWREYXRlKHZhbHVlKSkge1xuICAgICAgICBwcmV2aW91c0RhdGUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHByZXZpb3VzRGF0ZSAmJiB0aW1lem9uZSkge1xuICAgICAgICAgIHByZXZpb3VzRGF0ZSA9IGNvbnZlcnRUaW1lem9uZVRvTG9jYWwocHJldmlvdXNEYXRlLCB0aW1lem9uZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRmaWx0ZXIoJ2RhdGUnKSh2YWx1ZSwgZm9ybWF0LCB0aW1lem9uZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmV2aW91c0RhdGUgPSBudWxsO1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoaXNEZWZpbmVkKGF0dHIubWluKSB8fCBhdHRyLm5nTWluKSB7XG4gICAgICB2YXIgbWluVmFsO1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5taW4gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIWlzVmFsaWREYXRlKHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtaW5WYWwpIHx8IHBhcnNlRGF0ZSh2YWx1ZSkgPj0gbWluVmFsO1xuICAgICAgfTtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21pbicsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBtaW5WYWwgPSBwYXJzZU9ic2VydmVkRGF0ZVZhbHVlKHZhbCk7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZpbmVkKGF0dHIubWF4KSB8fCBhdHRyLm5nTWF4KSB7XG4gICAgICB2YXIgbWF4VmFsO1xuICAgICAgY3RybC4kdmFsaWRhdG9ycy5tYXggPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIWlzVmFsaWREYXRlKHZhbHVlKSB8fCBpc1VuZGVmaW5lZChtYXhWYWwpIHx8IHBhcnNlRGF0ZSh2YWx1ZSkgPD0gbWF4VmFsO1xuICAgICAgfTtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21heCcsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBtYXhWYWwgPSBwYXJzZU9ic2VydmVkRGF0ZVZhbHVlKHZhbCk7XG4gICAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkRGF0ZSh2YWx1ZSkge1xuICAgICAgLy8gSW52YWxpZCBEYXRlOiBnZXRUaW1lKCkgcmV0dXJucyBOYU5cbiAgICAgIHJldHVybiB2YWx1ZSAmJiAhKHZhbHVlLmdldFRpbWUgJiYgdmFsdWUuZ2V0VGltZSgpICE9PSB2YWx1ZS5nZXRUaW1lKCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlT2JzZXJ2ZWREYXRlVmFsdWUodmFsKSB7XG4gICAgICByZXR1cm4gaXNEZWZpbmVkKHZhbCkgJiYgIWlzRGF0ZSh2YWwpID8gcGFyc2VEYXRlKHZhbCkgfHwgdW5kZWZpbmVkIDogdmFsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gYmFkSW5wdXRDaGVja2VyKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsKSB7XG4gIHZhciBub2RlID0gZWxlbWVudFswXTtcbiAgdmFyIG5hdGl2ZVZhbGlkYXRpb24gPSBjdHJsLiQkaGFzTmF0aXZlVmFsaWRhdG9ycyA9IGlzT2JqZWN0KG5vZGUudmFsaWRpdHkpO1xuICBpZiAobmF0aXZlVmFsaWRhdGlvbikge1xuICAgIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgdmFyIHZhbGlkaXR5ID0gZWxlbWVudC5wcm9wKFZBTElESVRZX1NUQVRFX1BST1BFUlRZKSB8fCB7fTtcbiAgICAgIHJldHVybiB2YWxpZGl0eS5iYWRJbnB1dCB8fCB2YWxpZGl0eS50eXBlTWlzbWF0Y2ggPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBudW1iZXJGb3JtYXR0ZXJQYXJzZXIoY3RybCkge1xuICBjdHJsLiQkcGFyc2VyTmFtZSA9ICdudW1iZXInO1xuICBjdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoY3RybC4kaXNFbXB0eSh2YWx1ZSkpICAgICAgcmV0dXJuIG51bGw7XG4gICAgaWYgKE5VTUJFUl9SRUdFWFAudGVzdCh2YWx1ZSkpIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9KTtcblxuICBjdHJsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoIWN0cmwuJGlzRW1wdHkodmFsdWUpKSB7XG4gICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKCdudW1mbXQnLCAnRXhwZWN0ZWQgYHswfWAgdG8gYmUgYSBudW1iZXInLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTnVtYmVyQXR0clZhbCh2YWwpIHtcbiAgaWYgKGlzRGVmaW5lZCh2YWwpICYmICFpc051bWJlcih2YWwpKSB7XG4gICAgdmFsID0gcGFyc2VGbG9hdCh2YWwpO1xuICB9XG4gIHJldHVybiAhaXNOdW1iZXJOYU4odmFsKSA/IHZhbCA6IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gaXNOdW1iZXJJbnRlZ2VyKG51bSkge1xuICAvLyBTZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNDYzNjUzNi9ob3ctdG8tY2hlY2staWYtYS12YXJpYWJsZS1pcy1hbi1pbnRlZ2VyLWluLWphdmFzY3JpcHQjMTQ3OTQwNjZcbiAgLy8gKG1pbnVzIHRoZSBhc3N1bXB0aW9uIHRoYXQgYG51bWAgaXMgYSBudW1iZXIpXG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgcmV0dXJuIChudW0gfCAwKSA9PT0gbnVtO1xufVxuXG5mdW5jdGlvbiBjb3VudERlY2ltYWxzKG51bSkge1xuICB2YXIgbnVtU3RyaW5nID0gbnVtLnRvU3RyaW5nKCk7XG4gIHZhciBkZWNpbWFsU3ltYm9sSW5kZXggPSBudW1TdHJpbmcuaW5kZXhPZignLicpO1xuXG4gIGlmIChkZWNpbWFsU3ltYm9sSW5kZXggPT09IC0xKSB7XG4gICAgaWYgKC0xIDwgbnVtICYmIG51bSA8IDEpIHtcbiAgICAgIC8vIEl0IG1heSBiZSBpbiB0aGUgZXhwb25lbnRpYWwgbm90YXRpb24gZm9ybWF0IChgMWUtWGApXG4gICAgICB2YXIgbWF0Y2ggPSAvZS0oXFxkKykkLy5leGVjKG51bVN0cmluZyk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICByZXR1cm4gTnVtYmVyKG1hdGNoWzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIHJldHVybiBudW1TdHJpbmcubGVuZ3RoIC0gZGVjaW1hbFN5bWJvbEluZGV4IC0gMTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEZvclN0ZXAodmlld1ZhbHVlLCBzdGVwQmFzZSwgc3RlcCkge1xuICAvLyBBdCB0aGlzIHBvaW50IGBzdGVwQmFzZWAgYW5kIGBzdGVwYCBhcmUgZXhwZWN0ZWQgdG8gYmUgbm9uLU5hTiB2YWx1ZXNcbiAgLy8gYW5kIGB2aWV3VmFsdWVgIGlzIGV4cGVjdGVkIHRvIGJlIGEgdmFsaWQgc3RyaW5naWZpZWQgbnVtYmVyLlxuICB2YXIgdmFsdWUgPSBOdW1iZXIodmlld1ZhbHVlKTtcblxuICB2YXIgaXNOb25JbnRlZ2VyVmFsdWUgPSAhaXNOdW1iZXJJbnRlZ2VyKHZhbHVlKTtcbiAgdmFyIGlzTm9uSW50ZWdlclN0ZXBCYXNlID0gIWlzTnVtYmVySW50ZWdlcihzdGVwQmFzZSk7XG4gIHZhciBpc05vbkludGVnZXJTdGVwID0gIWlzTnVtYmVySW50ZWdlcihzdGVwKTtcblxuICAvLyBEdWUgdG8gbGltaXRhdGlvbnMgaW4gRmxvYXRpbmcgUG9pbnQgQXJpdGhtZXRpYyAoZS5nLiBgMC4zIC0gMC4yICE9PSAwLjFgIG9yXG4gIC8vIGAwLjUgJSAwLjEgIT09IDBgKSwgd2UgbmVlZCB0byBjb252ZXJ0IGFsbCBudW1iZXJzIHRvIGludGVnZXJzLlxuICBpZiAoaXNOb25JbnRlZ2VyVmFsdWUgfHwgaXNOb25JbnRlZ2VyU3RlcEJhc2UgfHwgaXNOb25JbnRlZ2VyU3RlcCkge1xuICAgIHZhciB2YWx1ZURlY2ltYWxzID0gaXNOb25JbnRlZ2VyVmFsdWUgPyBjb3VudERlY2ltYWxzKHZhbHVlKSA6IDA7XG4gICAgdmFyIHN0ZXBCYXNlRGVjaW1hbHMgPSBpc05vbkludGVnZXJTdGVwQmFzZSA/IGNvdW50RGVjaW1hbHMoc3RlcEJhc2UpIDogMDtcbiAgICB2YXIgc3RlcERlY2ltYWxzID0gaXNOb25JbnRlZ2VyU3RlcCA/IGNvdW50RGVjaW1hbHMoc3RlcCkgOiAwO1xuXG4gICAgdmFyIGRlY2ltYWxDb3VudCA9IE1hdGgubWF4KHZhbHVlRGVjaW1hbHMsIHN0ZXBCYXNlRGVjaW1hbHMsIHN0ZXBEZWNpbWFscyk7XG4gICAgdmFyIG11bHRpcGxpZXIgPSBNYXRoLnBvdygxMCwgZGVjaW1hbENvdW50KTtcblxuICAgIHZhbHVlID0gdmFsdWUgKiBtdWx0aXBsaWVyO1xuICAgIHN0ZXBCYXNlID0gc3RlcEJhc2UgKiBtdWx0aXBsaWVyO1xuICAgIHN0ZXAgPSBzdGVwICogbXVsdGlwbGllcjtcblxuICAgIGlmIChpc05vbkludGVnZXJWYWx1ZSkgdmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICBpZiAoaXNOb25JbnRlZ2VyU3RlcEJhc2UpIHN0ZXBCYXNlID0gTWF0aC5yb3VuZChzdGVwQmFzZSk7XG4gICAgaWYgKGlzTm9uSW50ZWdlclN0ZXApIHN0ZXAgPSBNYXRoLnJvdW5kKHN0ZXApO1xuICB9XG5cbiAgcmV0dXJuICh2YWx1ZSAtIHN0ZXBCYXNlKSAlIHN0ZXAgPT09IDA7XG59XG5cbmZ1bmN0aW9uIG51bWJlcklucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCk7XG4gIG51bWJlckZvcm1hdHRlclBhcnNlcihjdHJsKTtcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcblxuICB2YXIgbWluVmFsO1xuICB2YXIgbWF4VmFsO1xuXG4gIGlmIChpc0RlZmluZWQoYXR0ci5taW4pIHx8IGF0dHIubmdNaW4pIHtcbiAgICBjdHJsLiR2YWxpZGF0b3JzLm1pbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2YWx1ZSkgfHwgaXNVbmRlZmluZWQobWluVmFsKSB8fCB2YWx1ZSA+PSBtaW5WYWw7XG4gICAgfTtcblxuICAgIGF0dHIuJG9ic2VydmUoJ21pbicsIGZ1bmN0aW9uKHZhbCkge1xuICAgICAgbWluVmFsID0gcGFyc2VOdW1iZXJBdHRyVmFsKHZhbCk7XG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAoaXNEZWZpbmVkKGF0dHIubWF4KSB8fCBhdHRyLm5nTWF4KSB7XG4gICAgY3RybC4kdmFsaWRhdG9ycy5tYXggPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IGlzVW5kZWZpbmVkKG1heFZhbCkgfHwgdmFsdWUgPD0gbWF4VmFsO1xuICAgIH07XG5cbiAgICBhdHRyLiRvYnNlcnZlKCdtYXgnLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgIG1heFZhbCA9IHBhcnNlTnVtYmVyQXR0clZhbCh2YWwpO1xuICAgICAgLy8gVE9ETyhtYXRza28pOiBpbXBsZW1lbnQgdmFsaWRhdGVMYXRlciB0byByZWR1Y2UgbnVtYmVyIG9mIHZhbGlkYXRpb25zXG4gICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKGlzRGVmaW5lZChhdHRyLnN0ZXApIHx8IGF0dHIubmdTdGVwKSB7XG4gICAgdmFyIHN0ZXBWYWw7XG4gICAgY3RybC4kdmFsaWRhdG9ycy5zdGVwID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpIHx8IGlzVW5kZWZpbmVkKHN0ZXBWYWwpIHx8XG4gICAgICAgICAgICAgaXNWYWxpZEZvclN0ZXAodmlld1ZhbHVlLCBtaW5WYWwgfHwgMCwgc3RlcFZhbCk7XG4gICAgfTtcblxuICAgIGF0dHIuJG9ic2VydmUoJ3N0ZXAnLCBmdW5jdGlvbih2YWwpIHtcbiAgICAgIHN0ZXBWYWwgPSBwYXJzZU51bWJlckF0dHJWYWwodmFsKTtcbiAgICAgIC8vIFRPRE8obWF0c2tvKTogaW1wbGVtZW50IHZhbGlkYXRlTGF0ZXIgdG8gcmVkdWNlIG51bWJlciBvZiB2YWxpZGF0aW9uc1xuICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiByYW5nZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIGJhZElucHV0Q2hlY2tlcihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCk7XG4gIG51bWJlckZvcm1hdHRlclBhcnNlcihjdHJsKTtcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcblxuICB2YXIgc3VwcG9ydHNSYW5nZSA9IGN0cmwuJCRoYXNOYXRpdmVWYWxpZGF0b3JzICYmIGVsZW1lbnRbMF0udHlwZSA9PT0gJ3JhbmdlJyxcbiAgICAgIG1pblZhbCA9IHN1cHBvcnRzUmFuZ2UgPyAwIDogdW5kZWZpbmVkLFxuICAgICAgbWF4VmFsID0gc3VwcG9ydHNSYW5nZSA/IDEwMCA6IHVuZGVmaW5lZCxcbiAgICAgIHN0ZXBWYWwgPSBzdXBwb3J0c1JhbmdlID8gMSA6IHVuZGVmaW5lZCxcbiAgICAgIHZhbGlkaXR5ID0gZWxlbWVudFswXS52YWxpZGl0eSxcbiAgICAgIGhhc01pbkF0dHIgPSBpc0RlZmluZWQoYXR0ci5taW4pLFxuICAgICAgaGFzTWF4QXR0ciA9IGlzRGVmaW5lZChhdHRyLm1heCksXG4gICAgICBoYXNTdGVwQXR0ciA9IGlzRGVmaW5lZChhdHRyLnN0ZXApO1xuXG4gIHZhciBvcmlnaW5hbFJlbmRlciA9IGN0cmwuJHJlbmRlcjtcblxuICBjdHJsLiRyZW5kZXIgPSBzdXBwb3J0c1JhbmdlICYmIGlzRGVmaW5lZCh2YWxpZGl0eS5yYW5nZVVuZGVyZmxvdykgJiYgaXNEZWZpbmVkKHZhbGlkaXR5LnJhbmdlT3ZlcmZsb3cpID9cbiAgICAvL0Jyb3dzZXJzIHRoYXQgaW1wbGVtZW50IHJhbmdlIHdpbGwgc2V0IHRoZXNlIHZhbHVlcyBhdXRvbWF0aWNhbGx5LCBidXQgcmVhZGluZyB0aGUgYWRqdXN0ZWQgdmFsdWVzIGFmdGVyXG4gICAgLy8kcmVuZGVyIHdvdWxkIGNhdXNlIHRoZSBtaW4gLyBtYXggdmFsaWRhdG9ycyB0byBiZSBhcHBsaWVkIHdpdGggdGhlIHdyb25nIHZhbHVlXG4gICAgZnVuY3Rpb24gcmFuZ2VSZW5kZXIoKSB7XG4gICAgICBvcmlnaW5hbFJlbmRlcigpO1xuICAgICAgY3RybC4kc2V0Vmlld1ZhbHVlKGVsZW1lbnQudmFsKCkpO1xuICAgIH0gOlxuICAgIG9yaWdpbmFsUmVuZGVyO1xuXG4gIGlmIChoYXNNaW5BdHRyKSB7XG4gICAgY3RybC4kdmFsaWRhdG9ycy5taW4gPSBzdXBwb3J0c1JhbmdlID9cbiAgICAgIC8vIFNpbmNlIGFsbCBicm93c2VycyBzZXQgdGhlIGlucHV0IHRvIGEgdmFsaWQgdmFsdWUsIHdlIGRvbid0IG5lZWQgdG8gY2hlY2sgdmFsaWRpdHlcbiAgICAgIGZ1bmN0aW9uIG5vb3BNaW5WYWxpZGF0b3IoKSB7IHJldHVybiB0cnVlOyB9IDpcbiAgICAgIC8vIG5vbi1zdXBwb3J0IGJyb3dzZXJzIHZhbGlkYXRlIHRoZSBtaW4gdmFsXG4gICAgICBmdW5jdGlvbiBtaW5WYWxpZGF0b3IobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZpZXdWYWx1ZSkgfHwgaXNVbmRlZmluZWQobWluVmFsKSB8fCB2aWV3VmFsdWUgPj0gbWluVmFsO1xuICAgICAgfTtcblxuICAgIHNldEluaXRpYWxWYWx1ZUFuZE9ic2VydmVyKCdtaW4nLCBtaW5DaGFuZ2UpO1xuICB9XG5cbiAgaWYgKGhhc01heEF0dHIpIHtcbiAgICBjdHJsLiR2YWxpZGF0b3JzLm1heCA9IHN1cHBvcnRzUmFuZ2UgP1xuICAgICAgLy8gU2luY2UgYWxsIGJyb3dzZXJzIHNldCB0aGUgaW5wdXQgdG8gYSB2YWxpZCB2YWx1ZSwgd2UgZG9uJ3QgbmVlZCB0byBjaGVjayB2YWxpZGl0eVxuICAgICAgZnVuY3Rpb24gbm9vcE1heFZhbGlkYXRvcigpIHsgcmV0dXJuIHRydWU7IH0gOlxuICAgICAgLy8gbm9uLXN1cHBvcnQgYnJvd3NlcnMgdmFsaWRhdGUgdGhlIG1heCB2YWxcbiAgICAgIGZ1bmN0aW9uIG1heFZhbGlkYXRvcihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKSB8fCBpc1VuZGVmaW5lZChtYXhWYWwpIHx8IHZpZXdWYWx1ZSA8PSBtYXhWYWw7XG4gICAgICB9O1xuXG4gICAgc2V0SW5pdGlhbFZhbHVlQW5kT2JzZXJ2ZXIoJ21heCcsIG1heENoYW5nZSk7XG4gIH1cblxuICBpZiAoaGFzU3RlcEF0dHIpIHtcbiAgICBjdHJsLiR2YWxpZGF0b3JzLnN0ZXAgPSBzdXBwb3J0c1JhbmdlID9cbiAgICAgIGZ1bmN0aW9uIG5hdGl2ZVN0ZXBWYWxpZGF0b3IoKSB7XG4gICAgICAgIC8vIEN1cnJlbnRseSwgb25seSBGRiBpbXBsZW1lbnRzIHRoZSBzcGVjIG9uIHN0ZXAgY2hhbmdlIGNvcnJlY3RseSAoaS5lLiBhZGp1c3RpbmcgdGhlXG4gICAgICAgIC8vIGlucHV0IGVsZW1lbnQgdmFsdWUgdG8gYSB2YWxpZCB2YWx1ZSkuIEl0J3MgcG9zc2libGUgdGhhdCBvdGhlciBicm93c2VycyBzZXQgdGhlIHN0ZXBNaXNtYXRjaFxuICAgICAgICAvLyB2YWxpZGl0eSBlcnJvciBpbnN0ZWFkLCBzbyB3ZSBjYW4gYXQgbGVhc3QgcmVwb3J0IGFuIGVycm9yIGluIHRoYXQgY2FzZS5cbiAgICAgICAgcmV0dXJuICF2YWxpZGl0eS5zdGVwTWlzbWF0Y2g7XG4gICAgICB9IDpcbiAgICAgIC8vIG5nU3RlcCBkb2Vzbid0IHNldCB0aGUgc2V0cCBhdHRyLCBzbyB0aGUgYnJvd3NlciBkb2Vzbid0IGFkanVzdCB0aGUgaW5wdXQgdmFsdWUgYXMgc2V0dGluZyBzdGVwIHdvdWxkXG4gICAgICBmdW5jdGlvbiBzdGVwVmFsaWRhdG9yKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpIHx8IGlzVW5kZWZpbmVkKHN0ZXBWYWwpIHx8XG4gICAgICAgICAgICAgICBpc1ZhbGlkRm9yU3RlcCh2aWV3VmFsdWUsIG1pblZhbCB8fCAwLCBzdGVwVmFsKTtcbiAgICAgIH07XG5cbiAgICBzZXRJbml0aWFsVmFsdWVBbmRPYnNlcnZlcignc3RlcCcsIHN0ZXBDaGFuZ2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0SW5pdGlhbFZhbHVlQW5kT2JzZXJ2ZXIoaHRtbEF0dHJOYW1lLCBjaGFuZ2VGbikge1xuICAgIC8vIGludGVycG9sYXRlZCBhdHRyaWJ1dGVzIHNldCB0aGUgYXR0cmlidXRlIHZhbHVlIG9ubHkgYWZ0ZXIgYSBkaWdlc3QsIGJ1dCB3ZSBuZWVkIHRoZVxuICAgIC8vIGF0dHJpYnV0ZSB2YWx1ZSB3aGVuIHRoZSBpbnB1dCBpcyBmaXJzdCByZW5kZXJlZCwgc28gdGhhdCB0aGUgYnJvd3NlciBjYW4gYWRqdXN0IHRoZVxuICAgIC8vIGlucHV0IHZhbHVlIGJhc2VkIG9uIHRoZSBtaW4vbWF4IHZhbHVlXG4gICAgZWxlbWVudC5hdHRyKGh0bWxBdHRyTmFtZSwgYXR0cltodG1sQXR0ck5hbWVdKTtcbiAgICBhdHRyLiRvYnNlcnZlKGh0bWxBdHRyTmFtZSwgY2hhbmdlRm4pO1xuICB9XG5cbiAgZnVuY3Rpb24gbWluQ2hhbmdlKHZhbCkge1xuICAgIG1pblZhbCA9IHBhcnNlTnVtYmVyQXR0clZhbCh2YWwpO1xuICAgIC8vIGlnbm9yZSBjaGFuZ2VzIGJlZm9yZSBtb2RlbCBpcyBpbml0aWFsaXplZFxuICAgIGlmIChpc051bWJlck5hTihjdHJsLiRtb2RlbFZhbHVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzdXBwb3J0c1JhbmdlKSB7XG4gICAgICB2YXIgZWxWYWwgPSBlbGVtZW50LnZhbCgpO1xuICAgICAgLy8gSUUxMSBkb2Vzbid0IHNldCB0aGUgZWwgdmFsIGNvcnJlY3RseSBpZiB0aGUgbWluVmFsIGlzIGdyZWF0ZXIgdGhhbiB0aGUgZWxlbWVudCB2YWx1ZVxuICAgICAgaWYgKG1pblZhbCA+IGVsVmFsKSB7XG4gICAgICAgIGVsVmFsID0gbWluVmFsO1xuICAgICAgICBlbGVtZW50LnZhbChlbFZhbCk7XG4gICAgICB9XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoZWxWYWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWF4Q2hhbmdlKHZhbCkge1xuICAgIG1heFZhbCA9IHBhcnNlTnVtYmVyQXR0clZhbCh2YWwpO1xuICAgIC8vIGlnbm9yZSBjaGFuZ2VzIGJlZm9yZSBtb2RlbCBpcyBpbml0aWFsaXplZFxuICAgIGlmIChpc051bWJlck5hTihjdHJsLiRtb2RlbFZhbHVlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzdXBwb3J0c1JhbmdlKSB7XG4gICAgICB2YXIgZWxWYWwgPSBlbGVtZW50LnZhbCgpO1xuICAgICAgLy8gSUUxMSBkb2Vzbid0IHNldCB0aGUgZWwgdmFsIGNvcnJlY3RseSBpZiB0aGUgbWF4VmFsIGlzIGxlc3MgdGhhbiB0aGUgZWxlbWVudCB2YWx1ZVxuICAgICAgaWYgKG1heFZhbCA8IGVsVmFsKSB7XG4gICAgICAgIGVsZW1lbnQudmFsKG1heFZhbCk7XG4gICAgICAgIC8vIElFMTEgYW5kIENocm9tZSBkb24ndCBzZXQgdGhlIHZhbHVlIHRvIHRoZSBtaW5WYWwgd2hlbiBtYXggPCBtaW5cbiAgICAgICAgZWxWYWwgPSBtYXhWYWwgPCBtaW5WYWwgPyBtaW5WYWwgOiBtYXhWYWw7XG4gICAgICB9XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoZWxWYWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPKG1hdHNrbyk6IGltcGxlbWVudCB2YWxpZGF0ZUxhdGVyIHRvIHJlZHVjZSBudW1iZXIgb2YgdmFsaWRhdGlvbnNcbiAgICAgIGN0cmwuJHZhbGlkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RlcENoYW5nZSh2YWwpIHtcbiAgICBzdGVwVmFsID0gcGFyc2VOdW1iZXJBdHRyVmFsKHZhbCk7XG4gICAgLy8gaWdub3JlIGNoYW5nZXMgYmVmb3JlIG1vZGVsIGlzIGluaXRpYWxpemVkXG4gICAgaWYgKGlzTnVtYmVyTmFOKGN0cmwuJG1vZGVsVmFsdWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU29tZSBicm93c2VycyBkb24ndCBhZGp1c3QgdGhlIGlucHV0IHZhbHVlIGNvcnJlY3RseSwgYnV0IHNldCB0aGUgc3RlcE1pc21hdGNoIGVycm9yXG4gICAgaWYgKHN1cHBvcnRzUmFuZ2UgJiYgY3RybC4kdmlld1ZhbHVlICE9PSBlbGVtZW50LnZhbCgpKSB7XG4gICAgICBjdHJsLiRzZXRWaWV3VmFsdWUoZWxlbWVudC52YWwoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRPRE8obWF0c2tvKTogaW1wbGVtZW50IHZhbGlkYXRlTGF0ZXIgdG8gcmVkdWNlIG51bWJlciBvZiB2YWxpZGF0aW9uc1xuICAgICAgY3RybC4kdmFsaWRhdGUoKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXJsSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpIHtcbiAgLy8gTm90ZTogbm8gYmFkSW5wdXRDaGVja2VyIGhlcmUgYnkgcHVycG9zZSBhcyBgdXJsYCBpcyBvbmx5IGEgdmFsaWRhdGlvblxuICAvLyBpbiBicm93c2VycywgaS5lLiB3ZSBjYW4gYWx3YXlzIHJlYWQgb3V0IGlucHV0LnZhbHVlIGV2ZW4gaWYgaXQgaXMgbm90IHZhbGlkIVxuICBiYXNlSW5wdXRUeXBlKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJsLCAkc25pZmZlciwgJGJyb3dzZXIpO1xuICBzdHJpbmdCYXNlZElucHV0VHlwZShjdHJsKTtcblxuICBjdHJsLiQkcGFyc2VyTmFtZSA9ICd1cmwnO1xuICBjdHJsLiR2YWxpZGF0b3JzLnVybCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICAgIHJldHVybiBjdHJsLiRpc0VtcHR5KHZhbHVlKSB8fCBVUkxfUkVHRVhQLnRlc3QodmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBlbWFpbElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKSB7XG4gIC8vIE5vdGU6IG5vIGJhZElucHV0Q2hlY2tlciBoZXJlIGJ5IHB1cnBvc2UgYXMgYHVybGAgaXMgb25seSBhIHZhbGlkYXRpb25cbiAgLy8gaW4gYnJvd3NlcnMsIGkuZS4gd2UgY2FuIGFsd2F5cyByZWFkIG91dCBpbnB1dC52YWx1ZSBldmVuIGlmIGl0IGlzIG5vdCB2YWxpZCFcbiAgYmFzZUlucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyKTtcbiAgc3RyaW5nQmFzZWRJbnB1dFR5cGUoY3RybCk7XG5cbiAgY3RybC4kJHBhcnNlck5hbWUgPSAnZW1haWwnO1xuICBjdHJsLiR2YWxpZGF0b3JzLmVtYWlsID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gICAgdmFyIHZhbHVlID0gbW9kZWxWYWx1ZSB8fCB2aWV3VmFsdWU7XG4gICAgcmV0dXJuIGN0cmwuJGlzRW1wdHkodmFsdWUpIHx8IEVNQUlMX1JFR0VYUC50ZXN0KHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmFkaW9JbnB1dFR5cGUoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcbiAgdmFyIGRvVHJpbSA9ICFhdHRyLm5nVHJpbSB8fCB0cmltKGF0dHIubmdUcmltKSAhPT0gJ2ZhbHNlJztcbiAgLy8gbWFrZSB0aGUgbmFtZSB1bmlxdWUsIGlmIG5vdCBkZWZpbmVkXG4gIGlmIChpc1VuZGVmaW5lZChhdHRyLm5hbWUpKSB7XG4gICAgZWxlbWVudC5hdHRyKCduYW1lJywgbmV4dFVpZCgpKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgdmFyIHZhbHVlO1xuICAgIGlmIChlbGVtZW50WzBdLmNoZWNrZWQpIHtcbiAgICAgIHZhbHVlID0gYXR0ci52YWx1ZTtcbiAgICAgIGlmIChkb1RyaW0pIHtcbiAgICAgICAgdmFsdWUgPSB0cmltKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGN0cmwuJHNldFZpZXdWYWx1ZSh2YWx1ZSwgZXYgJiYgZXYudHlwZSk7XG4gICAgfVxuICB9O1xuXG4gIGVsZW1lbnQub24oJ2NsaWNrJywgbGlzdGVuZXIpO1xuXG4gIGN0cmwuJHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZSA9IGF0dHIudmFsdWU7XG4gICAgaWYgKGRvVHJpbSkge1xuICAgICAgdmFsdWUgPSB0cmltKHZhbHVlKTtcbiAgICB9XG4gICAgZWxlbWVudFswXS5jaGVja2VkID0gKHZhbHVlID09PSBjdHJsLiR2aWV3VmFsdWUpO1xuICB9O1xuXG4gIGF0dHIuJG9ic2VydmUoJ3ZhbHVlJywgY3RybC4kcmVuZGVyKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VDb25zdGFudEV4cHIoJHBhcnNlLCBjb250ZXh0LCBuYW1lLCBleHByZXNzaW9uLCBmYWxsYmFjaykge1xuICB2YXIgcGFyc2VGbjtcbiAgaWYgKGlzRGVmaW5lZChleHByZXNzaW9uKSkge1xuICAgIHBhcnNlRm4gPSAkcGFyc2UoZXhwcmVzc2lvbik7XG4gICAgaWYgKCFwYXJzZUZuLmNvbnN0YW50KSB7XG4gICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKCdjb25zdGV4cHInLCAnRXhwZWN0ZWQgY29uc3RhbnQgZXhwcmVzc2lvbiBmb3IgYHswfWAsIGJ1dCBzYXcgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdgezF9YC4nLCBuYW1lLCBleHByZXNzaW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhcnNlRm4oY29udGV4dCk7XG4gIH1cbiAgcmV0dXJuIGZhbGxiYWNrO1xufVxuXG5mdW5jdGlvbiBjaGVja2JveElucHV0VHlwZShzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHNuaWZmZXIsICRicm93c2VyLCAkZmlsdGVyLCAkcGFyc2UpIHtcbiAgdmFyIHRydWVWYWx1ZSA9IHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgc2NvcGUsICduZ1RydWVWYWx1ZScsIGF0dHIubmdUcnVlVmFsdWUsIHRydWUpO1xuICB2YXIgZmFsc2VWYWx1ZSA9IHBhcnNlQ29uc3RhbnRFeHByKCRwYXJzZSwgc2NvcGUsICduZ0ZhbHNlVmFsdWUnLCBhdHRyLm5nRmFsc2VWYWx1ZSwgZmFsc2UpO1xuXG4gIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgY3RybC4kc2V0Vmlld1ZhbHVlKGVsZW1lbnRbMF0uY2hlY2tlZCwgZXYgJiYgZXYudHlwZSk7XG4gIH07XG5cbiAgZWxlbWVudC5vbignY2xpY2snLCBsaXN0ZW5lcik7XG5cbiAgY3RybC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgZWxlbWVudFswXS5jaGVja2VkID0gY3RybC4kdmlld1ZhbHVlO1xuICB9O1xuXG4gIC8vIE92ZXJyaWRlIHRoZSBzdGFuZGFyZCBgJGlzRW1wdHlgIGJlY2F1c2UgdGhlICR2aWV3VmFsdWUgb2YgYW4gZW1wdHkgY2hlY2tib3ggaXMgYWx3YXlzIHNldCB0byBgZmFsc2VgXG4gIC8vIFRoaXMgaXMgYmVjYXVzZSBvZiB0aGUgcGFyc2VyIGJlbG93LCB3aGljaCBjb21wYXJlcyB0aGUgYCRtb2RlbFZhbHVlYCB3aXRoIGB0cnVlVmFsdWVgIHRvIGNvbnZlcnRcbiAgLy8gaXQgdG8gYSBib29sZWFuLlxuICBjdHJsLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IGZhbHNlO1xuICB9O1xuXG4gIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBlcXVhbHModmFsdWUsIHRydWVWYWx1ZSk7XG4gIH0pO1xuXG4gIGN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA/IHRydWVWYWx1ZSA6IGZhbHNlVmFsdWU7XG4gIH0pO1xufVxuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgdGV4dGFyZWFcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIVE1MIHRleHRhcmVhIGVsZW1lbnQgY29udHJvbCB3aXRoIGFuZ3VsYXIgZGF0YS1iaW5kaW5nLiBUaGUgZGF0YS1iaW5kaW5nIGFuZCB2YWxpZGF0aW9uXG4gKiBwcm9wZXJ0aWVzIG9mIHRoaXMgZWxlbWVudCBhcmUgZXhhY3RseSB0aGUgc2FtZSBhcyB0aG9zZSBvZiB0aGVcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXQgZWxlbWVudH0uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nTW9kZWwgQXNzaWduYWJsZSBhbmd1bGFyIGV4cHJlc3Npb24gdG8gZGF0YS1iaW5kIHRvLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuYW1lIFByb3BlcnR5IG5hbWUgb2YgdGhlIGZvcm0gdW5kZXIgd2hpY2ggdGhlIGNvbnRyb2wgaXMgcHVibGlzaGVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSByZXF1aXJlZCBTZXRzIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIG5vdCBlbnRlcmVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge251bWJlcj19IG5nTWlubGVuZ3RoIFNldHMgYG1pbmxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIHNob3J0ZXIgdGhhblxuICogICAgbWlubGVuZ3RoLlxuICogQHBhcmFtIHtudW1iZXI9fSBuZ01heGxlbmd0aCBTZXRzIGBtYXhsZW5ndGhgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBsb25nZXIgdGhhblxuICogICAgbWF4bGVuZ3RoLiBTZXR0aW5nIHRoZSBhdHRyaWJ1dGUgdG8gYSBuZWdhdGl2ZSBvciBub24tbnVtZXJpYyB2YWx1ZSwgYWxsb3dzIHZpZXcgdmFsdWVzIG9mIGFueVxuICogICAgbGVuZ3RoLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1BhdHRlcm4gU2V0cyBgcGF0dGVybmAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIG5nTW9kZWwge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZSAkdmlld1ZhbHVlfVxuICogICAgZG9lcyBub3QgbWF0Y2ggYSBSZWdFeHAgZm91bmQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZSBhdHRyaWJ1dGUgdmFsdWUuXG4gKiAgICBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBSZWdFeHAgb2JqZWN0LCB0aGVuIHRoaXMgaXMgdXNlZCBkaXJlY3RseS5cbiAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cFxuICogICAgYWZ0ZXIgd3JhcHBpbmcgaXQgaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG9cbiAqICAgIGBuZXcgUmVnRXhwKCdeYWJjJCcpYC48YnIgLz5cbiAqICAgICoqTm90ZToqKiBBdm9pZCB1c2luZyB0aGUgYGdgIGZsYWcgb24gdGhlIFJlZ0V4cCwgYXMgaXQgd2lsbCBjYXVzZSBlYWNoIHN1Y2Nlc3NpdmUgc2VhcmNoIHRvXG4gKiAgICBzdGFydCBhdCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc2VhcmNoJ3MgbWF0Y2gsIHRodXMgbm90IHRha2luZyB0aGUgd2hvbGUgaW5wdXQgdmFsdWUgaW50b1xuICogICAgYWNjb3VudC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdDaGFuZ2UgQW5ndWxhciBleHByZXNzaW9uIHRvIGJlIGV4ZWN1dGVkIHdoZW4gaW5wdXQgY2hhbmdlcyBkdWUgdG8gdXNlclxuICogICAgaW50ZXJhY3Rpb24gd2l0aCB0aGUgaW5wdXQgZWxlbWVudC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IFtuZ1RyaW09dHJ1ZV0gSWYgc2V0IHRvIGZhbHNlIEFuZ3VsYXIgd2lsbCBub3QgYXV0b21hdGljYWxseSB0cmltIHRoZSBpbnB1dC5cbiAqXG4gKiBAa25vd25Jc3N1ZVxuICpcbiAqIFdoZW4gc3BlY2lmeWluZyB0aGUgYHBsYWNlaG9sZGVyYCBhdHRyaWJ1dGUgb2YgYDx0ZXh0YXJlYT5gLCBJbnRlcm5ldCBFeHBsb3JlciB3aWxsIHRlbXBvcmFyaWx5XG4gKiBpbnNlcnQgdGhlIHBsYWNlaG9sZGVyIHZhbHVlIGFzIHRoZSB0ZXh0YXJlYSdzIGNvbnRlbnQuIElmIHRoZSBwbGFjZWhvbGRlciB2YWx1ZSBjb250YWluc1xuICogaW50ZXJwb2xhdGlvbiAoYHt7IC4uLiB9fWApLCBhbiBlcnJvciB3aWxsIGJlIGxvZ2dlZCBpbiB0aGUgY29uc29sZSB3aGVuIEFuZ3VsYXIgdHJpZXMgdG8gdXBkYXRlXG4gKiB0aGUgdmFsdWUgb2YgdGhlIGJ5LXRoZW4tcmVtb3ZlZCB0ZXh0IG5vZGUuIFRoaXMgZG9lc24ndCBhZmZlY3QgdGhlIGZ1bmN0aW9uYWxpdHkgb2YgdGhlXG4gKiB0ZXh0YXJlYSwgYnV0IGNhbiBiZSB1bmRlc2lyYWJsZS5cbiAqXG4gKiBZb3UgY2FuIHdvcmsgYXJvdW5kIHRoaXMgSW50ZXJuZXQgRXhwbG9yZXIgaXNzdWUgYnkgdXNpbmcgYG5nLWF0dHItcGxhY2Vob2xkZXJgIGluc3RlYWQgb2ZcbiAqIGBwbGFjZWhvbGRlcmAgb24gdGV4dGFyZWFzLCB3aGVuZXZlciB5b3UgbmVlZCBpbnRlcnBvbGF0aW9uIGluIHRoZSBwbGFjZWhvbGRlciB2YWx1ZS4gWW91IGNhblxuICogZmluZCBtb3JlIGRldGFpbHMgb24gYG5nQXR0cmAgaW4gdGhlXG4gKiBbSW50ZXJwb2xhdGlvbl0oZ3VpZGUvaW50ZXJwb2xhdGlvbiMtbmdhdHRyLWZvci1iaW5kaW5nLXRvLWFyYml0cmFyeS1hdHRyaWJ1dGVzKSBzZWN0aW9uIG9mIHRoZVxuICogRGV2ZWxvcGVyIEd1aWRlLlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBpbnB1dFxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEhUTUwgaW5wdXQgZWxlbWVudCBjb250cm9sLiBXaGVuIHVzZWQgdG9nZXRoZXIgd2l0aCB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LCBpdCBwcm92aWRlcyBkYXRhLWJpbmRpbmcsXG4gKiBpbnB1dCBzdGF0ZSBjb250cm9sLCBhbmQgdmFsaWRhdGlvbi5cbiAqIElucHV0IGNvbnRyb2wgZm9sbG93cyBIVE1MNSBpbnB1dCB0eXBlcyBhbmQgcG9seWZpbGxzIHRoZSBIVE1MNSB2YWxpZGF0aW9uIGJlaGF2aW9yIGZvciBvbGRlciBicm93c2Vycy5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipOb3RlOioqIE5vdCBldmVyeSBmZWF0dXJlIG9mZmVyZWQgaXMgYXZhaWxhYmxlIGZvciBhbGwgaW5wdXQgdHlwZXMuXG4gKiBTcGVjaWZpY2FsbHksIGRhdGEgYmluZGluZyBhbmQgZXZlbnQgaGFuZGxpbmcgdmlhIGBuZy1tb2RlbGAgaXMgdW5zdXBwb3J0ZWQgZm9yIGBpbnB1dFtmaWxlXWAuXG4gKiA8L2Rpdj5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIGFuZ3VsYXIgZXhwcmVzc2lvbiB0byBkYXRhLWJpbmQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgbm90IGVudGVyZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBuZ1JlcXVpcmVkIFNldHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgaWYgc2V0IHRvIHRydWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gbmdNaW5sZW5ndGggU2V0cyBgbWlubGVuZ3RoYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgdmFsdWUgaXMgc2hvcnRlciB0aGFuXG4gKiAgICBtaW5sZW5ndGguXG4gKiBAcGFyYW0ge251bWJlcj19IG5nTWF4bGVuZ3RoIFNldHMgYG1heGxlbmd0aGAgdmFsaWRhdGlvbiBlcnJvciBrZXkgaWYgdGhlIHZhbHVlIGlzIGxvbmdlciB0aGFuXG4gKiAgICBtYXhsZW5ndGguIFNldHRpbmcgdGhlIGF0dHJpYnV0ZSB0byBhIG5lZ2F0aXZlIG9yIG5vbi1udW1lcmljIHZhbHVlLCBhbGxvd3MgdmlldyB2YWx1ZXMgb2YgYW55XG4gKiAgICBsZW5ndGguXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nUGF0dGVybiBTZXRzIGBwYXR0ZXJuYCB2YWxpZGF0aW9uIGVycm9yIGtleSBpZiB0aGUgbmdNb2RlbCB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlICR2aWV3VmFsdWV9XG4gKiAgICB2YWx1ZSBkb2VzIG5vdCBtYXRjaCBhIFJlZ0V4cCBmb3VuZCBieSBldmFsdWF0aW5nIHRoZSBBbmd1bGFyIGV4cHJlc3Npb24gZ2l2ZW4gaW4gdGhlIGF0dHJpYnV0ZSB2YWx1ZS5cbiAqICAgIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIFJlZ0V4cCBvYmplY3QsIHRoZW4gdGhpcyBpcyB1c2VkIGRpcmVjdGx5LlxuICogICAgSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgc3RyaW5nLCB0aGVuIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgUmVnRXhwXG4gKiAgICBhZnRlciB3cmFwcGluZyBpdCBpbiBgXmAgYW5kIGAkYCBjaGFyYWN0ZXJzLiBGb3IgaW5zdGFuY2UsIGBcImFiY1wiYCB3aWxsIGJlIGNvbnZlcnRlZCB0b1xuICogICAgYG5ldyBSZWdFeHAoJ15hYmMkJylgLjxiciAvPlxuICogICAgKipOb3RlOioqIEF2b2lkIHVzaW5nIHRoZSBgZ2AgZmxhZyBvbiB0aGUgUmVnRXhwLCBhcyBpdCB3aWxsIGNhdXNlIGVhY2ggc3VjY2Vzc2l2ZSBzZWFyY2ggdG9cbiAqICAgIHN0YXJ0IGF0IHRoZSBpbmRleCBvZiB0aGUgbGFzdCBzZWFyY2gncyBtYXRjaCwgdGh1cyBub3QgdGFraW5nIHRoZSB3aG9sZSBpbnB1dCB2YWx1ZSBpbnRvXG4gKiAgICBhY2NvdW50LlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ0NoYW5nZSBBbmd1bGFyIGV4cHJlc3Npb24gdG8gYmUgZXhlY3V0ZWQgd2hlbiBpbnB1dCBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBpbnB1dCBlbGVtZW50LlxuICogQHBhcmFtIHtib29sZWFuPX0gW25nVHJpbT10cnVlXSBJZiBzZXQgdG8gZmFsc2UgQW5ndWxhciB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHRyaW0gdGhlIGlucHV0LlxuICogICAgVGhpcyBwYXJhbWV0ZXIgaXMgaWdub3JlZCBmb3IgaW5wdXRbdHlwZT1wYXNzd29yZF0gY29udHJvbHMsIHdoaWNoIHdpbGwgbmV2ZXIgdHJpbSB0aGVcbiAqICAgIGlucHV0LlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbmFtZT1cImlucHV0LWRpcmVjdGl2ZVwiIG1vZHVsZT1cImlucHV0RXhhbXBsZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdpbnB1dEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS51c2VyID0ge25hbWU6ICdndWVzdCcsIGxhc3Q6ICd2aXNpdG9yJ307XG4gICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICBVc2VyIG5hbWU6XG4gICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJ1c2VyTmFtZVwiIG5nLW1vZGVsPVwidXNlci5uYW1lXCIgcmVxdWlyZWQ+XG4gICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgIDxkaXYgcm9sZT1cImFsZXJ0XCI+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0udXNlck5hbWUuJGVycm9yLnJlcXVpcmVkXCI+XG4gICAgICAgICAgICAgIFJlcXVpcmVkITwvc3Bhbj5cbiAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgTGFzdCBuYW1lOlxuICAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwibGFzdE5hbWVcIiBuZy1tb2RlbD1cInVzZXIubGFzdFwiXG4gICAgICAgICAgICAgIG5nLW1pbmxlbmd0aD1cIjNcIiBuZy1tYXhsZW5ndGg9XCIxMFwiPlxuICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICA8ZGl2IHJvbGU9XCJhbGVydFwiPlxuICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JcIiBuZy1zaG93PVwibXlGb3JtLmxhc3ROYW1lLiRlcnJvci5taW5sZW5ndGhcIj5cbiAgICAgICAgICAgICAgIFRvbyBzaG9ydCE8L3NwYW4+XG4gICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0ubGFzdE5hbWUuJGVycm9yLm1heGxlbmd0aFwiPlxuICAgICAgICAgICAgICAgVG9vIGxvbmchPC9zcGFuPlxuICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgIDxocj5cbiAgICAgICAgIDx0dD51c2VyID0ge3t1c2VyfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLnVzZXJOYW1lLiR2YWxpZCA9IHt7bXlGb3JtLnVzZXJOYW1lLiR2YWxpZH19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS51c2VyTmFtZS4kZXJyb3IgPSB7e215Rm9ybS51c2VyTmFtZS4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0ubGFzdE5hbWUuJHZhbGlkID0ge3tteUZvcm0ubGFzdE5hbWUuJHZhbGlkfX08L3R0Pjxici8+XG4gICAgICAgICA8dHQ+bXlGb3JtLmxhc3ROYW1lLiRlcnJvciA9IHt7bXlGb3JtLmxhc3ROYW1lLiRlcnJvcn19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLnJlcXVpcmVkID0ge3shIW15Rm9ybS4kZXJyb3IucmVxdWlyZWR9fTwvdHQ+PGJyLz5cbiAgICAgICAgIDx0dD5teUZvcm0uJGVycm9yLm1pbmxlbmd0aCA9IHt7ISFteUZvcm0uJGVycm9yLm1pbmxlbmd0aH19PC90dD48YnIvPlxuICAgICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IubWF4bGVuZ3RoID0ge3shIW15Rm9ybS4kZXJyb3IubWF4bGVuZ3RofX08L3R0Pjxici8+XG4gICAgICAgPC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgIHZhciB1c2VyID0gZWxlbWVudChieS5leGFjdEJpbmRpbmcoJ3VzZXInKSk7XG4gICAgICAgIHZhciB1c2VyTmFtZVZhbGlkID0gZWxlbWVudChieS5iaW5kaW5nKCdteUZvcm0udXNlck5hbWUuJHZhbGlkJykpO1xuICAgICAgICB2YXIgbGFzdE5hbWVWYWxpZCA9IGVsZW1lbnQoYnkuYmluZGluZygnbXlGb3JtLmxhc3ROYW1lLiR2YWxpZCcpKTtcbiAgICAgICAgdmFyIGxhc3ROYW1lRXJyb3IgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5sYXN0TmFtZS4kZXJyb3InKSk7XG4gICAgICAgIHZhciBmb3JtVmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS4kdmFsaWQnKSk7XG4gICAgICAgIHZhciB1c2VyTmFtZUlucHV0ID0gZWxlbWVudChieS5tb2RlbCgndXNlci5uYW1lJykpO1xuICAgICAgICB2YXIgdXNlckxhc3RJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubGFzdCcpKTtcblxuICAgICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibmFtZVwiOlwiZ3Vlc3RcIixcImxhc3RcIjpcInZpc2l0b3JcIn0nKTtcbiAgICAgICAgICBleHBlY3QodXNlck5hbWVWYWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5IHdoZW4gcmVxdWlyZWQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICB1c2VyTmFtZUlucHV0LmNsZWFyKCk7XG4gICAgICAgICAgdXNlck5hbWVJbnB1dC5zZW5kS2V5cygnJyk7XG5cbiAgICAgICAgICBleHBlY3QodXNlci5nZXRUZXh0KCkpLnRvQ29udGFpbigne1wibGFzdFwiOlwidmlzaXRvclwifScpO1xuICAgICAgICAgIGV4cGVjdCh1c2VyTmFtZVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCdmYWxzZScpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgdmFsaWQgaWYgZW1wdHkgd2hlbiBtaW4gbGVuZ3RoIGlzIHNldCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCcnKTtcblxuICAgICAgICAgIGV4cGVjdCh1c2VyLmdldFRleHQoKSkudG9Db250YWluKCd7XCJuYW1lXCI6XCJndWVzdFwiLFwibGFzdFwiOlwiXCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcbiAgICAgICAgICBleHBlY3QoZm9ybVZhbGlkLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBsZXNzIHRoYW4gcmVxdWlyZWQgbWluIGxlbmd0aCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICB1c2VyTGFzdElucHV0LnNlbmRLZXlzKCd4eCcpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcIm5hbWVcIjpcImd1ZXN0XCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lRXJyb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ21pbmxlbmd0aCcpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGl0KCdzaG91bGQgYmUgaW52YWxpZCBpZiBsb25nZXIgdGhhbiBtYXggbGVuZ3RoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdXNlckxhc3RJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIHVzZXJMYXN0SW5wdXQuc2VuZEtleXMoJ3NvbWUgcmlkaWN1bG91c2x5IGxvbmcgbmFtZScpO1xuXG4gICAgICAgICAgZXhwZWN0KHVzZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3tcIm5hbWVcIjpcImd1ZXN0XCJ9Jyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgICAgZXhwZWN0KGxhc3ROYW1lRXJyb3IuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ21heGxlbmd0aCcpO1xuICAgICAgICAgIGV4cGVjdChmb3JtVmFsaWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ2ZhbHNlJyk7XG4gICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIGlucHV0RGlyZWN0aXZlID0gWyckYnJvd3NlcicsICckc25pZmZlcicsICckZmlsdGVyJywgJyRwYXJzZScsXG4gICAgZnVuY3Rpb24oJGJyb3dzZXIsICRzbmlmZmVyLCAkZmlsdGVyLCAkcGFyc2UpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0UnLFxuICAgIHJlcXVpcmU6IFsnP25nTW9kZWwnXSxcbiAgICBsaW5rOiB7XG4gICAgICBwcmU6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjdHJscykge1xuICAgICAgICBpZiAoY3RybHNbMF0pIHtcbiAgICAgICAgICAoaW5wdXRUeXBlW2xvd2VyY2FzZShhdHRyLnR5cGUpXSB8fCBpbnB1dFR5cGUudGV4dCkoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzWzBdLCAkc25pZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGJyb3dzZXIsICRmaWx0ZXIsICRwYXJzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XTtcblxuXG5cbnZhciBDT05TVEFOVF9WQUxVRV9SRUdFWFAgPSAvXih0cnVlfGZhbHNlfFxcZCspJC87XG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nVmFsdWVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEJpbmRzIHRoZSBnaXZlbiBleHByZXNzaW9uIHRvIHRoZSB2YWx1ZSBvZiB0aGUgZWxlbWVudC5cbiAqXG4gKiBJdCBpcyBtYWlubHkgdXNlZCBvbiB7QGxpbmsgaW5wdXRbcmFkaW9dIGBpbnB1dFtyYWRpb11gfSBhbmQgb3B0aW9uIGVsZW1lbnRzLFxuICogc28gdGhhdCB3aGVuIHRoZSBlbGVtZW50IGlzIHNlbGVjdGVkLCB0aGUge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfSBvZiB0aGF0IGVsZW1lbnQgKG9yIGl0c1xuICoge0BsaW5rIHNlbGVjdCBgc2VsZWN0YH0gcGFyZW50IGVsZW1lbnQpIGlzIHNldCB0byB0aGUgYm91bmQgdmFsdWUuIEl0IGlzIGVzcGVjaWFsbHkgdXNlZnVsXG4gKiBmb3IgZHluYW1pY2FsbHkgZ2VuZXJhdGVkIGxpc3RzIHVzaW5nIHtAbGluayBuZ1JlcGVhdCBgbmdSZXBlYXRgfSwgYXMgc2hvd24gYmVsb3cuXG4gKlxuICogSXQgY2FuIGFsc28gYmUgdXNlZCB0byBhY2hpZXZlIG9uZS13YXkgYmluZGluZyBvZiBhIGdpdmVuIGV4cHJlc3Npb24gdG8gYW4gaW5wdXQgZWxlbWVudFxuICogc3VjaCBhcyBhbiBgaW5wdXRbdGV4dF1gIG9yIGEgYHRleHRhcmVhYCwgd2hlbiB0aGF0IGVsZW1lbnQgZG9lcyBub3QgdXNlIG5nTW9kZWwuXG4gKlxuICogQGVsZW1lbnQgaW5wdXRcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdWYWx1ZSBhbmd1bGFyIGV4cHJlc3Npb24sIHdob3NlIHZhbHVlIHdpbGwgYmUgYm91bmQgdG8gdGhlIGB2YWx1ZWAgYXR0cmlidXRlXG4gKiBhbmQgYHZhbHVlYCBwcm9wZXJ0eSBvZiB0aGUgZWxlbWVudC5cbiAqXG4gKiBAZXhhbXBsZVxuICAgIDxleGFtcGxlIG5hbWU9XCJuZ1ZhbHVlLWRpcmVjdGl2ZVwiIG1vZHVsZT1cInZhbHVlRXhhbXBsZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8c2NyaXB0PlxuICAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCd2YWx1ZUV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAgICRzY29wZS5uYW1lcyA9IFsncGl6emEnLCAndW5pY29ybnMnLCAncm9ib3RzJ107XG4gICAgICAgICAgICAgICRzY29wZS5teSA9IHsgZmF2b3JpdGU6ICd1bmljb3JucycgfTtcbiAgICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgPGZvcm0gbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgPGgyPldoaWNoIGlzIHlvdXIgZmF2b3JpdGU/PC9oMj5cbiAgICAgICAgICAgIDxsYWJlbCBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCIgZm9yPVwie3tuYW1lfX1cIj5cbiAgICAgICAgICAgICAge3tuYW1lfX1cbiAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cIm15LmZhdm9yaXRlXCJcbiAgICAgICAgICAgICAgICAgICAgIG5nLXZhbHVlPVwibmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICBpZD1cInt7bmFtZX19XCJcbiAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJmYXZvcml0ZVwiPlxuICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICA8ZGl2PllvdSBjaG9zZSB7e215LmZhdm9yaXRlfX08L2Rpdj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICB2YXIgZmF2b3JpdGUgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215LmZhdm9yaXRlJykpO1xuXG4gICAgICAgIGl0KCdzaG91bGQgaW5pdGlhbGl6ZSB0byBtb2RlbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGV4cGVjdChmYXZvcml0ZS5nZXRUZXh0KCkpLnRvQ29udGFpbigndW5pY29ybnMnKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgYmluZCB0aGUgdmFsdWVzIHRvIHRoZSBpbnB1dHMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBlbGVtZW50LmFsbChieS5tb2RlbCgnbXkuZmF2b3JpdGUnKSkuZ2V0KDApLmNsaWNrKCk7XG4gICAgICAgICAgZXhwZWN0KGZhdm9yaXRlLmdldFRleHQoKSkudG9Db250YWluKCdwaXp6YScpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1ZhbHVlRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIC8qKlxuICAgKiAgaW5wdXRzIHVzZSB0aGUgdmFsdWUgYXR0cmlidXRlIGFzIHRoZWlyIGRlZmF1bHQgdmFsdWUgaWYgdGhlIHZhbHVlIHByb3BlcnR5IGlzIG5vdCBzZXQuXG4gICAqICBPbmNlIHRoZSB2YWx1ZSBwcm9wZXJ0eSBoYXMgYmVlbiBzZXQgKGJ5IGFkZGluZyBpbnB1dCksIGl0IHdpbGwgbm90IHJlYWN0IHRvIGNoYW5nZXMgdG9cbiAgICogIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgYW55bW9yZS4gU2V0dGluZyBib3RoIGF0dHJpYnV0ZSBhbmQgcHJvcGVydHkgZml4ZXMgdGhpcyBiZWhhdmlvciwgYW5kXG4gICAqICBtYWtlcyBpdCBwb3NzaWJsZSB0byB1c2UgbmdWYWx1ZSBhcyBhIHNvcnQgb2Ygb25lLXdheSBiaW5kLlxuICAgKi9cbiAgZnVuY3Rpb24gdXBkYXRlRWxlbWVudFZhbHVlKGVsZW1lbnQsIGF0dHIsIHZhbHVlKSB7XG4gICAgLy8gU3VwcG9ydDogSUU5IG9ubHlcbiAgICAvLyBJbiBJRTkgdmFsdWVzIGFyZSBjb252ZXJ0ZWQgdG8gc3RyaW5nIChlLmcuIGBpbnB1dC52YWx1ZSA9IG51bGxgIHJlc3VsdHMgaW4gYGlucHV0LnZhbHVlID09PSAnbnVsbCdgKS5cbiAgICB2YXIgcHJvcFZhbHVlID0gaXNEZWZpbmVkKHZhbHVlKSA/IHZhbHVlIDogKG1zaWUgPT09IDkpID8gJycgOiBudWxsO1xuICAgIGVsZW1lbnQucHJvcCgndmFsdWUnLCBwcm9wVmFsdWUpO1xuICAgIGF0dHIuJHNldCgndmFsdWUnLCB2YWx1ZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcHJpb3JpdHk6IDEwMCxcbiAgICBjb21waWxlOiBmdW5jdGlvbih0cGwsIHRwbEF0dHIpIHtcbiAgICAgIGlmIChDT05TVEFOVF9WQUxVRV9SRUdFWFAudGVzdCh0cGxBdHRyLm5nVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1ZhbHVlQ29uc3RhbnRMaW5rKHNjb3BlLCBlbG0sIGF0dHIpIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBzY29wZS4kZXZhbChhdHRyLm5nVmFsdWUpO1xuICAgICAgICAgIHVwZGF0ZUVsZW1lbnRWYWx1ZShlbG0sIGF0dHIsIHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1ZhbHVlTGluayhzY29wZSwgZWxtLCBhdHRyKSB7XG4gICAgICAgICAgc2NvcGUuJHdhdGNoKGF0dHIubmdWYWx1ZSwgZnVuY3Rpb24gdmFsdWVXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgdXBkYXRlRWxlbWVudFZhbHVlKGVsbSwgYXR0ciwgdmFsdWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdCaW5kXG4gKiBAcmVzdHJpY3QgQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdCaW5kYCBhdHRyaWJ1dGUgdGVsbHMgQW5ndWxhciB0byByZXBsYWNlIHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIHNwZWNpZmllZCBIVE1MIGVsZW1lbnRcbiAqIHdpdGggdGhlIHZhbHVlIG9mIGEgZ2l2ZW4gZXhwcmVzc2lvbiwgYW5kIHRvIHVwZGF0ZSB0aGUgdGV4dCBjb250ZW50IHdoZW4gdGhlIHZhbHVlIG9mIHRoYXRcbiAqIGV4cHJlc3Npb24gY2hhbmdlcy5cbiAqXG4gKiBUeXBpY2FsbHksIHlvdSBkb24ndCB1c2UgYG5nQmluZGAgZGlyZWN0bHksIGJ1dCBpbnN0ZWFkIHlvdSB1c2UgdGhlIGRvdWJsZSBjdXJseSBtYXJrdXAgbGlrZVxuICogYHt7IGV4cHJlc3Npb24gfX1gIHdoaWNoIGlzIHNpbWlsYXIgYnV0IGxlc3MgdmVyYm9zZS5cbiAqXG4gKiBJdCBpcyBwcmVmZXJhYmxlIHRvIHVzZSBgbmdCaW5kYCBpbnN0ZWFkIG9mIGB7eyBleHByZXNzaW9uIH19YCBpZiBhIHRlbXBsYXRlIGlzIG1vbWVudGFyaWx5XG4gKiBkaXNwbGF5ZWQgYnkgdGhlIGJyb3dzZXIgaW4gaXRzIHJhdyBzdGF0ZSBiZWZvcmUgQW5ndWxhciBjb21waWxlcyBpdC4gU2luY2UgYG5nQmluZGAgaXMgYW5cbiAqIGVsZW1lbnQgYXR0cmlidXRlLCBpdCBtYWtlcyB0aGUgYmluZGluZ3MgaW52aXNpYmxlIHRvIHRoZSB1c2VyIHdoaWxlIHRoZSBwYWdlIGlzIGxvYWRpbmcuXG4gKlxuICogQW4gYWx0ZXJuYXRpdmUgc29sdXRpb24gdG8gdGhpcyBwcm9ibGVtIHdvdWxkIGJlIHVzaW5nIHRoZVxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0Nsb2FrIG5nQ2xvYWt9IGRpcmVjdGl2ZS5cbiAqXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmluZCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogRW50ZXIgYSBuYW1lIGluIHRoZSBMaXZlIFByZXZpZXcgdGV4dCBib3g7IHRoZSBncmVldGluZyBiZWxvdyB0aGUgdGV4dCBib3ggY2hhbmdlcyBpbnN0YW50bHkuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJiaW5kRXhhbXBsZVwiIG5hbWU9XCJuZy1iaW5kXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdiaW5kRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5uYW1lID0gJ1doaXJsZWQnO1xuICAgICAgICAgICB9XSk7XG4gICAgICAgPC9zY3JpcHQ+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxsYWJlbD5FbnRlciBuYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIj48L2xhYmVsPjxicj5cbiAgICAgICAgIEhlbGxvIDxzcGFuIG5nLWJpbmQ9XCJuYW1lXCI+PC9zcGFuPiFcbiAgICAgICA8L2Rpdj5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1iaW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICB2YXIgbmFtZUlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbmFtZScpKTtcblxuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbmFtZScpKS5nZXRUZXh0KCkpLnRvQmUoJ1doaXJsZWQnKTtcbiAgICAgICAgIG5hbWVJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbmFtZUlucHV0LnNlbmRLZXlzKCd3b3JsZCcpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbmFtZScpKS5nZXRUZXh0KCkpLnRvQmUoJ3dvcmxkJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQmluZERpcmVjdGl2ZSA9IFsnJGNvbXBpbGUnLCBmdW5jdGlvbigkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQUMnLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nQmluZENvbXBpbGUodGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAkY29tcGlsZS4kJGFkZEJpbmRpbmdDbGFzcyh0ZW1wbGF0ZUVsZW1lbnQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nQmluZExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyhlbGVtZW50LCBhdHRyLm5nQmluZCk7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50WzBdO1xuICAgICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ0JpbmQsIGZ1bmN0aW9uIG5nQmluZFdhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IHN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmluZFRlbXBsYXRlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQmluZFRlbXBsYXRlYCBkaXJlY3RpdmUgc3BlY2lmaWVzIHRoYXQgdGhlIGVsZW1lbnRcbiAqIHRleHQgY29udGVudCBzaG91bGQgYmUgcmVwbGFjZWQgd2l0aCB0aGUgaW50ZXJwb2xhdGlvbiBvZiB0aGUgdGVtcGxhdGVcbiAqIGluIHRoZSBgbmdCaW5kVGVtcGxhdGVgIGF0dHJpYnV0ZS5cbiAqIFVubGlrZSBgbmdCaW5kYCwgdGhlIGBuZ0JpbmRUZW1wbGF0ZWAgY2FuIGNvbnRhaW4gbXVsdGlwbGUgYHt7YCBgfX1gXG4gKiBleHByZXNzaW9ucy4gVGhpcyBkaXJlY3RpdmUgaXMgbmVlZGVkIHNpbmNlIHNvbWUgSFRNTCBlbGVtZW50c1xuICogKHN1Y2ggYXMgVElUTEUgYW5kIE9QVElPTikgY2Fubm90IGNvbnRhaW4gU1BBTiBlbGVtZW50cy5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ0JpbmRUZW1wbGF0ZSB0ZW1wbGF0ZSBvZiBmb3JtXG4gKiAgIDx0dD57ezwvdHQ+IDx0dD5leHByZXNzaW9uPC90dD4gPHR0Pn19PC90dD4gdG8gZXZhbC5cbiAqXG4gKiBAZXhhbXBsZVxuICogVHJ5IGl0IGhlcmU6IGVudGVyIHRleHQgaW4gdGV4dCBib3ggYW5kIHdhdGNoIHRoZSBncmVldGluZyBjaGFuZ2UuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJiaW5kRXhhbXBsZVwiIG5hbWU9XCJuZy1iaW5kLXRlbXBsYXRlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgIGFuZ3VsYXIubW9kdWxlKCdiaW5kRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICAgICRzY29wZS5zYWx1dGF0aW9uID0gJ0hlbGxvJztcbiAgICAgICAgICAgICAkc2NvcGUubmFtZSA9ICdXb3JsZCc7XG4gICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8bGFiZWw+U2FsdXRhdGlvbjogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzYWx1dGF0aW9uXCI+PC9sYWJlbD48YnI+XG4gICAgICAgIDxsYWJlbD5OYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIj48L2xhYmVsPjxicj5cbiAgICAgICAgPHByZSBuZy1iaW5kLXRlbXBsYXRlPVwie3tzYWx1dGF0aW9ufX0ge3tuYW1lfX0hXCI+PC9wcmU+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctYmluZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIHNhbHV0YXRpb25FbGVtID0gZWxlbWVudChieS5iaW5kaW5nKCdzYWx1dGF0aW9uJykpO1xuICAgICAgICAgdmFyIHNhbHV0YXRpb25JbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3NhbHV0YXRpb24nKSk7XG4gICAgICAgICB2YXIgbmFtZUlucHV0ID0gZWxlbWVudChieS5tb2RlbCgnbmFtZScpKTtcblxuICAgICAgICAgZXhwZWN0KHNhbHV0YXRpb25FbGVtLmdldFRleHQoKSkudG9CZSgnSGVsbG8gV29ybGQhJyk7XG5cbiAgICAgICAgIHNhbHV0YXRpb25JbnB1dC5jbGVhcigpO1xuICAgICAgICAgc2FsdXRhdGlvbklucHV0LnNlbmRLZXlzKCdHcmVldGluZ3MnKTtcbiAgICAgICAgIG5hbWVJbnB1dC5jbGVhcigpO1xuICAgICAgICAgbmFtZUlucHV0LnNlbmRLZXlzKCd1c2VyJyk7XG5cbiAgICAgICAgIGV4cGVjdChzYWx1dGF0aW9uRWxlbS5nZXRUZXh0KCkpLnRvQmUoJ0dyZWV0aW5ncyB1c2VyIScpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0JpbmRUZW1wbGF0ZURpcmVjdGl2ZSA9IFsnJGludGVycG9sYXRlJywgJyRjb21waWxlJywgZnVuY3Rpb24oJGludGVycG9sYXRlLCAkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nQmluZFRlbXBsYXRlQ29tcGlsZSh0ZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0NsYXNzKHRlbXBsYXRlRWxlbWVudCk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdCaW5kVGVtcGxhdGVMaW5rKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHZhciBpbnRlcnBvbGF0ZUZuID0gJGludGVycG9sYXRlKGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyLm5nQmluZFRlbXBsYXRlKSk7XG4gICAgICAgICRjb21waWxlLiQkYWRkQmluZGluZ0luZm8oZWxlbWVudCwgaW50ZXJwb2xhdGVGbi5leHByZXNzaW9ucyk7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50WzBdO1xuICAgICAgICBhdHRyLiRvYnNlcnZlKCduZ0JpbmRUZW1wbGF0ZScsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IGlzVW5kZWZpbmVkKHZhbHVlKSA/ICcnIDogdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmluZEh0bWxcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEV2YWx1YXRlcyB0aGUgZXhwcmVzc2lvbiBhbmQgaW5zZXJ0cyB0aGUgcmVzdWx0aW5nIEhUTUwgaW50byB0aGUgZWxlbWVudCBpbiBhIHNlY3VyZSB3YXkuIEJ5IGRlZmF1bHQsXG4gKiB0aGUgcmVzdWx0aW5nIEhUTUwgY29udGVudCB3aWxsIGJlIHNhbml0aXplZCB1c2luZyB0aGUge0BsaW5rIG5nU2FuaXRpemUuJHNhbml0aXplICRzYW5pdGl6ZX0gc2VydmljZS5cbiAqIFRvIHV0aWxpemUgdGhpcyBmdW5jdGlvbmFsaXR5LCBlbnN1cmUgdGhhdCBgJHNhbml0aXplYCBpcyBhdmFpbGFibGUsIGZvciBleGFtcGxlLCBieSBpbmNsdWRpbmcge0BsaW5rXG4gKiBuZ1Nhbml0aXplfSBpbiB5b3VyIG1vZHVsZSdzIGRlcGVuZGVuY2llcyAobm90IGluIGNvcmUgQW5ndWxhcikuIEluIG9yZGVyIHRvIHVzZSB7QGxpbmsgbmdTYW5pdGl6ZX1cbiAqIGluIHlvdXIgbW9kdWxlJ3MgZGVwZW5kZW5jaWVzLCB5b3UgbmVlZCB0byBpbmNsdWRlIFwiYW5ndWxhci1zYW5pdGl6ZS5qc1wiIGluIHlvdXIgYXBwbGljYXRpb24uXG4gKlxuICogWW91IG1heSBhbHNvIGJ5cGFzcyBzYW5pdGl6YXRpb24gZm9yIHZhbHVlcyB5b3Uga25vdyBhcmUgc2FmZS4gVG8gZG8gc28sIGJpbmQgdG9cbiAqIGFuIGV4cGxpY2l0bHkgdHJ1c3RlZCB2YWx1ZSB2aWEge0BsaW5rIG5nLiRzY2UjdHJ1c3RBc0h0bWwgJHNjZS50cnVzdEFzSHRtbH0uICBTZWUgdGhlIGV4YW1wbGVcbiAqIHVuZGVyIHtAbGluayBuZy4kc2NlI3Nob3ctbWUtYW4tZXhhbXBsZS11c2luZy1zY2UtIFN0cmljdCBDb250ZXh0dWFsIEVzY2FwaW5nIChTQ0UpfS5cbiAqXG4gKiBOb3RlOiBJZiBhIGAkc2FuaXRpemVgIHNlcnZpY2UgaXMgdW5hdmFpbGFibGUgYW5kIHRoZSBib3VuZCB2YWx1ZSBpc24ndCBleHBsaWNpdGx5IHRydXN0ZWQsIHlvdVxuICogd2lsbCBoYXZlIGFuIGV4Y2VwdGlvbiAoaW5zdGVhZCBvZiBhbiBleHBsb2l0LilcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdCaW5kSHRtbCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZS5cbiAqXG4gKiBAZXhhbXBsZVxuXG4gICA8ZXhhbXBsZSBtb2R1bGU9XCJiaW5kSHRtbEV4YW1wbGVcIiBkZXBzPVwiYW5ndWxhci1zYW5pdGl6ZS5qc1wiIG5hbWU9XCJuZy1iaW5kLWh0bWxcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICA8cCBuZy1iaW5kLWh0bWw9XCJteUhUTUxcIj48L3A+XG4gICAgICAgPC9kaXY+XG4gICAgIDwvZmlsZT5cblxuICAgICA8ZmlsZSBuYW1lPVwic2NyaXB0LmpzXCI+XG4gICAgICAgYW5ndWxhci5tb2R1bGUoJ2JpbmRIdG1sRXhhbXBsZScsIFsnbmdTYW5pdGl6ZSddKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgJHNjb3BlLm15SFRNTCA9XG4gICAgICAgICAgICAgICdJIGFtIGFuIDxjb2RlPkhUTUw8L2NvZGU+c3RyaW5nIHdpdGggJyArXG4gICAgICAgICAgICAgICc8YSBocmVmPVwiI1wiPmxpbmtzITwvYT4gYW5kIG90aGVyIDxlbT5zdHVmZjwvZW0+JztcbiAgICAgICAgIH1dKTtcbiAgICAgPC9maWxlPlxuXG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLWJpbmQtaHRtbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbXlIVE1MJykpLmdldFRleHQoKSkudG9CZShcbiAgICAgICAgICAgICAnSSBhbSBhbiBIVE1Mc3RyaW5nIHdpdGggbGlua3MhIGFuZCBvdGhlciBzdHVmZicpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0JpbmRIdG1sRGlyZWN0aXZlID0gWyckc2NlJywgJyRwYXJzZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRzY2UsICRwYXJzZSwgJGNvbXBpbGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nQmluZEh0bWxDb21waWxlKHRFbGVtZW50LCB0QXR0cnMpIHtcbiAgICAgIHZhciBuZ0JpbmRIdG1sR2V0dGVyID0gJHBhcnNlKHRBdHRycy5uZ0JpbmRIdG1sKTtcbiAgICAgIHZhciBuZ0JpbmRIdG1sV2F0Y2ggPSAkcGFyc2UodEF0dHJzLm5nQmluZEh0bWwsIGZ1bmN0aW9uIHNjZVZhbHVlT2YodmFsKSB7XG4gICAgICAgIC8vIFVud3JhcCB0aGUgdmFsdWUgdG8gY29tcGFyZSB0aGUgYWN0dWFsIGlubmVyIHNhZmUgdmFsdWUsIG5vdCB0aGUgd3JhcHBlciBvYmplY3QuXG4gICAgICAgIHJldHVybiAkc2NlLnZhbHVlT2YodmFsKTtcbiAgICAgIH0pO1xuICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nQ2xhc3ModEVsZW1lbnQpO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdCaW5kSHRtbExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgICAgJGNvbXBpbGUuJCRhZGRCaW5kaW5nSW5mbyhlbGVtZW50LCBhdHRyLm5nQmluZEh0bWwpO1xuXG4gICAgICAgIHNjb3BlLiR3YXRjaChuZ0JpbmRIdG1sV2F0Y2gsIGZ1bmN0aW9uIG5nQmluZEh0bWxXYXRjaEFjdGlvbigpIHtcbiAgICAgICAgICAvLyBUaGUgd2F0Y2hlZCB2YWx1ZSBpcyB0aGUgdW53cmFwcGVkIHZhbHVlLiBUbyBhdm9pZCByZS1lc2NhcGluZywgdXNlIHRoZSBkaXJlY3QgZ2V0dGVyLlxuICAgICAgICAgIHZhciB2YWx1ZSA9IG5nQmluZEh0bWxHZXR0ZXIoc2NvcGUpO1xuICAgICAgICAgIGVsZW1lbnQuaHRtbCgkc2NlLmdldFRydXN0ZWRIdG1sKHZhbHVlKSB8fCAnJyk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0NoYW5nZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRXZhbHVhdGUgdGhlIGdpdmVuIGV4cHJlc3Npb24gd2hlbiB0aGUgdXNlciBjaGFuZ2VzIHRoZSBpbnB1dC5cbiAqIFRoZSBleHByZXNzaW9uIGlzIGV2YWx1YXRlZCBpbW1lZGlhdGVseSwgdW5saWtlIHRoZSBKYXZhU2NyaXB0IG9uY2hhbmdlIGV2ZW50XG4gKiB3aGljaCBvbmx5IHRyaWdnZXJzIGF0IHRoZSBlbmQgb2YgYSBjaGFuZ2UgKHVzdWFsbHksIHdoZW4gdGhlIHVzZXIgbGVhdmVzIHRoZVxuICogZm9ybSBlbGVtZW50IG9yIHByZXNzZXMgdGhlIHJldHVybiBrZXkpLlxuICpcbiAqIFRoZSBgbmdDaGFuZ2VgIGV4cHJlc3Npb24gaXMgb25seSBldmFsdWF0ZWQgd2hlbiBhIGNoYW5nZSBpbiB0aGUgaW5wdXQgdmFsdWUgY2F1c2VzXG4gKiBhIG5ldyB2YWx1ZSB0byBiZSBjb21taXR0ZWQgdG8gdGhlIG1vZGVsLlxuICpcbiAqIEl0IHdpbGwgbm90IGJlIGV2YWx1YXRlZDpcbiAqICogaWYgdGhlIHZhbHVlIHJldHVybmVkIGZyb20gdGhlIGAkcGFyc2Vyc2AgdHJhbnNmb3JtYXRpb24gcGlwZWxpbmUgaGFzIG5vdCBjaGFuZ2VkXG4gKiAqIGlmIHRoZSBpbnB1dCBoYXMgY29udGludWVkIHRvIGJlIGludmFsaWQgc2luY2UgdGhlIG1vZGVsIHdpbGwgc3RheSBgbnVsbGBcbiAqICogaWYgdGhlIG1vZGVsIGlzIGNoYW5nZWQgcHJvZ3JhbW1hdGljYWxseSBhbmQgbm90IGJ5IGEgY2hhbmdlIHRvIHRoZSBpbnB1dCB2YWx1ZVxuICpcbiAqXG4gKiBOb3RlLCB0aGlzIGRpcmVjdGl2ZSByZXF1aXJlcyBgbmdNb2RlbGAgdG8gYmUgcHJlc2VudC5cbiAqXG4gKiBAZWxlbWVudCBpbnB1dFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0NoYW5nZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uIGNoYW5nZVxuICogaW4gaW5wdXQgdmFsdWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0NoYW5nZS1kaXJlY3RpdmVcIiBtb2R1bGU9XCJjaGFuZ2VFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPHNjcmlwdD5cbiAqICAgICAgIGFuZ3VsYXIubW9kdWxlKCdjaGFuZ2VFeGFtcGxlJywgW10pXG4gKiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICAgJHNjb3BlLmNvdW50ZXIgPSAwO1xuICogICAgICAgICAgICRzY29wZS5jaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICAgICRzY29wZS5jb3VudGVyKys7XG4gKiAgICAgICAgICAgfTtcbiAqICAgICAgICAgfV0pO1xuICogICAgIDwvc2NyaXB0PlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjb25maXJtZWRcIiBuZy1jaGFuZ2U9XCJjaGFuZ2UoKVwiIGlkPVwibmctY2hhbmdlLWV4YW1wbGUxXCIgLz5cbiAqICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNvbmZpcm1lZFwiIGlkPVwibmctY2hhbmdlLWV4YW1wbGUyXCIgLz5cbiAqICAgICAgIDxsYWJlbCBmb3I9XCJuZy1jaGFuZ2UtZXhhbXBsZTJcIj5Db25maXJtZWQ8L2xhYmVsPjxiciAvPlxuICogICAgICAgPHR0PmRlYnVnID0ge3tjb25maXJtZWR9fTwvdHQ+PGJyLz5cbiAqICAgICAgIDx0dD5jb3VudGVyID0ge3tjb3VudGVyfX08L3R0Pjxici8+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIHZhciBjb3VudGVyID0gZWxlbWVudChieS5iaW5kaW5nKCdjb3VudGVyJykpO1xuICogICAgIHZhciBkZWJ1ZyA9IGVsZW1lbnQoYnkuYmluZGluZygnY29uZmlybWVkJykpO1xuICpcbiAqICAgICBpdCgnc2hvdWxkIGV2YWx1YXRlIHRoZSBleHByZXNzaW9uIGlmIGNoYW5naW5nIGZyb20gdmlldycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJzAnKTtcbiAqXG4gKiAgICAgICBlbGVtZW50KGJ5LmlkKCduZy1jaGFuZ2UtZXhhbXBsZTEnKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvQ29udGFpbignMScpO1xuICogICAgICAgZXhwZWN0KGRlYnVnLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gKiAgICAgfSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgbm90IGV2YWx1YXRlIHRoZSBleHByZXNzaW9uIGlmIGNoYW5naW5nIGZyb20gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGVsZW1lbnQoYnkuaWQoJ25nLWNoYW5nZS1leGFtcGxlMicpKS5jbGljaygpO1xuXG4gKiAgICAgICBleHBlY3QoY291bnRlci5nZXRUZXh0KCkpLnRvQ29udGFpbignMCcpO1xuICogICAgICAgZXhwZWN0KGRlYnVnLmdldFRleHQoKSkudG9Db250YWluKCd0cnVlJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQ2hhbmdlRGlyZWN0aXZlID0gdmFsdWVGbih7XG4gIHJlc3RyaWN0OiAnQScsXG4gIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcbiAgICBjdHJsLiR2aWV3Q2hhbmdlTGlzdGVuZXJzLnB1c2goZnVuY3Rpb24oKSB7XG4gICAgICBzY29wZS4kZXZhbChhdHRyLm5nQ2hhbmdlKTtcbiAgICB9KTtcbiAgfVxufSk7XG5cbi8qIGV4cG9ydGVkXG4gIG5nQ2xhc3NEaXJlY3RpdmUsXG4gIG5nQ2xhc3NFdmVuRGlyZWN0aXZlLFxuICBuZ0NsYXNzT2RkRGlyZWN0aXZlXG4qL1xuXG5mdW5jdGlvbiBjbGFzc0RpcmVjdGl2ZShuYW1lLCBzZWxlY3Rvcikge1xuICBuYW1lID0gJ25nQ2xhc3MnICsgbmFtZTtcbiAgdmFyIGluZGV4V2F0Y2hFeHByZXNzaW9uO1xuXG4gIHJldHVybiBbJyRwYXJzZScsIGZ1bmN0aW9uKCRwYXJzZSkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0FDJyxcbiAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICAgIHZhciBleHByZXNzaW9uID0gYXR0cltuYW1lXS50cmltKCk7XG4gICAgICAgIHZhciBpc09uZVRpbWUgPSAoZXhwcmVzc2lvbi5jaGFyQXQoMCkgPT09ICc6JykgJiYgKGV4cHJlc3Npb24uY2hhckF0KDEpID09PSAnOicpO1xuXG4gICAgICAgIHZhciB3YXRjaEludGVyY2VwdG9yID0gaXNPbmVUaW1lID8gdG9GbGF0VmFsdWUgOiB0b0NsYXNzU3RyaW5nO1xuICAgICAgICB2YXIgd2F0Y2hFeHByZXNzaW9uID0gJHBhcnNlKGV4cHJlc3Npb24sIHdhdGNoSW50ZXJjZXB0b3IpO1xuICAgICAgICB2YXIgd2F0Y2hBY3Rpb24gPSBpc09uZVRpbWUgPyBuZ0NsYXNzT25lVGltZVdhdGNoQWN0aW9uIDogbmdDbGFzc1dhdGNoQWN0aW9uO1xuXG4gICAgICAgIHZhciBjbGFzc0NvdW50cyA9IGVsZW1lbnQuZGF0YSgnJGNsYXNzQ291bnRzJyk7XG4gICAgICAgIHZhciBvbGRNb2R1bG8gPSB0cnVlO1xuICAgICAgICB2YXIgb2xkQ2xhc3NTdHJpbmc7XG5cbiAgICAgICAgaWYgKCFjbGFzc0NvdW50cykge1xuICAgICAgICAgIC8vIFVzZSBjcmVhdGVNYXAoKSB0byBwcmV2ZW50IGNsYXNzIGFzc3VtcHRpb25zIGludm9sdmluZyBwcm9wZXJ0eVxuICAgICAgICAgIC8vIG5hbWVzIGluIE9iamVjdC5wcm90b3R5cGVcbiAgICAgICAgICBjbGFzc0NvdW50cyA9IGNyZWF0ZU1hcCgpO1xuICAgICAgICAgIGVsZW1lbnQuZGF0YSgnJGNsYXNzQ291bnRzJywgY2xhc3NDb3VudHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5hbWUgIT09ICduZ0NsYXNzJykge1xuICAgICAgICAgIGlmICghaW5kZXhXYXRjaEV4cHJlc3Npb24pIHtcbiAgICAgICAgICAgIGluZGV4V2F0Y2hFeHByZXNzaW9uID0gJHBhcnNlKCckaW5kZXgnLCBmdW5jdGlvbiBtb2R1bG9Ud28oJGluZGV4KSB7XG4gICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICAgICAgICAgIHJldHVybiAkaW5kZXggJiAxO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2NvcGUuJHdhdGNoKGluZGV4V2F0Y2hFeHByZXNzaW9uLCBuZ0NsYXNzSW5kZXhXYXRjaEFjdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBzY29wZS4kd2F0Y2god2F0Y2hFeHByZXNzaW9uLCB3YXRjaEFjdGlvbiwgaXNPbmVUaW1lKTtcblxuICAgICAgICBmdW5jdGlvbiBhZGRDbGFzc2VzKGNsYXNzU3RyaW5nKSB7XG4gICAgICAgICAgY2xhc3NTdHJpbmcgPSBkaWdlc3RDbGFzc0NvdW50cyhzcGxpdChjbGFzc1N0cmluZyksIDEpO1xuICAgICAgICAgIGF0dHIuJGFkZENsYXNzKGNsYXNzU3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMoY2xhc3NTdHJpbmcpIHtcbiAgICAgICAgICBjbGFzc1N0cmluZyA9IGRpZ2VzdENsYXNzQ291bnRzKHNwbGl0KGNsYXNzU3RyaW5nKSwgLTEpO1xuICAgICAgICAgIGF0dHIuJHJlbW92ZUNsYXNzKGNsYXNzU3RyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNsYXNzZXMob2xkQ2xhc3NTdHJpbmcsIG5ld0NsYXNzU3RyaW5nKSB7XG4gICAgICAgICAgdmFyIG9sZENsYXNzQXJyYXkgPSBzcGxpdChvbGRDbGFzc1N0cmluZyk7XG4gICAgICAgICAgdmFyIG5ld0NsYXNzQXJyYXkgPSBzcGxpdChuZXdDbGFzc1N0cmluZyk7XG5cbiAgICAgICAgICB2YXIgdG9SZW1vdmVBcnJheSA9IGFycmF5RGlmZmVyZW5jZShvbGRDbGFzc0FycmF5LCBuZXdDbGFzc0FycmF5KTtcbiAgICAgICAgICB2YXIgdG9BZGRBcnJheSA9IGFycmF5RGlmZmVyZW5jZShuZXdDbGFzc0FycmF5LCBvbGRDbGFzc0FycmF5KTtcblxuICAgICAgICAgIHZhciB0b1JlbW92ZVN0cmluZyA9IGRpZ2VzdENsYXNzQ291bnRzKHRvUmVtb3ZlQXJyYXksIC0xKTtcbiAgICAgICAgICB2YXIgdG9BZGRTdHJpbmcgPSBkaWdlc3RDbGFzc0NvdW50cyh0b0FkZEFycmF5LCAxKTtcblxuICAgICAgICAgIGF0dHIuJGFkZENsYXNzKHRvQWRkU3RyaW5nKTtcbiAgICAgICAgICBhdHRyLiRyZW1vdmVDbGFzcyh0b1JlbW92ZVN0cmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkaWdlc3RDbGFzc0NvdW50cyhjbGFzc0FycmF5LCBjb3VudCkge1xuICAgICAgICAgIHZhciBjbGFzc2VzVG9VcGRhdGUgPSBbXTtcblxuICAgICAgICAgIGZvckVhY2goY2xhc3NBcnJheSwgZnVuY3Rpb24oY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICBpZiAoY291bnQgPiAwIHx8IGNsYXNzQ291bnRzW2NsYXNzTmFtZV0pIHtcbiAgICAgICAgICAgICAgY2xhc3NDb3VudHNbY2xhc3NOYW1lXSA9IChjbGFzc0NvdW50c1tjbGFzc05hbWVdIHx8IDApICsgY291bnQ7XG4gICAgICAgICAgICAgIGlmIChjbGFzc0NvdW50c1tjbGFzc05hbWVdID09PSArKGNvdW50ID4gMCkpIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzVG9VcGRhdGUucHVzaChjbGFzc05hbWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gY2xhc3Nlc1RvVXBkYXRlLmpvaW4oJyAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG5nQ2xhc3NJbmRleFdhdGNoQWN0aW9uKG5ld01vZHVsbykge1xuICAgICAgICAgIC8vIFRoaXMgd2F0Y2gtYWN0aW9uIHNob3VsZCBydW4gYmVmb3JlIHRoZSBgbmdDbGFzc1tPbmVUaW1lXVdhdGNoQWN0aW9uKClgLCB0aHVzIGl0XG4gICAgICAgICAgLy8gYWRkcy9yZW1vdmVzIGBvbGRDbGFzc1N0cmluZ2AuIElmIHRoZSBgbmdDbGFzc2AgZXhwcmVzc2lvbiBoYXMgY2hhbmdlZCBhcyB3ZWxsLCB0aGVcbiAgICAgICAgICAvLyBgbmdDbGFzc1tPbmVUaW1lXVdhdGNoQWN0aW9uKClgIHdpbGwgdXBkYXRlIHRoZSBjbGFzc2VzLlxuICAgICAgICAgIGlmIChuZXdNb2R1bG8gPT09IHNlbGVjdG9yKSB7XG4gICAgICAgICAgICBhZGRDbGFzc2VzKG9sZENsYXNzU3RyaW5nKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVtb3ZlQ2xhc3NlcyhvbGRDbGFzc1N0cmluZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb2xkTW9kdWxvID0gbmV3TW9kdWxvO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbmdDbGFzc09uZVRpbWVXYXRjaEFjdGlvbihuZXdDbGFzc1ZhbHVlKSB7XG4gICAgICAgICAgdmFyIG5ld0NsYXNzU3RyaW5nID0gdG9DbGFzc1N0cmluZyhuZXdDbGFzc1ZhbHVlKTtcblxuICAgICAgICAgIGlmIChuZXdDbGFzc1N0cmluZyAhPT0gb2xkQ2xhc3NTdHJpbmcpIHtcbiAgICAgICAgICAgIG5nQ2xhc3NXYXRjaEFjdGlvbihuZXdDbGFzc1N0cmluZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbmdDbGFzc1dhdGNoQWN0aW9uKG5ld0NsYXNzU3RyaW5nKSB7XG4gICAgICAgICAgaWYgKG9sZE1vZHVsbyA9PT0gc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIHVwZGF0ZUNsYXNzZXMob2xkQ2xhc3NTdHJpbmcsIG5ld0NsYXNzU3RyaW5nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvbGRDbGFzc1N0cmluZyA9IG5ld0NsYXNzU3RyaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfV07XG5cbiAgLy8gSGVscGVyc1xuICBmdW5jdGlvbiBhcnJheURpZmZlcmVuY2UodG9rZW5zMSwgdG9rZW5zMikge1xuICAgIGlmICghdG9rZW5zMSB8fCAhdG9rZW5zMS5sZW5ndGgpIHJldHVybiBbXTtcbiAgICBpZiAoIXRva2VuczIgfHwgIXRva2VuczIubGVuZ3RoKSByZXR1cm4gdG9rZW5zMTtcblxuICAgIHZhciB2YWx1ZXMgPSBbXTtcblxuICAgIG91dGVyOlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zMS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zMVtpXTtcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdG9rZW5zMi5sZW5ndGg7IGorKykge1xuICAgICAgICBpZiAodG9rZW4gPT09IHRva2VuczJbal0pIGNvbnRpbnVlIG91dGVyO1xuICAgICAgfVxuICAgICAgdmFsdWVzLnB1c2godG9rZW4pO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH1cblxuICBmdW5jdGlvbiBzcGxpdChjbGFzc1N0cmluZykge1xuICAgIHJldHVybiBjbGFzc1N0cmluZyAmJiBjbGFzc1N0cmluZy5zcGxpdCgnICcpO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9DbGFzc1N0cmluZyhjbGFzc1ZhbHVlKSB7XG4gICAgdmFyIGNsYXNzU3RyaW5nID0gY2xhc3NWYWx1ZTtcblxuICAgIGlmIChpc0FycmF5KGNsYXNzVmFsdWUpKSB7XG4gICAgICBjbGFzc1N0cmluZyA9IGNsYXNzVmFsdWUubWFwKHRvQ2xhc3NTdHJpbmcpLmpvaW4oJyAnKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGNsYXNzVmFsdWUpKSB7XG4gICAgICBjbGFzc1N0cmluZyA9IE9iamVjdC5rZXlzKGNsYXNzVmFsdWUpLlxuICAgICAgICBmaWx0ZXIoZnVuY3Rpb24oa2V5KSB7IHJldHVybiBjbGFzc1ZhbHVlW2tleV07IH0pLlxuICAgICAgICBqb2luKCcgJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsYXNzU3RyaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gdG9GbGF0VmFsdWUoY2xhc3NWYWx1ZSkge1xuICAgIHZhciBmbGF0VmFsdWUgPSBjbGFzc1ZhbHVlO1xuXG4gICAgaWYgKGlzQXJyYXkoY2xhc3NWYWx1ZSkpIHtcbiAgICAgIGZsYXRWYWx1ZSA9IGNsYXNzVmFsdWUubWFwKHRvRmxhdFZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KGNsYXNzVmFsdWUpKSB7XG4gICAgICB2YXIgaGFzVW5kZWZpbmVkID0gZmFsc2U7XG5cbiAgICAgIGZsYXRWYWx1ZSA9IE9iamVjdC5rZXlzKGNsYXNzVmFsdWUpLmZpbHRlcihmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gY2xhc3NWYWx1ZVtrZXldO1xuXG4gICAgICAgIGlmICghaGFzVW5kZWZpbmVkICYmIGlzVW5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgIGhhc1VuZGVmaW5lZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KTtcblxuICAgICAgaWYgKGhhc1VuZGVmaW5lZCkge1xuICAgICAgICAvLyBQcmV2ZW50IHRoZSBgb25lVGltZUxpdGVyYWxXYXRjaEludGVyY2VwdG9yYCBmcm9tIHVucmVnaXN0ZXJpbmdcbiAgICAgICAgLy8gdGhlIHdhdGNoZXIsIGJ5IGluY2x1ZGluZyBhdCBsZWFzdCBvbmUgYHVuZGVmaW5lZGAgdmFsdWUuXG4gICAgICAgIGZsYXRWYWx1ZS5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZsYXRWYWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ2xhc3NcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NsYXNzYCBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBkeW5hbWljYWxseSBzZXQgQ1NTIGNsYXNzZXMgb24gYW4gSFRNTCBlbGVtZW50IGJ5IGRhdGFiaW5kaW5nXG4gKiBhbiBleHByZXNzaW9uIHRoYXQgcmVwcmVzZW50cyBhbGwgY2xhc3NlcyB0byBiZSBhZGRlZC5cbiAqXG4gKiBUaGUgZGlyZWN0aXZlIG9wZXJhdGVzIGluIHRocmVlIGRpZmZlcmVudCB3YXlzLCBkZXBlbmRpbmcgb24gd2hpY2ggb2YgdGhyZWUgdHlwZXMgdGhlIGV4cHJlc3Npb25cbiAqIGV2YWx1YXRlcyB0bzpcbiAqXG4gKiAxLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBzdHJpbmcsIHRoZSBzdHJpbmcgc2hvdWxkIGJlIG9uZSBvciBtb3JlIHNwYWNlLWRlbGltaXRlZCBjbGFzc1xuICogbmFtZXMuXG4gKlxuICogMi4gSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGFuIG9iamVjdCwgdGhlbiBmb3IgZWFjaCBrZXktdmFsdWUgcGFpciBvZiB0aGVcbiAqIG9iamVjdCB3aXRoIGEgdHJ1dGh5IHZhbHVlIHRoZSBjb3JyZXNwb25kaW5nIGtleSBpcyB1c2VkIGFzIGEgY2xhc3MgbmFtZS5cbiAqXG4gKiAzLiBJZiB0aGUgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYW4gYXJyYXksIGVhY2ggZWxlbWVudCBvZiB0aGUgYXJyYXkgc2hvdWxkIGVpdGhlciBiZSBhIHN0cmluZyBhcyBpblxuICogdHlwZSAxIG9yIGFuIG9iamVjdCBhcyBpbiB0eXBlIDIuIFRoaXMgbWVhbnMgdGhhdCB5b3UgY2FuIG1peCBzdHJpbmdzIGFuZCBvYmplY3RzIHRvZ2V0aGVyIGluIGFuIGFycmF5XG4gKiB0byBnaXZlIHlvdSBtb3JlIGNvbnRyb2wgb3ZlciB3aGF0IENTUyBjbGFzc2VzIGFwcGVhci4gU2VlIHRoZSBjb2RlIGJlbG93IGZvciBhbiBleGFtcGxlIG9mIHRoaXMuXG4gKlxuICpcbiAqIFRoZSBkaXJlY3RpdmUgd29uJ3QgYWRkIGR1cGxpY2F0ZSBjbGFzc2VzIGlmIGEgcGFydGljdWxhciBjbGFzcyB3YXMgYWxyZWFkeSBzZXQuXG4gKlxuICogV2hlbiB0aGUgZXhwcmVzc2lvbiBjaGFuZ2VzLCB0aGUgcHJldmlvdXNseSBhZGRlZCBjbGFzc2VzIGFyZSByZW1vdmVkIGFuZCBvbmx5IHRoZW4gYXJlIHRoZVxuICogbmV3IGNsYXNzZXMgYWRkZWQuXG4gKlxuICogQGtub3duSXNzdWVcbiAqIFlvdSBzaG91bGQgbm90IHVzZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiBpbnRlcnBvbGF0aW9ufSBpbiB0aGUgdmFsdWUgb2YgdGhlIGBjbGFzc2BcbiAqIGF0dHJpYnV0ZSwgd2hlbiB1c2luZyB0aGUgYG5nQ2xhc3NgIGRpcmVjdGl2ZSBvbiB0aGUgc2FtZSBlbGVtZW50LlxuICogU2VlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uI2tub3duLWlzc3VlcyBoZXJlfSBmb3IgbW9yZSBpbmZvLlxuICpcbiAqIEBhbmltYXRpb25zXG4gKiB8IEFuaW1hdGlvbiAgICAgICAgICAgICAgICAgICAgICAgIHwgT2NjdXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2FkZENsYXNzIGFkZENsYXNzfSAgICAgICB8IGp1c3QgYmVmb3JlIHRoZSBjbGFzcyBpcyBhcHBsaWVkIHRvIHRoZSBlbGVtZW50ICAgfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjcmVtb3ZlQ2xhc3MgcmVtb3ZlQ2xhc3N9IHwganVzdCBiZWZvcmUgdGhlIGNsYXNzIGlzIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCB8XG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3Mge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbC4gVGhlIHJlc3VsdFxuICogICBvZiB0aGUgZXZhbHVhdGlvbiBjYW4gYmUgYSBzdHJpbmcgcmVwcmVzZW50aW5nIHNwYWNlIGRlbGltaXRlZCBjbGFzc1xuICogICBuYW1lcywgYW4gYXJyYXksIG9yIGEgbWFwIG9mIGNsYXNzIG5hbWVzIHRvIGJvb2xlYW4gdmFsdWVzLiBJbiB0aGUgY2FzZSBvZiBhIG1hcCwgdGhlXG4gKiAgIG5hbWVzIG9mIHRoZSBwcm9wZXJ0aWVzIHdob3NlIHZhbHVlcyBhcmUgdHJ1dGh5IHdpbGwgYmUgYWRkZWQgYXMgY3NzIGNsYXNzZXMgdG8gdGhlXG4gKiAgIGVsZW1lbnQuXG4gKlxuICogQGV4YW1wbGUgRXhhbXBsZSB0aGF0IGRlbW9uc3RyYXRlcyBiYXNpYyBiaW5kaW5ncyB2aWEgbmdDbGFzcyBkaXJlY3RpdmUuXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctY2xhc3NcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICA8cCBuZy1jbGFzcz1cIntzdHJpa2U6IGRlbGV0ZWQsIGJvbGQ6IGltcG9ydGFudCwgJ2hhcy1lcnJvcic6IGVycm9yfVwiPk1hcCBTeW50YXggRXhhbXBsZTwvcD5cbiAgICAgICA8bGFiZWw+XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiZGVsZXRlZFwiPlxuICAgICAgICAgIGRlbGV0ZWQgKGFwcGx5IFwic3RyaWtlXCIgY2xhc3MpXG4gICAgICAgPC9sYWJlbD48YnI+XG4gICAgICAgPGxhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImltcG9ydGFudFwiPlxuICAgICAgICAgIGltcG9ydGFudCAoYXBwbHkgXCJib2xkXCIgY2xhc3MpXG4gICAgICAgPC9sYWJlbD48YnI+XG4gICAgICAgPGxhYmVsPlxuICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImVycm9yXCI+XG4gICAgICAgICAgZXJyb3IgKGFwcGx5IFwiaGFzLWVycm9yXCIgY2xhc3MpXG4gICAgICAgPC9sYWJlbD5cbiAgICAgICA8aHI+XG4gICAgICAgPHAgbmctY2xhc3M9XCJzdHlsZVwiPlVzaW5nIFN0cmluZyBTeW50YXg8L3A+XG4gICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzdHlsZVwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCBzdHJpa2UgcmVkXCIgYXJpYS1sYWJlbD1cIlR5cGU6IGJvbGQgc3RyaWtlIHJlZFwiPlxuICAgICAgIDxocj5cbiAgICAgICA8cCBuZy1jbGFzcz1cIltzdHlsZTEsIHN0eWxlMiwgc3R5bGUzXVwiPlVzaW5nIEFycmF5IFN5bnRheDwvcD5cbiAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJzdHlsZTFcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZFwiPjxicj5cbiAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJzdHlsZTJcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlR5cGU6IGJvbGQsIHN0cmlrZSBvciByZWRcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZCAyXCI+PGJyPlxuICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInN0eWxlM1wiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiVHlwZTogYm9sZCwgc3RyaWtlIG9yIHJlZFwiIGFyaWEtbGFiZWw9XCJUeXBlOiBib2xkLCBzdHJpa2Ugb3IgcmVkIDNcIj48YnI+XG4gICAgICAgPGhyPlxuICAgICAgIDxwIG5nLWNsYXNzPVwiW3N0eWxlNCwge29yYW5nZTogd2FybmluZ31dXCI+VXNpbmcgQXJyYXkgYW5kIE1hcCBTeW50YXg8L3A+XG4gICAgICAgPGlucHV0IG5nLW1vZGVsPVwic3R5bGU0XCIgcGxhY2Vob2xkZXI9XCJUeXBlOiBib2xkLCBzdHJpa2VcIiBhcmlhLWxhYmVsPVwiVHlwZTogYm9sZCwgc3RyaWtlXCI+PGJyPlxuICAgICAgIDxsYWJlbD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJ3YXJuaW5nXCI+IHdhcm5pbmcgKGFwcGx5IFwib3JhbmdlXCIgY2xhc3MpPC9sYWJlbD5cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgLnN0cmlrZSB7XG4gICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xuICAgICAgIH1cbiAgICAgICAuYm9sZCB7XG4gICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgICAgIH1cbiAgICAgICAucmVkIHtcbiAgICAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICB9XG4gICAgICAgLmhhcy1lcnJvciB7XG4gICAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHllbGxvdztcbiAgICAgICB9XG4gICAgICAgLm9yYW5nZSB7XG4gICAgICAgICAgIGNvbG9yOiBvcmFuZ2U7XG4gICAgICAgfVxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgcHMgPSBlbGVtZW50LmFsbChieS5jc3MoJ3AnKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIGxldCB5b3UgdG9nZ2xlIHRoZSBjbGFzcycsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLm5vdC50b01hdGNoKC9ib2xkLyk7XG4gICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLm5vdC50b01hdGNoKC9oYXMtZXJyb3IvKTtcblxuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnaW1wb3J0YW50JykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QocHMuZmlyc3QoKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvTWF0Y2goL2JvbGQvKTtcblxuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnZXJyb3InKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChwcy5maXJzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9NYXRjaCgvaGFzLWVycm9yLyk7XG4gICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIGxldCB5b3UgdG9nZ2xlIHN0cmluZyBleGFtcGxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QocHMuZ2V0KDEpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZScpKS5jbGVhcigpO1xuICAgICAgICAgZWxlbWVudChieS5tb2RlbCgnc3R5bGUnKSkuc2VuZEtleXMoJ3JlZCcpO1xuICAgICAgICAgZXhwZWN0KHBzLmdldCgxKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJ3JlZCcpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ2FycmF5IGV4YW1wbGUgc2hvdWxkIGhhdmUgMyBjbGFzc2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QocHMuZ2V0KDIpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTEnKSkuc2VuZEtleXMoJ2JvbGQnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3N0eWxlMicpKS5zZW5kS2V5cygnc3RyaWtlJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTMnKSkuc2VuZEtleXMoJ3JlZCcpO1xuICAgICAgICAgZXhwZWN0KHBzLmdldCgyKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLnRvQmUoJ2JvbGQgc3RyaWtlIHJlZCcpO1xuICAgICAgIH0pO1xuXG4gICAgICAgaXQoJ2FycmF5IHdpdGggbWFwIGV4YW1wbGUgc2hvdWxkIGhhdmUgMiBjbGFzc2VzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QocHMubGFzdCgpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9CZSgnJyk7XG4gICAgICAgICBlbGVtZW50KGJ5Lm1vZGVsKCdzdHlsZTQnKSkuc2VuZEtleXMoJ2JvbGQnKTtcbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3dhcm5pbmcnKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChwcy5sYXN0KCkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS50b0JlKCdib2xkIG9yYW5nZScpO1xuICAgICAgIH0pO1xuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG5cbiAgICMjIEFuaW1hdGlvbnNcblxuICAgVGhlIGV4YW1wbGUgYmVsb3cgZGVtb25zdHJhdGVzIGhvdyB0byBwZXJmb3JtIGFuaW1hdGlvbnMgdXNpbmcgbmdDbGFzcy5cblxuICAgPGV4YW1wbGUgbW9kdWxlPVwibmdBbmltYXRlXCIgZGVwcz1cImFuZ3VsYXItYW5pbWF0ZS5qc1wiIGFuaW1hdGlvbnM9XCJ0cnVlXCIgbmFtZT1cIm5nLWNsYXNzXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8aW5wdXQgaWQ9XCJzZXRidG5cIiB0eXBlPVwiYnV0dG9uXCIgdmFsdWU9XCJzZXRcIiBuZy1jbGljaz1cIm15VmFyPSdteS1jbGFzcydcIj5cbiAgICAgIDxpbnB1dCBpZD1cImNsZWFyYnRuXCIgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiY2xlYXJcIiBuZy1jbGljaz1cIm15VmFyPScnXCI+XG4gICAgICA8YnI+XG4gICAgICA8c3BhbiBjbGFzcz1cImJhc2UtY2xhc3NcIiBuZy1jbGFzcz1cIm15VmFyXCI+U2FtcGxlIFRleHQ8L3NwYW4+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgIC5iYXNlLWNsYXNzIHtcbiAgICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcbiAgICAgICB9XG5cbiAgICAgICAuYmFzZS1jbGFzcy5teS1jbGFzcyB7XG4gICAgICAgICBjb2xvcjogcmVkO1xuICAgICAgICAgZm9udC1zaXplOjNlbTtcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xhc3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLmJhc2UtY2xhc3MnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QuXG4gICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ3NldGJ0bicpKS5jbGljaygpO1xuXG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5jc3MoJy5iYXNlLWNsYXNzJykpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkuXG4gICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkuaWQoJ2NsZWFyYnRuJykpLmNsaWNrKCk7XG5cbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLmJhc2UtY2xhc3MnKSkuZ2V0QXR0cmlidXRlKCdjbGFzcycpKS5ub3QuXG4gICAgICAgICAgIHRvTWF0Y2goL215LWNsYXNzLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cblxuXG4gICAjIyBuZ0NsYXNzIGFuZCBwcmUtZXhpc3RpbmcgQ1NTMyBUcmFuc2l0aW9ucy9BbmltYXRpb25zXG4gICBUaGUgbmdDbGFzcyBkaXJlY3RpdmUgc3RpbGwgc3VwcG9ydHMgQ1NTMyBUcmFuc2l0aW9ucy9BbmltYXRpb25zIGV2ZW4gaWYgdGhleSBkbyBub3QgZm9sbG93IHRoZSBuZ0FuaW1hdGUgQ1NTIG5hbWluZyBzdHJ1Y3R1cmUuXG4gICBVcG9uIGFuaW1hdGlvbiBuZ0FuaW1hdGUgd2lsbCBhcHBseSBzdXBwbGVtZW50YXJ5IENTUyBjbGFzc2VzIHRvIHRyYWNrIHRoZSBzdGFydCBhbmQgZW5kIG9mIGFuIGFuaW1hdGlvbiwgYnV0IHRoaXMgd2lsbCBub3QgaGluZGVyXG4gICBhbnkgcHJlLWV4aXN0aW5nIENTUyB0cmFuc2l0aW9ucyBhbHJlYWR5IG9uIHRoZSBlbGVtZW50LiBUbyBnZXQgYW4gaWRlYSBvZiB3aGF0IGhhcHBlbnMgZHVyaW5nIGEgY2xhc3MtYmFzZWQgYW5pbWF0aW9uLCBiZSBzdXJlXG4gICB0byB2aWV3IHRoZSBzdGVwIGJ5IHN0ZXAgZGV0YWlscyBvZiB7QGxpbmsgJGFuaW1hdGUjYWRkQ2xhc3MgJGFuaW1hdGUuYWRkQ2xhc3N9IGFuZFxuICAge0BsaW5rICRhbmltYXRlI3JlbW92ZUNsYXNzICRhbmltYXRlLnJlbW92ZUNsYXNzfS5cbiAqL1xudmFyIG5nQ2xhc3NEaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnJywgdHJ1ZSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGFzc09kZFxuICogQHJlc3RyaWN0IEFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nQ2xhc3NPZGRgIGFuZCBgbmdDbGFzc0V2ZW5gIGRpcmVjdGl2ZXMgd29yayBleGFjdGx5IGFzXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xhc3MgbmdDbGFzc30sIGV4Y2VwdCB0aGV5IHdvcmsgaW5cbiAqIGNvbmp1bmN0aW9uIHdpdGggYG5nUmVwZWF0YCBhbmQgdGFrZSBlZmZlY3Qgb25seSBvbiBvZGQgKGV2ZW4pIHJvd3MuXG4gKlxuICogVGhpcyBkaXJlY3RpdmUgY2FuIGJlIGFwcGxpZWQgb25seSB3aXRoaW4gdGhlIHNjb3BlIG9mIGFuXG4gKiB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nUmVwZWF0IG5nUmVwZWF0fS5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGFzc09kZCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsLiBUaGUgcmVzdWx0XG4gKiAgIG9mIHRoZSBldmFsdWF0aW9uIGNhbiBiZSBhIHN0cmluZyByZXByZXNlbnRpbmcgc3BhY2UgZGVsaW1pdGVkIGNsYXNzIG5hbWVzIG9yIGFuIGFycmF5LlxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctY2xhc3Mtb2RkXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxvbCBuZy1pbml0PVwibmFtZXM9WydKb2huJywgJ01hcnknLCAnQ2F0ZScsICdTdXonXVwiPlxuICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWNsYXNzLW9kZD1cIidvZGQnXCIgbmctY2xhc3MtZXZlbj1cIidldmVuJ1wiPlxuICAgICAgICAgICAgIHt7bmFtZX19XG4gICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L29sPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAub2RkIHtcbiAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgfVxuICAgICAgIC5ldmVuIHtcbiAgICAgICAgIGNvbG9yOiBibHVlO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGFzcy1vZGQgYW5kIG5nLWNsYXNzLWV2ZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDApLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9vZGQvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDEpLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQ2xhc3NPZGREaXJlY3RpdmUgPSBjbGFzc0RpcmVjdGl2ZSgnT2RkJywgMCk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGFzc0V2ZW5cbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NsYXNzT2RkYCBhbmQgYG5nQ2xhc3NFdmVuYCBkaXJlY3RpdmVzIHdvcmsgZXhhY3RseSBhc1xuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0NsYXNzIG5nQ2xhc3N9LCBleGNlcHQgdGhleSB3b3JrIGluXG4gKiBjb25qdW5jdGlvbiB3aXRoIGBuZ1JlcGVhdGAgYW5kIHRha2UgZWZmZWN0IG9ubHkgb24gb2RkIChldmVuKSByb3dzLlxuICpcbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIG9ubHkgd2l0aGluIHRoZSBzY29wZSBvZiBhblxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ2xhc3NFdmVuIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuIFRoZVxuICogICByZXN1bHQgb2YgdGhlIGV2YWx1YXRpb24gY2FuIGJlIGEgc3RyaW5nIHJlcHJlc2VudGluZyBzcGFjZSBkZWxpbWl0ZWQgY2xhc3MgbmFtZXMgb3IgYW4gYXJyYXkuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1jbGFzcy1ldmVuXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxvbCBuZy1pbml0PVwibmFtZXM9WydKb2huJywgJ01hcnknLCAnQ2F0ZScsICdTdXonXVwiPlxuICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJuYW1lIGluIG5hbWVzXCI+XG4gICAgICAgICAgIDxzcGFuIG5nLWNsYXNzLW9kZD1cIidvZGQnXCIgbmctY2xhc3MtZXZlbj1cIidldmVuJ1wiPlxuICAgICAgICAgICAgIHt7bmFtZX19ICZuYnNwOyAmbmJzcDsgJm5ic3A7XG4gICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L29sPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICAub2RkIHtcbiAgICAgICAgIGNvbG9yOiByZWQ7XG4gICAgICAgfVxuICAgICAgIC5ldmVuIHtcbiAgICAgICAgIGNvbG9yOiBibHVlO1xuICAgICAgIH1cbiAgICAgPC9maWxlPlxuICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZy1jbGFzcy1vZGQgYW5kIG5nLWNsYXNzLWV2ZW4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDApLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9vZGQvKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LnJlcGVhdGVyKCduYW1lIGluIG5hbWVzJykucm93KDEpLmNvbHVtbignbmFtZScpKS5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLlxuICAgICAgICAgICB0b01hdGNoKC9ldmVuLyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nQ2xhc3NFdmVuRGlyZWN0aXZlID0gY2xhc3NEaXJlY3RpdmUoJ0V2ZW4nLCAxKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0Nsb2FrXG4gKiBAcmVzdHJpY3QgQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdDbG9ha2AgZGlyZWN0aXZlIGlzIHVzZWQgdG8gcHJldmVudCB0aGUgQW5ndWxhciBodG1sIHRlbXBsYXRlIGZyb20gYmVpbmcgYnJpZWZseVxuICogZGlzcGxheWVkIGJ5IHRoZSBicm93c2VyIGluIGl0cyByYXcgKHVuY29tcGlsZWQpIGZvcm0gd2hpbGUgeW91ciBhcHBsaWNhdGlvbiBpcyBsb2FkaW5nLiBVc2UgdGhpc1xuICogZGlyZWN0aXZlIHRvIGF2b2lkIHRoZSB1bmRlc2lyYWJsZSBmbGlja2VyIGVmZmVjdCBjYXVzZWQgYnkgdGhlIGh0bWwgdGVtcGxhdGUgZGlzcGxheS5cbiAqXG4gKiBUaGUgZGlyZWN0aXZlIGNhbiBiZSBhcHBsaWVkIHRvIHRoZSBgPGJvZHk+YCBlbGVtZW50LCBidXQgdGhlIHByZWZlcnJlZCB1c2FnZSBpcyB0byBhcHBseVxuICogbXVsdGlwbGUgYG5nQ2xvYWtgIGRpcmVjdGl2ZXMgdG8gc21hbGwgcG9ydGlvbnMgb2YgdGhlIHBhZ2UgdG8gcGVybWl0IHByb2dyZXNzaXZlIHJlbmRlcmluZ1xuICogb2YgdGhlIGJyb3dzZXIgdmlldy5cbiAqXG4gKiBgbmdDbG9ha2Agd29ya3MgaW4gY29vcGVyYXRpb24gd2l0aCB0aGUgZm9sbG93aW5nIGNzcyBydWxlIGVtYmVkZGVkIHdpdGhpbiBgYW5ndWxhci5qc2AgYW5kXG4gKiBgYW5ndWxhci5taW4uanNgLlxuICogRm9yIENTUCBtb2RlIHBsZWFzZSBhZGQgYGFuZ3VsYXItY3NwLmNzc2AgdG8geW91ciBodG1sIGZpbGUgKHNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ3NwIG5nQ3NwfSkuXG4gKlxuICogYGBgY3NzXG4gKiBbbmdcXDpjbG9ha10sIFtuZy1jbG9ha10sIFtkYXRhLW5nLWNsb2FrXSwgW3gtbmctY2xvYWtdLCAubmctY2xvYWssIC54LW5nLWNsb2FrIHtcbiAqICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGlzIGNzcyBydWxlIGlzIGxvYWRlZCBieSB0aGUgYnJvd3NlciwgYWxsIGh0bWwgZWxlbWVudHMgKGluY2x1ZGluZyB0aGVpciBjaGlsZHJlbikgdGhhdFxuICogYXJlIHRhZ2dlZCB3aXRoIHRoZSBgbmdDbG9ha2AgZGlyZWN0aXZlIGFyZSBoaWRkZW4uIFdoZW4gQW5ndWxhciBlbmNvdW50ZXJzIHRoaXMgZGlyZWN0aXZlXG4gKiBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uIG9mIHRoZSB0ZW1wbGF0ZSBpdCBkZWxldGVzIHRoZSBgbmdDbG9ha2AgZWxlbWVudCBhdHRyaWJ1dGUsIG1ha2luZ1xuICogdGhlIGNvbXBpbGVkIGVsZW1lbnQgdmlzaWJsZS5cbiAqXG4gKiBGb3IgdGhlIGJlc3QgcmVzdWx0LCB0aGUgYGFuZ3VsYXIuanNgIHNjcmlwdCBtdXN0IGJlIGxvYWRlZCBpbiB0aGUgaGVhZCBzZWN0aW9uIG9mIHRoZSBodG1sXG4gKiBkb2N1bWVudDsgYWx0ZXJuYXRpdmVseSwgdGhlIGNzcyBydWxlIGFib3ZlIG11c3QgYmUgaW5jbHVkZWQgaW4gdGhlIGV4dGVybmFsIHN0eWxlc2hlZXQgb2YgdGhlXG4gKiBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWNsb2FrXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxkaXYgaWQ9XCJ0ZW1wbGF0ZTFcIiBuZy1jbG9haz57eyAnaGVsbG8nIH19PC9kaXY+XG4gICAgICAgIDxkaXYgaWQ9XCJ0ZW1wbGF0ZTJcIiBjbGFzcz1cIm5nLWNsb2FrXCI+e3sgJ3dvcmxkJyB9fTwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIHJlbW92ZSB0aGUgdGVtcGxhdGUgZGlyZWN0aXZlIGFuZCBjc3MgY2xhc3MnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdCgkKCcjdGVtcGxhdGUxJykuZ2V0QXR0cmlidXRlKCduZy1jbG9haycpKS5cbiAgICAgICAgICAgdG9CZU51bGwoKTtcbiAgICAgICAgIGV4cGVjdCgkKCcjdGVtcGxhdGUyJykuZ2V0QXR0cmlidXRlKCduZy1jbG9haycpKS5cbiAgICAgICAgICAgdG9CZU51bGwoKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICpcbiAqL1xudmFyIG5nQ2xvYWtEaXJlY3RpdmUgPSBuZ0RpcmVjdGl2ZSh7XG4gIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICBhdHRyLiRzZXQoJ25nQ2xvYWsnLCB1bmRlZmluZWQpO1xuICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoJ25nLWNsb2FrJyk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQ29udHJvbGxlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZSBhdHRhY2hlcyBhIGNvbnRyb2xsZXIgY2xhc3MgdG8gdGhlIHZpZXcuIFRoaXMgaXMgYSBrZXkgYXNwZWN0IG9mIGhvdyBhbmd1bGFyXG4gKiBzdXBwb3J0cyB0aGUgcHJpbmNpcGxlcyBiZWhpbmQgdGhlIE1vZGVsLVZpZXctQ29udHJvbGxlciBkZXNpZ24gcGF0dGVybi5cbiAqXG4gKiBNVkMgY29tcG9uZW50cyBpbiBhbmd1bGFyOlxuICpcbiAqICogTW9kZWwg4oCUIE1vZGVscyBhcmUgdGhlIHByb3BlcnRpZXMgb2YgYSBzY29wZTsgc2NvcGVzIGFyZSBhdHRhY2hlZCB0byB0aGUgRE9NIHdoZXJlIHNjb3BlIHByb3BlcnRpZXNcbiAqICAgYXJlIGFjY2Vzc2VkIHRocm91Z2ggYmluZGluZ3MuXG4gKiAqIFZpZXcg4oCUIFRoZSB0ZW1wbGF0ZSAoSFRNTCB3aXRoIGRhdGEgYmluZGluZ3MpIHRoYXQgaXMgcmVuZGVyZWQgaW50byB0aGUgVmlldy5cbiAqICogQ29udHJvbGxlciDigJQgVGhlIGBuZ0NvbnRyb2xsZXJgIGRpcmVjdGl2ZSBzcGVjaWZpZXMgYSBDb250cm9sbGVyIGNsYXNzOyB0aGUgY2xhc3MgY29udGFpbnMgYnVzaW5lc3NcbiAqICAgbG9naWMgYmVoaW5kIHRoZSBhcHBsaWNhdGlvbiB0byBkZWNvcmF0ZSB0aGUgc2NvcGUgd2l0aCBmdW5jdGlvbnMgYW5kIHZhbHVlc1xuICpcbiAqIE5vdGUgdGhhdCB5b3UgY2FuIGFsc28gYXR0YWNoIGNvbnRyb2xsZXJzIHRvIHRoZSBET00gYnkgZGVjbGFyaW5nIGl0IGluIGEgcm91dGUgZGVmaW5pdGlvblxuICogdmlhIHRoZSB7QGxpbmsgbmdSb3V0ZS4kcm91dGUgJHJvdXRlfSBzZXJ2aWNlLiBBIGNvbW1vbiBtaXN0YWtlIGlzIHRvIGRlY2xhcmUgdGhlIGNvbnRyb2xsZXJcbiAqIGFnYWluIHVzaW5nIGBuZy1jb250cm9sbGVyYCBpbiB0aGUgdGVtcGxhdGUgaXRzZWxmLiAgVGhpcyB3aWxsIGNhdXNlIHRoZSBjb250cm9sbGVyIHRvIGJlIGF0dGFjaGVkXG4gKiBhbmQgZXhlY3V0ZWQgdHdpY2UuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSA1MDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDb250cm9sbGVyIE5hbWUgb2YgYSBjb25zdHJ1Y3RvciBmdW5jdGlvbiByZWdpc3RlcmVkIHdpdGggdGhlIGN1cnJlbnRcbiAqIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyICRjb250cm9sbGVyUHJvdmlkZXJ9IG9yIGFuIHtAbGluayBndWlkZS9leHByZXNzaW9uIGV4cHJlc3Npb259XG4gKiB0aGF0IG9uIHRoZSBjdXJyZW50IHNjb3BlIGV2YWx1YXRlcyB0byBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLlxuICpcbiAqIFRoZSBjb250cm9sbGVyIGluc3RhbmNlIGNhbiBiZSBwdWJsaXNoZWQgaW50byBhIHNjb3BlIHByb3BlcnR5IGJ5IHNwZWNpZnlpbmdcbiAqIGBuZy1jb250cm9sbGVyPVwiYXMgcHJvcGVydHlOYW1lXCJgLlxuICpcbiAqIElmIHRoZSBjdXJyZW50IGAkY29udHJvbGxlclByb3ZpZGVyYCBpcyBjb25maWd1cmVkIHRvIHVzZSBnbG9iYWxzICh2aWFcbiAqIHtAbGluayBuZy4kY29udHJvbGxlclByb3ZpZGVyI2FsbG93R2xvYmFscyBgJGNvbnRyb2xsZXJQcm92aWRlci5hbGxvd0dsb2JhbHMoKWAgfSksIHRoaXMgbWF5XG4gKiBhbHNvIGJlIHRoZSBuYW1lIG9mIGEgZ2xvYmFsbHkgYWNjZXNzaWJsZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiAoZGVwcmVjYXRlZCwgbm90IHJlY29tbWVuZGVkKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogSGVyZSBpcyBhIHNpbXBsZSBmb3JtIGZvciBlZGl0aW5nIHVzZXIgY29udGFjdCBpbmZvcm1hdGlvbi4gQWRkaW5nLCByZW1vdmluZywgY2xlYXJpbmcsIGFuZFxuICogZ3JlZXRpbmcgYXJlIG1ldGhvZHMgZGVjbGFyZWQgb24gdGhlIGNvbnRyb2xsZXIgKHNlZSBzb3VyY2UgdGFiKS4gVGhlc2UgbWV0aG9kcyBjYW5cbiAqIGVhc2lseSBiZSBjYWxsZWQgZnJvbSB0aGUgYW5ndWxhciBtYXJrdXAuIEFueSBjaGFuZ2VzIHRvIHRoZSBkYXRhIGFyZSBhdXRvbWF0aWNhbGx5IHJlZmxlY3RlZFxuICogaW4gdGhlIFZpZXcgd2l0aG91dCB0aGUgbmVlZCBmb3IgYSBtYW51YWwgdXBkYXRlLlxuICpcbiAqIFR3byBkaWZmZXJlbnQgZGVjbGFyYXRpb24gc3R5bGVzIGFyZSBpbmNsdWRlZCBiZWxvdzpcbiAqXG4gKiAqIG9uZSBiaW5kcyBtZXRob2RzIGFuZCBwcm9wZXJ0aWVzIGRpcmVjdGx5IG9udG8gdGhlIGNvbnRyb2xsZXIgdXNpbmcgYHRoaXNgOlxuICogYG5nLWNvbnRyb2xsZXI9XCJTZXR0aW5nc0NvbnRyb2xsZXIxIGFzIHNldHRpbmdzXCJgXG4gKiAqIG9uZSBpbmplY3RzIGAkc2NvcGVgIGludG8gdGhlIGNvbnRyb2xsZXI6XG4gKiBgbmctY29udHJvbGxlcj1cIlNldHRpbmdzQ29udHJvbGxlcjJcImBcbiAqXG4gKiBUaGUgc2Vjb25kIG9wdGlvbiBpcyBtb3JlIGNvbW1vbiBpbiB0aGUgQW5ndWxhciBjb21tdW5pdHksIGFuZCBpcyBnZW5lcmFsbHkgdXNlZCBpbiBib2lsZXJwbGF0ZXNcbiAqIGFuZCBpbiB0aGlzIGd1aWRlLiBIb3dldmVyLCB0aGVyZSBhcmUgYWR2YW50YWdlcyB0byBiaW5kaW5nIHByb3BlcnRpZXMgZGlyZWN0bHkgdG8gdGhlIGNvbnRyb2xsZXJcbiAqIGFuZCBhdm9pZGluZyBzY29wZS5cbiAqXG4gKiAqIFVzaW5nIGBjb250cm9sbGVyIGFzYCBtYWtlcyBpdCBvYnZpb3VzIHdoaWNoIGNvbnRyb2xsZXIgeW91IGFyZSBhY2Nlc3NpbmcgaW4gdGhlIHRlbXBsYXRlIHdoZW5cbiAqIG11bHRpcGxlIGNvbnRyb2xsZXJzIGFwcGx5IHRvIGFuIGVsZW1lbnQuXG4gKiAqIElmIHlvdSBhcmUgd3JpdGluZyB5b3VyIGNvbnRyb2xsZXJzIGFzIGNsYXNzZXMgeW91IGhhdmUgZWFzaWVyIGFjY2VzcyB0byB0aGUgcHJvcGVydGllcyBhbmRcbiAqIG1ldGhvZHMsIHdoaWNoIHdpbGwgYXBwZWFyIG9uIHRoZSBzY29wZSwgZnJvbSBpbnNpZGUgdGhlIGNvbnRyb2xsZXIgY29kZS5cbiAqICogU2luY2UgdGhlcmUgaXMgYWx3YXlzIGEgYC5gIGluIHRoZSBiaW5kaW5ncywgeW91IGRvbid0IGhhdmUgdG8gd29ycnkgYWJvdXQgcHJvdG90eXBhbFxuICogaW5oZXJpdGFuY2UgbWFza2luZyBwcmltaXRpdmVzLlxuICpcbiAqIFRoaXMgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgdGhlIGBjb250cm9sbGVyIGFzYCBzeW50YXguXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIm5nQ29udHJvbGxlckFzXCIgbW9kdWxlPVwiY29udHJvbGxlckFzRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgPGRpdiBpZD1cImN0cmwtYXMtZXhtcGxcIiBuZy1jb250cm9sbGVyPVwiU2V0dGluZ3NDb250cm9sbGVyMSBhcyBzZXR0aW5nc1wiPlxuICogICAgICA8bGFiZWw+TmFtZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzZXR0aW5ncy5uYW1lXCIvPjwvbGFiZWw+XG4gKiAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzZXR0aW5ncy5ncmVldCgpXCI+Z3JlZXQ8L2J1dHRvbj48YnIvPlxuICogICAgICBDb250YWN0OlxuICogICAgICA8dWw+XG4gKiAgICAgICAgPGxpIG5nLXJlcGVhdD1cImNvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHNcIj5cbiAqICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJjb250YWN0LnR5cGVcIiBhcmlhLWxhYmVsPVwiQ29udGFjdCBtZXRob2RcIiBpZD1cInNlbGVjdF97eyRpbmRleH19XCI+XG4gKiAgICAgICAgICAgICA8b3B0aW9uPnBob25lPC9vcHRpb24+XG4gKiAgICAgICAgICAgICA8b3B0aW9uPmVtYWlsPC9vcHRpb24+XG4gKiAgICAgICAgICA8L3NlbGVjdD5cbiAqICAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwiY29udGFjdC52YWx1ZVwiIGFyaWEtbGFiZWxsZWRieT1cInNlbGVjdF97eyRpbmRleH19XCIgLz5cbiAqICAgICAgICAgIDxidXR0b24gbmctY2xpY2s9XCJzZXR0aW5ncy5jbGVhckNvbnRhY3QoY29udGFjdClcIj5jbGVhcjwvYnV0dG9uPlxuICogICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInNldHRpbmdzLnJlbW92ZUNvbnRhY3QoY29udGFjdClcIiBhcmlhLWxhYmVsPVwiUmVtb3ZlXCI+WDwvYnV0dG9uPlxuICogICAgICAgIDwvbGk+XG4gKiAgICAgICAgPGxpPjxidXR0b24gbmctY2xpY2s9XCJzZXR0aW5ncy5hZGRDb250YWN0KClcIj5hZGQ8L2J1dHRvbj48L2xpPlxuICogICAgIDwvdWw+XG4gKiAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgICBhbmd1bGFyLm1vZHVsZSgnY29udHJvbGxlckFzRXhhbXBsZScsIFtdKVxuICogICAgICAuY29udHJvbGxlcignU2V0dGluZ3NDb250cm9sbGVyMScsIFNldHRpbmdzQ29udHJvbGxlcjEpO1xuICpcbiAqICAgIGZ1bmN0aW9uIFNldHRpbmdzQ29udHJvbGxlcjEoKSB7XG4gKiAgICAgIHRoaXMubmFtZSA9ICdKb2huIFNtaXRoJztcbiAqICAgICAgdGhpcy5jb250YWN0cyA9IFtcbiAqICAgICAgICB7dHlwZTogJ3Bob25lJywgdmFsdWU6ICc0MDggNTU1IDEyMTInfSxcbiAqICAgICAgICB7dHlwZTogJ2VtYWlsJywgdmFsdWU6ICdqb2huLnNtaXRoQGV4YW1wbGUub3JnJ31cbiAqICAgICAgXTtcbiAqICAgIH1cbiAqXG4gKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5ncmVldCA9IGZ1bmN0aW9uKCkge1xuICogICAgICBhbGVydCh0aGlzLm5hbWUpO1xuICogICAgfTtcbiAqXG4gKiAgICBTZXR0aW5nc0NvbnRyb2xsZXIxLnByb3RvdHlwZS5hZGRDb250YWN0ID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgIHRoaXMuY29udGFjdHMucHVzaCh7dHlwZTogJ2VtYWlsJywgdmFsdWU6ICd5b3VybmFtZUBleGFtcGxlLm9yZyd9KTtcbiAqICAgIH07XG4gKlxuICogICAgU2V0dGluZ3NDb250cm9sbGVyMS5wcm90b3R5cGUucmVtb3ZlQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3RUb1JlbW92ZSkge1xuICogICAgIHZhciBpbmRleCA9IHRoaXMuY29udGFjdHMuaW5kZXhPZihjb250YWN0VG9SZW1vdmUpO1xuICogICAgICB0aGlzLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7XG4gKiAgICB9O1xuICpcbiAqICAgIFNldHRpbmdzQ29udHJvbGxlcjEucHJvdG90eXBlLmNsZWFyQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QpIHtcbiAqICAgICAgY29udGFjdC50eXBlID0gJ3Bob25lJztcbiAqICAgICAgY29udGFjdC52YWx1ZSA9ICcnO1xuICogICAgfTtcbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgaXQoJ3Nob3VsZCBjaGVjayBjb250cm9sbGVyIGFzJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICB2YXIgY29udGFpbmVyID0gZWxlbWVudChieS5pZCgnY3RybC1hcy1leG1wbCcpKTtcbiAqICAgICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5Lm1vZGVsKCdzZXR0aW5ncy5uYW1lJykpXG4gKiAgICAgICAgICAgLmdldEF0dHJpYnV0ZSgndmFsdWUnKSkudG9CZSgnSm9obiBTbWl0aCcpO1xuICpcbiAqICAgICAgIHZhciBmaXJzdFJlcGVhdCA9XG4gKiAgICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMCkpO1xuICogICAgICAgdmFyIHNlY29uZFJlcGVhdCA9XG4gKiAgICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gc2V0dGluZ3MuY29udGFjdHMnKS5yb3coMSkpO1xuICpcbiAqICAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgnNDA4IDU1NSAxMjEyJyk7XG4gKlxuICogICAgICAgZXhwZWN0KHNlY29uZFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgICAudG9CZSgnam9obi5zbWl0aEBleGFtcGxlLm9yZycpO1xuICpcbiAqICAgICAgIGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkuYnV0dG9uVGV4dCgnY2xlYXInKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgICBleHBlY3QoZmlyc3RSZXBlYXQuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAgLnRvQmUoJycpO1xuICpcbiAqICAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LmJ1dHRvblRleHQoJ2FkZCcpKS5jbGljaygpO1xuICpcbiAqICAgICAgIGV4cGVjdChjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBzZXR0aW5ncy5jb250YWN0cycpLnJvdygyKSlcbiAqICAgICAgICAgICAuZWxlbWVudChieS5tb2RlbCgnY29udGFjdC52YWx1ZScpKVxuICogICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAgLnRvQmUoJ3lvdXJuYW1lQGV4YW1wbGUub3JnJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgZGVtb25zdHJhdGVzIHRoZSBcImF0dGFjaCB0byBgJHNjb3BlYFwiIHN0eWxlIG9mIGNvbnRyb2xsZXIuXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIm5nQ29udHJvbGxlclwiIG1vZHVsZT1cImNvbnRyb2xsZXJFeGFtcGxlXCI+XG4gKiAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgPGRpdiBpZD1cImN0cmwtZXhtcGxcIiBuZy1jb250cm9sbGVyPVwiU2V0dGluZ3NDb250cm9sbGVyMlwiPlxuICogICAgIDxsYWJlbD5OYW1lOiA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm5hbWVcIi8+PC9sYWJlbD5cbiAqICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZ3JlZXQoKVwiPmdyZWV0PC9idXR0b24+PGJyLz5cbiAqICAgICBDb250YWN0OlxuICogICAgIDx1bD5cbiAqICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJjb250YWN0IGluIGNvbnRhY3RzXCI+XG4gKiAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJjb250YWN0LnR5cGVcIiBpZD1cInNlbGVjdF97eyRpbmRleH19XCI+XG4gKiAgICAgICAgICAgIDxvcHRpb24+cGhvbmU8L29wdGlvbj5cbiAqICAgICAgICAgICAgPG9wdGlvbj5lbWFpbDwvb3B0aW9uPlxuICogICAgICAgICA8L3NlbGVjdD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJjb250YWN0LnZhbHVlXCIgYXJpYS1sYWJlbGxlZGJ5PVwic2VsZWN0X3t7JGluZGV4fX1cIiAvPlxuICogICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY2xlYXJDb250YWN0KGNvbnRhY3QpXCI+Y2xlYXI8L2J1dHRvbj5cbiAqICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cInJlbW92ZUNvbnRhY3QoY29udGFjdClcIj5YPC9idXR0b24+XG4gKiAgICAgICA8L2xpPlxuICogICAgICAgPGxpPlsgPGJ1dHRvbiBuZy1jbGljaz1cImFkZENvbnRhY3QoKVwiPmFkZDwvYnV0dG9uPiBdPC9saT5cbiAqICAgIDwvdWw+XG4gKiAgIDwvZGl2PlxuICogIDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgIGFuZ3VsYXIubW9kdWxlKCdjb250cm9sbGVyRXhhbXBsZScsIFtdKVxuICogICAgIC5jb250cm9sbGVyKCdTZXR0aW5nc0NvbnRyb2xsZXIyJywgWyckc2NvcGUnLCBTZXR0aW5nc0NvbnRyb2xsZXIyXSk7XG4gKlxuICogICBmdW5jdGlvbiBTZXR0aW5nc0NvbnRyb2xsZXIyKCRzY29wZSkge1xuICogICAgICRzY29wZS5uYW1lID0gJ0pvaG4gU21pdGgnO1xuICogICAgICRzY29wZS5jb250YWN0cyA9IFtcbiAqICAgICAgIHt0eXBlOidwaG9uZScsIHZhbHVlOic0MDggNTU1IDEyMTInfSxcbiAqICAgICAgIHt0eXBlOidlbWFpbCcsIHZhbHVlOidqb2huLnNtaXRoQGV4YW1wbGUub3JnJ31cbiAqICAgICBdO1xuICpcbiAqICAgICAkc2NvcGUuZ3JlZXQgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgIGFsZXJ0KCRzY29wZS5uYW1lKTtcbiAqICAgICB9O1xuICpcbiAqICAgICAkc2NvcGUuYWRkQ29udGFjdCA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgJHNjb3BlLmNvbnRhY3RzLnB1c2goe3R5cGU6J2VtYWlsJywgdmFsdWU6J3lvdXJuYW1lQGV4YW1wbGUub3JnJ30pO1xuICogICAgIH07XG4gKlxuICogICAgICRzY29wZS5yZW1vdmVDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdFRvUmVtb3ZlKSB7XG4gKiAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuY29udGFjdHMuaW5kZXhPZihjb250YWN0VG9SZW1vdmUpO1xuICogICAgICAgJHNjb3BlLmNvbnRhY3RzLnNwbGljZShpbmRleCwgMSk7XG4gKiAgICAgfTtcbiAqXG4gKiAgICAgJHNjb3BlLmNsZWFyQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3QpIHtcbiAqICAgICAgIGNvbnRhY3QudHlwZSA9ICdwaG9uZSc7XG4gKiAgICAgICBjb250YWN0LnZhbHVlID0gJyc7XG4gKiAgICAgfTtcbiAqICAgfVxuICogIDwvZmlsZT5cbiAqICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICBpdCgnc2hvdWxkIGNoZWNrIGNvbnRyb2xsZXInLCBmdW5jdGlvbigpIHtcbiAqICAgICAgdmFyIGNvbnRhaW5lciA9IGVsZW1lbnQoYnkuaWQoJ2N0cmwtZXhtcGwnKSk7XG4gKlxuICogICAgICBleHBlY3QoY29udGFpbmVyLmVsZW1lbnQoYnkubW9kZWwoJ25hbWUnKSlcbiAqICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvQmUoJ0pvaG4gU21pdGgnKTtcbiAqXG4gKiAgICAgIHZhciBmaXJzdFJlcGVhdCA9XG4gKiAgICAgICAgICBjb250YWluZXIuZWxlbWVudChieS5yZXBlYXRlcignY29udGFjdCBpbiBjb250YWN0cycpLnJvdygwKSk7XG4gKiAgICAgIHZhciBzZWNvbmRSZXBlYXQgPVxuICogICAgICAgICAgY29udGFpbmVyLmVsZW1lbnQoYnkucmVwZWF0ZXIoJ2NvbnRhY3QgaW4gY29udGFjdHMnKS5yb3coMSkpO1xuICpcbiAqICAgICAgZXhwZWN0KGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgLnRvQmUoJzQwOCA1NTUgMTIxMicpO1xuICogICAgICBleHBlY3Qoc2Vjb25kUmVwZWF0LmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICogICAgICAgICAgLnRvQmUoJ2pvaG4uc21pdGhAZXhhbXBsZS5vcmcnKTtcbiAqXG4gKiAgICAgIGZpcnN0UmVwZWF0LmVsZW1lbnQoYnkuYnV0dG9uVGV4dCgnY2xlYXInKSkuY2xpY2soKTtcbiAqXG4gKiAgICAgIGV4cGVjdChmaXJzdFJlcGVhdC5lbGVtZW50KGJ5Lm1vZGVsKCdjb250YWN0LnZhbHVlJykpLmdldEF0dHJpYnV0ZSgndmFsdWUnKSlcbiAqICAgICAgICAgIC50b0JlKCcnKTtcbiAqXG4gKiAgICAgIGNvbnRhaW5lci5lbGVtZW50KGJ5LmJ1dHRvblRleHQoJ2FkZCcpKS5jbGljaygpO1xuICpcbiAqICAgICAgZXhwZWN0KGNvbnRhaW5lci5lbGVtZW50KGJ5LnJlcGVhdGVyKCdjb250YWN0IGluIGNvbnRhY3RzJykucm93KDIpKVxuICogICAgICAgICAgLmVsZW1lbnQoYnkubW9kZWwoJ2NvbnRhY3QudmFsdWUnKSlcbiAqICAgICAgICAgIC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpXG4gKiAgICAgICAgICAudG9CZSgneW91cm5hbWVAZXhhbXBsZS5vcmcnKTtcbiAqICAgIH0pO1xuICogIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuXG4gKi9cbnZhciBuZ0NvbnRyb2xsZXJEaXJlY3RpdmUgPSBbZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBzY29wZTogdHJ1ZSxcbiAgICBjb250cm9sbGVyOiAnQCcsXG4gICAgcHJpb3JpdHk6IDUwMFxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDc3BcbiAqXG4gKiBAcmVzdHJpY3QgQVxuICogQGVsZW1lbnQgQU5ZXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBBbmd1bGFyIGhhcyBzb21lIGZlYXR1cmVzIHRoYXQgY2FuIGNvbmZsaWN0IHdpdGggY2VydGFpbiByZXN0cmljdGlvbnMgdGhhdCBhcmUgYXBwbGllZCB3aGVuIHVzaW5nXG4gKiBbQ1NQIChDb250ZW50IFNlY3VyaXR5IFBvbGljeSldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL1NlY3VyaXR5L0NTUCkgcnVsZXMuXG4gKlxuICogSWYgeW91IGludGVuZCB0byBpbXBsZW1lbnQgQ1NQIHdpdGggdGhlc2UgcnVsZXMgdGhlbiB5b3UgbXVzdCB0ZWxsIEFuZ3VsYXIgbm90IHRvIHVzZSB0aGVzZVxuICogZmVhdHVyZXMuXG4gKlxuICogVGhpcyBpcyBuZWNlc3Nhcnkgd2hlbiBkZXZlbG9waW5nIHRoaW5ncyBsaWtlIEdvb2dsZSBDaHJvbWUgRXh0ZW5zaW9ucyBvciBVbml2ZXJzYWwgV2luZG93cyBBcHBzLlxuICpcbiAqXG4gKiBUaGUgZm9sbG93aW5nIGRlZmF1bHQgcnVsZXMgaW4gQ1NQIGFmZmVjdCBBbmd1bGFyOlxuICpcbiAqICogVGhlIHVzZSBvZiBgZXZhbCgpYCwgYEZ1bmN0aW9uKHN0cmluZylgIGFuZCBzaW1pbGFyIGZ1bmN0aW9ucyB0byBkeW5hbWljYWxseSBjcmVhdGUgYW5kIGV4ZWN1dGVcbiAqIGNvZGUgZnJvbSBzdHJpbmdzIGlzIGZvcmJpZGRlbi4gQW5ndWxhciBtYWtlcyB1c2Ugb2YgdGhpcyBpbiB0aGUge0BsaW5rICRwYXJzZX0gc2VydmljZSB0b1xuICogcHJvdmlkZSBhIDMwJSBpbmNyZWFzZSBpbiB0aGUgc3BlZWQgb2YgZXZhbHVhdGluZyBBbmd1bGFyIGV4cHJlc3Npb25zLiAoVGhpcyBDU1AgcnVsZSBjYW4gYmVcbiAqIGRpc2FibGVkIHdpdGggdGhlIENTUCBrZXl3b3JkIGB1bnNhZmUtZXZhbGAsIGJ1dCBpdCBpcyBnZW5lcmFsbHkgbm90IHJlY29tbWVuZGVkIGFzIGl0IHdvdWxkXG4gKiB3ZWFrZW4gdGhlIHByb3RlY3Rpb25zIG9mZmVyZWQgYnkgQ1NQLilcbiAqXG4gKiAqIFRoZSB1c2Ugb2YgaW5saW5lIHJlc291cmNlcywgc3VjaCBhcyBpbmxpbmUgYDxzY3JpcHQ+YCBhbmQgYDxzdHlsZT5gIGVsZW1lbnRzLCBhcmUgZm9yYmlkZGVuLlxuICogVGhpcyBwcmV2ZW50cyBhcHBzIGZyb20gaW5qZWN0aW5nIGN1c3RvbSBzdHlsZXMgZGlyZWN0bHkgaW50byB0aGUgZG9jdW1lbnQuIEFuZ3VsYXIgbWFrZXMgdXNlIG9mXG4gKiB0aGlzIHRvIGluY2x1ZGUgc29tZSBDU1MgcnVsZXMgKGUuZy4ge0BsaW5rIG5nQ2xvYWt9IGFuZCB7QGxpbmsgbmdIaWRlfSkuIFRvIG1ha2UgdGhlc2VcbiAqIGRpcmVjdGl2ZXMgd29yayB3aGVuIGEgQ1NQIHJ1bGUgaXMgYmxvY2tpbmcgaW5saW5lIHN0eWxlcywgeW91IG11c3QgbGluayB0byB0aGUgYGFuZ3VsYXItY3NwLmNzc2BcbiAqIGluIHlvdXIgSFRNTCBtYW51YWxseS4gKFRoaXMgQ1NQIHJ1bGUgY2FuIGJlIGRpc2FibGVkIHdpdGggdGhlIENTUCBrZXl3b3JkIGB1bnNhZmUtaW5saW5lYCwgYnV0XG4gKiBpdCBpcyBnZW5lcmFsbHkgbm90IHJlY29tbWVuZGVkIGFzIGl0IHdvdWxkIHdlYWtlbiB0aGUgcHJvdGVjdGlvbnMgb2ZmZXJlZCBieSBDU1AuKVxuICpcbiAqIElmIHlvdSBkbyBub3QgcHJvdmlkZSBgbmdDc3BgIHRoZW4gQW5ndWxhciB0cmllcyB0byBhdXRvZGV0ZWN0IGlmIENTUCBpcyBibG9ja2luZyBkeW5hbWljIGNvZGVcbiAqIGNyZWF0aW9uIGZyb20gc3RyaW5ncyAoZS5nLiwgYHVuc2FmZS1ldmFsYCBub3Qgc3BlY2lmaWVkIGluIENTUCBoZWFkZXIpIGFuZCBhdXRvbWF0aWNhbGx5XG4gKiBkZWFjdGl2YXRlcyB0aGlzIGZlYXR1cmUgaW4gdGhlIHtAbGluayAkcGFyc2V9IHNlcnZpY2UuIFRoaXMgYXV0b2RldGVjdGlvbiwgaG93ZXZlciwgdHJpZ2dlcnMgYVxuICogQ1NQIGVycm9yIHRvIGJlIGxvZ2dlZCBpbiB0aGUgY29uc29sZTpcbiAqXG4gKiBgYGBcbiAqIFJlZnVzZWQgdG8gZXZhbHVhdGUgYSBzdHJpbmcgYXMgSmF2YVNjcmlwdCBiZWNhdXNlICd1bnNhZmUtZXZhbCcgaXMgbm90IGFuIGFsbG93ZWQgc291cmNlIG9mXG4gKiBzY3JpcHQgaW4gdGhlIGZvbGxvd2luZyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBkaXJlY3RpdmU6IFwiZGVmYXVsdC1zcmMgJ3NlbGYnXCIuIE5vdGUgdGhhdFxuICogJ3NjcmlwdC1zcmMnIHdhcyBub3QgZXhwbGljaXRseSBzZXQsIHNvICdkZWZhdWx0LXNyYycgaXMgdXNlZCBhcyBhIGZhbGxiYWNrLlxuICogYGBgXG4gKlxuICogVGhpcyBlcnJvciBpcyBoYXJtbGVzcyBidXQgYW5ub3lpbmcuIFRvIHByZXZlbnQgdGhlIGVycm9yIGZyb20gc2hvd2luZyB1cCwgcHV0IHRoZSBgbmdDc3BgXG4gKiBkaXJlY3RpdmUgb24gYW4gZWxlbWVudCBvZiB0aGUgSFRNTCBkb2N1bWVudCB0aGF0IGFwcGVhcnMgYmVmb3JlIHRoZSBgPHNjcmlwdD5gIHRhZyB0aGF0IGxvYWRzXG4gKiB0aGUgYGFuZ3VsYXIuanNgIGZpbGUuXG4gKlxuICogKk5vdGU6IFRoaXMgZGlyZWN0aXZlIGlzIG9ubHkgYXZhaWxhYmxlIGluIHRoZSBgbmctY3NwYCBhbmQgYGRhdGEtbmctY3NwYCBhdHRyaWJ1dGUgZm9ybS4qXG4gKlxuICogWW91IGNhbiBzcGVjaWZ5IHdoaWNoIG9mIHRoZSBDU1AgcmVsYXRlZCBBbmd1bGFyIGZlYXR1cmVzIHNob3VsZCBiZSBkZWFjdGl2YXRlZCBieSBwcm92aWRpbmdcbiAqIGEgdmFsdWUgZm9yIHRoZSBgbmctY3NwYCBhdHRyaWJ1dGUuIFRoZSBvcHRpb25zIGFyZSBhcyBmb2xsb3dzOlxuICpcbiAqICogbm8taW5saW5lLXN0eWxlOiB0aGlzIHN0b3BzIEFuZ3VsYXIgZnJvbSBpbmplY3RpbmcgQ1NTIHN0eWxlcyBpbnRvIHRoZSBET01cbiAqXG4gKiAqIG5vLXVuc2FmZS1ldmFsOiB0aGlzIHN0b3BzIEFuZ3VsYXIgZnJvbSBvcHRpbWl6aW5nICRwYXJzZSB3aXRoIHVuc2FmZSBldmFsIG9mIHN0cmluZ3NcbiAqXG4gKiBZb3UgY2FuIHVzZSB0aGVzZSB2YWx1ZXMgaW4gdGhlIGZvbGxvd2luZyBjb21iaW5hdGlvbnM6XG4gKlxuICpcbiAqICogTm8gZGVjbGFyYXRpb24gbWVhbnMgdGhhdCBBbmd1bGFyIHdpbGwgYXNzdW1lIHRoYXQgeW91IGNhbiBkbyBpbmxpbmUgc3R5bGVzLCBidXQgaXQgd2lsbCBkb1xuICogYSBydW50aW1lIGNoZWNrIGZvciB1bnNhZmUtZXZhbC4gRS5nLiBgPGJvZHk+YC4gVGhpcyBpcyBiYWNrd2FyZGx5IGNvbXBhdGlibGUgd2l0aCBwcmV2aW91c1xuICogdmVyc2lvbnMgb2YgQW5ndWxhci5cbiAqXG4gKiAqIEEgc2ltcGxlIGBuZy1jc3BgIChvciBgZGF0YS1uZy1jc3BgKSBhdHRyaWJ1dGUgd2lsbCB0ZWxsIEFuZ3VsYXIgdG8gZGVhY3RpdmF0ZSBib3RoIGlubGluZVxuICogc3R5bGVzIGFuZCB1bnNhZmUgZXZhbC4gRS5nLiBgPGJvZHkgbmctY3NwPmAuIFRoaXMgaXMgYmFja3dhcmRseSBjb21wYXRpYmxlIHdpdGggcHJldmlvdXNcbiAqIHZlcnNpb25zIG9mIEFuZ3VsYXIuXG4gKlxuICogKiBTcGVjaWZ5aW5nIG9ubHkgYG5vLXVuc2FmZS1ldmFsYCB0ZWxscyBBbmd1bGFyIHRoYXQgd2UgbXVzdCBub3QgdXNlIGV2YWwsIGJ1dCB0aGF0IHdlIGNhblxuICogaW5qZWN0IGlubGluZSBzdHlsZXMuIEUuZy4gYDxib2R5IG5nLWNzcD1cIm5vLXVuc2FmZS1ldmFsXCI+YC5cbiAqXG4gKiAqIFNwZWNpZnlpbmcgb25seSBgbm8taW5saW5lLXN0eWxlYCB0ZWxscyBBbmd1bGFyIHRoYXQgd2UgbXVzdCBub3QgaW5qZWN0IHN0eWxlcywgYnV0IHRoYXQgd2UgY2FuXG4gKiBydW4gZXZhbCAtIG5vIGF1dG9tYXRpYyBjaGVjayBmb3IgdW5zYWZlIGV2YWwgd2lsbCBvY2N1ci4gRS5nLiBgPGJvZHkgbmctY3NwPVwibm8taW5saW5lLXN0eWxlXCI+YFxuICpcbiAqICogU3BlY2lmeWluZyBib3RoIGBuby11bnNhZmUtZXZhbGAgYW5kIGBuby1pbmxpbmUtc3R5bGVgIHRlbGxzIEFuZ3VsYXIgdGhhdCB3ZSBtdXN0IG5vdCBpbmplY3RcbiAqIHN0eWxlcyBub3IgdXNlIGV2YWwsIHdoaWNoIGlzIHRoZSBzYW1lIGFzIGFuIGVtcHR5OiBuZy1jc3AuXG4gKiBFLmcuYDxib2R5IG5nLWNzcD1cIm5vLWlubGluZS1zdHlsZTtuby11bnNhZmUtZXZhbFwiPmBcbiAqXG4gKiBAZXhhbXBsZVxuICogVGhpcyBleGFtcGxlIHNob3dzIGhvdyB0byBhcHBseSB0aGUgYG5nQ3NwYCBkaXJlY3RpdmUgdG8gdGhlIGBodG1sYCB0YWcuXG4gICBgYGBodG1sXG4gICAgIDwhZG9jdHlwZSBodG1sPlxuICAgICA8aHRtbCBuZy1hcHAgbmctY3NwPlxuICAgICAuLi5cbiAgICAgLi4uXG4gICAgIDwvaHRtbD5cbiAgIGBgYFxuICAqIEBleGFtcGxlXG4gICAgICA8IS0tIE5vdGU6IHRoZSBgLmNzcGAgc3VmZml4IGluIHRoZSBleGFtcGxlIG5hbWUgdHJpZ2dlcnMgQ1NQIG1vZGUgaW4gb3VyIGh0dHAgc2VydmVyISAtLT5cbiAgICAgIDxleGFtcGxlIG5hbWU9XCJleGFtcGxlLmNzcFwiIG1vZHVsZT1cImNzcEV4YW1wbGVcIiBuZy1jc3A9XCJ0cnVlXCI+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiTWFpbkNvbnRyb2xsZXIgYXMgY3RybFwiPlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImN0cmwuaW5jKClcIiBpZD1cImluY1wiPkluY3JlbWVudDwvYnV0dG9uPlxuICAgICAgICAgICAgICA8c3BhbiBpZD1cImNvdW50ZXJcIj5cbiAgICAgICAgICAgICAgICB7e2N0cmwuY291bnRlcn19XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY3RybC5ldmlsKClcIiBpZD1cImV2aWxcIj5FdmlsPC9idXR0b24+XG4gICAgICAgICAgICAgIDxzcGFuIGlkPVwiZXZpbEVycm9yXCI+XG4gICAgICAgICAgICAgICAge3tjdHJsLmV2aWxFcnJvcn19XG4gICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2ZpbGU+XG4gICAgICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2NzcEV4YW1wbGUnLCBbXSlcbiAgICAgICAgICAgICAuY29udHJvbGxlcignTWFpbkNvbnRyb2xsZXInLCBmdW5jdGlvbiBNYWluQ29udHJvbGxlcigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ZXIgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5jID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmNvdW50ZXIrKztcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMuZXZpbCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZXZhbCgnMSsyJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2aWxFcnJvciA9IGUubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgPC9maWxlPlxuICAgICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICAgdmFyIHV0aWwsIHdlYmRyaXZlcjtcblxuICAgICAgICAgIHZhciBpbmNCdG4gPSBlbGVtZW50KGJ5LmlkKCdpbmMnKSk7XG4gICAgICAgICAgdmFyIGNvdW50ZXIgPSBlbGVtZW50KGJ5LmlkKCdjb3VudGVyJykpO1xuICAgICAgICAgIHZhciBldmlsQnRuID0gZWxlbWVudChieS5pZCgnZXZpbCcpKTtcbiAgICAgICAgICB2YXIgZXZpbEVycm9yID0gZWxlbWVudChieS5pZCgnZXZpbEVycm9yJykpO1xuXG4gICAgICAgICAgZnVuY3Rpb24gZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKSB7XG4gICAgICAgICAgICByZXR1cm4gYnJvd3Nlci5tYW5hZ2UoKS5sb2dzKCkuZ2V0KCdicm93c2VyJykudGhlbihmdW5jdGlvbihicm93c2VyTG9nKSB7XG4gICAgICAgICAgICAgIHJldHVybiBicm93c2VyTG9nLmZpbHRlcihmdW5jdGlvbihsb2dFbnRyeSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2dFbnRyeS5sZXZlbC52YWx1ZSA+IHdlYmRyaXZlci5sb2dnaW5nLkxldmVsLldBUk5JTkcudmFsdWU7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gY2xlYXJFcnJvcnMoKSB7XG4gICAgICAgICAgICBnZXRBbmRDbGVhclNldmVyZUVycm9ycygpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZ1bmN0aW9uIGV4cGVjdE5vRXJyb3JzKCkge1xuICAgICAgICAgICAgZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKS50aGVuKGZ1bmN0aW9uKGZpbHRlcmVkTG9nKSB7XG4gICAgICAgICAgICAgIGV4cGVjdChmaWx0ZXJlZExvZy5sZW5ndGgpLnRvRXF1YWwoMCk7XG4gICAgICAgICAgICAgIGlmIChmaWx0ZXJlZExvZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnYnJvd3NlciBjb25zb2xlIGVycm9yczogJyArIHV0aWwuaW5zcGVjdChmaWx0ZXJlZExvZykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmdW5jdGlvbiBleHBlY3RFcnJvcihyZWdleCkge1xuICAgICAgICAgICAgZ2V0QW5kQ2xlYXJTZXZlcmVFcnJvcnMoKS50aGVuKGZ1bmN0aW9uKGZpbHRlcmVkTG9nKSB7XG4gICAgICAgICAgICAgIHZhciBmb3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgICBmaWx0ZXJlZExvZy5mb3JFYWNoKGZ1bmN0aW9uKGxvZykge1xuICAgICAgICAgICAgICAgIGlmIChsb2cubWVzc2FnZS5tYXRjaChyZWdleCkpIHtcbiAgICAgICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBpZiAoIWZvdW5kKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdleHBlY3RlZCBhbiBlcnJvciB0aGF0IG1hdGNoZXMgJyArIHJlZ2V4KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYmVmb3JlRWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHV0aWwgPSByZXF1aXJlKCd1dGlsJyk7XG4gICAgICAgICAgICB3ZWJkcml2ZXIgPSByZXF1aXJlKCdzZWxlbml1bS13ZWJkcml2ZXInKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIC8vIEZvciBub3csIHdlIG9ubHkgdGVzdCBvbiBDaHJvbWUsXG4gICAgICAgICAgLy8gYXMgU2FmYXJpIGRvZXMgbm90IGxvYWQgdGhlIHBhZ2Ugd2l0aCBQcm90cmFjdG9yJ3MgaW5qZWN0ZWQgc2NyaXB0cyxcbiAgICAgICAgICAvLyBhbmQgRmlyZWZveCB3ZWJkcml2ZXIgYWx3YXlzIGRpc2FibGVzIGNvbnRlbnQgc2VjdXJpdHkgcG9saWN5ICgjNjM1OClcbiAgICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciAhPT0gJ2Nocm9tZScpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpdCgnc2hvdWxkIG5vdCByZXBvcnQgZXJyb3JzIHdoZW4gdGhlIHBhZ2UgaXMgbG9hZGVkJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyBjbGVhciBlcnJvcnMgc28gd2UgYXJlIG5vdCBkZXBlbmRlbnQgb24gcHJldmlvdXMgdGVzdHNcbiAgICAgICAgICAgIGNsZWFyRXJyb3JzKCk7XG4gICAgICAgICAgICAvLyBOZWVkIHRvIHJlbG9hZCB0aGUgcGFnZSBhcyB0aGUgcGFnZSBpcyBhbHJlYWR5IGxvYWRlZCB3aGVuXG4gICAgICAgICAgICAvLyB3ZSBjb21lIGhlcmVcbiAgICAgICAgICAgIGJyb3dzZXIuZHJpdmVyLmdldEN1cnJlbnRVcmwoKS50aGVuKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICAgICAgICBicm93c2VyLmdldCh1cmwpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBleHBlY3ROb0Vycm9ycygpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgaXQoJ3Nob3VsZCBldmFsdWF0ZSBleHByZXNzaW9ucycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZXhwZWN0KGNvdW50ZXIuZ2V0VGV4dCgpKS50b0VxdWFsKCcwJyk7XG4gICAgICAgICAgICBpbmNCdG4uY2xpY2soKTtcbiAgICAgICAgICAgIGV4cGVjdChjb3VudGVyLmdldFRleHQoKSkudG9FcXVhbCgnMScpO1xuICAgICAgICAgICAgZXhwZWN0Tm9FcnJvcnMoKTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW5kIHJlcG9ydCBhbiBlcnJvciB3aGVuIHVzaW5nIFwiZXZhbFwiJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBldmlsQnRuLmNsaWNrKCk7XG4gICAgICAgICAgICBleHBlY3QoZXZpbEVycm9yLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBTZWN1cml0eSBQb2xpY3kvKTtcbiAgICAgICAgICAgIGV4cGVjdEVycm9yKC9Db250ZW50IFNlY3VyaXR5IFBvbGljeS8pO1xuICAgICAgICAgIH0pO1xuICAgICAgICA8L2ZpbGU+XG4gICAgICA8L2V4YW1wbGU+XG4gICovXG5cbi8vIGBuZ0NzcGAgaXMgbm90IGltcGxlbWVudGVkIGFzIGEgcHJvcGVyIGRpcmVjdGl2ZSBhbnkgbW9yZSwgYmVjYXVzZSB3ZSBuZWVkIGl0IGJlIHByb2Nlc3NlZCB3aGlsZVxuLy8gd2UgYm9vdHN0cmFwIHRoZSBhcHAgKGJlZm9yZSBgJHBhcnNlYCBpcyBpbnN0YW50aWF0ZWQpLiBGb3IgdGhpcyByZWFzb24sIHdlIGp1c3QgaGF2ZSB0aGUgYGNzcCgpYFxuLy8gZm4gdGhhdCBsb29rcyBmb3IgdGhlIGBuZy1jc3BgIGF0dHJpYnV0ZSBhbnl3aGVyZSBpbiB0aGUgY3VycmVudCBkb2MuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDbGlja1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIG5nQ2xpY2sgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igd2hlblxuICogYW4gZWxlbWVudCBpcyBjbGlja2VkLlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdDbGljayB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBjbGljay4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1jbGlja1wiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50XG4gICAgICA8L2J1dHRvbj5cbiAgICAgIDxzcGFuPlxuICAgICAgICBjb3VudDoge3tjb3VudH19XG4gICAgICA8L3NwYW4+XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ2NvdW50JykpLmdldFRleHQoKSkudG9NYXRjaCgnMCcpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJ2J1dHRvbicpKS5jbGljaygpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnY291bnQnKSkuZ2V0VGV4dCgpKS50b01hdGNoKCcxJyk7XG4gICAgICAgfSk7XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuLypcbiAqIEEgY29sbGVjdGlvbiBvZiBkaXJlY3RpdmVzIHRoYXQgYWxsb3dzIGNyZWF0aW9uIG9mIGN1c3RvbSBldmVudCBoYW5kbGVycyB0aGF0IGFyZSBkZWZpbmVkIGFzXG4gKiBhbmd1bGFyIGV4cHJlc3Npb25zIGFuZCBhcmUgY29tcGlsZWQgYW5kIGV4ZWN1dGVkIHdpdGhpbiB0aGUgY3VycmVudCBzY29wZS5cbiAqL1xudmFyIG5nRXZlbnREaXJlY3RpdmVzID0ge307XG5cbi8vIEZvciBldmVudHMgdGhhdCBtaWdodCBmaXJlIHN5bmNocm9ub3VzbHkgZHVyaW5nIERPTSBtYW5pcHVsYXRpb25cbi8vIHdlIG5lZWQgdG8gZXhlY3V0ZSB0aGVpciBldmVudCBoYW5kbGVycyBhc3luY2hyb25vdXNseSB1c2luZyAkZXZhbEFzeW5jLFxuLy8gc28gdGhhdCB0aGV5IGFyZSBub3QgZXhlY3V0ZWQgaW4gYW4gaW5jb25zaXN0ZW50IHN0YXRlLlxudmFyIGZvcmNlQXN5bmNFdmVudHMgPSB7XG4gICdibHVyJzogdHJ1ZSxcbiAgJ2ZvY3VzJzogdHJ1ZVxufTtcbmZvckVhY2goXG4gICdjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2V1cCBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2Vtb3ZlIG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBrZXlkb3duIGtleXVwIGtleXByZXNzIHN1Ym1pdCBmb2N1cyBibHVyIGNvcHkgY3V0IHBhc3RlJy5zcGxpdCgnICcpLFxuICBmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgICB2YXIgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZU5vcm1hbGl6ZSgnbmctJyArIGV2ZW50TmFtZSk7XG4gICAgbmdFdmVudERpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0gPSBbJyRwYXJzZScsICckcm9vdFNjb3BlJywgZnVuY3Rpb24oJHBhcnNlLCAkcm9vdFNjb3BlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICBjb21waWxlOiBmdW5jdGlvbigkZWxlbWVudCwgYXR0cikge1xuICAgICAgICAgIC8vIE5PVEU6XG4gICAgICAgICAgLy8gV2UgZXhwb3NlIHRoZSBwb3dlcmZ1bCBgJGV2ZW50YCBvYmplY3Qgb24gdGhlIHNjb3BlIHRoYXQgcHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBXaW5kb3csXG4gICAgICAgICAgLy8gZXRjLiBUaGlzIGlzIE9LLCBiZWNhdXNlIGV4cHJlc3Npb25zIGFyZSBub3Qgc2FuZGJveGVkIGFueSBtb3JlIChhbmQgdGhlIGV4cHJlc3Npb25cbiAgICAgICAgICAvLyBzYW5kYm94IHdhcyBuZXZlciBtZWFudCB0byBiZSBhIHNlY3VyaXR5IGZlYXR1cmUgYW55d2F5KS5cbiAgICAgICAgICB2YXIgZm4gPSAkcGFyc2UoYXR0cltkaXJlY3RpdmVOYW1lXSk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5nRXZlbnRIYW5kbGVyKHNjb3BlLCBlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50Lm9uKGV2ZW50TmFtZSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZm4oc2NvcGUsIHskZXZlbnQ6IGV2ZW50fSk7XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIGlmIChmb3JjZUFzeW5jRXZlbnRzW2V2ZW50TmFtZV0gJiYgJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhjYWxsYmFjayk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XTtcbiAgfVxuKTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0RibGNsaWNrXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nRGJsY2xpY2tgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIHNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGEgZGJsY2xpY2sgZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0RibGNsaWNrIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIGEgZGJsY2xpY2suIChUaGUgRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YClcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWRibGNsaWNrXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8YnV0dG9uIG5nLWRibGNsaWNrPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKG9uIGRvdWJsZSBjbGljaylcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2Vkb3duXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgbmdNb3VzZWRvd24gZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2Vkb3duIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWRvd24ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2Vkb3duLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLW1vdXNlZG93blwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZWRvd249XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAob24gbW91c2UgZG93bilcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTW91c2V1cFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2V1cCBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2V1cCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBtb3VzZXVwLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLW1vdXNldXBcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2V1cD1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj5cbiAgICAgICAgSW5jcmVtZW50IChvbiBtb3VzZSB1cClcbiAgICAgIDwvYnV0dG9uPlxuICAgICAgY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vdXNlb3ZlclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gbW91c2VvdmVyIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZW92ZXIge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICogbW91c2VvdmVyLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLW1vdXNlb3ZlclwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZW92ZXI9XCJjb3VudCA9IGNvdW50ICsgMVwiIG5nLWluaXQ9XCJjb3VudD0wXCI+XG4gICAgICAgIEluY3JlbWVudCAod2hlbiBtb3VzZSBpcyBvdmVyKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZWVudGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZWVudGVyIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWVudGVyIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlZW50ZXIuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctbW91c2VlbnRlclwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZWVudGVyPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgZW50ZXJzKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZWxlYXZlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBtb3VzZWxlYXZlIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdNb3VzZWxlYXZlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlbGVhdmUuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctbW91c2VsZWF2ZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGJ1dHRvbiBuZy1tb3VzZWxlYXZlPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgbGVhdmVzKVxuICAgICAgPC9idXR0b24+XG4gICAgICBjb3VudDoge3tjb3VudH19XG4gICAgIDwvZmlsZT5cbiAgIDwvZXhhbXBsZT5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb3VzZW1vdmVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIG1vdXNlbW92ZSBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nTW91c2Vtb3ZlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIG1vdXNlbW92ZS4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1tb3VzZW1vdmVcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxidXR0b24gbmctbW91c2Vtb3ZlPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAgICBJbmNyZW1lbnQgKHdoZW4gbW91c2UgbW92ZXMpXG4gICAgICA8L2J1dHRvbj5cbiAgICAgIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0tleWRvd25cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGtleWRvd24gZXZlbnQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0tleWRvd24ge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gRXhwcmVzc2lvbn0gdG8gZXZhbHVhdGUgdXBvblxuICoga2V5ZG93bi4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGAgYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLilcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWtleWRvd25cIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1rZXlkb3duPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAga2V5IGRvd24gY291bnQ6IHt7Y291bnR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nS2V5dXBcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGtleXVwIGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IEFOWVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXl1cCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXl1cC4gKEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGAgYW5kIGNhbiBiZSBpbnRlcnJvZ2F0ZWQgZm9yIGtleUNvZGUsIGFsdEtleSwgZXRjLilcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWtleXVwXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHA+VHlwaW5nIGluIHRoZSBpbnB1dCBib3ggYmVsb3cgdXBkYXRlcyB0aGUga2V5IGNvdW50PC9wPlxuICAgICAgIDxpbnB1dCBuZy1rZXl1cD1cImNvdW50ID0gY291bnQgKyAxXCIgbmctaW5pdD1cImNvdW50PTBcIj4ga2V5IHVwIGNvdW50OiB7e2NvdW50fX1cblxuICAgICAgIDxwPlR5cGluZyBpbiB0aGUgaW5wdXQgYm94IGJlbG93IHVwZGF0ZXMgdGhlIGtleWNvZGU8L3A+XG4gICAgICAgPGlucHV0IG5nLWtleXVwPVwiZXZlbnQ9JGV2ZW50XCI+XG4gICAgICAgPHA+ZXZlbnQga2V5Q29kZToge3sgZXZlbnQua2V5Q29kZSB9fTwvcD5cbiAgICAgICA8cD5ldmVudCBhbHRLZXk6IHt7IGV2ZW50LmFsdEtleSB9fTwvcD5cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0tleXByZXNzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBrZXlwcmVzcyBldmVudC5cbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdLZXlwcmVzcyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBrZXlwcmVzcy4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH1cbiAqIGFuZCBjYW4gYmUgaW50ZXJyb2dhdGVkIGZvciBrZXlDb2RlLCBhbHRLZXksIGV0Yy4pXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1rZXlwcmVzc1wiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGlucHV0IG5nLWtleXByZXNzPVwiY291bnQgPSBjb3VudCArIDFcIiBuZy1pbml0PVwiY291bnQ9MFwiPlxuICAgICAga2V5IHByZXNzIGNvdW50OiB7e2NvdW50fX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1N1Ym1pdFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogRW5hYmxlcyBiaW5kaW5nIGFuZ3VsYXIgZXhwcmVzc2lvbnMgdG8gb25zdWJtaXQgZXZlbnRzLlxuICpcbiAqIEFkZGl0aW9uYWxseSBpdCBwcmV2ZW50cyB0aGUgZGVmYXVsdCBhY3Rpb24gKHdoaWNoIGZvciBmb3JtIG1lYW5zIHNlbmRpbmcgdGhlIHJlcXVlc3QgdG8gdGhlXG4gKiBzZXJ2ZXIgYW5kIHJlbG9hZGluZyB0aGUgY3VycmVudCBwYWdlKSwgYnV0IG9ubHkgaWYgdGhlIGZvcm0gZG9lcyBub3QgY29udGFpbiBgYWN0aW9uYCxcbiAqIGBkYXRhLWFjdGlvbmAsIG9yIGB4LWFjdGlvbmAgYXR0cmlidXRlcy5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogKipXYXJuaW5nOioqIEJlIGNhcmVmdWwgbm90IHRvIGNhdXNlIFwiZG91YmxlLXN1Ym1pc3Npb25cIiBieSB1c2luZyBib3RoIHRoZSBgbmdDbGlja2AgYW5kXG4gKiBgbmdTdWJtaXRgIGhhbmRsZXJzIHRvZ2V0aGVyLiBTZWUgdGhlXG4gKiB7QGxpbmsgZm9ybSNzdWJtaXR0aW5nLWEtZm9ybS1hbmQtcHJldmVudGluZy10aGUtZGVmYXVsdC1hY3Rpb24gYGZvcm1gIGRpcmVjdGl2ZSBkb2N1bWVudGF0aW9ufVxuICogZm9yIGEgZGV0YWlsZWQgZGlzY3Vzc2lvbiBvZiB3aGVuIGBuZ1N1Ym1pdGAgbWF5IGJlIHRyaWdnZXJlZC5cbiAqIDwvZGl2PlxuICpcbiAqIEBlbGVtZW50IGZvcm1cbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU3VibWl0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuXG4gKiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbW9kdWxlPVwic3VibWl0RXhhbXBsZVwiIG5hbWU9XCJuZy1zdWJtaXRcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxzY3JpcHQ+XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCdzdWJtaXRFeGFtcGxlJywgW10pXG4gICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS5saXN0ID0gW107XG4gICAgICAgICAgICAkc2NvcGUudGV4dCA9ICdoZWxsbyc7XG4gICAgICAgICAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmICgkc2NvcGUudGV4dCkge1xuICAgICAgICAgICAgICAgICRzY29wZS5saXN0LnB1c2godGhpcy50ZXh0KTtcbiAgICAgICAgICAgICAgICAkc2NvcGUudGV4dCA9ICcnO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1dKTtcbiAgICAgIDwvc2NyaXB0PlxuICAgICAgPGZvcm0gbmctc3VibWl0PVwic3VibWl0KClcIiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgRW50ZXIgdGV4dCBhbmQgaGl0IGVudGVyOlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInRleHRcIiBuYW1lPVwidGV4dFwiIC8+XG4gICAgICAgIDxpbnB1dCB0eXBlPVwic3VibWl0XCIgaWQ9XCJzdWJtaXRcIiB2YWx1ZT1cIlN1Ym1pdFwiIC8+XG4gICAgICAgIDxwcmU+bGlzdD17e2xpc3R9fTwvcHJlPlxuICAgICAgPC9mb3JtPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLXN1Ym1pdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnbGlzdCcpKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3Q9W10nKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjc3VibWl0JykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9Db250YWluKCdoZWxsbycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkubW9kZWwoJ3RleHQnKSkuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKS50b0JlKCcnKTtcbiAgICAgICB9KTtcbiAgICAgICBpdCgnc2hvdWxkIGlnbm9yZSBlbXB0eSBzdHJpbmdzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9CZSgnbGlzdD1bXScpO1xuICAgICAgICAgZWxlbWVudChieS5jc3MoJyNzdWJtaXQnKSkuY2xpY2soKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCcjc3VibWl0JykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCdsaXN0JykpLmdldFRleHQoKSkudG9Db250YWluKCdoZWxsbycpO1xuICAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdGb2N1c1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gZm9jdXMgZXZlbnQuXG4gKlxuICogTm90ZTogQXMgdGhlIGBmb2N1c2AgZXZlbnQgaXMgZXhlY3V0ZWQgc3luY2hyb25vdXNseSB3aGVuIGNhbGxpbmcgYGlucHV0LmZvY3VzKClgXG4gKiBBbmd1bGFySlMgZXhlY3V0ZXMgdGhlIGV4cHJlc3Npb24gdXNpbmcgYHNjb3BlLiRldmFsQXN5bmNgIGlmIHRoZSBldmVudCBpcyBmaXJlZFxuICogZHVyaW5nIGFuIGAkYXBwbHlgIHRvIGVuc3VyZSBhIGNvbnNpc3RlbnQgc3RhdGUuXG4gKlxuICogQGVsZW1lbnQgd2luZG93LCBpbnB1dCwgc2VsZWN0LCB0ZXh0YXJlYSwgYVxuICogQHByaW9yaXR5IDBcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdGb2N1cyB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBmb2N1cy4gKHtAbGluayBndWlkZS9leHByZXNzaW9uIy1ldmVudC0gRXZlbnQgb2JqZWN0IGlzIGF2YWlsYWJsZSBhcyBgJGV2ZW50YH0pXG4gKlxuICogQGV4YW1wbGVcbiAqIFNlZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nQ2xpY2sgbmdDbGlja31cbiAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nQmx1clxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogU3BlY2lmeSBjdXN0b20gYmVoYXZpb3Igb24gYmx1ciBldmVudC5cbiAqXG4gKiBBIFtibHVyIGV2ZW50XShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9FdmVudHMvYmx1cikgZmlyZXMgd2hlblxuICogYW4gZWxlbWVudCBoYXMgbG9zdCBmb2N1cy5cbiAqXG4gKiBOb3RlOiBBcyB0aGUgYGJsdXJgIGV2ZW50IGlzIGV4ZWN1dGVkIHN5bmNocm9ub3VzbHkgYWxzbyBkdXJpbmcgRE9NIG1hbmlwdWxhdGlvbnNcbiAqIChlLmcuIHJlbW92aW5nIGEgZm9jdXNzZWQgaW5wdXQpLFxuICogQW5ndWxhckpTIGV4ZWN1dGVzIHRoZSBleHByZXNzaW9uIHVzaW5nIGBzY29wZS4kZXZhbEFzeW5jYCBpZiB0aGUgZXZlbnQgaXMgZmlyZWRcbiAqIGR1cmluZyBhbiBgJGFwcGx5YCB0byBlbnN1cmUgYSBjb25zaXN0ZW50IHN0YXRlLlxuICpcbiAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGFcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQmx1ciB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBibHVyLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICogU2VlIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDbGljayBuZ0NsaWNrfVxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDb3B5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBjb3B5IGV2ZW50LlxuICpcbiAqIEBlbGVtZW50IHdpbmRvdywgaW5wdXQsIHNlbGVjdCwgdGV4dGFyZWEsIGFcbiAqIEBwcmlvcml0eSAwXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nQ29weSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBjb3B5LiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLWNvcHlcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxpbnB1dCBuZy1jb3B5PVwiY29waWVkPXRydWVcIiBuZy1pbml0PVwiY29waWVkPWZhbHNlOyB2YWx1ZT0nY29weSBtZSdcIiBuZy1tb2RlbD1cInZhbHVlXCI+XG4gICAgICBjb3BpZWQ6IHt7Y29waWVkfX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdDdXRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNwZWNpZnkgY3VzdG9tIGJlaGF2aW9yIG9uIGN1dCBldmVudC5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0N1dCB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB0byBldmFsdWF0ZSB1cG9uXG4gKiBjdXQuICh7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiMtZXZlbnQtIEV2ZW50IG9iamVjdCBpcyBhdmFpbGFibGUgYXMgYCRldmVudGB9KVxuICpcbiAqIEBleGFtcGxlXG4gICA8ZXhhbXBsZSBuYW1lPVwibmctY3V0XCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8aW5wdXQgbmctY3V0PVwiY3V0PXRydWVcIiBuZy1pbml0PVwiY3V0PWZhbHNlOyB2YWx1ZT0nY3V0IG1lJ1wiIG5nLW1vZGVsPVwidmFsdWVcIj5cbiAgICAgIGN1dDoge3tjdXR9fVxuICAgICA8L2ZpbGU+XG4gICA8L2V4YW1wbGU+XG4gKi9cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1Bhc3RlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTcGVjaWZ5IGN1c3RvbSBiZWhhdmlvciBvbiBwYXN0ZSBldmVudC5cbiAqXG4gKiBAZWxlbWVudCB3aW5kb3csIGlucHV0LCBzZWxlY3QsIHRleHRhcmVhLCBhXG4gKiBAcHJpb3JpdHkgMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ1Bhc3RlIHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWx1YXRlIHVwb25cbiAqIHBhc3RlLiAoe0BsaW5rIGd1aWRlL2V4cHJlc3Npb24jLWV2ZW50LSBFdmVudCBvYmplY3QgaXMgYXZhaWxhYmxlIGFzIGAkZXZlbnRgfSlcbiAqXG4gKiBAZXhhbXBsZVxuICAgPGV4YW1wbGUgbmFtZT1cIm5nLXBhc3RlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8aW5wdXQgbmctcGFzdGU9XCJwYXN0ZT10cnVlXCIgbmctaW5pdD1cInBhc3RlPWZhbHNlXCIgcGxhY2Vob2xkZXI9J3Bhc3RlIGhlcmUnPlxuICAgICAgcGFzdGVkOiB7e3Bhc3RlfX1cbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdJZlxuICogQHJlc3RyaWN0IEFcbiAqIEBtdWx0aUVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdJZmAgZGlyZWN0aXZlIHJlbW92ZXMgb3IgcmVjcmVhdGVzIGEgcG9ydGlvbiBvZiB0aGUgRE9NIHRyZWUgYmFzZWQgb24gYW5cbiAqIHtleHByZXNzaW9ufS4gSWYgdGhlIGV4cHJlc3Npb24gYXNzaWduZWQgdG8gYG5nSWZgIGV2YWx1YXRlcyB0byBhIGZhbHNlXG4gKiB2YWx1ZSB0aGVuIHRoZSBlbGVtZW50IGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLCBvdGhlcndpc2UgYSBjbG9uZSBvZiB0aGVcbiAqIGVsZW1lbnQgaXMgcmVpbnNlcnRlZCBpbnRvIHRoZSBET00uXG4gKlxuICogYG5nSWZgIGRpZmZlcnMgZnJvbSBgbmdTaG93YCBhbmQgYG5nSGlkZWAgaW4gdGhhdCBgbmdJZmAgY29tcGxldGVseSByZW1vdmVzIGFuZCByZWNyZWF0ZXMgdGhlXG4gKiBlbGVtZW50IGluIHRoZSBET00gcmF0aGVyIHRoYW4gY2hhbmdpbmcgaXRzIHZpc2liaWxpdHkgdmlhIHRoZSBgZGlzcGxheWAgY3NzIHByb3BlcnR5LiAgQSBjb21tb25cbiAqIGNhc2Ugd2hlbiB0aGlzIGRpZmZlcmVuY2UgaXMgc2lnbmlmaWNhbnQgaXMgd2hlbiB1c2luZyBjc3Mgc2VsZWN0b3JzIHRoYXQgcmVseSBvbiBhbiBlbGVtZW50J3NcbiAqIHBvc2l0aW9uIHdpdGhpbiB0aGUgRE9NLCBzdWNoIGFzIHRoZSBgOmZpcnN0LWNoaWxkYCBvciBgOmxhc3QtY2hpbGRgIHBzZXVkby1jbGFzc2VzLlxuICpcbiAqIE5vdGUgdGhhdCB3aGVuIGFuIGVsZW1lbnQgaXMgcmVtb3ZlZCB1c2luZyBgbmdJZmAgaXRzIHNjb3BlIGlzIGRlc3Ryb3llZCBhbmQgYSBuZXcgc2NvcGVcbiAqIGlzIGNyZWF0ZWQgd2hlbiB0aGUgZWxlbWVudCBpcyByZXN0b3JlZC4gIFRoZSBzY29wZSBjcmVhdGVkIHdpdGhpbiBgbmdJZmAgaW5oZXJpdHMgZnJvbVxuICogaXRzIHBhcmVudCBzY29wZSB1c2luZ1xuICogW3Byb3RvdHlwYWwgaW5oZXJpdGFuY2VdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvd2lraS9VbmRlcnN0YW5kaW5nLVNjb3BlcyNqYXZhc2NyaXB0LXByb3RvdHlwYWwtaW5oZXJpdGFuY2UpLlxuICogQW4gaW1wb3J0YW50IGltcGxpY2F0aW9uIG9mIHRoaXMgaXMgaWYgYG5nTW9kZWxgIGlzIHVzZWQgd2l0aGluIGBuZ0lmYCB0byBiaW5kIHRvXG4gKiBhIGphdmFzY3JpcHQgcHJpbWl0aXZlIGRlZmluZWQgaW4gdGhlIHBhcmVudCBzY29wZS4gSW4gdGhpcyBjYXNlIGFueSBtb2RpZmljYXRpb25zIG1hZGUgdG8gdGhlXG4gKiB2YXJpYWJsZSB3aXRoaW4gdGhlIGNoaWxkIHNjb3BlIHdpbGwgb3ZlcnJpZGUgKGhpZGUpIHRoZSB2YWx1ZSBpbiB0aGUgcGFyZW50IHNjb3BlLlxuICpcbiAqIEFsc28sIGBuZ0lmYCByZWNyZWF0ZXMgZWxlbWVudHMgdXNpbmcgdGhlaXIgY29tcGlsZWQgc3RhdGUuIEFuIGV4YW1wbGUgb2YgdGhpcyBiZWhhdmlvclxuICogaXMgaWYgYW4gZWxlbWVudCdzIGNsYXNzIGF0dHJpYnV0ZSBpcyBkaXJlY3RseSBtb2RpZmllZCBhZnRlciBpdCdzIGNvbXBpbGVkLCB1c2luZyBzb21ldGhpbmcgbGlrZVxuICogalF1ZXJ5J3MgYC5hZGRDbGFzcygpYCBtZXRob2QsIGFuZCB0aGUgZWxlbWVudCBpcyBsYXRlciByZW1vdmVkLiBXaGVuIGBuZ0lmYCByZWNyZWF0ZXMgdGhlIGVsZW1lbnRcbiAqIHRoZSBhZGRlZCBjbGFzcyB3aWxsIGJlIGxvc3QgYmVjYXVzZSB0aGUgb3JpZ2luYWwgY29tcGlsZWQgc3RhdGUgaXMgdXNlZCB0byByZWdlbmVyYXRlIHRoZSBlbGVtZW50LlxuICpcbiAqIEFkZGl0aW9uYWxseSwgeW91IGNhbiBwcm92aWRlIGFuaW1hdGlvbnMgdmlhIHRoZSBgbmdBbmltYXRlYCBtb2R1bGUgdG8gYW5pbWF0ZSB0aGUgYGVudGVyYFxuICogYW5kIGBsZWF2ZWAgZWZmZWN0cy5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogfCBBbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICB8IE9jY3VycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjZW50ZXIgZW50ZXJ9ICB8IGp1c3QgYWZ0ZXIgdGhlIGBuZ0lmYCBjb250ZW50cyBjaGFuZ2UgYW5kIGEgbmV3IERPTSBlbGVtZW50IGlzIGNyZWF0ZWQgYW5kIGluamVjdGVkIGludG8gdGhlIGBuZ0lmYCBjb250YWluZXIgfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjbGVhdmUgbGVhdmV9ICB8IGp1c3QgYmVmb3JlIHRoZSBgbmdJZmAgY29udGVudHMgYXJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NIHxcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBzY29wZVxuICogQHByaW9yaXR5IDYwMFxuICogQHBhcmFtIHtleHByZXNzaW9ufSBuZ0lmIElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyBmYWxzeSB0aGVuXG4gKiAgICAgdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBET00gdHJlZS4gSWYgaXQgaXMgdHJ1dGh5IGEgY29weSBvZiB0aGUgY29tcGlsZWRcbiAqICAgICBlbGVtZW50IGlzIGFkZGVkIHRvIHRoZSBET00gdHJlZS5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBuYW1lPVwibmctaWZcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGxhYmVsPkNsaWNrIG1lOiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCIgbmctaW5pdD1cImNoZWNrZWQ9dHJ1ZVwiIC8+PC9sYWJlbD48YnIvPlxuICAgICAgU2hvdyB3aGVuIGNoZWNrZWQ6XG4gICAgICA8c3BhbiBuZy1pZj1cImNoZWNrZWRcIiBjbGFzcz1cImFuaW1hdGUtaWZcIj5cbiAgICAgICAgVGhpcyBpcyByZW1vdmVkIHdoZW4gdGhlIGNoZWNrYm94IGlzIHVuY2hlY2tlZC5cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICAuYW5pbWF0ZS1pZiB7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIHBhZGRpbmc6MTBweDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtaWYubmctZW50ZXIsIC5hbmltYXRlLWlmLm5nLWxlYXZlIHtcbiAgICAgICAgdHJhbnNpdGlvbjphbGwgY3ViaWMtYmV6aWVyKDAuMjUwLCAwLjQ2MCwgMC40NTAsIDAuOTQwKSAwLjVzO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1lbnRlcixcbiAgICAgIC5hbmltYXRlLWlmLm5nLWxlYXZlLm5nLWxlYXZlLWFjdGl2ZSB7XG4gICAgICAgIG9wYWNpdHk6MDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtaWYubmctbGVhdmUsXG4gICAgICAuYW5pbWF0ZS1pZi5uZy1lbnRlci5uZy1lbnRlci1hY3RpdmUge1xuICAgICAgICBvcGFjaXR5OjE7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ0lmRGlyZWN0aXZlID0gWyckYW5pbWF0ZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRhbmltYXRlLCAkY29tcGlsZSkge1xuICByZXR1cm4ge1xuICAgIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gICAgcHJpb3JpdHk6IDYwMCxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICByZXN0cmljdDogJ0EnLFxuICAgICQkdGxiOiB0cnVlLFxuICAgIGxpbms6IGZ1bmN0aW9uKCRzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgICAgICB2YXIgYmxvY2ssIGNoaWxkU2NvcGUsIHByZXZpb3VzRWxlbWVudHM7XG4gICAgICAgICRzY29wZS4kd2F0Y2goJGF0dHIubmdJZiwgZnVuY3Rpb24gbmdJZldhdGNoQWN0aW9uKHZhbHVlKSB7XG5cbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghY2hpbGRTY29wZSkge1xuICAgICAgICAgICAgICAkdHJhbnNjbHVkZShmdW5jdGlvbihjbG9uZSwgbmV3U2NvcGUpIHtcbiAgICAgICAgICAgICAgICBjaGlsZFNjb3BlID0gbmV3U2NvcGU7XG4gICAgICAgICAgICAgICAgY2xvbmVbY2xvbmUubGVuZ3RoKytdID0gJGNvbXBpbGUuJCRjcmVhdGVDb21tZW50KCdlbmQgbmdJZicsICRhdHRyLm5nSWYpO1xuICAgICAgICAgICAgICAgIC8vIE5vdGU6IFdlIG9ubHkgbmVlZCB0aGUgZmlyc3QvbGFzdCBub2RlIG9mIHRoZSBjbG9uZWQgbm9kZXMuXG4gICAgICAgICAgICAgICAgLy8gSG93ZXZlciwgd2UgbmVlZCB0byBrZWVwIHRoZSByZWZlcmVuY2UgdG8gdGhlIGpxbGl0ZSB3cmFwcGVyIGFzIGl0IG1pZ2h0IGJlIGNoYW5nZWQgbGF0ZXJcbiAgICAgICAgICAgICAgICAvLyBieSBhIGRpcmVjdGl2ZSB3aXRoIHRlbXBsYXRlVXJsIHdoZW4gaXRzIHRlbXBsYXRlIGFycml2ZXMuXG4gICAgICAgICAgICAgICAgYmxvY2sgPSB7XG4gICAgICAgICAgICAgICAgICBjbG9uZTogY2xvbmVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCAkZWxlbWVudC5wYXJlbnQoKSwgJGVsZW1lbnQpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHByZXZpb3VzRWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50cy5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50cyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hpbGRTY29wZSkge1xuICAgICAgICAgICAgICBjaGlsZFNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgICAgIGNoaWxkU2NvcGUgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJsb2NrKSB7XG4gICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudHMgPSBnZXRCbG9ja05vZGVzKGJsb2NrLmNsb25lKTtcbiAgICAgICAgICAgICAgJGFuaW1hdGUubGVhdmUocHJldmlvdXNFbGVtZW50cykuZG9uZShmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAhPT0gZmFsc2UpIHByZXZpb3VzRWxlbWVudHMgPSBudWxsO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYmxvY2sgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICB9O1xufV07XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdJbmNsdWRlXG4gKiBAcmVzdHJpY3QgRUNBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBGZXRjaGVzLCBjb21waWxlcyBhbmQgaW5jbHVkZXMgYW4gZXh0ZXJuYWwgSFRNTCBmcmFnbWVudC5cbiAqXG4gKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgVVJMIGlzIHJlc3RyaWN0ZWQgdG8gdGhlIHNhbWUgZG9tYWluIGFuZCBwcm90b2NvbCBhcyB0aGVcbiAqIGFwcGxpY2F0aW9uIGRvY3VtZW50LiBUaGlzIGlzIGRvbmUgYnkgY2FsbGluZyB7QGxpbmsgJHNjZSNnZXRUcnVzdGVkUmVzb3VyY2VVcmxcbiAqICRzY2UuZ2V0VHJ1c3RlZFJlc291cmNlVXJsfSBvbiBpdC4gVG8gbG9hZCB0ZW1wbGF0ZXMgZnJvbSBvdGhlciBkb21haW5zIG9yIHByb3RvY29sc1xuICogeW91IG1heSBlaXRoZXIge0BsaW5rIG5nLiRzY2VEZWxlZ2F0ZVByb3ZpZGVyI3Jlc291cmNlVXJsV2hpdGVsaXN0IHdoaXRlbGlzdCB0aGVtfSBvclxuICoge0BsaW5rICRzY2UjdHJ1c3RBc1Jlc291cmNlVXJsIHdyYXAgdGhlbX0gYXMgdHJ1c3RlZCB2YWx1ZXMuIFJlZmVyIHRvIEFuZ3VsYXIncyB7QGxpbmtcbiAqIG5nLiRzY2UgU3RyaWN0IENvbnRleHR1YWwgRXNjYXBpbmd9LlxuICpcbiAqIEluIGFkZGl0aW9uLCB0aGUgYnJvd3NlcidzXG4gKiBbU2FtZSBPcmlnaW4gUG9saWN5XShodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Jyb3dzZXJzZWMvd2lraS9QYXJ0MiNTYW1lLW9yaWdpbl9wb2xpY3lfZm9yX1hNTEh0dHBSZXF1ZXN0KVxuICogYW5kIFtDcm9zcy1PcmlnaW4gUmVzb3VyY2UgU2hhcmluZyAoQ09SUyldKGh0dHA6Ly93d3cudzMub3JnL1RSL2NvcnMvKVxuICogcG9saWN5IG1heSBmdXJ0aGVyIHJlc3RyaWN0IHdoZXRoZXIgdGhlIHRlbXBsYXRlIGlzIHN1Y2Nlc3NmdWxseSBsb2FkZWQuXG4gKiBGb3IgZXhhbXBsZSwgYG5nSW5jbHVkZWAgd29uJ3Qgd29yayBmb3IgY3Jvc3MtZG9tYWluIHJlcXVlc3RzIG9uIGFsbCBicm93c2VycyBhbmQgZm9yIGBmaWxlOi8vYFxuICogYWNjZXNzIG9uIHNvbWUgYnJvd3NlcnMuXG4gKlxuICogQGFuaW1hdGlvbnNcbiAqIHwgQW5pbWF0aW9uICAgICAgICAgICAgICAgICAgICAgICAgfCBPY2N1cnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjZW50ZXIgZW50ZXJ9ICB8IHdoZW4gdGhlIGV4cHJlc3Npb24gY2hhbmdlcywgb24gdGhlIG5ldyBpbmNsdWRlIHxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2xlYXZlIGxlYXZlfSAgfCB3aGVuIHRoZSBleHByZXNzaW9uIGNoYW5nZXMsIG9uIHRoZSBvbGQgaW5jbHVkZSB8XG4gKlxuICogVGhlIGVudGVyIGFuZCBsZWF2ZSBhbmltYXRpb24gb2NjdXIgY29uY3VycmVudGx5LlxuICpcbiAqIEBzY29wZVxuICogQHByaW9yaXR5IDQwMFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ0luY2x1ZGV8c3JjIGFuZ3VsYXIgZXhwcmVzc2lvbiBldmFsdWF0aW5nIHRvIFVSTC4gSWYgdGhlIHNvdXJjZSBpcyBhIHN0cmluZyBjb25zdGFudCxcbiAqICAgICAgICAgICAgICAgICBtYWtlIHN1cmUgeW91IHdyYXAgaXQgaW4gKipzaW5nbGUqKiBxdW90ZXMsIGUuZy4gYHNyYz1cIidteVBhcnRpYWxUZW1wbGF0ZS5odG1sJ1wiYC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gb25sb2FkIEV4cHJlc3Npb24gdG8gZXZhbHVhdGUgd2hlbiBhIG5ldyBwYXJ0aWFsIGlzIGxvYWRlZC5cbiAqICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICAgICAgICAgICAgICAgICAgKipOb3RlOioqIFdoZW4gdXNpbmcgb25sb2FkIG9uIFNWRyBlbGVtZW50cyBpbiBJRTExLCB0aGUgYnJvd3NlciB3aWxsIHRyeSB0byBjYWxsXG4gKiAgICAgICAgICAgICAgICAgIGEgZnVuY3Rpb24gd2l0aCB0aGUgbmFtZSBvbiB0aGUgd2luZG93IGVsZW1lbnQsIHdoaWNoIHdpbGwgdXN1YWxseSB0aHJvdyBhXG4gKiAgICAgICAgICAgICAgICAgIFwiZnVuY3Rpb24gaXMgdW5kZWZpbmVkXCIgZXJyb3IuIFRvIGZpeCB0aGlzLCB5b3UgY2FuIGluc3RlYWQgdXNlIGBkYXRhLW9ubG9hZGAgb3IgYVxuICogICAgICAgICAgICAgICAgICBkaWZmZXJlbnQgZm9ybSB0aGF0IHtAbGluayBndWlkZS9kaXJlY3RpdmUjbm9ybWFsaXphdGlvbiBtYXRjaGVzfSBgb25sb2FkYC5cbiAqICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAqXG4gKiBAcGFyYW0ge3N0cmluZz19IGF1dG9zY3JvbGwgV2hldGhlciBgbmdJbmNsdWRlYCBzaG91bGQgY2FsbCB7QGxpbmsgbmcuJGFuY2hvclNjcm9sbFxuICogICAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsfSB0byBzY3JvbGwgdGhlIHZpZXdwb3J0IGFmdGVyIHRoZSBjb250ZW50IGlzIGxvYWRlZC5cbiAqXG4gKiAgICAgICAgICAgICAgICAgIC0gSWYgdGhlIGF0dHJpYnV0ZSBpcyBub3Qgc2V0LCBkaXNhYmxlIHNjcm9sbGluZy5cbiAqICAgICAgICAgICAgICAgICAgLSBJZiB0aGUgYXR0cmlidXRlIGlzIHNldCB3aXRob3V0IHZhbHVlLCBlbmFibGUgc2Nyb2xsaW5nLlxuICogICAgICAgICAgICAgICAgICAtIE90aGVyd2lzZSBlbmFibGUgc2Nyb2xsaW5nIG9ubHkgaWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydXRoeSB2YWx1ZS5cbiAqXG4gKiBAZXhhbXBsZVxuICA8ZXhhbXBsZSBtb2R1bGU9XCJpbmNsdWRlRXhhbXBsZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIG5hbWU9XCJuZy1pbmNsdWRlXCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICA8c2VsZWN0IG5nLW1vZGVsPVwidGVtcGxhdGVcIiBuZy1vcHRpb25zPVwidC5uYW1lIGZvciB0IGluIHRlbXBsYXRlc1wiPlxuICAgICAgICA8b3B0aW9uIHZhbHVlPVwiXCI+KGJsYW5rKTwvb3B0aW9uPlxuICAgICAgIDwvc2VsZWN0PlxuICAgICAgIHVybCBvZiB0aGUgdGVtcGxhdGU6IDxjb2RlPnt7dGVtcGxhdGUudXJsfX08L2NvZGU+XG4gICAgICAgPGhyLz5cbiAgICAgICA8ZGl2IGNsYXNzPVwic2xpZGUtYW5pbWF0ZS1jb250YWluZXJcIj5cbiAgICAgICAgIDxkaXYgY2xhc3M9XCJzbGlkZS1hbmltYXRlXCIgbmctaW5jbHVkZT1cInRlbXBsYXRlLnVybFwiPjwvZGl2PlxuICAgICAgIDwvZGl2PlxuICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ2luY2x1ZGVFeGFtcGxlJywgWyduZ0FuaW1hdGUnXSlcbiAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAkc2NvcGUudGVtcGxhdGVzID1cbiAgICAgICAgICAgIFt7IG5hbWU6ICd0ZW1wbGF0ZTEuaHRtbCcsIHVybDogJ3RlbXBsYXRlMS5odG1sJ30sXG4gICAgICAgICAgICAgeyBuYW1lOiAndGVtcGxhdGUyLmh0bWwnLCB1cmw6ICd0ZW1wbGF0ZTIuaHRtbCd9XTtcbiAgICAgICAgICAkc2NvcGUudGVtcGxhdGUgPSAkc2NvcGUudGVtcGxhdGVzWzBdO1xuICAgICAgICB9XSk7XG4gICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwidGVtcGxhdGUxLmh0bWxcIj5cbiAgICAgIENvbnRlbnQgb2YgdGVtcGxhdGUxLmh0bWxcbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInRlbXBsYXRlMi5odG1sXCI+XG4gICAgICBDb250ZW50IG9mIHRlbXBsYXRlMi5odG1sXG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLnNsaWRlLWFuaW1hdGUtY29udGFpbmVyIHtcbiAgICAgICAgcG9zaXRpb246cmVsYXRpdmU7XG4gICAgICAgIGJhY2tncm91bmQ6d2hpdGU7XG4gICAgICAgIGJvcmRlcjoxcHggc29saWQgYmxhY2s7XG4gICAgICAgIGhlaWdodDo0MHB4O1xuICAgICAgICBvdmVyZmxvdzpoaWRkZW47XG4gICAgICB9XG5cbiAgICAgIC5zbGlkZS1hbmltYXRlIHtcbiAgICAgICAgcGFkZGluZzoxMHB4O1xuICAgICAgfVxuXG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1lbnRlciwgLnNsaWRlLWFuaW1hdGUubmctbGVhdmUge1xuICAgICAgICB0cmFuc2l0aW9uOmFsbCBjdWJpYy1iZXppZXIoMC4yNTAsIDAuNDYwLCAwLjQ1MCwgMC45NDApIDAuNXM7XG5cbiAgICAgICAgcG9zaXRpb246YWJzb2x1dGU7XG4gICAgICAgIHRvcDowO1xuICAgICAgICBsZWZ0OjA7XG4gICAgICAgIHJpZ2h0OjA7XG4gICAgICAgIGJvdHRvbTowO1xuICAgICAgICBkaXNwbGF5OmJsb2NrO1xuICAgICAgICBwYWRkaW5nOjEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWVudGVyIHtcbiAgICAgICAgdG9wOi01MHB4O1xuICAgICAgfVxuICAgICAgLnNsaWRlLWFuaW1hdGUubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgdG9wOjA7XG4gICAgICB9XG5cbiAgICAgIC5zbGlkZS1hbmltYXRlLm5nLWxlYXZlIHtcbiAgICAgICAgdG9wOjA7XG4gICAgICB9XG4gICAgICAuc2xpZGUtYW5pbWF0ZS5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUge1xuICAgICAgICB0b3A6NTBweDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgdmFyIHRlbXBsYXRlU2VsZWN0ID0gZWxlbWVudChieS5tb2RlbCgndGVtcGxhdGUnKSk7XG4gICAgICB2YXIgaW5jbHVkZUVsZW0gPSBlbGVtZW50KGJ5LmNzcygnW25nLWluY2x1ZGVdJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUxLmh0bWwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgZXhwZWN0KGluY2x1ZGVFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBvZiB0ZW1wbGF0ZTEuaHRtbC8pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgbG9hZCB0ZW1wbGF0ZTIuaHRtbCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoYnJvd3Nlci5wYXJhbXMuYnJvd3NlciA9PT0gJ2ZpcmVmb3gnKSB7XG4gICAgICAgICAgLy8gRmlyZWZveCBjYW4ndCBoYW5kbGUgdXNpbmcgc2VsZWN0c1xuICAgICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9wcm90cmFjdG9yL2lzc3Vlcy80ODBcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuY2xpY2soKTtcbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgyKS5jbGljaygpO1xuICAgICAgICBleHBlY3QoaW5jbHVkZUVsZW0uZ2V0VGV4dCgpKS50b01hdGNoKC9Db250ZW50IG9mIHRlbXBsYXRlMi5odG1sLyk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBjaGFuZ2UgdG8gYmxhbmsnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT09ICdmaXJlZm94Jykge1xuICAgICAgICAgIC8vIEZpcmVmb3ggY2FuJ3QgaGFuZGxlIHVzaW5nIHNlbGVjdHNcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuY2xpY2soKTtcbiAgICAgICAgdGVtcGxhdGVTZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgwKS5jbGljaygpO1xuICAgICAgICBleHBlY3QoaW5jbHVkZUVsZW0uaXNQcmVzZW50KCkpLnRvQmUoZmFsc2UpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cblxuXG4vKipcbiAqIEBuZ2RvYyBldmVudFxuICogQG5hbWUgbmdJbmNsdWRlIyRpbmNsdWRlQ29udGVudFJlcXVlc3RlZFxuICogQGV2ZW50VHlwZSBlbWl0IG9uIHRoZSBzY29wZSBuZ0luY2x1ZGUgd2FzIGRlY2xhcmVkIGluXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVtaXR0ZWQgZXZlcnkgdGltZSB0aGUgbmdJbmNsdWRlIGNvbnRlbnQgaXMgcmVxdWVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVVJMIG9mIGNvbnRlbnQgdG8gbG9hZC5cbiAqL1xuXG5cbi8qKlxuICogQG5nZG9jIGV2ZW50XG4gKiBAbmFtZSBuZ0luY2x1ZGUjJGluY2x1ZGVDb250ZW50TG9hZGVkXG4gKiBAZXZlbnRUeXBlIGVtaXQgb24gdGhlIGN1cnJlbnQgbmdJbmNsdWRlIHNjb3BlXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVtaXR0ZWQgZXZlcnkgdGltZSB0aGUgbmdJbmNsdWRlIGNvbnRlbnQgaXMgcmVsb2FkZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGFuZ3VsYXJFdmVudCBTeW50aGV0aWMgZXZlbnQgb2JqZWN0LlxuICogQHBhcmFtIHtTdHJpbmd9IHNyYyBVUkwgb2YgY29udGVudCB0byBsb2FkLlxuICovXG5cblxuLyoqXG4gKiBAbmdkb2MgZXZlbnRcbiAqIEBuYW1lIG5nSW5jbHVkZSMkaW5jbHVkZUNvbnRlbnRFcnJvclxuICogQGV2ZW50VHlwZSBlbWl0IG9uIHRoZSBzY29wZSBuZ0luY2x1ZGUgd2FzIGRlY2xhcmVkIGluXG4gKiBAZGVzY3JpcHRpb25cbiAqIEVtaXR0ZWQgd2hlbiBhIHRlbXBsYXRlIEhUVFAgcmVxdWVzdCB5aWVsZHMgYW4gZXJyb25lb3VzIHJlc3BvbnNlIChzdGF0dXMgPCAyMDAgfHwgc3RhdHVzID4gMjk5KVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhbmd1bGFyRXZlbnQgU3ludGhldGljIGV2ZW50IG9iamVjdC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBzcmMgVVJMIG9mIGNvbnRlbnQgdG8gbG9hZC5cbiAqL1xudmFyIG5nSW5jbHVkZURpcmVjdGl2ZSA9IFsnJHRlbXBsYXRlUmVxdWVzdCcsICckYW5jaG9yU2Nyb2xsJywgJyRhbmltYXRlJyxcbiAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCR0ZW1wbGF0ZVJlcXVlc3QsICAgJGFuY2hvclNjcm9sbCwgICAkYW5pbWF0ZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRUNBJyxcbiAgICBwcmlvcml0eTogNDAwLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIHRyYW5zY2x1ZGU6ICdlbGVtZW50JyxcbiAgICBjb250cm9sbGVyOiBhbmd1bGFyLm5vb3AsXG4gICAgY29tcGlsZTogZnVuY3Rpb24oZWxlbWVudCwgYXR0cikge1xuICAgICAgdmFyIHNyY0V4cCA9IGF0dHIubmdJbmNsdWRlIHx8IGF0dHIuc3JjLFxuICAgICAgICAgIG9ubG9hZEV4cCA9IGF0dHIub25sb2FkIHx8ICcnLFxuICAgICAgICAgIGF1dG9TY3JvbGxFeHAgPSBhdHRyLmF1dG9zY3JvbGw7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuICAgICAgICB2YXIgY2hhbmdlQ291bnRlciA9IDAsXG4gICAgICAgICAgICBjdXJyZW50U2NvcGUsXG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQsXG4gICAgICAgICAgICBjdXJyZW50RWxlbWVudDtcblxuICAgICAgICB2YXIgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChwcmV2aW91c0VsZW1lbnQpIHtcbiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudCA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjdXJyZW50U2NvcGUpIHtcbiAgICAgICAgICAgIGN1cnJlbnRTY29wZS4kZGVzdHJveSgpO1xuICAgICAgICAgICAgY3VycmVudFNjb3BlID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGN1cnJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShjdXJyZW50RWxlbWVudCkuZG9uZShmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgIT09IGZhbHNlKSBwcmV2aW91c0VsZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwcmV2aW91c0VsZW1lbnQgPSBjdXJyZW50RWxlbWVudDtcbiAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc2NvcGUuJHdhdGNoKHNyY0V4cCwgZnVuY3Rpb24gbmdJbmNsdWRlV2F0Y2hBY3Rpb24oc3JjKSB7XG4gICAgICAgICAgdmFyIGFmdGVyQW5pbWF0aW9uID0gZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZSAhPT0gZmFsc2UgJiYgaXNEZWZpbmVkKGF1dG9TY3JvbGxFeHApICYmXG4gICAgICAgICAgICAgICghYXV0b1Njcm9sbEV4cCB8fCBzY29wZS4kZXZhbChhdXRvU2Nyb2xsRXhwKSkpIHtcbiAgICAgICAgICAgICAgICAkYW5jaG9yU2Nyb2xsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgdGhpc0NoYW5nZUlkID0gKytjaGFuZ2VDb3VudGVyO1xuXG4gICAgICAgICAgaWYgKHNyYykge1xuICAgICAgICAgICAgLy9zZXQgdGhlIDJuZCBwYXJhbSB0byB0cnVlIHRvIGlnbm9yZSB0aGUgdGVtcGxhdGUgcmVxdWVzdCBlcnJvciBzbyB0aGF0IHRoZSBpbm5lclxuICAgICAgICAgICAgLy9jb250ZW50cyBhbmQgc2NvcGUgY2FuIGJlIGNsZWFuZWQgdXAuXG4gICAgICAgICAgICAkdGVtcGxhdGVSZXF1ZXN0KHNyYywgdHJ1ZSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICBpZiAoc2NvcGUuJCRkZXN0cm95ZWQpIHJldHVybjtcblxuICAgICAgICAgICAgICBpZiAodGhpc0NoYW5nZUlkICE9PSBjaGFuZ2VDb3VudGVyKSByZXR1cm47XG4gICAgICAgICAgICAgIHZhciBuZXdTY29wZSA9IHNjb3BlLiRuZXcoKTtcbiAgICAgICAgICAgICAgY3RybC50ZW1wbGF0ZSA9IHJlc3BvbnNlO1xuXG4gICAgICAgICAgICAgIC8vIE5vdGU6IFRoaXMgd2lsbCBhbHNvIGxpbmsgYWxsIGNoaWxkcmVuIG9mIG5nLWluY2x1ZGUgdGhhdCB3ZXJlIGNvbnRhaW5lZCBpbiB0aGUgb3JpZ2luYWxcbiAgICAgICAgICAgICAgLy8gaHRtbC4gSWYgdGhhdCBjb250ZW50IGNvbnRhaW5zIGNvbnRyb2xsZXJzLCAuLi4gdGhleSBjb3VsZCBwb2xsdXRlL2NoYW5nZSB0aGUgc2NvcGUuXG4gICAgICAgICAgICAgIC8vIEhvd2V2ZXIsIHVzaW5nIG5nLWluY2x1ZGUgb24gYW4gZWxlbWVudCB3aXRoIGFkZGl0aW9uYWwgY29udGVudCBkb2VzIG5vdCBtYWtlIHNlbnNlLi4uXG4gICAgICAgICAgICAgIC8vIE5vdGU6IFdlIGNhbid0IHJlbW92ZSB0aGVtIGluIHRoZSBjbG9uZUF0dGNoRm4gb2YgJHRyYW5zY2x1ZGUgYXMgdGhhdFxuICAgICAgICAgICAgICAvLyBmdW5jdGlvbiBpcyBjYWxsZWQgYmVmb3JlIGxpbmtpbmcgdGhlIGNvbnRlbnQsIHdoaWNoIHdvdWxkIGFwcGx5IGNoaWxkXG4gICAgICAgICAgICAgIC8vIGRpcmVjdGl2ZXMgdG8gbm9uIGV4aXN0aW5nIGVsZW1lbnRzLlxuICAgICAgICAgICAgICB2YXIgY2xvbmUgPSAkdHJhbnNjbHVkZShuZXdTY29wZSwgZnVuY3Rpb24oY2xvbmUpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgJGFuaW1hdGUuZW50ZXIoY2xvbmUsIG51bGwsICRlbGVtZW50KS5kb25lKGFmdGVyQW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY3VycmVudFNjb3BlID0gbmV3U2NvcGU7XG4gICAgICAgICAgICAgIGN1cnJlbnRFbGVtZW50ID0gY2xvbmU7XG5cbiAgICAgICAgICAgICAgY3VycmVudFNjb3BlLiRlbWl0KCckaW5jbHVkZUNvbnRlbnRMb2FkZWQnLCBzcmMpO1xuICAgICAgICAgICAgICBzY29wZS4kZXZhbChvbmxvYWRFeHApO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIGlmIChzY29wZS4kJGRlc3Ryb3llZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgIGlmICh0aGlzQ2hhbmdlSWQgPT09IGNoYW5nZUNvdW50ZXIpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwTGFzdEluY2x1ZGVDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGVtaXQoJyRpbmNsdWRlQ29udGVudEVycm9yJywgc3JjKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzY29wZS4kZW1pdCgnJGluY2x1ZGVDb250ZW50UmVxdWVzdGVkJywgc3JjKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xlYW51cExhc3RJbmNsdWRlQ29udGVudCgpO1xuICAgICAgICAgICAgY3RybC50ZW1wbGF0ZSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufV07XG5cbi8vIFRoaXMgZGlyZWN0aXZlIGlzIGNhbGxlZCBkdXJpbmcgdGhlICR0cmFuc2NsdWRlIGNhbGwgb2YgdGhlIGZpcnN0IGBuZ0luY2x1ZGVgIGRpcmVjdGl2ZS5cbi8vIEl0IHdpbGwgcmVwbGFjZSBhbmQgY29tcGlsZSB0aGUgY29udGVudCBvZiB0aGUgZWxlbWVudCB3aXRoIHRoZSBsb2FkZWQgdGVtcGxhdGUuXG4vLyBXZSBuZWVkIHRoaXMgZGlyZWN0aXZlIHNvIHRoYXQgdGhlIGVsZW1lbnQgY29udGVudCBpcyBhbHJlYWR5IGZpbGxlZCB3aGVuXG4vLyB0aGUgbGluayBmdW5jdGlvbiBvZiBhbm90aGVyIGRpcmVjdGl2ZSBvbiB0aGUgc2FtZSBlbGVtZW50IGFzIG5nSW5jbHVkZVxuLy8gaXMgY2FsbGVkLlxudmFyIG5nSW5jbHVkZUZpbGxDb250ZW50RGlyZWN0aXZlID0gWyckY29tcGlsZScsXG4gIGZ1bmN0aW9uKCRjb21waWxlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRUNBJyxcbiAgICAgIHByaW9yaXR5OiAtNDAwLFxuICAgICAgcmVxdWlyZTogJ25nSW5jbHVkZScsXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsKSB7XG4gICAgICAgIGlmICh0b1N0cmluZy5jYWxsKCRlbGVtZW50WzBdKS5tYXRjaCgvU1ZHLykpIHtcbiAgICAgICAgICAvLyBXZWJLaXQ6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzU2OTggLS0tIFNWRyBlbGVtZW50cyBkbyBub3RcbiAgICAgICAgICAvLyBzdXBwb3J0IGlubmVySFRNTCwgc28gZGV0ZWN0IHRoaXMgaGVyZSBhbmQgdHJ5IHRvIGdlbmVyYXRlIHRoZSBjb250ZW50c1xuICAgICAgICAgIC8vIHNwZWNpYWxseS5cbiAgICAgICAgICAkZWxlbWVudC5lbXB0eSgpO1xuICAgICAgICAgICRjb21waWxlKGpxTGl0ZUJ1aWxkRnJhZ21lbnQoY3RybC50ZW1wbGF0ZSwgd2luZG93LmRvY3VtZW50KS5jaGlsZE5vZGVzKShzY29wZSxcbiAgICAgICAgICAgICAgZnVuY3Rpb24gbmFtZXNwYWNlQWRhcHRlZENsb25lKGNsb25lKSB7XG4gICAgICAgICAgICAkZWxlbWVudC5hcHBlbmQoY2xvbmUpO1xuICAgICAgICAgIH0sIHtmdXR1cmVQYXJlbnRFbGVtZW50OiAkZWxlbWVudH0pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgICRlbGVtZW50Lmh0bWwoY3RybC50ZW1wbGF0ZSk7XG4gICAgICAgICRjb21waWxlKCRlbGVtZW50LmNvbnRlbnRzKCkpKHNjb3BlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0luaXRcbiAqIEByZXN0cmljdCBBQ1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ0luaXRgIGRpcmVjdGl2ZSBhbGxvd3MgeW91IHRvIGV2YWx1YXRlIGFuIGV4cHJlc3Npb24gaW4gdGhlXG4gKiBjdXJyZW50IHNjb3BlLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1kYW5nZXJcIj5cbiAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSBhYnVzZWQgdG8gYWRkIHVubmVjZXNzYXJ5IGFtb3VudHMgb2YgbG9naWMgaW50byB5b3VyIHRlbXBsYXRlcy5cbiAqIFRoZXJlIGFyZSBvbmx5IGEgZmV3IGFwcHJvcHJpYXRlIHVzZXMgb2YgYG5nSW5pdGAsIHN1Y2ggYXMgZm9yIGFsaWFzaW5nIHNwZWNpYWwgcHJvcGVydGllcyBvZlxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBgbmdSZXBlYXRgfSwgYXMgc2VlbiBpbiB0aGUgZGVtbyBiZWxvdzsgYW5kIGZvciBpbmplY3RpbmcgZGF0YSB2aWFcbiAqIHNlcnZlciBzaWRlIHNjcmlwdGluZy4gQmVzaWRlcyB0aGVzZSBmZXcgY2FzZXMsIHlvdSBzaG91bGQgdXNlIHtAbGluayBndWlkZS9jb250cm9sbGVyIGNvbnRyb2xsZXJzfVxuICogcmF0aGVyIHRoYW4gYG5nSW5pdGAgdG8gaW5pdGlhbGl6ZSB2YWx1ZXMgb24gYSBzY29wZS5cbiAqIDwvZGl2PlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC13YXJuaW5nXCI+XG4gKiAqKk5vdGUqKjogSWYgeW91IGhhdmUgYXNzaWdubWVudCBpbiBgbmdJbml0YCBhbG9uZyB3aXRoIGEge0BsaW5rIG5nLiRmaWx0ZXIgYGZpbHRlcmB9LCBtYWtlXG4gKiBzdXJlIHlvdSBoYXZlIHBhcmVudGhlc2VzIHRvIGVuc3VyZSBjb3JyZWN0IG9wZXJhdG9yIHByZWNlZGVuY2U6XG4gKiA8cHJlIGNsYXNzPVwicHJldHR5cHJpbnRcIj5cbiAqIGA8ZGl2IG5nLWluaXQ9XCJ0ZXN0MSA9ICgkaW5kZXggfCB0b1N0cmluZylcIj48L2Rpdj5gXG4gKiA8L3ByZT5cbiAqIDwvZGl2PlxuICpcbiAqIEBwcmlvcml0eSA0NTBcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdJbml0IHtAbGluayBndWlkZS9leHByZXNzaW9uIEV4cHJlc3Npb259IHRvIGV2YWwuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG1vZHVsZT1cImluaXRFeGFtcGxlXCIgbmFtZT1cIm5nLWluaXRcIj5cbiAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgIDxzY3JpcHQ+XG4gICAgIGFuZ3VsYXIubW9kdWxlKCdpbml0RXhhbXBsZScsIFtdKVxuICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAkc2NvcGUubGlzdCA9IFtbJ2EnLCAnYiddLCBbJ2MnLCAnZCddXTtcbiAgICAgICB9XSk7XG4gICA8L3NjcmlwdD5cbiAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgIDxkaXYgbmctcmVwZWF0PVwiaW5uZXJMaXN0IGluIGxpc3RcIiBuZy1pbml0PVwib3V0ZXJJbmRleCA9ICRpbmRleFwiPlxuICAgICAgIDxkaXYgbmctcmVwZWF0PVwidmFsdWUgaW4gaW5uZXJMaXN0XCIgbmctaW5pdD1cImlubmVySW5kZXggPSAkaW5kZXhcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImV4YW1wbGUtaW5pdFwiPmxpc3RbIHt7b3V0ZXJJbmRleH19IF1bIHt7aW5uZXJJbmRleH19IF0gPSB7e3ZhbHVlfX07PC9zcGFuPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2Rpdj5cbiAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICBpdCgnc2hvdWxkIGFsaWFzIGluZGV4IHBvc2l0aW9ucycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgdmFyIGVsZW1lbnRzID0gZWxlbWVudC5hbGwoYnkuY3NzKCcuZXhhbXBsZS1pbml0JykpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnRzLmdldCgwKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3RbIDAgXVsgMCBdID0gYTsnKTtcbiAgICAgICAgIGV4cGVjdChlbGVtZW50cy5nZXQoMSkuZ2V0VGV4dCgpKS50b0JlKCdsaXN0WyAwIF1bIDEgXSA9IGI7Jyk7XG4gICAgICAgICBleHBlY3QoZWxlbWVudHMuZ2V0KDIpLmdldFRleHQoKSkudG9CZSgnbGlzdFsgMSBdWyAwIF0gPSBjOycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnRzLmdldCgzKS5nZXRUZXh0KCkpLnRvQmUoJ2xpc3RbIDEgXVsgMSBdID0gZDsnKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdJbml0RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICBwcmlvcml0eTogNDUwLFxuICBjb21waWxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcHJlOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgc2NvcGUuJGV2YWwoYXR0cnMubmdJbml0KTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0xpc3RcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRleHQgaW5wdXQgdGhhdCBjb252ZXJ0cyBiZXR3ZWVuIGEgZGVsaW1pdGVkIHN0cmluZyBhbmQgYW4gYXJyYXkgb2Ygc3RyaW5ncy4gVGhlIGRlZmF1bHRcbiAqIGRlbGltaXRlciBpcyBhIGNvbW1hIGZvbGxvd2VkIGJ5IGEgc3BhY2UgLSBlcXVpdmFsZW50IHRvIGBuZy1saXN0PVwiLCBcImAuIFlvdSBjYW4gc3BlY2lmeSBhIGN1c3RvbVxuICogZGVsaW1pdGVyIGFzIHRoZSB2YWx1ZSBvZiB0aGUgYG5nTGlzdGAgYXR0cmlidXRlIC0gZm9yIGV4YW1wbGUsIGBuZy1saXN0PVwiIHwgXCJgLlxuICpcbiAqIFRoZSBiZWhhdmlvdXIgb2YgdGhlIGRpcmVjdGl2ZSBpcyBhZmZlY3RlZCBieSB0aGUgdXNlIG9mIHRoZSBgbmdUcmltYCBhdHRyaWJ1dGUuXG4gKiAqIElmIGBuZ1RyaW1gIGlzIHNldCB0byBgXCJmYWxzZVwiYCB0aGVuIHdoaXRlc3BhY2UgYXJvdW5kIGJvdGggdGhlIHNlcGFyYXRvciBhbmQgZWFjaFxuICogICBsaXN0IGl0ZW0gaXMgcmVzcGVjdGVkLiBUaGlzIGltcGxpZXMgdGhhdCB0aGUgdXNlciBvZiB0aGUgZGlyZWN0aXZlIGlzIHJlc3BvbnNpYmxlIGZvclxuICogICBkZWFsaW5nIHdpdGggd2hpdGVzcGFjZSBidXQgYWxzbyBhbGxvd3MgeW91IHRvIHVzZSB3aGl0ZXNwYWNlIGFzIGEgZGVsaW1pdGVyLCBzdWNoIGFzIGFcbiAqICAgdGFiIG9yIG5ld2xpbmUgY2hhcmFjdGVyLlxuICogKiBPdGhlcndpc2Ugd2hpdGVzcGFjZSBhcm91bmQgdGhlIGRlbGltaXRlciBpcyBpZ25vcmVkIHdoZW4gc3BsaXR0aW5nIChhbHRob3VnaCBpdCBpcyByZXNwZWN0ZWRcbiAqICAgd2hlbiBqb2luaW5nIHRoZSBsaXN0IGl0ZW1zIGJhY2sgdG9nZXRoZXIpIGFuZCB3aGl0ZXNwYWNlIGFyb3VuZCBlYWNoIGxpc3QgaXRlbSBpcyBzdHJpcHBlZFxuICogICBiZWZvcmUgaXQgaXMgYWRkZWQgdG8gdGhlIG1vZGVsLlxuICpcbiAqICMjIyBFeGFtcGxlIHdpdGggVmFsaWRhdGlvblxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ0xpc3QtZGlyZWN0aXZlXCIgbW9kdWxlPVwibGlzdEV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgICBhbmd1bGFyLm1vZHVsZSgnbGlzdEV4YW1wbGUnLCBbXSlcbiAqICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICAgJHNjb3BlLm5hbWVzID0gWydtb3JwaGV1cycsICduZW8nLCAndHJpbml0eSddO1xuICogICAgICAgIH1dKTtcbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiIG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICA8bGFiZWw+TGlzdDogPGlucHV0IG5hbWU9XCJuYW1lc0lucHV0XCIgbmctbW9kZWw9XCJuYW1lc1wiIG5nLWxpc3QgcmVxdWlyZWQ+PC9sYWJlbD5cbiAqICAgICAgPHNwYW4gcm9sZT1cImFsZXJ0XCI+XG4gKiAgICAgICAgPHNwYW4gY2xhc3M9XCJlcnJvclwiIG5nLXNob3c9XCJteUZvcm0ubmFtZXNJbnB1dC4kZXJyb3IucmVxdWlyZWRcIj5cbiAqICAgICAgICBSZXF1aXJlZCE8L3NwYW4+XG4gKiAgICAgIDwvc3Bhbj5cbiAqICAgICAgPGJyPlxuICogICAgICA8dHQ+bmFtZXMgPSB7e25hbWVzfX08L3R0Pjxici8+XG4gKiAgICAgIDx0dD5teUZvcm0ubmFtZXNJbnB1dC4kdmFsaWQgPSB7e215Rm9ybS5uYW1lc0lucHV0LiR2YWxpZH19PC90dD48YnIvPlxuICogICAgICA8dHQ+bXlGb3JtLm5hbWVzSW5wdXQuJGVycm9yID0ge3tteUZvcm0ubmFtZXNJbnB1dC4kZXJyb3J9fTwvdHQ+PGJyLz5cbiAqICAgICAgPHR0Pm15Rm9ybS4kdmFsaWQgPSB7e215Rm9ybS4kdmFsaWR9fTwvdHQ+PGJyLz5cbiAqICAgICAgPHR0Pm15Rm9ybS4kZXJyb3IucmVxdWlyZWQgPSB7eyEhbXlGb3JtLiRlcnJvci5yZXF1aXJlZH19PC90dD48YnIvPlxuICogICAgIDwvZm9ybT5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgdmFyIGxpc3RJbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ25hbWVzJykpO1xuICogICAgIHZhciBuYW1lcyA9IGVsZW1lbnQoYnkuZXhhY3RCaW5kaW5nKCduYW1lcycpKTtcbiAqICAgICB2YXIgdmFsaWQgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ215Rm9ybS5uYW1lc0lucHV0LiR2YWxpZCcpKTtcbiAqICAgICB2YXIgZXJyb3IgPSBlbGVtZW50KGJ5LmNzcygnc3Bhbi5lcnJvcicpKTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBpbml0aWFsaXplIHRvIG1vZGVsJywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBleHBlY3QobmFtZXMuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ1tcIm1vcnBoZXVzXCIsXCJuZW9cIixcInRyaW5pdHlcIl0nKTtcbiAqICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbigndHJ1ZScpO1xuICogICAgICAgZXhwZWN0KGVycm9yLmdldENzc1ZhbHVlKCdkaXNwbGF5JykpLnRvQmUoJ25vbmUnKTtcbiAqICAgICB9KTtcbiAqXG4gKiAgICAgaXQoJ3Nob3VsZCBiZSBpbnZhbGlkIGlmIGVtcHR5JywgZnVuY3Rpb24oKSB7XG4gKiAgICAgICBsaXN0SW5wdXQuY2xlYXIoKTtcbiAqICAgICAgIGxpc3RJbnB1dC5zZW5kS2V5cygnJyk7XG4gKlxuICogICAgICAgZXhwZWN0KG5hbWVzLmdldFRleHQoKSkudG9Db250YWluKCcnKTtcbiAqICAgICAgIGV4cGVjdCh2YWxpZC5nZXRUZXh0KCkpLnRvQ29udGFpbignZmFsc2UnKTtcbiAqICAgICAgIGV4cGVjdChlcnJvci5nZXRDc3NWYWx1ZSgnZGlzcGxheScpKS5ub3QudG9CZSgnbm9uZScpO1xuICogICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogIyMjIEV4YW1wbGUgLSBzcGxpdHRpbmcgb24gbmV3bGluZVxuICogPGV4YW1wbGUgbmFtZT1cIm5nTGlzdC1kaXJlY3RpdmUtbmV3bGluZXNcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cImxpc3RcIiBuZy1saXN0PVwiJiMxMDtcIiBuZy10cmltPVwiZmFsc2VcIj48L3RleHRhcmVhPlxuICogICAgPHByZT57eyBsaXN0IHwganNvbiB9fTwvcHJlPlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICBpdChcInNob3VsZCBzcGxpdCB0aGUgdGV4dCBieSBuZXdsaW5lc1wiLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIHZhciBsaXN0SW5wdXQgPSBlbGVtZW50KGJ5Lm1vZGVsKCdsaXN0JykpO1xuICogICAgICAgdmFyIG91dHB1dCA9IGVsZW1lbnQoYnkuYmluZGluZygnbGlzdCB8IGpzb24nKSk7XG4gKiAgICAgICBsaXN0SW5wdXQuc2VuZEtleXMoJ2FiY1xcbmRlZlxcbmdoaScpO1xuICogICAgICAgZXhwZWN0KG91dHB1dC5nZXRUZXh0KCkpLnRvQ29udGFpbignW1xcbiAgXCJhYmNcIixcXG4gIFwiZGVmXCIsXFxuICBcImdoaVwiXFxuXScpO1xuICogICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogQGVsZW1lbnQgaW5wdXRcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdMaXN0IG9wdGlvbmFsIGRlbGltaXRlciB0aGF0IHNob3VsZCBiZSB1c2VkIHRvIHNwbGl0IHRoZSB2YWx1ZS5cbiAqL1xudmFyIG5nTGlzdERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcHJpb3JpdHk6IDEwMCxcbiAgICByZXF1aXJlOiAnbmdNb2RlbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmwpIHtcbiAgICAgIHZhciBuZ0xpc3QgPSBhdHRyLm5nTGlzdCB8fCAnLCAnO1xuICAgICAgdmFyIHRyaW1WYWx1ZXMgPSBhdHRyLm5nVHJpbSAhPT0gJ2ZhbHNlJztcbiAgICAgIHZhciBzZXBhcmF0b3IgPSB0cmltVmFsdWVzID8gdHJpbShuZ0xpc3QpIDogbmdMaXN0O1xuXG4gICAgICB2YXIgcGFyc2UgPSBmdW5jdGlvbih2aWV3VmFsdWUpIHtcbiAgICAgICAgLy8gSWYgdGhlIHZpZXdWYWx1ZSBpcyBpbnZhbGlkIChzYXkgcmVxdWlyZWQgYnV0IGVtcHR5KSBpdCB3aWxsIGJlIGB1bmRlZmluZWRgXG4gICAgICAgIGlmIChpc1VuZGVmaW5lZCh2aWV3VmFsdWUpKSByZXR1cm47XG5cbiAgICAgICAgdmFyIGxpc3QgPSBbXTtcblxuICAgICAgICBpZiAodmlld1ZhbHVlKSB7XG4gICAgICAgICAgZm9yRWFjaCh2aWV3VmFsdWUuc3BsaXQoc2VwYXJhdG9yKSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkgbGlzdC5wdXNoKHRyaW1WYWx1ZXMgPyB0cmltKHZhbHVlKSA6IHZhbHVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgfTtcblxuICAgICAgY3RybC4kcGFyc2Vycy5wdXNoKHBhcnNlKTtcbiAgICAgIGN0cmwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUuam9pbihuZ0xpc3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBPdmVycmlkZSB0aGUgc3RhbmRhcmQgJGlzRW1wdHkgYmVjYXVzZSBhbiBlbXB0eSBhcnJheSBtZWFucyB0aGUgaW5wdXQgaXMgZW1wdHkuXG4gICAgICBjdHJsLiRpc0VtcHR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICF2YWx1ZSB8fCAhdmFsdWUubGVuZ3RoO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG4vKiBnbG9iYWwgVkFMSURfQ0xBU1M6IHRydWUsXG4gIElOVkFMSURfQ0xBU1M6IHRydWUsXG4gIFBSSVNUSU5FX0NMQVNTOiB0cnVlLFxuICBESVJUWV9DTEFTUzogdHJ1ZSxcbiAgVU5UT1VDSEVEX0NMQVNTOiB0cnVlLFxuICBUT1VDSEVEX0NMQVNTOiB0cnVlLFxuICBQRU5ESU5HX0NMQVNTOiB0cnVlLFxuICBhZGRTZXRWYWxpZGl0eU1ldGhvZDogdHJ1ZSxcbiAgc2V0dXBWYWxpZGl0eTogdHJ1ZSxcbiAgZGVmYXVsdE1vZGVsT3B0aW9uczogZmFsc2VcbiovXG5cblxudmFyIFZBTElEX0NMQVNTID0gJ25nLXZhbGlkJyxcbiAgICBJTlZBTElEX0NMQVNTID0gJ25nLWludmFsaWQnLFxuICAgIFBSSVNUSU5FX0NMQVNTID0gJ25nLXByaXN0aW5lJyxcbiAgICBESVJUWV9DTEFTUyA9ICduZy1kaXJ0eScsXG4gICAgVU5UT1VDSEVEX0NMQVNTID0gJ25nLXVudG91Y2hlZCcsXG4gICAgVE9VQ0hFRF9DTEFTUyA9ICduZy10b3VjaGVkJyxcbiAgICBFTVBUWV9DTEFTUyA9ICduZy1lbXB0eScsXG4gICAgTk9UX0VNUFRZX0NMQVNTID0gJ25nLW5vdC1lbXB0eSc7XG5cbnZhciBuZ01vZGVsTWluRXJyID0gbWluRXJyKCduZ01vZGVsJyk7XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXJcbiAqXG4gKiBAcHJvcGVydHkgeyp9ICR2aWV3VmFsdWUgVGhlIGFjdHVhbCB2YWx1ZSBmcm9tIHRoZSBjb250cm9sJ3Mgdmlldy4gRm9yIGBpbnB1dGAgZWxlbWVudHMsIHRoaXMgaXMgYVxuICogU3RyaW5nLiBTZWUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZpZXdWYWx1ZX0gZm9yIGluZm9ybWF0aW9uIGFib3V0IHdoZW4gdGhlICR2aWV3VmFsdWVcbiAqIGlzIHNldC5cbiAqXG4gKiBAcHJvcGVydHkgeyp9ICRtb2RlbFZhbHVlIFRoZSB2YWx1ZSBpbiB0aGUgbW9kZWwgdGhhdCB0aGUgY29udHJvbCBpcyBib3VuZCB0by5cbiAqXG4gKiBAcHJvcGVydHkge0FycmF5LjxGdW5jdGlvbj59ICRwYXJzZXJzIEFycmF5IG9mIGZ1bmN0aW9ucyB0byBleGVjdXRlLCBhcyBhIHBpcGVsaW5lLCB3aGVuZXZlclxuICogIHRoZSBjb250cm9sIHVwZGF0ZXMgdGhlIG5nTW9kZWxDb250cm9sbGVyIHdpdGggYSBuZXcge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZVxuICAgIGAkdmlld1ZhbHVlYH0gZnJvbSB0aGUgRE9NLCB1c3VhbGx5IHZpYSB1c2VyIGlucHV0LlxuICAgIFNlZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0Vmlld1ZhbHVlIGAkc2V0Vmlld1ZhbHVlKClgfSBmb3IgYSBkZXRhaWxlZCBsaWZlY3ljbGUgZXhwbGFuYXRpb24uXG4gICAgTm90ZSB0aGF0IHRoZSBgJHBhcnNlcnNgIGFyZSBub3QgY2FsbGVkIHdoZW4gdGhlIGJvdW5kIG5nTW9kZWwgZXhwcmVzc2lvbiBjaGFuZ2VzIHByb2dyYW1tYXRpY2FsbHkuXG5cbiAgVGhlIGZ1bmN0aW9ucyBhcmUgY2FsbGVkIGluIGFycmF5IG9yZGVyLCBlYWNoIHBhc3NpbmdcbiAgICBpdHMgcmV0dXJuIHZhbHVlIHRocm91Z2ggdG8gdGhlIG5leHQuIFRoZSBsYXN0IHJldHVybiB2YWx1ZSBpcyBmb3J3YXJkZWQgdG8gdGhlXG4gICAge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZhbGlkYXRvcnMgYCR2YWxpZGF0b3JzYH0gY29sbGVjdGlvbi5cblxuICBQYXJzZXJzIGFyZSB1c2VkIHRvIHNhbml0aXplIC8gY29udmVydCB0aGUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZVxuICAgIGAkdmlld1ZhbHVlYH0uXG5cbiAgUmV0dXJuaW5nIGB1bmRlZmluZWRgIGZyb20gYSBwYXJzZXIgbWVhbnMgYSBwYXJzZSBlcnJvciBvY2N1cnJlZC4gSW4gdGhhdCBjYXNlLFxuICAgIG5vIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGAkdmFsaWRhdG9yc2B9IHdpbGwgcnVuIGFuZCB0aGUgYG5nTW9kZWxgXG4gICAgd2lsbCBiZSBzZXQgdG8gYHVuZGVmaW5lZGAgdW5sZXNzIHtAbGluayBuZ01vZGVsT3B0aW9ucyBgbmdNb2RlbE9wdGlvbnMuYWxsb3dJbnZhbGlkYH1cbiAgICBpcyBzZXQgdG8gYHRydWVgLiBUaGUgcGFyc2UgZXJyb3IgaXMgc3RvcmVkIGluIGBuZ01vZGVsLiRlcnJvci5wYXJzZWAuXG5cbiAgVGhpcyBzaW1wbGUgZXhhbXBsZSBzaG93cyBhIHBhcnNlciB0aGF0IHdvdWxkIGNvbnZlcnQgdGV4dCBpbnB1dCB2YWx1ZSB0byBsb3dlcmNhc2U6XG4gKiBgYGBqc1xuICogZnVuY3Rpb24gcGFyc2UodmFsdWUpIHtcbiAqICAgaWYgKHZhbHVlKSB7XG4gKiAgICAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gKiAgIH1cbiAqIH1cbiAqIG5nTW9kZWxDb250cm9sbGVyLiRwYXJzZXJzLnB1c2gocGFyc2UpO1xuICogYGBgXG5cbiAqXG4gKiBAcHJvcGVydHkge0FycmF5LjxGdW5jdGlvbj59ICRmb3JtYXR0ZXJzIEFycmF5IG9mIGZ1bmN0aW9ucyB0byBleGVjdXRlLCBhcyBhIHBpcGVsaW5lLCB3aGVuZXZlclxuICAgIHRoZSBib3VuZCBuZ01vZGVsIGV4cHJlc3Npb24gY2hhbmdlcyBwcm9ncmFtbWF0aWNhbGx5LiBUaGUgYCRmb3JtYXR0ZXJzYCBhcmUgbm90IGNhbGxlZCB3aGVuIHRoZVxuICAgIHZhbHVlIG9mIHRoZSBjb250cm9sIGlzIGNoYW5nZWQgYnkgdXNlciBpbnRlcmFjdGlvbi5cblxuICBGb3JtYXR0ZXJzIGFyZSB1c2VkIHRvIGZvcm1hdCAvIGNvbnZlcnQgdGhlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRtb2RlbFZhbHVlXG4gICAgYCRtb2RlbFZhbHVlYH0gZm9yIGRpc3BsYXkgaW4gdGhlIGNvbnRyb2wuXG5cbiAgVGhlIGZ1bmN0aW9ucyBhcmUgY2FsbGVkIGluIHJldmVyc2UgYXJyYXkgb3JkZXIsIGVhY2ggcGFzc2luZyB0aGUgdmFsdWUgdGhyb3VnaCB0byB0aGVcbiAgICBuZXh0LiBUaGUgbGFzdCByZXR1cm4gdmFsdWUgaXMgdXNlZCBhcyB0aGUgYWN0dWFsIERPTSB2YWx1ZS5cblxuICBUaGlzIHNpbXBsZSBleGFtcGxlIHNob3dzIGEgZm9ybWF0dGVyIHRoYXQgd291bGQgY29udmVydCB0aGUgbW9kZWwgdmFsdWUgdG8gdXBwZXJjYXNlOlxuXG4gKiBgYGBqc1xuICogZnVuY3Rpb24gZm9ybWF0KHZhbHVlKSB7XG4gKiAgIGlmICh2YWx1ZSkge1xuICogICAgIHJldHVybiB2YWx1ZS50b1VwcGVyQ2FzZSgpO1xuICogICB9XG4gKiB9XG4gKiBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZm9ybWF0KTtcbiAqIGBgYFxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gJHZhbGlkYXRvcnMgQSBjb2xsZWN0aW9uIG9mIHZhbGlkYXRvcnMgdGhhdCBhcmUgYXBwbGllZFxuICogICAgICB3aGVuZXZlciB0aGUgbW9kZWwgdmFsdWUgY2hhbmdlcy4gVGhlIGtleSB2YWx1ZSB3aXRoaW4gdGhlIG9iamVjdCByZWZlcnMgdG8gdGhlIG5hbWUgb2YgdGhlXG4gKiAgICAgIHZhbGlkYXRvciB3aGlsZSB0aGUgZnVuY3Rpb24gcmVmZXJzIHRvIHRoZSB2YWxpZGF0aW9uIG9wZXJhdGlvbi4gVGhlIHZhbGlkYXRpb24gb3BlcmF0aW9uIGlzXG4gKiAgICAgIHByb3ZpZGVkIHdpdGggdGhlIG1vZGVsIHZhbHVlIGFzIGFuIGFyZ3VtZW50IGFuZCBtdXN0IHJldHVybiBhIHRydWUgb3IgZmFsc2UgdmFsdWUgZGVwZW5kaW5nXG4gKiAgICAgIG9uIHRoZSByZXNwb25zZSBvZiB0aGF0IHZhbGlkYXRpb24uXG4gKlxuICogYGBganNcbiAqIG5nTW9kZWwuJHZhbGlkYXRvcnMudmFsaWRDaGFyYWN0ZXJzID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gKiAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICogICByZXR1cm4gL1swLTldKy8udGVzdCh2YWx1ZSkgJiZcbiAqICAgICAgICAgIC9bYS16XSsvLnRlc3QodmFsdWUpICYmXG4gKiAgICAgICAgICAvW0EtWl0rLy50ZXN0KHZhbHVlKSAmJlxuICogICAgICAgICAgL1xcVysvLnRlc3QodmFsdWUpO1xuICogfTtcbiAqIGBgYFxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsIGZ1bmN0aW9uPn0gJGFzeW5jVmFsaWRhdG9ycyBBIGNvbGxlY3Rpb24gb2YgdmFsaWRhdGlvbnMgdGhhdCBhcmUgZXhwZWN0ZWQgdG9cbiAqICAgICAgcGVyZm9ybSBhbiBhc3luY2hyb25vdXMgdmFsaWRhdGlvbiAoZS5nLiBhIEhUVFAgcmVxdWVzdCkuIFRoZSB2YWxpZGF0aW9uIGZ1bmN0aW9uIHRoYXQgaXMgcHJvdmlkZWRcbiAqICAgICAgaXMgZXhwZWN0ZWQgdG8gcmV0dXJuIGEgcHJvbWlzZSB3aGVuIGl0IGlzIHJ1biBkdXJpbmcgdGhlIG1vZGVsIHZhbGlkYXRpb24gcHJvY2Vzcy4gT25jZSB0aGUgcHJvbWlzZVxuICogICAgICBpcyBkZWxpdmVyZWQgdGhlbiB0aGUgdmFsaWRhdGlvbiBzdGF0dXMgd2lsbCBiZSBzZXQgdG8gdHJ1ZSB3aGVuIGZ1bGZpbGxlZCBhbmQgZmFsc2Ugd2hlbiByZWplY3RlZC5cbiAqICAgICAgV2hlbiB0aGUgYXN5bmNocm9ub3VzIHZhbGlkYXRvcnMgYXJlIHRyaWdnZXJlZCwgZWFjaCBvZiB0aGUgdmFsaWRhdG9ycyB3aWxsIHJ1biBpbiBwYXJhbGxlbCBhbmQgdGhlIG1vZGVsXG4gKiAgICAgIHZhbHVlIHdpbGwgb25seSBiZSB1cGRhdGVkIG9uY2UgYWxsIHZhbGlkYXRvcnMgaGF2ZSBiZWVuIGZ1bGZpbGxlZC4gQXMgbG9uZyBhcyBhbiBhc3luY2hyb25vdXMgdmFsaWRhdG9yXG4gKiAgICAgIGlzIHVuZnVsZmlsbGVkLCBpdHMga2V5IHdpbGwgYmUgYWRkZWQgdG8gdGhlIGNvbnRyb2xsZXJzIGAkcGVuZGluZ2AgcHJvcGVydHkuIEFsc28sIGFsbCBhc3luY2hyb25vdXMgdmFsaWRhdG9yc1xuICogICAgICB3aWxsIG9ubHkgcnVuIG9uY2UgYWxsIHN5bmNocm9ub3VzIHZhbGlkYXRvcnMgaGF2ZSBwYXNzZWQuXG4gKlxuICogUGxlYXNlIG5vdGUgdGhhdCBpZiAkaHR0cCBpcyB1c2VkIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRoYXQgdGhlIHNlcnZlciByZXR1cm5zIGEgc3VjY2VzcyBIVFRQIHJlc3BvbnNlIGNvZGVcbiAqIGluIG9yZGVyIHRvIGZ1bGZpbGwgdGhlIHZhbGlkYXRpb24gYW5kIGEgc3RhdHVzIGxldmVsIG9mIGA0eHhgIGluIG9yZGVyIHRvIHJlamVjdCB0aGUgdmFsaWRhdGlvbi5cbiAqXG4gKiBgYGBqc1xuICogbmdNb2RlbC4kYXN5bmNWYWxpZGF0b3JzLnVuaXF1ZVVzZXJuYW1lID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gKiAgIHZhciB2YWx1ZSA9IG1vZGVsVmFsdWUgfHwgdmlld1ZhbHVlO1xuICpcbiAqICAgLy8gTG9va3VwIHVzZXIgYnkgdXNlcm5hbWVcbiAqICAgcmV0dXJuICRodHRwLmdldCgnL2FwaS91c2Vycy8nICsgdmFsdWUpLlxuICogICAgICB0aGVuKGZ1bmN0aW9uIHJlc29sdmVkKCkge1xuICogICAgICAgIC8vdXNlcm5hbWUgZXhpc3RzLCB0aGlzIG1lYW5zIHZhbGlkYXRpb24gZmFpbHNcbiAqICAgICAgICByZXR1cm4gJHEucmVqZWN0KCdleGlzdHMnKTtcbiAqICAgICAgfSwgZnVuY3Rpb24gcmVqZWN0ZWQoKSB7XG4gKiAgICAgICAgLy91c2VybmFtZSBkb2VzIG5vdCBleGlzdCwgdGhlcmVmb3JlIHRoaXMgdmFsaWRhdGlvbiBwYXNzZXNcbiAqICAgICAgICByZXR1cm4gdHJ1ZTtcbiAqICAgICAgfSk7XG4gKiB9O1xuICogYGBgXG4gKlxuICogQHByb3BlcnR5IHtBcnJheS48RnVuY3Rpb24+fSAkdmlld0NoYW5nZUxpc3RlbmVycyBBcnJheSBvZiBmdW5jdGlvbnMgdG8gZXhlY3V0ZSB3aGVuZXZlciB0aGVcbiAqICAgICB2aWV3IHZhbHVlIGhhcyBjaGFuZ2VkLiBJdCBpcyBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMsIGFuZCBpdHMgcmV0dXJuIHZhbHVlIGlzIGlnbm9yZWQuXG4gKiAgICAgVGhpcyBjYW4gYmUgdXNlZCBpbiBwbGFjZSBvZiBhZGRpdGlvbmFsICR3YXRjaGVzIGFnYWluc3QgdGhlIG1vZGVsIHZhbHVlLlxuICpcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSAkZXJyb3IgQW4gb2JqZWN0IGhhc2ggd2l0aCBhbGwgZmFpbGluZyB2YWxpZGF0b3IgaWRzIGFzIGtleXMuXG4gKiBAcHJvcGVydHkge09iamVjdH0gJHBlbmRpbmcgQW4gb2JqZWN0IGhhc2ggd2l0aCBhbGwgcGVuZGluZyB2YWxpZGF0b3IgaWRzIGFzIGtleXMuXG4gKlxuICogQHByb3BlcnR5IHtib29sZWFufSAkdW50b3VjaGVkIFRydWUgaWYgY29udHJvbCBoYXMgbm90IGxvc3QgZm9jdXMgeWV0LlxuICogQHByb3BlcnR5IHtib29sZWFufSAkdG91Y2hlZCBUcnVlIGlmIGNvbnRyb2wgaGFzIGxvc3QgZm9jdXMuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRwcmlzdGluZSBUcnVlIGlmIHVzZXIgaGFzIG5vdCBpbnRlcmFjdGVkIHdpdGggdGhlIGNvbnRyb2wgeWV0LlxuICogQHByb3BlcnR5IHtib29sZWFufSAkZGlydHkgVHJ1ZSBpZiB1c2VyIGhhcyBhbHJlYWR5IGludGVyYWN0ZWQgd2l0aCB0aGUgY29udHJvbC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gJHZhbGlkIFRydWUgaWYgdGhlcmUgaXMgbm8gZXJyb3IuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59ICRpbnZhbGlkIFRydWUgaWYgYXQgbGVhc3Qgb25lIGVycm9yIG9uIHRoZSBjb250cm9sLlxuICogQHByb3BlcnR5IHtzdHJpbmd9ICRuYW1lIFRoZSBuYW1lIGF0dHJpYnV0ZSBvZiB0aGUgY29udHJvbC5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBgTmdNb2RlbENvbnRyb2xsZXJgIHByb3ZpZGVzIEFQSSBmb3IgdGhlIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0gZGlyZWN0aXZlLlxuICogVGhlIGNvbnRyb2xsZXIgY29udGFpbnMgc2VydmljZXMgZm9yIGRhdGEtYmluZGluZywgdmFsaWRhdGlvbiwgQ1NTIHVwZGF0ZXMsIGFuZCB2YWx1ZSBmb3JtYXR0aW5nXG4gKiBhbmQgcGFyc2luZy4gSXQgcHVycG9zZWZ1bGx5IGRvZXMgbm90IGNvbnRhaW4gYW55IGxvZ2ljIHdoaWNoIGRlYWxzIHdpdGggRE9NIHJlbmRlcmluZyBvclxuICogbGlzdGVuaW5nIHRvIERPTSBldmVudHMuXG4gKiBTdWNoIERPTSByZWxhdGVkIGxvZ2ljIHNob3VsZCBiZSBwcm92aWRlZCBieSBvdGhlciBkaXJlY3RpdmVzIHdoaWNoIG1ha2UgdXNlIG9mXG4gKiBgTmdNb2RlbENvbnRyb2xsZXJgIGZvciBkYXRhLWJpbmRpbmcgdG8gY29udHJvbCBlbGVtZW50cy5cbiAqIEFuZ3VsYXIgcHJvdmlkZXMgdGhpcyBET00gbG9naWMgZm9yIG1vc3Qge0BsaW5rIGlucHV0IGBpbnB1dGB9IGVsZW1lbnRzLlxuICogQXQgdGhlIGVuZCBvZiB0aGlzIHBhZ2UgeW91IGNhbiBmaW5kIGEge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjY3VzdG9tLWNvbnRyb2wtZXhhbXBsZVxuICogY3VzdG9tIGNvbnRyb2wgZXhhbXBsZX0gdGhhdCB1c2VzIGBuZ01vZGVsQ29udHJvbGxlcmAgdG8gYmluZCB0byBgY29udGVudGVkaXRhYmxlYCBlbGVtZW50cy5cbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIEN1c3RvbSBDb250cm9sIEV4YW1wbGVcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gdXNlIGBOZ01vZGVsQ29udHJvbGxlcmAgd2l0aCBhIGN1c3RvbSBjb250cm9sIHRvIGFjaGlldmVcbiAqIGRhdGEtYmluZGluZy4gTm90aWNlIGhvdyBkaWZmZXJlbnQgZGlyZWN0aXZlcyAoYGNvbnRlbnRlZGl0YWJsZWAsIGBuZy1tb2RlbGAsIGFuZCBgcmVxdWlyZWRgKVxuICogY29sbGFib3JhdGUgdG9nZXRoZXIgdG8gYWNoaWV2ZSB0aGUgZGVzaXJlZCByZXN1bHQuXG4gKlxuICogYGNvbnRlbnRlZGl0YWJsZWAgaXMgYW4gSFRNTDUgYXR0cmlidXRlLCB3aGljaCB0ZWxscyB0aGUgYnJvd3NlciB0byBsZXQgdGhlIGVsZW1lbnRcbiAqIGNvbnRlbnRzIGJlIGVkaXRlZCBpbiBwbGFjZSBieSB0aGUgdXNlci5cbiAqXG4gKiBXZSBhcmUgdXNpbmcgdGhlIHtAbGluayBuZy5zZXJ2aWNlOiRzY2UgJHNjZX0gc2VydmljZSBoZXJlIGFuZCBpbmNsdWRlIHRoZSB7QGxpbmsgbmdTYW5pdGl6ZSAkc2FuaXRpemV9XG4gKiBtb2R1bGUgdG8gYXV0b21hdGljYWxseSByZW1vdmUgXCJiYWRcIiBjb250ZW50IGxpa2UgaW5saW5lIGV2ZW50IGxpc3RlbmVyIChlLmcuIGA8c3BhbiBvbmNsaWNrPVwiLi4uXCI+YCkuXG4gKiBIb3dldmVyLCBhcyB3ZSBhcmUgdXNpbmcgYCRzY2VgIHRoZSBtb2RlbCBjYW4gc3RpbGwgZGVjaWRlIHRvIHByb3ZpZGUgdW5zYWZlIGNvbnRlbnQgaWYgaXQgbWFya3NcbiAqIHRoYXQgY29udGVudCB1c2luZyB0aGUgYCRzY2VgIHNlcnZpY2UuXG4gKlxuICogPGV4YW1wbGUgbmFtZT1cIk5nTW9kZWxDb250cm9sbGVyXCIgbW9kdWxlPVwiY3VzdG9tQ29udHJvbFwiIGRlcHM9XCJhbmd1bGFyLXNhbml0aXplLmpzXCI+XG4gICAgPGZpbGUgbmFtZT1cInN0eWxlLmNzc1wiPlxuICAgICAgW2NvbnRlbnRlZGl0YWJsZV0ge1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDIwcHg7XG4gICAgICB9XG5cbiAgICAgIC5uZy1pbnZhbGlkIHtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgcmVkO1xuICAgICAgfVxuXG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCdjdXN0b21Db250cm9sJywgWyduZ1Nhbml0aXplJ10pLlxuICAgICAgICBkaXJlY3RpdmUoJ2NvbnRlbnRlZGl0YWJsZScsIFsnJHNjZScsIGZ1bmN0aW9uKCRzY2UpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJywgLy8gb25seSBhY3RpdmF0ZSBvbiBlbGVtZW50IGF0dHJpYnV0ZVxuICAgICAgICAgICAgcmVxdWlyZTogJz9uZ01vZGVsJywgLy8gZ2V0IGEgaG9sZCBvZiBOZ01vZGVsQ29udHJvbGxlclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7XG4gICAgICAgICAgICAgIGlmICghbmdNb2RlbCkgcmV0dXJuOyAvLyBkbyBub3RoaW5nIGlmIG5vIG5nLW1vZGVsXG5cbiAgICAgICAgICAgICAgLy8gU3BlY2lmeSBob3cgVUkgc2hvdWxkIGJlIHVwZGF0ZWRcbiAgICAgICAgICAgICAgbmdNb2RlbC4kcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5odG1sKCRzY2UuZ2V0VHJ1c3RlZEh0bWwobmdNb2RlbC4kdmlld1ZhbHVlIHx8ICcnKSk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgLy8gTGlzdGVuIGZvciBjaGFuZ2UgZXZlbnRzIHRvIGVuYWJsZSBiaW5kaW5nXG4gICAgICAgICAgICAgIGVsZW1lbnQub24oJ2JsdXIga2V5dXAgY2hhbmdlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGV2YWxBc3luYyhyZWFkKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJlYWQoKTsgLy8gaW5pdGlhbGl6ZVxuXG4gICAgICAgICAgICAgIC8vIFdyaXRlIGRhdGEgdG8gdGhlIG1vZGVsXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGh0bWwgPSBlbGVtZW50Lmh0bWwoKTtcbiAgICAgICAgICAgICAgICAvLyBXaGVuIHdlIGNsZWFyIHRoZSBjb250ZW50IGVkaXRhYmxlIHRoZSBicm93c2VyIGxlYXZlcyBhIDxicj4gYmVoaW5kXG4gICAgICAgICAgICAgICAgLy8gSWYgc3RyaXAtYnIgYXR0cmlidXRlIGlzIHByb3ZpZGVkIHRoZW4gd2Ugc3RyaXAgdGhpcyBvdXRcbiAgICAgICAgICAgICAgICBpZiAoYXR0cnMuc3RyaXBCciAmJiBodG1sID09PSAnPGJyPicpIHtcbiAgICAgICAgICAgICAgICAgIGh0bWwgPSAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKGh0bWwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICAgICAgIDxkaXYgY29udGVudGVkaXRhYmxlXG4gICAgICAgICAgICBuYW1lPVwibXlXaWRnZXRcIiBuZy1tb2RlbD1cInVzZXJDb250ZW50XCJcbiAgICAgICAgICAgIHN0cmlwLWJyPVwidHJ1ZVwiXG4gICAgICAgICAgICByZXF1aXJlZD5DaGFuZ2UgbWUhPC9kaXY+XG4gICAgICAgIDxzcGFuIG5nLXNob3c9XCJteUZvcm0ubXlXaWRnZXQuJGVycm9yLnJlcXVpcmVkXCI+UmVxdWlyZWQhPC9zcGFuPlxuICAgICAgIDxocj5cbiAgICAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJ1c2VyQ29udGVudFwiIGFyaWEtbGFiZWw9XCJEeW5hbWljIHRleHRhcmVhXCI+PC90ZXh0YXJlYT5cbiAgICAgIDwvZm9ybT5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgIGl0KCdzaG91bGQgZGF0YS1iaW5kIGFuZCBiZWNvbWUgaW52YWxpZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT09ICdzYWZhcmknIHx8IGJyb3dzZXIucGFyYW1zLmJyb3dzZXIgPT09ICdmaXJlZm94Jykge1xuICAgICAgICAvLyBTYWZhcmlEcml2ZXIgY2FuJ3QgaGFuZGxlIGNvbnRlbnRlZGl0YWJsZVxuICAgICAgICAvLyBhbmQgRmlyZWZveCBkcml2ZXIgY2FuJ3QgY2xlYXIgY29udGVudGVkaXRhYmxlcyB2ZXJ5IHdlbGxcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGNvbnRlbnRFZGl0YWJsZSA9IGVsZW1lbnQoYnkuY3NzKCdbY29udGVudGVkaXRhYmxlXScpKTtcbiAgICAgIHZhciBjb250ZW50ID0gJ0NoYW5nZSBtZSEnO1xuXG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldFRleHQoKSkudG9FcXVhbChjb250ZW50KTtcblxuICAgICAgY29udGVudEVkaXRhYmxlLmNsZWFyKCk7XG4gICAgICBjb250ZW50RWRpdGFibGUuc2VuZEtleXMocHJvdHJhY3Rvci5LZXkuQkFDS19TUEFDRSk7XG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldFRleHQoKSkudG9FcXVhbCgnJyk7XG4gICAgICBleHBlY3QoY29udGVudEVkaXRhYmxlLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkudG9NYXRjaCgvbmctaW52YWxpZC1yZXF1aXJlZC8pO1xuICAgIH0pO1xuICAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKlxuICovXG5OZ01vZGVsQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInLCAnJGF0dHJzJywgJyRlbGVtZW50JywgJyRwYXJzZScsICckYW5pbWF0ZScsICckdGltZW91dCcsICckcScsICckaW50ZXJwb2xhdGUnXTtcbmZ1bmN0aW9uIE5nTW9kZWxDb250cm9sbGVyKCRzY29wZSwgJGV4Y2VwdGlvbkhhbmRsZXIsICRhdHRyLCAkZWxlbWVudCwgJHBhcnNlLCAkYW5pbWF0ZSwgJHRpbWVvdXQsICRxLCAkaW50ZXJwb2xhdGUpIHtcbiAgdGhpcy4kdmlld1ZhbHVlID0gTnVtYmVyLk5hTjtcbiAgdGhpcy4kbW9kZWxWYWx1ZSA9IE51bWJlci5OYU47XG4gIHRoaXMuJCRyYXdNb2RlbFZhbHVlID0gdW5kZWZpbmVkOyAvLyBzdG9yZXMgdGhlIHBhcnNlZCBtb2RlbFZhbHVlIC8gbW9kZWwgc2V0IGZyb20gc2NvcGUgcmVnYXJkbGVzcyBvZiB2YWxpZGl0eS5cbiAgdGhpcy4kdmFsaWRhdG9ycyA9IHt9O1xuICB0aGlzLiRhc3luY1ZhbGlkYXRvcnMgPSB7fTtcbiAgdGhpcy4kcGFyc2VycyA9IFtdO1xuICB0aGlzLiRmb3JtYXR0ZXJzID0gW107XG4gIHRoaXMuJHZpZXdDaGFuZ2VMaXN0ZW5lcnMgPSBbXTtcbiAgdGhpcy4kdW50b3VjaGVkID0gdHJ1ZTtcbiAgdGhpcy4kdG91Y2hlZCA9IGZhbHNlO1xuICB0aGlzLiRwcmlzdGluZSA9IHRydWU7XG4gIHRoaXMuJGRpcnR5ID0gZmFsc2U7XG4gIHRoaXMuJHZhbGlkID0gdHJ1ZTtcbiAgdGhpcy4kaW52YWxpZCA9IGZhbHNlO1xuICB0aGlzLiRlcnJvciA9IHt9OyAvLyBrZWVwIGludmFsaWQga2V5cyBoZXJlXG4gIHRoaXMuJCRzdWNjZXNzID0ge307IC8vIGtlZXAgdmFsaWQga2V5cyBoZXJlXG4gIHRoaXMuJHBlbmRpbmcgPSB1bmRlZmluZWQ7IC8vIGtlZXAgcGVuZGluZyBrZXlzIGhlcmVcbiAgdGhpcy4kbmFtZSA9ICRpbnRlcnBvbGF0ZSgkYXR0ci5uYW1lIHx8ICcnLCBmYWxzZSkoJHNjb3BlKTtcbiAgdGhpcy4kJHBhcmVudEZvcm0gPSBudWxsRm9ybUN0cmw7XG4gIHRoaXMuJG9wdGlvbnMgPSBkZWZhdWx0TW9kZWxPcHRpb25zO1xuXG4gIHRoaXMuJCRwYXJzZWROZ01vZGVsID0gJHBhcnNlKCRhdHRyLm5nTW9kZWwpO1xuICB0aGlzLiQkcGFyc2VkTmdNb2RlbEFzc2lnbiA9IHRoaXMuJCRwYXJzZWROZ01vZGVsLmFzc2lnbjtcbiAgdGhpcy4kJG5nTW9kZWxHZXQgPSB0aGlzLiQkcGFyc2VkTmdNb2RlbDtcbiAgdGhpcy4kJG5nTW9kZWxTZXQgPSB0aGlzLiQkcGFyc2VkTmdNb2RlbEFzc2lnbjtcbiAgdGhpcy4kJHBlbmRpbmdEZWJvdW5jZSA9IG51bGw7XG4gIHRoaXMuJCRwYXJzZXJWYWxpZCA9IHVuZGVmaW5lZDtcblxuICB0aGlzLiQkY3VycmVudFZhbGlkYXRpb25SdW5JZCA9IDA7XG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvMTU4MzNcbiAgLy8gUHJldmVudCBgJCRzY29wZWAgZnJvbSBiZWluZyBpdGVyYXRlZCBvdmVyIGJ5IGBjb3B5YCB3aGVuIE5nTW9kZWxDb250cm9sbGVyIGlzIGRlZXAgd2F0Y2hlZFxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJyQkc2NvcGUnLCB7dmFsdWU6ICRzY29wZX0pO1xuICB0aGlzLiQkYXR0ciA9ICRhdHRyO1xuICB0aGlzLiQkZWxlbWVudCA9ICRlbGVtZW50O1xuICB0aGlzLiQkYW5pbWF0ZSA9ICRhbmltYXRlO1xuICB0aGlzLiQkdGltZW91dCA9ICR0aW1lb3V0O1xuICB0aGlzLiQkcGFyc2UgPSAkcGFyc2U7XG4gIHRoaXMuJCRxID0gJHE7XG4gIHRoaXMuJCRleGNlcHRpb25IYW5kbGVyID0gJGV4Y2VwdGlvbkhhbmRsZXI7XG5cbiAgc2V0dXBWYWxpZGl0eSh0aGlzKTtcbiAgc2V0dXBNb2RlbFdhdGNoZXIodGhpcyk7XG59XG5cbk5nTW9kZWxDb250cm9sbGVyLnByb3RvdHlwZSA9IHtcbiAgJCRpbml0R2V0dGVyU2V0dGVyczogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuJG9wdGlvbnMuZ2V0T3B0aW9uKCdnZXR0ZXJTZXR0ZXInKSkge1xuICAgICAgdmFyIGludm9rZU1vZGVsR2V0dGVyID0gdGhpcy4kJHBhcnNlKHRoaXMuJCRhdHRyLm5nTW9kZWwgKyAnKCknKSxcbiAgICAgICAgICBpbnZva2VNb2RlbFNldHRlciA9IHRoaXMuJCRwYXJzZSh0aGlzLiQkYXR0ci5uZ01vZGVsICsgJygkJCRwKScpO1xuXG4gICAgICB0aGlzLiQkbmdNb2RlbEdldCA9IGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICB2YXIgbW9kZWxWYWx1ZSA9IHRoaXMuJCRwYXJzZWROZ01vZGVsKCRzY29wZSk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG1vZGVsVmFsdWUpKSB7XG4gICAgICAgICAgbW9kZWxWYWx1ZSA9IGludm9rZU1vZGVsR2V0dGVyKCRzY29wZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1vZGVsVmFsdWU7XG4gICAgICB9O1xuICAgICAgdGhpcy4kJG5nTW9kZWxTZXQgPSBmdW5jdGlvbigkc2NvcGUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHRoaXMuJCRwYXJzZWROZ01vZGVsKCRzY29wZSkpKSB7XG4gICAgICAgICAgaW52b2tlTW9kZWxTZXR0ZXIoJHNjb3BlLCB7JCQkcDogbmV3VmFsdWV9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLiQkcGFyc2VkTmdNb2RlbEFzc2lnbigkc2NvcGUsIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKCF0aGlzLiQkcGFyc2VkTmdNb2RlbC5hc3NpZ24pIHtcbiAgICAgIHRocm93IG5nTW9kZWxNaW5FcnIoJ25vbmFzc2lnbicsICdFeHByZXNzaW9uIFxcJ3swfVxcJyBpcyBub24tYXNzaWduYWJsZS4gRWxlbWVudDogezF9JyxcbiAgICAgICAgICB0aGlzLiQkYXR0ci5uZ01vZGVsLCBzdGFydGluZ1RhZyh0aGlzLiQkZWxlbWVudCkpO1xuICAgIH1cbiAgfSxcblxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHJlbmRlclxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2FsbGVkIHdoZW4gdGhlIHZpZXcgbmVlZHMgdG8gYmUgdXBkYXRlZC4gSXQgaXMgZXhwZWN0ZWQgdGhhdCB0aGUgdXNlciBvZiB0aGUgbmctbW9kZWxcbiAgICogZGlyZWN0aXZlIHdpbGwgaW1wbGVtZW50IHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBUaGUgYCRyZW5kZXIoKWAgbWV0aG9kIGlzIGludm9rZWQgaW4gdGhlIGZvbGxvd2luZyBzaXR1YXRpb25zOlxuICAgKlxuICAgKiAqIGAkcm9sbGJhY2tWaWV3VmFsdWUoKWAgaXMgY2FsbGVkLiAgSWYgd2UgYXJlIHJvbGxpbmcgYmFjayB0aGUgdmlldyB2YWx1ZSB0byB0aGUgbGFzdFxuICAgKiAgIGNvbW1pdHRlZCB2YWx1ZSB0aGVuIGAkcmVuZGVyKClgIGlzIGNhbGxlZCB0byB1cGRhdGUgdGhlIGlucHV0IGNvbnRyb2wuXG4gICAqICogVGhlIHZhbHVlIHJlZmVyZW5jZWQgYnkgYG5nLW1vZGVsYCBpcyBjaGFuZ2VkIHByb2dyYW1tYXRpY2FsbHkgYW5kIGJvdGggdGhlIGAkbW9kZWxWYWx1ZWAgYW5kXG4gICAqICAgdGhlIGAkdmlld1ZhbHVlYCBhcmUgZGlmZmVyZW50IGZyb20gbGFzdCB0aW1lLlxuICAgKlxuICAgKiBTaW5jZSBgbmctbW9kZWxgIGRvZXMgbm90IGRvIGEgZGVlcCB3YXRjaCwgYCRyZW5kZXIoKWAgaXMgb25seSBpbnZva2VkIGlmIHRoZSB2YWx1ZXMgb2ZcbiAgICogYCRtb2RlbFZhbHVlYCBhbmQgYCR2aWV3VmFsdWVgIGFyZSBhY3R1YWxseSBkaWZmZXJlbnQgZnJvbSB0aGVpciBwcmV2aW91cyB2YWx1ZXMuIElmIGAkbW9kZWxWYWx1ZWBcbiAgICogb3IgYCR2aWV3VmFsdWVgIGFyZSBvYmplY3RzIChyYXRoZXIgdGhhbiBhIHN0cmluZyBvciBudW1iZXIpIHRoZW4gYCRyZW5kZXIoKWAgd2lsbCBub3QgYmVcbiAgICogaW52b2tlZCBpZiB5b3Ugb25seSBjaGFuZ2UgYSBwcm9wZXJ0eSBvbiB0aGUgb2JqZWN0cy5cbiAgICovXG4gICRyZW5kZXI6IG5vb3AsXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkaXNFbXB0eVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogVGhpcyBpcyBjYWxsZWQgd2hlbiB3ZSBuZWVkIHRvIGRldGVybWluZSBpZiB0aGUgdmFsdWUgb2YgYW4gaW5wdXQgaXMgZW1wdHkuXG4gICAqXG4gICAqIEZvciBpbnN0YW5jZSwgdGhlIHJlcXVpcmVkIGRpcmVjdGl2ZSBkb2VzIHRoaXMgdG8gd29yayBvdXQgaWYgdGhlIGlucHV0IGhhcyBkYXRhIG9yIG5vdC5cbiAgICpcbiAgICogVGhlIGRlZmF1bHQgYCRpc0VtcHR5YCBmdW5jdGlvbiBjaGVja3Mgd2hldGhlciB0aGUgdmFsdWUgaXMgYHVuZGVmaW5lZGAsIGAnJ2AsIGBudWxsYCBvciBgTmFOYC5cbiAgICpcbiAgICogWW91IGNhbiBvdmVycmlkZSB0aGlzIGZvciBpbnB1dCBkaXJlY3RpdmVzIHdob3NlIGNvbmNlcHQgb2YgYmVpbmcgZW1wdHkgaXMgZGlmZmVyZW50IGZyb20gdGhlXG4gICAqIGRlZmF1bHQuIFRoZSBgY2hlY2tib3hJbnB1dFR5cGVgIGRpcmVjdGl2ZSBkb2VzIHRoaXMgYmVjYXVzZSBpbiBpdHMgY2FzZSBhIHZhbHVlIG9mIGBmYWxzZWBcbiAgICogaW1wbGllcyBlbXB0eS5cbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgb2YgdGhlIGlucHV0IHRvIGNoZWNrIGZvciBlbXB0aW5lc3MuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIGB2YWx1ZWAgaXMgXCJlbXB0eVwiLlxuICAgKi9cbiAgJGlzRW1wdHk6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIHJldHVybiBpc1VuZGVmaW5lZCh2YWx1ZSkgfHwgdmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZTtcbiAgfSxcblxuICAkJHVwZGF0ZUVtcHR5Q2xhc3NlczogZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodGhpcy4kaXNFbXB0eSh2YWx1ZSkpIHtcbiAgICAgIHRoaXMuJCRhbmltYXRlLnJlbW92ZUNsYXNzKHRoaXMuJCRlbGVtZW50LCBOT1RfRU1QVFlfQ0xBU1MpO1xuICAgICAgdGhpcy4kJGFuaW1hdGUuYWRkQ2xhc3ModGhpcy4kJGVsZW1lbnQsIEVNUFRZX0NMQVNTKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy4kJGFuaW1hdGUucmVtb3ZlQ2xhc3ModGhpcy4kJGVsZW1lbnQsIEVNUFRZX0NMQVNTKTtcbiAgICAgIHRoaXMuJCRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCBOT1RfRU1QVFlfQ0xBU1MpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRQcmlzdGluZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogU2V0cyB0aGUgY29udHJvbCB0byBpdHMgcHJpc3RpbmUgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSBgbmctZGlydHlgIGNsYXNzIGFuZCBzZXQgdGhlIGNvbnRyb2wgdG8gaXRzIHByaXN0aW5lXG4gICAqIHN0YXRlIChgbmctcHJpc3RpbmVgIGNsYXNzKS4gQSBtb2RlbCBpcyBjb25zaWRlcmVkIHRvIGJlIHByaXN0aW5lIHdoZW4gdGhlIGNvbnRyb2xcbiAgICogaGFzIG5vdCBiZWVuIGNoYW5nZWQgZnJvbSB3aGVuIGZpcnN0IGNvbXBpbGVkLlxuICAgKi9cbiAgJHNldFByaXN0aW5lOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiRkaXJ0eSA9IGZhbHNlO1xuICAgIHRoaXMuJHByaXN0aW5lID0gdHJ1ZTtcbiAgICB0aGlzLiQkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgRElSVFlfQ0xBU1MpO1xuICAgIHRoaXMuJCRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCBQUklTVElORV9DTEFTUyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0RGlydHlcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFNldHMgdGhlIGNvbnRyb2wgdG8gaXRzIGRpcnR5IHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgYG5nLXByaXN0aW5lYCBjbGFzcyBhbmQgc2V0IHRoZSBjb250cm9sIHRvIGl0cyBkaXJ0eVxuICAgKiBzdGF0ZSAoYG5nLWRpcnR5YCBjbGFzcykuIEEgbW9kZWwgaXMgY29uc2lkZXJlZCB0byBiZSBkaXJ0eSB3aGVuIHRoZSBjb250cm9sIGhhcyBiZWVuIGNoYW5nZWRcbiAgICogZnJvbSB3aGVuIGZpcnN0IGNvbXBpbGVkLlxuICAgKi9cbiAgJHNldERpcnR5OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiRkaXJ0eSA9IHRydWU7XG4gICAgdGhpcy4kcHJpc3RpbmUgPSBmYWxzZTtcbiAgICB0aGlzLiQkYW5pbWF0ZS5yZW1vdmVDbGFzcyh0aGlzLiQkZWxlbWVudCwgUFJJU1RJTkVfQ0xBU1MpO1xuICAgIHRoaXMuJCRhbmltYXRlLmFkZENsYXNzKHRoaXMuJCRlbGVtZW50LCBESVJUWV9DTEFTUyk7XG4gICAgdGhpcy4kJHBhcmVudEZvcm0uJHNldERpcnR5KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0VW50b3VjaGVkXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBjb250cm9sIHRvIGl0cyB1bnRvdWNoZWQgc3RhdGUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgdG8gcmVtb3ZlIHRoZSBgbmctdG91Y2hlZGAgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHNcbiAgICogdW50b3VjaGVkIHN0YXRlIChgbmctdW50b3VjaGVkYCBjbGFzcykuIFVwb24gY29tcGlsYXRpb24sIGEgbW9kZWwgaXMgc2V0IGFzIHVudG91Y2hlZFxuICAgKiBieSBkZWZhdWx0LCBob3dldmVyIHRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gcmVzdG9yZSB0aGF0IHN0YXRlIGlmIHRoZSBtb2RlbCBoYXNcbiAgICogYWxyZWFkeSBiZWVuIHRvdWNoZWQgYnkgdGhlIHVzZXIuXG4gICAqL1xuICAkc2V0VW50b3VjaGVkOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiR0b3VjaGVkID0gZmFsc2U7XG4gICAgdGhpcy4kdW50b3VjaGVkID0gdHJ1ZTtcbiAgICB0aGlzLiQkYW5pbWF0ZS5zZXRDbGFzcyh0aGlzLiQkZWxlbWVudCwgVU5UT1VDSEVEX0NMQVNTLCBUT1VDSEVEX0NMQVNTKTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRzZXRUb3VjaGVkXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBTZXRzIHRoZSBjb250cm9sIHRvIGl0cyB0b3VjaGVkIHN0YXRlLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gYmUgY2FsbGVkIHRvIHJlbW92ZSB0aGUgYG5nLXVudG91Y2hlZGAgY2xhc3MgYW5kIHNldCB0aGUgY29udHJvbCB0byBpdHNcbiAgICogdG91Y2hlZCBzdGF0ZSAoYG5nLXRvdWNoZWRgIGNsYXNzKS4gQSBtb2RlbCBpcyBjb25zaWRlcmVkIHRvIGJlIHRvdWNoZWQgd2hlbiB0aGUgdXNlciBoYXNcbiAgICogZmlyc3QgZm9jdXNlZCB0aGUgY29udHJvbCBlbGVtZW50IGFuZCB0aGVuIHNoaWZ0ZWQgZm9jdXMgYXdheSBmcm9tIHRoZSBjb250cm9sIChibHVyIGV2ZW50KS5cbiAgICovXG4gICRzZXRUb3VjaGVkOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiR0b3VjaGVkID0gdHJ1ZTtcbiAgICB0aGlzLiR1bnRvdWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLiQkYW5pbWF0ZS5zZXRDbGFzcyh0aGlzLiQkZWxlbWVudCwgVE9VQ0hFRF9DTEFTUywgVU5UT1VDSEVEX0NMQVNTKTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRyb2xsYmFja1ZpZXdWYWx1ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogQ2FuY2VsIGFuIHVwZGF0ZSBhbmQgcmVzZXQgdGhlIGlucHV0IGVsZW1lbnQncyB2YWx1ZSB0byBwcmV2ZW50IGFuIHVwZGF0ZSB0byB0aGUgYCRtb2RlbFZhbHVlYCxcbiAgICogd2hpY2ggbWF5IGJlIGNhdXNlZCBieSBhIHBlbmRpbmcgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIHNvbWVcbiAgICogZnV0dXJlIGV2ZW50LlxuICAgKlxuICAgKiBJZiB5b3UgaGF2ZSBhbiBpbnB1dCB0aGF0IHVzZXMgYG5nLW1vZGVsLW9wdGlvbnNgIHRvIHNldCB1cCBkZWJvdW5jZWQgdXBkYXRlcyBvciB1cGRhdGVzIHRoYXRcbiAgICogZGVwZW5kIG9uIHNwZWNpYWwgZXZlbnRzIHN1Y2ggYXMgYGJsdXJgLCB0aGVyZSBjYW4gYmUgYSBwZXJpb2Qgd2hlbiB0aGUgYCR2aWV3VmFsdWVgIGlzIG91dCBvZlxuICAgKiBzeW5jIHdpdGggdGhlIG5nTW9kZWwncyBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBJbiB0aGlzIGNhc2UsIHlvdSBjYW4gdXNlIGAkcm9sbGJhY2tWaWV3VmFsdWUoKWAgdG8gbWFudWFsbHkgY2FuY2VsIHRoZSBkZWJvdW5jZWQgLyBmdXR1cmUgdXBkYXRlXG4gICAqIGFuZCByZXNldCB0aGUgaW5wdXQgdG8gdGhlIGxhc3QgY29tbWl0dGVkIHZpZXcgdmFsdWUuXG4gICAqXG4gICAqIEl0IGlzIGFsc28gcG9zc2libGUgdGhhdCB5b3UgcnVuIGludG8gZGlmZmljdWx0aWVzIGlmIHlvdSB0cnkgdG8gdXBkYXRlIHRoZSBuZ01vZGVsJ3MgYCRtb2RlbFZhbHVlYFxuICAgKiBwcm9ncmFtbWF0aWNhbGx5IGJlZm9yZSB0aGVzZSBkZWJvdW5jZWQvZnV0dXJlIGV2ZW50cyBoYXZlIHJlc29sdmVkL29jY3VycmVkLCBiZWNhdXNlIEFuZ3VsYXInc1xuICAgKiBkaXJ0eSBjaGVja2luZyBtZWNoYW5pc20gaXMgbm90IGFibGUgdG8gdGVsbCB3aGV0aGVyIHRoZSBtb2RlbCBoYXMgYWN0dWFsbHkgY2hhbmdlZCBvciBub3QuXG4gICAqXG4gICAqIFRoZSBgJHJvbGxiYWNrVmlld1ZhbHVlKClgIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSBwcm9ncmFtbWF0aWNhbGx5IGNoYW5naW5nIHRoZSBtb2RlbCBvZiBhblxuICAgKiBpbnB1dCB3aGljaCBtYXkgaGF2ZSBzdWNoIGV2ZW50cyBwZW5kaW5nLiBUaGlzIGlzIGltcG9ydGFudCBpbiBvcmRlciB0byBtYWtlIHN1cmUgdGhhdCB0aGVcbiAgICogaW5wdXQgZmllbGQgd2lsbCBiZSB1cGRhdGVkIHdpdGggdGhlIG5ldyBtb2RlbCB2YWx1ZSBhbmQgYW55IHBlbmRpbmcgb3BlcmF0aW9ucyBhcmUgY2FuY2VsbGVkLlxuICAgKlxuICAgKiA8ZXhhbXBsZSBuYW1lPVwibmctbW9kZWwtY2FuY2VsLXVwZGF0ZVwiIG1vZHVsZT1cImNhbmNlbC11cGRhdGUtZXhhbXBsZVwiPlxuICAgKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICogICAgIGFuZ3VsYXIubW9kdWxlKCdjYW5jZWwtdXBkYXRlLWV4YW1wbGUnLCBbXSlcbiAgICpcbiAgICogICAgIC5jb250cm9sbGVyKCdDYW5jZWxVcGRhdGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICogICAgICAgJHNjb3BlLm1vZGVsID0ge3ZhbHVlMTogJycsIHZhbHVlMjogJyd9O1xuICAgKlxuICAgKiAgICAgICAkc2NvcGUuc2V0RW1wdHkgPSBmdW5jdGlvbihlLCB2YWx1ZSwgcm9sbGJhY2spIHtcbiAgICogICAgICAgICBpZiAoZS5rZXlDb2RlID09PSAyNykge1xuICAgKiAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgKiAgICAgICAgICAgaWYgKHJvbGxiYWNrKSB7XG4gICAqICAgICAgICAgICAgICRzY29wZS5teUZvcm1bdmFsdWVdLiRyb2xsYmFja1ZpZXdWYWx1ZSgpO1xuICAgKiAgICAgICAgICAgfVxuICAgKiAgICAgICAgICAgJHNjb3BlLm1vZGVsW3ZhbHVlXSA9ICcnO1xuICAgKiAgICAgICAgIH1cbiAgICogICAgICAgfTtcbiAgICogICAgIH1dKTtcbiAgICogICA8L2ZpbGU+XG4gICAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkNhbmNlbFVwZGF0ZUNvbnRyb2xsZXJcIj5cbiAgICogICAgICAgPHA+Qm90aCBvZiB0aGVzZSBpbnB1dHMgYXJlIG9ubHkgdXBkYXRlZCBpZiB0aGV5IGFyZSBibHVycmVkLiBIaXR0aW5nIGVzY2FwZSBzaG91bGRcbiAgICogICAgICAgZW1wdHkgdGhlbS4gRm9sbG93IHRoZXNlIHN0ZXBzIGFuZCBvYnNlcnZlIHRoZSBkaWZmZXJlbmNlOjwvcD5cbiAgICogICAgICAgPG9sPlxuICAgKiAgICAgICAgIDxsaT5UeXBlIHNvbWV0aGluZyBpbiB0aGUgaW5wdXQuIFlvdSB3aWxsIHNlZSB0aGF0IHRoZSBtb2RlbCBpcyBub3QgeWV0IHVwZGF0ZWQ8L2xpPlxuICAgKiAgICAgICAgIDxsaT5QcmVzcyB0aGUgRXNjYXBlIGtleS5cbiAgICogICAgICAgICAgIDxvbD5cbiAgICogICAgICAgICAgICAgPGxpPiBJbiB0aGUgZmlyc3QgZXhhbXBsZSwgbm90aGluZyBoYXBwZW5zLCBiZWNhdXNlIHRoZSBtb2RlbCBpcyBhbHJlYWR5ICcnLCBhbmQgbm9cbiAgICogICAgICAgICAgICAgdXBkYXRlIGlzIGRldGVjdGVkLiBJZiB5b3UgYmx1ciB0aGUgaW5wdXQsIHRoZSBtb2RlbCB3aWxsIGJlIHNldCB0byB0aGUgY3VycmVudCB2aWV3LlxuICAgKiAgICAgICAgICAgICA8L2xpPlxuICAgKiAgICAgICAgICAgICA8bGk+IEluIHRoZSBzZWNvbmQgZXhhbXBsZSwgdGhlIHBlbmRpbmcgdXBkYXRlIGlzIGNhbmNlbGxlZCwgYW5kIHRoZSBpbnB1dCBpcyBzZXQgYmFja1xuICAgKiAgICAgICAgICAgICB0byB0aGUgbGFzdCBjb21taXR0ZWQgdmlldyB2YWx1ZSAoJycpLiBCbHVycmluZyB0aGUgaW5wdXQgZG9lcyBub3RoaW5nLlxuICAgKiAgICAgICAgICAgICA8L2xpPlxuICAgKiAgICAgICAgICAgPC9vbD5cbiAgICogICAgICAgICA8L2xpPlxuICAgKiAgICAgICA8L29sPlxuICAgKlxuICAgKiAgICAgICA8Zm9ybSBuYW1lPVwibXlGb3JtXCIgbmctbW9kZWwtb3B0aW9ucz1cInsgdXBkYXRlT246ICdibHVyJyB9XCI+XG4gICAqICAgICAgICAgPGRpdj5cbiAgICogICAgICAgICAgIDxwIGlkPVwiaW5wdXREZXNjcmlwdGlvbjFcIj5XaXRob3V0ICRyb2xsYmFja1ZpZXdWYWx1ZSgpOjwvcD5cbiAgICogICAgICAgICAgIDxpbnB1dCBuYW1lPVwidmFsdWUxXCIgYXJpYS1kZXNjcmliZWRieT1cImlucHV0RGVzY3JpcHRpb24xXCIgbmctbW9kZWw9XCJtb2RlbC52YWx1ZTFcIlxuICAgKiAgICAgICAgICAgICAgICAgIG5nLWtleWRvd249XCJzZXRFbXB0eSgkZXZlbnQsICd2YWx1ZTEnKVwiPlxuICAgKiAgICAgICAgICAgdmFsdWUxOiBcInt7IG1vZGVsLnZhbHVlMSB9fVwiXG4gICAqICAgICAgICAgPC9kaXY+XG4gICAqXG4gICAqICAgICAgICAgPGRpdj5cbiAgICogICAgICAgICAgIDxwIGlkPVwiaW5wdXREZXNjcmlwdGlvbjJcIj5XaXRoICRyb2xsYmFja1ZpZXdWYWx1ZSgpOjwvcD5cbiAgICogICAgICAgICAgIDxpbnB1dCBuYW1lPVwidmFsdWUyXCIgYXJpYS1kZXNjcmliZWRieT1cImlucHV0RGVzY3JpcHRpb24yXCIgbmctbW9kZWw9XCJtb2RlbC52YWx1ZTJcIlxuICAgKiAgICAgICAgICAgICAgICAgIG5nLWtleWRvd249XCJzZXRFbXB0eSgkZXZlbnQsICd2YWx1ZTInLCB0cnVlKVwiPlxuICAgKiAgICAgICAgICAgdmFsdWUyOiBcInt7IG1vZGVsLnZhbHVlMiB9fVwiXG4gICAqICAgICAgICAgPC9kaXY+XG4gICAqICAgICAgIDwvZm9ybT5cbiAgICogICAgIDwvZGl2PlxuICAgKiAgIDwvZmlsZT5cbiAgICAgICA8ZmlsZSBuYW1lPVwic3R5bGUuY3NzXCI+XG4gICAgICAgICAgZGl2IHtcbiAgICAgICAgICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRpdjpudGgtY2hpbGQoMSkge1xuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMzBweDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgPC9maWxlPlxuICAgKiA8L2V4YW1wbGU+XG4gICAqL1xuICAkcm9sbGJhY2tWaWV3VmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuJCR0aW1lb3V0LmNhbmNlbCh0aGlzLiQkcGVuZGluZ0RlYm91bmNlKTtcbiAgICB0aGlzLiR2aWV3VmFsdWUgPSB0aGlzLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZTtcbiAgICB0aGlzLiRyZW5kZXIoKTtcbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0ZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUnVucyBlYWNoIG9mIHRoZSByZWdpc3RlcmVkIHZhbGlkYXRvcnMgKGZpcnN0IHN5bmNocm9ub3VzIHZhbGlkYXRvcnMgYW5kIHRoZW5cbiAgICogYXN5bmNocm9ub3VzIHZhbGlkYXRvcnMpLlxuICAgKiBJZiB0aGUgdmFsaWRpdHkgY2hhbmdlcyB0byBpbnZhbGlkLCB0aGUgbW9kZWwgd2lsbCBiZSBzZXQgdG8gYHVuZGVmaW5lZGAsXG4gICAqIHVubGVzcyB7QGxpbmsgbmdNb2RlbE9wdGlvbnMgYG5nTW9kZWxPcHRpb25zLmFsbG93SW52YWxpZGB9IGlzIGB0cnVlYC5cbiAgICogSWYgdGhlIHZhbGlkaXR5IGNoYW5nZXMgdG8gdmFsaWQsIGl0IHdpbGwgc2V0IHRoZSBtb2RlbCB0byB0aGUgbGFzdCBhdmFpbGFibGUgdmFsaWRcbiAgICogYCRtb2RlbFZhbHVlYCwgaS5lLiBlaXRoZXIgdGhlIGxhc3QgcGFyc2VkIHZhbHVlIG9yIHRoZSBsYXN0IHZhbHVlIHNldCBmcm9tIHRoZSBzY29wZS5cbiAgICovXG4gICR2YWxpZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgLy8gaWdub3JlICR2YWxpZGF0ZSBiZWZvcmUgbW9kZWwgaXMgaW5pdGlhbGl6ZWRcbiAgICBpZiAoaXNOdW1iZXJOYU4odGhpcy4kbW9kZWxWYWx1ZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdmlld1ZhbHVlID0gdGhpcy4kJGxhc3RDb21taXR0ZWRWaWV3VmFsdWU7XG4gICAgLy8gTm90ZTogd2UgdXNlIHRoZSAkJHJhd01vZGVsVmFsdWUgYXMgJG1vZGVsVmFsdWUgbWlnaHQgaGF2ZSBiZWVuXG4gICAgLy8gc2V0IHRvIHVuZGVmaW5lZCBkdXJpbmcgYSB2aWV3IC0+IG1vZGVsIHVwZGF0ZSB0aGF0IGZvdW5kIHZhbGlkYXRpb25cbiAgICAvLyBlcnJvcnMuIFdlIGNhbid0IHBhcnNlIHRoZSB2aWV3IGhlcmUsIHNpbmNlIHRoYXQgY291bGQgY2hhbmdlXG4gICAgLy8gdGhlIG1vZGVsIGFsdGhvdWdoIG5laXRoZXIgdmlld1ZhbHVlIG5vciB0aGUgbW9kZWwgb24gdGhlIHNjb3BlIGNoYW5nZWRcbiAgICB2YXIgbW9kZWxWYWx1ZSA9IHRoaXMuJCRyYXdNb2RlbFZhbHVlO1xuXG4gICAgdmFyIHByZXZWYWxpZCA9IHRoaXMuJHZhbGlkO1xuICAgIHZhciBwcmV2TW9kZWxWYWx1ZSA9IHRoaXMuJG1vZGVsVmFsdWU7XG5cbiAgICB2YXIgYWxsb3dJbnZhbGlkID0gdGhpcy4kb3B0aW9ucy5nZXRPcHRpb24oJ2FsbG93SW52YWxpZCcpO1xuXG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIHRoaXMuJCRydW5WYWxpZGF0b3JzKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSwgZnVuY3Rpb24oYWxsVmFsaWQpIHtcbiAgICAgIC8vIElmIHRoZXJlIHdhcyBubyBjaGFuZ2UgaW4gdmFsaWRpdHksIGRvbid0IHVwZGF0ZSB0aGUgbW9kZWxcbiAgICAgIC8vIFRoaXMgcHJldmVudHMgY2hhbmdpbmcgYW4gaW52YWxpZCBtb2RlbFZhbHVlIHRvIHVuZGVmaW5lZFxuICAgICAgaWYgKCFhbGxvd0ludmFsaWQgJiYgcHJldlZhbGlkICE9PSBhbGxWYWxpZCkge1xuICAgICAgICAvLyBOb3RlOiBEb24ndCBjaGVjayB0aGlzLiR2YWxpZCBoZXJlLCBhcyB3ZSBjb3VsZCBoYXZlXG4gICAgICAgIC8vIGV4dGVybmFsIHZhbGlkYXRvcnMgKGUuZy4gY2FsY3VsYXRlZCBvbiB0aGUgc2VydmVyKSxcbiAgICAgICAgLy8gdGhhdCBqdXN0IGNhbGwgJHNldFZhbGlkaXR5IGFuZCBuZWVkIHRoZSBtb2RlbCB2YWx1ZVxuICAgICAgICAvLyB0byBjYWxjdWxhdGUgdGhlaXIgdmFsaWRpdHkuXG4gICAgICAgIHRoYXQuJG1vZGVsVmFsdWUgPSBhbGxWYWxpZCA/IG1vZGVsVmFsdWUgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKHRoYXQuJG1vZGVsVmFsdWUgIT09IHByZXZNb2RlbFZhbHVlKSB7XG4gICAgICAgICAgdGhhdC4kJHdyaXRlTW9kZWxUb1Njb3BlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICAkJHJ1blZhbGlkYXRvcnM6IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSwgZG9uZUNhbGxiYWNrKSB7XG4gICAgdGhpcy4kJGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQrKztcbiAgICB2YXIgbG9jYWxWYWxpZGF0aW9uUnVuSWQgPSB0aGlzLiQkY3VycmVudFZhbGlkYXRpb25SdW5JZDtcbiAgICB2YXIgdGhhdCA9IHRoaXM7XG5cbiAgICAvLyBjaGVjayBwYXJzZXIgZXJyb3JcbiAgICBpZiAoIXByb2Nlc3NQYXJzZUVycm9ycygpKSB7XG4gICAgICB2YWxpZGF0aW9uRG9uZShmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghcHJvY2Vzc1N5bmNWYWxpZGF0b3JzKCkpIHtcbiAgICAgIHZhbGlkYXRpb25Eb25lKGZhbHNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcHJvY2Vzc0FzeW5jVmFsaWRhdG9ycygpO1xuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1BhcnNlRXJyb3JzKCkge1xuICAgICAgdmFyIGVycm9yS2V5ID0gdGhhdC4kJHBhcnNlck5hbWUgfHwgJ3BhcnNlJztcbiAgICAgIGlmIChpc1VuZGVmaW5lZCh0aGF0LiQkcGFyc2VyVmFsaWQpKSB7XG4gICAgICAgIHNldFZhbGlkaXR5KGVycm9yS2V5LCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhhdC4kJHBhcnNlclZhbGlkKSB7XG4gICAgICAgICAgZm9yRWFjaCh0aGF0LiR2YWxpZGF0b3JzLCBmdW5jdGlvbih2LCBuYW1lKSB7XG4gICAgICAgICAgICBzZXRWYWxpZGl0eShuYW1lLCBudWxsKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb3JFYWNoKHRoYXQuJGFzeW5jVmFsaWRhdG9ycywgZnVuY3Rpb24odiwgbmFtZSkge1xuICAgICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgbnVsbCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IHRoZSBwYXJzZSBlcnJvciBsYXN0LCB0byBwcmV2ZW50IHVuc2V0dGluZyBpdCwgc2hvdWxkIGEgJHZhbGlkYXRvcnMga2V5ID09IHBhcnNlck5hbWVcbiAgICAgICAgc2V0VmFsaWRpdHkoZXJyb3JLZXksIHRoYXQuJCRwYXJzZXJWYWxpZCk7XG4gICAgICAgIHJldHVybiB0aGF0LiQkcGFyc2VyVmFsaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzU3luY1ZhbGlkYXRvcnMoKSB7XG4gICAgICB2YXIgc3luY1ZhbGlkYXRvcnNWYWxpZCA9IHRydWU7XG4gICAgICBmb3JFYWNoKHRoYXQuJHZhbGlkYXRvcnMsIGZ1bmN0aW9uKHZhbGlkYXRvciwgbmFtZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gQm9vbGVhbih2YWxpZGF0b3IobW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSk7XG4gICAgICAgIHN5bmNWYWxpZGF0b3JzVmFsaWQgPSBzeW5jVmFsaWRhdG9yc1ZhbGlkICYmIHJlc3VsdDtcbiAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgcmVzdWx0KTtcbiAgICAgIH0pO1xuICAgICAgaWYgKCFzeW5jVmFsaWRhdG9yc1ZhbGlkKSB7XG4gICAgICAgIGZvckVhY2godGhhdC4kYXN5bmNWYWxpZGF0b3JzLCBmdW5jdGlvbih2LCBuYW1lKSB7XG4gICAgICAgICAgc2V0VmFsaWRpdHkobmFtZSwgbnVsbCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzQXN5bmNWYWxpZGF0b3JzKCkge1xuICAgICAgdmFyIHZhbGlkYXRvclByb21pc2VzID0gW107XG4gICAgICB2YXIgYWxsVmFsaWQgPSB0cnVlO1xuICAgICAgZm9yRWFjaCh0aGF0LiRhc3luY1ZhbGlkYXRvcnMsIGZ1bmN0aW9uKHZhbGlkYXRvciwgbmFtZSkge1xuICAgICAgICB2YXIgcHJvbWlzZSA9IHZhbGlkYXRvcihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpO1xuICAgICAgICBpZiAoIWlzUHJvbWlzZUxpa2UocHJvbWlzZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZ01vZGVsTWluRXJyKCdub3Byb21pc2UnLFxuICAgICAgICAgICAgJ0V4cGVjdGVkIGFzeW5jaHJvbm91cyB2YWxpZGF0b3IgdG8gcmV0dXJuIGEgcHJvbWlzZSBidXQgZ290IFxcJ3swfVxcJyBpbnN0ZWFkLicsIHByb21pc2UpO1xuICAgICAgICB9XG4gICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHVuZGVmaW5lZCk7XG4gICAgICAgIHZhbGlkYXRvclByb21pc2VzLnB1c2gocHJvbWlzZS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIHRydWUpO1xuICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBhbGxWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgIHNldFZhbGlkaXR5KG5hbWUsIGZhbHNlKTtcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBpZiAoIXZhbGlkYXRvclByb21pc2VzLmxlbmd0aCkge1xuICAgICAgICB2YWxpZGF0aW9uRG9uZSh0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoYXQuJCRxLmFsbCh2YWxpZGF0b3JQcm9taXNlcykudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YWxpZGF0aW9uRG9uZShhbGxWYWxpZCk7XG4gICAgICAgIH0sIG5vb3ApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFZhbGlkaXR5KG5hbWUsIGlzVmFsaWQpIHtcbiAgICAgIGlmIChsb2NhbFZhbGlkYXRpb25SdW5JZCA9PT0gdGhhdC4kJGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQpIHtcbiAgICAgICAgdGhhdC4kc2V0VmFsaWRpdHkobmFtZSwgaXNWYWxpZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGlvbkRvbmUoYWxsVmFsaWQpIHtcbiAgICAgIGlmIChsb2NhbFZhbGlkYXRpb25SdW5JZCA9PT0gdGhhdC4kJGN1cnJlbnRWYWxpZGF0aW9uUnVuSWQpIHtcblxuICAgICAgICBkb25lQ2FsbGJhY2soYWxsVmFsaWQpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRjb21taXRWaWV3VmFsdWVcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIENvbW1pdCBhIHBlbmRpbmcgdXBkYXRlIHRvIHRoZSBgJG1vZGVsVmFsdWVgLlxuICAgKlxuICAgKiBVcGRhdGVzIG1heSBiZSBwZW5kaW5nIGJ5IGEgZGVib3VuY2VkIGV2ZW50IG9yIGJlY2F1c2UgdGhlIGlucHV0IGlzIHdhaXRpbmcgZm9yIGEgc29tZSBmdXR1cmVcbiAgICogZXZlbnQgZGVmaW5lZCBpbiBgbmctbW9kZWwtb3B0aW9uc2AuIHRoaXMgbWV0aG9kIGlzIHJhcmVseSBuZWVkZWQgYXMgYE5nTW9kZWxDb250cm9sbGVyYFxuICAgKiB1c3VhbGx5IGhhbmRsZXMgY2FsbGluZyB0aGlzIGluIHJlc3BvbnNlIHRvIGlucHV0IGV2ZW50cy5cbiAgICovXG4gICRjb21taXRWaWV3VmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2aWV3VmFsdWUgPSB0aGlzLiR2aWV3VmFsdWU7XG5cbiAgICB0aGlzLiQkdGltZW91dC5jYW5jZWwodGhpcy4kJHBlbmRpbmdEZWJvdW5jZSk7XG5cbiAgICAvLyBJZiB0aGUgdmlldyB2YWx1ZSBoYXMgbm90IGNoYW5nZWQgdGhlbiB3ZSBzaG91bGQganVzdCBleGl0LCBleGNlcHQgaW4gdGhlIGNhc2Ugd2hlcmUgdGhlcmUgaXNcbiAgICAvLyBhIG5hdGl2ZSB2YWxpZGF0b3Igb24gdGhlIGVsZW1lbnQuIEluIHRoaXMgY2FzZSB0aGUgdmFsaWRhdGlvbiBzdGF0ZSBtYXkgaGF2ZSBjaGFuZ2VkIGV2ZW4gdGhvdWdoXG4gICAgLy8gdGhlIHZpZXdWYWx1ZSBoYXMgc3RheWVkIGVtcHR5LlxuICAgIGlmICh0aGlzLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSA9PT0gdmlld1ZhbHVlICYmICh2aWV3VmFsdWUgIT09ICcnIHx8ICF0aGlzLiQkaGFzTmF0aXZlVmFsaWRhdG9ycykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy4kJHVwZGF0ZUVtcHR5Q2xhc3Nlcyh2aWV3VmFsdWUpO1xuICAgIHRoaXMuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlID0gdmlld1ZhbHVlO1xuXG4gICAgLy8gY2hhbmdlIHRvIGRpcnR5XG4gICAgaWYgKHRoaXMuJHByaXN0aW5lKSB7XG4gICAgICB0aGlzLiRzZXREaXJ0eSgpO1xuICAgIH1cbiAgICB0aGlzLiQkcGFyc2VBbmRWYWxpZGF0ZSgpO1xuICB9LFxuXG4gICQkcGFyc2VBbmRWYWxpZGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZpZXdWYWx1ZSA9IHRoaXMuJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlO1xuICAgIHZhciBtb2RlbFZhbHVlID0gdmlld1ZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgIHRoaXMuJCRwYXJzZXJWYWxpZCA9IGlzVW5kZWZpbmVkKG1vZGVsVmFsdWUpID8gdW5kZWZpbmVkIDogdHJ1ZTtcblxuICAgIGlmICh0aGlzLiQkcGFyc2VyVmFsaWQpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy4kcGFyc2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBtb2RlbFZhbHVlID0gdGhpcy4kcGFyc2Vyc1tpXShtb2RlbFZhbHVlKTtcbiAgICAgICAgaWYgKGlzVW5kZWZpbmVkKG1vZGVsVmFsdWUpKSB7XG4gICAgICAgICAgdGhpcy4kJHBhcnNlclZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTnVtYmVyTmFOKHRoaXMuJG1vZGVsVmFsdWUpKSB7XG4gICAgICAvLyB0aGlzLiRtb2RlbFZhbHVlIGhhcyBub3QgYmVlbiB0b3VjaGVkIHlldC4uLlxuICAgICAgdGhpcy4kbW9kZWxWYWx1ZSA9IHRoaXMuJCRuZ01vZGVsR2V0KHRoaXMuJCRzY29wZSk7XG4gICAgfVxuICAgIHZhciBwcmV2TW9kZWxWYWx1ZSA9IHRoaXMuJG1vZGVsVmFsdWU7XG4gICAgdmFyIGFsbG93SW52YWxpZCA9IHRoaXMuJG9wdGlvbnMuZ2V0T3B0aW9uKCdhbGxvd0ludmFsaWQnKTtcbiAgICB0aGlzLiQkcmF3TW9kZWxWYWx1ZSA9IG1vZGVsVmFsdWU7XG5cbiAgICBpZiAoYWxsb3dJbnZhbGlkKSB7XG4gICAgICB0aGlzLiRtb2RlbFZhbHVlID0gbW9kZWxWYWx1ZTtcbiAgICAgIHdyaXRlVG9Nb2RlbElmTmVlZGVkKCk7XG4gICAgfVxuXG4gICAgLy8gUGFzcyB0aGUgJCRsYXN0Q29tbWl0dGVkVmlld1ZhbHVlIGhlcmUsIGJlY2F1c2UgdGhlIGNhY2hlZCB2aWV3VmFsdWUgbWlnaHQgYmUgb3V0IG9mIGRhdGUuXG4gICAgLy8gVGhpcyBjYW4gaGFwcGVuIGlmIGUuZy4gJHNldFZpZXdWYWx1ZSBpcyBjYWxsZWQgZnJvbSBpbnNpZGUgYSBwYXJzZXJcbiAgICB0aGlzLiQkcnVuVmFsaWRhdG9ycyhtb2RlbFZhbHVlLCB0aGlzLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSwgZnVuY3Rpb24oYWxsVmFsaWQpIHtcbiAgICAgIGlmICghYWxsb3dJbnZhbGlkKSB7XG4gICAgICAgIC8vIE5vdGU6IERvbid0IGNoZWNrIHRoaXMuJHZhbGlkIGhlcmUsIGFzIHdlIGNvdWxkIGhhdmVcbiAgICAgICAgLy8gZXh0ZXJuYWwgdmFsaWRhdG9ycyAoZS5nLiBjYWxjdWxhdGVkIG9uIHRoZSBzZXJ2ZXIpLFxuICAgICAgICAvLyB0aGF0IGp1c3QgY2FsbCAkc2V0VmFsaWRpdHkgYW5kIG5lZWQgdGhlIG1vZGVsIHZhbHVlXG4gICAgICAgIC8vIHRvIGNhbGN1bGF0ZSB0aGVpciB2YWxpZGl0eS5cbiAgICAgICAgdGhhdC4kbW9kZWxWYWx1ZSA9IGFsbFZhbGlkID8gbW9kZWxWYWx1ZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgd3JpdGVUb01vZGVsSWZOZWVkZWQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIHdyaXRlVG9Nb2RlbElmTmVlZGVkKCkge1xuICAgICAgaWYgKHRoYXQuJG1vZGVsVmFsdWUgIT09IHByZXZNb2RlbFZhbHVlKSB7XG4gICAgICAgIHRoYXQuJCR3cml0ZU1vZGVsVG9TY29wZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICAkJHdyaXRlTW9kZWxUb1Njb3BlOiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLiQkbmdNb2RlbFNldCh0aGlzLiQkc2NvcGUsIHRoaXMuJG1vZGVsVmFsdWUpO1xuICAgIGZvckVhY2godGhpcy4kdmlld0NoYW5nZUxpc3RlbmVycywgZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbnZhbGlkLXRoaXNcbiAgICAgICAgdGhpcy4kJGV4Y2VwdGlvbkhhbmRsZXIoZSk7XG4gICAgICB9XG4gICAgfSwgdGhpcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkc2V0Vmlld1ZhbHVlXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBVcGRhdGUgdGhlIHZpZXcgdmFsdWUuXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgd2hlbiBhIGNvbnRyb2wgd2FudHMgdG8gY2hhbmdlIHRoZSB2aWV3IHZhbHVlOyB0eXBpY2FsbHksXG4gICAqIHRoaXMgaXMgZG9uZSBmcm9tIHdpdGhpbiBhIERPTSBldmVudCBoYW5kbGVyLiBGb3IgZXhhbXBsZSwgdGhlIHtAbGluayBuZy5kaXJlY3RpdmU6aW5wdXQgaW5wdXR9XG4gICAqIGRpcmVjdGl2ZSBjYWxscyBpdCB3aGVuIHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQgY2hhbmdlcyBhbmQge0BsaW5rIG5nLmRpcmVjdGl2ZTpzZWxlY3Qgc2VsZWN0fVxuICAgKiBjYWxscyBpdCB3aGVuIGFuIG9wdGlvbiBpcyBzZWxlY3RlZC5cbiAgICpcbiAgICogV2hlbiBgJHNldFZpZXdWYWx1ZWAgaXMgY2FsbGVkLCB0aGUgbmV3IGB2YWx1ZWAgd2lsbCBiZSBzdGFnZWQgZm9yIGNvbW1pdHRpbmcgdGhyb3VnaCB0aGUgYCRwYXJzZXJzYFxuICAgKiBhbmQgYCR2YWxpZGF0b3JzYCBwaXBlbGluZXMuIElmIHRoZXJlIGFyZSBubyBzcGVjaWFsIHtAbGluayBuZ01vZGVsT3B0aW9uc30gc3BlY2lmaWVkIHRoZW4gdGhlIHN0YWdlZFxuICAgKiB2YWx1ZSBpcyBzZW50IGRpcmVjdGx5IGZvciBwcm9jZXNzaW5nIHRocm91Z2ggdGhlIGAkcGFyc2Vyc2AgcGlwZWxpbmUuIEFmdGVyIHRoaXMsIHRoZSBgJHZhbGlkYXRvcnNgIGFuZFxuICAgKiBgJGFzeW5jVmFsaWRhdG9yc2AgYXJlIGNhbGxlZCBhbmQgdGhlIHZhbHVlIGlzIGFwcGxpZWQgdG8gYCRtb2RlbFZhbHVlYC5cbiAgICogRmluYWxseSwgdGhlIHZhbHVlIGlzIHNldCB0byB0aGUgKipleHByZXNzaW9uKiogc3BlY2lmaWVkIGluIHRoZSBgbmctbW9kZWxgIGF0dHJpYnV0ZSBhbmRcbiAgICogYWxsIHRoZSByZWdpc3RlcmVkIGNoYW5nZSBsaXN0ZW5lcnMsIGluIHRoZSBgJHZpZXdDaGFuZ2VMaXN0ZW5lcnNgIGxpc3QgYXJlIGNhbGxlZC5cbiAgICpcbiAgICogSW4gY2FzZSB0aGUge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBuZ01vZGVsT3B0aW9uc30gZGlyZWN0aXZlIGlzIHVzZWQgd2l0aCBgdXBkYXRlT25gXG4gICAqIGFuZCB0aGUgYGRlZmF1bHRgIHRyaWdnZXIgaXMgbm90IGxpc3RlZCwgYWxsIHRob3NlIGFjdGlvbnMgd2lsbCByZW1haW4gcGVuZGluZyB1bnRpbCBvbmUgb2YgdGhlXG4gICAqIGB1cGRhdGVPbmAgZXZlbnRzIGlzIHRyaWdnZXJlZCBvbiB0aGUgRE9NIGVsZW1lbnQuXG4gICAqIEFsbCB0aGVzZSBhY3Rpb25zIHdpbGwgYmUgZGVib3VuY2VkIGlmIHRoZSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nTW9kZWxPcHRpb25zIG5nTW9kZWxPcHRpb25zfVxuICAgKiBkaXJlY3RpdmUgaXMgdXNlZCB3aXRoIGEgY3VzdG9tIGRlYm91bmNlIGZvciB0aGlzIHBhcnRpY3VsYXIgZXZlbnQuXG4gICAqIE5vdGUgdGhhdCBhIGAkZGlnZXN0YCBpcyBvbmx5IHRyaWdnZXJlZCBvbmNlIHRoZSBgdXBkYXRlT25gIGV2ZW50cyBhcmUgZmlyZWQsIG9yIGlmIGBkZWJvdW5jZWBcbiAgICogaXMgc3BlY2lmaWVkLCBvbmNlIHRoZSB0aW1lciBydW5zIG91dC5cbiAgICpcbiAgICogV2hlbiB1c2VkIHdpdGggc3RhbmRhcmQgaW5wdXRzLCB0aGUgdmlldyB2YWx1ZSB3aWxsIGFsd2F5cyBiZSBhIHN0cmluZyAod2hpY2ggaXMgaW4gc29tZSBjYXNlc1xuICAgKiBwYXJzZWQgaW50byBhbm90aGVyIHR5cGUsIHN1Y2ggYXMgYSBgRGF0ZWAgb2JqZWN0IGZvciBgaW5wdXRbZGF0ZV1gLilcbiAgICogSG93ZXZlciwgY3VzdG9tIGNvbnRyb2xzIG1pZ2h0IGFsc28gcGFzcyBvYmplY3RzIHRvIHRoaXMgbWV0aG9kLiBJbiB0aGlzIGNhc2UsIHdlIHNob3VsZCBtYWtlXG4gICAqIGEgY29weSBvZiB0aGUgb2JqZWN0IGJlZm9yZSBwYXNzaW5nIGl0IHRvIGAkc2V0Vmlld1ZhbHVlYC4gVGhpcyBpcyBiZWNhdXNlIGBuZ01vZGVsYCBkb2VzIG5vdFxuICAgKiBwZXJmb3JtIGEgZGVlcCB3YXRjaCBvZiBvYmplY3RzLCBpdCBvbmx5IGxvb2tzIGZvciBhIGNoYW5nZSBvZiBpZGVudGl0eS4gSWYgeW91IG9ubHkgY2hhbmdlXG4gICAqIHRoZSBwcm9wZXJ0eSBvZiB0aGUgb2JqZWN0IHRoZW4gbmdNb2RlbCB3aWxsIG5vdCByZWFsaXplIHRoYXQgdGhlIG9iamVjdCBoYXMgY2hhbmdlZCBhbmRcbiAgICogd2lsbCBub3QgaW52b2tlIHRoZSBgJHBhcnNlcnNgIGFuZCBgJHZhbGlkYXRvcnNgIHBpcGVsaW5lcy4gRm9yIHRoaXMgcmVhc29uLCB5b3Ugc2hvdWxkXG4gICAqIG5vdCBjaGFuZ2UgcHJvcGVydGllcyBvZiB0aGUgY29weSBvbmNlIGl0IGhhcyBiZWVuIHBhc3NlZCB0byBgJHNldFZpZXdWYWx1ZWAuXG4gICAqIE90aGVyd2lzZSB5b3UgbWF5IGNhdXNlIHRoZSBtb2RlbCB2YWx1ZSBvbiB0aGUgc2NvcGUgdG8gY2hhbmdlIGluY29ycmVjdGx5LlxuICAgKlxuICAgKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICAgKiBJbiBhbnkgY2FzZSwgdGhlIHZhbHVlIHBhc3NlZCB0byB0aGUgbWV0aG9kIHNob3VsZCBhbHdheXMgcmVmbGVjdCB0aGUgY3VycmVudCB2YWx1ZVxuICAgKiBvZiB0aGUgY29udHJvbC4gRm9yIGV4YW1wbGUsIGlmIHlvdSBhcmUgY2FsbGluZyBgJHNldFZpZXdWYWx1ZWAgZm9yIGFuIGlucHV0IGVsZW1lbnQsXG4gICAqIHlvdSBzaG91bGQgcGFzcyB0aGUgaW5wdXQgRE9NIHZhbHVlLiBPdGhlcndpc2UsIHRoZSBjb250cm9sIGFuZCB0aGUgc2NvcGUgbW9kZWwgYmVjb21lXG4gICAqIG91dCBvZiBzeW5jLiBJdCdzIGFsc28gaW1wb3J0YW50IHRvIG5vdGUgdGhhdCBgJHNldFZpZXdWYWx1ZWAgZG9lcyBub3QgY2FsbCBgJHJlbmRlcmAgb3IgY2hhbmdlXG4gICAqIHRoZSBjb250cm9sJ3MgRE9NIHZhbHVlIGluIGFueSB3YXkuIElmIHdlIHdhbnQgdG8gY2hhbmdlIHRoZSBjb250cm9sJ3MgRE9NIHZhbHVlXG4gICAqIHByb2dyYW1tYXRpY2FsbHksIHdlIHNob3VsZCB1cGRhdGUgdGhlIGBuZ01vZGVsYCBzY29wZSBleHByZXNzaW9uLiBJdHMgbmV3IHZhbHVlIHdpbGwgYmVcbiAgICogcGlja2VkIHVwIGJ5IHRoZSBtb2RlbCBjb250cm9sbGVyLCB3aGljaCB3aWxsIHJ1biBpdCB0aHJvdWdoIHRoZSBgJGZvcm1hdHRlcnNgLCBgJHJlbmRlcmAgaXRcbiAgICogdG8gdXBkYXRlIHRoZSBET00sIGFuZCBmaW5hbGx5IGNhbGwgYCR2YWxpZGF0ZWAgb24gaXQuXG4gICAqIDwvZGl2PlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIHZhbHVlIGZyb20gdGhlIHZpZXcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0cmlnZ2VyIEV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSB1cGRhdGUuXG4gICAqL1xuICAkc2V0Vmlld1ZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgdHJpZ2dlcikge1xuICAgIHRoaXMuJHZpZXdWYWx1ZSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLiRvcHRpb25zLmdldE9wdGlvbigndXBkYXRlT25EZWZhdWx0JykpIHtcbiAgICAgIHRoaXMuJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdCh0cmlnZ2VyKTtcbiAgICB9XG4gIH0sXG5cbiAgJCRkZWJvdW5jZVZpZXdWYWx1ZUNvbW1pdDogZnVuY3Rpb24odHJpZ2dlcikge1xuICAgIHZhciBkZWJvdW5jZURlbGF5ID0gdGhpcy4kb3B0aW9ucy5nZXRPcHRpb24oJ2RlYm91bmNlJyk7XG5cbiAgICBpZiAoaXNOdW1iZXIoZGVib3VuY2VEZWxheVt0cmlnZ2VyXSkpIHtcbiAgICAgIGRlYm91bmNlRGVsYXkgPSBkZWJvdW5jZURlbGF5W3RyaWdnZXJdO1xuICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoZGVib3VuY2VEZWxheVsnZGVmYXVsdCddKSkge1xuICAgICAgZGVib3VuY2VEZWxheSA9IGRlYm91bmNlRGVsYXlbJ2RlZmF1bHQnXTtcbiAgICB9XG5cbiAgICB0aGlzLiQkdGltZW91dC5jYW5jZWwodGhpcy4kJHBlbmRpbmdEZWJvdW5jZSk7XG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgIGlmIChkZWJvdW5jZURlbGF5ID4gMCkgeyAvLyB0aGlzIGZhaWxzIGlmIGRlYm91bmNlRGVsYXkgaXMgYW4gb2JqZWN0XG4gICAgICB0aGlzLiQkcGVuZGluZ0RlYm91bmNlID0gdGhpcy4kJHRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoYXQuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgICAgfSwgZGVib3VuY2VEZWxheSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLiQkc2NvcGUuJHJvb3QuJCRwaGFzZSkge1xuICAgICAgdGhpcy4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJCRzY29wZS4kYXBwbHkoZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoYXQuJGNvbW1pdFZpZXdWYWx1ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqXG4gICAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJG92ZXJyaWRlTW9kZWxPcHRpb25zXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBPdmVycmlkZSB0aGUgY3VycmVudCBtb2RlbCBvcHRpb25zIHNldHRpbmdzIHByb2dyYW1tYXRpY2FsbHkuXG4gICAqXG4gICAqIFRoZSBwcmV2aW91cyBgTW9kZWxPcHRpb25zYCB2YWx1ZSB3aWxsIG5vdCBiZSBtb2RpZmllZC4gSW5zdGVhZCwgYVxuICAgKiBuZXcgYE1vZGVsT3B0aW9uc2Agb2JqZWN0IHdpbGwgaW5oZXJpdCBmcm9tIHRoZSBwcmV2aW91cyBvbmUgb3ZlcnJpZGluZ1xuICAgKiBvciBpbmhlcml0aW5nIHNldHRpbmdzIHRoYXQgYXJlIGRlZmluZWQgaW4gdGhlIGdpdmVuIHBhcmFtZXRlci5cbiAgICpcbiAgICogU2VlIHtAbGluayBuZ01vZGVsT3B0aW9uc30gZm9yIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgb3B0aW9ucyBjYW4gYmUgc3BlY2lmaWVkXG4gICAqIGFuZCBob3cgbW9kZWwgb3B0aW9uIGluaGVyaXRhbmNlIHdvcmtzLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBhIGhhc2ggb2Ygc2V0dGluZ3MgdG8gb3ZlcnJpZGUgdGhlIHByZXZpb3VzIG9wdGlvbnNcbiAgICpcbiAgICovXG4gICRvdmVycmlkZU1vZGVsT3B0aW9uczogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgIHRoaXMuJG9wdGlvbnMgPSB0aGlzLiRvcHRpb25zLmNyZWF0ZUNoaWxkKG9wdGlvbnMpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzZXR1cE1vZGVsV2F0Y2hlcihjdHJsKSB7XG4gIC8vIG1vZGVsIC0+IHZhbHVlXG4gIC8vIE5vdGU6IHdlIGNhbm5vdCB1c2UgYSBub3JtYWwgc2NvcGUuJHdhdGNoIGFzIHdlIHdhbnQgdG8gZGV0ZWN0IHRoZSBmb2xsb3dpbmc6XG4gIC8vIDEuIHNjb3BlIHZhbHVlIGlzICdhJ1xuICAvLyAyLiB1c2VyIGVudGVycyAnYidcbiAgLy8gMy4gbmctY2hhbmdlIGtpY2tzIGluIGFuZCByZXZlcnRzIHNjb3BlIHZhbHVlIHRvICdhJ1xuICAvLyAgICAtPiBzY29wZSB2YWx1ZSBkaWQgbm90IGNoYW5nZSBzaW5jZSB0aGUgbGFzdCBkaWdlc3QgYXNcbiAgLy8gICAgICAgbmctY2hhbmdlIGV4ZWN1dGVzIGluIGFwcGx5IHBoYXNlXG4gIC8vIDQuIHZpZXcgc2hvdWxkIGJlIGNoYW5nZWQgYmFjayB0byAnYSdcbiAgY3RybC4kJHNjb3BlLiR3YXRjaChmdW5jdGlvbiBuZ01vZGVsV2F0Y2goc2NvcGUpIHtcbiAgICB2YXIgbW9kZWxWYWx1ZSA9IGN0cmwuJCRuZ01vZGVsR2V0KHNjb3BlKTtcblxuICAgIC8vIGlmIHNjb3BlIG1vZGVsIHZhbHVlIGFuZCBuZ01vZGVsIHZhbHVlIGFyZSBvdXQgb2Ygc3luY1xuICAgIC8vIFRPRE8ocGVyZik6IHdoeSBub3QgbW92ZSB0aGlzIHRvIHRoZSBhY3Rpb24gZm4/XG4gICAgaWYgKG1vZGVsVmFsdWUgIT09IGN0cmwuJG1vZGVsVmFsdWUgJiZcbiAgICAgICAvLyBjaGVja3MgZm9yIE5hTiBpcyBuZWVkZWQgdG8gYWxsb3cgc2V0dGluZyB0aGUgbW9kZWwgdG8gTmFOIHdoZW4gdGhlcmUncyBhbiBhc3luY1ZhbGlkYXRvclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICAgKGN0cmwuJG1vZGVsVmFsdWUgPT09IGN0cmwuJG1vZGVsVmFsdWUgfHwgbW9kZWxWYWx1ZSA9PT0gbW9kZWxWYWx1ZSlcbiAgICApIHtcbiAgICAgIGN0cmwuJG1vZGVsVmFsdWUgPSBjdHJsLiQkcmF3TW9kZWxWYWx1ZSA9IG1vZGVsVmFsdWU7XG4gICAgICBjdHJsLiQkcGFyc2VyVmFsaWQgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBmb3JtYXR0ZXJzID0gY3RybC4kZm9ybWF0dGVycyxcbiAgICAgICAgICBpZHggPSBmb3JtYXR0ZXJzLmxlbmd0aDtcblxuICAgICAgdmFyIHZpZXdWYWx1ZSA9IG1vZGVsVmFsdWU7XG4gICAgICB3aGlsZSAoaWR4LS0pIHtcbiAgICAgICAgdmlld1ZhbHVlID0gZm9ybWF0dGVyc1tpZHhdKHZpZXdWYWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoY3RybC4kdmlld1ZhbHVlICE9PSB2aWV3VmFsdWUpIHtcbiAgICAgICAgY3RybC4kJHVwZGF0ZUVtcHR5Q2xhc3Nlcyh2aWV3VmFsdWUpO1xuICAgICAgICBjdHJsLiR2aWV3VmFsdWUgPSBjdHJsLiQkbGFzdENvbW1pdHRlZFZpZXdWYWx1ZSA9IHZpZXdWYWx1ZTtcbiAgICAgICAgY3RybC4kcmVuZGVyKCk7XG5cbiAgICAgICAgLy8gSXQgaXMgcG9zc2libGUgdGhhdCBtb2RlbCBhbmQgdmlldyB2YWx1ZSBoYXZlIGJlZW4gdXBkYXRlZCBkdXJpbmcgcmVuZGVyXG4gICAgICAgIGN0cmwuJCRydW5WYWxpZGF0b3JzKGN0cmwuJG1vZGVsVmFsdWUsIGN0cmwuJHZpZXdWYWx1ZSwgbm9vcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vZGVsVmFsdWU7XG4gIH0pO1xufVxuXG4vKipcbiAqIEBuZ2RvYyBtZXRob2RcbiAqIEBuYW1lIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHNldFZhbGlkaXR5XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDaGFuZ2UgdGhlIHZhbGlkaXR5IHN0YXRlLCBhbmQgbm90aWZ5IHRoZSBmb3JtLlxuICpcbiAqIFRoaXMgbWV0aG9kIGNhbiBiZSBjYWxsZWQgd2l0aGluICRwYXJzZXJzLyRmb3JtYXR0ZXJzIG9yIGEgY3VzdG9tIHZhbGlkYXRpb24gaW1wbGVtZW50YXRpb24uXG4gKiBIb3dldmVyLCBpbiBtb3N0IGNhc2VzIGl0IHNob3VsZCBiZSBzdWZmaWNpZW50IHRvIHVzZSB0aGUgYG5nTW9kZWwuJHZhbGlkYXRvcnNgIGFuZFxuICogYG5nTW9kZWwuJGFzeW5jVmFsaWRhdG9yc2AgY29sbGVjdGlvbnMgd2hpY2ggd2lsbCBjYWxsIGAkc2V0VmFsaWRpdHlgIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbGlkYXRpb25FcnJvcktleSBOYW1lIG9mIHRoZSB2YWxpZGF0b3IuIFRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCB3aWxsIGJlIGFzc2lnbmVkXG4gKiAgICAgICAgdG8gZWl0aGVyIGAkZXJyb3JbdmFsaWRhdGlvbkVycm9yS2V5XWAgb3IgYCRwZW5kaW5nW3ZhbGlkYXRpb25FcnJvcktleV1gXG4gKiAgICAgICAgKGZvciB1bmZ1bGZpbGxlZCBgJGFzeW5jVmFsaWRhdG9yc2ApLCBzbyB0aGF0IGl0IGlzIGF2YWlsYWJsZSBmb3IgZGF0YS1iaW5kaW5nLlxuICogICAgICAgIFRoZSBgdmFsaWRhdGlvbkVycm9yS2V5YCBzaG91bGQgYmUgaW4gY2FtZWxDYXNlIGFuZCB3aWxsIGdldCBjb252ZXJ0ZWQgaW50byBkYXNoLWNhc2VcbiAqICAgICAgICBmb3IgY2xhc3MgbmFtZS4gRXhhbXBsZTogYG15RXJyb3JgIHdpbGwgcmVzdWx0IGluIGBuZy12YWxpZC1teS1lcnJvcmAgYW5kIGBuZy1pbnZhbGlkLW15LWVycm9yYFxuICogICAgICAgIGNsYXNzZXMgYW5kIGNhbiBiZSBib3VuZCB0byBhcyBge3sgc29tZUZvcm0uc29tZUNvbnRyb2wuJGVycm9yLm15RXJyb3IgfX1gLlxuICogQHBhcmFtIHtib29sZWFufSBpc1ZhbGlkIFdoZXRoZXIgdGhlIGN1cnJlbnQgc3RhdGUgaXMgdmFsaWQgKHRydWUpLCBpbnZhbGlkIChmYWxzZSksIHBlbmRpbmcgKHVuZGVmaW5lZCksXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgb3Igc2tpcHBlZCAobnVsbCkuIFBlbmRpbmcgaXMgdXNlZCBmb3IgdW5mdWxmaWxsZWQgYCRhc3luY1ZhbGlkYXRvcnNgLlxuICogICAgICAgICAgICAgICAgICAgICAgICAgIFNraXBwZWQgaXMgdXNlZCBieSBBbmd1bGFyIHdoZW4gdmFsaWRhdG9ycyBkbyBub3QgcnVuIGJlY2F1c2Ugb2YgcGFyc2UgZXJyb3JzIGFuZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gYCRhc3luY1ZhbGlkYXRvcnNgIGRvIG5vdCBydW4gYmVjYXVzZSBhbnkgb2YgdGhlIGAkdmFsaWRhdG9yc2AgZmFpbGVkLlxuICovXG5hZGRTZXRWYWxpZGl0eU1ldGhvZCh7XG4gIGNsYXp6OiBOZ01vZGVsQ29udHJvbGxlcixcbiAgc2V0OiBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgb2JqZWN0W3Byb3BlcnR5XSA9IHRydWU7XG4gIH0sXG4gIHVuc2V0OiBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgZGVsZXRlIG9iamVjdFtwcm9wZXJ0eV07XG4gIH1cbn0pO1xuXG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdNb2RlbFxuICpcbiAqIEBlbGVtZW50IGlucHV0XG4gKiBAcHJpb3JpdHkgMVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ01vZGVsYCBkaXJlY3RpdmUgYmluZHMgYW4gYGlucHV0YCxgc2VsZWN0YCwgYHRleHRhcmVhYCAob3IgY3VzdG9tIGZvcm0gY29udHJvbCkgdG8gYVxuICogcHJvcGVydHkgb24gdGhlIHNjb3BlIHVzaW5nIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIE5nTW9kZWxDb250cm9sbGVyfSxcbiAqIHdoaWNoIGlzIGNyZWF0ZWQgYW5kIGV4cG9zZWQgYnkgdGhpcyBkaXJlY3RpdmUuXG4gKlxuICogYG5nTW9kZWxgIGlzIHJlc3BvbnNpYmxlIGZvcjpcbiAqXG4gKiAtIEJpbmRpbmcgdGhlIHZpZXcgaW50byB0aGUgbW9kZWwsIHdoaWNoIG90aGVyIGRpcmVjdGl2ZXMgc3VjaCBhcyBgaW5wdXRgLCBgdGV4dGFyZWFgIG9yIGBzZWxlY3RgXG4gKiAgIHJlcXVpcmUuXG4gKiAtIFByb3ZpZGluZyB2YWxpZGF0aW9uIGJlaGF2aW9yIChpLmUuIHJlcXVpcmVkLCBudW1iZXIsIGVtYWlsLCB1cmwpLlxuICogLSBLZWVwaW5nIHRoZSBzdGF0ZSBvZiB0aGUgY29udHJvbCAodmFsaWQvaW52YWxpZCwgZGlydHkvcHJpc3RpbmUsIHRvdWNoZWQvdW50b3VjaGVkLCB2YWxpZGF0aW9uIGVycm9ycykuXG4gKiAtIFNldHRpbmcgcmVsYXRlZCBjc3MgY2xhc3NlcyBvbiB0aGUgZWxlbWVudCAoYG5nLXZhbGlkYCwgYG5nLWludmFsaWRgLCBgbmctZGlydHlgLCBgbmctcHJpc3RpbmVgLCBgbmctdG91Y2hlZGAsXG4gKiAgIGBuZy11bnRvdWNoZWRgLCBgbmctZW1wdHlgLCBgbmctbm90LWVtcHR5YCkgaW5jbHVkaW5nIGFuaW1hdGlvbnMuXG4gKiAtIFJlZ2lzdGVyaW5nIHRoZSBjb250cm9sIHdpdGggaXRzIHBhcmVudCB7QGxpbmsgbmcuZGlyZWN0aXZlOmZvcm0gZm9ybX0uXG4gKlxuICogTm90ZTogYG5nTW9kZWxgIHdpbGwgdHJ5IHRvIGJpbmQgdG8gdGhlIHByb3BlcnR5IGdpdmVuIGJ5IGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24gb24gdGhlXG4gKiBjdXJyZW50IHNjb3BlLiBJZiB0aGUgcHJvcGVydHkgZG9lc24ndCBhbHJlYWR5IGV4aXN0IG9uIHRoaXMgc2NvcGUsIGl0IHdpbGwgYmUgY3JlYXRlZFxuICogaW1wbGljaXRseSBhbmQgYWRkZWQgdG8gdGhlIHNjb3BlLlxuICpcbiAqIEZvciBiZXN0IHByYWN0aWNlcyBvbiB1c2luZyBgbmdNb2RlbGAsIHNlZTpcbiAqXG4gKiAgLSBbVW5kZXJzdGFuZGluZyBTY29wZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvd2lraS9VbmRlcnN0YW5kaW5nLVNjb3BlcylcbiAqXG4gKiBGb3IgYmFzaWMgZXhhbXBsZXMsIGhvdyB0byB1c2UgYG5nTW9kZWxgLCBzZWU6XG4gKlxuICogIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTppbnB1dCBpbnB1dH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W3RleHRdIHRleHR9XG4gKiAgICAtIHtAbGluayBpbnB1dFtjaGVja2JveF0gY2hlY2tib3h9XG4gKiAgICAtIHtAbGluayBpbnB1dFtyYWRpb10gcmFkaW99XG4gKiAgICAtIHtAbGluayBpbnB1dFtudW1iZXJdIG51bWJlcn1cbiAqICAgIC0ge0BsaW5rIGlucHV0W2VtYWlsXSBlbWFpbH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W3VybF0gdXJsfVxuICogICAgLSB7QGxpbmsgaW5wdXRbZGF0ZV0gZGF0ZX1cbiAqICAgIC0ge0BsaW5rIGlucHV0W2RhdGV0aW1lLWxvY2FsXSBkYXRldGltZS1sb2NhbH1cbiAqICAgIC0ge0BsaW5rIGlucHV0W3RpbWVdIHRpbWV9XG4gKiAgICAtIHtAbGluayBpbnB1dFttb250aF0gbW9udGh9XG4gKiAgICAtIHtAbGluayBpbnB1dFt3ZWVrXSB3ZWVrfVxuICogIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTpzZWxlY3Qgc2VsZWN0fVxuICogIC0ge0BsaW5rIG5nLmRpcmVjdGl2ZTp0ZXh0YXJlYSB0ZXh0YXJlYX1cbiAqXG4gKiAjIENvbXBsZXggTW9kZWxzIChvYmplY3RzIG9yIGNvbGxlY3Rpb25zKVxuICpcbiAqIEJ5IGRlZmF1bHQsIGBuZ01vZGVsYCB3YXRjaGVzIHRoZSBtb2RlbCBieSByZWZlcmVuY2UsIG5vdCB2YWx1ZS4gVGhpcyBpcyBpbXBvcnRhbnQgdG8ga25vdyB3aGVuXG4gKiBiaW5kaW5nIGlucHV0cyB0byBtb2RlbHMgdGhhdCBhcmUgb2JqZWN0cyAoZS5nLiBgRGF0ZWApIG9yIGNvbGxlY3Rpb25zIChlLmcuIGFycmF5cykuIElmIG9ubHkgcHJvcGVydGllcyBvZiB0aGVcbiAqIG9iamVjdCBvciBjb2xsZWN0aW9uIGNoYW5nZSwgYG5nTW9kZWxgIHdpbGwgbm90IGJlIG5vdGlmaWVkIGFuZCBzbyB0aGUgaW5wdXQgd2lsbCBub3QgYmUgIHJlLXJlbmRlcmVkLlxuICpcbiAqIFRoZSBtb2RlbCBtdXN0IGJlIGFzc2lnbmVkIGFuIGVudGlyZWx5IG5ldyBvYmplY3Qgb3IgY29sbGVjdGlvbiBiZWZvcmUgYSByZS1yZW5kZXJpbmcgd2lsbCBvY2N1ci5cbiAqXG4gKiBTb21lIGRpcmVjdGl2ZXMgaGF2ZSBvcHRpb25zIHRoYXQgd2lsbCBjYXVzZSB0aGVtIHRvIHVzZSBhIGN1c3RvbSBgJHdhdGNoQ29sbGVjdGlvbmAgb24gdGhlIG1vZGVsIGV4cHJlc3Npb25cbiAqIC0gZm9yIGV4YW1wbGUsIGBuZ09wdGlvbnNgIHdpbGwgZG8gc28gd2hlbiBhIGB0cmFjayBieWAgY2xhdXNlIGlzIGluY2x1ZGVkIGluIHRoZSBjb21wcmVoZW5zaW9uIGV4cHJlc3Npb24gb3JcbiAqIGlmIHRoZSBzZWxlY3QgaXMgZ2l2ZW4gdGhlIGBtdWx0aXBsZWAgYXR0cmlidXRlLlxuICpcbiAqIFRoZSBgJHdhdGNoQ29sbGVjdGlvbigpYCBtZXRob2Qgb25seSBkb2VzIGEgc2hhbGxvdyBjb21wYXJpc29uLCBtZWFuaW5nIHRoYXQgY2hhbmdpbmcgcHJvcGVydGllcyBkZWVwZXIgdGhhbiB0aGVcbiAqIGZpcnN0IGxldmVsIG9mIHRoZSBvYmplY3QgKG9yIG9ubHkgY2hhbmdpbmcgdGhlIHByb3BlcnRpZXMgb2YgYW4gaXRlbSBpbiB0aGUgY29sbGVjdGlvbiBpZiBpdCdzIGFuIGFycmF5KSB3aWxsIHN0aWxsXG4gKiBub3QgdHJpZ2dlciBhIHJlLXJlbmRlcmluZyBvZiB0aGUgbW9kZWwuXG4gKlxuICogIyBDU1MgY2xhc3Nlc1xuICogVGhlIGZvbGxvd2luZyBDU1MgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWQgb24gdGhlIGFzc29jaWF0ZWQgaW5wdXQvc2VsZWN0L3RleHRhcmVhIGVsZW1lbnRcbiAqIGRlcGVuZGluZyBvbiB0aGUgdmFsaWRpdHkgb2YgdGhlIG1vZGVsLlxuICpcbiAqICAtIGBuZy12YWxpZGA6IHRoZSBtb2RlbCBpcyB2YWxpZFxuICogIC0gYG5nLWludmFsaWRgOiB0aGUgbW9kZWwgaXMgaW52YWxpZFxuICogIC0gYG5nLXZhbGlkLVtrZXldYDogZm9yIGVhY2ggdmFsaWQga2V5IGFkZGVkIGJ5IGAkc2V0VmFsaWRpdHlgXG4gKiAgLSBgbmctaW52YWxpZC1ba2V5XWA6IGZvciBlYWNoIGludmFsaWQga2V5IGFkZGVkIGJ5IGAkc2V0VmFsaWRpdHlgXG4gKiAgLSBgbmctcHJpc3RpbmVgOiB0aGUgY29udHJvbCBoYXNuJ3QgYmVlbiBpbnRlcmFjdGVkIHdpdGggeWV0XG4gKiAgLSBgbmctZGlydHlgOiB0aGUgY29udHJvbCBoYXMgYmVlbiBpbnRlcmFjdGVkIHdpdGhcbiAqICAtIGBuZy10b3VjaGVkYDogdGhlIGNvbnRyb2wgaGFzIGJlZW4gYmx1cnJlZFxuICogIC0gYG5nLXVudG91Y2hlZGA6IHRoZSBjb250cm9sIGhhc24ndCBiZWVuIGJsdXJyZWRcbiAqICAtIGBuZy1wZW5kaW5nYDogYW55IGAkYXN5bmNWYWxpZGF0b3JzYCBhcmUgdW5mdWxmaWxsZWRcbiAqICAtIGBuZy1lbXB0eWA6IHRoZSB2aWV3IGRvZXMgbm90IGNvbnRhaW4gYSB2YWx1ZSBvciB0aGUgdmFsdWUgaXMgZGVlbWVkIFwiZW1wdHlcIiwgYXMgZGVmaW5lZFxuICogICAgIGJ5IHRoZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkaXNFbXB0eX0gbWV0aG9kXG4gKiAgLSBgbmctbm90LWVtcHR5YDogdGhlIHZpZXcgY29udGFpbnMgYSBub24tZW1wdHkgdmFsdWVcbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCBuZ0FuaW1hdGUgY2FuIGRldGVjdCBlYWNoIG9mIHRoZXNlIGNsYXNzZXMgd2hlbiBhZGRlZCBhbmQgcmVtb3ZlZC5cbiAqXG4gKiAjIyBBbmltYXRpb24gSG9va3NcbiAqXG4gKiBBbmltYXRpb25zIHdpdGhpbiBtb2RlbHMgYXJlIHRyaWdnZXJlZCB3aGVuIGFueSBvZiB0aGUgYXNzb2NpYXRlZCBDU1MgY2xhc3NlcyBhcmUgYWRkZWQgYW5kIHJlbW92ZWRcbiAqIG9uIHRoZSBpbnB1dCBlbGVtZW50IHdoaWNoIGlzIGF0dGFjaGVkIHRvIHRoZSBtb2RlbC4gVGhlc2UgY2xhc3NlcyBpbmNsdWRlOiBgLm5nLXByaXN0aW5lYCwgYC5uZy1kaXJ0eWAsXG4gKiBgLm5nLWludmFsaWRgIGFuZCBgLm5nLXZhbGlkYCBhcyB3ZWxsIGFzIGFueSBvdGhlciB2YWxpZGF0aW9ucyB0aGF0IGFyZSBwZXJmb3JtZWQgb24gdGhlIG1vZGVsIGl0c2VsZi5cbiAqIFRoZSBhbmltYXRpb25zIHRoYXQgYXJlIHRyaWdnZXJlZCB3aXRoaW4gbmdNb2RlbCBhcmUgc2ltaWxhciB0byBob3cgdGhleSB3b3JrIGluIG5nQ2xhc3MgYW5kXG4gKiBhbmltYXRpb25zIGNhbiBiZSBob29rZWQgaW50byB1c2luZyBDU1MgdHJhbnNpdGlvbnMsIGtleWZyYW1lcyBhcyB3ZWxsIGFzIEpTIGFuaW1hdGlvbnMuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGEgc2ltcGxlIHdheSB0byB1dGlsaXplIENTUyB0cmFuc2l0aW9ucyB0byBzdHlsZSBhbiBpbnB1dCBlbGVtZW50XG4gKiB0aGF0IGhhcyBiZWVuIHJlbmRlcmVkIGFzIGludmFsaWQgYWZ0ZXIgaXQgaGFzIGJlZW4gdmFsaWRhdGVkOlxuICpcbiAqIDxwcmU+XG4gKiAvL2JlIHN1cmUgdG8gaW5jbHVkZSBuZ0FuaW1hdGUgYXMgYSBtb2R1bGUgdG8gaG9vayBpbnRvIG1vcmVcbiAqIC8vYWR2YW5jZWQgYW5pbWF0aW9uc1xuICogLm15LWlucHV0IHtcbiAqICAgdHJhbnNpdGlvbjowLjVzIGxpbmVhciBhbGw7XG4gKiAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICogfVxuICogLm15LWlucHV0Lm5nLWludmFsaWQge1xuICogICBiYWNrZ3JvdW5kOiByZWQ7XG4gKiAgIGNvbG9yOndoaXRlO1xuICogfVxuICogPC9wcmU+XG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIGZpeEJhc2U9XCJ0cnVlXCIgbW9kdWxlPVwiaW5wdXRFeGFtcGxlXCIgbmFtZT1cIm5nLW1vZGVsXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPHNjcmlwdD5cbiAgICAgICAgYW5ndWxhci5tb2R1bGUoJ2lucHV0RXhhbXBsZScsIFtdKVxuICAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gICAgICAgICAgICAkc2NvcGUudmFsID0gJzEnO1xuICAgICAgICAgIH1dKTtcbiAgICAgICA8L3NjcmlwdD5cbiAgICAgICA8c3R5bGU+XG4gICAgICAgICAubXktaW5wdXQge1xuICAgICAgICAgICB0cmFuc2l0aW9uOmFsbCBsaW5lYXIgMC41cztcbiAgICAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgICAgICB9XG4gICAgICAgICAubXktaW5wdXQubmctaW52YWxpZCB7XG4gICAgICAgICAgIGNvbG9yOndoaXRlO1xuICAgICAgICAgICBiYWNrZ3JvdW5kOiByZWQ7XG4gICAgICAgICB9XG4gICAgICAgPC9zdHlsZT5cbiAgICAgICA8cCBpZD1cImlucHV0RGVzY3JpcHRpb25cIj5cbiAgICAgICAgVXBkYXRlIGlucHV0IHRvIHNlZSB0cmFuc2l0aW9ucyB3aGVuIHZhbGlkL2ludmFsaWQuXG4gICAgICAgIEludGVnZXIgaXMgYSB2YWxpZCB2YWx1ZS5cbiAgICAgICA8L3A+XG4gICAgICAgPGZvcm0gbmFtZT1cInRlc3RGb3JtXCIgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICA8aW5wdXQgbmctbW9kZWw9XCJ2YWxcIiBuZy1wYXR0ZXJuPVwiL15cXGQrJC9cIiBuYW1lPVwiYW5pbVwiIGNsYXNzPVwibXktaW5wdXRcIlxuICAgICAgICAgICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCJpbnB1dERlc2NyaXB0aW9uXCIgLz5cbiAgICAgICA8L2Zvcm0+XG4gICAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiAjIyBCaW5kaW5nIHRvIGEgZ2V0dGVyL3NldHRlclxuICpcbiAqIFNvbWV0aW1lcyBpdCdzIGhlbHBmdWwgdG8gYmluZCBgbmdNb2RlbGAgdG8gYSBnZXR0ZXIvc2V0dGVyIGZ1bmN0aW9uLiAgQSBnZXR0ZXIvc2V0dGVyIGlzIGFcbiAqIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBtb2RlbCB3aGVuIGNhbGxlZCB3aXRoIHplcm8gYXJndW1lbnRzLCBhbmQgc2V0c1xuICogdGhlIGludGVybmFsIHN0YXRlIG9mIGEgbW9kZWwgd2hlbiBjYWxsZWQgd2l0aCBhbiBhcmd1bWVudC4gSXQncyBzb21ldGltZXMgdXNlZnVsIHRvIHVzZSB0aGlzXG4gKiBmb3IgbW9kZWxzIHRoYXQgaGF2ZSBhbiBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiB0aGF0J3MgZGlmZmVyZW50IGZyb20gd2hhdCB0aGUgbW9kZWwgZXhwb3Nlc1xuICogdG8gdGhlIHZpZXcuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3NcIj5cbiAqICoqQmVzdCBQcmFjdGljZToqKiBJdCdzIGJlc3QgdG8ga2VlcCBnZXR0ZXJzIGZhc3QgYmVjYXVzZSBBbmd1bGFyIGlzIGxpa2VseSB0byBjYWxsIHRoZW0gbW9yZVxuICogZnJlcXVlbnRseSB0aGFuIG90aGVyIHBhcnRzIG9mIHlvdXIgY29kZS5cbiAqIDwvZGl2PlxuICpcbiAqIFlvdSB1c2UgdGhpcyBiZWhhdmlvciBieSBhZGRpbmcgYG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGdldHRlclNldHRlcjogdHJ1ZSB9XCJgIHRvIGFuIGVsZW1lbnQgdGhhdFxuICogaGFzIGBuZy1tb2RlbGAgYXR0YWNoZWQgdG8gaXQuIFlvdSBjYW4gYWxzbyBhZGQgYG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGdldHRlclNldHRlcjogdHJ1ZSB9XCJgIHRvXG4gKiBhIGA8Zm9ybT5gLCB3aGljaCB3aWxsIGVuYWJsZSB0aGlzIGJlaGF2aW9yIGZvciBhbGwgYDxpbnB1dD5gcyB3aXRoaW4gaXQuIFNlZVxuICoge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ01vZGVsT3B0aW9ucyBgbmdNb2RlbE9wdGlvbnNgfSBmb3IgbW9yZS5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIHVzZSBgbmdNb2RlbGAgd2l0aCBhIGdldHRlci9zZXR0ZXI6XG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ01vZGVsLWdldHRlci1zZXR0ZXJcIiBtb2R1bGU9XCJnZXR0ZXJTZXR0ZXJFeGFtcGxlXCI+XG4gICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgIDxmb3JtIG5hbWU9XCJ1c2VyRm9ybVwiPlxuICAgICAgICAgICA8bGFiZWw+TmFtZTpcbiAgICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIlxuICAgICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cInVzZXIubmFtZVwiXG4gICAgICAgICAgICAgICAgICAgIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGdldHRlclNldHRlcjogdHJ1ZSB9XCIgLz5cbiAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD1cInVzZXIubmFtZSgpXCI+PC9zcGFuPjwvcHJlPlxuICAgICAgIDwvZGl2PlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAgICAgICBhbmd1bGFyLm1vZHVsZSgnZ2V0dGVyU2V0dGVyRXhhbXBsZScsIFtdKVxuICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgdmFyIF9uYW1lID0gJ0JyaWFuJztcbiAgICAgICAgICAgJHNjb3BlLnVzZXIgPSB7XG4gICAgICAgICAgICAgbmFtZTogZnVuY3Rpb24obmV3TmFtZSkge1xuICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgbmV3TmFtZSBjYW4gYmUgdW5kZWZpbmVkIGZvciB0d28gcmVhc29uczpcbiAgICAgICAgICAgICAgLy8gMS4gQmVjYXVzZSBpdCBpcyBjYWxsZWQgYXMgYSBnZXR0ZXIgYW5kIHRodXMgY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzXG4gICAgICAgICAgICAgIC8vIDIuIEJlY2F1c2UgdGhlIHByb3BlcnR5IHNob3VsZCBhY3R1YWxseSBiZSBzZXQgdG8gdW5kZWZpbmVkLiBUaGlzIGhhcHBlbnMgZS5nLiBpZiB0aGVcbiAgICAgICAgICAgICAgLy8gICAgaW5wdXQgaXMgaW52YWxpZFxuICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChfbmFtZSA9IG5ld05hbWUpIDogX25hbWU7XG4gICAgICAgICAgICAgfVxuICAgICAgICAgICB9O1xuICAgICAgICAgfV0pO1xuICAgICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ01vZGVsRGlyZWN0aXZlID0gWyckcm9vdFNjb3BlJywgZnVuY3Rpb24oJHJvb3RTY29wZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogWyduZ01vZGVsJywgJ14/Zm9ybScsICdeP25nTW9kZWxPcHRpb25zJ10sXG4gICAgY29udHJvbGxlcjogTmdNb2RlbENvbnRyb2xsZXIsXG4gICAgLy8gUHJlbGluayBuZWVkcyB0byBydW4gYmVmb3JlIGFueSBpbnB1dCBkaXJlY3RpdmVcbiAgICAvLyBzbyB0aGF0IHdlIGNhbiBzZXQgdGhlIE5nTW9kZWxPcHRpb25zIGluIE5nTW9kZWxDb250cm9sbGVyXG4gICAgLy8gYmVmb3JlIGFueW9uZSBlbHNlIHVzZXMgaXQuXG4gICAgcHJpb3JpdHk6IDEsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gbmdNb2RlbENvbXBpbGUoZWxlbWVudCkge1xuICAgICAgLy8gU2V0dXAgaW5pdGlhbCBzdGF0ZSBvZiB0aGUgY29udHJvbFxuICAgICAgZWxlbWVudC5hZGRDbGFzcyhQUklTVElORV9DTEFTUykuYWRkQ2xhc3MoVU5UT1VDSEVEX0NMQVNTKS5hZGRDbGFzcyhWQUxJRF9DTEFTUyk7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHByZTogZnVuY3Rpb24gbmdNb2RlbFByZUxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgICAgICAgdmFyIG1vZGVsQ3RybCA9IGN0cmxzWzBdLFxuICAgICAgICAgICAgICBmb3JtQ3RybCA9IGN0cmxzWzFdIHx8IG1vZGVsQ3RybC4kJHBhcmVudEZvcm0sXG4gICAgICAgICAgICAgIG9wdGlvbnNDdHJsID0gY3RybHNbMl07XG5cbiAgICAgICAgICBpZiAob3B0aW9uc0N0cmwpIHtcbiAgICAgICAgICAgIG1vZGVsQ3RybC4kb3B0aW9ucyA9IG9wdGlvbnNDdHJsLiRvcHRpb25zO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1vZGVsQ3RybC4kJGluaXRHZXR0ZXJTZXR0ZXJzKCk7XG5cbiAgICAgICAgICAvLyBub3RpZnkgb3RoZXJzLCBlc3BlY2lhbGx5IHBhcmVudCBmb3Jtc1xuICAgICAgICAgIGZvcm1DdHJsLiRhZGRDb250cm9sKG1vZGVsQ3RybCk7XG5cbiAgICAgICAgICBhdHRyLiRvYnNlcnZlKCduYW1lJywgZnVuY3Rpb24obmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChtb2RlbEN0cmwuJG5hbWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgIG1vZGVsQ3RybC4kJHBhcmVudEZvcm0uJCRyZW5hbWVDb250cm9sKG1vZGVsQ3RybCwgbmV3VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbW9kZWxDdHJsLiQkcGFyZW50Rm9ybS4kcmVtb3ZlQ29udHJvbChtb2RlbEN0cmwpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0OiBmdW5jdGlvbiBuZ01vZGVsUG9zdExpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgICAgICAgdmFyIG1vZGVsQ3RybCA9IGN0cmxzWzBdO1xuICAgICAgICAgIGlmIChtb2RlbEN0cmwuJG9wdGlvbnMuZ2V0T3B0aW9uKCd1cGRhdGVPbicpKSB7XG4gICAgICAgICAgICBlbGVtZW50Lm9uKG1vZGVsQ3RybC4kb3B0aW9ucy5nZXRPcHRpb24oJ3VwZGF0ZU9uJyksIGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgICAgICAgIG1vZGVsQ3RybC4kJGRlYm91bmNlVmlld1ZhbHVlQ29tbWl0KGV2ICYmIGV2LnR5cGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZnVuY3Rpb24gc2V0VG91Y2hlZCgpIHtcbiAgICAgICAgICAgIG1vZGVsQ3RybC4kc2V0VG91Y2hlZCgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVsZW1lbnQub24oJ2JsdXInLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChtb2RlbEN0cmwuJHRvdWNoZWQpIHJldHVybjtcblxuICAgICAgICAgICAgaWYgKCRyb290U2NvcGUuJCRwaGFzZSkge1xuICAgICAgICAgICAgICBzY29wZS4kZXZhbEFzeW5jKHNldFRvdWNoZWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KHNldFRvdWNoZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKiBleHBvcnRlZCBkZWZhdWx0TW9kZWxPcHRpb25zICovXG52YXIgZGVmYXVsdE1vZGVsT3B0aW9ucztcbnZhciBERUZBVUxUX1JFR0VYUCA9IC8oXFxzK3xeKWRlZmF1bHQoXFxzK3wkKS87XG5cbi8qKlxuICogQG5nZG9jIHR5cGVcbiAqIEBuYW1lIE1vZGVsT3B0aW9uc1xuICogQGRlc2NyaXB0aW9uXG4gKiBBIGNvbnRhaW5lciBmb3IgdGhlIG9wdGlvbnMgc2V0IGJ5IHRoZSB7QGxpbmsgbmdNb2RlbE9wdGlvbnN9IGRpcmVjdGl2ZVxuICovXG5mdW5jdGlvbiBNb2RlbE9wdGlvbnMob3B0aW9ucykge1xuICB0aGlzLiQkb3B0aW9ucyA9IG9wdGlvbnM7XG59XG5cbk1vZGVsT3B0aW9ucy5wcm90b3R5cGUgPSB7XG5cbiAgLyoqXG4gICAqIEBuZ2RvYyBtZXRob2RcbiAgICogQG5hbWUgTW9kZWxPcHRpb25zI2dldE9wdGlvblxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSB0aGUgbmFtZSBvZiB0aGUgb3B0aW9uIHRvIHJldHJpZXZlXG4gICAqIEByZXR1cm5zIHsqfSB0aGUgdmFsdWUgb2YgdGhlIG9wdGlvblxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGdpdmVuIG9wdGlvblxuICAgKi9cbiAgZ2V0T3B0aW9uOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuJCRvcHRpb25zW25hbWVdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIE1vZGVsT3B0aW9ucyNjcmVhdGVDaGlsZFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBhIGhhc2ggb2Ygb3B0aW9ucyBmb3IgdGhlIG5ldyBjaGlsZCB0aGF0IHdpbGwgb3ZlcnJpZGUgdGhlIHBhcmVudCdzIG9wdGlvbnNcbiAgICogQHJldHVybiB7TW9kZWxPcHRpb25zfSBhIG5ldyBgTW9kZWxPcHRpb25zYCBvYmplY3QgaW5pdGlhbGl6ZWQgd2l0aCB0aGUgZ2l2ZW4gb3B0aW9ucy5cbiAgICovXG4gIGNyZWF0ZUNoaWxkOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgdmFyIGluaGVyaXRBbGwgPSBmYWxzZTtcblxuICAgIC8vIG1ha2UgYSBzaGFsbG93IGNvcHlcbiAgICBvcHRpb25zID0gZXh0ZW5kKHt9LCBvcHRpb25zKTtcblxuICAgIC8vIEluaGVyaXQgb3B0aW9ucyBmcm9tIHRoZSBwYXJlbnQgaWYgc3BlY2lmaWVkIGJ5IHRoZSB2YWx1ZSBgXCIkaW5oZXJpdFwiYFxuICAgIGZvckVhY2gob3B0aW9ucywgLyogQHRoaXMgKi8gZnVuY3Rpb24ob3B0aW9uLCBrZXkpIHtcbiAgICAgIGlmIChvcHRpb24gPT09ICckaW5oZXJpdCcpIHtcbiAgICAgICAgaWYgKGtleSA9PT0gJyonKSB7XG4gICAgICAgICAgaW5oZXJpdEFsbCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3B0aW9uc1trZXldID0gdGhpcy4kJG9wdGlvbnNba2V5XTtcbiAgICAgICAgICAvLyBgdXBkYXRlT25gIGlzIHNwZWNpYWwgc28gd2UgbXVzdCBhbHNvIGluaGVyaXQgdGhlIGB1cGRhdGVPbkRlZmF1bHRgIG9wdGlvblxuICAgICAgICAgIGlmIChrZXkgPT09ICd1cGRhdGVPbicpIHtcbiAgICAgICAgICAgIG9wdGlvbnMudXBkYXRlT25EZWZhdWx0ID0gdGhpcy4kJG9wdGlvbnMudXBkYXRlT25EZWZhdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGtleSA9PT0gJ3VwZGF0ZU9uJykge1xuICAgICAgICAgIC8vIElmIHRoZSBgdXBkYXRlT25gIHByb3BlcnR5IGNvbnRhaW5zIHRoZSBgZGVmYXVsdGAgZXZlbnQgdGhlbiB3ZSBoYXZlIHRvIHJlbW92ZVxuICAgICAgICAgIC8vIGl0IGZyb20gdGhlIGV2ZW50IGxpc3QgYW5kIHNldCB0aGUgYHVwZGF0ZU9uRGVmYXVsdGAgZmxhZy5cbiAgICAgICAgICBvcHRpb25zLnVwZGF0ZU9uRGVmYXVsdCA9IGZhbHNlO1xuICAgICAgICAgIG9wdGlvbnNba2V5XSA9IHRyaW0ob3B0aW9uLnJlcGxhY2UoREVGQVVMVF9SRUdFWFAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgb3B0aW9ucy51cGRhdGVPbkRlZmF1bHQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuICcgJztcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCB0aGlzKTtcblxuICAgIGlmIChpbmhlcml0QWxsKSB7XG4gICAgICAvLyBXZSBoYXZlIGEgcHJvcGVydHkgb2YgdGhlIGZvcm06IGBcIipcIjogXCIkaW5oZXJpdFwiYFxuICAgICAgZGVsZXRlIG9wdGlvbnNbJyonXTtcbiAgICAgIGRlZmF1bHRzKG9wdGlvbnMsIHRoaXMuJCRvcHRpb25zKTtcbiAgICB9XG5cbiAgICAvLyBGaW5hbGx5IGFkZCBpbiBhbnkgbWlzc2luZyBkZWZhdWx0c1xuICAgIGRlZmF1bHRzKG9wdGlvbnMsIGRlZmF1bHRNb2RlbE9wdGlvbnMuJCRvcHRpb25zKTtcblxuICAgIHJldHVybiBuZXcgTW9kZWxPcHRpb25zKG9wdGlvbnMpO1xuICB9XG59O1xuXG5cbmRlZmF1bHRNb2RlbE9wdGlvbnMgPSBuZXcgTW9kZWxPcHRpb25zKHtcbiAgdXBkYXRlT246ICcnLFxuICB1cGRhdGVPbkRlZmF1bHQ6IHRydWUsXG4gIGRlYm91bmNlOiAwLFxuICBnZXR0ZXJTZXR0ZXI6IGZhbHNlLFxuICBhbGxvd0ludmFsaWQ6IGZhbHNlLFxuICB0aW1lem9uZTogbnVsbFxufSk7XG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01vZGVsT3B0aW9uc1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBkaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBtb2RpZnkgdGhlIGJlaGF2aW91ciBvZiB7QGxpbmsgbmdNb2RlbH0gZGlyZWN0aXZlcyB3aXRoaW4geW91clxuICogYXBwbGljYXRpb24uIFlvdSBjYW4gc3BlY2lmeSBhbiBgbmdNb2RlbE9wdGlvbnNgIGRpcmVjdGl2ZSBvbiBhbnkgZWxlbWVudC4gQWxsIHtAbGluayBuZ01vZGVsfVxuICogZGlyZWN0aXZlcyB3aWxsIHVzZSB0aGUgb3B0aW9ucyBvZiB0aGVpciBuZWFyZXN0IGBuZ01vZGVsT3B0aW9uc2AgYW5jZXN0b3IuXG4gKlxuICogVGhlIGBuZ01vZGVsT3B0aW9uc2Agc2V0dGluZ3MgYXJlIGZvdW5kIGJ5IGV2YWx1YXRpbmcgdGhlIHZhbHVlIG9mIHRoZSBhdHRyaWJ1dGUgZGlyZWN0aXZlIGFzXG4gKiBhbiBBbmd1bGFyIGV4cHJlc3Npb24uIFRoaXMgZXhwcmVzc2lvbiBzaG91bGQgZXZhbHVhdGUgdG8gYW4gb2JqZWN0LCB3aG9zZSBwcm9wZXJ0aWVzIGNvbnRhaW5cbiAqIHRoZSBzZXR0aW5ncy4gRm9yIGV4YW1wbGU6IGA8ZGl2IFwibmctbW9kZWwtb3B0aW9uc1wiPVwieyBkZWJvdW5jZTogMTAwIH1cImAuXG4gKlxuICogIyMgSW5oZXJpdGluZyBPcHRpb25zXG4gKlxuICogWW91IGNhbiBzcGVjaWZ5IHRoYXQgYW4gYG5nTW9kZWxPcHRpb25zYCBzZXR0aW5nIHNob3VsZCBiZSBpbmhlcml0ZWQgZnJvbSBhIHBhcmVudCBgbmdNb2RlbE9wdGlvbnNgXG4gKiBkaXJlY3RpdmUgYnkgZ2l2aW5nIGl0IHRoZSB2YWx1ZSBvZiBgXCIkaW5oZXJpdFwiYC5cbiAqIFRoZW4gaXQgd2lsbCBpbmhlcml0IHRoYXQgc2V0dGluZyBmcm9tIHRoZSBmaXJzdCBgbmdNb2RlbE9wdGlvbnNgIGRpcmVjdGl2ZSBmb3VuZCBieSB0cmF2ZXJzaW5nIHVwIHRoZVxuICogRE9NIHRyZWUuIElmIHRoZXJlIGlzIG5vIGFuY2VzdG9yIGVsZW1lbnQgY29udGFpbmluZyBhbiBgbmdNb2RlbE9wdGlvbnNgIGRpcmVjdGl2ZSB0aGVuIGRlZmF1bHQgc2V0dGluZ3NcbiAqIHdpbGwgYmUgdXNlZC5cbiAqXG4gKiBGb3IgZXhhbXBsZSBnaXZlbiB0aGUgZm9sbG93aW5nIGZyYWdtZW50IG9mIEhUTUxcbiAqXG4gKlxuICogYGBgaHRtbFxuICogPGRpdiBuZy1tb2RlbC1vcHRpb25zPVwieyBhbGxvd0ludmFsaWQ6IHRydWUsIGRlYm91bmNlOiAyMDAgfVwiPlxuICogICA8Zm9ybSBuZy1tb2RlbC1vcHRpb25zPVwieyB1cGRhdGVPbjogJ2JsdXInLCBhbGxvd0ludmFsaWQ6ICckaW5oZXJpdCcgfVwiPlxuICogICAgIDxpbnB1dCBuZy1tb2RlbC1vcHRpb25zPVwieyB1cGRhdGVPbjogJ2RlZmF1bHQnLCBhbGxvd0ludmFsaWQ6ICckaW5oZXJpdCcgfVwiIC8+XG4gKiAgIDwvZm9ybT5cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGhhdmUgdGhlIGZvbGxvd2luZyBzZXR0aW5nc1xuICpcbiAqIGBgYGpzXG4gKiB7IGFsbG93SW52YWxpZDogdHJ1ZSwgdXBkYXRlT246ICdkZWZhdWx0JywgZGVib3VuY2U6IDAgfVxuICogYGBgXG4gKlxuICogTm90aWNlIHRoYXQgdGhlIGBkZWJvdW5jZWAgc2V0dGluZyB3YXMgbm90IGluaGVyaXRlZCBhbmQgdXNlZCB0aGUgZGVmYXVsdCB2YWx1ZSBpbnN0ZWFkLlxuICpcbiAqIFlvdSBjYW4gc3BlY2lmeSB0aGF0IGFsbCB1bmRlZmluZWQgc2V0dGluZ3MgYXJlIGF1dG9tYXRpY2FsbHkgaW5oZXJpdGVkIGZyb20gYW4gYW5jZXN0b3IgYnlcbiAqIGluY2x1ZGluZyBhIHByb3BlcnR5IHdpdGgga2V5IG9mIGBcIipcImAgYW5kIHZhbHVlIG9mIGBcIiRpbmhlcml0XCJgLlxuICpcbiAqIEZvciBleGFtcGxlIGdpdmVuIHRoZSBmb2xsb3dpbmcgZnJhZ21lbnQgb2YgSFRNTFxuICpcbiAqXG4gKiBgYGBodG1sXG4gKiA8ZGl2IG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGFsbG93SW52YWxpZDogdHJ1ZSwgZGVib3VuY2U6IDIwMCB9XCI+XG4gKiAgIDxmb3JtIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IHVwZGF0ZU9uOiAnYmx1cicsIFwiKlwiOiAnJGluaGVyaXQnIH1cIj5cbiAqICAgICA8aW5wdXQgbmctbW9kZWwtb3B0aW9ucz1cInsgdXBkYXRlT246ICdkZWZhdWx0JywgXCIqXCI6ICckaW5oZXJpdCcgfVwiIC8+XG4gKiAgIDwvZm9ybT5cbiAqIDwvZGl2PlxuICogYGBgXG4gKlxuICogdGhlIGBpbnB1dGAgZWxlbWVudCB3aWxsIGhhdmUgdGhlIGZvbGxvd2luZyBzZXR0aW5nc1xuICpcbiAqIGBgYGpzXG4gKiB7IGFsbG93SW52YWxpZDogdHJ1ZSwgdXBkYXRlT246ICdkZWZhdWx0JywgZGVib3VuY2U6IDIwMCB9XG4gKiBgYGBcbiAqXG4gKiBOb3RpY2UgdGhhdCB0aGUgYGRlYm91bmNlYCBzZXR0aW5nIG5vdyBpbmhlcml0cyB0aGUgdmFsdWUgZnJvbSB0aGUgb3V0ZXIgYDxkaXY+YCBlbGVtZW50LlxuICpcbiAqIElmIHlvdSBhcmUgY3JlYXRpbmcgYSByZXVzYWJsZSBjb21wb25lbnQgdGhlbiB5b3Ugc2hvdWxkIGJlIGNhcmVmdWwgd2hlbiB1c2luZyBgXCIqXCI6IFwiJGluaGVyaXRcImBcbiAqIHNpbmNlIHlvdSBtYXkgaW5hZHZlcnRlbnRseSBpbmhlcml0IGEgc2V0dGluZyBpbiB0aGUgZnV0dXJlIHRoYXQgY2hhbmdlcyB0aGUgYmVoYXZpb3Igb2YgeW91ciBjb21wb25lbnQuXG4gKlxuICpcbiAqICMjIFRyaWdnZXJpbmcgYW5kIGRlYm91bmNpbmcgbW9kZWwgdXBkYXRlc1xuICpcbiAqIFRoZSBgdXBkYXRlT25gIGFuZCBgZGVib3VuY2VgIHByb3BlcnRpZXMgYWxsb3cgeW91IHRvIHNwZWNpZnkgYSBjdXN0b20gbGlzdCBvZiBldmVudHMgdGhhdCB3aWxsXG4gKiB0cmlnZ2VyIGEgbW9kZWwgdXBkYXRlIGFuZC9vciBhIGRlYm91bmNpbmcgZGVsYXkgc28gdGhhdCB0aGUgYWN0dWFsIHVwZGF0ZSBvbmx5IHRha2VzIHBsYWNlIHdoZW5cbiAqIGEgdGltZXIgZXhwaXJlczsgdGhpcyB0aW1lciB3aWxsIGJlIHJlc2V0IGFmdGVyIGFub3RoZXIgY2hhbmdlIHRha2VzIHBsYWNlLlxuICpcbiAqIEdpdmVuIHRoZSBuYXR1cmUgb2YgYG5nTW9kZWxPcHRpb25zYCwgdGhlIHZhbHVlIGRpc3BsYXllZCBpbnNpZGUgaW5wdXQgZmllbGRzIGluIHRoZSB2aWV3IG1pZ2h0XG4gKiBiZSBkaWZmZXJlbnQgZnJvbSB0aGUgdmFsdWUgaW4gdGhlIGFjdHVhbCBtb2RlbC4gVGhpcyBtZWFucyB0aGF0IGlmIHlvdSB1cGRhdGUgdGhlIG1vZGVsIHlvdVxuICogc2hvdWxkIGFsc28gaW52b2tlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRyb2xsYmFja1ZpZXdWYWx1ZX0gb24gdGhlIHJlbGV2YW50IGlucHV0IGZpZWxkIGluXG4gKiBvcmRlciB0byBtYWtlIHN1cmUgaXQgaXMgc3luY2hyb25pemVkIHdpdGggdGhlIG1vZGVsIGFuZCB0aGF0IGFueSBkZWJvdW5jZWQgYWN0aW9uIGlzIGNhbmNlbGVkLlxuICpcbiAqIFRoZSBlYXNpZXN0IHdheSB0byByZWZlcmVuY2UgdGhlIGNvbnRyb2wncyB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkcm9sbGJhY2tWaWV3VmFsdWV9XG4gKiBtZXRob2QgaXMgYnkgbWFraW5nIHN1cmUgdGhlIGlucHV0IGlzIHBsYWNlZCBpbnNpZGUgYSBmb3JtIHRoYXQgaGFzIGEgYG5hbWVgIGF0dHJpYnV0ZS4gVGhpcyBpc1xuICogaW1wb3J0YW50IGJlY2F1c2UgYGZvcm1gIGNvbnRyb2xsZXJzIGFyZSBwdWJsaXNoZWQgdG8gdGhlIHJlbGF0ZWQgc2NvcGUgdW5kZXIgdGhlIG5hbWUgaW4gdGhlaXJcbiAqIGBuYW1lYCBhdHRyaWJ1dGUuXG4gKlxuICogQW55IHBlbmRpbmcgY2hhbmdlcyB3aWxsIHRha2UgcGxhY2UgaW1tZWRpYXRlbHkgd2hlbiBhbiBlbmNsb3NpbmcgZm9ybSBpcyBzdWJtaXR0ZWQgdmlhIHRoZVxuICogYHN1Ym1pdGAgZXZlbnQuIE5vdGUgdGhhdCBgbmdDbGlja2AgZXZlbnRzIHdpbGwgb2NjdXIgYmVmb3JlIHRoZSBtb2RlbCBpcyB1cGRhdGVkLiBVc2UgYG5nU3VibWl0YFxuICogdG8gaGF2ZSBhY2Nlc3MgdG8gdGhlIHVwZGF0ZWQgbW9kZWwuXG4gKlxuICogVGhlIGZvbGxvd2luZyBleGFtcGxlIHNob3dzIGhvdyB0byBvdmVycmlkZSBpbW1lZGlhdGUgdXBkYXRlcy4gQ2hhbmdlcyBvbiB0aGUgaW5wdXRzIHdpdGhpbiB0aGVcbiAqIGZvcm0gd2lsbCB1cGRhdGUgdGhlIG1vZGVsIG9ubHkgd2hlbiB0aGUgY29udHJvbCBsb3NlcyBmb2N1cyAoYmx1ciBldmVudCkuIElmIGBlc2NhcGVgIGtleSBpc1xuICogcHJlc3NlZCB3aGlsZSB0aGUgaW5wdXQgZmllbGQgaXMgZm9jdXNlZCwgdGhlIHZhbHVlIGlzIHJlc2V0IHRvIHRoZSB2YWx1ZSBpbiB0aGUgY3VycmVudCBtb2RlbC5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdNb2RlbE9wdGlvbnMtZGlyZWN0aXZlLWJsdXJcIiBtb2R1bGU9XCJvcHRpb25zRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAqICAgICAgICAgPGxhYmVsPlxuICogICAgICAgICAgIE5hbWU6XG4gKiAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJOYW1lXCJcbiAqICAgICAgICAgICAgICAgICAgbmctbW9kZWw9XCJ1c2VyLm5hbWVcIlxuICogICAgICAgICAgICAgICAgICBuZy1tb2RlbC1vcHRpb25zPVwieyB1cGRhdGVPbjogJ2JsdXInIH1cIlxuICogICAgICAgICAgICAgICAgICBuZy1rZXl1cD1cImNhbmNlbCgkZXZlbnQpXCIgLz5cbiAqICAgICAgICAgPC9sYWJlbD48YnIgLz5cbiAqICAgICAgICAgPGxhYmVsPlxuICogICAgICAgICAgIE90aGVyIGRhdGE6XG4gKiAgICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJ1c2VyLmRhdGFcIiAvPlxuICogICAgICAgICA8L2xhYmVsPjxiciAvPlxuICogICAgICAgPC9mb3JtPlxuICogICAgICAgPHByZT51c2VyLm5hbWUgPSA8c3BhbiBuZy1iaW5kPVwidXNlci5uYW1lXCI+PC9zcGFuPjwvcHJlPlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICAgICBhbmd1bGFyLm1vZHVsZSgnb3B0aW9uc0V4YW1wbGUnLCBbXSlcbiAqICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICRzY29wZS51c2VyID0geyBuYW1lOiAnc2F5JywgZGF0YTogJycgfTtcbiAqXG4gKiAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbihlKSB7XG4gKiAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMjcpIHtcbiAqICAgICAgICAgICAgICRzY29wZS51c2VyRm9ybS51c2VyTmFtZS4kcm9sbGJhY2tWaWV3VmFsdWUoKTtcbiAqICAgICAgICAgICB9XG4gKiAgICAgICAgIH07XG4gKiAgICAgICB9XSk7XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogICAgIHZhciBtb2RlbCA9IGVsZW1lbnQoYnkuYmluZGluZygndXNlci5uYW1lJykpO1xuICogICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkubW9kZWwoJ3VzZXIubmFtZScpKTtcbiAqICAgICB2YXIgb3RoZXIgPSBlbGVtZW50KGJ5Lm1vZGVsKCd1c2VyLmRhdGEnKSk7XG4gKlxuICogICAgIGl0KCdzaG91bGQgYWxsb3cgY3VzdG9tIGV2ZW50cycsIGZ1bmN0aW9uKCkge1xuICogICAgICAgaW5wdXQuc2VuZEtleXMoJyBoZWxsbycpO1xuICogICAgICAgaW5wdXQuY2xpY2soKTtcbiAqICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3NheScpO1xuICogICAgICAgb3RoZXIuY2xpY2soKTtcbiAqICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3NheSBoZWxsbycpO1xuICogICAgIH0pO1xuICpcbiAqICAgICBpdCgnc2hvdWxkICRyb2xsYmFja1ZpZXdWYWx1ZSB3aGVuIG1vZGVsIGNoYW5nZXMnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGlucHV0LnNlbmRLZXlzKCcgaGVsbG8nKTtcbiAqICAgICAgIGV4cGVjdChpbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJ3NheSBoZWxsbycpO1xuICogICAgICAgaW5wdXQuc2VuZEtleXMocHJvdHJhY3Rvci5LZXkuRVNDQVBFKTtcbiAqICAgICAgIGV4cGVjdChpbnB1dC5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpLnRvRXF1YWwoJ3NheScpO1xuICogICAgICAgb3RoZXIuY2xpY2soKTtcbiAqICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLnRvRXF1YWwoJ3NheScpO1xuICogICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogVGhlIG5leHQgZXhhbXBsZSBzaG93cyBob3cgdG8gZGVib3VuY2UgbW9kZWwgY2hhbmdlcy4gTW9kZWwgd2lsbCBiZSB1cGRhdGVkIG9ubHkgMSBzZWMgYWZ0ZXIgbGFzdCBjaGFuZ2UuXG4gKiBJZiB0aGUgYENsZWFyYCBidXR0b24gaXMgcHJlc3NlZCwgYW55IGRlYm91bmNlZCBhY3Rpb24gaXMgY2FuY2VsZWQgYW5kIHRoZSB2YWx1ZSBiZWNvbWVzIGVtcHR5LlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ01vZGVsT3B0aW9ucy1kaXJlY3RpdmUtZGVib3VuY2VcIiBtb2R1bGU9XCJvcHRpb25zRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8Zm9ybSBuYW1lPVwidXNlckZvcm1cIj5cbiAqICAgICAgICAgTmFtZTpcbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInVzZXJOYW1lXCJcbiAqICAgICAgICAgICAgICAgIG5nLW1vZGVsPVwidXNlci5uYW1lXCJcbiAqICAgICAgICAgICAgICAgIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGRlYm91bmNlOiAxMDAwIH1cIiAvPlxuICogICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwidXNlckZvcm0udXNlck5hbWUuJHJvbGxiYWNrVmlld1ZhbHVlKCk7IHVzZXIubmFtZT0nJ1wiPkNsZWFyPC9idXR0b24+PGJyIC8+XG4gKiAgICAgICA8L2Zvcm0+XG4gKiAgICAgICA8cHJlPnVzZXIubmFtZSA9IDxzcGFuIG5nLWJpbmQ9XCJ1c2VyLm5hbWVcIj48L3NwYW4+PC9wcmU+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgIGFuZ3VsYXIubW9kdWxlKCdvcHRpb25zRXhhbXBsZScsIFtdKVxuICogICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgJHNjb3BlLnVzZXIgPSB7IG5hbWU6ICdzYXknIH07XG4gKiAgICAgICB9XSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKiAjIyBNb2RlbCB1cGRhdGVzIGFuZCB2YWxpZGF0aW9uXG4gKlxuICogVGhlIGRlZmF1bHQgYmVoYXZpb3VyIGluIGBuZ01vZGVsYCBpcyB0aGF0IHRoZSBtb2RlbCB2YWx1ZSBpcyBzZXQgdG8gYHVuZGVmaW5lZGAgd2hlbiB0aGVcbiAqIHZhbGlkYXRpb24gZGV0ZXJtaW5lcyB0aGF0IHRoZSB2YWx1ZSBpcyBpbnZhbGlkLiBCeSBzZXR0aW5nIHRoZSBgYWxsb3dJbnZhbGlkYCBwcm9wZXJ0eSB0byB0cnVlLFxuICogdGhlIG1vZGVsIHdpbGwgc3RpbGwgYmUgdXBkYXRlZCBldmVuIGlmIHRoZSB2YWx1ZSBpcyBpbnZhbGlkLlxuICpcbiAqXG4gKiAjIyBDb25uZWN0aW5nIHRvIHRoZSBzY29wZVxuICpcbiAqIEJ5IHNldHRpbmcgdGhlIGBnZXR0ZXJTZXR0ZXJgIHByb3BlcnR5IHRvIHRydWUgeW91IGFyZSB0ZWxsaW5nIG5nTW9kZWwgdGhhdCB0aGUgYG5nTW9kZWxgIGV4cHJlc3Npb25cbiAqIG9uIHRoZSBzY29wZSByZWZlcnMgdG8gYSBcImdldHRlci9zZXR0ZXJcIiBmdW5jdGlvbiByYXRoZXIgdGhhbiB0aGUgdmFsdWUgaXRzZWxmLlxuICpcbiAqIFRoZSBmb2xsb3dpbmcgZXhhbXBsZSBzaG93cyBob3cgdG8gYmluZCB0byBnZXR0ZXIvc2V0dGVyczpcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdNb2RlbE9wdGlvbnMtZGlyZWN0aXZlLWdldHRlci1zZXR0ZXJcIiBtb2R1bGU9XCJnZXR0ZXJTZXR0ZXJFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgIDxmb3JtIG5hbWU9XCJ1c2VyRm9ybVwiPlxuICogICAgICAgICA8bGFiZWw+XG4gKiAgICAgICAgICAgTmFtZTpcbiAqICAgICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuYW1lPVwidXNlck5hbWVcIlxuICogICAgICAgICAgICAgICAgICBuZy1tb2RlbD1cInVzZXIubmFtZVwiXG4gKiAgICAgICAgICAgICAgICAgIG5nLW1vZGVsLW9wdGlvbnM9XCJ7IGdldHRlclNldHRlcjogdHJ1ZSB9XCIgLz5cbiAqICAgICAgICAgPC9sYWJlbD5cbiAqICAgICAgIDwvZm9ybT5cbiAqICAgICAgIDxwcmU+dXNlci5uYW1lID0gPHNwYW4gbmctYmluZD1cInVzZXIubmFtZSgpXCI+PC9zcGFuPjwvcHJlPlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICAgICBhbmd1bGFyLm1vZHVsZSgnZ2V0dGVyU2V0dGVyRXhhbXBsZScsIFtdKVxuICogICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgdmFyIF9uYW1lID0gJ0JyaWFuJztcbiAqICAgICAgICAgJHNjb3BlLnVzZXIgPSB7XG4gKiAgICAgICAgICAgbmFtZTogZnVuY3Rpb24obmV3TmFtZSkge1xuICogICAgICAgICAgICAgcmV0dXJuIGFuZ3VsYXIuaXNEZWZpbmVkKG5ld05hbWUpID8gKF9uYW1lID0gbmV3TmFtZSkgOiBfbmFtZTtcbiAqICAgICAgICAgICB9XG4gKiAgICAgICAgIH07XG4gKiAgICAgICB9XSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKlxuICogIyMgU3BlY2lmeWluZyB0aW1lem9uZXNcbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgdGhlIHRpbWV6b25lIHRoYXQgZGF0ZS90aW1lIGlucHV0IGRpcmVjdGl2ZXMgZXhwZWN0IGJ5IHByb3ZpZGluZyBpdHMgbmFtZSBpbiB0aGVcbiAqIGB0aW1lem9uZWAgcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG5nTW9kZWxPcHRpb25zIG9wdGlvbnMgdG8gYXBwbHkgdG8ge0BsaW5rIG5nTW9kZWx9IGRpcmVjdGl2ZXMgb24gdGhpcyBlbGVtZW50IGFuZFxuICogICBhbmQgaXRzIGRlc2NlbmRlbnRzLiBWYWxpZCBrZXlzIGFyZTpcbiAqICAgLSBgdXBkYXRlT25gOiBzdHJpbmcgc3BlY2lmeWluZyB3aGljaCBldmVudCBzaG91bGQgdGhlIGlucHV0IGJlIGJvdW5kIHRvLiBZb3UgY2FuIHNldCBzZXZlcmFsXG4gKiAgICAgZXZlbnRzIHVzaW5nIGFuIHNwYWNlIGRlbGltaXRlZCBsaXN0LiBUaGVyZSBpcyBhIHNwZWNpYWwgZXZlbnQgY2FsbGVkIGBkZWZhdWx0YCB0aGF0XG4gKiAgICAgbWF0Y2hlcyB0aGUgZGVmYXVsdCBldmVudHMgYmVsb25naW5nIHRvIHRoZSBjb250cm9sLlxuICogICAtIGBkZWJvdW5jZWA6IGludGVnZXIgdmFsdWUgd2hpY2ggY29udGFpbnMgdGhlIGRlYm91bmNlIG1vZGVsIHVwZGF0ZSB2YWx1ZSBpbiBtaWxsaXNlY29uZHMuIEFcbiAqICAgICB2YWx1ZSBvZiAwIHRyaWdnZXJzIGFuIGltbWVkaWF0ZSB1cGRhdGUuIElmIGFuIG9iamVjdCBpcyBzdXBwbGllZCBpbnN0ZWFkLCB5b3UgY2FuIHNwZWNpZnkgYVxuICogICAgIGN1c3RvbSB2YWx1ZSBmb3IgZWFjaCBldmVudC4gRm9yIGV4YW1wbGU6XG4gKiAgICAgYGBgXG4gKiAgICAgbmctbW9kZWwtb3B0aW9ucz1cIntcbiAqICAgICAgIHVwZGF0ZU9uOiAnZGVmYXVsdCBibHVyJyxcbiAqICAgICAgIGRlYm91bmNlOiB7ICdkZWZhdWx0JzogNTAwLCAnYmx1cic6IDAgfVxuICogICAgIH1cIlxuICogICAgIGBgYFxuICogICAtIGBhbGxvd0ludmFsaWRgOiBib29sZWFuIHZhbHVlIHdoaWNoIGluZGljYXRlcyB0aGF0IHRoZSBtb2RlbCBjYW4gYmUgc2V0IHdpdGggdmFsdWVzIHRoYXQgZGlkXG4gKiAgICAgbm90IHZhbGlkYXRlIGNvcnJlY3RseSBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IGJlaGF2aW9yIG9mIHNldHRpbmcgdGhlIG1vZGVsIHRvIHVuZGVmaW5lZC5cbiAqICAgLSBgZ2V0dGVyU2V0dGVyYDogYm9vbGVhbiB2YWx1ZSB3aGljaCBkZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRvIHRyZWF0IGZ1bmN0aW9ucyBib3VuZCB0b1xuICogICAgIGBuZ01vZGVsYCBhcyBnZXR0ZXJzL3NldHRlcnMuXG4gKiAgIC0gYHRpbWV6b25lYDogRGVmaW5lcyB0aGUgdGltZXpvbmUgdG8gYmUgdXNlZCB0byByZWFkL3dyaXRlIHRoZSBgRGF0ZWAgaW5zdGFuY2UgaW4gdGhlIG1vZGVsIGZvclxuICogICAgIGA8aW5wdXQgdHlwZT1cImRhdGVcIiAvPmAsIGA8aW5wdXQgdHlwZT1cInRpbWVcIiAvPmAsIC4uLiAuIEl0IHVuZGVyc3RhbmRzIFVUQy9HTVQgYW5kIHRoZVxuICogICAgIGNvbnRpbmVudGFsIFVTIHRpbWUgem9uZSBhYmJyZXZpYXRpb25zLCBidXQgZm9yIGdlbmVyYWwgdXNlLCB1c2UgYSB0aW1lIHpvbmUgb2Zmc2V0LCBmb3JcbiAqICAgICBleGFtcGxlLCBgJyswNDMwJ2AgKDQgaG91cnMsIDMwIG1pbnV0ZXMgZWFzdCBvZiB0aGUgR3JlZW53aWNoIG1lcmlkaWFuKVxuICogICAgIElmIG5vdCBzcGVjaWZpZWQsIHRoZSB0aW1lem9uZSBvZiB0aGUgYnJvd3NlciB3aWxsIGJlIHVzZWQuXG4gKlxuICovXG52YXIgbmdNb2RlbE9wdGlvbnNEaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgTmdNb2RlbE9wdGlvbnNDb250cm9sbGVyLiRpbmplY3QgPSBbJyRhdHRycycsICckc2NvcGUnXTtcbiAgZnVuY3Rpb24gTmdNb2RlbE9wdGlvbnNDb250cm9sbGVyKCRhdHRycywgJHNjb3BlKSB7XG4gICAgdGhpcy4kJGF0dHJzID0gJGF0dHJzO1xuICAgIHRoaXMuJCRzY29wZSA9ICRzY29wZTtcbiAgfVxuICBOZ01vZGVsT3B0aW9uc0NvbnRyb2xsZXIucHJvdG90eXBlID0ge1xuICAgICRvbkluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBhcmVudE9wdGlvbnMgPSB0aGlzLnBhcmVudEN0cmwgPyB0aGlzLnBhcmVudEN0cmwuJG9wdGlvbnMgOiBkZWZhdWx0TW9kZWxPcHRpb25zO1xuICAgICAgdmFyIG1vZGVsT3B0aW9uc0RlZmluaXRpb24gPSB0aGlzLiQkc2NvcGUuJGV2YWwodGhpcy4kJGF0dHJzLm5nTW9kZWxPcHRpb25zKTtcblxuICAgICAgdGhpcy4kb3B0aW9ucyA9IHBhcmVudE9wdGlvbnMuY3JlYXRlQ2hpbGQobW9kZWxPcHRpb25zRGVmaW5pdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICAvLyBuZ01vZGVsT3B0aW9ucyBuZWVkcyB0byBydW4gYmVmb3JlIG5nTW9kZWwgYW5kIGlucHV0IGRpcmVjdGl2ZXNcbiAgICBwcmlvcml0eTogMTAsXG4gICAgcmVxdWlyZToge3BhcmVudEN0cmw6ICc/Xl5uZ01vZGVsT3B0aW9ucyd9LFxuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgY29udHJvbGxlcjogTmdNb2RlbE9wdGlvbnNDb250cm9sbGVyXG4gIH07XG59O1xuXG5cbi8vIHNoYWxsb3cgY29weSBvdmVyIHZhbHVlcyBmcm9tIGBzcmNgIHRoYXQgYXJlIG5vdCBhbHJlYWR5IHNwZWNpZmllZCBvbiBgZHN0YFxuZnVuY3Rpb24gZGVmYXVsdHMoZHN0LCBzcmMpIHtcbiAgZm9yRWFjaChzcmMsIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoIWlzRGVmaW5lZChkc3Rba2V5XSkpIHtcbiAgICAgIGRzdFtrZXldID0gdmFsdWU7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ05vbkJpbmRhYmxlXG4gKiBAcmVzdHJpY3QgQUNcbiAqIEBwcmlvcml0eSAxMDAwXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nTm9uQmluZGFibGVgIGRpcmVjdGl2ZSB0ZWxscyBBbmd1bGFyIG5vdCB0byBjb21waWxlIG9yIGJpbmQgdGhlIGNvbnRlbnRzIG9mIHRoZSBjdXJyZW50XG4gKiBET00gZWxlbWVudC4gVGhpcyBpcyB1c2VmdWwgaWYgdGhlIGVsZW1lbnQgY29udGFpbnMgd2hhdCBhcHBlYXJzIHRvIGJlIEFuZ3VsYXIgZGlyZWN0aXZlcyBhbmRcbiAqIGJpbmRpbmdzIGJ1dCB3aGljaCBzaG91bGQgYmUgaWdub3JlZCBieSBBbmd1bGFyLiBUaGlzIGNvdWxkIGJlIHRoZSBjYXNlIGlmIHlvdSBoYXZlIGEgc2l0ZSB0aGF0XG4gKiBkaXNwbGF5cyBzbmlwcGV0cyBvZiBjb2RlLCBmb3IgaW5zdGFuY2UuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKlxuICogQGV4YW1wbGVcbiAqIEluIHRoaXMgZXhhbXBsZSB0aGVyZSBhcmUgdHdvIGxvY2F0aW9ucyB3aGVyZSBhIHNpbXBsZSBpbnRlcnBvbGF0aW9uIGJpbmRpbmcgKGB7e319YCkgaXMgcHJlc2VudCxcbiAqIGJ1dCB0aGUgb25lIHdyYXBwZWQgaW4gYG5nTm9uQmluZGFibGVgIGlzIGxlZnQgYWxvbmUuXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBuYW1lPVwibmctbm9uLWJpbmRhYmxlXCI+XG4gICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8ZGl2Pk5vcm1hbDoge3sxICsgMn19PC9kaXY+XG4gICAgICAgIDxkaXYgbmctbm9uLWJpbmRhYmxlPklnbm9yZWQ6IHt7MSArIDJ9fTwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctbm9uLWJpbmRhYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCcxICsgMicpKS5nZXRUZXh0KCkpLnRvQ29udGFpbignMycpO1xuICAgICAgICAgZXhwZWN0KGVsZW1lbnQuYWxsKGJ5LmNzcygnZGl2JykpLmxhc3QoKS5nZXRUZXh0KCkpLnRvTWF0Y2goLzEgXFwrIDIvKTtcbiAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ05vbkJpbmRhYmxlRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoeyB0ZXJtaW5hbDogdHJ1ZSwgcHJpb3JpdHk6IDEwMDAgfSk7XG5cbi8qIGV4cG9ydGVkIG5nT3B0aW9uc0RpcmVjdGl2ZSAqL1xuXG4vKiBnbG9iYWwganFMaXRlUmVtb3ZlICovXG5cbnZhciBuZ09wdGlvbnNNaW5FcnIgPSBtaW5FcnIoJ25nT3B0aW9ucycpO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nT3B0aW9uc1xuICogQHJlc3RyaWN0IEFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGUgYG5nT3B0aW9uc2AgYXR0cmlidXRlIGNhbiBiZSB1c2VkIHRvIGR5bmFtaWNhbGx5IGdlbmVyYXRlIGEgbGlzdCBvZiBgPG9wdGlvbj5gXG4gKiBlbGVtZW50cyBmb3IgdGhlIGA8c2VsZWN0PmAgZWxlbWVudCB1c2luZyB0aGUgYXJyYXkgb3Igb2JqZWN0IG9idGFpbmVkIGJ5IGV2YWx1YXRpbmcgdGhlXG4gKiBgbmdPcHRpb25zYCBjb21wcmVoZW5zaW9uIGV4cHJlc3Npb24uXG4gKlxuICogSW4gbWFueSBjYXNlcywge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ1JlcGVhdCBuZ1JlcGVhdH0gY2FuIGJlIHVzZWQgb24gYDxvcHRpb24+YCBlbGVtZW50cyBpbnN0ZWFkIG9mXG4gKiBgbmdPcHRpb25zYCB0byBhY2hpZXZlIGEgc2ltaWxhciByZXN1bHQuIEhvd2V2ZXIsIGBuZ09wdGlvbnNgIHByb3ZpZGVzIHNvbWUgYmVuZWZpdHM6XG4gKiAtIG1vcmUgZmxleGliaWxpdHkgaW4gaG93IHRoZSBgPHNlbGVjdD5gJ3MgbW9kZWwgaXMgYXNzaWduZWQgdmlhIHRoZSBgc2VsZWN0YCAqKmBhc2AqKiBwYXJ0IG9mIHRoZVxuICogY29tcHJlaGVuc2lvbiBleHByZXNzaW9uXG4gKiAtIHJlZHVjZWQgbWVtb3J5IGNvbnN1bXB0aW9uIGJ5IG5vdCBjcmVhdGluZyBhIG5ldyBzY29wZSBmb3IgZWFjaCByZXBlYXRlZCBpbnN0YW5jZVxuICogLSBpbmNyZWFzZWQgcmVuZGVyIHNwZWVkIGJ5IGNyZWF0aW5nIHRoZSBvcHRpb25zIGluIGEgZG9jdW1lbnRGcmFnbWVudCBpbnN0ZWFkIG9mIGluZGl2aWR1YWxseVxuICpcbiAqIFdoZW4gYW4gaXRlbSBpbiB0aGUgYDxzZWxlY3Q+YCBtZW51IGlzIHNlbGVjdGVkLCB0aGUgYXJyYXkgZWxlbWVudCBvciBvYmplY3QgcHJvcGVydHlcbiAqIHJlcHJlc2VudGVkIGJ5IHRoZSBzZWxlY3RlZCBvcHRpb24gd2lsbCBiZSBib3VuZCB0byB0aGUgbW9kZWwgaWRlbnRpZmllZCBieSB0aGUgYG5nTW9kZWxgXG4gKiBkaXJlY3RpdmUuXG4gKlxuICogT3B0aW9uYWxseSwgYSBzaW5nbGUgaGFyZC1jb2RlZCBgPG9wdGlvbj5gIGVsZW1lbnQsIHdpdGggdGhlIHZhbHVlIHNldCB0byBhbiBlbXB0eSBzdHJpbmcsIGNhblxuICogYmUgbmVzdGVkIGludG8gdGhlIGA8c2VsZWN0PmAgZWxlbWVudC4gVGhpcyBlbGVtZW50IHdpbGwgdGhlbiByZXByZXNlbnQgdGhlIGBudWxsYCBvciBcIm5vdCBzZWxlY3RlZFwiXG4gKiBvcHRpb24uIFNlZSBleGFtcGxlIGJlbG93IGZvciBkZW1vbnN0cmF0aW9uLlxuICpcbiAqICMjIENvbXBsZXggTW9kZWxzIChvYmplY3RzIG9yIGNvbGxlY3Rpb25zKVxuICpcbiAqIEJ5IGRlZmF1bHQsIGBuZ01vZGVsYCB3YXRjaGVzIHRoZSBtb2RlbCBieSByZWZlcmVuY2UsIG5vdCB2YWx1ZS4gVGhpcyBpcyBpbXBvcnRhbnQgdG8ga25vdyB3aGVuXG4gKiBiaW5kaW5nIHRoZSBzZWxlY3QgdG8gYSBtb2RlbCB0aGF0IGlzIGFuIG9iamVjdCBvciBhIGNvbGxlY3Rpb24uXG4gKlxuICogT25lIGlzc3VlIG9jY3VycyBpZiB5b3Ugd2FudCB0byBwcmVzZWxlY3QgYW4gb3B0aW9uLiBGb3IgZXhhbXBsZSwgaWYgeW91IHNldFxuICogdGhlIG1vZGVsIHRvIGFuIG9iamVjdCB0aGF0IGlzIGVxdWFsIHRvIGFuIG9iamVjdCBpbiB5b3VyIGNvbGxlY3Rpb24sIGBuZ09wdGlvbnNgIHdvbid0IGJlIGFibGUgdG8gc2V0IHRoZSBzZWxlY3Rpb24sXG4gKiBiZWNhdXNlIHRoZSBvYmplY3RzIGFyZSBub3QgaWRlbnRpY2FsLiBTbyBieSBkZWZhdWx0LCB5b3Ugc2hvdWxkIGFsd2F5cyByZWZlcmVuY2UgdGhlIGl0ZW0gaW4geW91ciBjb2xsZWN0aW9uXG4gKiBmb3IgcHJlc2VsZWN0aW9ucywgZS5nLjogYCRzY29wZS5zZWxlY3RlZCA9ICRzY29wZS5jb2xsZWN0aW9uWzNdYC5cbiAqXG4gKiBBbm90aGVyIHNvbHV0aW9uIGlzIHRvIHVzZSBhIGB0cmFjayBieWAgY2xhdXNlLCBiZWNhdXNlIHRoZW4gYG5nT3B0aW9uc2Agd2lsbCB0cmFjayB0aGUgaWRlbnRpdHlcbiAqIG9mIHRoZSBpdGVtIG5vdCBieSByZWZlcmVuY2UsIGJ1dCBieSB0aGUgcmVzdWx0IG9mIHRoZSBgdHJhY2sgYnlgIGV4cHJlc3Npb24uIEZvciBleGFtcGxlLCBpZiB5b3VyXG4gKiBjb2xsZWN0aW9uIGl0ZW1zIGhhdmUgYW4gaWQgcHJvcGVydHksIHlvdSB3b3VsZCBgdHJhY2sgYnkgaXRlbS5pZGAuXG4gKlxuICogQSBkaWZmZXJlbnQgaXNzdWUgd2l0aCBvYmplY3RzIG9yIGNvbGxlY3Rpb25zIGlzIHRoYXQgbmdNb2RlbCB3b24ndCBkZXRlY3QgaWYgYW4gb2JqZWN0IHByb3BlcnR5IG9yXG4gKiBhIGNvbGxlY3Rpb24gaXRlbSBjaGFuZ2VzLiBGb3IgdGhhdCByZWFzb24sIGBuZ09wdGlvbnNgIGFkZGl0aW9uYWxseSB3YXRjaGVzIHRoZSBtb2RlbCB1c2luZ1xuICogYCR3YXRjaENvbGxlY3Rpb25gLCB3aGVuIHRoZSBleHByZXNzaW9uIGNvbnRhaW5zIGEgYHRyYWNrIGJ5YCBjbGF1c2Ugb3IgdGhlIHRoZSBzZWxlY3QgaGFzIHRoZSBgbXVsdGlwbGVgIGF0dHJpYnV0ZS5cbiAqIFRoaXMgYWxsb3dzIG5nT3B0aW9ucyB0byB0cmlnZ2VyIGEgcmUtcmVuZGVyaW5nIG9mIHRoZSBvcHRpb25zIGV2ZW4gaWYgdGhlIGFjdHVhbCBvYmplY3QvY29sbGVjdGlvblxuICogaGFzIG5vdCBjaGFuZ2VkIGlkZW50aXR5LCBidXQgb25seSBhIHByb3BlcnR5IG9uIHRoZSBvYmplY3Qgb3IgYW4gaXRlbSBpbiB0aGUgY29sbGVjdGlvbiBjaGFuZ2VzLlxuICpcbiAqIE5vdGUgdGhhdCBgJHdhdGNoQ29sbGVjdGlvbmAgZG9lcyBhIHNoYWxsb3cgY29tcGFyaXNvbiBvZiB0aGUgcHJvcGVydGllcyBvZiB0aGUgb2JqZWN0IChvciB0aGUgaXRlbXMgaW4gdGhlIGNvbGxlY3Rpb25cbiAqIGlmIHRoZSBtb2RlbCBpcyBhbiBhcnJheSkuIFRoaXMgbWVhbnMgdGhhdCBjaGFuZ2luZyBhIHByb3BlcnR5IGRlZXBlciB0aGFuIHRoZSBmaXJzdCBsZXZlbCBpbnNpZGUgdGhlXG4gKiBvYmplY3QvY29sbGVjdGlvbiB3aWxsIG5vdCB0cmlnZ2VyIGEgcmUtcmVuZGVyaW5nLlxuICpcbiAqICMjIGBzZWxlY3RgICoqYGFzYCoqXG4gKlxuICogVXNpbmcgYHNlbGVjdGAgKipgYXNgKiogd2lsbCBiaW5kIHRoZSByZXN1bHQgb2YgdGhlIGBzZWxlY3RgIGV4cHJlc3Npb24gdG8gdGhlIG1vZGVsLCBidXRcbiAqIHRoZSB2YWx1ZSBvZiB0aGUgYDxzZWxlY3Q+YCBhbmQgYDxvcHRpb24+YCBodG1sIGVsZW1lbnRzIHdpbGwgYmUgZWl0aGVyIHRoZSBpbmRleCAoZm9yIGFycmF5IGRhdGEgc291cmNlcylcbiAqIG9yIHByb3BlcnR5IG5hbWUgKGZvciBvYmplY3QgZGF0YSBzb3VyY2VzKSBvZiB0aGUgdmFsdWUgd2l0aGluIHRoZSBjb2xsZWN0aW9uLiBJZiBhICoqYHRyYWNrIGJ5YCoqIGV4cHJlc3Npb25cbiAqIGlzIHVzZWQsIHRoZSByZXN1bHQgb2YgdGhhdCBleHByZXNzaW9uIHdpbGwgYmUgc2V0IGFzIHRoZSB2YWx1ZSBvZiB0aGUgYG9wdGlvbmAgYW5kIGBzZWxlY3RgIGVsZW1lbnRzLlxuICpcbiAqXG4gKiAjIyMgYHNlbGVjdGAgKipgYXNgKiogYW5kICoqYHRyYWNrIGJ5YCoqXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqIEJlIGNhcmVmdWwgd2hlbiB1c2luZyBgc2VsZWN0YCAqKmBhc2AqKiBhbmQgKipgdHJhY2sgYnlgKiogaW4gdGhlIHNhbWUgZXhwcmVzc2lvbi5cbiAqIDwvZGl2PlxuICpcbiAqIEdpdmVuIHRoaXMgYXJyYXkgb2YgaXRlbXMgb24gdGhlICRzY29wZTpcbiAqXG4gKiBgYGBqc1xuICogJHNjb3BlLml0ZW1zID0gW3tcbiAqICAgaWQ6IDEsXG4gKiAgIGxhYmVsOiAnYUxhYmVsJyxcbiAqICAgc3ViSXRlbTogeyBuYW1lOiAnYVN1Ykl0ZW0nIH1cbiAqIH0sIHtcbiAqICAgaWQ6IDIsXG4gKiAgIGxhYmVsOiAnYkxhYmVsJyxcbiAqICAgc3ViSXRlbTogeyBuYW1lOiAnYlN1Ykl0ZW0nIH1cbiAqIH1dO1xuICogYGBgXG4gKlxuICogVGhpcyB3aWxsIHdvcms6XG4gKlxuICogYGBgaHRtbFxuICogPHNlbGVjdCBuZy1vcHRpb25zPVwiaXRlbSBhcyBpdGVtLmxhYmVsIGZvciBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5IGl0ZW0uaWRcIiBuZy1tb2RlbD1cInNlbGVjdGVkXCI+PC9zZWxlY3Q+XG4gKiBgYGBcbiAqIGBgYGpzXG4gKiAkc2NvcGUuc2VsZWN0ZWQgPSAkc2NvcGUuaXRlbXNbMF07XG4gKiBgYGBcbiAqXG4gKiBidXQgdGhpcyB3aWxsIG5vdCB3b3JrOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxzZWxlY3Qgbmctb3B0aW9ucz1cIml0ZW0uc3ViSXRlbSBhcyBpdGVtLmxhYmVsIGZvciBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5IGl0ZW0uaWRcIiBuZy1tb2RlbD1cInNlbGVjdGVkXCI+PC9zZWxlY3Q+XG4gKiBgYGBcbiAqIGBgYGpzXG4gKiAkc2NvcGUuc2VsZWN0ZWQgPSAkc2NvcGUuaXRlbXNbMF0uc3ViSXRlbTtcbiAqIGBgYFxuICpcbiAqIEluIGJvdGggZXhhbXBsZXMsIHRoZSAqKmB0cmFjayBieWAqKiBleHByZXNzaW9uIGlzIGFwcGxpZWQgc3VjY2Vzc2Z1bGx5IHRvIGVhY2ggYGl0ZW1gIGluIHRoZVxuICogYGl0ZW1zYCBhcnJheS4gQmVjYXVzZSB0aGUgc2VsZWN0ZWQgb3B0aW9uIGhhcyBiZWVuIHNldCBwcm9ncmFtbWF0aWNhbGx5IGluIHRoZSBjb250cm9sbGVyLCB0aGVcbiAqICoqYHRyYWNrIGJ5YCoqIGV4cHJlc3Npb24gaXMgYWxzbyBhcHBsaWVkIHRvIHRoZSBgbmdNb2RlbGAgdmFsdWUuIEluIHRoZSBmaXJzdCBleGFtcGxlLCB0aGVcbiAqIGBuZ01vZGVsYCB2YWx1ZSBpcyBgaXRlbXNbMF1gIGFuZCB0aGUgKipgdHJhY2sgYnlgKiogZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYGl0ZW1zWzBdLmlkYCB3aXRoXG4gKiBubyBpc3N1ZS4gSW4gdGhlIHNlY29uZCBleGFtcGxlLCB0aGUgYG5nTW9kZWxgIHZhbHVlIGlzIGBpdGVtc1swXS5zdWJJdGVtYCBhbmQgdGhlICoqYHRyYWNrIGJ5YCoqXG4gKiBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBgaXRlbXNbMF0uc3ViSXRlbS5pZGAgKHdoaWNoIGlzIHVuZGVmaW5lZCkuIEFzIGEgcmVzdWx0LCB0aGUgbW9kZWwgdmFsdWVcbiAqIGlzIG5vdCBtYXRjaGVkIGFnYWluc3QgYW55IGA8b3B0aW9uPmAgYW5kIHRoZSBgPHNlbGVjdD5gIGFwcGVhcnMgYXMgaGF2aW5nIG5vIHNlbGVjdGVkIHZhbHVlLlxuICpcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmdNb2RlbCBBc3NpZ25hYmxlIEFuZ3VsYXJKUyBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAqIEBwYXJhbSB7Y29tcHJlaGVuc2lvbl9leHByZXNzaW9ufSBuZ09wdGlvbnMgaW4gb25lIG9mIHRoZSBmb2xsb3dpbmcgZm9ybXM6XG4gKlxuICogICAqIGZvciBhcnJheSBkYXRhIHNvdXJjZXM6XG4gKiAgICAgKiBgbGFiZWxgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWBcbiAqICAgICAqIGBzZWxlY3RgICoqYGFzYCoqIGBsYWJlbGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YFxuICogICAgICogYGxhYmVsYCAqKmBncm91cCBieWAqKiBgZ3JvdXBgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWBcbiAqICAgICAqIGBsYWJlbGAgKipgZGlzYWJsZSB3aGVuYCoqIGBkaXNhYmxlYCAqKmBmb3JgKiogYHZhbHVlYCAqKmBpbmAqKiBgYXJyYXlgXG4gKiAgICAgKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YCAqKmB0cmFjayBieWAqKiBgdHJhY2tleHByYFxuICogICAgICogYGxhYmVsYCAqKmBkaXNhYmxlIHdoZW5gKiogYGRpc2FibGVgICoqYGZvcmAqKiBgdmFsdWVgICoqYGluYCoqIGBhcnJheWAgKipgdHJhY2sgYnlgKiogYHRyYWNrZXhwcmBcbiAqICAgICAqIGBsYWJlbGAgKipgZm9yYCoqIGB2YWx1ZWAgKipgaW5gKiogYGFycmF5YCB8IG9yZGVyQnk6YG9yZGVyZXhwcmAgKipgdHJhY2sgYnlgKiogYHRyYWNrZXhwcmBcbiAqICAgICAgICAoZm9yIGluY2x1ZGluZyBhIGZpbHRlciB3aXRoIGB0cmFjayBieWApXG4gKiAgICogZm9yIG9iamVjdCBkYXRhIHNvdXJjZXM6XG4gKiAgICAgKiBgbGFiZWxgICoqYGZvciAoYCoqYGtleWAgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBmb3IgKGAqKmBrZXlgICoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqICAgICAqIGBsYWJlbGAgKipgZ3JvdXAgYnlgKiogYGdyb3VwYCAqKmBmb3IgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYGxhYmVsYCAqKmBkaXNhYmxlIHdoZW5gKiogYGRpc2FibGVgICoqYGZvciAoYCoqYGtleWAqKmAsYCoqIGB2YWx1ZWAqKmApIGluYCoqIGBvYmplY3RgXG4gKiAgICAgKiBgc2VsZWN0YCAqKmBhc2AqKiBgbGFiZWxgICoqYGdyb3VwIGJ5YCoqIGBncm91cGBcbiAqICAgICAgICAgKipgZm9yYCBgKGAqKmBrZXlgKipgLGAqKiBgdmFsdWVgKipgKSBpbmAqKiBgb2JqZWN0YFxuICogICAgICogYHNlbGVjdGAgKipgYXNgKiogYGxhYmVsYCAqKmBkaXNhYmxlIHdoZW5gKiogYGRpc2FibGVgXG4gKiAgICAgICAgICoqYGZvcmAgYChgKipga2V5YCoqYCxgKiogYHZhbHVlYCoqYCkgaW5gKiogYG9iamVjdGBcbiAqXG4gKiBXaGVyZTpcbiAqXG4gKiAgICogYGFycmF5YCAvIGBvYmplY3RgOiBhbiBleHByZXNzaW9uIHdoaWNoIGV2YWx1YXRlcyB0byBhbiBhcnJheSAvIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiAgICogYHZhbHVlYDogbG9jYWwgdmFyaWFibGUgd2hpY2ggd2lsbCByZWZlciB0byBlYWNoIGl0ZW0gaW4gdGhlIGBhcnJheWAgb3IgZWFjaCBwcm9wZXJ0eSB2YWx1ZVxuICogICAgICBvZiBgb2JqZWN0YCBkdXJpbmcgaXRlcmF0aW9uLlxuICogICAqIGBrZXlgOiBsb2NhbCB2YXJpYWJsZSB3aGljaCB3aWxsIHJlZmVyIHRvIGEgcHJvcGVydHkgbmFtZSBpbiBgb2JqZWN0YCBkdXJpbmcgaXRlcmF0aW9uLlxuICogICAqIGBsYWJlbGA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdGhlIGxhYmVsIGZvciBgPG9wdGlvbj5gIGVsZW1lbnQuIFRoZVxuICogICAgIGBleHByZXNzaW9uYCB3aWxsIG1vc3QgbGlrZWx5IHJlZmVyIHRvIHRoZSBgdmFsdWVgIHZhcmlhYmxlIChlLmcuIGB2YWx1ZS5wcm9wZXJ0eU5hbWVgKS5cbiAqICAgKiBgc2VsZWN0YDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSBib3VuZCB0byB0aGUgbW9kZWwgb2YgdGhlIHBhcmVudCBgPHNlbGVjdD5gXG4gKiAgICAgIGVsZW1lbnQuIElmIG5vdCBzcGVjaWZpZWQsIGBzZWxlY3RgIGV4cHJlc3Npb24gd2lsbCBkZWZhdWx0IHRvIGB2YWx1ZWAuXG4gKiAgICogYGdyb3VwYDogVGhlIHJlc3VsdCBvZiB0aGlzIGV4cHJlc3Npb24gd2lsbCBiZSB1c2VkIHRvIGdyb3VwIG9wdGlvbnMgdXNpbmcgdGhlIGA8b3B0Z3JvdXA+YFxuICogICAgICBET00gZWxlbWVudC5cbiAqICAgKiBgZGlzYWJsZWA6IFRoZSByZXN1bHQgb2YgdGhpcyBleHByZXNzaW9uIHdpbGwgYmUgdXNlZCB0byBkaXNhYmxlIHRoZSByZW5kZXJlZCBgPG9wdGlvbj5gXG4gKiAgICAgIGVsZW1lbnQuIFJldHVybiBgdHJ1ZWAgdG8gZGlzYWJsZS5cbiAqICAgKiBgdHJhY2tleHByYDogVXNlZCB3aGVuIHdvcmtpbmcgd2l0aCBhbiBhcnJheSBvZiBvYmplY3RzLiBUaGUgcmVzdWx0IG9mIHRoaXMgZXhwcmVzc2lvbiB3aWxsIGJlXG4gKiAgICAgIHVzZWQgdG8gaWRlbnRpZnkgdGhlIG9iamVjdHMgaW4gdGhlIGFycmF5LiBUaGUgYHRyYWNrZXhwcmAgd2lsbCBtb3N0IGxpa2VseSByZWZlciB0byB0aGVcbiAqICAgICBgdmFsdWVgIHZhcmlhYmxlIChlLmcuIGB2YWx1ZS5wcm9wZXJ0eU5hbWVgKS4gV2l0aCB0aGlzIHRoZSBzZWxlY3Rpb24gaXMgcHJlc2VydmVkXG4gKiAgICAgIGV2ZW4gd2hlbiB0aGUgb3B0aW9ucyBhcmUgcmVjcmVhdGVkIChlLmcuIHJlbG9hZGVkIGZyb20gdGhlIHNlcnZlcikuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5hbWUgUHJvcGVydHkgbmFtZSBvZiB0aGUgZm9ybSB1bmRlciB3aGljaCB0aGUgY29udHJvbCBpcyBwdWJsaXNoZWQuXG4gKiBAcGFyYW0ge3N0cmluZz19IHJlcXVpcmVkIFRoZSBjb250cm9sIGlzIGNvbnNpZGVyZWQgdmFsaWQgb25seSBpZiB2YWx1ZSBpcyBlbnRlcmVkLlxuICogQHBhcmFtIHtzdHJpbmc9fSBuZ1JlcXVpcmVkIEFkZHMgYHJlcXVpcmVkYCBhdHRyaWJ1dGUgYW5kIGByZXF1aXJlZGAgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gKiAgICB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBgbmdSZXF1aXJlZGAgaW5zdGVhZCBvZlxuICogICAgYHJlcXVpcmVkYCB3aGVuIHlvdSB3YW50IHRvIGRhdGEtYmluZCB0byB0aGUgYHJlcXVpcmVkYCBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nQXR0clNpemUgc2V0cyB0aGUgc2l6ZSBvZiB0aGUgc2VsZWN0IGVsZW1lbnQgZHluYW1pY2FsbHkuIFVzZXMgdGhlXG4gKiB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiMtbmdhdHRyLWZvci1iaW5kaW5nLXRvLWFyYml0cmFyeS1hdHRyaWJ1dGVzIG5nQXR0cn0gZGlyZWN0aXZlLlxuICpcbiAqIEBleGFtcGxlXG4gICAgPGV4YW1wbGUgbW9kdWxlPVwic2VsZWN0RXhhbXBsZVwiIG5hbWU9XCJzZWxlY3RcIj5cbiAgICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICAgIDxzY3JpcHQ+XG4gICAgICAgIGFuZ3VsYXIubW9kdWxlKCdzZWxlY3RFeGFtcGxlJywgW10pXG4gICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICRzY29wZS5jb2xvcnMgPSBbXG4gICAgICAgICAgICAgIHtuYW1lOidibGFjaycsIHNoYWRlOidkYXJrJ30sXG4gICAgICAgICAgICAgIHtuYW1lOid3aGl0ZScsIHNoYWRlOidsaWdodCcsIG5vdEFuT3B0aW9uOiB0cnVlfSxcbiAgICAgICAgICAgICAge25hbWU6J3JlZCcsIHNoYWRlOidkYXJrJ30sXG4gICAgICAgICAgICAgIHtuYW1lOidibHVlJywgc2hhZGU6J2RhcmsnLCBub3RBbk9wdGlvbjogdHJ1ZX0sXG4gICAgICAgICAgICAgIHtuYW1lOid5ZWxsb3cnLCBzaGFkZTonbGlnaHQnLCBub3RBbk9wdGlvbjogZmFsc2V9XG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgJHNjb3BlLm15Q29sb3IgPSAkc2NvcGUuY29sb3JzWzJdOyAvLyByZWRcbiAgICAgICAgICB9XSk7XG4gICAgICAgIDwvc2NyaXB0PlxuICAgICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgIDxsaSBuZy1yZXBlYXQ9XCJjb2xvciBpbiBjb2xvcnNcIj5cbiAgICAgICAgICAgICAgPGxhYmVsPk5hbWU6IDxpbnB1dCBuZy1tb2RlbD1cImNvbG9yLm5hbWVcIj48L2xhYmVsPlxuICAgICAgICAgICAgICA8bGFiZWw+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY29sb3Iubm90QW5PcHRpb25cIj4gRGlzYWJsZWQ/PC9sYWJlbD5cbiAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1jbGljaz1cImNvbG9ycy5zcGxpY2UoJGluZGV4LCAxKVwiIGFyaWEtbGFiZWw9XCJSZW1vdmVcIj5YPC9idXR0b24+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiY29sb3JzLnB1c2goe30pXCI+YWRkPC9idXR0b24+XG4gICAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgPGhyLz5cbiAgICAgICAgICA8bGFiZWw+Q29sb3IgKG51bGwgbm90IGFsbG93ZWQpOlxuICAgICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cIm15Q29sb3JcIiBuZy1vcHRpb25zPVwiY29sb3IubmFtZSBmb3IgY29sb3IgaW4gY29sb3JzXCI+PC9zZWxlY3Q+XG4gICAgICAgICAgPC9sYWJlbD48YnIvPlxuICAgICAgICAgIDxsYWJlbD5Db2xvciAobnVsbCBhbGxvd2VkKTpcbiAgICAgICAgICA8c3BhbiAgY2xhc3M9XCJudWxsYWJsZVwiPlxuICAgICAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cIm15Q29sb3JcIiBuZy1vcHRpb25zPVwiY29sb3IubmFtZSBmb3IgY29sb3IgaW4gY29sb3JzXCI+XG4gICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4tLSBjaG9vc2UgY29sb3IgLS08L29wdGlvbj5cbiAgICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIDwvc3Bhbj48L2xhYmVsPjxici8+XG5cbiAgICAgICAgICA8bGFiZWw+Q29sb3IgZ3JvdXBlZCBieSBzaGFkZTpcbiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJteUNvbG9yXCIgbmctb3B0aW9ucz1cImNvbG9yLm5hbWUgZ3JvdXAgYnkgY29sb3Iuc2hhZGUgZm9yIGNvbG9yIGluIGNvbG9yc1wiPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgPC9sYWJlbD48YnIvPlxuXG4gICAgICAgICAgPGxhYmVsPkNvbG9yIGdyb3VwZWQgYnkgc2hhZGUsIHdpdGggc29tZSBkaXNhYmxlZDpcbiAgICAgICAgICAgIDxzZWxlY3QgbmctbW9kZWw9XCJteUNvbG9yXCJcbiAgICAgICAgICAgICAgICAgIG5nLW9wdGlvbnM9XCJjb2xvci5uYW1lIGdyb3VwIGJ5IGNvbG9yLnNoYWRlIGRpc2FibGUgd2hlbiBjb2xvci5ub3RBbk9wdGlvbiBmb3IgY29sb3IgaW4gY29sb3JzXCI+XG4gICAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgICA8L2xhYmVsPjxici8+XG5cblxuXG4gICAgICAgICAgU2VsZWN0IDxidXR0b24gbmctY2xpY2s9XCJteUNvbG9yID0geyBuYW1lOidub3QgaW4gbGlzdCcsIHNoYWRlOiAnb3RoZXInIH1cIj5ib2d1czwvYnV0dG9uPi5cbiAgICAgICAgICA8YnIvPlxuICAgICAgICAgIDxoci8+XG4gICAgICAgICAgQ3VycmVudGx5IHNlbGVjdGVkOiB7eyB7c2VsZWN0ZWRfY29sb3I6bXlDb2xvcn0gfX1cbiAgICAgICAgICA8ZGl2IHN0eWxlPVwiYm9yZGVyOnNvbGlkIDFweCBibGFjazsgaGVpZ2h0OjIwcHhcIlxuICAgICAgICAgICAgICAgbmctc3R5bGU9XCJ7J2JhY2tncm91bmQtY29sb3InOm15Q29sb3IubmFtZX1cIj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2ZpbGU+XG4gICAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nLW9wdGlvbnMnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygne3NlbGVjdGVkX2NvbG9yOm15Q29sb3J9JykpLmdldFRleHQoKSkudG9NYXRjaCgncmVkJyk7XG4gICAgICAgICAgIGVsZW1lbnQuYWxsKGJ5Lm1vZGVsKCdteUNvbG9yJykpLmZpcnN0KCkuY2xpY2soKTtcbiAgICAgICAgICAgZWxlbWVudC5hbGwoYnkuY3NzKCdzZWxlY3RbbmctbW9kZWw9XCJteUNvbG9yXCJdIG9wdGlvbicpKS5maXJzdCgpLmNsaWNrKCk7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpteUNvbG9yfScpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJ2JsYWNrJyk7XG4gICAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCcubnVsbGFibGUgc2VsZWN0W25nLW1vZGVsPVwibXlDb2xvclwiXScpKS5jbGljaygpO1xuICAgICAgICAgICBlbGVtZW50LmFsbChieS5jc3MoJy5udWxsYWJsZSBzZWxlY3RbbmctbW9kZWw9XCJteUNvbG9yXCJdIG9wdGlvbicpKS5maXJzdCgpLmNsaWNrKCk7XG4gICAgICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3tzZWxlY3RlZF9jb2xvcjpteUNvbG9yfScpKS5nZXRUZXh0KCkpLnRvTWF0Y2goJ251bGwnKTtcbiAgICAgICAgIH0pO1xuICAgICAgPC9maWxlPlxuICAgIDwvZXhhbXBsZT5cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4vLyAgICAgICAgICAgICAgICAgICAgIC8vMDAwMDExMTExMTExMTEwMDAwMDAwMDAwMDIyMjIyMjIyMjIwMDAwMDAwMDAwMDAwMDAwMDAwMDAzMzMzMzMzMzMzMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDQ0NDQ0NDQ0NDQ0MDAwMDAwMDAwMDAwMDU1NTU1NTU1NTU1NTUwMDAwMDAwMDA2NjY2NjY2NjY2NjY2MDAwMDAwMDc3Nzc3Nzc3Nzc3NzcwMDAwMDAwMDAwMDAwMDA4ODg4ODg4ODg4MDAwMDAwMDAwMDAwMDAwMDAwMDk5OTk5OTk5OTlcbnZhciBOR19PUFRJT05TX1JFR0VYUCA9IC9eXFxzKihbXFxzXFxTXSs/KSg/Olxccythc1xccysoW1xcc1xcU10rPykpPyg/Olxccytncm91cFxccytieVxccysoW1xcc1xcU10rPykpPyg/OlxccytkaXNhYmxlXFxzK3doZW5cXHMrKFtcXHNcXFNdKz8pKT9cXHMrZm9yXFxzKyg/OihbJFxcd11bJFxcd10qKXwoPzpcXChcXHMqKFskXFx3XVskXFx3XSopXFxzKixcXHMqKFskXFx3XVskXFx3XSopXFxzKlxcKSkpXFxzK2luXFxzKyhbXFxzXFxTXSs/KSg/Olxccyt0cmFja1xccytieVxccysoW1xcc1xcU10rPykpPyQvO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gMTogdmFsdWUgZXhwcmVzc2lvbiAodmFsdWVGbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDI6IGxhYmVsIGV4cHJlc3Npb24gKGRpc3BsYXlGbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDM6IGdyb3VwIGJ5IGV4cHJlc3Npb24gKGdyb3VwQnlGbilcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIDQ6IGRpc2FibGUgd2hlbiBleHByZXNzaW9uIChkaXNhYmxlV2hlbkZuKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gNTogYXJyYXkgaXRlbSB2YXJpYWJsZSBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA2OiBvYmplY3QgaXRlbSBrZXkgdmFyaWFibGUgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gNzogb2JqZWN0IGl0ZW0gdmFsdWUgdmFyaWFibGUgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gODogY29sbGVjdGlvbiBleHByZXNzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyA5OiB0cmFjayBieSBleHByZXNzaW9uXG4vKiBlc2xpbnQtZW5hYmxlICovXG5cblxudmFyIG5nT3B0aW9uc0RpcmVjdGl2ZSA9IFsnJGNvbXBpbGUnLCAnJGRvY3VtZW50JywgJyRwYXJzZScsIGZ1bmN0aW9uKCRjb21waWxlLCAkZG9jdW1lbnQsICRwYXJzZSkge1xuXG4gIGZ1bmN0aW9uIHBhcnNlT3B0aW9uc0V4cHJlc3Npb24ob3B0aW9uc0V4cCwgc2VsZWN0RWxlbWVudCwgc2NvcGUpIHtcblxuICAgIHZhciBtYXRjaCA9IG9wdGlvbnNFeHAubWF0Y2goTkdfT1BUSU9OU19SRUdFWFApO1xuICAgIGlmICghKG1hdGNoKSkge1xuICAgICAgdGhyb3cgbmdPcHRpb25zTWluRXJyKCdpZXhwJyxcbiAgICAgICAgJ0V4cGVjdGVkIGV4cHJlc3Npb24gaW4gZm9ybSBvZiAnICtcbiAgICAgICAgJ1xcJ19zZWxlY3RfIChhcyBfbGFiZWxfKT8gZm9yIChfa2V5XywpP192YWx1ZV8gaW4gX2NvbGxlY3Rpb25fXFwnJyArXG4gICAgICAgICcgYnV0IGdvdCBcXCd7MH1cXCcuIEVsZW1lbnQ6IHsxfScsXG4gICAgICAgIG9wdGlvbnNFeHAsIHN0YXJ0aW5nVGFnKHNlbGVjdEVsZW1lbnQpKTtcbiAgICB9XG5cbiAgICAvLyBFeHRyYWN0IHRoZSBwYXJ0cyBmcm9tIHRoZSBuZ09wdGlvbnMgZXhwcmVzc2lvblxuXG4gICAgLy8gVGhlIHZhcmlhYmxlIG5hbWUgZm9yIHRoZSB2YWx1ZSBvZiB0aGUgaXRlbSBpbiB0aGUgY29sbGVjdGlvblxuICAgIHZhciB2YWx1ZU5hbWUgPSBtYXRjaFs1XSB8fCBtYXRjaFs3XTtcbiAgICAvLyBUaGUgdmFyaWFibGUgbmFtZSBmb3IgdGhlIGtleSBvZiB0aGUgaXRlbSBpbiB0aGUgY29sbGVjdGlvblxuICAgIHZhciBrZXlOYW1lID0gbWF0Y2hbNl07XG5cbiAgICAvLyBBbiBleHByZXNzaW9uIHRoYXQgZ2VuZXJhdGVzIHRoZSB2aWV3VmFsdWUgZm9yIGFuIG9wdGlvbiBpZiB0aGVyZSBpcyBhIGxhYmVsIGV4cHJlc3Npb25cbiAgICB2YXIgc2VsZWN0QXMgPSAvIGFzIC8udGVzdChtYXRjaFswXSkgJiYgbWF0Y2hbMV07XG4gICAgLy8gQW4gZXhwcmVzc2lvbiB0aGF0IGlzIHVzZWQgdG8gdHJhY2sgdGhlIGlkIG9mIGVhY2ggb2JqZWN0IGluIHRoZSBvcHRpb25zIGNvbGxlY3Rpb25cbiAgICB2YXIgdHJhY2tCeSA9IG1hdGNoWzldO1xuICAgIC8vIEFuIGV4cHJlc3Npb24gdGhhdCBnZW5lcmF0ZXMgdGhlIHZpZXdWYWx1ZSBmb3IgYW4gb3B0aW9uIGlmIHRoZXJlIGlzIG5vIGxhYmVsIGV4cHJlc3Npb25cbiAgICB2YXIgdmFsdWVGbiA9ICRwYXJzZShtYXRjaFsyXSA/IG1hdGNoWzFdIDogdmFsdWVOYW1lKTtcbiAgICB2YXIgc2VsZWN0QXNGbiA9IHNlbGVjdEFzICYmICRwYXJzZShzZWxlY3RBcyk7XG4gICAgdmFyIHZpZXdWYWx1ZUZuID0gc2VsZWN0QXNGbiB8fCB2YWx1ZUZuO1xuICAgIHZhciB0cmFja0J5Rm4gPSB0cmFja0J5ICYmICRwYXJzZSh0cmFja0J5KTtcblxuICAgIC8vIEdldCB0aGUgdmFsdWUgYnkgd2hpY2ggd2UgYXJlIGdvaW5nIHRvIHRyYWNrIHRoZSBvcHRpb25cbiAgICAvLyBpZiB3ZSBoYXZlIGEgdHJhY2tGbiB0aGVuIHVzZSB0aGF0IChwYXNzaW5nIHNjb3BlIGFuZCBsb2NhbHMpXG4gICAgLy8gb3RoZXJ3aXNlIGp1c3QgaGFzaCB0aGUgZ2l2ZW4gdmlld1ZhbHVlXG4gICAgdmFyIGdldFRyYWNrQnlWYWx1ZUZuID0gdHJhY2tCeSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbih2YWx1ZSwgbG9jYWxzKSB7IHJldHVybiB0cmFja0J5Rm4oc2NvcGUsIGxvY2Fscyk7IH0gOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZ2V0SGFzaE9mVmFsdWUodmFsdWUpIHsgcmV0dXJuIGhhc2hLZXkodmFsdWUpOyB9O1xuICAgIHZhciBnZXRUcmFja0J5VmFsdWUgPSBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICByZXR1cm4gZ2V0VHJhY2tCeVZhbHVlRm4odmFsdWUsIGdldExvY2Fscyh2YWx1ZSwga2V5KSk7XG4gICAgfTtcblxuICAgIHZhciBkaXNwbGF5Rm4gPSAkcGFyc2UobWF0Y2hbMl0gfHwgbWF0Y2hbMV0pO1xuICAgIHZhciBncm91cEJ5Rm4gPSAkcGFyc2UobWF0Y2hbM10gfHwgJycpO1xuICAgIHZhciBkaXNhYmxlV2hlbkZuID0gJHBhcnNlKG1hdGNoWzRdIHx8ICcnKTtcbiAgICB2YXIgdmFsdWVzRm4gPSAkcGFyc2UobWF0Y2hbOF0pO1xuXG4gICAgdmFyIGxvY2FscyA9IHt9O1xuICAgIHZhciBnZXRMb2NhbHMgPSBrZXlOYW1lID8gZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgbG9jYWxzW2tleU5hbWVdID0ga2V5O1xuICAgICAgbG9jYWxzW3ZhbHVlTmFtZV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiBsb2NhbHM7XG4gICAgfSA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICBsb2NhbHNbdmFsdWVOYW1lXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIGxvY2FscztcbiAgICB9O1xuXG5cbiAgICBmdW5jdGlvbiBPcHRpb24oc2VsZWN0VmFsdWUsIHZpZXdWYWx1ZSwgbGFiZWwsIGdyb3VwLCBkaXNhYmxlZCkge1xuICAgICAgdGhpcy5zZWxlY3RWYWx1ZSA9IHNlbGVjdFZhbHVlO1xuICAgICAgdGhpcy52aWV3VmFsdWUgPSB2aWV3VmFsdWU7XG4gICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XG4gICAgICB0aGlzLmdyb3VwID0gZ3JvdXA7XG4gICAgICB0aGlzLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0T3B0aW9uVmFsdWVzS2V5cyhvcHRpb25WYWx1ZXMpIHtcbiAgICAgIHZhciBvcHRpb25WYWx1ZXNLZXlzO1xuXG4gICAgICBpZiAoIWtleU5hbWUgJiYgaXNBcnJheUxpa2Uob3B0aW9uVmFsdWVzKSkge1xuICAgICAgICBvcHRpb25WYWx1ZXNLZXlzID0gb3B0aW9uVmFsdWVzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaWYgb2JqZWN0LCBleHRyYWN0IGtleXMsIGluIGVudW1lcmF0aW9uIG9yZGVyLCB1bnNvcnRlZFxuICAgICAgICBvcHRpb25WYWx1ZXNLZXlzID0gW107XG4gICAgICAgIGZvciAodmFyIGl0ZW1LZXkgaW4gb3B0aW9uVmFsdWVzKSB7XG4gICAgICAgICAgaWYgKG9wdGlvblZhbHVlcy5oYXNPd25Qcm9wZXJ0eShpdGVtS2V5KSAmJiBpdGVtS2V5LmNoYXJBdCgwKSAhPT0gJyQnKSB7XG4gICAgICAgICAgICBvcHRpb25WYWx1ZXNLZXlzLnB1c2goaXRlbUtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gb3B0aW9uVmFsdWVzS2V5cztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHJhY2tCeTogdHJhY2tCeSxcbiAgICAgIGdldFRyYWNrQnlWYWx1ZTogZ2V0VHJhY2tCeVZhbHVlLFxuICAgICAgZ2V0V2F0Y2hhYmxlczogJHBhcnNlKHZhbHVlc0ZuLCBmdW5jdGlvbihvcHRpb25WYWx1ZXMpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGEgY29sbGVjdGlvbiBvZiB0aGluZ3MgdGhhdCB3ZSB3b3VsZCBsaWtlIHRvIHdhdGNoICh3YXRjaGVkQXJyYXkpXG4gICAgICAgIC8vIHNvIHRoYXQgdGhleSBjYW4gYWxsIGJlIHdhdGNoZWQgdXNpbmcgYSBzaW5nbGUgJHdhdGNoQ29sbGVjdGlvblxuICAgICAgICAvLyB0aGF0IG9ubHkgcnVucyB0aGUgaGFuZGxlciBvbmNlIGlmIGFueXRoaW5nIGNoYW5nZXNcbiAgICAgICAgdmFyIHdhdGNoZWRBcnJheSA9IFtdO1xuICAgICAgICBvcHRpb25WYWx1ZXMgPSBvcHRpb25WYWx1ZXMgfHwgW107XG5cbiAgICAgICAgdmFyIG9wdGlvblZhbHVlc0tleXMgPSBnZXRPcHRpb25WYWx1ZXNLZXlzKG9wdGlvblZhbHVlcyk7XG4gICAgICAgIHZhciBvcHRpb25WYWx1ZXNMZW5ndGggPSBvcHRpb25WYWx1ZXNLZXlzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IG9wdGlvblZhbHVlc0xlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIHZhciBrZXkgPSAob3B0aW9uVmFsdWVzID09PSBvcHRpb25WYWx1ZXNLZXlzKSA/IGluZGV4IDogb3B0aW9uVmFsdWVzS2V5c1tpbmRleF07XG4gICAgICAgICAgdmFyIHZhbHVlID0gb3B0aW9uVmFsdWVzW2tleV07XG5cbiAgICAgICAgICB2YXIgbG9jYWxzID0gZ2V0TG9jYWxzKHZhbHVlLCBrZXkpO1xuICAgICAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IGdldFRyYWNrQnlWYWx1ZUZuKHZhbHVlLCBsb2NhbHMpO1xuICAgICAgICAgIHdhdGNoZWRBcnJheS5wdXNoKHNlbGVjdFZhbHVlKTtcblxuICAgICAgICAgIC8vIE9ubHkgbmVlZCB0byB3YXRjaCB0aGUgZGlzcGxheUZuIGlmIHRoZXJlIGlzIGEgc3BlY2lmaWMgbGFiZWwgZXhwcmVzc2lvblxuICAgICAgICAgIGlmIChtYXRjaFsyXSB8fCBtYXRjaFsxXSkge1xuICAgICAgICAgICAgdmFyIGxhYmVsID0gZGlzcGxheUZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgICAgd2F0Y2hlZEFycmF5LnB1c2gobGFiZWwpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIE9ubHkgbmVlZCB0byB3YXRjaCB0aGUgZGlzYWJsZVdoZW5GbiBpZiB0aGVyZSBpcyBhIHNwZWNpZmljIGRpc2FibGUgZXhwcmVzc2lvblxuICAgICAgICAgIGlmIChtYXRjaFs0XSkge1xuICAgICAgICAgICAgdmFyIGRpc2FibGVXaGVuID0gZGlzYWJsZVdoZW5GbihzY29wZSwgbG9jYWxzKTtcbiAgICAgICAgICAgIHdhdGNoZWRBcnJheS5wdXNoKGRpc2FibGVXaGVuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdhdGNoZWRBcnJheTtcbiAgICAgIH0pLFxuXG4gICAgICBnZXRPcHRpb25zOiBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgb3B0aW9uSXRlbXMgPSBbXTtcbiAgICAgICAgdmFyIHNlbGVjdFZhbHVlTWFwID0ge307XG5cbiAgICAgICAgLy8gVGhlIG9wdGlvbiB2YWx1ZXMgd2VyZSBhbHJlYWR5IGNvbXB1dGVkIGluIHRoZSBgZ2V0V2F0Y2hhYmxlc2AgZm4sXG4gICAgICAgIC8vIHdoaWNoIG11c3QgaGF2ZSBiZWVuIGNhbGxlZCB0byB0cmlnZ2VyIGBnZXRPcHRpb25zYFxuICAgICAgICB2YXIgb3B0aW9uVmFsdWVzID0gdmFsdWVzRm4oc2NvcGUpIHx8IFtdO1xuICAgICAgICB2YXIgb3B0aW9uVmFsdWVzS2V5cyA9IGdldE9wdGlvblZhbHVlc0tleXMob3B0aW9uVmFsdWVzKTtcbiAgICAgICAgdmFyIG9wdGlvblZhbHVlc0xlbmd0aCA9IG9wdGlvblZhbHVlc0tleXMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBvcHRpb25WYWx1ZXNMZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICB2YXIga2V5ID0gKG9wdGlvblZhbHVlcyA9PT0gb3B0aW9uVmFsdWVzS2V5cykgPyBpbmRleCA6IG9wdGlvblZhbHVlc0tleXNbaW5kZXhdO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IG9wdGlvblZhbHVlc1trZXldO1xuICAgICAgICAgIHZhciBsb2NhbHMgPSBnZXRMb2NhbHModmFsdWUsIGtleSk7XG4gICAgICAgICAgdmFyIHZpZXdWYWx1ZSA9IHZpZXdWYWx1ZUZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgIHZhciBzZWxlY3RWYWx1ZSA9IGdldFRyYWNrQnlWYWx1ZUZuKHZpZXdWYWx1ZSwgbG9jYWxzKTtcbiAgICAgICAgICB2YXIgbGFiZWwgPSBkaXNwbGF5Rm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgdmFyIGdyb3VwID0gZ3JvdXBCeUZuKHNjb3BlLCBsb2NhbHMpO1xuICAgICAgICAgIHZhciBkaXNhYmxlZCA9IGRpc2FibGVXaGVuRm4oc2NvcGUsIGxvY2Fscyk7XG4gICAgICAgICAgdmFyIG9wdGlvbkl0ZW0gPSBuZXcgT3B0aW9uKHNlbGVjdFZhbHVlLCB2aWV3VmFsdWUsIGxhYmVsLCBncm91cCwgZGlzYWJsZWQpO1xuXG4gICAgICAgICAgb3B0aW9uSXRlbXMucHVzaChvcHRpb25JdGVtKTtcbiAgICAgICAgICBzZWxlY3RWYWx1ZU1hcFtzZWxlY3RWYWx1ZV0gPSBvcHRpb25JdGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpdGVtczogb3B0aW9uSXRlbXMsXG4gICAgICAgICAgc2VsZWN0VmFsdWVNYXA6IHNlbGVjdFZhbHVlTWFwLFxuICAgICAgICAgIGdldE9wdGlvbkZyb21WaWV3VmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VsZWN0VmFsdWVNYXBbZ2V0VHJhY2tCeVZhbHVlKHZhbHVlKV07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBnZXRWaWV3VmFsdWVGcm9tT3B0aW9uOiBmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSB2aWV3VmFsdWUgY291bGQgYmUgYW4gb2JqZWN0IHRoYXQgbWF5IGJlIG11dGF0ZWQgYnkgdGhlIGFwcGxpY2F0aW9uLFxuICAgICAgICAgICAgLy8gd2UgbmVlZCB0byBtYWtlIGEgY29weSBhbmQgbm90IHJldHVybiB0aGUgcmVmZXJlbmNlIHRvIHRoZSB2YWx1ZSBvbiB0aGUgb3B0aW9uLlxuICAgICAgICAgICAgcmV0dXJuIHRyYWNrQnkgPyBjb3B5KG9wdGlvbi52aWV3VmFsdWUpIDogb3B0aW9uLnZpZXdWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG5cbiAgLy8gU3VwcG9ydDogSUUgOSBvbmx5XG4gIC8vIFdlIGNhbid0IGp1c3QganFMaXRlKCc8b3B0aW9uPicpIHNpbmNlIGpxTGl0ZSBpcyBub3Qgc21hcnQgZW5vdWdoXG4gIC8vIHRvIGNyZWF0ZSBpdCBpbiA8c2VsZWN0PiBhbmQgSUUgYmFyZnMgb3RoZXJ3aXNlLlxuICB2YXIgb3B0aW9uVGVtcGxhdGUgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyksXG4gICAgICBvcHRHcm91cFRlbXBsYXRlID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGdyb3VwJyk7XG5cbiAgICBmdW5jdGlvbiBuZ09wdGlvbnNQb3N0TGluayhzY29wZSwgc2VsZWN0RWxlbWVudCwgYXR0ciwgY3RybHMpIHtcblxuICAgICAgdmFyIHNlbGVjdEN0cmwgPSBjdHJsc1swXTtcbiAgICAgIHZhciBuZ01vZGVsQ3RybCA9IGN0cmxzWzFdO1xuICAgICAgdmFyIG11bHRpcGxlID0gYXR0ci5tdWx0aXBsZTtcblxuICAgICAgLy8gVGhlIGVtcHR5T3B0aW9uIGFsbG93cyB0aGUgYXBwbGljYXRpb24gZGV2ZWxvcGVyIHRvIHByb3ZpZGUgdGhlaXIgb3duIGN1c3RvbSBcImVtcHR5XCJcbiAgICAgIC8vIG9wdGlvbiB3aGVuIHRoZSB2aWV3VmFsdWUgZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSBvcHRpb24gdmFsdWVzLlxuICAgICAgZm9yICh2YXIgaSA9IDAsIGNoaWxkcmVuID0gc2VsZWN0RWxlbWVudC5jaGlsZHJlbigpLCBpaSA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGlpOyBpKyspIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuW2ldLnZhbHVlID09PSAnJykge1xuICAgICAgICAgIHNlbGVjdEN0cmwuaGFzRW1wdHlPcHRpb24gPSB0cnVlO1xuICAgICAgICAgIHNlbGVjdEN0cmwuZW1wdHlPcHRpb24gPSBjaGlsZHJlbi5lcShpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgZW1wdHkgb3B0aW9uIHdpbGwgYmUgY29tcGlsZWQgYW5kIHJlbmRlcmVkIGJlZm9yZSB3ZSBmaXJzdCBnZW5lcmF0ZSB0aGUgb3B0aW9uc1xuICAgICAgc2VsZWN0RWxlbWVudC5lbXB0eSgpO1xuXG4gICAgICB2YXIgcHJvdmlkZWRFbXB0eU9wdGlvbiA9ICEhc2VsZWN0Q3RybC5lbXB0eU9wdGlvbjtcblxuICAgICAgdmFyIHVua25vd25PcHRpb24gPSBqcUxpdGUob3B0aW9uVGVtcGxhdGUuY2xvbmVOb2RlKGZhbHNlKSk7XG4gICAgICB1bmtub3duT3B0aW9uLnZhbCgnPycpO1xuXG4gICAgICB2YXIgb3B0aW9ucztcbiAgICAgIHZhciBuZ09wdGlvbnMgPSBwYXJzZU9wdGlvbnNFeHByZXNzaW9uKGF0dHIubmdPcHRpb25zLCBzZWxlY3RFbGVtZW50LCBzY29wZSk7XG4gICAgICAvLyBUaGlzIHN0b3JlcyB0aGUgbmV3bHkgY3JlYXRlZCBvcHRpb25zIGJlZm9yZSB0aGV5IGFyZSBhcHBlbmRlZCB0byB0aGUgc2VsZWN0LlxuICAgICAgLy8gU2luY2UgdGhlIGNvbnRlbnRzIGFyZSByZW1vdmVkIGZyb20gdGhlIGZyYWdtZW50IHdoZW4gaXQgaXMgYXBwZW5kZWQsXG4gICAgICAvLyB3ZSBvbmx5IG5lZWQgdG8gY3JlYXRlIGl0IG9uY2UuXG4gICAgICB2YXIgbGlzdEZyYWdtZW50ID0gJGRvY3VtZW50WzBdLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcblxuICAgICAgLy8gT3ZlcndyaXRlIHRoZSBpbXBsZW1lbnRhdGlvbi4gbmdPcHRpb25zIGRvZXNuJ3QgdXNlIGhhc2hlc1xuICAgICAgc2VsZWN0Q3RybC5nZW5lcmF0ZVVua25vd25PcHRpb25WYWx1ZSA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICByZXR1cm4gJz8nO1xuICAgICAgfTtcblxuICAgICAgLy8gVXBkYXRlIHRoZSBjb250cm9sbGVyIG1ldGhvZHMgZm9yIG11bHRpcGxlIHNlbGVjdGFibGUgb3B0aW9uc1xuICAgICAgaWYgKCFtdWx0aXBsZSkge1xuXG4gICAgICAgIHNlbGVjdEN0cmwud3JpdGVWYWx1ZSA9IGZ1bmN0aW9uIHdyaXRlTmdPcHRpb25zVmFsdWUodmFsdWUpIHtcbiAgICAgICAgICAvLyBUaGUgb3B0aW9ucyBtaWdodCBub3QgYmUgZGVmaW5lZCB5ZXQgd2hlbiBuZ01vZGVsIHRyaWVzIHRvIHJlbmRlclxuICAgICAgICAgIGlmICghb3B0aW9ucykgcmV0dXJuO1xuXG4gICAgICAgICAgdmFyIHNlbGVjdGVkT3B0aW9uID0gc2VsZWN0RWxlbWVudFswXS5vcHRpb25zW3NlbGVjdEVsZW1lbnRbMF0uc2VsZWN0ZWRJbmRleF07XG4gICAgICAgICAgdmFyIG9wdGlvbiA9IG9wdGlvbnMuZ2V0T3B0aW9uRnJvbVZpZXdWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgICAgICAvLyBNYWtlIHN1cmUgdG8gcmVtb3ZlIHRoZSBzZWxlY3RlZCBhdHRyaWJ1dGUgZnJvbSB0aGUgcHJldmlvdXNseSBzZWxlY3RlZCBvcHRpb25cbiAgICAgICAgICAvLyBPdGhlcndpc2UsIHNjcmVlbiByZWFkZXJzIG1pZ2h0IGdldCBjb25mdXNlZFxuICAgICAgICAgIGlmIChzZWxlY3RlZE9wdGlvbikgc2VsZWN0ZWRPcHRpb24ucmVtb3ZlQXR0cmlidXRlKCdzZWxlY3RlZCcpO1xuXG4gICAgICAgICAgaWYgKG9wdGlvbikge1xuICAgICAgICAgICAgLy8gRG9uJ3QgdXBkYXRlIHRoZSBvcHRpb24gd2hlbiBpdCBpcyBhbHJlYWR5IHNlbGVjdGVkLlxuICAgICAgICAgICAgLy8gRm9yIGV4YW1wbGUsIHRoZSBicm93c2VyIHdpbGwgc2VsZWN0IHRoZSBmaXJzdCBvcHRpb24gYnkgZGVmYXVsdC4gSW4gdGhhdCBjYXNlLFxuICAgICAgICAgICAgLy8gbW9zdCBwcm9wZXJ0aWVzIGFyZSBzZXQgYXV0b21hdGljYWxseSAtIGV4Y2VwdCB0aGUgYHNlbGVjdGVkYCBhdHRyaWJ1dGUsIHdoaWNoIHdlXG4gICAgICAgICAgICAvLyBzZXQgYWx3YXlzXG5cbiAgICAgICAgICAgIGlmIChzZWxlY3RFbGVtZW50WzBdLnZhbHVlICE9PSBvcHRpb24uc2VsZWN0VmFsdWUpIHtcbiAgICAgICAgICAgICAgc2VsZWN0Q3RybC5yZW1vdmVVbmtub3duT3B0aW9uKCk7XG5cbiAgICAgICAgICAgICAgc2VsZWN0RWxlbWVudFswXS52YWx1ZSA9IG9wdGlvbi5zZWxlY3RWYWx1ZTtcbiAgICAgICAgICAgICAgb3B0aW9uLmVsZW1lbnQuc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb24uZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlbGVjdEN0cmwuc2VsZWN0VW5rbm93bk9yRW1wdHlPcHRpb24odmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBzZWxlY3RDdHJsLnJlYWRWYWx1ZSA9IGZ1bmN0aW9uIHJlYWROZ09wdGlvbnNWYWx1ZSgpIHtcblxuICAgICAgICAgIHZhciBzZWxlY3RlZE9wdGlvbiA9IG9wdGlvbnMuc2VsZWN0VmFsdWVNYXBbc2VsZWN0RWxlbWVudC52YWwoKV07XG5cbiAgICAgICAgICBpZiAoc2VsZWN0ZWRPcHRpb24gJiYgIXNlbGVjdGVkT3B0aW9uLmRpc2FibGVkKSB7XG4gICAgICAgICAgICBzZWxlY3RDdHJsLnVuc2VsZWN0RW1wdHlPcHRpb24oKTtcbiAgICAgICAgICAgIHNlbGVjdEN0cmwucmVtb3ZlVW5rbm93bk9wdGlvbigpO1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZ2V0Vmlld1ZhbHVlRnJvbU9wdGlvbihzZWxlY3RlZE9wdGlvbik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIElmIHdlIGFyZSB1c2luZyBgdHJhY2sgYnlgIHRoZW4gd2UgbXVzdCB3YXRjaCB0aGUgdHJhY2tlZCB2YWx1ZSBvbiB0aGUgbW9kZWxcbiAgICAgICAgLy8gc2luY2UgbmdNb2RlbCBvbmx5IHdhdGNoZXMgZm9yIG9iamVjdCBpZGVudGl0eSBjaGFuZ2VcbiAgICAgICAgLy8gRklYTUU6IFdoZW4gYSB1c2VyIHNlbGVjdHMgYW4gb3B0aW9uLCB0aGlzIHdhdGNoIHdpbGwgZmlyZSBuZWVkbGVzc2x5XG4gICAgICAgIGlmIChuZ09wdGlvbnMudHJhY2tCeSkge1xuICAgICAgICAgIHNjb3BlLiR3YXRjaChcbiAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyByZXR1cm4gbmdPcHRpb25zLmdldFRyYWNrQnlWYWx1ZShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKTsgfSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7IH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgc2VsZWN0Q3RybC53cml0ZVZhbHVlID0gZnVuY3Rpb24gd3JpdGVOZ09wdGlvbnNNdWx0aXBsZSh2YWx1ZXMpIHtcbiAgICAgICAgICAvLyBUaGUgb3B0aW9ucyBtaWdodCBub3QgYmUgZGVmaW5lZCB5ZXQgd2hlbiBuZ01vZGVsIHRyaWVzIHRvIHJlbmRlclxuICAgICAgICAgIGlmICghb3B0aW9ucykgcmV0dXJuO1xuXG4gICAgICAgICAgLy8gT25seSBzZXQgYDxvcHRpb24+LnNlbGVjdGVkYCBpZiBuZWNlc3NhcnksIGluIG9yZGVyIHRvIHByZXZlbnQgc29tZSBicm93c2VycyBmcm9tXG4gICAgICAgICAgLy8gc2Nyb2xsaW5nIHRvIGA8b3B0aW9uPmAgZWxlbWVudHMgdGhhdCBhcmUgb3V0c2lkZSB0aGUgYDxzZWxlY3Q+YCBlbGVtZW50J3Mgdmlld3BvcnQuXG4gICAgICAgICAgdmFyIHNlbGVjdGVkT3B0aW9ucyA9IHZhbHVlcyAmJiB2YWx1ZXMubWFwKGdldEFuZFVwZGF0ZVNlbGVjdGVkT3B0aW9uKSB8fCBbXTtcblxuICAgICAgICAgIG9wdGlvbnMuaXRlbXMuZm9yRWFjaChmdW5jdGlvbihvcHRpb24pIHtcbiAgICAgICAgICAgIGlmIChvcHRpb24uZWxlbWVudC5zZWxlY3RlZCAmJiAhaW5jbHVkZXMoc2VsZWN0ZWRPcHRpb25zLCBvcHRpb24pKSB7XG4gICAgICAgICAgICAgIG9wdGlvbi5lbGVtZW50LnNlbGVjdGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH07XG5cblxuICAgICAgICBzZWxlY3RDdHJsLnJlYWRWYWx1ZSA9IGZ1bmN0aW9uIHJlYWROZ09wdGlvbnNNdWx0aXBsZSgpIHtcbiAgICAgICAgICB2YXIgc2VsZWN0ZWRWYWx1ZXMgPSBzZWxlY3RFbGVtZW50LnZhbCgpIHx8IFtdLFxuICAgICAgICAgICAgICBzZWxlY3Rpb25zID0gW107XG5cbiAgICAgICAgICBmb3JFYWNoKHNlbGVjdGVkVmFsdWVzLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIG9wdGlvbiA9IG9wdGlvbnMuc2VsZWN0VmFsdWVNYXBbdmFsdWVdO1xuICAgICAgICAgICAgaWYgKG9wdGlvbiAmJiAhb3B0aW9uLmRpc2FibGVkKSBzZWxlY3Rpb25zLnB1c2gob3B0aW9ucy5nZXRWaWV3VmFsdWVGcm9tT3B0aW9uKG9wdGlvbikpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIHNlbGVjdGlvbnM7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSWYgd2UgYXJlIHVzaW5nIGB0cmFjayBieWAgdGhlbiB3ZSBtdXN0IHdhdGNoIHRoZXNlIHRyYWNrZWQgdmFsdWVzIG9uIHRoZSBtb2RlbFxuICAgICAgICAvLyBzaW5jZSBuZ01vZGVsIG9ubHkgd2F0Y2hlcyBmb3Igb2JqZWN0IGlkZW50aXR5IGNoYW5nZVxuICAgICAgICBpZiAobmdPcHRpb25zLnRyYWNrQnkpIHtcblxuICAgICAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoaXNBcnJheShuZ01vZGVsQ3RybC4kdmlld1ZhbHVlKSkge1xuICAgICAgICAgICAgICByZXR1cm4gbmdNb2RlbEN0cmwuJHZpZXdWYWx1ZS5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmdPcHRpb25zLmdldFRyYWNrQnlWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHByb3ZpZGVkRW1wdHlPcHRpb24pIHtcblxuICAgICAgICAvLyBjb21waWxlIHRoZSBlbGVtZW50IHNpbmNlIHRoZXJlIG1pZ2h0IGJlIGJpbmRpbmdzIGluIGl0XG4gICAgICAgICRjb21waWxlKHNlbGVjdEN0cmwuZW1wdHlPcHRpb24pKHNjb3BlKTtcblxuICAgICAgICBzZWxlY3RFbGVtZW50LnByZXBlbmQoc2VsZWN0Q3RybC5lbXB0eU9wdGlvbik7XG5cbiAgICAgICAgaWYgKHNlbGVjdEN0cmwuZW1wdHlPcHRpb25bMF0ubm9kZVR5cGUgPT09IE5PREVfVFlQRV9DT01NRU5UKSB7XG4gICAgICAgICAgLy8gVGhpcyBtZWFucyB0aGUgZW1wdHkgb3B0aW9uIGhhcyBjdXJyZW50bHkgbm8gYWN0dWFsIERPTSBub2RlLCBwcm9iYWJseSBiZWNhdXNlXG4gICAgICAgICAgLy8gaXQgaGFzIGJlZW4gbW9kaWZpZWQgYnkgYSB0cmFuc2NsdXNpb24gZGlyZWN0aXZlLlxuICAgICAgICAgIHNlbGVjdEN0cmwuaGFzRW1wdHlPcHRpb24gPSBmYWxzZTtcblxuICAgICAgICAgIC8vIFJlZGVmaW5lIHRoZSByZWdpc3Rlck9wdGlvbiBmdW5jdGlvbiwgd2hpY2ggd2lsbCBjYXRjaFxuICAgICAgICAgIC8vIG9wdGlvbnMgdGhhdCBhcmUgYWRkZWQgYnkgbmdJZiBldGMuIChyZW5kZXJpbmcgb2YgdGhlIG5vZGUgaXMgYXN5bmMgYmVjYXVzZSBvZlxuICAgICAgICAgIC8vIGxhenkgdHJhbnNjbHVzaW9uKVxuICAgICAgICAgIHNlbGVjdEN0cmwucmVnaXN0ZXJPcHRpb24gPSBmdW5jdGlvbihvcHRpb25TY29wZSwgb3B0aW9uRWwpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25FbC52YWwoKSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgc2VsZWN0Q3RybC5oYXNFbXB0eU9wdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgIHNlbGVjdEN0cmwuZW1wdHlPcHRpb24gPSBvcHRpb25FbDtcbiAgICAgICAgICAgICAgc2VsZWN0Q3RybC5lbXB0eU9wdGlvbi5yZW1vdmVDbGFzcygnbmctc2NvcGUnKTtcbiAgICAgICAgICAgICAgLy8gVGhpcyBlbnN1cmVzIHRoZSBuZXcgZW1wdHkgb3B0aW9uIGlzIHNlbGVjdGVkIGlmIHByZXZpb3VzbHkgbm8gb3B0aW9uIHdhcyBzZWxlY3RlZFxuICAgICAgICAgICAgICBuZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG5cbiAgICAgICAgICAgICAgb3B0aW9uRWwub24oJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5lZWRzUmVyZW5kZXIgPSBzZWxlY3RDdHJsLiRpc0VtcHR5T3B0aW9uU2VsZWN0ZWQoKTtcblxuICAgICAgICAgICAgICAgIHNlbGVjdEN0cmwuaGFzRW1wdHlPcHRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBzZWxlY3RDdHJsLmVtcHR5T3B0aW9uID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5lZWRzUmVyZW5kZXIpIG5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHJlbW92ZSB0aGUgY2xhc3MsIHdoaWNoIGlzIGFkZGVkIGF1dG9tYXRpY2FsbHkgYmVjYXVzZSB3ZSByZWNvbXBpbGUgdGhlIGVsZW1lbnQgYW5kIGl0XG4gICAgICAgICAgLy8gYmVjb21lcyB0aGUgY29tcGlsYXRpb24gcm9vdFxuICAgICAgICAgIHNlbGVjdEN0cmwuZW1wdHlPcHRpb24ucmVtb3ZlQ2xhc3MoJ25nLXNjb3BlJyk7XG4gICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgICAvLyBXZSB3aWxsIHJlLXJlbmRlciB0aGUgb3B0aW9uIGVsZW1lbnRzIGlmIHRoZSBvcHRpb24gdmFsdWVzIG9yIGxhYmVscyBjaGFuZ2VcbiAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24obmdPcHRpb25zLmdldFdhdGNoYWJsZXMsIHVwZGF0ZU9wdGlvbnMpO1xuXG4gICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cblxuICAgICAgZnVuY3Rpb24gYWRkT3B0aW9uRWxlbWVudChvcHRpb24sIHBhcmVudCkge1xuICAgICAgICB2YXIgb3B0aW9uRWxlbWVudCA9IG9wdGlvblRlbXBsYXRlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChvcHRpb25FbGVtZW50KTtcbiAgICAgICAgdXBkYXRlT3B0aW9uRWxlbWVudChvcHRpb24sIG9wdGlvbkVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBnZXRBbmRVcGRhdGVTZWxlY3RlZE9wdGlvbih2aWV3VmFsdWUpIHtcbiAgICAgICAgdmFyIG9wdGlvbiA9IG9wdGlvbnMuZ2V0T3B0aW9uRnJvbVZpZXdWYWx1ZSh2aWV3VmFsdWUpO1xuICAgICAgICB2YXIgZWxlbWVudCA9IG9wdGlvbiAmJiBvcHRpb24uZWxlbWVudDtcblxuICAgICAgICBpZiAoZWxlbWVudCAmJiAhZWxlbWVudC5zZWxlY3RlZCkgZWxlbWVudC5zZWxlY3RlZCA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbjtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdXBkYXRlT3B0aW9uRWxlbWVudChvcHRpb24sIGVsZW1lbnQpIHtcbiAgICAgICAgb3B0aW9uLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICBlbGVtZW50LmRpc2FibGVkID0gb3B0aW9uLmRpc2FibGVkO1xuICAgICAgICAvLyBTdXBwb3J0OiBJRSAxMSBvbmx5LCBFZGdlIDEyLTEzIG9ubHlcbiAgICAgICAgLy8gTk9URTogVGhlIGxhYmVsIG11c3QgYmUgc2V0IGJlZm9yZSB0aGUgdmFsdWUsIG90aGVyd2lzZSBJRSAxMSAmIEVkZ2UgY3JlYXRlIHVucmVzcG9uc2l2ZVxuICAgICAgICAvLyBzZWxlY3RzIGluIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcyB3aGVuIG11bHRpcGxlIHNlbGVjdHMgYXJlIG5leHQgdG8gZWFjaCBvdGhlciBhbmQgZGlzcGxheVxuICAgICAgICAvLyB0aGUgb3B0aW9uIGxpc3QgaW4gbGlzdGJveCBzdHlsZSwgaS5lLiB0aGUgc2VsZWN0IGlzIFttdWx0aXBsZV0sIG9yIHNwZWNpZmllcyBhIFtzaXplXS5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzExMzE0IGZvciBtb3JlIGluZm8uXG4gICAgICAgIC8vIFRoaXMgaXMgdW5mb3J0dW5hdGVseSB1bnRlc3RhYmxlIHdpdGggdW5pdCAvIGUyZSB0ZXN0c1xuICAgICAgICBpZiAob3B0aW9uLmxhYmVsICE9PSBlbGVtZW50LmxhYmVsKSB7XG4gICAgICAgICAgZWxlbWVudC5sYWJlbCA9IG9wdGlvbi5sYWJlbDtcbiAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gb3B0aW9uLmxhYmVsO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnQudmFsdWUgPSBvcHRpb24uc2VsZWN0VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMoKSB7XG4gICAgICAgIHZhciBwcmV2aW91c1ZhbHVlID0gb3B0aW9ucyAmJiBzZWxlY3RDdHJsLnJlYWRWYWx1ZSgpO1xuXG4gICAgICAgIC8vIFdlIG11c3QgcmVtb3ZlIGFsbCBjdXJyZW50IG9wdGlvbnMsIGJ1dCBjYW5ub3Qgc2ltcGx5IHNldCBpbm5lckhUTUwgPSBudWxsXG4gICAgICAgIC8vIHNpbmNlIHRoZSBwcm92aWRlZEVtcHR5T3B0aW9uIG1pZ2h0IGhhdmUgYW4gbmdJZiBvbiBpdCB0aGF0IGluc2VydHMgY29tbWVudHMgd2hpY2ggd2VcbiAgICAgICAgLy8gbXVzdCBwcmVzZXJ2ZS5cbiAgICAgICAgLy8gSW5zdGVhZCwgaXRlcmF0ZSBvdmVyIHRoZSBjdXJyZW50IG9wdGlvbiBlbGVtZW50cyBhbmQgcmVtb3ZlIHRoZW0gb3IgdGhlaXIgb3B0Z3JvdXBcbiAgICAgICAgLy8gcGFyZW50c1xuICAgICAgICBpZiAob3B0aW9ucykge1xuXG4gICAgICAgICAgZm9yICh2YXIgaSA9IG9wdGlvbnMuaXRlbXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHZhciBvcHRpb24gPSBvcHRpb25zLml0ZW1zW2ldO1xuICAgICAgICAgICAgaWYgKGlzRGVmaW5lZChvcHRpb24uZ3JvdXApKSB7XG4gICAgICAgICAgICAgIGpxTGl0ZVJlbW92ZShvcHRpb24uZWxlbWVudC5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGpxTGl0ZVJlbW92ZShvcHRpb24uZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucyA9IG5nT3B0aW9ucy5nZXRPcHRpb25zKCk7XG5cbiAgICAgICAgdmFyIGdyb3VwRWxlbWVudE1hcCA9IHt9O1xuXG4gICAgICAgIG9wdGlvbnMuaXRlbXMuZm9yRWFjaChmdW5jdGlvbiBhZGRPcHRpb24ob3B0aW9uKSB7XG4gICAgICAgICAgdmFyIGdyb3VwRWxlbWVudDtcblxuICAgICAgICAgIGlmIChpc0RlZmluZWQob3B0aW9uLmdyb3VwKSkge1xuXG4gICAgICAgICAgICAvLyBUaGlzIG9wdGlvbiBpcyB0byBsaXZlIGluIGEgZ3JvdXBcbiAgICAgICAgICAgIC8vIFNlZSBpZiB3ZSBoYXZlIGFscmVhZHkgY3JlYXRlZCB0aGlzIGdyb3VwXG4gICAgICAgICAgICBncm91cEVsZW1lbnQgPSBncm91cEVsZW1lbnRNYXBbb3B0aW9uLmdyb3VwXTtcblxuICAgICAgICAgICAgaWYgKCFncm91cEVsZW1lbnQpIHtcblxuICAgICAgICAgICAgICBncm91cEVsZW1lbnQgPSBvcHRHcm91cFRlbXBsYXRlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgICAgICAgIGxpc3RGcmFnbWVudC5hcHBlbmRDaGlsZChncm91cEVsZW1lbnQpO1xuXG4gICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgbGFiZWwgb24gdGhlIGdyb3VwIGVsZW1lbnRcbiAgICAgICAgICAgICAgLy8gXCJudWxsXCIgaXMgc3BlY2lhbCBjYXNlZCBiZWNhdXNlIG9mIFNhZmFyaVxuICAgICAgICAgICAgICBncm91cEVsZW1lbnQubGFiZWwgPSBvcHRpb24uZ3JvdXAgPT09IG51bGwgPyAnbnVsbCcgOiBvcHRpb24uZ3JvdXA7XG5cbiAgICAgICAgICAgICAgLy8gU3RvcmUgaXQgZm9yIHVzZSBsYXRlclxuICAgICAgICAgICAgICBncm91cEVsZW1lbnRNYXBbb3B0aW9uLmdyb3VwXSA9IGdyb3VwRWxlbWVudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWRkT3B0aW9uRWxlbWVudChvcHRpb24sIGdyb3VwRWxlbWVudCk7XG5cbiAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAvLyBUaGlzIG9wdGlvbiBpcyBub3QgaW4gYSBncm91cFxuICAgICAgICAgICAgYWRkT3B0aW9uRWxlbWVudChvcHRpb24sIGxpc3RGcmFnbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBzZWxlY3RFbGVtZW50WzBdLmFwcGVuZENoaWxkKGxpc3RGcmFnbWVudCk7XG5cbiAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuXG4gICAgICAgIC8vIENoZWNrIHRvIHNlZSBpZiB0aGUgdmFsdWUgaGFzIGNoYW5nZWQgZHVlIHRvIHRoZSB1cGRhdGUgdG8gdGhlIG9wdGlvbnNcbiAgICAgICAgaWYgKCFuZ01vZGVsQ3RybC4kaXNFbXB0eShwcmV2aW91c1ZhbHVlKSkge1xuICAgICAgICAgIHZhciBuZXh0VmFsdWUgPSBzZWxlY3RDdHJsLnJlYWRWYWx1ZSgpO1xuICAgICAgICAgIHZhciBpc05vdFByaW1pdGl2ZSA9IG5nT3B0aW9ucy50cmFja0J5IHx8IG11bHRpcGxlO1xuICAgICAgICAgIGlmIChpc05vdFByaW1pdGl2ZSA/ICFlcXVhbHMocHJldmlvdXNWYWx1ZSwgbmV4dFZhbHVlKSA6IHByZXZpb3VzVmFsdWUgIT09IG5leHRWYWx1ZSkge1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHNldFZpZXdWYWx1ZShuZXh0VmFsdWUpO1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgIHJlcXVpcmU6IFsnc2VsZWN0JywgJ25nTW9kZWwnXSxcbiAgICBsaW5rOiB7XG4gICAgICBwcmU6IGZ1bmN0aW9uIG5nT3B0aW9uc1ByZUxpbmsoc2NvcGUsIHNlbGVjdEVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgICAgIC8vIERlYWN0aXZhdGUgdGhlIFNlbGVjdENvbnRyb2xsZXIucmVnaXN0ZXIgbWV0aG9kIHRvIHByZXZlbnRcbiAgICAgICAgLy8gb3B0aW9uIGRpcmVjdGl2ZXMgZnJvbSBhY2NpZGVudGFsbHkgcmVnaXN0ZXJpbmcgdGhlbXNlbHZlc1xuICAgICAgICAvLyAoYW5kIHVud2FudGVkICRkZXN0cm95IGhhbmRsZXJzIGV0Yy4pXG4gICAgICAgIGN0cmxzWzBdLnJlZ2lzdGVyT3B0aW9uID0gbm9vcDtcbiAgICAgIH0sXG4gICAgICBwb3N0OiBuZ09wdGlvbnNQb3N0TGlua1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUGx1cmFsaXplXG4gKiBAcmVzdHJpY3QgRUFcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGBuZ1BsdXJhbGl6ZWAgaXMgYSBkaXJlY3RpdmUgdGhhdCBkaXNwbGF5cyBtZXNzYWdlcyBhY2NvcmRpbmcgdG8gZW4tVVMgbG9jYWxpemF0aW9uIHJ1bGVzLlxuICogVGhlc2UgcnVsZXMgYXJlIGJ1bmRsZWQgd2l0aCBhbmd1bGFyLmpzLCBidXQgY2FuIGJlIG92ZXJyaWRkZW5cbiAqIChzZWUge0BsaW5rIGd1aWRlL2kxOG4gQW5ndWxhciBpMThufSBkZXYgZ3VpZGUpLiBZb3UgY29uZmlndXJlIG5nUGx1cmFsaXplIGRpcmVjdGl2ZVxuICogYnkgc3BlY2lmeWluZyB0aGUgbWFwcGluZ3MgYmV0d2VlblxuICogW3BsdXJhbCBjYXRlZ29yaWVzXShodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWwpXG4gKiBhbmQgdGhlIHN0cmluZ3MgdG8gYmUgZGlzcGxheWVkLlxuICpcbiAqICMgUGx1cmFsIGNhdGVnb3JpZXMgYW5kIGV4cGxpY2l0IG51bWJlciBydWxlc1xuICogVGhlcmUgYXJlIHR3b1xuICogW3BsdXJhbCBjYXRlZ29yaWVzXShodHRwOi8vdW5pY29kZS5vcmcvcmVwb3MvY2xkci10bXAvdHJ1bmsvZGlmZi9zdXBwbGVtZW50YWwvbGFuZ3VhZ2VfcGx1cmFsX3J1bGVzLmh0bWwpXG4gKiBpbiBBbmd1bGFyJ3MgZGVmYXVsdCBlbi1VUyBsb2NhbGU6IFwib25lXCIgYW5kIFwib3RoZXJcIi5cbiAqXG4gKiBXaGlsZSBhIHBsdXJhbCBjYXRlZ29yeSBtYXkgbWF0Y2ggbWFueSBudW1iZXJzIChmb3IgZXhhbXBsZSwgaW4gZW4tVVMgbG9jYWxlLCBcIm90aGVyXCIgY2FuIG1hdGNoXG4gKiBhbnkgbnVtYmVyIHRoYXQgaXMgbm90IDEpLCBhbiBleHBsaWNpdCBudW1iZXIgcnVsZSBjYW4gb25seSBtYXRjaCBvbmUgbnVtYmVyLiBGb3IgZXhhbXBsZSwgdGhlXG4gKiBleHBsaWNpdCBudW1iZXIgcnVsZSBmb3IgXCIzXCIgbWF0Y2hlcyB0aGUgbnVtYmVyIDMuIFRoZXJlIGFyZSBleGFtcGxlcyBvZiBwbHVyYWwgY2F0ZWdvcmllc1xuICogYW5kIGV4cGxpY2l0IG51bWJlciBydWxlcyB0aHJvdWdob3V0IHRoZSByZXN0IG9mIHRoaXMgZG9jdW1lbnRhdGlvbi5cbiAqXG4gKiAjIENvbmZpZ3VyaW5nIG5nUGx1cmFsaXplXG4gKiBZb3UgY29uZmlndXJlIG5nUGx1cmFsaXplIGJ5IHByb3ZpZGluZyAyIGF0dHJpYnV0ZXM6IGBjb3VudGAgYW5kIGB3aGVuYC5cbiAqIFlvdSBjYW4gYWxzbyBwcm92aWRlIGFuIG9wdGlvbmFsIGF0dHJpYnV0ZSwgYG9mZnNldGAuXG4gKlxuICogVGhlIHZhbHVlIG9mIHRoZSBgY291bnRgIGF0dHJpYnV0ZSBjYW4gYmUgZWl0aGVyIGEgc3RyaW5nIG9yIGFuIHtAbGluayBndWlkZS9leHByZXNzaW9uXG4gKiBBbmd1bGFyIGV4cHJlc3Npb259OyB0aGVzZSBhcmUgZXZhbHVhdGVkIG9uIHRoZSBjdXJyZW50IHNjb3BlIGZvciBpdHMgYm91bmQgdmFsdWUuXG4gKlxuICogVGhlIGB3aGVuYCBhdHRyaWJ1dGUgc3BlY2lmaWVzIHRoZSBtYXBwaW5ncyBiZXR3ZWVuIHBsdXJhbCBjYXRlZ29yaWVzIGFuZCB0aGUgYWN0dWFsXG4gKiBzdHJpbmcgdG8gYmUgZGlzcGxheWVkLiBUaGUgdmFsdWUgb2YgdGhlIGF0dHJpYnV0ZSBzaG91bGQgYmUgYSBKU09OIG9iamVjdC5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIGV4YW1wbGUgc2hvd3MgaG93IHRvIGNvbmZpZ3VyZSBuZ1BsdXJhbGl6ZTpcbiAqXG4gKiBgYGBodG1sXG4gKiA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIlxuICAgICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnb25lJzogJzEgcGVyc29uIGlzIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICdvdGhlcic6ICd7fSBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cbiAqIDwvbmctcGx1cmFsaXplPlxuICpgYGBcbiAqXG4gKiBJbiB0aGUgZXhhbXBsZSwgYFwiMDogTm9ib2R5IGlzIHZpZXdpbmcuXCJgIGlzIGFuIGV4cGxpY2l0IG51bWJlciBydWxlLiBJZiB5b3UgZGlkIG5vdFxuICogc3BlY2lmeSB0aGlzIHJ1bGUsIDAgd291bGQgYmUgbWF0Y2hlZCB0byB0aGUgXCJvdGhlclwiIGNhdGVnb3J5IGFuZCBcIjAgcGVvcGxlIGFyZSB2aWV3aW5nXCJcbiAqIHdvdWxkIGJlIHNob3duIGluc3RlYWQgb2YgXCJOb2JvZHkgaXMgdmlld2luZ1wiLiBZb3UgY2FuIHNwZWNpZnkgYW4gZXhwbGljaXQgbnVtYmVyIHJ1bGUgZm9yXG4gKiBvdGhlciBudW1iZXJzLCBmb3IgZXhhbXBsZSAxMiwgc28gdGhhdCBpbnN0ZWFkIG9mIHNob3dpbmcgXCIxMiBwZW9wbGUgYXJlIHZpZXdpbmdcIiwgeW91IGNhblxuICogc2hvdyBcImEgZG96ZW4gcGVvcGxlIGFyZSB2aWV3aW5nXCIuXG4gKlxuICogWW91IGNhbiB1c2UgYSBzZXQgb2YgY2xvc2VkIGJyYWNlcyAoYHt9YCkgYXMgYSBwbGFjZWhvbGRlciBmb3IgdGhlIG51bWJlciB0aGF0IHlvdSB3YW50IHN1YnN0aXR1dGVkXG4gKiBpbnRvIHBsdXJhbGl6ZWQgc3RyaW5ncy4gSW4gdGhlIHByZXZpb3VzIGV4YW1wbGUsIEFuZ3VsYXIgd2lsbCByZXBsYWNlIGB7fWAgd2l0aFxuICogPHNwYW4gbmctbm9uLWJpbmRhYmxlPmB7e3BlcnNvbkNvdW50fX1gPC9zcGFuPi4gVGhlIGNsb3NlZCBicmFjZXMgYHt9YCBpcyBhIHBsYWNlaG9sZGVyXG4gKiBmb3IgPHNwYW4gbmctbm9uLWJpbmRhYmxlPnt7bnVtYmVyRXhwcmVzc2lvbn19PC9zcGFuPi5cbiAqXG4gKiBJZiBubyBydWxlIGlzIGRlZmluZWQgZm9yIGEgY2F0ZWdvcnksIHRoZW4gYW4gZW1wdHkgc3RyaW5nIGlzIGRpc3BsYXllZCBhbmQgYSB3YXJuaW5nIGlzIGdlbmVyYXRlZC5cbiAqIE5vdGUgdGhhdCBzb21lIGxvY2FsZXMgZGVmaW5lIG1vcmUgY2F0ZWdvcmllcyB0aGFuIGBvbmVgIGFuZCBgb3RoZXJgLiBGb3IgZXhhbXBsZSwgZnItZnIgZGVmaW5lcyBgZmV3YCBhbmQgYG1hbnlgLlxuICpcbiAqICMgQ29uZmlndXJpbmcgbmdQbHVyYWxpemUgd2l0aCBvZmZzZXRcbiAqIFRoZSBgb2Zmc2V0YCBhdHRyaWJ1dGUgYWxsb3dzIGZ1cnRoZXIgY3VzdG9taXphdGlvbiBvZiBwbHVyYWxpemVkIHRleHQsIHdoaWNoIGNhbiByZXN1bHQgaW5cbiAqIGEgYmV0dGVyIHVzZXIgZXhwZXJpZW5jZS4gRm9yIGV4YW1wbGUsIGluc3RlYWQgb2YgdGhlIG1lc3NhZ2UgXCI0IHBlb3BsZSBhcmUgdmlld2luZyB0aGlzIGRvY3VtZW50XCIsXG4gKiB5b3UgbWlnaHQgZGlzcGxheSBcIkpvaG4sIEthdGUgYW5kIDIgb3RoZXJzIGFyZSB2aWV3aW5nIHRoaXMgZG9jdW1lbnRcIi5cbiAqIFRoZSBvZmZzZXQgYXR0cmlidXRlIGFsbG93cyB5b3UgdG8gb2Zmc2V0IGEgbnVtYmVyIGJ5IGFueSBkZXNpcmVkIHZhbHVlLlxuICogTGV0J3MgdGFrZSBhIGxvb2sgYXQgYW4gZXhhbXBsZTpcbiAqXG4gKiBgYGBodG1sXG4gKiA8bmctcGx1cmFsaXplIGNvdW50PVwicGVyc29uQ291bnRcIiBvZmZzZXQ9MlxuICogICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnMSc6ICd7e3BlcnNvbjF9fSBpcyB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnMic6ICd7e3BlcnNvbjF9fSBhbmQge3twZXJzb24yfX0gYXJlIHZpZXdpbmcuJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicsXG4gKiAgICAgICAgICAgICAgICAgICAgICAnb3RoZXInOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCB7fSBvdGhlciBwZW9wbGUgYXJlIHZpZXdpbmcuJ31cIj5cbiAqIDwvbmctcGx1cmFsaXplPlxuICogYGBgXG4gKlxuICogTm90aWNlIHRoYXQgd2UgYXJlIHN0aWxsIHVzaW5nIHR3byBwbHVyYWwgY2F0ZWdvcmllcyhvbmUsIG90aGVyKSwgYnV0IHdlIGFkZGVkXG4gKiB0aHJlZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgMCwgMSBhbmQgMi5cbiAqIFdoZW4gb25lIHBlcnNvbiwgcGVyaGFwcyBKb2huLCB2aWV3cyB0aGUgZG9jdW1lbnQsIFwiSm9obiBpcyB2aWV3aW5nXCIgd2lsbCBiZSBzaG93bi5cbiAqIFdoZW4gdGhyZWUgcGVvcGxlIHZpZXcgdGhlIGRvY3VtZW50LCBubyBleHBsaWNpdCBudW1iZXIgcnVsZSBpcyBmb3VuZCwgc29cbiAqIGFuIG9mZnNldCBvZiAyIGlzIHRha2VuIG9mZiAzLCBhbmQgQW5ndWxhciB1c2VzIDEgdG8gZGVjaWRlIHRoZSBwbHVyYWwgY2F0ZWdvcnkuXG4gKiBJbiB0aGlzIGNhc2UsIHBsdXJhbCBjYXRlZ29yeSAnb25lJyBpcyBtYXRjaGVkIGFuZCBcIkpvaG4sIE1hcnkgYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmdcIlxuICogaXMgc2hvd24uXG4gKlxuICogTm90ZSB0aGF0IHdoZW4geW91IHNwZWNpZnkgb2Zmc2V0cywgeW91IG11c3QgcHJvdmlkZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgZm9yXG4gKiBudW1iZXJzIGZyb20gMCB1cCB0byBhbmQgaW5jbHVkaW5nIHRoZSBvZmZzZXQuIElmIHlvdSB1c2UgYW4gb2Zmc2V0IG9mIDMsIGZvciBleGFtcGxlLFxuICogeW91IG11c3QgcHJvdmlkZSBleHBsaWNpdCBudW1iZXIgcnVsZXMgZm9yIDAsIDEsIDIgYW5kIDMuIFlvdSBtdXN0IGFsc28gcHJvdmlkZSBwbHVyYWwgc3RyaW5ncyBmb3JcbiAqIHBsdXJhbCBjYXRlZ29yaWVzIFwib25lXCIgYW5kIFwib3RoZXJcIi5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xleHByZXNzaW9ufSBjb3VudCBUaGUgdmFyaWFibGUgdG8gYmUgYm91bmQgdG8uXG4gKiBAcGFyYW0ge3N0cmluZ30gd2hlbiBUaGUgbWFwcGluZyBiZXR3ZWVuIHBsdXJhbCBjYXRlZ29yeSB0byBpdHMgY29ycmVzcG9uZGluZyBzdHJpbmdzLlxuICogQHBhcmFtIHtudW1iZXI9fSBvZmZzZXQgT2Zmc2V0IHRvIGRlZHVjdCBmcm9tIHRoZSB0b3RhbCBudW1iZXIuXG4gKlxuICogQGV4YW1wbGVcbiAgICA8ZXhhbXBsZSBtb2R1bGU9XCJwbHVyYWxpemVFeGFtcGxlXCIgbmFtZT1cIm5nLXBsdXJhbGl6ZVwiPlxuICAgICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgICAgPHNjcmlwdD5cbiAgICAgICAgICBhbmd1bGFyLm1vZHVsZSgncGx1cmFsaXplRXhhbXBsZScsIFtdKVxuICAgICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbjEgPSAnSWdvcic7XG4gICAgICAgICAgICAgICRzY29wZS5wZXJzb24yID0gJ01pc2tvJztcbiAgICAgICAgICAgICAgJHNjb3BlLnBlcnNvbkNvdW50ID0gMTtcbiAgICAgICAgICAgIH1dKTtcbiAgICAgICAgPC9zY3JpcHQ+XG4gICAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gICAgICAgICAgPGxhYmVsPlBlcnNvbiAxOjxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwicGVyc29uMVwiIHZhbHVlPVwiSWdvclwiIC8+PC9sYWJlbD48YnIvPlxuICAgICAgICAgIDxsYWJlbD5QZXJzb24gMjo8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInBlcnNvbjJcIiB2YWx1ZT1cIk1pc2tvXCIgLz48L2xhYmVsPjxici8+XG4gICAgICAgICAgPGxhYmVsPk51bWJlciBvZiBQZW9wbGU6PGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJwZXJzb25Db3VudFwiIHZhbHVlPVwiMVwiIC8+PC9sYWJlbD48YnIvPlxuXG4gICAgICAgICAgPCEtLS0gRXhhbXBsZSB3aXRoIHNpbXBsZSBwbHVyYWxpemF0aW9uIHJ1bGVzIGZvciBlbiBsb2NhbGUgLS0tPlxuICAgICAgICAgIFdpdGhvdXQgT2Zmc2V0OlxuICAgICAgICAgIDxuZy1wbHVyYWxpemUgY291bnQ9XCJwZXJzb25Db3VudFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ29uZSc6ICcxIHBlcnNvbiBpcyB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t9IHBlb3BsZSBhcmUgdmlld2luZy4nfVwiPlxuICAgICAgICAgIDwvbmctcGx1cmFsaXplPjxicj5cblxuICAgICAgICAgIDwhLS0tIEV4YW1wbGUgd2l0aCBvZmZzZXQgLS0tPlxuICAgICAgICAgIFdpdGggT2Zmc2V0KDIpOlxuICAgICAgICAgIDxuZy1wbHVyYWxpemUgY291bnQ9XCJwZXJzb25Db3VudFwiIG9mZnNldD0yXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGVuPVwieycwJzogJ05vYm9keSBpcyB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzEnOiAne3twZXJzb24xfX0gaXMgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcyJzogJ3t7cGVyc29uMX19IGFuZCB7e3BlcnNvbjJ9fSBhcmUgdmlld2luZy4nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvbmUnOiAne3twZXJzb24xfX0sIHt7cGVyc29uMn19IGFuZCBvbmUgb3RoZXIgcGVyc29uIGFyZSB2aWV3aW5nLicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogJ3t7cGVyc29uMX19LCB7e3BlcnNvbjJ9fSBhbmQge30gb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLid9XCI+XG4gICAgICAgICAgPC9uZy1wbHVyYWxpemU+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9maWxlPlxuICAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgICBpdCgnc2hvdWxkIHNob3cgY29ycmVjdCBwbHVyYWxpemVkIHN0cmluZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciB3aXRob3V0T2Zmc2V0ID0gZWxlbWVudC5hbGwoYnkuY3NzKCduZy1wbHVyYWxpemUnKSkuZ2V0KDApO1xuICAgICAgICAgIHZhciB3aXRoT2Zmc2V0ID0gZWxlbWVudC5hbGwoYnkuY3NzKCduZy1wbHVyYWxpemUnKSkuZ2V0KDEpO1xuICAgICAgICAgIHZhciBjb3VudElucHV0ID0gZWxlbWVudChieS5tb2RlbCgncGVyc29uQ291bnQnKSk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJzEgcGVyc29uIGlzIHZpZXdpbmcuJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdJZ29yIGlzIHZpZXdpbmcuJyk7XG5cbiAgICAgICAgICBjb3VudElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgY291bnRJbnB1dC5zZW5kS2V5cygnMCcpO1xuXG4gICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdOb2JvZHkgaXMgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ05vYm9keSBpcyB2aWV3aW5nLicpO1xuXG4gICAgICAgICAgY291bnRJbnB1dC5jbGVhcigpO1xuICAgICAgICAgIGNvdW50SW5wdXQuc2VuZEtleXMoJzInKTtcblxuICAgICAgICAgIGV4cGVjdCh3aXRob3V0T2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnMiBwZW9wbGUgYXJlIHZpZXdpbmcuJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdJZ29yIGFuZCBNaXNrbyBhcmUgdmlld2luZy4nKTtcblxuICAgICAgICAgIGNvdW50SW5wdXQuY2xlYXIoKTtcbiAgICAgICAgICBjb3VudElucHV0LnNlbmRLZXlzKCczJyk7XG5cbiAgICAgICAgICBleHBlY3Qod2l0aG91dE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJzMgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICAgIGV4cGVjdCh3aXRoT2Zmc2V0LmdldFRleHQoKSkudG9FcXVhbCgnSWdvciwgTWlza28gYW5kIG9uZSBvdGhlciBwZXJzb24gYXJlIHZpZXdpbmcuJyk7XG5cbiAgICAgICAgICBjb3VudElucHV0LmNsZWFyKCk7XG4gICAgICAgICAgY291bnRJbnB1dC5zZW5kS2V5cygnNCcpO1xuXG4gICAgICAgICAgZXhwZWN0KHdpdGhvdXRPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCc0IHBlb3BsZSBhcmUgdmlld2luZy4nKTtcbiAgICAgICAgICBleHBlY3Qod2l0aE9mZnNldC5nZXRUZXh0KCkpLnRvRXF1YWwoJ0lnb3IsIE1pc2tvIGFuZCAyIG90aGVyIHBlb3BsZSBhcmUgdmlld2luZy4nKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGl0KCdzaG91bGQgc2hvdyBkYXRhLWJvdW5kIG5hbWVzJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHdpdGhPZmZzZXQgPSBlbGVtZW50LmFsbChieS5jc3MoJ25nLXBsdXJhbGl6ZScpKS5nZXQoMSk7XG4gICAgICAgICAgdmFyIHBlcnNvbkNvdW50ID0gZWxlbWVudChieS5tb2RlbCgncGVyc29uQ291bnQnKSk7XG4gICAgICAgICAgdmFyIHBlcnNvbjEgPSBlbGVtZW50KGJ5Lm1vZGVsKCdwZXJzb24xJykpO1xuICAgICAgICAgIHZhciBwZXJzb24yID0gZWxlbWVudChieS5tb2RlbCgncGVyc29uMicpKTtcbiAgICAgICAgICBwZXJzb25Db3VudC5jbGVhcigpO1xuICAgICAgICAgIHBlcnNvbkNvdW50LnNlbmRLZXlzKCc0Jyk7XG4gICAgICAgICAgcGVyc29uMS5jbGVhcigpO1xuICAgICAgICAgIHBlcnNvbjEuc2VuZEtleXMoJ0RpJyk7XG4gICAgICAgICAgcGVyc29uMi5jbGVhcigpO1xuICAgICAgICAgIHBlcnNvbjIuc2VuZEtleXMoJ1ZvanRhJyk7XG4gICAgICAgICAgZXhwZWN0KHdpdGhPZmZzZXQuZ2V0VGV4dCgpKS50b0VxdWFsKCdEaSwgVm9qdGEgYW5kIDIgb3RoZXIgcGVvcGxlIGFyZSB2aWV3aW5nLicpO1xuICAgICAgICB9KTtcbiAgICAgIDwvZmlsZT5cbiAgICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1BsdXJhbGl6ZURpcmVjdGl2ZSA9IFsnJGxvY2FsZScsICckaW50ZXJwb2xhdGUnLCAnJGxvZycsIGZ1bmN0aW9uKCRsb2NhbGUsICRpbnRlcnBvbGF0ZSwgJGxvZykge1xuICB2YXIgQlJBQ0UgPSAve30vZyxcbiAgICAgIElTX1dIRU4gPSAvXndoZW4oTWludXMpPyguKykkLztcblxuICByZXR1cm4ge1xuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICB2YXIgbnVtYmVyRXhwID0gYXR0ci5jb3VudCxcbiAgICAgICAgICB3aGVuRXhwID0gYXR0ci4kYXR0ci53aGVuICYmIGVsZW1lbnQuYXR0cihhdHRyLiRhdHRyLndoZW4pLCAvLyB3ZSBoYXZlIHt7fX0gaW4gYXR0cnNcbiAgICAgICAgICBvZmZzZXQgPSBhdHRyLm9mZnNldCB8fCAwLFxuICAgICAgICAgIHdoZW5zID0gc2NvcGUuJGV2YWwod2hlbkV4cCkgfHwge30sXG4gICAgICAgICAgd2hlbnNFeHBGbnMgPSB7fSxcbiAgICAgICAgICBzdGFydFN5bWJvbCA9ICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpLFxuICAgICAgICAgIGVuZFN5bWJvbCA9ICRpbnRlcnBvbGF0ZS5lbmRTeW1ib2woKSxcbiAgICAgICAgICBicmFjZVJlcGxhY2VtZW50ID0gc3RhcnRTeW1ib2wgKyBudW1iZXJFeHAgKyAnLScgKyBvZmZzZXQgKyBlbmRTeW1ib2wsXG4gICAgICAgICAgd2F0Y2hSZW1vdmVyID0gYW5ndWxhci5ub29wLFxuICAgICAgICAgIGxhc3RDb3VudDtcblxuICAgICAgZm9yRWFjaChhdHRyLCBmdW5jdGlvbihleHByZXNzaW9uLCBhdHRyaWJ1dGVOYW1lKSB7XG4gICAgICAgIHZhciB0bXBNYXRjaCA9IElTX1dIRU4uZXhlYyhhdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgaWYgKHRtcE1hdGNoKSB7XG4gICAgICAgICAgdmFyIHdoZW5LZXkgPSAodG1wTWF0Y2hbMV0gPyAnLScgOiAnJykgKyBsb3dlcmNhc2UodG1wTWF0Y2hbMl0pO1xuICAgICAgICAgIHdoZW5zW3doZW5LZXldID0gZWxlbWVudC5hdHRyKGF0dHIuJGF0dHJbYXR0cmlidXRlTmFtZV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGZvckVhY2god2hlbnMsIGZ1bmN0aW9uKGV4cHJlc3Npb24sIGtleSkge1xuICAgICAgICB3aGVuc0V4cEZuc1trZXldID0gJGludGVycG9sYXRlKGV4cHJlc3Npb24ucmVwbGFjZShCUkFDRSwgYnJhY2VSZXBsYWNlbWVudCkpO1xuXG4gICAgICB9KTtcblxuICAgICAgc2NvcGUuJHdhdGNoKG51bWJlckV4cCwgZnVuY3Rpb24gbmdQbHVyYWxpemVXYXRjaEFjdGlvbihuZXdWYWwpIHtcbiAgICAgICAgdmFyIGNvdW50ID0gcGFyc2VGbG9hdChuZXdWYWwpO1xuICAgICAgICB2YXIgY291bnRJc05hTiA9IGlzTnVtYmVyTmFOKGNvdW50KTtcblxuICAgICAgICBpZiAoIWNvdW50SXNOYU4gJiYgIShjb3VudCBpbiB3aGVucykpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleHBsaWNpdCBudW1iZXIgcnVsZSBzdWNoIGFzIDEsIDIsIDMuLi4gaXMgZGVmaW5lZCwganVzdCB1c2UgaXQuXG4gICAgICAgICAgLy8gT3RoZXJ3aXNlLCBjaGVjayBpdCBhZ2FpbnN0IHBsdXJhbGl6YXRpb24gcnVsZXMgaW4gJGxvY2FsZSBzZXJ2aWNlLlxuICAgICAgICAgIGNvdW50ID0gJGxvY2FsZS5wbHVyYWxDYXQoY291bnQgLSBvZmZzZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgYm90aCBgY291bnRgIGFuZCBgbGFzdENvdW50YCBhcmUgTmFOLCB3ZSBkb24ndCBuZWVkIHRvIHJlLXJlZ2lzdGVyIGEgd2F0Y2guXG4gICAgICAgIC8vIEluIEpTIGBOYU4gIT09IE5hTmAsIHNvIHdlIGhhdmUgdG8gZXhwbGljaXRseSBjaGVjay5cbiAgICAgICAgaWYgKChjb3VudCAhPT0gbGFzdENvdW50KSAmJiAhKGNvdW50SXNOYU4gJiYgaXNOdW1iZXJOYU4obGFzdENvdW50KSkpIHtcbiAgICAgICAgICB3YXRjaFJlbW92ZXIoKTtcbiAgICAgICAgICB2YXIgd2hlbkV4cEZuID0gd2hlbnNFeHBGbnNbY291bnRdO1xuICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh3aGVuRXhwRm4pKSB7XG4gICAgICAgICAgICBpZiAobmV3VmFsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgJGxvZy5kZWJ1ZygnbmdQbHVyYWxpemU6IG5vIHJ1bGUgZGVmaW5lZCBmb3IgXFwnJyArIGNvdW50ICsgJ1xcJyBpbiAnICsgd2hlbkV4cCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB3YXRjaFJlbW92ZXIgPSBub29wO1xuICAgICAgICAgICAgdXBkYXRlRWxlbWVudFRleHQoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2F0Y2hSZW1vdmVyID0gc2NvcGUuJHdhdGNoKHdoZW5FeHBGbiwgdXBkYXRlRWxlbWVudFRleHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0Q291bnQgPSBjb3VudDtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnRUZXh0KG5ld1RleHQpIHtcbiAgICAgICAgZWxlbWVudC50ZXh0KG5ld1RleHQgfHwgJycpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1dO1xuXG4vKiBleHBvcnRlZCBuZ1JlcGVhdERpcmVjdGl2ZSAqL1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nUmVwZWF0XG4gKiBAbXVsdGlFbGVtZW50XG4gKiBAcmVzdHJpY3QgQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIGBuZ1JlcGVhdGAgZGlyZWN0aXZlIGluc3RhbnRpYXRlcyBhIHRlbXBsYXRlIG9uY2UgcGVyIGl0ZW0gZnJvbSBhIGNvbGxlY3Rpb24uIEVhY2ggdGVtcGxhdGVcbiAqIGluc3RhbmNlIGdldHMgaXRzIG93biBzY29wZSwgd2hlcmUgdGhlIGdpdmVuIGxvb3AgdmFyaWFibGUgaXMgc2V0IHRvIHRoZSBjdXJyZW50IGNvbGxlY3Rpb24gaXRlbSxcbiAqIGFuZCBgJGluZGV4YCBpcyBzZXQgdG8gdGhlIGl0ZW0gaW5kZXggb3Iga2V5LlxuICpcbiAqIFNwZWNpYWwgcHJvcGVydGllcyBhcmUgZXhwb3NlZCBvbiB0aGUgbG9jYWwgc2NvcGUgb2YgZWFjaCB0ZW1wbGF0ZSBpbnN0YW5jZSwgaW5jbHVkaW5nOlxuICpcbiAqIHwgVmFyaWFibGUgIHwgVHlwZSAgICAgICAgICAgIHwgRGV0YWlscyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgYCRpbmRleGAgIHwge0B0eXBlIG51bWJlcn0gIHwgaXRlcmF0b3Igb2Zmc2V0IG9mIHRoZSByZXBlYXRlZCBlbGVtZW50ICgwLi5sZW5ndGgtMSkgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgYCRmaXJzdGAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBmaXJzdCBpbiB0aGUgaXRlcmF0b3IuICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgYCRtaWRkbGVgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgbGFzdCBpbiB0aGUgaXRlcmF0b3IuIHxcbiAqIHwgYCRsYXN0YCAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgcmVwZWF0ZWQgZWxlbWVudCBpcyBsYXN0IGluIHRoZSBpdGVyYXRvci4gICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgYCRldmVuYCAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgaXRlcmF0b3IgcG9zaXRpb24gYCRpbmRleGAgaXMgZXZlbiAob3RoZXJ3aXNlIGZhbHNlKS4gICAgICAgICAgIHxcbiAqIHwgYCRvZGRgICAgIHwge0B0eXBlIGJvb2xlYW59IHwgdHJ1ZSBpZiB0aGUgaXRlcmF0b3IgcG9zaXRpb24gYCRpbmRleGAgaXMgb2RkIChvdGhlcndpc2UgZmFsc2UpLiAgICAgICAgICAgIHxcbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogICBDcmVhdGluZyBhbGlhc2VzIGZvciB0aGVzZSBwcm9wZXJ0aWVzIGlzIHBvc3NpYmxlIHdpdGgge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ0luaXQgYG5nSW5pdGB9LlxuICogICBUaGlzIG1heSBiZSB1c2VmdWwgd2hlbiwgZm9yIGluc3RhbmNlLCBuZXN0aW5nIG5nUmVwZWF0cy5cbiAqIDwvZGl2PlxuICpcbiAqXG4gKiAjIEl0ZXJhdGluZyBvdmVyIG9iamVjdCBwcm9wZXJ0aWVzXG4gKlxuICogSXQgaXMgcG9zc2libGUgdG8gZ2V0IGBuZ1JlcGVhdGAgdG8gaXRlcmF0ZSBvdmVyIHRoZSBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdCB1c2luZyB0aGUgZm9sbG93aW5nXG4gKiBzeW50YXg6XG4gKlxuICogYGBganNcbiAqIDxkaXYgbmctcmVwZWF0PVwiKGtleSwgdmFsdWUpIGluIG15T2JqXCI+IC4uLiA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIEhvd2V2ZXIsIHRoZXJlIGFyZSBhIGZldyBsaW1pdGF0aW9ucyBjb21wYXJlZCB0byBhcnJheSBpdGVyYXRpb246XG4gKlxuICogLSBUaGUgSmF2YVNjcmlwdCBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IGRlZmluZSB0aGUgb3JkZXIgb2Yga2V5c1xuICogICByZXR1cm5lZCBmb3IgYW4gb2JqZWN0LCBzbyBBbmd1bGFyIHJlbGllcyBvbiB0aGUgb3JkZXIgcmV0dXJuZWQgYnkgdGhlIGJyb3dzZXJcbiAqICAgd2hlbiBydW5uaW5nIGBmb3Iga2V5IGluIG15T2JqYC4gQnJvd3NlcnMgZ2VuZXJhbGx5IGZvbGxvdyB0aGUgc3RyYXRlZ3kgb2YgcHJvdmlkaW5nXG4gKiAgIGtleXMgaW4gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgd2VyZSBkZWZpbmVkLCBhbHRob3VnaCB0aGVyZSBhcmUgZXhjZXB0aW9ucyB3aGVuIGtleXMgYXJlIGRlbGV0ZWRcbiAqICAgYW5kIHJlaW5zdGF0ZWQuIFNlZSB0aGVcbiAqICAgW01ETiBwYWdlIG9uIGBkZWxldGVgIGZvciBtb3JlIGluZm9dKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL09wZXJhdG9ycy9kZWxldGUjQ3Jvc3MtYnJvd3Nlcl9ub3RlcykuXG4gKlxuICogLSBgbmdSZXBlYXRgIHdpbGwgc2lsZW50bHkgKmlnbm9yZSogb2JqZWN0IGtleXMgc3RhcnRpbmcgd2l0aCBgJGAsIGJlY2F1c2VcbiAqICAgaXQncyBhIHByZWZpeCB1c2VkIGJ5IEFuZ3VsYXIgZm9yIHB1YmxpYyAoYCRgKSBhbmQgcHJpdmF0ZSAoYCQkYCkgcHJvcGVydGllcy5cbiAqXG4gKiAtIFRoZSBidWlsdC1pbiBmaWx0ZXJzIHtAbGluayBuZy5vcmRlckJ5IG9yZGVyQnl9IGFuZCB7QGxpbmsgbmcuZmlsdGVyIGZpbHRlcn0gZG8gbm90IHdvcmsgd2l0aFxuICogICBvYmplY3RzLCBhbmQgd2lsbCB0aHJvdyBhbiBlcnJvciBpZiB1c2VkIHdpdGggb25lLlxuICpcbiAqIElmIHlvdSBhcmUgaGl0dGluZyBhbnkgb2YgdGhlc2UgbGltaXRhdGlvbnMsIHRoZSByZWNvbW1lbmRlZCB3b3JrYXJvdW5kIGlzIHRvIGNvbnZlcnQgeW91ciBvYmplY3QgaW50byBhbiBhcnJheVxuICogdGhhdCBpcyBzb3J0ZWQgaW50byB0aGUgb3JkZXIgdGhhdCB5b3UgcHJlZmVyIGJlZm9yZSBwcm92aWRpbmcgaXQgdG8gYG5nUmVwZWF0YC4gWW91IGNvdWxkXG4gKiBkbyB0aGlzIHdpdGggYSBmaWx0ZXIgc3VjaCBhcyBbdG9BcnJheUZpbHRlcl0oaHR0cDovL25nbW9kdWxlcy5vcmcvbW9kdWxlcy9hbmd1bGFyLXRvQXJyYXlGaWx0ZXIpXG4gKiBvciBpbXBsZW1lbnQgYSBgJHdhdGNoYCBvbiB0aGUgb2JqZWN0IHlvdXJzZWxmLlxuICpcbiAqXG4gKiAjIFRyYWNraW5nIGFuZCBEdXBsaWNhdGVzXG4gKlxuICogYG5nUmVwZWF0YCB1c2VzIHtAbGluayAkcm9vdFNjb3BlLlNjb3BlIyR3YXRjaENvbGxlY3Rpb24gJHdhdGNoQ29sbGVjdGlvbn0gdG8gZGV0ZWN0IGNoYW5nZXMgaW5cbiAqIHRoZSBjb2xsZWN0aW9uLiBXaGVuIGEgY2hhbmdlIGhhcHBlbnMsIGBuZ1JlcGVhdGAgdGhlbiBtYWtlcyB0aGUgY29ycmVzcG9uZGluZyBjaGFuZ2VzIHRvIHRoZSBET006XG4gKlxuICogKiBXaGVuIGFuIGl0ZW0gaXMgYWRkZWQsIGEgbmV3IGluc3RhbmNlIG9mIHRoZSB0ZW1wbGF0ZSBpcyBhZGRlZCB0byB0aGUgRE9NLlxuICogKiBXaGVuIGFuIGl0ZW0gaXMgcmVtb3ZlZCwgaXRzIHRlbXBsYXRlIGluc3RhbmNlIGlzIHJlbW92ZWQgZnJvbSB0aGUgRE9NLlxuICogKiBXaGVuIGl0ZW1zIGFyZSByZW9yZGVyZWQsIHRoZWlyIHJlc3BlY3RpdmUgdGVtcGxhdGVzIGFyZSByZW9yZGVyZWQgaW4gdGhlIERPTS5cbiAqXG4gKiBUbyBtaW5pbWl6ZSBjcmVhdGlvbiBvZiBET00gZWxlbWVudHMsIGBuZ1JlcGVhdGAgdXNlcyBhIGZ1bmN0aW9uXG4gKiB0byBcImtlZXAgdHJhY2tcIiBvZiBhbGwgaXRlbXMgaW4gdGhlIGNvbGxlY3Rpb24gYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgRE9NIGVsZW1lbnRzLlxuICogRm9yIGV4YW1wbGUsIGlmIGFuIGl0ZW0gaXMgYWRkZWQgdG8gdGhlIGNvbGxlY3Rpb24sIGBuZ1JlcGVhdGAgd2lsbCBrbm93IHRoYXQgYWxsIG90aGVyIGl0ZW1zXG4gKiBhbHJlYWR5IGhhdmUgRE9NIGVsZW1lbnRzLCBhbmQgd2lsbCBub3QgcmUtcmVuZGVyIHRoZW0uXG4gKlxuICogVGhlIGRlZmF1bHQgdHJhY2tpbmcgZnVuY3Rpb24gKHdoaWNoIHRyYWNrcyBpdGVtcyBieSB0aGVpciBpZGVudGl0eSkgZG9lcyBub3QgYWxsb3dcbiAqIGR1cGxpY2F0ZSBpdGVtcyBpbiBhcnJheXMuIFRoaXMgaXMgYmVjYXVzZSB3aGVuIHRoZXJlIGFyZSBkdXBsaWNhdGVzLCBpdCBpcyBub3QgcG9zc2libGVcbiAqIHRvIG1haW50YWluIGEgb25lLXRvLW9uZSBtYXBwaW5nIGJldHdlZW4gY29sbGVjdGlvbiBpdGVtcyBhbmQgRE9NIGVsZW1lbnRzLlxuICpcbiAqIElmIHlvdSBkbyBuZWVkIHRvIHJlcGVhdCBkdXBsaWNhdGUgaXRlbXMsIHlvdSBjYW4gc3Vic3RpdHV0ZSB0aGUgZGVmYXVsdCB0cmFja2luZyBiZWhhdmlvclxuICogd2l0aCB5b3VyIG93biB1c2luZyB0aGUgYHRyYWNrIGJ5YCBleHByZXNzaW9uLlxuICpcbiAqIEZvciBleGFtcGxlLCB5b3UgbWF5IHRyYWNrIGl0ZW1zIGJ5IHRoZSBpbmRleCBvZiBlYWNoIGl0ZW0gaW4gdGhlIGNvbGxlY3Rpb24sIHVzaW5nIHRoZVxuICogc3BlY2lhbCBzY29wZSBwcm9wZXJ0eSBgJGluZGV4YDpcbiAqIGBgYGh0bWxcbiAqICAgIDxkaXYgbmctcmVwZWF0PVwibiBpbiBbNDIsIDQyLCA0MywgNDNdIHRyYWNrIGJ5ICRpbmRleFwiPlxuICogICAgICB7e259fVxuICogICAgPC9kaXY+XG4gKiBgYGBcbiAqXG4gKiBZb3UgbWF5IGFsc28gdXNlIGFyYml0cmFyeSBleHByZXNzaW9ucyBpbiBgdHJhY2sgYnlgLCBpbmNsdWRpbmcgcmVmZXJlbmNlcyB0byBjdXN0b20gZnVuY3Rpb25zXG4gKiBvbiB0aGUgc2NvcGU6XG4gKiBgYGBodG1sXG4gKiAgICA8ZGl2IG5nLXJlcGVhdD1cIm4gaW4gWzQyLCA0MiwgNDMsIDQzXSB0cmFjayBieSBteVRyYWNraW5nRnVuY3Rpb24obilcIj5cbiAqICAgICAge3tufX1cbiAqICAgIDwvZGl2PlxuICogYGBgXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXN1Y2Nlc3NcIj5cbiAqIElmIHlvdSBhcmUgd29ya2luZyB3aXRoIG9iamVjdHMgdGhhdCBoYXZlIGEgdW5pcXVlIGlkZW50aWZpZXIgcHJvcGVydHksIHlvdSBzaG91bGQgdHJhY2tcbiAqIGJ5IHRoaXMgaWRlbnRpZmllciBpbnN0ZWFkIG9mIHRoZSBvYmplY3QgaW5zdGFuY2UuIFNob3VsZCB5b3UgcmVsb2FkIHlvdXIgZGF0YSBsYXRlciwgYG5nUmVwZWF0YFxuICogd2lsbCBub3QgaGF2ZSB0byByZWJ1aWxkIHRoZSBET00gZWxlbWVudHMgZm9yIGl0ZW1zIGl0IGhhcyBhbHJlYWR5IHJlbmRlcmVkLCBldmVuIGlmIHRoZVxuICogSmF2YVNjcmlwdCBvYmplY3RzIGluIHRoZSBjb2xsZWN0aW9uIGhhdmUgYmVlbiBzdWJzdGl0dXRlZCBmb3IgbmV3IG9uZXMuIEZvciBsYXJnZSBjb2xsZWN0aW9ucyxcbiAqIHRoaXMgc2lnbmlmaWNhbnRseSBpbXByb3ZlcyByZW5kZXJpbmcgcGVyZm9ybWFuY2UuIElmIHlvdSBkb24ndCBoYXZlIGEgdW5pcXVlIGlkZW50aWZpZXIsXG4gKiBgdHJhY2sgYnkgJGluZGV4YCBjYW4gYWxzbyBwcm92aWRlIGEgcGVyZm9ybWFuY2UgYm9vc3QuXG4gKiA8L2Rpdj5cbiAqXG4gKiBgYGBodG1sXG4gKiAgICA8ZGl2IG5nLXJlcGVhdD1cIm1vZGVsIGluIGNvbGxlY3Rpb24gdHJhY2sgYnkgbW9kZWwuaWRcIj5cbiAqICAgICAge3ttb2RlbC5uYW1lfX1cbiAqICAgIDwvZGl2PlxuICogYGBgXG4gKlxuICogPGJyIC8+XG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogQXZvaWQgdXNpbmcgYHRyYWNrIGJ5ICRpbmRleGAgd2hlbiB0aGUgcmVwZWF0ZWQgdGVtcGxhdGUgY29udGFpbnNcbiAqIHtAbGluayBndWlkZS9leHByZXNzaW9uI29uZS10aW1lLWJpbmRpbmcgb25lLXRpbWUgYmluZGluZ3N9LiBJbiBzdWNoIGNhc2VzLCB0aGUgYG50aGAgRE9NXG4gKiBlbGVtZW50IHdpbGwgYWx3YXlzIGJlIG1hdGNoZWQgd2l0aCB0aGUgYG50aGAgaXRlbSBvZiB0aGUgYXJyYXksIHNvIHRoZSBiaW5kaW5ncyBvbiB0aGF0IGVsZW1lbnRcbiAqIHdpbGwgbm90IGJlIHVwZGF0ZWQgZXZlbiB3aGVuIHRoZSBjb3JyZXNwb25kaW5nIGl0ZW0gY2hhbmdlcywgZXNzZW50aWFsbHkgY2F1c2luZyB0aGUgdmlldyB0byBnZXRcbiAqIG91dC1vZi1zeW5jIHdpdGggdGhlIHVuZGVybHlpbmcgZGF0YS5cbiAqIDwvZGl2PlxuICpcbiAqIFdoZW4gbm8gYHRyYWNrIGJ5YCBleHByZXNzaW9uIGlzIHByb3ZpZGVkLCBpdCBpcyBlcXVpdmFsZW50IHRvIHRyYWNraW5nIGJ5IHRoZSBidWlsdC1pblxuICogYCRpZGAgZnVuY3Rpb24sIHdoaWNoIHRyYWNrcyBpdGVtcyBieSB0aGVpciBpZGVudGl0eTpcbiAqIGBgYGh0bWxcbiAqICAgIDxkaXYgbmctcmVwZWF0PVwib2JqIGluIGNvbGxlY3Rpb24gdHJhY2sgYnkgJGlkKG9iailcIj5cbiAqICAgICAge3tvYmoucHJvcH19XG4gKiAgICA8L2Rpdj5cbiAqIGBgYFxuICpcbiAqIDxiciAvPlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LXdhcm5pbmdcIj5cbiAqICoqTm90ZToqKiBgdHJhY2sgYnlgIG11c3QgYWx3YXlzIGJlIHRoZSBsYXN0IGV4cHJlc3Npb246XG4gKiA8L2Rpdj5cbiAqIGBgYFxuICogICAgPGRpdiBuZy1yZXBlYXQ9XCJtb2RlbCBpbiBjb2xsZWN0aW9uIHwgb3JkZXJCeTogJ2lkJyBhcyBmaWx0ZXJlZF9yZXN1bHQgdHJhY2sgYnkgbW9kZWwuaWRcIj5cbiAqICAgICAge3ttb2RlbC5uYW1lfX1cbiAqICAgIDwvZGl2PlxuICogYGBgXG4gKlxuICpcbiAqICMgU3BlY2lhbCByZXBlYXQgc3RhcnQgYW5kIGVuZCBwb2ludHNcbiAqIFRvIHJlcGVhdCBhIHNlcmllcyBvZiBlbGVtZW50cyBpbnN0ZWFkIG9mIGp1c3Qgb25lIHBhcmVudCBlbGVtZW50LCBuZ1JlcGVhdCAoYXMgd2VsbCBhcyBvdGhlciBuZyBkaXJlY3RpdmVzKSBzdXBwb3J0cyBleHRlbmRpbmdcbiAqIHRoZSByYW5nZSBvZiB0aGUgcmVwZWF0ZXIgYnkgZGVmaW5pbmcgZXhwbGljaXQgc3RhcnQgYW5kIGVuZCBwb2ludHMgYnkgdXNpbmcgKipuZy1yZXBlYXQtc3RhcnQqKiBhbmQgKipuZy1yZXBlYXQtZW5kKiogcmVzcGVjdGl2ZWx5LlxuICogVGhlICoqbmctcmVwZWF0LXN0YXJ0KiogZGlyZWN0aXZlIHdvcmtzIHRoZSBzYW1lIGFzICoqbmctcmVwZWF0KiosIGJ1dCB3aWxsIHJlcGVhdCBhbGwgdGhlIEhUTUwgY29kZSAoaW5jbHVkaW5nIHRoZSB0YWcgaXQncyBkZWZpbmVkIG9uKVxuICogdXAgdG8gYW5kIGluY2x1ZGluZyB0aGUgZW5kaW5nIEhUTUwgdGFnIHdoZXJlICoqbmctcmVwZWF0LWVuZCoqIGlzIHBsYWNlZC5cbiAqXG4gKiBUaGUgZXhhbXBsZSBiZWxvdyBtYWtlcyB1c2Ugb2YgdGhpcyBmZWF0dXJlOlxuICogYGBgaHRtbFxuICogICA8aGVhZGVyIG5nLXJlcGVhdC1zdGFydD1cIml0ZW0gaW4gaXRlbXNcIj5cbiAqICAgICBIZWFkZXIge3sgaXRlbSB9fVxuICogICA8L2hlYWRlcj5cbiAqICAgPGRpdiBjbGFzcz1cImJvZHlcIj5cbiAqICAgICBCb2R5IHt7IGl0ZW0gfX1cbiAqICAgPC9kaXY+XG4gKiAgIDxmb290ZXIgbmctcmVwZWF0LWVuZD5cbiAqICAgICBGb290ZXIge3sgaXRlbSB9fVxuICogICA8L2Zvb3Rlcj5cbiAqIGBgYFxuICpcbiAqIEFuZCB3aXRoIGFuIGlucHV0IG9mIHtAdHlwZSBbJ0EnLCdCJ119IGZvciB0aGUgaXRlbXMgdmFyaWFibGUgaW4gdGhlIGV4YW1wbGUgYWJvdmUsIHRoZSBvdXRwdXQgd2lsbCBldmFsdWF0ZSB0bzpcbiAqIGBgYGh0bWxcbiAqICAgPGhlYWRlcj5cbiAqICAgICBIZWFkZXIgQVxuICogICA8L2hlYWRlcj5cbiAqICAgPGRpdiBjbGFzcz1cImJvZHlcIj5cbiAqICAgICBCb2R5IEFcbiAqICAgPC9kaXY+XG4gKiAgIDxmb290ZXI+XG4gKiAgICAgRm9vdGVyIEFcbiAqICAgPC9mb290ZXI+XG4gKiAgIDxoZWFkZXI+XG4gKiAgICAgSGVhZGVyIEJcbiAqICAgPC9oZWFkZXI+XG4gKiAgIDxkaXYgY2xhc3M9XCJib2R5XCI+XG4gKiAgICAgQm9keSBCXG4gKiAgIDwvZGl2PlxuICogICA8Zm9vdGVyPlxuICogICAgIEZvb3RlciBCXG4gKiAgIDwvZm9vdGVyPlxuICogYGBgXG4gKlxuICogVGhlIGN1c3RvbSBzdGFydCBhbmQgZW5kIHBvaW50cyBmb3IgbmdSZXBlYXQgYWxzbyBzdXBwb3J0IGFsbCBvdGhlciBIVE1MIGRpcmVjdGl2ZSBzeW50YXggZmxhdm9ycyBwcm92aWRlZCBpbiBBbmd1bGFySlMgKHN1Y2hcbiAqIGFzICoqZGF0YS1uZy1yZXBlYXQtc3RhcnQqKiwgKip4LW5nLXJlcGVhdC1zdGFydCoqIGFuZCAqKm5nOnJlcGVhdC1zdGFydCoqKS5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogfCBBbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICB8IE9jY3VycyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IHtAbGluayBuZy4kYW5pbWF0ZSNlbnRlciBlbnRlcn0gfCB3aGVuIGEgbmV3IGl0ZW0gaXMgYWRkZWQgdG8gdGhlIGxpc3Qgb3Igd2hlbiBhbiBpdGVtIGlzIHJldmVhbGVkIGFmdGVyIGEgZmlsdGVyIHxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2xlYXZlIGxlYXZlfSB8IHdoZW4gYW4gaXRlbSBpcyByZW1vdmVkIGZyb20gdGhlIGxpc3Qgb3Igd2hlbiBhbiBpdGVtIGlzIGZpbHRlcmVkIG91dCB8XG4gKiB8IHtAbGluayBuZy4kYW5pbWF0ZSNtb3ZlIG1vdmUgfSB8IHdoZW4gYW4gYWRqYWNlbnQgaXRlbSBpcyBmaWx0ZXJlZCBvdXQgY2F1c2luZyBhIHJlb3JkZXIgb3Igd2hlbiB0aGUgaXRlbSBjb250ZW50cyBhcmUgcmVvcmRlcmVkIHxcbiAqXG4gKiBTZWUgdGhlIGV4YW1wbGUgYmVsb3cgZm9yIGRlZmluaW5nIENTUyBhbmltYXRpb25zIHdpdGggbmdSZXBlYXQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAc2NvcGVcbiAqIEBwcmlvcml0eSAxMDAwXG4gKiBAcGFyYW0ge3JlcGVhdF9leHByZXNzaW9ufSBuZ1JlcGVhdCBUaGUgZXhwcmVzc2lvbiBpbmRpY2F0aW5nIGhvdyB0byBlbnVtZXJhdGUgYSBjb2xsZWN0aW9uLiBUaGVzZVxuICogICBmb3JtYXRzIGFyZSBjdXJyZW50bHkgc3VwcG9ydGVkOlxuICpcbiAqICAgKiBgdmFyaWFibGUgaW4gZXhwcmVzc2lvbmAg4oCTIHdoZXJlIHZhcmlhYmxlIGlzIHRoZSB1c2VyIGRlZmluZWQgbG9vcCB2YXJpYWJsZSBhbmQgYGV4cHJlc3Npb25gXG4gKiAgICAgaXMgYSBzY29wZSBleHByZXNzaW9uIGdpdmluZyB0aGUgY29sbGVjdGlvbiB0byBlbnVtZXJhdGUuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgYWxidW0gaW4gYXJ0aXN0LmFsYnVtc2AuXG4gKlxuICogICAqIGAoa2V5LCB2YWx1ZSkgaW4gZXhwcmVzc2lvbmAg4oCTIHdoZXJlIGBrZXlgIGFuZCBgdmFsdWVgIGNhbiBiZSBhbnkgdXNlciBkZWZpbmVkIGlkZW50aWZpZXJzLFxuICogICAgIGFuZCBgZXhwcmVzc2lvbmAgaXMgdGhlIHNjb3BlIGV4cHJlc3Npb24gZ2l2aW5nIHRoZSBjb2xsZWN0aW9uIHRvIGVudW1lcmF0ZS5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGAobmFtZSwgYWdlKSBpbiB7J2FkYW0nOjEwLCAnYW1hbGllJzoxMn1gLlxuICpcbiAqICAgKiBgdmFyaWFibGUgaW4gZXhwcmVzc2lvbiB0cmFjayBieSB0cmFja2luZ19leHByZXNzaW9uYCDigJMgWW91IGNhbiBhbHNvIHByb3ZpZGUgYW4gb3B0aW9uYWwgdHJhY2tpbmcgZXhwcmVzc2lvblxuICogICAgIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGFzc29jaWF0ZSB0aGUgb2JqZWN0cyBpbiB0aGUgY29sbGVjdGlvbiB3aXRoIHRoZSBET00gZWxlbWVudHMuIElmIG5vIHRyYWNraW5nIGV4cHJlc3Npb25cbiAqICAgICBpcyBzcGVjaWZpZWQsIG5nLXJlcGVhdCBhc3NvY2lhdGVzIGVsZW1lbnRzIGJ5IGlkZW50aXR5LiBJdCBpcyBhbiBlcnJvciB0byBoYXZlXG4gKiAgICAgbW9yZSB0aGFuIG9uZSB0cmFja2luZyBleHByZXNzaW9uIHZhbHVlIHJlc29sdmUgdG8gdGhlIHNhbWUga2V5LiAoVGhpcyB3b3VsZCBtZWFuIHRoYXQgdHdvIGRpc3RpbmN0IG9iamVjdHMgYXJlXG4gKiAgICAgbWFwcGVkIHRvIHRoZSBzYW1lIERPTSBlbGVtZW50LCB3aGljaCBpcyBub3QgcG9zc2libGUuKVxuICpcbiAqICAgICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtd2FybmluZ1wiPlxuICogICAgICAgPHN0cm9uZz5Ob3RlOjwvc3Ryb25nPiB0aGUgYHRyYWNrIGJ5YCBleHByZXNzaW9uIG11c3QgY29tZSBsYXN0IC0gYWZ0ZXIgYW55IGZpbHRlcnMsIGFuZCB0aGUgYWxpYXMgZXhwcmVzc2lvbi5cbiAqICAgICA8L2Rpdj5cbiAqXG4gKiAgICAgRm9yIGV4YW1wbGU6IGBpdGVtIGluIGl0ZW1zYCBpcyBlcXVpdmFsZW50IHRvIGBpdGVtIGluIGl0ZW1zIHRyYWNrIGJ5ICRpZChpdGVtKWAuIFRoaXMgaW1wbGllcyB0aGF0IHRoZSBET00gZWxlbWVudHNcbiAqICAgICB3aWxsIGJlIGFzc29jaWF0ZWQgYnkgaXRlbSBpZGVudGl0eSBpbiB0aGUgYXJyYXkuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB0cmFjayBieSAkaWQoaXRlbSlgLiBBIGJ1aWx0IGluIGAkaWQoKWAgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gYXNzaWduIGEgdW5pcXVlXG4gKiAgICAgYCQkaGFzaEtleWAgcHJvcGVydHkgdG8gZWFjaCBpdGVtIGluIHRoZSBhcnJheS4gVGhpcyBwcm9wZXJ0eSBpcyB0aGVuIHVzZWQgYXMgYSBrZXkgdG8gYXNzb2NpYXRlZCBET00gZWxlbWVudHNcbiAqICAgICB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIGl0ZW0gaW4gdGhlIGFycmF5IGJ5IGlkZW50aXR5LiBNb3ZpbmcgdGhlIHNhbWUgb2JqZWN0IGluIGFycmF5IHdvdWxkIG1vdmUgdGhlIERPTVxuICogICAgIGVsZW1lbnQgaW4gdGhlIHNhbWUgd2F5IGluIHRoZSBET00uXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB0cmFjayBieSBpdGVtLmlkYCBpcyBhIHR5cGljYWwgcGF0dGVybiB3aGVuIHRoZSBpdGVtcyBjb21lIGZyb20gdGhlIGRhdGFiYXNlLiBJbiB0aGlzXG4gKiAgICAgY2FzZSB0aGUgb2JqZWN0IGlkZW50aXR5IGRvZXMgbm90IG1hdHRlci4gVHdvIG9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZXF1aXZhbGVudCBhcyBsb25nIGFzIHRoZWlyIGBpZGBcbiAqICAgICBwcm9wZXJ0eSBpcyBzYW1lLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgfCBmaWx0ZXI6c2VhcmNoVGV4dCB0cmFjayBieSBpdGVtLmlkYCBpcyBhIHBhdHRlcm4gdGhhdCBtaWdodCBiZSB1c2VkIHRvIGFwcGx5IGEgZmlsdGVyXG4gKiAgICAgdG8gaXRlbXMgaW4gY29uanVuY3Rpb24gd2l0aCBhIHRyYWNraW5nIGV4cHJlc3Npb24uXG4gKlxuICogICAqIGB2YXJpYWJsZSBpbiBleHByZXNzaW9uIGFzIGFsaWFzX2V4cHJlc3Npb25gIOKAkyBZb3UgY2FuIGFsc28gcHJvdmlkZSBhbiBvcHRpb25hbCBhbGlhcyBleHByZXNzaW9uIHdoaWNoIHdpbGwgdGhlbiBzdG9yZSB0aGVcbiAqICAgICBpbnRlcm1lZGlhdGUgcmVzdWx0cyBvZiB0aGUgcmVwZWF0ZXIgYWZ0ZXIgdGhlIGZpbHRlcnMgaGF2ZSBiZWVuIGFwcGxpZWQuIFR5cGljYWxseSB0aGlzIGlzIHVzZWQgdG8gcmVuZGVyIGEgc3BlY2lhbCBtZXNzYWdlXG4gKiAgICAgd2hlbiBhIGZpbHRlciBpcyBhY3RpdmUgb24gdGhlIHJlcGVhdGVyLCBidXQgdGhlIGZpbHRlcmVkIHJlc3VsdCBzZXQgaXMgZW1wdHkuXG4gKlxuICogICAgIEZvciBleGFtcGxlOiBgaXRlbSBpbiBpdGVtcyB8IGZpbHRlcjp4IGFzIHJlc3VsdHNgIHdpbGwgc3RvcmUgdGhlIGZyYWdtZW50IG9mIHRoZSByZXBlYXRlZCBpdGVtcyBhcyBgcmVzdWx0c2AsIGJ1dCBvbmx5IGFmdGVyXG4gKiAgICAgdGhlIGl0ZW1zIGhhdmUgYmVlbiBwcm9jZXNzZWQgdGhyb3VnaCB0aGUgZmlsdGVyLlxuICpcbiAqICAgICBQbGVhc2Ugbm90ZSB0aGF0IGBhcyBbdmFyaWFibGUgbmFtZV0gaXMgbm90IGFuIG9wZXJhdG9yIGJ1dCByYXRoZXIgYSBwYXJ0IG9mIG5nUmVwZWF0IG1pY3JvLXN5bnRheCBzbyBpdCBjYW4gYmUgdXNlZCBvbmx5IGF0IHRoZSBlbmRcbiAqICAgICAoYW5kIG5vdCBhcyBvcGVyYXRvciwgaW5zaWRlIGFuIGV4cHJlc3Npb24pLlxuICpcbiAqICAgICBGb3IgZXhhbXBsZTogYGl0ZW0gaW4gaXRlbXMgfCBmaWx0ZXIgOiB4IHwgb3JkZXJCeSA6IG9yZGVyIHwgbGltaXRUbyA6IGxpbWl0IGFzIHJlc3VsdHNgIC5cbiAqXG4gKiBAZXhhbXBsZVxuICogVGhpcyBleGFtcGxlIHVzZXMgYG5nUmVwZWF0YCB0byBkaXNwbGF5IGEgbGlzdCBvZiBwZW9wbGUuIEEgZmlsdGVyIGlzIHVzZWQgdG8gcmVzdHJpY3QgdGhlIGRpc3BsYXllZFxuICogcmVzdWx0cyBieSBuYW1lIG9yIGJ5IGFnZS4gTmV3IChlbnRlcmluZykgYW5kIHJlbW92ZWQgKGxlYXZpbmcpIGl0ZW1zIGFyZSBhbmltYXRlZC5cbiAgPGV4YW1wbGUgbW9kdWxlPVwibmdSZXBlYXRcIiBuYW1lPVwibmdSZXBlYXRcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBuYW1lPVwibmctcmVwZWF0XCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIDxkaXYgbmctY29udHJvbGxlcj1cInJlcGVhdENvbnRyb2xsZXJcIj5cbiAgICAgICAgSSBoYXZlIHt7ZnJpZW5kcy5sZW5ndGh9fSBmcmllbmRzLiBUaGV5IGFyZTpcbiAgICAgICAgPGlucHV0IHR5cGU9XCJzZWFyY2hcIiBuZy1tb2RlbD1cInFcIiBwbGFjZWhvbGRlcj1cImZpbHRlciBmcmllbmRzLi4uXCIgYXJpYS1sYWJlbD1cImZpbHRlciBmcmllbmRzXCIgLz5cbiAgICAgICAgPHVsIGNsYXNzPVwiZXhhbXBsZS1hbmltYXRlLWNvbnRhaW5lclwiPlxuICAgICAgICAgIDxsaSBjbGFzcz1cImFuaW1hdGUtcmVwZWF0XCIgbmctcmVwZWF0PVwiZnJpZW5kIGluIGZyaWVuZHMgfCBmaWx0ZXI6cSBhcyByZXN1bHRzXCI+XG4gICAgICAgICAgICBbe3skaW5kZXggKyAxfX1dIHt7ZnJpZW5kLm5hbWV9fSB3aG8gaXMge3tmcmllbmQuYWdlfX0geWVhcnMgb2xkLlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgPGxpIGNsYXNzPVwiYW5pbWF0ZS1yZXBlYXRcIiBuZy1pZj1cInJlc3VsdHMubGVuZ3RoID09PSAwXCI+XG4gICAgICAgICAgICA8c3Ryb25nPk5vIHJlc3VsdHMgZm91bmQuLi48L3N0cm9uZz5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICA8L3VsPlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJzY3JpcHQuanNcIj5cbiAgICAgIGFuZ3VsYXIubW9kdWxlKCduZ1JlcGVhdCcsIFsnbmdBbmltYXRlJ10pLmNvbnRyb2xsZXIoJ3JlcGVhdENvbnRyb2xsZXInLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAgICAgICAgJHNjb3BlLmZyaWVuZHMgPSBbXG4gICAgICAgICAge25hbWU6J0pvaG4nLCBhZ2U6MjUsIGdlbmRlcjonYm95J30sXG4gICAgICAgICAge25hbWU6J0plc3NpZScsIGFnZTozMCwgZ2VuZGVyOidnaXJsJ30sXG4gICAgICAgICAge25hbWU6J0pvaGFubmEnLCBhZ2U6MjgsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICAgIHtuYW1lOidKb3knLCBhZ2U6MTUsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICAgIHtuYW1lOidNYXJ5JywgYWdlOjI4LCBnZW5kZXI6J2dpcmwnfSxcbiAgICAgICAgICB7bmFtZTonUGV0ZXInLCBhZ2U6OTUsIGdlbmRlcjonYm95J30sXG4gICAgICAgICAge25hbWU6J1NlYmFzdGlhbicsIGFnZTo1MCwgZ2VuZGVyOidib3knfSxcbiAgICAgICAgICB7bmFtZTonRXJpa2EnLCBhZ2U6MjcsIGdlbmRlcjonZ2lybCd9LFxuICAgICAgICAgIHtuYW1lOidQYXRyaWNrJywgYWdlOjQwLCBnZW5kZXI6J2JveSd9LFxuICAgICAgICAgIHtuYW1lOidTYW1hbnRoYScsIGFnZTo2MCwgZ2VuZGVyOidnaXJsJ31cbiAgICAgICAgXTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5leGFtcGxlLWFuaW1hdGUtY29udGFpbmVyIHtcbiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTtcbiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcbiAgICAgICAgbGlzdC1zdHlsZTpub25lO1xuICAgICAgICBtYXJnaW46MDtcbiAgICAgICAgcGFkZGluZzowIDEwcHg7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXJlcGVhdCB7XG4gICAgICAgIGxpbmUtaGVpZ2h0OjMwcHg7XG4gICAgICAgIGxpc3Qtc3R5bGU6bm9uZTtcbiAgICAgICAgYm94LXNpemluZzpib3JkZXItYm94O1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbW92ZSxcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1lbnRlcixcbiAgICAgIC5hbmltYXRlLXJlcGVhdC5uZy1sZWF2ZSB7XG4gICAgICAgIHRyYW5zaXRpb246YWxsIGxpbmVhciAwLjVzO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctbGVhdmUubmctbGVhdmUtYWN0aXZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIge1xuICAgICAgICBvcGFjaXR5OjA7XG4gICAgICAgIG1heC1oZWlnaHQ6MDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLWxlYXZlLFxuICAgICAgLmFuaW1hdGUtcmVwZWF0Lm5nLW1vdmUubmctbW92ZS1hY3RpdmUsXG4gICAgICAuYW5pbWF0ZS1yZXBlYXQubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgb3BhY2l0eToxO1xuICAgICAgICBtYXgtaGVpZ2h0OjMwcHg7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciBmcmllbmRzID0gZWxlbWVudC5hbGwoYnkucmVwZWF0ZXIoJ2ZyaWVuZCBpbiBmcmllbmRzJykpO1xuXG4gICAgICBpdCgnc2hvdWxkIHJlbmRlciBpbml0aWFsIGRhdGEgc2V0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMTApO1xuICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMCkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMV0gSm9obiB3aG8gaXMgMjUgeWVhcnMgb2xkLicpO1xuICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMl0gSmVzc2llIHdobyBpcyAzMCB5ZWFycyBvbGQuJyk7XG4gICAgICAgIGV4cGVjdChmcmllbmRzLmxhc3QoKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ1sxMF0gU2FtYW50aGEgd2hvIGlzIDYwIHllYXJzIG9sZC4nKTtcbiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygnZnJpZW5kcy5sZW5ndGgnKSkuZ2V0VGV4dCgpKVxuICAgICAgICAgICAgLnRvTWF0Y2goXCJJIGhhdmUgMTAgZnJpZW5kcy4gVGhleSBhcmU6XCIpO1xuICAgICAgfSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHVwZGF0ZSByZXBlYXRlciB3aGVuIGZpbHRlciBwcmVkaWNhdGUgY2hhbmdlcycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgZXhwZWN0KGZyaWVuZHMuY291bnQoKSkudG9CZSgxMCk7XG5cbiAgICAgICAgIGVsZW1lbnQoYnkubW9kZWwoJ3EnKSkuc2VuZEtleXMoJ21hJyk7XG5cbiAgICAgICAgIGV4cGVjdChmcmllbmRzLmNvdW50KCkpLnRvQmUoMik7XG4gICAgICAgICBleHBlY3QoZnJpZW5kcy5nZXQoMCkuZ2V0VGV4dCgpKS50b0VxdWFsKCdbMV0gTWFyeSB3aG8gaXMgMjggeWVhcnMgb2xkLicpO1xuICAgICAgICAgZXhwZWN0KGZyaWVuZHMubGFzdCgpLmdldFRleHQoKSkudG9FcXVhbCgnWzJdIFNhbWFudGhhIHdobyBpcyA2MCB5ZWFycyBvbGQuJyk7XG4gICAgICAgfSk7XG4gICAgICA8L2ZpbGU+XG4gICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdSZXBlYXREaXJlY3RpdmUgPSBbJyRwYXJzZScsICckYW5pbWF0ZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCRwYXJzZSwgJGFuaW1hdGUsICRjb21waWxlKSB7XG4gIHZhciBOR19SRU1PVkVEID0gJyQkTkdfUkVNT1ZFRCc7XG4gIHZhciBuZ1JlcGVhdE1pbkVyciA9IG1pbkVycignbmdSZXBlYXQnKTtcblxuICB2YXIgdXBkYXRlU2NvcGUgPSBmdW5jdGlvbihzY29wZSwgaW5kZXgsIHZhbHVlSWRlbnRpZmllciwgdmFsdWUsIGtleUlkZW50aWZpZXIsIGtleSwgYXJyYXlMZW5ndGgpIHtcbiAgICAvLyBUT0RPKHBlcmYpOiBnZW5lcmF0ZSBzZXR0ZXJzIHRvIHNoYXZlIG9mZiB+NDBtcyBvciAxLTEuNSVcbiAgICBzY29wZVt2YWx1ZUlkZW50aWZpZXJdID0gdmFsdWU7XG4gICAgaWYgKGtleUlkZW50aWZpZXIpIHNjb3BlW2tleUlkZW50aWZpZXJdID0ga2V5O1xuICAgIHNjb3BlLiRpbmRleCA9IGluZGV4O1xuICAgIHNjb3BlLiRmaXJzdCA9IChpbmRleCA9PT0gMCk7XG4gICAgc2NvcGUuJGxhc3QgPSAoaW5kZXggPT09IChhcnJheUxlbmd0aCAtIDEpKTtcbiAgICBzY29wZS4kbWlkZGxlID0gIShzY29wZS4kZmlyc3QgfHwgc2NvcGUuJGxhc3QpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgc2NvcGUuJG9kZCA9ICEoc2NvcGUuJGV2ZW4gPSAoaW5kZXggJiAxKSA9PT0gMCk7XG4gIH07XG5cbiAgdmFyIGdldEJsb2NrU3RhcnQgPSBmdW5jdGlvbihibG9jaykge1xuICAgIHJldHVybiBibG9jay5jbG9uZVswXTtcbiAgfTtcblxuICB2YXIgZ2V0QmxvY2tFbmQgPSBmdW5jdGlvbihibG9jaykge1xuICAgIHJldHVybiBibG9jay5jbG9uZVtibG9jay5jbG9uZS5sZW5ndGggLSAxXTtcbiAgfTtcblxuXG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgdHJhbnNjbHVkZTogJ2VsZW1lbnQnLFxuICAgIHByaW9yaXR5OiAxMDAwLFxuICAgIHRlcm1pbmFsOiB0cnVlLFxuICAgICQkdGxiOiB0cnVlLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIG5nUmVwZWF0Q29tcGlsZSgkZWxlbWVudCwgJGF0dHIpIHtcbiAgICAgIHZhciBleHByZXNzaW9uID0gJGF0dHIubmdSZXBlYXQ7XG4gICAgICB2YXIgbmdSZXBlYXRFbmRDb21tZW50ID0gJGNvbXBpbGUuJCRjcmVhdGVDb21tZW50KCdlbmQgbmdSZXBlYXQnLCBleHByZXNzaW9uKTtcblxuICAgICAgdmFyIG1hdGNoID0gZXhwcmVzc2lvbi5tYXRjaCgvXlxccyooW1xcc1xcU10rPylcXHMraW5cXHMrKFtcXHNcXFNdKz8pKD86XFxzK2FzXFxzKyhbXFxzXFxTXSs/KSk/KD86XFxzK3RyYWNrXFxzK2J5XFxzKyhbXFxzXFxTXSs/KSk/XFxzKiQvKTtcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignaWV4cCcsICdFeHBlY3RlZCBleHByZXNzaW9uIGluIGZvcm0gb2YgXFwnX2l0ZW1fIGluIF9jb2xsZWN0aW9uX1sgdHJhY2sgYnkgX2lkX11cXCcgYnV0IGdvdCBcXCd7MH1cXCcuJyxcbiAgICAgICAgICAgIGV4cHJlc3Npb24pO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGhzID0gbWF0Y2hbMV07XG4gICAgICB2YXIgcmhzID0gbWF0Y2hbMl07XG4gICAgICB2YXIgYWxpYXNBcyA9IG1hdGNoWzNdO1xuICAgICAgdmFyIHRyYWNrQnlFeHAgPSBtYXRjaFs0XTtcblxuICAgICAgbWF0Y2ggPSBsaHMubWF0Y2goL14oPzooXFxzKlskXFx3XSspfFxcKFxccyooWyRcXHddKylcXHMqLFxccyooWyRcXHddKylcXHMqXFwpKSQvKTtcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignaWlkZXhwJywgJ1xcJ19pdGVtX1xcJyBpbiBcXCdfaXRlbV8gaW4gX2NvbGxlY3Rpb25fXFwnIHNob3VsZCBiZSBhbiBpZGVudGlmaWVyIG9yIFxcJyhfa2V5XywgX3ZhbHVlXylcXCcgZXhwcmVzc2lvbiwgYnV0IGdvdCBcXCd7MH1cXCcuJyxcbiAgICAgICAgICAgIGxocyk7XG4gICAgICB9XG4gICAgICB2YXIgdmFsdWVJZGVudGlmaWVyID0gbWF0Y2hbM10gfHwgbWF0Y2hbMV07XG4gICAgICB2YXIga2V5SWRlbnRpZmllciA9IG1hdGNoWzJdO1xuXG4gICAgICBpZiAoYWxpYXNBcyAmJiAoIS9eWyRhLXpBLVpfXVskYS16QS1aMC05X10qJC8udGVzdChhbGlhc0FzKSB8fFxuICAgICAgICAgIC9eKG51bGx8dW5kZWZpbmVkfHRoaXN8XFwkaW5kZXh8XFwkZmlyc3R8XFwkbWlkZGxlfFxcJGxhc3R8XFwkZXZlbnxcXCRvZGR8XFwkcGFyZW50fFxcJHJvb3R8XFwkaWQpJC8udGVzdChhbGlhc0FzKSkpIHtcbiAgICAgICAgdGhyb3cgbmdSZXBlYXRNaW5FcnIoJ2JhZGlkZW50JywgJ2FsaWFzIFxcJ3swfVxcJyBpcyBpbnZhbGlkIC0tLSBtdXN0IGJlIGEgdmFsaWQgSlMgaWRlbnRpZmllciB3aGljaCBpcyBub3QgYSByZXNlcnZlZCBuYW1lLicsXG4gICAgICAgICAgYWxpYXNBcyk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmFja0J5RXhwR2V0dGVyLCB0cmFja0J5SWRFeHBGbiwgdHJhY2tCeUlkQXJyYXlGbiwgdHJhY2tCeUlkT2JqRm47XG4gICAgICB2YXIgaGFzaEZuTG9jYWxzID0geyRpZDogaGFzaEtleX07XG5cbiAgICAgIGlmICh0cmFja0J5RXhwKSB7XG4gICAgICAgIHRyYWNrQnlFeHBHZXR0ZXIgPSAkcGFyc2UodHJhY2tCeUV4cCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFja0J5SWRBcnJheUZuID0gZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBoYXNoS2V5KHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgdHJhY2tCeUlkT2JqRm4gPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gbmdSZXBlYXRMaW5rKCRzY29wZSwgJGVsZW1lbnQsICRhdHRyLCBjdHJsLCAkdHJhbnNjbHVkZSkge1xuXG4gICAgICAgIGlmICh0cmFja0J5RXhwR2V0dGVyKSB7XG4gICAgICAgICAgdHJhY2tCeUlkRXhwRm4gPSBmdW5jdGlvbihrZXksIHZhbHVlLCBpbmRleCkge1xuICAgICAgICAgICAgLy8gYXNzaWduIGtleSwgdmFsdWUsIGFuZCAkaW5kZXggdG8gdGhlIGxvY2FscyBzbyB0aGF0IHRoZXkgY2FuIGJlIHVzZWQgaW4gaGFzaCBmdW5jdGlvbnNcbiAgICAgICAgICAgIGlmIChrZXlJZGVudGlmaWVyKSBoYXNoRm5Mb2NhbHNba2V5SWRlbnRpZmllcl0gPSBrZXk7XG4gICAgICAgICAgICBoYXNoRm5Mb2NhbHNbdmFsdWVJZGVudGlmaWVyXSA9IHZhbHVlO1xuICAgICAgICAgICAgaGFzaEZuTG9jYWxzLiRpbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgcmV0dXJuIHRyYWNrQnlFeHBHZXR0ZXIoJHNjb3BlLCBoYXNoRm5Mb2NhbHMpO1xuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9yZSBhIGxpc3Qgb2YgZWxlbWVudHMgZnJvbSBwcmV2aW91cyBydW4uIFRoaXMgaXMgYSBoYXNoIHdoZXJlIGtleSBpcyB0aGUgaXRlbSBmcm9tIHRoZVxuICAgICAgICAvLyBpdGVyYXRvciwgYW5kIHRoZSB2YWx1ZSBpcyBvYmplY3RzIHdpdGggZm9sbG93aW5nIHByb3BlcnRpZXMuXG4gICAgICAgIC8vICAgLSBzY29wZTogYm91bmQgc2NvcGVcbiAgICAgICAgLy8gICAtIGNsb25lOiBwcmV2aW91cyBlbGVtZW50LlxuICAgICAgICAvLyAgIC0gaW5kZXg6IHBvc2l0aW9uXG4gICAgICAgIC8vXG4gICAgICAgIC8vIFdlIGFyZSB1c2luZyBuby1wcm90byBvYmplY3Qgc28gdGhhdCB3ZSBkb24ndCBuZWVkIHRvIGd1YXJkIGFnYWluc3QgaW5oZXJpdGVkIHByb3BzIHZpYVxuICAgICAgICAvLyBoYXNPd25Qcm9wZXJ0eS5cbiAgICAgICAgdmFyIGxhc3RCbG9ja01hcCA9IGNyZWF0ZU1hcCgpO1xuXG4gICAgICAgIC8vd2F0Y2ggcHJvcHNcbiAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24ocmhzLCBmdW5jdGlvbiBuZ1JlcGVhdEFjdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgICAgICAgdmFyIGluZGV4LCBsZW5ndGgsXG4gICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9ICRlbGVtZW50WzBdLCAgICAgLy8gbm9kZSB0aGF0IGNsb25lZCBub2RlcyBzaG91bGQgYmUgaW5zZXJ0ZWQgYWZ0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplZCB0byB0aGUgY29tbWVudCBub2RlIGFuY2hvclxuICAgICAgICAgICAgICBuZXh0Tm9kZSxcbiAgICAgICAgICAgICAgLy8gU2FtZSBhcyBsYXN0QmxvY2tNYXAgYnV0IGl0IGhhcyB0aGUgY3VycmVudCBzdGF0ZS4gSXQgd2lsbCBiZWNvbWUgdGhlXG4gICAgICAgICAgICAgIC8vIGxhc3RCbG9ja01hcCBvbiB0aGUgbmV4dCBpdGVyYXRpb24uXG4gICAgICAgICAgICAgIG5leHRCbG9ja01hcCA9IGNyZWF0ZU1hcCgpLFxuICAgICAgICAgICAgICBjb2xsZWN0aW9uTGVuZ3RoLFxuICAgICAgICAgICAgICBrZXksIHZhbHVlLCAvLyBrZXkvdmFsdWUgb2YgaXRlcmF0aW9uXG4gICAgICAgICAgICAgIHRyYWNrQnlJZCxcbiAgICAgICAgICAgICAgdHJhY2tCeUlkRm4sXG4gICAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzLFxuICAgICAgICAgICAgICBibG9jaywgICAgICAgLy8gbGFzdCBvYmplY3QgaW5mb3JtYXRpb24ge3Njb3BlLCBlbGVtZW50LCBpZH1cbiAgICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXIsXG4gICAgICAgICAgICAgIGVsZW1lbnRzVG9SZW1vdmU7XG5cbiAgICAgICAgICBpZiAoYWxpYXNBcykge1xuICAgICAgICAgICAgJHNjb3BlW2FsaWFzQXNdID0gY29sbGVjdGlvbjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzID0gY29sbGVjdGlvbjtcbiAgICAgICAgICAgIHRyYWNrQnlJZEZuID0gdHJhY2tCeUlkRXhwRm4gfHwgdHJhY2tCeUlkQXJyYXlGbjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJhY2tCeUlkRm4gPSB0cmFja0J5SWRFeHBGbiB8fCB0cmFja0J5SWRPYmpGbjtcbiAgICAgICAgICAgIC8vIGlmIG9iamVjdCwgZXh0cmFjdCBrZXlzLCBpbiBlbnVtZXJhdGlvbiBvcmRlciwgdW5zb3J0ZWRcbiAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpdGVtS2V5IGluIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29sbGVjdGlvbiwgaXRlbUtleSkgJiYgaXRlbUtleS5jaGFyQXQoMCkgIT09ICckJykge1xuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25LZXlzLnB1c2goaXRlbUtleSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb2xsZWN0aW9uTGVuZ3RoID0gY29sbGVjdGlvbktleXMubGVuZ3RoO1xuICAgICAgICAgIG5leHRCbG9ja09yZGVyID0gbmV3IEFycmF5KGNvbGxlY3Rpb25MZW5ndGgpO1xuXG4gICAgICAgICAgLy8gbG9jYXRlIGV4aXN0aW5nIGl0ZW1zXG4gICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgY29sbGVjdGlvbkxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAga2V5ID0gKGNvbGxlY3Rpb24gPT09IGNvbGxlY3Rpb25LZXlzKSA/IGluZGV4IDogY29sbGVjdGlvbktleXNbaW5kZXhdO1xuICAgICAgICAgICAgdmFsdWUgPSBjb2xsZWN0aW9uW2tleV07XG4gICAgICAgICAgICB0cmFja0J5SWQgPSB0cmFja0J5SWRGbihrZXksIHZhbHVlLCBpbmRleCk7XG4gICAgICAgICAgICBpZiAobGFzdEJsb2NrTWFwW3RyYWNrQnlJZF0pIHtcbiAgICAgICAgICAgICAgLy8gZm91bmQgcHJldmlvdXNseSBzZWVuIGJsb2NrXG4gICAgICAgICAgICAgIGJsb2NrID0gbGFzdEJsb2NrTWFwW3RyYWNrQnlJZF07XG4gICAgICAgICAgICAgIGRlbGV0ZSBsYXN0QmxvY2tNYXBbdHJhY2tCeUlkXTtcbiAgICAgICAgICAgICAgbmV4dEJsb2NrTWFwW3RyYWNrQnlJZF0gPSBibG9jaztcbiAgICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXJbaW5kZXhdID0gYmxvY2s7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5leHRCbG9ja01hcFt0cmFja0J5SWRdKSB7XG4gICAgICAgICAgICAgIC8vIGlmIGNvbGxpc2lvbiBkZXRlY3RlZC4gcmVzdG9yZSBsYXN0QmxvY2tNYXAgYW5kIHRocm93IGFuIGVycm9yXG4gICAgICAgICAgICAgIGZvckVhY2gobmV4dEJsb2NrT3JkZXIsIGZ1bmN0aW9uKGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrICYmIGJsb2NrLnNjb3BlKSBsYXN0QmxvY2tNYXBbYmxvY2suaWRdID0gYmxvY2s7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB0aHJvdyBuZ1JlcGVhdE1pbkVycignZHVwZXMnLFxuICAgICAgICAgICAgICAgICAgJ0R1cGxpY2F0ZXMgaW4gYSByZXBlYXRlciBhcmUgbm90IGFsbG93ZWQuIFVzZSBcXCd0cmFjayBieVxcJyBleHByZXNzaW9uIHRvIHNwZWNpZnkgdW5pcXVlIGtleXMuIFJlcGVhdGVyOiB7MH0sIER1cGxpY2F0ZSBrZXk6IHsxfSwgRHVwbGljYXRlIHZhbHVlOiB7Mn0nLFxuICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbiwgdHJhY2tCeUlkLCB2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBuZXcgbmV2ZXIgYmVmb3JlIHNlZW4gYmxvY2tcbiAgICAgICAgICAgICAgbmV4dEJsb2NrT3JkZXJbaW5kZXhdID0ge2lkOiB0cmFja0J5SWQsIHNjb3BlOiB1bmRlZmluZWQsIGNsb25lOiB1bmRlZmluZWR9O1xuICAgICAgICAgICAgICBuZXh0QmxvY2tNYXBbdHJhY2tCeUlkXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gcmVtb3ZlIGxlZnRvdmVyIGl0ZW1zXG4gICAgICAgICAgZm9yICh2YXIgYmxvY2tLZXkgaW4gbGFzdEJsb2NrTWFwKSB7XG4gICAgICAgICAgICBibG9jayA9IGxhc3RCbG9ja01hcFtibG9ja0tleV07XG4gICAgICAgICAgICBlbGVtZW50c1RvUmVtb3ZlID0gZ2V0QmxvY2tOb2RlcyhibG9jay5jbG9uZSk7XG4gICAgICAgICAgICAkYW5pbWF0ZS5sZWF2ZShlbGVtZW50c1RvUmVtb3ZlKTtcbiAgICAgICAgICAgIGlmIChlbGVtZW50c1RvUmVtb3ZlWzBdLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgLy8gaWYgdGhlIGVsZW1lbnQgd2FzIG5vdCByZW1vdmVkIHlldCBiZWNhdXNlIG9mIHBlbmRpbmcgYW5pbWF0aW9uLCBtYXJrIGl0IGFzIGRlbGV0ZWRcbiAgICAgICAgICAgICAgLy8gc28gdGhhdCB3ZSBjYW4gaWdub3JlIGl0IGxhdGVyXG4gICAgICAgICAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBlbGVtZW50c1RvUmVtb3ZlLmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50c1RvUmVtb3ZlW2luZGV4XVtOR19SRU1PVkVEXSA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJsb2NrLnNjb3BlLiRkZXN0cm95KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gd2UgYXJlIG5vdCB1c2luZyBmb3JFYWNoIGZvciBwZXJmIHJlYXNvbnMgKHRyeWluZyB0byBhdm9pZCAjY2FsbClcbiAgICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb2xsZWN0aW9uTGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBrZXkgPSAoY29sbGVjdGlvbiA9PT0gY29sbGVjdGlvbktleXMpID8gaW5kZXggOiBjb2xsZWN0aW9uS2V5c1tpbmRleF07XG4gICAgICAgICAgICB2YWx1ZSA9IGNvbGxlY3Rpb25ba2V5XTtcbiAgICAgICAgICAgIGJsb2NrID0gbmV4dEJsb2NrT3JkZXJbaW5kZXhdO1xuXG4gICAgICAgICAgICBpZiAoYmxvY2suc2NvcGUpIHtcbiAgICAgICAgICAgICAgLy8gaWYgd2UgaGF2ZSBhbHJlYWR5IHNlZW4gdGhpcyBvYmplY3QsIHRoZW4gd2UgbmVlZCB0byByZXVzZSB0aGVcbiAgICAgICAgICAgICAgLy8gYXNzb2NpYXRlZCBzY29wZS9lbGVtZW50XG5cbiAgICAgICAgICAgICAgbmV4dE5vZGUgPSBwcmV2aW91c05vZGU7XG5cbiAgICAgICAgICAgICAgLy8gc2tpcCBub2RlcyB0aGF0IGFyZSBhbHJlYWR5IHBlbmRpbmcgcmVtb3ZhbCB2aWEgbGVhdmUgYW5pbWF0aW9uXG4gICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IG5leHROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgICB9IHdoaWxlIChuZXh0Tm9kZSAmJiBuZXh0Tm9kZVtOR19SRU1PVkVEXSk7XG5cbiAgICAgICAgICAgICAgaWYgKGdldEJsb2NrU3RhcnQoYmxvY2spICE9PSBuZXh0Tm9kZSkge1xuICAgICAgICAgICAgICAgIC8vIGV4aXN0aW5nIGl0ZW0gd2hpY2ggZ290IG1vdmVkXG4gICAgICAgICAgICAgICAgJGFuaW1hdGUubW92ZShnZXRCbG9ja05vZGVzKGJsb2NrLmNsb25lKSwgbnVsbCwgcHJldmlvdXNOb2RlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBwcmV2aW91c05vZGUgPSBnZXRCbG9ja0VuZChibG9jayk7XG4gICAgICAgICAgICAgIHVwZGF0ZVNjb3BlKGJsb2NrLnNjb3BlLCBpbmRleCwgdmFsdWVJZGVudGlmaWVyLCB2YWx1ZSwga2V5SWRlbnRpZmllciwga2V5LCBjb2xsZWN0aW9uTGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIG5ldyBpdGVtIHdoaWNoIHdlIGRvbid0IGtub3cgYWJvdXRcbiAgICAgICAgICAgICAgJHRyYW5zY2x1ZGUoZnVuY3Rpb24gbmdSZXBlYXRUcmFuc2NsdWRlKGNsb25lLCBzY29wZSkge1xuICAgICAgICAgICAgICAgIGJsb2NrLnNjb3BlID0gc2NvcGU7XG4gICAgICAgICAgICAgICAgLy8gaHR0cDovL2pzcGVyZi5jb20vY2xvbmUtdnMtY3JlYXRlY29tbWVudFxuICAgICAgICAgICAgICAgIHZhciBlbmROb2RlID0gbmdSZXBlYXRFbmRDb21tZW50LmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgY2xvbmVbY2xvbmUubGVuZ3RoKytdID0gZW5kTm9kZTtcblxuICAgICAgICAgICAgICAgICRhbmltYXRlLmVudGVyKGNsb25lLCBudWxsLCBwcmV2aW91c05vZGUpO1xuICAgICAgICAgICAgICAgIHByZXZpb3VzTm9kZSA9IGVuZE5vZGU7XG4gICAgICAgICAgICAgICAgLy8gTm90ZTogV2Ugb25seSBuZWVkIHRoZSBmaXJzdC9sYXN0IG5vZGUgb2YgdGhlIGNsb25lZCBub2Rlcy5cbiAgICAgICAgICAgICAgICAvLyBIb3dldmVyLCB3ZSBuZWVkIHRvIGtlZXAgdGhlIHJlZmVyZW5jZSB0byB0aGUganFsaXRlIHdyYXBwZXIgYXMgaXQgbWlnaHQgYmUgY2hhbmdlZCBsYXRlclxuICAgICAgICAgICAgICAgIC8vIGJ5IGEgZGlyZWN0aXZlIHdpdGggdGVtcGxhdGVVcmwgd2hlbiBpdHMgdGVtcGxhdGUgYXJyaXZlcy5cbiAgICAgICAgICAgICAgICBibG9jay5jbG9uZSA9IGNsb25lO1xuICAgICAgICAgICAgICAgIG5leHRCbG9ja01hcFtibG9jay5pZF0gPSBibG9jaztcbiAgICAgICAgICAgICAgICB1cGRhdGVTY29wZShibG9jay5zY29wZSwgaW5kZXgsIHZhbHVlSWRlbnRpZmllciwgdmFsdWUsIGtleUlkZW50aWZpZXIsIGtleSwgY29sbGVjdGlvbkxlbmd0aCk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0QmxvY2tNYXAgPSBuZXh0QmxvY2tNYXA7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxudmFyIE5HX0hJREVfQ0xBU1MgPSAnbmctaGlkZSc7XG52YXIgTkdfSElERV9JTl9QUk9HUkVTU19DTEFTUyA9ICduZy1oaWRlLWFuaW1hdGUnO1xuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1Nob3dcbiAqIEBtdWx0aUVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdTaG93YCBkaXJlY3RpdmUgc2hvd3Mgb3IgaGlkZXMgdGhlIGdpdmVuIEhUTUwgZWxlbWVudCBiYXNlZCBvbiB0aGUgZXhwcmVzc2lvbiBwcm92aWRlZCB0b1xuICogdGhlIGBuZ1Nob3dgIGF0dHJpYnV0ZS5cbiAqXG4gKiBUaGUgZWxlbWVudCBpcyBzaG93biBvciBoaWRkZW4gYnkgcmVtb3Zpbmcgb3IgYWRkaW5nIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBvbnRvIHRoZSBlbGVtZW50LlxuICogVGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIHByZWRlZmluZWQgaW4gQW5ndWxhckpTIGFuZCBzZXRzIHRoZSBkaXNwbGF5IHN0eWxlIHRvIG5vbmUgKHVzaW5nIGFuXG4gKiBgIWltcG9ydGFudGAgZmxhZykuIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgSFRNTCBmaWxlIChzZWVcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDc3AgbmdDc3B9KS5cbiAqXG4gKiBgYGBodG1sXG4gKiA8IS0tIHdoZW4gJHNjb3BlLm15VmFsdWUgaXMgdHJ1dGh5IChlbGVtZW50IGlzIHZpc2libGUpIC0tPlxuICogPGRpdiBuZy1zaG93PVwibXlWYWx1ZVwiPjwvZGl2PlxuICpcbiAqIDwhLS0gd2hlbiAkc2NvcGUubXlWYWx1ZSBpcyBmYWxzeSAoZWxlbWVudCBpcyBoaWRkZW4pIC0tPlxuICogPGRpdiBuZy1zaG93PVwibXlWYWx1ZVwiIGNsYXNzPVwibmctaGlkZVwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYG5nU2hvd2AgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBmYWxzeSB2YWx1ZSB0aGVuIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBpcyBhZGRlZFxuICogdG8gdGhlIGNsYXNzIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBjYXVzaW5nIGl0IHRvIGJlY29tZSBoaWRkZW4uIFdoZW4gdHJ1dGh5LCB0aGUgYC5uZy1oaWRlYFxuICogQ1NTIGNsYXNzIGlzIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCBjYXVzaW5nIHRoZSBlbGVtZW50IG5vdCB0byBhcHBlYXIgaGlkZGVuLlxuICpcbiAqICMjIFdoeSBpcyBgIWltcG9ydGFudGAgdXNlZD9cbiAqXG4gKiBZb3UgbWF5IGJlIHdvbmRlcmluZyB3aHkgYCFpbXBvcnRhbnRgIGlzIHVzZWQgZm9yIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcy4gVGhpcyBpcyBiZWNhdXNlIHRoZVxuICogYC5uZy1oaWRlYCBzZWxlY3RvciBjYW4gYmUgZWFzaWx5IG92ZXJyaWRkZW4gYnkgaGVhdmllciBzZWxlY3RvcnMuIEZvciBleGFtcGxlLCBzb21ldGhpbmcgYXNcbiAqIHNpbXBsZSBhcyBjaGFuZ2luZyB0aGUgZGlzcGxheSBzdHlsZSBvbiBhIEhUTUwgbGlzdCBpdGVtIHdvdWxkIG1ha2UgaGlkZGVuIGVsZW1lbnRzIGFwcGVhclxuICogdmlzaWJsZS4gVGhpcyBhbHNvIGJlY29tZXMgYSBiaWdnZXIgaXNzdWUgd2hlbiBkZWFsaW5nIHdpdGggQ1NTIGZyYW1ld29ya3MuXG4gKlxuICogQnkgdXNpbmcgYCFpbXBvcnRhbnRgLCB0aGUgc2hvdyBhbmQgaGlkZSBiZWhhdmlvciB3aWxsIHdvcmsgYXMgZXhwZWN0ZWQgZGVzcGl0ZSBhbnkgY2xhc2ggYmV0d2VlblxuICogQ1NTIHNlbGVjdG9yIHNwZWNpZmljaXR5ICh3aGVuIGAhaW1wb3J0YW50YCBpc24ndCB1c2VkIHdpdGggYW55IGNvbmZsaWN0aW5nIHN0eWxlcykuIElmIGFcbiAqIGRldmVsb3BlciBjaG9vc2VzIHRvIG92ZXJyaWRlIHRoZSBzdHlsaW5nIHRvIGNoYW5nZSBob3cgdG8gaGlkZSBhbiBlbGVtZW50IHRoZW4gaXQgaXMganVzdCBhXG4gKiBtYXR0ZXIgb2YgdXNpbmcgYCFpbXBvcnRhbnRgIGluIHRoZWlyIG93biBDU1MgY29kZS5cbiAqXG4gKiAjIyMgT3ZlcnJpZGluZyBgLm5nLWhpZGVgXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGAubmctaGlkZWAgY2xhc3Mgd2lsbCBzdHlsZSB0aGUgZWxlbWVudCB3aXRoIGBkaXNwbGF5OiBub25lICFpbXBvcnRhbnRgLiBJZiB5b3VcbiAqIHdpc2ggdG8gY2hhbmdlIHRoZSBoaWRlIGJlaGF2aW9yIHdpdGggYG5nU2hvd2AvYG5nSGlkZWAsIHlvdSBjYW4gc2ltcGx5IG92ZXJ3cml0ZSB0aGUgc3R5bGVzIGZvclxuICogdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzLiBOb3RlIHRoYXQgdGhlIHNlbGVjdG9yIHRoYXQgbmVlZHMgdG8gYmUgdXNlZCBpcyBhY3R1YWxseVxuICogYC5uZy1oaWRlOm5vdCgubmctaGlkZS1hbmltYXRlKWAgdG8gY29wZSB3aXRoIGV4dHJhIGFuaW1hdGlvbiBjbGFzc2VzIHRoYXQgY2FuIGJlIGFkZGVkLlxuICpcbiAqIGBgYGNzc1xuICogLm5nLWhpZGU6bm90KC5uZy1oaWRlLWFuaW1hdGUpIHtcbiAqICAgLyYjNDI7IFRoZXNlIGFyZSBqdXN0IGFsdGVybmF0aXZlIHdheXMgb2YgaGlkaW5nIGFuIGVsZW1lbnQgJiM0MjsvXG4gKiAgIGRpc3BsYXk6IGJsb2NrIWltcG9ydGFudDtcbiAqICAgcG9zaXRpb246IGFic29sdXRlO1xuICogICB0b3A6IC05OTk5cHg7XG4gKiAgIGxlZnQ6IC05OTk5cHg7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBCeSBkZWZhdWx0IHlvdSBkb24ndCBuZWVkIHRvIG92ZXJyaWRlIGFueXRoaW5nIGluIENTUyBhbmQgdGhlIGFuaW1hdGlvbnMgd2lsbCB3b3JrIGFyb3VuZCB0aGVcbiAqIGRpc3BsYXkgc3R5bGUuXG4gKlxuICogIyMgQSBub3RlIGFib3V0IGFuaW1hdGlvbnMgd2l0aCBgbmdTaG93YFxuICpcbiAqIEFuaW1hdGlvbnMgaW4gYG5nU2hvd2AvYG5nSGlkZWAgd29yayB3aXRoIHRoZSBzaG93IGFuZCBoaWRlIGV2ZW50cyB0aGF0IGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGVcbiAqIGRpcmVjdGl2ZSBleHByZXNzaW9uIGlzIHRydWUgYW5kIGZhbHNlLiBUaGlzIHN5c3RlbSB3b3JrcyBsaWtlIHRoZSBhbmltYXRpb24gc3lzdGVtIHByZXNlbnQgd2l0aFxuICogYG5nQ2xhc3NgIGV4Y2VwdCB0aGF0IHlvdSBtdXN0IGFsc28gaW5jbHVkZSB0aGUgYCFpbXBvcnRhbnRgIGZsYWcgdG8gb3ZlcnJpZGUgdGhlIGRpc3BsYXlcbiAqIHByb3BlcnR5IHNvIHRoYXQgdGhlIGVsZW1lbnRzIGFyZSBub3QgYWN0dWFsbHkgaGlkZGVuIGR1cmluZyB0aGUgYW5pbWF0aW9uLlxuICpcbiAqIGBgYGNzc1xuICogLyYjNDI7IEEgd29ya2luZyBleGFtcGxlIGNhbiBiZSBmb3VuZCBhdCB0aGUgYm90dG9tIG9mIHRoaXMgcGFnZS4gJiM0MjsvXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCwgLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUge1xuICogICB0cmFuc2l0aW9uOiBhbGwgMC41cyBsaW5lYXI7XG4gKiB9XG4gKlxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQubmctaGlkZS1hZGQtYWN0aXZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7IC4uLiB9XG4gKiBgYGBcbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCwgYXMgb2YgQW5ndWxhckpTIHZlcnNpb24gMS4zLCB0aGVyZSBpcyBubyBuZWVkIHRvIGNoYW5nZSB0aGUgZGlzcGxheSBwcm9wZXJ0eVxuICogdG8gYmxvY2sgZHVyaW5nIGFuaW1hdGlvbiBzdGF0ZXMgLSBuZ0FuaW1hdGUgd2lsbCBhdXRvbWF0aWNhbGx5IGhhbmRsZSB0aGUgc3R5bGUgdG9nZ2xpbmcgZm9yIHlvdS5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogfCBBbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPY2N1cnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IHtAbGluayAkYW5pbWF0ZSNhZGRDbGFzcyBhZGRDbGFzc30gYC5uZy1oaWRlYCAgICAgICB8IEFmdGVyIHRoZSBgbmdTaG93YCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIG5vbiB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIHRoZSBjb250ZW50cyBhcmUgc2V0IHRvIGhpZGRlbi4gfFxuICogfCB7QGxpbmsgJGFuaW1hdGUjcmVtb3ZlQ2xhc3MgcmVtb3ZlQ2xhc3N9IGAubmctaGlkZWAgfCBBZnRlciB0aGUgYG5nU2hvd2AgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUgYW5kIGp1c3QgYmVmb3JlIGNvbnRlbnRzIGFyZSBzZXQgdG8gdmlzaWJsZS4gICAgICAgIHxcbiAqXG4gKiBAZWxlbWVudCBBTllcbiAqIEBwYXJhbSB7ZXhwcmVzc2lvbn0gbmdTaG93IElmIHRoZSB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBleHByZXNzaW9ufSBpcyB0cnV0aHkvZmFsc3kgdGhlbiB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgaXMgc2hvd24vaGlkZGVuIHJlc3BlY3RpdmVseS5cbiAqXG4gKiBAZXhhbXBsZVxuICogQSBzaW1wbGUgZXhhbXBsZSwgYW5pbWF0aW5nIHRoZSBlbGVtZW50J3Mgb3BhY2l0eTpcbiAqXG4gIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIG5hbWU9XCJuZy1zaG93LXNpbXBsZVwiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICBTaG93OiA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmctbW9kZWw9XCJjaGVja2VkXCIgYXJpYS1sYWJlbD1cIlRvZ2dsZSBuZ1Nob3dcIj48YnIgLz5cbiAgICAgIDxkaXYgY2xhc3M9XCJjaGVjay1lbGVtZW50IGFuaW1hdGUtc2hvdy1oaWRlXCIgbmctc2hvdz1cImNoZWNrZWRcIj5cbiAgICAgICAgSSBzaG93IHVwIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgLmFuaW1hdGUtc2hvdy1oaWRlLm5nLWhpZGUge1xuICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1zaG93LWhpZGUubmctaGlkZS1hZGQsXG4gICAgICAuYW5pbWF0ZS1zaG93LWhpZGUubmctaGlkZS1yZW1vdmUge1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgbGluZWFyIDAuNXM7XG4gICAgICB9XG5cbiAgICAgIC5jaGVjay1lbGVtZW50IHtcbiAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgIG9wYWNpdHk6IDE7XG4gICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmdTaG93JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjaGVja2JveCA9IGVsZW1lbnQoYnkubW9kZWwoJ2NoZWNrZWQnKSk7XG4gICAgICAgIHZhciBjaGVja0VsZW0gPSBlbGVtZW50KGJ5LmNzcygnLmNoZWNrLWVsZW1lbnQnKSk7XG5cbiAgICAgICAgZXhwZWN0KGNoZWNrRWxlbS5pc0Rpc3BsYXllZCgpKS50b0JlKGZhbHNlKTtcbiAgICAgICAgY2hlY2tib3guY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrRWxlbS5pc0Rpc3BsYXllZCgpKS50b0JlKHRydWUpO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKlxuICogPGhyIC8+XG4gKiBAZXhhbXBsZVxuICogQSBtb3JlIGNvbXBsZXggZXhhbXBsZSwgZmVhdHVyaW5nIGRpZmZlcmVudCBzaG93L2hpZGUgYW5pbWF0aW9uczpcbiAqXG4gIDxleGFtcGxlIG1vZHVsZT1cIm5nQW5pbWF0ZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIG5hbWU9XCJuZy1zaG93LWNvbXBsZXhcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgU2hvdzogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiIGFyaWEtbGFiZWw9XCJUb2dnbGUgbmdTaG93XCI+PGJyIC8+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBmdW5reS1zaG93LWhpZGVcIiBuZy1zaG93PVwiY2hlY2tlZFwiPlxuICAgICAgICBJIHNob3cgdXAgd2hlbiB5b3VyIGNoZWNrYm94IGlzIGNoZWNrZWQuXG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cImFuaW1hdGlvbnMuY3NzXCI+XG4gICAgICBib2R5IHtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgcGVyc3BlY3RpdmU6IDEwMDBweDtcbiAgICAgIH1cblxuICAgICAgLmZ1bmt5LXNob3ctaGlkZS5uZy1oaWRlLWFkZCB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlWigwKTtcbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQ7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjVzIGVhc2UtaW4tb3V0O1xuICAgICAgfVxuXG4gICAgICAuZnVua3ktc2hvdy1oaWRlLm5nLWhpZGUtYWRkLm5nLWhpZGUtYWRkLWFjdGl2ZSB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlWigtMTM1ZGVnKTtcbiAgICAgIH1cblxuICAgICAgLmZ1bmt5LXNob3ctaGlkZS5uZy1oaWRlLXJlbW92ZSB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlWSg5MGRlZyk7XG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IGxlZnQ7XG4gICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjVzIGVhc2U7XG4gICAgICB9XG5cbiAgICAgIC5mdW5reS1zaG93LWhpZGUubmctaGlkZS1yZW1vdmUubmctaGlkZS1yZW1vdmUtYWN0aXZlIHtcbiAgICAgICAgdHJhbnNmb3JtOiByb3RhdGVZKDApO1xuICAgICAgfVxuXG4gICAgICAuY2hlY2stZWxlbWVudCB7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nU2hvdycsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2hlY2tib3ggPSBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpO1xuICAgICAgICB2YXIgY2hlY2tFbGVtID0gZWxlbWVudChieS5jc3MoJy5jaGVjay1lbGVtZW50JykpO1xuXG4gICAgICAgIGV4cGVjdChjaGVja0VsZW0uaXNEaXNwbGF5ZWQoKSkudG9CZShmYWxzZSk7XG4gICAgICAgIGNoZWNrYm94LmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChjaGVja0VsZW0uaXNEaXNwbGF5ZWQoKSkudG9CZSh0cnVlKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgbmdTaG93RGlyZWN0aXZlID0gWyckYW5pbWF0ZScsIGZ1bmN0aW9uKCRhbmltYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICBtdWx0aUVsZW1lbnQ6IHRydWUsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHNjb3BlLiR3YXRjaChhdHRyLm5nU2hvdywgZnVuY3Rpb24gbmdTaG93V2F0Y2hBY3Rpb24odmFsdWUpIHtcbiAgICAgICAgLy8gd2UncmUgYWRkaW5nIGEgdGVtcG9yYXJ5LCBhbmltYXRpb24tc3BlY2lmaWMgY2xhc3MgZm9yIG5nLWhpZGUgc2luY2UgdGhpcyB3YXlcbiAgICAgICAgLy8gd2UgY2FuIGNvbnRyb2wgd2hlbiB0aGUgZWxlbWVudCBpcyBhY3R1YWxseSBkaXNwbGF5ZWQgb24gc2NyZWVuIHdpdGhvdXQgaGF2aW5nXG4gICAgICAgIC8vIHRvIGhhdmUgYSBnbG9iYWwvZ3JlZWR5IENTUyBzZWxlY3RvciB0aGF0IGJyZWFrcyB3aGVuIG90aGVyIGFuaW1hdGlvbnMgYXJlIHJ1bi5cbiAgICAgICAgLy8gUmVhZDogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvOTEwMyNpc3N1ZWNvbW1lbnQtNTgzMzU4NDVcbiAgICAgICAgJGFuaW1hdGVbdmFsdWUgPyAncmVtb3ZlQ2xhc3MnIDogJ2FkZENsYXNzJ10oZWxlbWVudCwgTkdfSElERV9DTEFTUywge1xuICAgICAgICAgIHRlbXBDbGFzc2VzOiBOR19ISURFX0lOX1BST0dSRVNTX0NMQVNTXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufV07XG5cblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ0hpZGVcbiAqIEBtdWx0aUVsZW1lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdIaWRlYCBkaXJlY3RpdmUgc2hvd3Mgb3IgaGlkZXMgdGhlIGdpdmVuIEhUTUwgZWxlbWVudCBiYXNlZCBvbiB0aGUgZXhwcmVzc2lvbiBwcm92aWRlZCB0b1xuICogdGhlIGBuZ0hpZGVgIGF0dHJpYnV0ZS5cbiAqXG4gKiBUaGUgZWxlbWVudCBpcyBzaG93biBvciBoaWRkZW4gYnkgcmVtb3Zpbmcgb3IgYWRkaW5nIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcyBvbnRvIHRoZSBlbGVtZW50LlxuICogVGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzIGlzIHByZWRlZmluZWQgaW4gQW5ndWxhckpTIGFuZCBzZXRzIHRoZSBkaXNwbGF5IHN0eWxlIHRvIG5vbmUgKHVzaW5nIGFuXG4gKiBgIWltcG9ydGFudGAgZmxhZykuIEZvciBDU1AgbW9kZSBwbGVhc2UgYWRkIGBhbmd1bGFyLWNzcC5jc3NgIHRvIHlvdXIgSFRNTCBmaWxlIChzZWVcbiAqIHtAbGluayBuZy5kaXJlY3RpdmU6bmdDc3AgbmdDc3B9KS5cbiAqXG4gKiBgYGBodG1sXG4gKiA8IS0tIHdoZW4gJHNjb3BlLm15VmFsdWUgaXMgdHJ1dGh5IChlbGVtZW50IGlzIGhpZGRlbikgLS0+XG4gKiA8ZGl2IG5nLWhpZGU9XCJteVZhbHVlXCIgY2xhc3M9XCJuZy1oaWRlXCI+PC9kaXY+XG4gKlxuICogPCEtLSB3aGVuICRzY29wZS5teVZhbHVlIGlzIGZhbHN5IChlbGVtZW50IGlzIHZpc2libGUpIC0tPlxuICogPGRpdiBuZy1oaWRlPVwibXlWYWx1ZVwiPjwvZGl2PlxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYG5nSGlkZWAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSB0cnV0aHkgdmFsdWUgdGhlbiB0aGUgYC5uZy1oaWRlYCBDU1MgY2xhc3MgaXMgYWRkZWRcbiAqIHRvIHRoZSBjbGFzcyBhdHRyaWJ1dGUgb24gdGhlIGVsZW1lbnQgY2F1c2luZyBpdCB0byBiZWNvbWUgaGlkZGVuLiBXaGVuIGZhbHN5LCB0aGUgYC5uZy1oaWRlYFxuICogQ1NTIGNsYXNzIGlzIHJlbW92ZWQgZnJvbSB0aGUgZWxlbWVudCBjYXVzaW5nIHRoZSBlbGVtZW50IG5vdCB0byBhcHBlYXIgaGlkZGVuLlxuICpcbiAqICMjIFdoeSBpcyBgIWltcG9ydGFudGAgdXNlZD9cbiAqXG4gKiBZb3UgbWF5IGJlIHdvbmRlcmluZyB3aHkgYCFpbXBvcnRhbnRgIGlzIHVzZWQgZm9yIHRoZSBgLm5nLWhpZGVgIENTUyBjbGFzcy4gVGhpcyBpcyBiZWNhdXNlIHRoZVxuICogYC5uZy1oaWRlYCBzZWxlY3RvciBjYW4gYmUgZWFzaWx5IG92ZXJyaWRkZW4gYnkgaGVhdmllciBzZWxlY3RvcnMuIEZvciBleGFtcGxlLCBzb21ldGhpbmcgYXNcbiAqIHNpbXBsZSBhcyBjaGFuZ2luZyB0aGUgZGlzcGxheSBzdHlsZSBvbiBhIEhUTUwgbGlzdCBpdGVtIHdvdWxkIG1ha2UgaGlkZGVuIGVsZW1lbnRzIGFwcGVhclxuICogdmlzaWJsZS4gVGhpcyBhbHNvIGJlY29tZXMgYSBiaWdnZXIgaXNzdWUgd2hlbiBkZWFsaW5nIHdpdGggQ1NTIGZyYW1ld29ya3MuXG4gKlxuICogQnkgdXNpbmcgYCFpbXBvcnRhbnRgLCB0aGUgc2hvdyBhbmQgaGlkZSBiZWhhdmlvciB3aWxsIHdvcmsgYXMgZXhwZWN0ZWQgZGVzcGl0ZSBhbnkgY2xhc2ggYmV0d2VlblxuICogQ1NTIHNlbGVjdG9yIHNwZWNpZmljaXR5ICh3aGVuIGAhaW1wb3J0YW50YCBpc24ndCB1c2VkIHdpdGggYW55IGNvbmZsaWN0aW5nIHN0eWxlcykuIElmIGFcbiAqIGRldmVsb3BlciBjaG9vc2VzIHRvIG92ZXJyaWRlIHRoZSBzdHlsaW5nIHRvIGNoYW5nZSBob3cgdG8gaGlkZSBhbiBlbGVtZW50IHRoZW4gaXQgaXMganVzdCBhXG4gKiBtYXR0ZXIgb2YgdXNpbmcgYCFpbXBvcnRhbnRgIGluIHRoZWlyIG93biBDU1MgY29kZS5cbiAqXG4gKiAjIyMgT3ZlcnJpZGluZyBgLm5nLWhpZGVgXG4gKlxuICogQnkgZGVmYXVsdCwgdGhlIGAubmctaGlkZWAgY2xhc3Mgd2lsbCBzdHlsZSB0aGUgZWxlbWVudCB3aXRoIGBkaXNwbGF5OiBub25lICFpbXBvcnRhbnRgLiBJZiB5b3VcbiAqIHdpc2ggdG8gY2hhbmdlIHRoZSBoaWRlIGJlaGF2aW9yIHdpdGggYG5nU2hvd2AvYG5nSGlkZWAsIHlvdSBjYW4gc2ltcGx5IG92ZXJ3cml0ZSB0aGUgc3R5bGVzIGZvclxuICogdGhlIGAubmctaGlkZWAgQ1NTIGNsYXNzLiBOb3RlIHRoYXQgdGhlIHNlbGVjdG9yIHRoYXQgbmVlZHMgdG8gYmUgdXNlZCBpcyBhY3R1YWxseVxuICogYC5uZy1oaWRlOm5vdCgubmctaGlkZS1hbmltYXRlKWAgdG8gY29wZSB3aXRoIGV4dHJhIGFuaW1hdGlvbiBjbGFzc2VzIHRoYXQgY2FuIGJlIGFkZGVkLlxuICpcbiAqIGBgYGNzc1xuICogLm5nLWhpZGU6bm90KC5uZy1oaWRlLWFuaW1hdGUpIHtcbiAqICAgLyYjNDI7IFRoZXNlIGFyZSBqdXN0IGFsdGVybmF0aXZlIHdheXMgb2YgaGlkaW5nIGFuIGVsZW1lbnQgJiM0MjsvXG4gKiAgIGRpc3BsYXk6IGJsb2NrIWltcG9ydGFudDtcbiAqICAgcG9zaXRpb246IGFic29sdXRlO1xuICogICB0b3A6IC05OTk5cHg7XG4gKiAgIGxlZnQ6IC05OTk5cHg7XG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBCeSBkZWZhdWx0IHlvdSBkb24ndCBuZWVkIHRvIG92ZXJyaWRlIGluIENTUyBhbnl0aGluZyBhbmQgdGhlIGFuaW1hdGlvbnMgd2lsbCB3b3JrIGFyb3VuZCB0aGVcbiAqIGRpc3BsYXkgc3R5bGUuXG4gKlxuICogIyMgQSBub3RlIGFib3V0IGFuaW1hdGlvbnMgd2l0aCBgbmdIaWRlYFxuICpcbiAqIEFuaW1hdGlvbnMgaW4gYG5nU2hvd2AvYG5nSGlkZWAgd29yayB3aXRoIHRoZSBzaG93IGFuZCBoaWRlIGV2ZW50cyB0aGF0IGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGVcbiAqIGRpcmVjdGl2ZSBleHByZXNzaW9uIGlzIHRydWUgYW5kIGZhbHNlLiBUaGlzIHN5c3RlbSB3b3JrcyBsaWtlIHRoZSBhbmltYXRpb24gc3lzdGVtIHByZXNlbnQgd2l0aFxuICogYG5nQ2xhc3NgIGV4Y2VwdCB0aGF0IHlvdSBtdXN0IGFsc28gaW5jbHVkZSB0aGUgYCFpbXBvcnRhbnRgIGZsYWcgdG8gb3ZlcnJpZGUgdGhlIGRpc3BsYXlcbiAqIHByb3BlcnR5IHNvIHRoYXQgdGhlIGVsZW1lbnRzIGFyZSBub3QgYWN0dWFsbHkgaGlkZGVuIGR1cmluZyB0aGUgYW5pbWF0aW9uLlxuICpcbiAqIGBgYGNzc1xuICogLyYjNDI7IEEgd29ya2luZyBleGFtcGxlIGNhbiBiZSBmb3VuZCBhdCB0aGUgYm90dG9tIG9mIHRoaXMgcGFnZS4gJiM0MjsvXG4gKiAubXktZWxlbWVudC5uZy1oaWRlLWFkZCwgLm15LWVsZW1lbnQubmctaGlkZS1yZW1vdmUge1xuICogICB0cmFuc2l0aW9uOiBhbGwgMC41cyBsaW5lYXI7XG4gKiB9XG4gKlxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQgeyAuLi4gfVxuICogLm15LWVsZW1lbnQubmctaGlkZS1hZGQubmctaGlkZS1hZGQtYWN0aXZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlIHsgLi4uIH1cbiAqIC5teS1lbGVtZW50Lm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7IC4uLiB9XG4gKiBgYGBcbiAqXG4gKiBLZWVwIGluIG1pbmQgdGhhdCwgYXMgb2YgQW5ndWxhckpTIHZlcnNpb24gMS4zLCB0aGVyZSBpcyBubyBuZWVkIHRvIGNoYW5nZSB0aGUgZGlzcGxheSBwcm9wZXJ0eVxuICogdG8gYmxvY2sgZHVyaW5nIGFuaW1hdGlvbiBzdGF0ZXMgLSBuZ0FuaW1hdGUgd2lsbCBhdXRvbWF0aWNhbGx5IGhhbmRsZSB0aGUgc3R5bGUgdG9nZ2xpbmcgZm9yIHlvdS5cbiAqXG4gKiBAYW5pbWF0aW9uc1xuICogfCBBbmltYXRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPY2N1cnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8IHtAbGluayAkYW5pbWF0ZSNhZGRDbGFzcyBhZGRDbGFzc30gYC5uZy1oaWRlYCAgICAgICB8IEFmdGVyIHRoZSBgbmdIaWRlYCBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHRydXRoeSB2YWx1ZSBhbmQganVzdCBiZWZvcmUgdGhlIGNvbnRlbnRzIGFyZSBzZXQgdG8gaGlkZGVuLiAgfFxuICogfCB7QGxpbmsgJGFuaW1hdGUjcmVtb3ZlQ2xhc3MgcmVtb3ZlQ2xhc3N9IGAubmctaGlkZWAgfCBBZnRlciB0aGUgYG5nSGlkZWAgZXhwcmVzc2lvbiBldmFsdWF0ZXMgdG8gYSBub24gdHJ1dGh5IHZhbHVlIGFuZCBqdXN0IGJlZm9yZSBjb250ZW50cyBhcmUgc2V0IHRvIHZpc2libGUuIHxcbiAqXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nSGlkZSBJZiB0aGUge0BsaW5rIGd1aWRlL2V4cHJlc3Npb24gZXhwcmVzc2lvbn0gaXMgdHJ1dGh5L2ZhbHN5IHRoZW4gdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50IGlzIGhpZGRlbi9zaG93biByZXNwZWN0aXZlbHkuXG4gKlxuICogQGV4YW1wbGVcbiAqIEEgc2ltcGxlIGV4YW1wbGUsIGFuaW1hdGluZyB0aGUgZWxlbWVudCdzIG9wYWNpdHk6XG4gKlxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBuYW1lPVwibmctaGlkZS1zaW1wbGVcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgSGlkZTogPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5nLW1vZGVsPVwiY2hlY2tlZFwiIGFyaWEtbGFiZWw9XCJUb2dnbGUgbmdIaWRlXCI+PGJyIC8+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2hlY2stZWxlbWVudCBhbmltYXRlLXNob3ctaGlkZVwiIG5nLWhpZGU9XCJjaGVja2VkXCI+XG4gICAgICAgIEkgaGlkZSB3aGVuIHlvdXIgY2hlY2tib3ggaXMgY2hlY2tlZC5cbiAgICAgIDwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5hbmltYXRlLXNob3ctaGlkZS5uZy1oaWRlIHtcbiAgICAgICAgb3BhY2l0eTogMDtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtc2hvdy1oaWRlLm5nLWhpZGUtYWRkLFxuICAgICAgLmFuaW1hdGUtc2hvdy1oaWRlLm5nLWhpZGUtcmVtb3ZlIHtcbiAgICAgICAgdHJhbnNpdGlvbjogYWxsIGxpbmVhciAwLjVzO1xuICAgICAgfVxuXG4gICAgICAuY2hlY2stZWxlbWVudCB7XG4gICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgfVxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICBpdCgnc2hvdWxkIGNoZWNrIG5nSGlkZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2hlY2tib3ggPSBlbGVtZW50KGJ5Lm1vZGVsKCdjaGVja2VkJykpO1xuICAgICAgICB2YXIgY2hlY2tFbGVtID0gZWxlbWVudChieS5jc3MoJy5jaGVjay1lbGVtZW50JykpO1xuXG4gICAgICAgIGV4cGVjdChjaGVja0VsZW0uaXNEaXNwbGF5ZWQoKSkudG9CZSh0cnVlKTtcbiAgICAgICAgY2hlY2tib3guY2xpY2soKTtcbiAgICAgICAgZXhwZWN0KGNoZWNrRWxlbS5pc0Rpc3BsYXllZCgpKS50b0JlKGZhbHNlKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICpcbiAqIDxociAvPlxuICogQGV4YW1wbGVcbiAqIEEgbW9yZSBjb21wbGV4IGV4YW1wbGUsIGZlYXR1cmluZyBkaWZmZXJlbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnM6XG4gKlxuICA8ZXhhbXBsZSBtb2R1bGU9XCJuZ0FuaW1hdGVcIiBkZXBzPVwiYW5ndWxhci1hbmltYXRlLmpzXCIgYW5pbWF0aW9ucz1cInRydWVcIiBuYW1lPVwibmctaGlkZS1jb21wbGV4XCI+XG4gICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAgICAgIEhpZGU6IDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cImNoZWNrZWRcIiBhcmlhLWxhYmVsPVwiVG9nZ2xlIG5nSGlkZVwiPjxiciAvPlxuICAgICAgPGRpdiBjbGFzcz1cImNoZWNrLWVsZW1lbnQgZnVua3ktc2hvdy1oaWRlXCIgbmctaGlkZT1cImNoZWNrZWRcIj5cbiAgICAgICAgSSBoaWRlIHdoZW4geW91ciBjaGVja2JveCBpcyBjaGVja2VkLlxuICAgICAgPC9kaXY+XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJhbmltYXRpb25zLmNzc1wiPlxuICAgICAgYm9keSB7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIHBlcnNwZWN0aXZlOiAxMDAwcHg7XG4gICAgICB9XG5cbiAgICAgIC5mdW5reS1zaG93LWhpZGUubmctaGlkZS1hZGQge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZVooMCk7XG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0O1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlLWluLW91dDtcbiAgICAgIH1cblxuICAgICAgLmZ1bmt5LXNob3ctaGlkZS5uZy1oaWRlLWFkZC5uZy1oaWRlLWFkZC1hY3RpdmUge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZVooLTEzNWRlZyk7XG4gICAgICB9XG5cbiAgICAgIC5mdW5reS1zaG93LWhpZGUubmctaGlkZS1yZW1vdmUge1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZVkoOTBkZWcpO1xuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0O1xuICAgICAgICB0cmFuc2l0aW9uOiBhbGwgMC41cyBlYXNlO1xuICAgICAgfVxuXG4gICAgICAuZnVua3ktc2hvdy1oaWRlLm5nLWhpZGUtcmVtb3ZlLm5nLWhpZGUtcmVtb3ZlLWFjdGl2ZSB7XG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlWSgwKTtcbiAgICAgIH1cblxuICAgICAgLmNoZWNrLWVsZW1lbnQge1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgIH1cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgaXQoJ3Nob3VsZCBjaGVjayBuZ0hpZGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGNoZWNrYm94ID0gZWxlbWVudChieS5tb2RlbCgnY2hlY2tlZCcpKTtcbiAgICAgICAgdmFyIGNoZWNrRWxlbSA9IGVsZW1lbnQoYnkuY3NzKCcuY2hlY2stZWxlbWVudCcpKTtcblxuICAgICAgICBleHBlY3QoY2hlY2tFbGVtLmlzRGlzcGxheWVkKCkpLnRvQmUodHJ1ZSk7XG4gICAgICAgIGNoZWNrYm94LmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChjaGVja0VsZW0uaXNEaXNwbGF5ZWQoKSkudG9CZShmYWxzZSk7XG4gICAgICB9KTtcbiAgICA8L2ZpbGU+XG4gIDwvZXhhbXBsZT5cbiAqL1xudmFyIG5nSGlkZURpcmVjdGl2ZSA9IFsnJGFuaW1hdGUnLCBmdW5jdGlvbigkYW5pbWF0ZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gICAgICBzY29wZS4kd2F0Y2goYXR0ci5uZ0hpZGUsIGZ1bmN0aW9uIG5nSGlkZVdhdGNoQWN0aW9uKHZhbHVlKSB7XG4gICAgICAgIC8vIFRoZSBjb21tZW50IGluc2lkZSBvZiB0aGUgbmdTaG93RGlyZWN0aXZlIGV4cGxhaW5zIHdoeSB3ZSBhZGQgYW5kXG4gICAgICAgIC8vIHJlbW92ZSBhIHRlbXBvcmFyeSBjbGFzcyBmb3IgdGhlIHNob3cvaGlkZSBhbmltYXRpb25cbiAgICAgICAgJGFuaW1hdGVbdmFsdWUgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oZWxlbWVudCxOR19ISURFX0NMQVNTLCB7XG4gICAgICAgICAgdGVtcENsYXNzZXM6IE5HX0hJREVfSU5fUFJPR1JFU1NfQ0xBU1NcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1N0eWxlXG4gKiBAcmVzdHJpY3QgQUNcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBgbmdTdHlsZWAgZGlyZWN0aXZlIGFsbG93cyB5b3UgdG8gc2V0IENTUyBzdHlsZSBvbiBhbiBIVE1MIGVsZW1lbnQgY29uZGl0aW9uYWxseS5cbiAqXG4gKiBAa25vd25Jc3N1ZVxuICogWW91IHNob3VsZCBub3QgdXNlIHtAbGluayBndWlkZS9pbnRlcnBvbGF0aW9uIGludGVycG9sYXRpb259IGluIHRoZSB2YWx1ZSBvZiB0aGUgYHN0eWxlYFxuICogYXR0cmlidXRlLCB3aGVuIHVzaW5nIHRoZSBgbmdTdHlsZWAgZGlyZWN0aXZlIG9uIHRoZSBzYW1lIGVsZW1lbnQuXG4gKiBTZWUge0BsaW5rIGd1aWRlL2ludGVycG9sYXRpb24ja25vd24taXNzdWVzIGhlcmV9IGZvciBtb3JlIGluZm8uXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKiBAcGFyYW0ge2V4cHJlc3Npb259IG5nU3R5bGVcbiAqXG4gKiB7QGxpbmsgZ3VpZGUvZXhwcmVzc2lvbiBFeHByZXNzaW9ufSB3aGljaCBldmFscyB0byBhblxuICogb2JqZWN0IHdob3NlIGtleXMgYXJlIENTUyBzdHlsZSBuYW1lcyBhbmQgdmFsdWVzIGFyZSBjb3JyZXNwb25kaW5nIHZhbHVlcyBmb3IgdGhvc2UgQ1NTXG4gKiBrZXlzLlxuICpcbiAqIFNpbmNlIHNvbWUgQ1NTIHN0eWxlIG5hbWVzIGFyZSBub3QgdmFsaWQga2V5cyBmb3IgYW4gb2JqZWN0LCB0aGV5IG11c3QgYmUgcXVvdGVkLlxuICogU2VlIHRoZSAnYmFja2dyb3VuZC1jb2xvcicgc3R5bGUgaW4gdGhlIGV4YW1wbGUgYmVsb3cuXG4gKlxuICogQGV4YW1wbGVcbiAgIDxleGFtcGxlIG5hbWU9XCJuZy1zdHlsZVwiPlxuICAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwic2V0IGNvbG9yXCIgbmctY2xpY2s9XCJteVN0eWxlPXtjb2xvcjoncmVkJ31cIj5cbiAgICAgICAgPGlucHV0IHR5cGU9XCJidXR0b25cIiB2YWx1ZT1cInNldCBiYWNrZ3JvdW5kXCIgbmctY2xpY2s9XCJteVN0eWxlPXsnYmFja2dyb3VuZC1jb2xvcic6J2JsdWUnfVwiPlxuICAgICAgICA8aW5wdXQgdHlwZT1cImJ1dHRvblwiIHZhbHVlPVwiY2xlYXJcIiBuZy1jbGljaz1cIm15U3R5bGU9e31cIj5cbiAgICAgICAgPGJyLz5cbiAgICAgICAgPHNwYW4gbmctc3R5bGU9XCJteVN0eWxlXCI+U2FtcGxlIFRleHQ8L3NwYW4+XG4gICAgICAgIDxwcmU+bXlTdHlsZT17e215U3R5bGV9fTwvcHJlPlxuICAgICA8L2ZpbGU+XG4gICAgIDxmaWxlIG5hbWU9XCJzdHlsZS5jc3NcIj5cbiAgICAgICBzcGFuIHtcbiAgICAgICAgIGNvbG9yOiBibGFjaztcbiAgICAgICB9XG4gICAgIDwvZmlsZT5cbiAgICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBjb2xvclNwYW4gPSBlbGVtZW50KGJ5LmNzcygnc3BhbicpKTtcblxuICAgICAgIGl0KCdzaG91bGQgY2hlY2sgbmctc3R5bGUnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGV4cGVjdChjb2xvclNwYW4uZ2V0Q3NzVmFsdWUoJ2NvbG9yJykpLnRvQmUoJ3JnYmEoMCwgMCwgMCwgMSknKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCdpbnB1dFt2YWx1ZT1cXCdzZXQgY29sb3JcXCddJykpLmNsaWNrKCk7XG4gICAgICAgICBleHBlY3QoY29sb3JTcGFuLmdldENzc1ZhbHVlKCdjb2xvcicpKS50b0JlKCdyZ2JhKDI1NSwgMCwgMCwgMSknKTtcbiAgICAgICAgIGVsZW1lbnQoYnkuY3NzKCdpbnB1dFt2YWx1ZT1jbGVhcl0nKSkuY2xpY2soKTtcbiAgICAgICAgIGV4cGVjdChjb2xvclNwYW4uZ2V0Q3NzVmFsdWUoJ2NvbG9yJykpLnRvQmUoJ3JnYmEoMCwgMCwgMCwgMSknKTtcbiAgICAgICB9KTtcbiAgICAgPC9maWxlPlxuICAgPC9leGFtcGxlPlxuICovXG52YXIgbmdTdHlsZURpcmVjdGl2ZSA9IG5nRGlyZWN0aXZlKGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XG4gIHNjb3BlLiR3YXRjaChhdHRyLm5nU3R5bGUsIGZ1bmN0aW9uIG5nU3R5bGVXYXRjaEFjdGlvbihuZXdTdHlsZXMsIG9sZFN0eWxlcykge1xuICAgIGlmIChvbGRTdHlsZXMgJiYgKG5ld1N0eWxlcyAhPT0gb2xkU3R5bGVzKSkge1xuICAgICAgZm9yRWFjaChvbGRTdHlsZXMsIGZ1bmN0aW9uKHZhbCwgc3R5bGUpIHsgZWxlbWVudC5jc3Moc3R5bGUsICcnKTt9KTtcbiAgICB9XG4gICAgaWYgKG5ld1N0eWxlcykgZWxlbWVudC5jc3MobmV3U3R5bGVzKTtcbiAgfSwgdHJ1ZSk7XG59KTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1N3aXRjaFxuICogQHJlc3RyaWN0IEVBXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgYG5nU3dpdGNoYCBkaXJlY3RpdmUgaXMgdXNlZCB0byBjb25kaXRpb25hbGx5IHN3YXAgRE9NIHN0cnVjdHVyZSBvbiB5b3VyIHRlbXBsYXRlIGJhc2VkIG9uIGEgc2NvcGUgZXhwcmVzc2lvbi5cbiAqIEVsZW1lbnRzIHdpdGhpbiBgbmdTd2l0Y2hgIGJ1dCB3aXRob3V0IGBuZ1N3aXRjaFdoZW5gIG9yIGBuZ1N3aXRjaERlZmF1bHRgIGRpcmVjdGl2ZXMgd2lsbCBiZSBwcmVzZXJ2ZWQgYXQgdGhlIGxvY2F0aW9uXG4gKiBhcyBzcGVjaWZpZWQgaW4gdGhlIHRlbXBsYXRlLlxuICpcbiAqIFRoZSBkaXJlY3RpdmUgaXRzZWxmIHdvcmtzIHNpbWlsYXIgdG8gbmdJbmNsdWRlLCBob3dldmVyLCBpbnN0ZWFkIG9mIGRvd25sb2FkaW5nIHRlbXBsYXRlIGNvZGUgKG9yIGxvYWRpbmcgaXRcbiAqIGZyb20gdGhlIHRlbXBsYXRlIGNhY2hlKSwgYG5nU3dpdGNoYCBzaW1wbHkgY2hvb3NlcyBvbmUgb2YgdGhlIG5lc3RlZCBlbGVtZW50cyBhbmQgbWFrZXMgaXQgdmlzaWJsZSBiYXNlZCBvbiB3aGljaCBlbGVtZW50XG4gKiBtYXRjaGVzIHRoZSB2YWx1ZSBvYnRhaW5lZCBmcm9tIHRoZSBldmFsdWF0ZWQgZXhwcmVzc2lvbi4gSW4gb3RoZXIgd29yZHMsIHlvdSBkZWZpbmUgYSBjb250YWluZXIgZWxlbWVudFxuICogKHdoZXJlIHlvdSBwbGFjZSB0aGUgZGlyZWN0aXZlKSwgcGxhY2UgYW4gZXhwcmVzc2lvbiBvbiB0aGUgKipgb249XCIuLi5cImAgYXR0cmlidXRlKipcbiAqIChvciB0aGUgKipgbmctc3dpdGNoPVwiLi4uXCJgIGF0dHJpYnV0ZSoqKSwgZGVmaW5lIGFueSBpbm5lciBlbGVtZW50cyBpbnNpZGUgb2YgdGhlIGRpcmVjdGl2ZSBhbmQgcGxhY2VcbiAqIGEgd2hlbiBhdHRyaWJ1dGUgcGVyIGVsZW1lbnQuIFRoZSB3aGVuIGF0dHJpYnV0ZSBpcyB1c2VkIHRvIGluZm9ybSBuZ1N3aXRjaCB3aGljaCBlbGVtZW50IHRvIGRpc3BsYXkgd2hlbiB0aGUgb25cbiAqIGV4cHJlc3Npb24gaXMgZXZhbHVhdGVkLiBJZiBhIG1hdGNoaW5nIGV4cHJlc3Npb24gaXMgbm90IGZvdW5kIHZpYSBhIHdoZW4gYXR0cmlidXRlIHRoZW4gYW4gZWxlbWVudCB3aXRoIHRoZSBkZWZhdWx0XG4gKiBhdHRyaWJ1dGUgaXMgZGlzcGxheWVkLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiBCZSBhd2FyZSB0aGF0IHRoZSBhdHRyaWJ1dGUgdmFsdWVzIHRvIG1hdGNoIGFnYWluc3QgY2Fubm90IGJlIGV4cHJlc3Npb25zLiBUaGV5IGFyZSBpbnRlcnByZXRlZFxuICogYXMgbGl0ZXJhbCBzdHJpbmcgdmFsdWVzIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBGb3IgZXhhbXBsZSwgKipgbmctc3dpdGNoLXdoZW49XCJzb21lVmFsXCJgKiogd2lsbCBtYXRjaCBhZ2FpbnN0IHRoZSBzdHJpbmcgYFwic29tZVZhbFwiYCBub3QgYWdhaW5zdCB0aGVcbiAqIHZhbHVlIG9mIHRoZSBleHByZXNzaW9uIGAkc2NvcGUuc29tZVZhbGAuXG4gKiA8L2Rpdj5cblxuICogQGFuaW1hdGlvbnNcbiAqIHwgQW5pbWF0aW9uICAgICAgICAgICAgICAgICAgICAgICAgfCBPY2N1cnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB7QGxpbmsgbmcuJGFuaW1hdGUjZW50ZXIgZW50ZXJ9ICB8IGFmdGVyIHRoZSBuZ1N3aXRjaCBjb250ZW50cyBjaGFuZ2UgYW5kIHRoZSBtYXRjaGVkIGNoaWxkIGVsZW1lbnQgaXMgcGxhY2VkIGluc2lkZSB0aGUgY29udGFpbmVyIHxcbiAqIHwge0BsaW5rIG5nLiRhbmltYXRlI2xlYXZlIGxlYXZlfSAgfCBhZnRlciB0aGUgbmdTd2l0Y2ggY29udGVudHMgY2hhbmdlIGFuZCBqdXN0IGJlZm9yZSB0aGUgZm9ybWVyIGNvbnRlbnRzIGFyZSByZW1vdmVkIGZyb20gdGhlIERPTSB8XG4gKlxuICogQHVzYWdlXG4gKlxuICogYGBgXG4gKiA8QU5ZIG5nLXN3aXRjaD1cImV4cHJlc3Npb25cIj5cbiAqICAgPEFOWSBuZy1zd2l0Y2gtd2hlbj1cIm1hdGNoVmFsdWUxXCI+Li4uPC9BTlk+XG4gKiAgIDxBTlkgbmctc3dpdGNoLXdoZW49XCJtYXRjaFZhbHVlMlwiPi4uLjwvQU5ZPlxuICogICA8QU5ZIG5nLXN3aXRjaC1kZWZhdWx0Pi4uLjwvQU5ZPlxuICogPC9BTlk+XG4gKiBgYGBcbiAqXG4gKlxuICogQHNjb3BlXG4gKiBAcHJpb3JpdHkgMTIwMFxuICogQHBhcmFtIHsqfSBuZ1N3aXRjaHxvbiBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QgPGNvZGU+bmctc3dpdGNoLXdoZW48L2NvZGU+LlxuICogT24gY2hpbGQgZWxlbWVudHMgYWRkOlxuICpcbiAqICogYG5nU3dpdGNoV2hlbmA6IHRoZSBjYXNlIHN0YXRlbWVudCB0byBtYXRjaCBhZ2FpbnN0LiBJZiBtYXRjaCB0aGVuIHRoaXNcbiAqICAgY2FzZSB3aWxsIGJlIGRpc3BsYXllZC4gSWYgdGhlIHNhbWUgbWF0Y2ggYXBwZWFycyBtdWx0aXBsZSB0aW1lcywgYWxsIHRoZVxuICogICBlbGVtZW50cyB3aWxsIGJlIGRpc3BsYXllZC4gSXQgaXMgcG9zc2libGUgdG8gYXNzb2NpYXRlIG11bHRpcGxlIHZhbHVlcyB0b1xuICogICB0aGUgc2FtZSBgbmdTd2l0Y2hXaGVuYCBieSBkZWZpbmluZyB0aGUgb3B0aW9uYWwgYXR0cmlidXRlXG4gKiAgIGBuZ1N3aXRjaFdoZW5TZXBhcmF0b3JgLiBUaGUgc2VwYXJhdG9yIHdpbGwgYmUgdXNlZCB0byBzcGxpdCB0aGUgdmFsdWUgb2ZcbiAqICAgdGhlIGBuZ1N3aXRjaFdoZW5gIGF0dHJpYnV0ZSBpbnRvIG11bHRpcGxlIHRva2VucywgYW5kIHRoZSBlbGVtZW50IHdpbGwgc2hvd1xuICogICBpZiBhbnkgb2YgdGhlIGBuZ1N3aXRjaGAgZXZhbHVhdGVzIHRvIGFueSBvZiB0aGVzZSB0b2tlbnMuXG4gKiAqIGBuZ1N3aXRjaERlZmF1bHRgOiB0aGUgZGVmYXVsdCBjYXNlIHdoZW4gbm8gb3RoZXIgY2FzZSBtYXRjaC4gSWYgdGhlcmVcbiAqICAgYXJlIG11bHRpcGxlIGRlZmF1bHQgY2FzZXMsIGFsbCBvZiB0aGVtIHdpbGwgYmUgZGlzcGxheWVkIHdoZW4gbm8gb3RoZXJcbiAqICAgY2FzZSBtYXRjaC5cbiAqXG4gKlxuICogQGV4YW1wbGVcbiAgPGV4YW1wbGUgbW9kdWxlPVwic3dpdGNoRXhhbXBsZVwiIGRlcHM9XCJhbmd1bGFyLWFuaW1hdGUuanNcIiBhbmltYXRpb25zPVwidHJ1ZVwiIG5hbWU9XCJuZy1zd2l0Y2hcIj5cbiAgICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAgICAgICAgPHNlbGVjdCBuZy1tb2RlbD1cInNlbGVjdGlvblwiIG5nLW9wdGlvbnM9XCJpdGVtIGZvciBpdGVtIGluIGl0ZW1zXCI+XG4gICAgICAgIDwvc2VsZWN0PlxuICAgICAgICA8Y29kZT5zZWxlY3Rpb249e3tzZWxlY3Rpb259fTwvY29kZT5cbiAgICAgICAgPGhyLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGUtc3dpdGNoLWNvbnRhaW5lclwiXG4gICAgICAgICAgbmctc3dpdGNoIG9uPVwic2VsZWN0aW9uXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYW5pbWF0ZS1zd2l0Y2hcIiBuZy1zd2l0Y2gtd2hlbj1cInNldHRpbmdzfG9wdGlvbnNcIiBuZy1zd2l0Y2gtd2hlbi1zZXBhcmF0b3I9XCJ8XCI+U2V0dGluZ3MgRGl2PC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYW5pbWF0ZS1zd2l0Y2hcIiBuZy1zd2l0Y2gtd2hlbj1cImhvbWVcIj5Ib21lIFNwYW48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbmltYXRlLXN3aXRjaFwiIG5nLXN3aXRjaC1kZWZhdWx0PmRlZmF1bHQ8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2ZpbGU+XG4gICAgPGZpbGUgbmFtZT1cInNjcmlwdC5qc1wiPlxuICAgICAgYW5ndWxhci5tb2R1bGUoJ3N3aXRjaEV4YW1wbGUnLCBbJ25nQW5pbWF0ZSddKVxuICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICAgICAgICAgICRzY29wZS5pdGVtcyA9IFsnc2V0dGluZ3MnLCAnaG9tZScsICdvcHRpb25zJywgJ290aGVyJ107XG4gICAgICAgICAgJHNjb3BlLnNlbGVjdGlvbiA9ICRzY29wZS5pdGVtc1swXTtcbiAgICAgICAgfV0pO1xuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwiYW5pbWF0aW9ucy5jc3NcIj5cbiAgICAgIC5hbmltYXRlLXN3aXRjaC1jb250YWluZXIge1xuICAgICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAgICAgICAgYmFja2dyb3VuZDp3aGl0ZTtcbiAgICAgICAgYm9yZGVyOjFweCBzb2xpZCBibGFjaztcbiAgICAgICAgaGVpZ2h0OjQwcHg7XG4gICAgICAgIG92ZXJmbG93OmhpZGRlbjtcbiAgICAgIH1cblxuICAgICAgLmFuaW1hdGUtc3dpdGNoIHtcbiAgICAgICAgcGFkZGluZzoxMHB4O1xuICAgICAgfVxuXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctYW5pbWF0ZSB7XG4gICAgICAgIHRyYW5zaXRpb246YWxsIGN1YmljLWJlemllcigwLjI1MCwgMC40NjAsIDAuNDUwLCAwLjk0MCkgMC41cztcblxuICAgICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgICAgICAgdG9wOjA7XG4gICAgICAgIGxlZnQ6MDtcbiAgICAgICAgcmlnaHQ6MDtcbiAgICAgICAgYm90dG9tOjA7XG4gICAgICB9XG5cbiAgICAgIC5hbmltYXRlLXN3aXRjaC5uZy1sZWF2ZS5uZy1sZWF2ZS1hY3RpdmUsXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctZW50ZXIge1xuICAgICAgICB0b3A6LTUwcHg7XG4gICAgICB9XG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctbGVhdmUsXG4gICAgICAuYW5pbWF0ZS1zd2l0Y2gubmctZW50ZXIubmctZW50ZXItYWN0aXZlIHtcbiAgICAgICAgdG9wOjA7XG4gICAgICB9XG4gICAgPC9maWxlPlxuICAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgIHZhciBzd2l0Y2hFbGVtID0gZWxlbWVudChieS5jc3MoJ1tuZy1zd2l0Y2hdJykpO1xuICAgICAgdmFyIHNlbGVjdCA9IGVsZW1lbnQoYnkubW9kZWwoJ3NlbGVjdGlvbicpKTtcblxuICAgICAgaXQoJ3Nob3VsZCBzdGFydCBpbiBzZXR0aW5ncycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBleHBlY3Qoc3dpdGNoRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL1NldHRpbmdzIERpdi8pO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIGNoYW5nZSB0byBob21lJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGVjdC5hbGwoYnkuY3NzKCdvcHRpb24nKSkuZ2V0KDEpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChzd2l0Y2hFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvSG9tZSBTcGFuLyk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgY2hhbmdlIHRvIHNldHRpbmdzIHZpYSBcIm9wdGlvbnNcIicsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxlY3QuYWxsKGJ5LmNzcygnb3B0aW9uJykpLmdldCgyKS5jbGljaygpO1xuICAgICAgICBleHBlY3Qoc3dpdGNoRWxlbS5nZXRUZXh0KCkpLnRvTWF0Y2goL1NldHRpbmdzIERpdi8pO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIHNlbGVjdCBkZWZhdWx0JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGVjdC5hbGwoYnkuY3NzKCdvcHRpb24nKSkuZ2V0KDMpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChzd2l0Y2hFbGVtLmdldFRleHQoKSkudG9NYXRjaCgvZGVmYXVsdC8pO1xuICAgICAgfSk7XG4gICAgPC9maWxlPlxuICA8L2V4YW1wbGU+XG4gKi9cbnZhciBuZ1N3aXRjaERpcmVjdGl2ZSA9IFsnJGFuaW1hdGUnLCAnJGNvbXBpbGUnLCBmdW5jdGlvbigkYW5pbWF0ZSwgJGNvbXBpbGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXF1aXJlOiAnbmdTd2l0Y2gnLFxuXG4gICAgLy8gYXNrcyBmb3IgJHNjb3BlIHRvIGZvb2wgdGhlIEJDIGNvbnRyb2xsZXIgbW9kdWxlXG4gICAgY29udHJvbGxlcjogWyckc2NvcGUnLCBmdW5jdGlvbiBOZ1N3aXRjaENvbnRyb2xsZXIoKSB7XG4gICAgIHRoaXMuY2FzZXMgPSB7fTtcbiAgICB9XSxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgbmdTd2l0Y2hDb250cm9sbGVyKSB7XG4gICAgICB2YXIgd2F0Y2hFeHByID0gYXR0ci5uZ1N3aXRjaCB8fCBhdHRyLm9uLFxuICAgICAgICAgIHNlbGVjdGVkVHJhbnNjbHVkZXMgPSBbXSxcbiAgICAgICAgICBzZWxlY3RlZEVsZW1lbnRzID0gW10sXG4gICAgICAgICAgcHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMgPSBbXSxcbiAgICAgICAgICBzZWxlY3RlZFNjb3BlcyA9IFtdO1xuXG4gICAgICB2YXIgc3BsaWNlRmFjdG9yeSA9IGZ1bmN0aW9uKGFycmF5LCBpbmRleCkge1xuICAgICAgICAgIHJldHVybiBmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlICE9PSBmYWxzZSkgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9O1xuICAgICAgfTtcblxuICAgICAgc2NvcGUuJHdhdGNoKHdhdGNoRXhwciwgZnVuY3Rpb24gbmdTd2l0Y2hXYXRjaEFjdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgaSwgaWk7XG5cbiAgICAgICAgLy8gU3RhcnQgd2l0aCB0aGUgbGFzdCwgaW4gY2FzZSB0aGUgYXJyYXkgaXMgbW9kaWZpZWQgZHVyaW5nIHRoZSBsb29wXG4gICAgICAgIHdoaWxlIChwcmV2aW91c0xlYXZlQW5pbWF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAkYW5pbWF0ZS5jYW5jZWwocHJldmlvdXNMZWF2ZUFuaW1hdGlvbnMucG9wKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBzZWxlY3RlZFNjb3Blcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7XG4gICAgICAgICAgdmFyIHNlbGVjdGVkID0gZ2V0QmxvY2tOb2RlcyhzZWxlY3RlZEVsZW1lbnRzW2ldLmNsb25lKTtcbiAgICAgICAgICBzZWxlY3RlZFNjb3Blc1tpXS4kZGVzdHJveSgpO1xuICAgICAgICAgIHZhciBydW5uZXIgPSBwcmV2aW91c0xlYXZlQW5pbWF0aW9uc1tpXSA9ICRhbmltYXRlLmxlYXZlKHNlbGVjdGVkKTtcbiAgICAgICAgICBydW5uZXIuZG9uZShzcGxpY2VGYWN0b3J5KHByZXZpb3VzTGVhdmVBbmltYXRpb25zLCBpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxlY3RlZEVsZW1lbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIHNlbGVjdGVkU2NvcGVzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgaWYgKChzZWxlY3RlZFRyYW5zY2x1ZGVzID0gbmdTd2l0Y2hDb250cm9sbGVyLmNhc2VzWychJyArIHZhbHVlXSB8fCBuZ1N3aXRjaENvbnRyb2xsZXIuY2FzZXNbJz8nXSkpIHtcbiAgICAgICAgICBmb3JFYWNoKHNlbGVjdGVkVHJhbnNjbHVkZXMsIGZ1bmN0aW9uKHNlbGVjdGVkVHJhbnNjbHVkZSkge1xuICAgICAgICAgICAgc2VsZWN0ZWRUcmFuc2NsdWRlLnRyYW5zY2x1ZGUoZnVuY3Rpb24oY2FzZUVsZW1lbnQsIHNlbGVjdGVkU2NvcGUpIHtcbiAgICAgICAgICAgICAgc2VsZWN0ZWRTY29wZXMucHVzaChzZWxlY3RlZFNjb3BlKTtcbiAgICAgICAgICAgICAgdmFyIGFuY2hvciA9IHNlbGVjdGVkVHJhbnNjbHVkZS5lbGVtZW50O1xuICAgICAgICAgICAgICBjYXNlRWxlbWVudFtjYXNlRWxlbWVudC5sZW5ndGgrK10gPSAkY29tcGlsZS4kJGNyZWF0ZUNvbW1lbnQoJ2VuZCBuZ1N3aXRjaFdoZW4nKTtcbiAgICAgICAgICAgICAgdmFyIGJsb2NrID0geyBjbG9uZTogY2FzZUVsZW1lbnQgfTtcblxuICAgICAgICAgICAgICBzZWxlY3RlZEVsZW1lbnRzLnB1c2goYmxvY2spO1xuICAgICAgICAgICAgICAkYW5pbWF0ZS5lbnRlcihjYXNlRWxlbWVudCwgYW5jaG9yLnBhcmVudCgpLCBhbmNob3IpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1dO1xuXG52YXIgbmdTd2l0Y2hXaGVuRGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gIHByaW9yaXR5OiAxMjAwLFxuICByZXF1aXJlOiAnXm5nU3dpdGNoJyxcbiAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmwsICR0cmFuc2NsdWRlKSB7XG5cbiAgICB2YXIgY2FzZXMgPSBhdHRycy5uZ1N3aXRjaFdoZW4uc3BsaXQoYXR0cnMubmdTd2l0Y2hXaGVuU2VwYXJhdG9yKS5zb3J0KCkuZmlsdGVyKFxuICAgICAgLy8gRmlsdGVyIGR1cGxpY2F0ZSBjYXNlc1xuICAgICAgZnVuY3Rpb24oZWxlbWVudCwgaW5kZXgsIGFycmF5KSB7IHJldHVybiBhcnJheVtpbmRleCAtIDFdICE9PSBlbGVtZW50OyB9XG4gICAgKTtcblxuICAgIGZvckVhY2goY2FzZXMsIGZ1bmN0aW9uKHdoZW5DYXNlKSB7XG4gICAgICBjdHJsLmNhc2VzWychJyArIHdoZW5DYXNlXSA9IChjdHJsLmNhc2VzWychJyArIHdoZW5DYXNlXSB8fCBbXSk7XG4gICAgICBjdHJsLmNhc2VzWychJyArIHdoZW5DYXNlXS5wdXNoKHsgdHJhbnNjbHVkZTogJHRyYW5zY2x1ZGUsIGVsZW1lbnQ6IGVsZW1lbnQgfSk7XG4gICAgfSk7XG4gIH1cbn0pO1xuXG52YXIgbmdTd2l0Y2hEZWZhdWx0RGlyZWN0aXZlID0gbmdEaXJlY3RpdmUoe1xuICB0cmFuc2NsdWRlOiAnZWxlbWVudCcsXG4gIHByaW9yaXR5OiAxMjAwLFxuICByZXF1aXJlOiAnXm5nU3dpdGNoJyxcbiAgbXVsdGlFbGVtZW50OiB0cnVlLFxuICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0ciwgY3RybCwgJHRyYW5zY2x1ZGUpIHtcbiAgICBjdHJsLmNhc2VzWyc/J10gPSAoY3RybC5jYXNlc1snPyddIHx8IFtdKTtcbiAgICBjdHJsLmNhc2VzWyc/J10ucHVzaCh7IHRyYW5zY2x1ZGU6ICR0cmFuc2NsdWRlLCBlbGVtZW50OiBlbGVtZW50IH0pO1xuICAgfVxufSk7XG5cbi8qKlxuICogQG5nZG9jIGRpcmVjdGl2ZVxuICogQG5hbWUgbmdUcmFuc2NsdWRlXG4gKiBAcmVzdHJpY3QgRUFDXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBEaXJlY3RpdmUgdGhhdCBtYXJrcyB0aGUgaW5zZXJ0aW9uIHBvaW50IGZvciB0aGUgdHJhbnNjbHVkZWQgRE9NIG9mIHRoZSBuZWFyZXN0IHBhcmVudCBkaXJlY3RpdmUgdGhhdCB1c2VzIHRyYW5zY2x1c2lvbi5cbiAqXG4gKiBZb3UgY2FuIHNwZWNpZnkgdGhhdCB5b3Ugd2FudCB0byBpbnNlcnQgYSBuYW1lZCB0cmFuc2NsdXNpb24gc2xvdCwgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBzbG90LCBieSBwcm92aWRpbmcgdGhlIHNsb3QgbmFtZVxuICogYXMgdGhlIHZhbHVlIG9mIHRoZSBgbmctdHJhbnNjbHVkZWAgb3IgYG5nLXRyYW5zY2x1ZGUtc2xvdGAgYXR0cmlidXRlLlxuICpcbiAqIElmIHRoZSB0cmFuc2NsdWRlZCBjb250ZW50IGlzIG5vdCBlbXB0eSAoaS5lLiBjb250YWlucyBvbmUgb3IgbW9yZSBET00gbm9kZXMsIGluY2x1ZGluZyB3aGl0ZXNwYWNlIHRleHQgbm9kZXMpLCBhbnkgZXhpc3RpbmdcbiAqIGNvbnRlbnQgb2YgdGhpcyBlbGVtZW50IHdpbGwgYmUgcmVtb3ZlZCBiZWZvcmUgdGhlIHRyYW5zY2x1ZGVkIGNvbnRlbnQgaXMgaW5zZXJ0ZWQuXG4gKiBJZiB0aGUgdHJhbnNjbHVkZWQgY29udGVudCBpcyBlbXB0eSAob3Igb25seSB3aGl0ZXNwYWNlKSwgdGhlIGV4aXN0aW5nIGNvbnRlbnQgaXMgbGVmdCBpbnRhY3QuIFRoaXMgbGV0cyB5b3UgcHJvdmlkZSBmYWxsYmFja1xuICogY29udGVudCBpbiB0aGUgY2FzZSB0aGF0IG5vIHRyYW5zY2x1ZGVkIGNvbnRlbnQgaXMgcHJvdmlkZWQuXG4gKlxuICogQGVsZW1lbnQgQU5ZXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5nVHJhbnNjbHVkZXxuZ1RyYW5zY2x1ZGVTbG90IHRoZSBuYW1lIG9mIHRoZSBzbG90IHRvIGluc2VydCBhdCB0aGlzIHBvaW50LiBJZiB0aGlzIGlzIG5vdCBwcm92aWRlZCwgaXMgZW1wdHlcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBpdHMgdmFsdWUgaXMgdGhlIHNhbWUgYXMgdGhlIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0aGVuIHRoZSBkZWZhdWx0IHNsb3QgaXMgdXNlZC5cbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIEJhc2ljIHRyYW5zY2x1c2lvblxuICogVGhpcyBleGFtcGxlIGRlbW9uc3RyYXRlcyBiYXNpYyB0cmFuc2NsdXNpb24gb2YgY29udGVudCBpbnRvIGEgY29tcG9uZW50IGRpcmVjdGl2ZS5cbiAqIDxleGFtcGxlIG5hbWU9XCJzaW1wbGVUcmFuc2NsdWRlRXhhbXBsZVwiIG1vZHVsZT1cInRyYW5zY2x1ZGVFeGFtcGxlXCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPHNjcmlwdD5cbiAqICAgICAgIGFuZ3VsYXIubW9kdWxlKCd0cmFuc2NsdWRlRXhhbXBsZScsIFtdKVxuICogICAgICAgIC5kaXJlY3RpdmUoJ3BhbmUnLCBmdW5jdGlvbigpe1xuICogICAgICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgICAgICByZXN0cmljdDogJ0UnLFxuICogICAgICAgICAgICAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAqICAgICAgICAgICAgIHNjb3BlOiB7IHRpdGxlOidAJyB9LFxuICogICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHN0eWxlPVwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XCI+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6IGdyYXlcIj57e3RpdGxlfX08L2Rpdj4nICtcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICc8bmctdHJhbnNjbHVkZT48L25nLXRyYW5zY2x1ZGU+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PidcbiAqICAgICAgICAgICB9O1xuICogICAgICAgfSlcbiAqICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICRzY29wZS50aXRsZSA9ICdMb3JlbSBJcHN1bSc7XG4gKiAgICAgICAgICRzY29wZS50ZXh0ID0gJ05lcXVlIHBvcnJvIHF1aXNxdWFtIGVzdCBxdWkgZG9sb3JlbSBpcHN1bSBxdWlhIGRvbG9yLi4uJztcbiAqICAgICAgIH1dKTtcbiAqICAgICA8L3NjcmlwdD5cbiAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICAgPGlucHV0IG5nLW1vZGVsPVwidGl0bGVcIiBhcmlhLWxhYmVsPVwidGl0bGVcIj4gPGJyLz5cbiAqICAgICAgIDx0ZXh0YXJlYSBuZy1tb2RlbD1cInRleHRcIiBhcmlhLWxhYmVsPVwidGV4dFwiPjwvdGV4dGFyZWE+IDxici8+XG4gKiAgICAgICA8cGFuZSB0aXRsZT1cInt7dGl0bGV9fVwiPjxzcGFuPnt7dGV4dH19PC9zcGFuPjwvcGFuZT5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gKiAgICAgIGl0KCdzaG91bGQgaGF2ZSB0cmFuc2NsdWRlZCcsIGZ1bmN0aW9uKCkge1xuICogICAgICAgIHZhciB0aXRsZUVsZW1lbnQgPSBlbGVtZW50KGJ5Lm1vZGVsKCd0aXRsZScpKTtcbiAqICAgICAgICB0aXRsZUVsZW1lbnQuY2xlYXIoKTtcbiAqICAgICAgICB0aXRsZUVsZW1lbnQuc2VuZEtleXMoJ1RJVExFJyk7XG4gKiAgICAgICAgdmFyIHRleHRFbGVtZW50ID0gZWxlbWVudChieS5tb2RlbCgndGV4dCcpKTtcbiAqICAgICAgICB0ZXh0RWxlbWVudC5jbGVhcigpO1xuICogICAgICAgIHRleHRFbGVtZW50LnNlbmRLZXlzKCdURVhUJyk7XG4gKiAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuYmluZGluZygndGl0bGUnKSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdUSVRMRScpO1xuICogICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmJpbmRpbmcoJ3RleHQnKSkuZ2V0VGV4dCgpKS50b0VxdWFsKCdURVhUJyk7XG4gKiAgICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBUcmFuc2NsdWRlIGZhbGxiYWNrIGNvbnRlbnRcbiAqIFRoaXMgZXhhbXBsZSBzaG93cyBob3cgdG8gdXNlIGBOZ1RyYW5zY2x1ZGVgIHdpdGggZmFsbGJhY2sgY29udGVudCwgdGhhdFxuICogaXMgZGlzcGxheWVkIGlmIG5vIHRyYW5zY2x1ZGVkIGNvbnRlbnQgaXMgcHJvdmlkZWQuXG4gKlxuICogPGV4YW1wbGUgbW9kdWxlPVwidHJhbnNjbHVkZUZhbGxiYWNrQ29udGVudEV4YW1wbGVcIiBuYW1lPVwibmctdHJhbnNjbHVkZVwiPlxuICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqIDxzY3JpcHQ+XG4gKiBhbmd1bGFyLm1vZHVsZSgndHJhbnNjbHVkZUZhbGxiYWNrQ29udGVudEV4YW1wbGUnLCBbXSlcbiAqIC5kaXJlY3RpdmUoJ215QnV0dG9uJywgZnVuY3Rpb24oKXtcbiAqICAgICAgICAgICAgIHJldHVybiB7XG4gKiAgICAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gKiAgICAgICAgICAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gKiAgICAgICAgICAgICAgIHNjb3BlOiB0cnVlLFxuICogICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxidXR0b24gc3R5bGU9XCJjdXJzb3I6IHBvaW50ZXI7XCI+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bmctdHJhbnNjbHVkZT4nICtcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGIgc3R5bGU9XCJjb2xvcjogcmVkO1wiPkJ1dHRvbjE8L2I+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L25nLXRyYW5zY2x1ZGU+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAnPC9idXR0b24+J1xuICogICAgICAgICAgICAgfTtcbiAqICAgICAgICAgfSk7XG4gKiA8L3NjcmlwdD5cbiAqIDwhLS0gZmFsbGJhY2sgYnV0dG9uIGNvbnRlbnQgLS0+XG4gKiA8bXktYnV0dG9uIGlkPVwiZmFsbGJhY2tcIj48L215LWJ1dHRvbj5cbiAqIDwhLS0gbW9kaWZpZWQgYnV0dG9uIGNvbnRlbnQgLS0+XG4gKiA8bXktYnV0dG9uIGlkPVwibW9kaWZpZWRcIj5cbiAqICAgPGkgc3R5bGU9XCJjb2xvcjogZ3JlZW47XCI+QnV0dG9uMjwvaT5cbiAqIDwvbXktYnV0dG9uPlxuICogPC9maWxlPlxuICogPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICogaXQoJ3Nob3VsZCBoYXZlIGRpZmZlcmVudCB0cmFuc2NsdWRlIGVsZW1lbnQgY29udGVudCcsIGZ1bmN0aW9uKCkge1xuICogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ2ZhbGxiYWNrJykpLmdldFRleHQoKSkudG9CZSgnQnV0dG9uMScpO1xuICogICAgICAgICAgZXhwZWN0KGVsZW1lbnQoYnkuaWQoJ21vZGlmaWVkJykpLmdldFRleHQoKSkudG9CZSgnQnV0dG9uMicpO1xuICogICAgICAgIH0pO1xuICogPC9maWxlPlxuICogPC9leGFtcGxlPlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgTXVsdGktc2xvdCB0cmFuc2NsdXNpb25cbiAqIFRoaXMgZXhhbXBsZSBkZW1vbnN0cmF0ZXMgdXNpbmcgbXVsdGktc2xvdCB0cmFuc2NsdXNpb24gaW4gYSBjb21wb25lbnQgZGlyZWN0aXZlLlxuICogPGV4YW1wbGUgbmFtZT1cIm11bHRpU2xvdFRyYW5zY2x1ZGVFeGFtcGxlXCIgbW9kdWxlPVwibXVsdGlTbG90VHJhbnNjbHVkZUV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgIDxzdHlsZT5cbiAqICAgICAgLnRpdGxlLCAuZm9vdGVyIHtcbiAqICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmF5XG4gKiAgICAgIH1cbiAqICAgIDwvc3R5bGU+XG4gKiAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICA8aW5wdXQgbmctbW9kZWw9XCJ0aXRsZVwiIGFyaWEtbGFiZWw9XCJ0aXRsZVwiPiA8YnIvPlxuICogICAgICA8dGV4dGFyZWEgbmctbW9kZWw9XCJ0ZXh0XCIgYXJpYS1sYWJlbD1cInRleHRcIj48L3RleHRhcmVhPiA8YnIvPlxuICogICAgICA8cGFuZT5cbiAqICAgICAgICA8cGFuZS10aXRsZT48YSBuZy1ocmVmPVwie3tsaW5rfX1cIj57e3RpdGxlfX08L2E+PC9wYW5lLXRpdGxlPlxuICogICAgICAgIDxwYW5lLWJvZHk+PHA+e3t0ZXh0fX08L3A+PC9wYW5lLWJvZHk+XG4gKiAgICAgIDwvcGFuZT5cbiAqICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICAgIGFuZ3VsYXIubW9kdWxlKCdtdWx0aVNsb3RUcmFuc2NsdWRlRXhhbXBsZScsIFtdKVxuICogICAgIC5kaXJlY3RpdmUoJ3BhbmUnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAqICAgICAgICAgIHRyYW5zY2x1ZGU6IHtcbiAqICAgICAgICAgICAgJ3RpdGxlJzogJz9wYW5lVGl0bGUnLFxuICogICAgICAgICAgICAnYm9keSc6ICdwYW5lQm9keScsXG4gKiAgICAgICAgICAgICdmb290ZXInOiAnP3BhbmVGb290ZXInXG4gKiAgICAgICAgICB9LFxuICogICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IHN0eWxlPVwiYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XCI+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInRpdGxlXCIgbmctdHJhbnNjbHVkZT1cInRpdGxlXCI+RmFsbGJhY2sgVGl0bGU8L2Rpdj4nICtcbiAqICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IG5nLXRyYW5zY2x1ZGU9XCJib2R5XCI+PC9kaXY+JyArXG4gKiAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImZvb3RlclwiIG5nLXRyYW5zY2x1ZGU9XCJmb290ZXJcIj5GYWxsYmFjayBGb290ZXI8L2Rpdj4nICtcbiAqICAgICAgICAgICAgICAgICAgICAnPC9kaXY+J1xuICogICAgICAgIH07XG4gKiAgICB9KVxuICogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgJHNjb3BlLnRpdGxlID0gJ0xvcmVtIElwc3VtJztcbiAqICAgICAgJHNjb3BlLmxpbmsgPSAnaHR0cHM6Ly9nb29nbGUuY29tJztcbiAqICAgICAgJHNjb3BlLnRleHQgPSAnTmVxdWUgcG9ycm8gcXVpc3F1YW0gZXN0IHF1aSBkb2xvcmVtIGlwc3VtIHF1aWEgZG9sb3IuLi4nO1xuICogICAgfV0pO1xuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICAgaXQoJ3Nob3VsZCBoYXZlIHRyYW5zY2x1ZGVkIHRoZSB0aXRsZSBhbmQgdGhlIGJvZHknLCBmdW5jdGlvbigpIHtcbiAqICAgICAgICB2YXIgdGl0bGVFbGVtZW50ID0gZWxlbWVudChieS5tb2RlbCgndGl0bGUnKSk7XG4gKiAgICAgICAgdGl0bGVFbGVtZW50LmNsZWFyKCk7XG4gKiAgICAgICAgdGl0bGVFbGVtZW50LnNlbmRLZXlzKCdUSVRMRScpO1xuICogICAgICAgIHZhciB0ZXh0RWxlbWVudCA9IGVsZW1lbnQoYnkubW9kZWwoJ3RleHQnKSk7XG4gKiAgICAgICAgdGV4dEVsZW1lbnQuY2xlYXIoKTtcbiAqICAgICAgICB0ZXh0RWxlbWVudC5zZW5kS2V5cygnVEVYVCcpO1xuICogICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLnRpdGxlJykpLmdldFRleHQoKSkudG9FcXVhbCgnVElUTEUnKTtcbiAqICAgICAgICBleHBlY3QoZWxlbWVudChieS5iaW5kaW5nKCd0ZXh0JykpLmdldFRleHQoKSkudG9FcXVhbCgnVEVYVCcpO1xuICogICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnLmZvb3RlcicpKS5nZXRUZXh0KCkpLnRvRXF1YWwoJ0ZhbGxiYWNrIEZvb3RlcicpO1xuICogICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG52YXIgbmdUcmFuc2NsdWRlTWluRXJyID0gbWluRXJyKCduZ1RyYW5zY2x1ZGUnKTtcbnZhciBuZ1RyYW5zY2x1ZGVEaXJlY3RpdmUgPSBbJyRjb21waWxlJywgZnVuY3Rpb24oJGNvbXBpbGUpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0VBQycsXG4gICAgdGVybWluYWw6IHRydWUsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gbmdUcmFuc2NsdWRlQ29tcGlsZSh0RWxlbWVudCkge1xuXG4gICAgICAvLyBSZW1vdmUgYW5kIGNhY2hlIGFueSBvcmlnaW5hbCBjb250ZW50IHRvIGFjdCBhcyBhIGZhbGxiYWNrXG4gICAgICB2YXIgZmFsbGJhY2tMaW5rRm4gPSAkY29tcGlsZSh0RWxlbWVudC5jb250ZW50cygpKTtcbiAgICAgIHRFbGVtZW50LmVtcHR5KCk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbiBuZ1RyYW5zY2x1ZGVQb3N0TGluaygkc2NvcGUsICRlbGVtZW50LCAkYXR0cnMsIGNvbnRyb2xsZXIsICR0cmFuc2NsdWRlKSB7XG5cbiAgICAgICAgaWYgKCEkdHJhbnNjbHVkZSkge1xuICAgICAgICAgIHRocm93IG5nVHJhbnNjbHVkZU1pbkVycignb3JwaGFuJyxcbiAgICAgICAgICAnSWxsZWdhbCB1c2Ugb2YgbmdUcmFuc2NsdWRlIGRpcmVjdGl2ZSBpbiB0aGUgdGVtcGxhdGUhICcgK1xuICAgICAgICAgICdObyBwYXJlbnQgZGlyZWN0aXZlIHRoYXQgcmVxdWlyZXMgYSB0cmFuc2NsdXNpb24gZm91bmQuICcgK1xuICAgICAgICAgICdFbGVtZW50OiB7MH0nLFxuICAgICAgICAgIHN0YXJ0aW5nVGFnKCRlbGVtZW50KSk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIC8vIElmIHRoZSBhdHRyaWJ1dGUgaXMgb2YgdGhlIGZvcm06IGBuZy10cmFuc2NsdWRlPVwibmctdHJhbnNjbHVkZVwiYCB0aGVuIHRyZWF0IGl0IGxpa2UgdGhlIGRlZmF1bHRcbiAgICAgICAgaWYgKCRhdHRycy5uZ1RyYW5zY2x1ZGUgPT09ICRhdHRycy4kYXR0ci5uZ1RyYW5zY2x1ZGUpIHtcbiAgICAgICAgICAkYXR0cnMubmdUcmFuc2NsdWRlID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNsb3ROYW1lID0gJGF0dHJzLm5nVHJhbnNjbHVkZSB8fCAkYXR0cnMubmdUcmFuc2NsdWRlU2xvdDtcblxuICAgICAgICAvLyBJZiB0aGUgc2xvdCBpcyByZXF1aXJlZCBhbmQgbm8gdHJhbnNjbHVzaW9uIGNvbnRlbnQgaXMgcHJvdmlkZWQgdGhlbiB0aGlzIGNhbGwgd2lsbCB0aHJvdyBhbiBlcnJvclxuICAgICAgICAkdHJhbnNjbHVkZShuZ1RyYW5zY2x1ZGVDbG9uZUF0dGFjaEZuLCBudWxsLCBzbG90TmFtZSk7XG5cbiAgICAgICAgLy8gSWYgdGhlIHNsb3QgaXMgb3B0aW9uYWwgYW5kIG5vIHRyYW5zY2x1c2lvbiBjb250ZW50IGlzIHByb3ZpZGVkIHRoZW4gdXNlIHRoZSBmYWxsYmFjayBjb250ZW50XG4gICAgICAgIGlmIChzbG90TmFtZSAmJiAhJHRyYW5zY2x1ZGUuaXNTbG90RmlsbGVkKHNsb3ROYW1lKSkge1xuICAgICAgICAgIHVzZUZhbGxiYWNrQ29udGVudCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbmdUcmFuc2NsdWRlQ2xvbmVBdHRhY2hGbihjbG9uZSwgdHJhbnNjbHVkZWRTY29wZSkge1xuICAgICAgICAgIGlmIChjbG9uZS5sZW5ndGggJiYgbm90V2hpdGVzcGFjZShjbG9uZSkpIHtcbiAgICAgICAgICAgICRlbGVtZW50LmFwcGVuZChjbG9uZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVzZUZhbGxiYWNrQ29udGVudCgpO1xuICAgICAgICAgICAgLy8gVGhlcmUgaXMgbm90aGluZyBsaW5rZWQgYWdhaW5zdCB0aGUgdHJhbnNjbHVkZWQgc2NvcGUgc2luY2Ugbm8gY29udGVudCB3YXMgYXZhaWxhYmxlLFxuICAgICAgICAgICAgLy8gc28gaXQgc2hvdWxkIGJlIHNhZmUgdG8gY2xlYW4gdXAgdGhlIGdlbmVyYXRlZCBzY29wZS5cbiAgICAgICAgICAgIHRyYW5zY2x1ZGVkU2NvcGUuJGRlc3Ryb3koKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiB1c2VGYWxsYmFja0NvbnRlbnQoKSB7XG4gICAgICAgICAgLy8gU2luY2UgdGhpcyBpcyB0aGUgZmFsbGJhY2sgY29udGVudCByYXRoZXIgdGhhbiB0aGUgdHJhbnNjbHVkZWQgY29udGVudCxcbiAgICAgICAgICAvLyB3ZSBsaW5rIGFnYWluc3QgdGhlIHNjb3BlIG9mIHRoaXMgZGlyZWN0aXZlIHJhdGhlciB0aGFuIHRoZSB0cmFuc2NsdWRlZCBzY29wZVxuICAgICAgICAgIGZhbGxiYWNrTGlua0ZuKCRzY29wZSwgZnVuY3Rpb24oY2xvbmUpIHtcbiAgICAgICAgICAgICRlbGVtZW50LmFwcGVuZChjbG9uZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBub3RXaGl0ZXNwYWNlKG5vZGVzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbm9kZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9PSBOT0RFX1RZUEVfVEVYVCB8fCBub2RlLm5vZGVWYWx1ZS50cmltKCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1dO1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIHNjcmlwdFxuICogQHJlc3RyaWN0IEVcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIExvYWQgdGhlIGNvbnRlbnQgb2YgYSBgPHNjcmlwdD5gIGVsZW1lbnQgaW50byB7QGxpbmsgbmcuJHRlbXBsYXRlQ2FjaGUgYCR0ZW1wbGF0ZUNhY2hlYH0sIHNvIHRoYXQgdGhlXG4gKiB0ZW1wbGF0ZSBjYW4gYmUgdXNlZCBieSB7QGxpbmsgbmcuZGlyZWN0aXZlOm5nSW5jbHVkZSBgbmdJbmNsdWRlYH0sXG4gKiB7QGxpbmsgbmdSb3V0ZS5kaXJlY3RpdmU6bmdWaWV3IGBuZ1ZpZXdgfSwgb3Ige0BsaW5rIGd1aWRlL2RpcmVjdGl2ZSBkaXJlY3RpdmVzfS4gVGhlIHR5cGUgb2YgdGhlXG4gKiBgPHNjcmlwdD5gIGVsZW1lbnQgbXVzdCBiZSBzcGVjaWZpZWQgYXMgYHRleHQvbmctdGVtcGxhdGVgLCBhbmQgYSBjYWNoZSBuYW1lIGZvciB0aGUgdGVtcGxhdGUgbXVzdCBiZVxuICogYXNzaWduZWQgdGhyb3VnaCB0aGUgZWxlbWVudCdzIGBpZGAsIHdoaWNoIGNhbiB0aGVuIGJlIHVzZWQgYXMgYSBkaXJlY3RpdmUncyBgdGVtcGxhdGVVcmxgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIE11c3QgYmUgc2V0IHRvIGAndGV4dC9uZy10ZW1wbGF0ZSdgLlxuICogQHBhcmFtIHtzdHJpbmd9IGlkIENhY2hlIG5hbWUgb2YgdGhlIHRlbXBsYXRlLlxuICpcbiAqIEBleGFtcGxlXG4gIDxleGFtcGxlICBuYW1lPVwic2NyaXB0LXRhZ1wiPlxuICAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gICAgICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L25nLXRlbXBsYXRlXCIgaWQ9XCIvdHBsLmh0bWxcIj5cbiAgICAgICAgQ29udGVudCBvZiB0aGUgdGVtcGxhdGUuXG4gICAgICA8L3NjcmlwdD5cblxuICAgICAgPGEgbmctY2xpY2s9XCJjdXJyZW50VHBsPScvdHBsLmh0bWwnXCIgaWQ9XCJ0cGwtbGlua1wiPkxvYWQgaW5saW5lZCB0ZW1wbGF0ZTwvYT5cbiAgICAgIDxkaXYgaWQ9XCJ0cGwtY29udGVudFwiIG5nLWluY2x1ZGUgc3JjPVwiY3VycmVudFRwbFwiPjwvZGl2PlxuICAgIDwvZmlsZT5cbiAgICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICBpdCgnc2hvdWxkIGxvYWQgdGVtcGxhdGUgZGVmaW5lZCBpbnNpZGUgc2NyaXB0IHRhZycsIGZ1bmN0aW9uKCkge1xuICAgICAgICBlbGVtZW50KGJ5LmNzcygnI3RwbC1saW5rJykpLmNsaWNrKCk7XG4gICAgICAgIGV4cGVjdChlbGVtZW50KGJ5LmNzcygnI3RwbC1jb250ZW50JykpLmdldFRleHQoKSkudG9NYXRjaCgvQ29udGVudCBvZiB0aGUgdGVtcGxhdGUvKTtcbiAgICAgIH0pO1xuICAgIDwvZmlsZT5cbiAgPC9leGFtcGxlPlxuICovXG52YXIgc2NyaXB0RGlyZWN0aXZlID0gWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICB0ZXJtaW5hbDogdHJ1ZSxcbiAgICBjb21waWxlOiBmdW5jdGlvbihlbGVtZW50LCBhdHRyKSB7XG4gICAgICBpZiAoYXR0ci50eXBlID09PSAndGV4dC9uZy10ZW1wbGF0ZScpIHtcbiAgICAgICAgdmFyIHRlbXBsYXRlVXJsID0gYXR0ci5pZCxcbiAgICAgICAgICAgIHRleHQgPSBlbGVtZW50WzBdLnRleHQ7XG5cbiAgICAgICAgJHRlbXBsYXRlQ2FjaGUucHV0KHRlbXBsYXRlVXJsLCB0ZXh0KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XTtcblxuLyogZXhwb3J0ZWQgc2VsZWN0RGlyZWN0aXZlLCBvcHRpb25EaXJlY3RpdmUgKi9cblxudmFyIG5vb3BOZ01vZGVsQ29udHJvbGxlciA9IHsgJHNldFZpZXdWYWx1ZTogbm9vcCwgJHJlbmRlcjogbm9vcCB9O1xuXG5mdW5jdGlvbiBzZXRPcHRpb25TZWxlY3RlZFN0YXR1cyhvcHRpb25FbCwgdmFsdWUpIHtcbiAgb3B0aW9uRWwucHJvcCgnc2VsZWN0ZWQnLCB2YWx1ZSk7XG4gIC8qKlxuICAgKiBXaGVuIHVuc2VsZWN0aW5nIGFuIG9wdGlvbiwgc2V0dGluZyB0aGUgcHJvcGVydHkgdG8gbnVsbCAvIGZhbHNlIHNob3VsZCBiZSBlbm91Z2hcbiAgICogSG93ZXZlciwgc2NyZWVucmVhZGVycyBtaWdodCByZWFjdCB0byB0aGUgc2VsZWN0ZWQgYXR0cmlidXRlIGluc3RlYWQsIHNlZVxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy8xNDQxOVxuICAgKiBOb3RlOiBcInNlbGVjdGVkXCIgaXMgYSBib29sZWFuIGF0dHIgYW5kIHdpbGwgYmUgcmVtb3ZlZCB3aGVuIHRoZSBcInZhbHVlXCIgYXJnIGluIGF0dHIoKSBpcyBmYWxzZVxuICAgKiBvciBudWxsXG4gICAqL1xuICBvcHRpb25FbC5hdHRyKCdzZWxlY3RlZCcsIHZhbHVlKTtcbn1cblxuLyoqXG4gKiBAbmdkb2MgdHlwZVxuICogQG5hbWUgIHNlbGVjdC5TZWxlY3RDb250cm9sbGVyXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgY29udHJvbGxlciBmb3IgdGhlIHtAbGluayBuZy5zZWxlY3Qgc2VsZWN0fSBkaXJlY3RpdmUuIFRoZSBjb250cm9sbGVyIGV4cG9zZXNcbiAqIGEgZmV3IHV0aWxpdHkgbWV0aG9kcyB0aGF0IGNhbiBiZSB1c2VkIHRvIGF1Z21lbnQgdGhlIGJlaGF2aW9yIG9mIGEgcmVndWxhciBvciBhblxuICoge0BsaW5rIG5nLm5nT3B0aW9ucyBuZ09wdGlvbnN9IHNlbGVjdCBlbGVtZW50LlxuICpcbiAqIEBleGFtcGxlXG4gKiAjIyMgU2V0IGEgY3VzdG9tIGVycm9yIHdoZW4gdGhlIHVua25vd24gb3B0aW9uIGlzIHNlbGVjdGVkXG4gKlxuICogVGhpcyBleGFtcGxlIHNldHMgYSBjdXN0b20gZXJyb3IgXCJ1bmtub3duVmFsdWVcIiBvbiB0aGUgbmdNb2RlbENvbnRyb2xsZXJcbiAqIHdoZW4gdGhlIHNlbGVjdCBlbGVtZW50J3MgdW5rbm93biBvcHRpb24gaXMgc2VsZWN0ZWQsIGkuZS4gd2hlbiB0aGUgbW9kZWwgaXMgc2V0IHRvIGEgdmFsdWVcbiAqIHRoYXQgaXMgbm90IG1hdGNoZWQgYnkgYW55IG9wdGlvbi5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwic2VsZWN0LXVua25vd24tdmFsdWUtZXJyb3JcIiBtb2R1bGU9XCJzdGF0aWNTZWxlY3RcIj5cbiAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gKiAgICAgPGxhYmVsIGZvcj1cInRlc3RTZWxlY3RcIj4gU2luZ2xlIHNlbGVjdDogPC9sYWJlbD48YnI+XG4gKiAgICAgPHNlbGVjdCBuYW1lPVwidGVzdFNlbGVjdFwiIG5nLW1vZGVsPVwic2VsZWN0ZWRcIiB1bmtub3duLXZhbHVlLWVycm9yPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0xXCI+T3B0aW9uIDE8L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMlwiPk9wdGlvbiAyPC9vcHRpb24+XG4gKiAgICAgPC9zZWxlY3Q+PGJyPlxuICogICAgIDxzcGFuIG5nLWlmPVwibXlGb3JtLnRlc3RTZWxlY3QuJGVycm9yLnVua25vd25WYWx1ZVwiPkVycm9yOiBUaGUgY3VycmVudCBtb2RlbCBkb2Vzbid0IG1hdGNoIGFueSBvcHRpb248L3NwYW4+XG4gKlxuICogICAgIDxidXR0b24gbmctY2xpY2s9XCJmb3JjZVVua25vd25PcHRpb24oKVwiPkZvcmNlIHVua25vd24gb3B0aW9uPC9idXR0b24+PGJyPlxuICogICA8L2Zvcm0+XG4gKiA8L2Rpdj5cbiAqIDwvZmlsZT5cbiAqIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICBhbmd1bGFyLm1vZHVsZSgnc3RhdGljU2VsZWN0JywgW10pXG4gKiAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAkc2NvcGUuc2VsZWN0ZWQgPSBudWxsO1xuICpcbiAqICAgICAgJHNjb3BlLmZvcmNlVW5rbm93bk9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICogICAgICAgICRzY29wZS5zZWxlY3RlZCA9ICdub25zZW5zZSc7XG4gKiAgICAgIH07XG4gKiAgIH1dKVxuICogICAuZGlyZWN0aXZlKCd1bmtub3duVmFsdWVFcnJvcicsIGZ1bmN0aW9uKCkge1xuICogICAgIHJldHVybiB7XG4gKiAgICAgICByZXF1aXJlOiBbJ25nTW9kZWwnLCAnc2VsZWN0J10sXG4gKiAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gKiAgICAgICAgIHZhciBuZ01vZGVsQ3RybCA9IGN0cmxzWzBdO1xuICogICAgICAgICB2YXIgc2VsZWN0Q3RybCA9IGN0cmxzWzFdO1xuICpcbiAqICAgICAgICAgbmdNb2RlbEN0cmwuJHZhbGlkYXRvcnMudW5rbm93blZhbHVlID0gZnVuY3Rpb24obW9kZWxWYWx1ZSwgdmlld1ZhbHVlKSB7XG4gKiAgICAgICAgICAgaWYgKHNlbGVjdEN0cmwuJGlzVW5rbm93bk9wdGlvblNlbGVjdGVkKCkpIHtcbiAqICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAqICAgICAgICAgICB9XG4gKlxuICogICAgICAgICAgIHJldHVybiB0cnVlO1xuICogICAgICAgICB9O1xuICogICAgICAgfVxuICpcbiAqICAgICB9O1xuICogICB9KTtcbiAqIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIFNldCB0aGUgXCJyZXF1aXJlZFwiIGVycm9yIHdoZW4gdGhlIHVua25vd24gb3B0aW9uIGlzIHNlbGVjdGVkLlxuICpcbiAqIEJ5IGRlZmF1bHQsIHRoZSBcInJlcXVpcmVkXCIgZXJyb3Igb24gdGhlIG5nTW9kZWxDb250cm9sbGVyIGlzIG9ubHkgc2V0IG9uIGEgcmVxdWlyZWQgc2VsZWN0XG4gKiB3aGVuIHRoZSBlbXB0eSBvcHRpb24gaXMgc2VsZWN0ZWQuIFRoaXMgZXhhbXBsZSBhZGRzIGEgY3VzdG9tIGRpcmVjdGl2ZSB0aGF0IGFsc28gc2V0cyB0aGVcbiAqIGVycm9yIHdoZW4gdGhlIHVua25vd24gb3B0aW9uIGlzIHNlbGVjdGVkLlxuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJzZWxlY3QtdW5rbm93bi12YWx1ZS1yZXF1aXJlZFwiIG1vZHVsZT1cInN0YXRpY1NlbGVjdFwiPlxuICogPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgIDxmb3JtIG5hbWU9XCJteUZvcm1cIj5cbiAqICAgICA8bGFiZWwgZm9yPVwidGVzdFNlbGVjdFwiPiBTZWxlY3Q6IDwvbGFiZWw+PGJyPlxuICogICAgIDxzZWxlY3QgbmFtZT1cInRlc3RTZWxlY3RcIiBuZy1tb2RlbD1cInNlbGVjdGVkXCIgdW5rbm93bi12YWx1ZS1yZXF1aXJlZD5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMVwiPk9wdGlvbiAxPC9vcHRpb24+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwib3B0aW9uLTJcIj5PcHRpb24gMjwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0Pjxicj5cbiAqICAgICA8c3BhbiBuZy1pZj1cIm15Rm9ybS50ZXN0U2VsZWN0LiRlcnJvci5yZXF1aXJlZFwiPkVycm9yOiBQbGVhc2Ugc2VsZWN0IGEgdmFsdWU8L3NwYW4+PGJyPlxuICpcbiAqICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZm9yY2VVbmtub3duT3B0aW9uKClcIj5Gb3JjZSB1bmtub3duIG9wdGlvbjwvYnV0dG9uPjxicj5cbiAqICAgPC9mb3JtPlxuICogPC9kaXY+XG4gKiA8L2ZpbGU+XG4gKiA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgYW5ndWxhci5tb2R1bGUoJ3N0YXRpY1NlbGVjdCcsIFtdKVxuICogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgJHNjb3BlLnNlbGVjdGVkID0gbnVsbDtcbiAqXG4gKiAgICAgICRzY29wZS5mb3JjZVVua25vd25PcHRpb24gPSBmdW5jdGlvbigpIHtcbiAqICAgICAgICAkc2NvcGUuc2VsZWN0ZWQgPSAnbm9uc2Vuc2UnO1xuICogICAgICB9O1xuICogICB9XSlcbiAqICAgLmRpcmVjdGl2ZSgndW5rbm93blZhbHVlUmVxdWlyZWQnLCBmdW5jdGlvbigpIHtcbiAqICAgICByZXR1cm4ge1xuICogICAgICAgcHJpb3JpdHk6IDEsIC8vIFRoaXMgZGlyZWN0aXZlIG11c3QgcnVuIGFmdGVyIHRoZSByZXF1aXJlZCBkaXJlY3RpdmUgaGFzIGFkZGVkIGl0cyB2YWxpZGF0b3JcbiAqICAgICAgIHJlcXVpcmU6IFsnbmdNb2RlbCcsICdzZWxlY3QnXSxcbiAqICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycywgY3RybHMpIHtcbiAqICAgICAgICAgdmFyIG5nTW9kZWxDdHJsID0gY3RybHNbMF07XG4gKiAgICAgICAgIHZhciBzZWxlY3RDdHJsID0gY3RybHNbMV07XG4gKlxuICogICAgICAgICB2YXIgb3JpZ2luYWxSZXF1aXJlZFZhbGlkYXRvciA9IG5nTW9kZWxDdHJsLiR2YWxpZGF0b3JzLnJlcXVpcmVkO1xuICpcbiAqICAgICAgICAgbmdNb2RlbEN0cmwuJHZhbGlkYXRvcnMucmVxdWlyZWQgPSBmdW5jdGlvbigpIHtcbiAqICAgICAgICAgICBpZiAoYXR0cnMucmVxdWlyZWQgJiYgc2VsZWN0Q3RybC4kaXNVbmtub3duT3B0aW9uU2VsZWN0ZWQoKSkge1xuICogICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICogICAgICAgICAgIH1cbiAqXG4gKiAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVxdWlyZWRWYWxpZGF0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAqICAgICAgICAgfTtcbiAqICAgICAgIH1cbiAqICAgICB9O1xuICogICB9KTtcbiAqIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuICpcbiAqXG4gKi9cbnZhciBTZWxlY3RDb250cm9sbGVyID1cbiAgICAgICAgWyckZWxlbWVudCcsICckc2NvcGUnLCAvKiogQHRoaXMgKi8gZnVuY3Rpb24oJGVsZW1lbnQsICRzY29wZSkge1xuXG4gIHZhciBzZWxmID0gdGhpcyxcbiAgICAgIG9wdGlvbnNNYXAgPSBuZXcgTmdNYXAoKTtcblxuICBzZWxmLnNlbGVjdFZhbHVlTWFwID0ge307IC8vIEtleXMgYXJlIHRoZSBoYXNoZWQgdmFsdWVzLCB2YWx1ZXMgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXG4gIC8vIElmIHRoZSBuZ01vZGVsIGRvZXNuJ3QgZ2V0IHByb3ZpZGVkIHRoZW4gcHJvdmlkZSBhIGR1bW15IG5vb3AgdmVyc2lvbiB0byBwcmV2ZW50IGVycm9yc1xuICBzZWxmLm5nTW9kZWxDdHJsID0gbm9vcE5nTW9kZWxDb250cm9sbGVyO1xuICBzZWxmLm11bHRpcGxlID0gZmFsc2U7XG5cbiAgLy8gVGhlIFwidW5rbm93blwiIG9wdGlvbiBpcyBvbmUgdGhhdCBpcyBwcmVwZW5kZWQgdG8gdGhlIGxpc3QgaWYgdGhlIHZpZXdWYWx1ZVxuICAvLyBkb2VzIG5vdCBtYXRjaCBhbnkgb2YgdGhlIG9wdGlvbnMuIFdoZW4gaXQgaXMgcmVuZGVyZWQgdGhlIHZhbHVlIG9mIHRoZSB1bmtub3duXG4gIC8vIG9wdGlvbiBpcyAnPyBYWFggPycgd2hlcmUgWFhYIGlzIHRoZSBoYXNoS2V5IG9mIHRoZSB2YWx1ZSB0aGF0IGlzIG5vdCBrbm93bi5cbiAgLy9cbiAgLy8gU3VwcG9ydDogSUUgOSBvbmx5XG4gIC8vIFdlIGNhbid0IGp1c3QganFMaXRlKCc8b3B0aW9uPicpIHNpbmNlIGpxTGl0ZSBpcyBub3Qgc21hcnQgZW5vdWdoXG4gIC8vIHRvIGNyZWF0ZSBpdCBpbiA8c2VsZWN0PiBhbmQgSUUgYmFyZnMgb3RoZXJ3aXNlLlxuICBzZWxmLnVua25vd25PcHRpb24gPSBqcUxpdGUod2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpKTtcblxuICAvLyBUaGUgZW1wdHkgb3B0aW9uIGlzIGFuIG9wdGlvbiB3aXRoIHRoZSB2YWx1ZSAnJyB0aGF0IHRoZSBhcHBsaWNhdGlvbiBkZXZlbG9wZXIgY2FuXG4gIC8vIHByb3ZpZGUgaW5zaWRlIHRoZSBzZWxlY3QuIEl0IGlzIGFsd2F5cyBzZWxlY3RhYmxlIGFuZCBpbmRpY2F0ZXMgdGhhdCBhIFwibnVsbFwiIHNlbGVjdGlvbiBoYXNcbiAgLy8gYmVlbiBtYWRlIGJ5IHRoZSB1c2VyLlxuICAvLyBJZiB0aGUgc2VsZWN0IGhhcyBhbiBlbXB0eSBvcHRpb24sIGFuZCB0aGUgbW9kZWwgb2YgdGhlIHNlbGVjdCBpcyBzZXQgdG8gXCJ1bmRlZmluZWRcIiBvciBcIm51bGxcIixcbiAgLy8gdGhlIGVtcHR5IG9wdGlvbiBpcyBzZWxlY3RlZC5cbiAgLy8gSWYgdGhlIG1vZGVsIGlzIHNldCB0byBhIGRpZmZlcmVudCB1bm1hdGNoZWQgdmFsdWUsIHRoZSB1bmtub3duIG9wdGlvbiBpcyByZW5kZXJlZCBhbmRcbiAgLy8gc2VsZWN0ZWQsIGkuZSBib3RoIGFyZSBwcmVzZW50LCBiZWNhdXNlIGEgXCJudWxsXCIgc2VsZWN0aW9uIGFuZCBhbiB1bmtub3duIHZhbHVlIGFyZSBkaWZmZXJlbnQuXG4gIHNlbGYuaGFzRW1wdHlPcHRpb24gPSBmYWxzZTtcbiAgc2VsZi5lbXB0eU9wdGlvbiA9IHVuZGVmaW5lZDtcblxuICBzZWxmLnJlbmRlclVua25vd25PcHRpb24gPSBmdW5jdGlvbih2YWwpIHtcbiAgICB2YXIgdW5rbm93blZhbCA9IHNlbGYuZ2VuZXJhdGVVbmtub3duT3B0aW9uVmFsdWUodmFsKTtcbiAgICBzZWxmLnVua25vd25PcHRpb24udmFsKHVua25vd25WYWwpO1xuICAgICRlbGVtZW50LnByZXBlbmQoc2VsZi51bmtub3duT3B0aW9uKTtcbiAgICBzZXRPcHRpb25TZWxlY3RlZFN0YXR1cyhzZWxmLnVua25vd25PcHRpb24sIHRydWUpO1xuICAgICRlbGVtZW50LnZhbCh1bmtub3duVmFsKTtcbiAgfTtcblxuICBzZWxmLnVwZGF0ZVVua25vd25PcHRpb24gPSBmdW5jdGlvbih2YWwpIHtcbiAgICB2YXIgdW5rbm93blZhbCA9IHNlbGYuZ2VuZXJhdGVVbmtub3duT3B0aW9uVmFsdWUodmFsKTtcbiAgICBzZWxmLnVua25vd25PcHRpb24udmFsKHVua25vd25WYWwpO1xuICAgIHNldE9wdGlvblNlbGVjdGVkU3RhdHVzKHNlbGYudW5rbm93bk9wdGlvbiwgdHJ1ZSk7XG4gICAgJGVsZW1lbnQudmFsKHVua25vd25WYWwpO1xuICB9O1xuXG4gIHNlbGYuZ2VuZXJhdGVVbmtub3duT3B0aW9uVmFsdWUgPSBmdW5jdGlvbih2YWwpIHtcbiAgICByZXR1cm4gJz8gJyArIGhhc2hLZXkodmFsKSArICcgPyc7XG4gIH07XG5cbiAgc2VsZi5yZW1vdmVVbmtub3duT3B0aW9uID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNlbGYudW5rbm93bk9wdGlvbi5wYXJlbnQoKSkgc2VsZi51bmtub3duT3B0aW9uLnJlbW92ZSgpO1xuICB9O1xuXG4gIHNlbGYuc2VsZWN0RW1wdHlPcHRpb24gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZi5lbXB0eU9wdGlvbikge1xuICAgICAgJGVsZW1lbnQudmFsKCcnKTtcbiAgICAgIHNldE9wdGlvblNlbGVjdGVkU3RhdHVzKHNlbGYuZW1wdHlPcHRpb24sIHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBzZWxmLnVuc2VsZWN0RW1wdHlPcHRpb24gPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoc2VsZi5oYXNFbXB0eU9wdGlvbikge1xuICAgICAgc2V0T3B0aW9uU2VsZWN0ZWRTdGF0dXMoc2VsZi5lbXB0eU9wdGlvbiwgZmFsc2UpO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgIC8vIGRpc2FibGUgdW5rbm93biBvcHRpb24gc28gdGhhdCB3ZSBkb24ndCBkbyB3b3JrIHdoZW4gdGhlIHdob2xlIHNlbGVjdCBpcyBiZWluZyBkZXN0cm95ZWRcbiAgICBzZWxmLnJlbmRlclVua25vd25PcHRpb24gPSBub29wO1xuICB9KTtcblxuICAvLyBSZWFkIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0IGNvbnRyb2wsIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGNoYW5nZXMgZGVwZW5kaW5nXG4gIC8vIHVwb24gd2hldGhlciB0aGUgc2VsZWN0IGNhbiBoYXZlIG11bHRpcGxlIHZhbHVlcyBhbmQgd2hldGhlciBuZ09wdGlvbnMgaXMgYXQgd29yay5cbiAgc2VsZi5yZWFkVmFsdWUgPSBmdW5jdGlvbiByZWFkU2luZ2xlVmFsdWUoKSB7XG4gICAgdmFyIHZhbCA9ICRlbGVtZW50LnZhbCgpO1xuICAgIC8vIG5nVmFsdWUgYWRkZWQgb3B0aW9uIHZhbHVlcyBhcmUgc3RvcmVkIGluIHRoZSBzZWxlY3RWYWx1ZU1hcCwgbm9ybWFsIGludGVycG9sYXRpb25zIGFyZSBub3RcbiAgICB2YXIgcmVhbFZhbCA9IHZhbCBpbiBzZWxmLnNlbGVjdFZhbHVlTWFwID8gc2VsZi5zZWxlY3RWYWx1ZU1hcFt2YWxdIDogdmFsO1xuXG4gICAgaWYgKHNlbGYuaGFzT3B0aW9uKHJlYWxWYWwpKSB7XG4gICAgICByZXR1cm4gcmVhbFZhbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuXG4gIC8vIFdyaXRlIHRoZSB2YWx1ZSB0byB0aGUgc2VsZWN0IGNvbnRyb2wsIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGNoYW5nZXMgZGVwZW5kaW5nXG4gIC8vIHVwb24gd2hldGhlciB0aGUgc2VsZWN0IGNhbiBoYXZlIG11bHRpcGxlIHZhbHVlcyBhbmQgd2hldGhlciBuZ09wdGlvbnMgaXMgYXQgd29yay5cbiAgc2VsZi53cml0ZVZhbHVlID0gZnVuY3Rpb24gd3JpdGVTaW5nbGVWYWx1ZSh2YWx1ZSkge1xuICAgIC8vIE1ha2Ugc3VyZSB0byByZW1vdmUgdGhlIHNlbGVjdGVkIGF0dHJpYnV0ZSBmcm9tIHRoZSBwcmV2aW91c2x5IHNlbGVjdGVkIG9wdGlvblxuICAgIC8vIE90aGVyd2lzZSwgc2NyZWVuIHJlYWRlcnMgbWlnaHQgZ2V0IGNvbmZ1c2VkXG4gICAgdmFyIGN1cnJlbnRseVNlbGVjdGVkT3B0aW9uID0gJGVsZW1lbnRbMF0ub3B0aW9uc1skZWxlbWVudFswXS5zZWxlY3RlZEluZGV4XTtcbiAgICBpZiAoY3VycmVudGx5U2VsZWN0ZWRPcHRpb24pIHNldE9wdGlvblNlbGVjdGVkU3RhdHVzKGpxTGl0ZShjdXJyZW50bHlTZWxlY3RlZE9wdGlvbiksIGZhbHNlKTtcblxuICAgIGlmIChzZWxmLmhhc09wdGlvbih2YWx1ZSkpIHtcbiAgICAgIHNlbGYucmVtb3ZlVW5rbm93bk9wdGlvbigpO1xuXG4gICAgICB2YXIgaGFzaGVkVmFsID0gaGFzaEtleSh2YWx1ZSk7XG4gICAgICAkZWxlbWVudC52YWwoaGFzaGVkVmFsIGluIHNlbGYuc2VsZWN0VmFsdWVNYXAgPyBoYXNoZWRWYWwgOiB2YWx1ZSk7XG5cbiAgICAgIC8vIFNldCBzZWxlY3RlZCBhdHRyaWJ1dGUgYW5kIHByb3BlcnR5IG9uIHNlbGVjdGVkIG9wdGlvbiBmb3Igc2NyZWVuIHJlYWRlcnNcbiAgICAgIHZhciBzZWxlY3RlZE9wdGlvbiA9ICRlbGVtZW50WzBdLm9wdGlvbnNbJGVsZW1lbnRbMF0uc2VsZWN0ZWRJbmRleF07XG4gICAgICBzZXRPcHRpb25TZWxlY3RlZFN0YXR1cyhqcUxpdGUoc2VsZWN0ZWRPcHRpb24pLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZi5zZWxlY3RVbmtub3duT3JFbXB0eU9wdGlvbih2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG5cbiAgLy8gVGVsbCB0aGUgc2VsZWN0IGNvbnRyb2wgdGhhdCBhbiBvcHRpb24sIHdpdGggdGhlIGdpdmVuIHZhbHVlLCBoYXMgYmVlbiBhZGRlZFxuICBzZWxmLmFkZE9wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlLCBlbGVtZW50KSB7XG4gICAgLy8gU2tpcCBjb21tZW50IG5vZGVzLCBhcyB0aGV5IG9ubHkgcG9sbHV0ZSB0aGUgYG9wdGlvbnNNYXBgXG4gICAgaWYgKGVsZW1lbnRbMF0ubm9kZVR5cGUgPT09IE5PREVfVFlQRV9DT01NRU5UKSByZXR1cm47XG5cbiAgICBhc3NlcnROb3RIYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgJ1wib3B0aW9uIHZhbHVlXCInKTtcbiAgICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgICBzZWxmLmhhc0VtcHR5T3B0aW9uID0gdHJ1ZTtcbiAgICAgIHNlbGYuZW1wdHlPcHRpb24gPSBlbGVtZW50O1xuICAgIH1cbiAgICB2YXIgY291bnQgPSBvcHRpb25zTWFwLmdldCh2YWx1ZSkgfHwgMDtcbiAgICBvcHRpb25zTWFwLnNldCh2YWx1ZSwgY291bnQgKyAxKTtcbiAgICAvLyBPbmx5IHJlbmRlciBhdCB0aGUgZW5kIG9mIGEgZGlnZXN0LiBUaGlzIGltcHJvdmVzIHJlbmRlciBwZXJmb3JtYW5jZSB3aGVuIG1hbnkgb3B0aW9uc1xuICAgIC8vIGFyZSBhZGRlZCBkdXJpbmcgYSBkaWdlc3QgYW5kIGVuc3VyZXMgYWxsIHJlbGV2YW50IG9wdGlvbnMgYXJlIGNvcnJlY3RseSBtYXJrZWQgYXMgc2VsZWN0ZWRcbiAgICBzY2hlZHVsZVJlbmRlcigpO1xuICB9O1xuXG4gIC8vIFRlbGwgdGhlIHNlbGVjdCBjb250cm9sIHRoYXQgYW4gb3B0aW9uLCB3aXRoIHRoZSBnaXZlbiB2YWx1ZSwgaGFzIGJlZW4gcmVtb3ZlZFxuICBzZWxmLnJlbW92ZU9wdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIGNvdW50ID0gb3B0aW9uc01hcC5nZXQodmFsdWUpO1xuICAgIGlmIChjb3VudCkge1xuICAgICAgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgICAgIG9wdGlvbnNNYXAuZGVsZXRlKHZhbHVlKTtcbiAgICAgICAgaWYgKHZhbHVlID09PSAnJykge1xuICAgICAgICAgIHNlbGYuaGFzRW1wdHlPcHRpb24gPSBmYWxzZTtcbiAgICAgICAgICBzZWxmLmVtcHR5T3B0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRpb25zTWFwLnNldCh2YWx1ZSwgY291bnQgLSAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgLy8gQ2hlY2sgd2hldGhlciB0aGUgc2VsZWN0IGNvbnRyb2wgaGFzIGFuIG9wdGlvbiBtYXRjaGluZyB0aGUgZ2l2ZW4gdmFsdWVcbiAgc2VsZi5oYXNPcHRpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAhIW9wdGlvbnNNYXAuZ2V0KHZhbHVlKTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBzZWxlY3QuU2VsZWN0Q29udHJvbGxlciMkaGFzRW1wdHlPcHRpb25cbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqXG4gICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBzZWxlY3QgZWxlbWVudCBjdXJyZW50bHkgaGFzIGFuIGVtcHR5IG9wdGlvblxuICAgKiBlbGVtZW50LCBpLmUuIGFuIG9wdGlvbiB0aGF0IHNpZ25pZmllcyB0aGF0IHRoZSBzZWxlY3QgaXMgZW1wdHkgLyB0aGUgc2VsZWN0aW9uIGlzIG51bGwuXG4gICAqXG4gICAqL1xuICBzZWxmLiRoYXNFbXB0eU9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBzZWxmLmhhc0VtcHR5T3B0aW9uO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAbmdkb2MgbWV0aG9kXG4gICAqIEBuYW1lIHNlbGVjdC5TZWxlY3RDb250cm9sbGVyIyRpc1Vua25vd25PcHRpb25TZWxlY3RlZFxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICpcbiAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHNlbGVjdCBlbGVtZW50J3MgdW5rbm93biBvcHRpb24gaXMgc2VsZWN0ZWQuIFRoZSB1bmtub3duIG9wdGlvbiBpcyBhZGRlZFxuICAgKiBhbmQgYXV0b21hdGljYWxseSBzZWxlY3RlZCB3aGVuZXZlciB0aGUgc2VsZWN0IG1vZGVsIGRvZXNuJ3QgbWF0Y2ggYW55IG9wdGlvbi5cbiAgICpcbiAgICovXG4gIHNlbGYuJGlzVW5rbm93bk9wdGlvblNlbGVjdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgLy8gUHJlc2VuY2Ugb2YgdGhlIHVua25vd24gb3B0aW9uIG1lYW5zIGl0IGlzIHNlbGVjdGVkXG4gICAgcmV0dXJuICRlbGVtZW50WzBdLm9wdGlvbnNbMF0gPT09IHNlbGYudW5rbm93bk9wdGlvblswXTtcbiAgfTtcblxuICAvKipcbiAgICogQG5nZG9jIG1ldGhvZFxuICAgKiBAbmFtZSBzZWxlY3QuU2VsZWN0Q29udHJvbGxlciMkaXNFbXB0eU9wdGlvblNlbGVjdGVkXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgc2VsZWN0IGVsZW1lbnQgaGFzIGFuIGVtcHR5IG9wdGlvbiBhbmQgdGhpcyBlbXB0eSBvcHRpb24gaXMgY3VycmVudGx5XG4gICAqIHNlbGVjdGVkLiBSZXR1cm5zIGBmYWxzZWAgaWYgdGhlIHNlbGVjdCBlbGVtZW50IGhhcyBubyBlbXB0eSBvcHRpb24gb3IgaXQgaXMgbm90IHNlbGVjdGVkLlxuICAgKlxuICAgKi9cbiAgc2VsZi4kaXNFbXB0eU9wdGlvblNlbGVjdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHNlbGYuaGFzRW1wdHlPcHRpb24gJiYgJGVsZW1lbnRbMF0ub3B0aW9uc1skZWxlbWVudFswXS5zZWxlY3RlZEluZGV4XSA9PT0gc2VsZi5lbXB0eU9wdGlvblswXTtcbiAgfTtcblxuICBzZWxmLnNlbGVjdFVua25vd25PckVtcHR5T3B0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCAmJiBzZWxmLmVtcHR5T3B0aW9uKSB7XG4gICAgICBzZWxmLnJlbW92ZVVua25vd25PcHRpb24oKTtcbiAgICAgIHNlbGYuc2VsZWN0RW1wdHlPcHRpb24oKTtcbiAgICB9IGVsc2UgaWYgKHNlbGYudW5rbm93bk9wdGlvbi5wYXJlbnQoKS5sZW5ndGgpIHtcbiAgICAgIHNlbGYudXBkYXRlVW5rbm93bk9wdGlvbih2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGYucmVuZGVyVW5rbm93bk9wdGlvbih2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZW5kZXJTY2hlZHVsZWQgPSBmYWxzZTtcbiAgZnVuY3Rpb24gc2NoZWR1bGVSZW5kZXIoKSB7XG4gICAgaWYgKHJlbmRlclNjaGVkdWxlZCkgcmV0dXJuO1xuICAgIHJlbmRlclNjaGVkdWxlZCA9IHRydWU7XG4gICAgJHNjb3BlLiQkcG9zdERpZ2VzdChmdW5jdGlvbigpIHtcbiAgICAgIHJlbmRlclNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgc2VsZi5uZ01vZGVsQ3RybC4kcmVuZGVyKCk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgdXBkYXRlU2NoZWR1bGVkID0gZmFsc2U7XG4gIGZ1bmN0aW9uIHNjaGVkdWxlVmlld1ZhbHVlVXBkYXRlKHJlbmRlckFmdGVyKSB7XG4gICAgaWYgKHVwZGF0ZVNjaGVkdWxlZCkgcmV0dXJuO1xuXG4gICAgdXBkYXRlU2NoZWR1bGVkID0gdHJ1ZTtcblxuICAgICRzY29wZS4kJHBvc3REaWdlc3QoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoJHNjb3BlLiQkZGVzdHJveWVkKSByZXR1cm47XG5cbiAgICAgIHVwZGF0ZVNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgc2VsZi5uZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKHNlbGYucmVhZFZhbHVlKCkpO1xuICAgICAgaWYgKHJlbmRlckFmdGVyKSBzZWxmLm5nTW9kZWxDdHJsLiRyZW5kZXIoKTtcbiAgICB9KTtcbiAgfVxuXG5cbiAgc2VsZi5yZWdpc3Rlck9wdGlvbiA9IGZ1bmN0aW9uKG9wdGlvblNjb3BlLCBvcHRpb25FbGVtZW50LCBvcHRpb25BdHRycywgaW50ZXJwb2xhdGVWYWx1ZUZuLCBpbnRlcnBvbGF0ZVRleHRGbikge1xuXG4gICAgaWYgKG9wdGlvbkF0dHJzLiRhdHRyLm5nVmFsdWUpIHtcbiAgICAgIC8vIFRoZSB2YWx1ZSBhdHRyaWJ1dGUgaXMgc2V0IGJ5IG5nVmFsdWVcbiAgICAgIHZhciBvbGRWYWwsIGhhc2hlZFZhbCA9IE5hTjtcbiAgICAgIG9wdGlvbkF0dHJzLiRvYnNlcnZlKCd2YWx1ZScsIGZ1bmN0aW9uIHZhbHVlQXR0cmlidXRlT2JzZXJ2ZUFjdGlvbihuZXdWYWwpIHtcblxuICAgICAgICB2YXIgcmVtb3ZhbDtcbiAgICAgICAgdmFyIHByZXZpb3VzbHlTZWxlY3RlZCA9IG9wdGlvbkVsZW1lbnQucHJvcCgnc2VsZWN0ZWQnKTtcblxuICAgICAgICBpZiAoaXNEZWZpbmVkKGhhc2hlZFZhbCkpIHtcbiAgICAgICAgICBzZWxmLnJlbW92ZU9wdGlvbihvbGRWYWwpO1xuICAgICAgICAgIGRlbGV0ZSBzZWxmLnNlbGVjdFZhbHVlTWFwW2hhc2hlZFZhbF07XG4gICAgICAgICAgcmVtb3ZhbCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBoYXNoZWRWYWwgPSBoYXNoS2V5KG5ld1ZhbCk7XG4gICAgICAgIG9sZFZhbCA9IG5ld1ZhbDtcbiAgICAgICAgc2VsZi5zZWxlY3RWYWx1ZU1hcFtoYXNoZWRWYWxdID0gbmV3VmFsO1xuICAgICAgICBzZWxmLmFkZE9wdGlvbihuZXdWYWwsIG9wdGlvbkVsZW1lbnQpO1xuICAgICAgICAvLyBTZXQgdGhlIGF0dHJpYnV0ZSBkaXJlY3RseSBpbnN0ZWFkIG9mIHVzaW5nIG9wdGlvbkF0dHJzLiRzZXQgLSB0aGlzIHN0b3BzIHRoZSBvYnNlcnZlclxuICAgICAgICAvLyBmcm9tIGZpcmluZyBhIHNlY29uZCB0aW1lLiBPdGhlciAkb2JzZXJ2ZXJzIG9uIHZhbHVlIHdpbGwgYWxzbyBnZXQgdGhlIHJlc3VsdCBvZiB0aGVcbiAgICAgICAgLy8gbmdWYWx1ZSBleHByZXNzaW9uLCBub3QgdGhlIGhhc2hlZCB2YWx1ZVxuICAgICAgICBvcHRpb25FbGVtZW50LmF0dHIoJ3ZhbHVlJywgaGFzaGVkVmFsKTtcblxuICAgICAgICBpZiAocmVtb3ZhbCAmJiBwcmV2aW91c2x5U2VsZWN0ZWQpIHtcbiAgICAgICAgICBzY2hlZHVsZVZpZXdWYWx1ZVVwZGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoaW50ZXJwb2xhdGVWYWx1ZUZuKSB7XG4gICAgICAvLyBUaGUgdmFsdWUgYXR0cmlidXRlIGlzIGludGVycG9sYXRlZFxuICAgICAgb3B0aW9uQXR0cnMuJG9ic2VydmUoJ3ZhbHVlJywgZnVuY3Rpb24gdmFsdWVBdHRyaWJ1dGVPYnNlcnZlQWN0aW9uKG5ld1ZhbCkge1xuICAgICAgICAvLyBUaGlzIG1ldGhvZCBpcyBvdmVyd3JpdHRlbiBpbiBuZ09wdGlvbnMgYW5kIGhhcyBzaWRlLWVmZmVjdHMhXG4gICAgICAgIHNlbGYucmVhZFZhbHVlKCk7XG5cbiAgICAgICAgdmFyIHJlbW92YWw7XG4gICAgICAgIHZhciBwcmV2aW91c2x5U2VsZWN0ZWQgPSBvcHRpb25FbGVtZW50LnByb3AoJ3NlbGVjdGVkJyk7XG5cbiAgICAgICAgaWYgKGlzRGVmaW5lZChvbGRWYWwpKSB7XG4gICAgICAgICAgc2VsZi5yZW1vdmVPcHRpb24ob2xkVmFsKTtcbiAgICAgICAgICByZW1vdmFsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBvbGRWYWwgPSBuZXdWYWw7XG4gICAgICAgIHNlbGYuYWRkT3B0aW9uKG5ld1ZhbCwgb3B0aW9uRWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHJlbW92YWwgJiYgcHJldmlvdXNseVNlbGVjdGVkKSB7XG4gICAgICAgICAgc2NoZWR1bGVWaWV3VmFsdWVVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChpbnRlcnBvbGF0ZVRleHRGbikge1xuICAgICAgLy8gVGhlIHRleHQgY29udGVudCBpcyBpbnRlcnBvbGF0ZWRcbiAgICAgIG9wdGlvblNjb3BlLiR3YXRjaChpbnRlcnBvbGF0ZVRleHRGbiwgZnVuY3Rpb24gaW50ZXJwb2xhdGVXYXRjaEFjdGlvbihuZXdWYWwsIG9sZFZhbCkge1xuICAgICAgICBvcHRpb25BdHRycy4kc2V0KCd2YWx1ZScsIG5ld1ZhbCk7XG4gICAgICAgIHZhciBwcmV2aW91c2x5U2VsZWN0ZWQgPSBvcHRpb25FbGVtZW50LnByb3AoJ3NlbGVjdGVkJyk7XG4gICAgICAgIGlmIChvbGRWYWwgIT09IG5ld1ZhbCkge1xuICAgICAgICAgIHNlbGYucmVtb3ZlT3B0aW9uKG9sZFZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5hZGRPcHRpb24obmV3VmFsLCBvcHRpb25FbGVtZW50KTtcblxuICAgICAgICBpZiAob2xkVmFsICYmIHByZXZpb3VzbHlTZWxlY3RlZCkge1xuICAgICAgICAgIHNjaGVkdWxlVmlld1ZhbHVlVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGUgdmFsdWUgYXR0cmlidXRlIGlzIHN0YXRpY1xuICAgICAgc2VsZi5hZGRPcHRpb24ob3B0aW9uQXR0cnMudmFsdWUsIG9wdGlvbkVsZW1lbnQpO1xuICAgIH1cblxuXG4gICAgb3B0aW9uQXR0cnMuJG9ic2VydmUoJ2Rpc2FibGVkJywgZnVuY3Rpb24obmV3VmFsKSB7XG5cbiAgICAgIC8vIFNpbmNlIG1vZGVsIHVwZGF0ZXMgd2lsbCBhbHNvIHNlbGVjdCBkaXNhYmxlZCBvcHRpb25zIChsaWtlIG5nT3B0aW9ucyksXG4gICAgICAvLyB3ZSBvbmx5IGhhdmUgdG8gaGFuZGxlIG9wdGlvbnMgYmVjb21pbmcgZGlzYWJsZWQsIG5vdCBlbmFibGVkXG5cbiAgICAgIGlmIChuZXdWYWwgPT09ICd0cnVlJyB8fCBuZXdWYWwgJiYgb3B0aW9uRWxlbWVudC5wcm9wKCdzZWxlY3RlZCcpKSB7XG4gICAgICAgIGlmIChzZWxmLm11bHRpcGxlKSB7XG4gICAgICAgICAgc2NoZWR1bGVWaWV3VmFsdWVVcGRhdGUodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VsZi5uZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKG51bGwpO1xuICAgICAgICAgIHNlbGYubmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBvcHRpb25FbGVtZW50Lm9uKCckZGVzdHJveScsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IHNlbGYucmVhZFZhbHVlKCk7XG4gICAgICB2YXIgcmVtb3ZlVmFsdWUgPSBvcHRpb25BdHRycy52YWx1ZTtcblxuICAgICAgc2VsZi5yZW1vdmVPcHRpb24ocmVtb3ZlVmFsdWUpO1xuICAgICAgc2NoZWR1bGVSZW5kZXIoKTtcblxuICAgICAgaWYgKHNlbGYubXVsdGlwbGUgJiYgY3VycmVudFZhbHVlICYmIGN1cnJlbnRWYWx1ZS5pbmRleE9mKHJlbW92ZVZhbHVlKSAhPT0gLTEgfHxcbiAgICAgICAgICBjdXJyZW50VmFsdWUgPT09IHJlbW92ZVZhbHVlXG4gICAgICApIHtcbiAgICAgICAgLy8gV2hlbiBtdWx0aXBsZSAoc2VsZWN0ZWQpIG9wdGlvbnMgYXJlIGRlc3Ryb3llZCBhdCB0aGUgc2FtZSB0aW1lLCB3ZSBkb24ndCB3YW50XG4gICAgICAgIC8vIHRvIHJ1biBhIG1vZGVsIHVwZGF0ZSBmb3IgZWFjaCBvZiB0aGVtLiBJbnN0ZWFkLCBydW4gYSBzaW5nbGUgdXBkYXRlIGluIHRoZSAkJHBvc3REaWdlc3RcbiAgICAgICAgc2NoZWR1bGVWaWV3VmFsdWVVcGRhdGUodHJ1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBzZWxlY3RcbiAqIEByZXN0cmljdCBFXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBIVE1MIGBzZWxlY3RgIGVsZW1lbnQgd2l0aCBhbmd1bGFyIGRhdGEtYmluZGluZy5cbiAqXG4gKiBUaGUgYHNlbGVjdGAgZGlyZWN0aXZlIGlzIHVzZWQgdG9nZXRoZXIgd2l0aCB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9IHRvIHByb3ZpZGUgZGF0YS1iaW5kaW5nXG4gKiBiZXR3ZWVuIHRoZSBzY29wZSBhbmQgdGhlIGA8c2VsZWN0PmAgY29udHJvbCAoaW5jbHVkaW5nIHNldHRpbmcgZGVmYXVsdCB2YWx1ZXMpLlxuICogSXQgYWxzbyBoYW5kbGVzIGR5bmFtaWMgYDxvcHRpb24+YCBlbGVtZW50cywgd2hpY2ggY2FuIGJlIGFkZGVkIHVzaW5nIHRoZSB7QGxpbmsgbmdSZXBlYXQgYG5nUmVwZWF0fWAgb3JcbiAqIHtAbGluayBuZ09wdGlvbnMgYG5nT3B0aW9uc2B9IGRpcmVjdGl2ZXMuXG4gKlxuICogV2hlbiBhbiBpdGVtIGluIHRoZSBgPHNlbGVjdD5gIG1lbnUgaXMgc2VsZWN0ZWQsIHRoZSB2YWx1ZSBvZiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHdpbGwgYmUgYm91bmRcbiAqIHRvIHRoZSBtb2RlbCBpZGVudGlmaWVkIGJ5IHRoZSBgbmdNb2RlbGAgZGlyZWN0aXZlLiBXaXRoIHN0YXRpYyBvciByZXBlYXRlZCBvcHRpb25zLCB0aGlzIGlzXG4gKiB0aGUgY29udGVudCBvZiB0aGUgYHZhbHVlYCBhdHRyaWJ1dGUgb3IgdGhlIHRleHRDb250ZW50IG9mIHRoZSBgPG9wdGlvbj5gLCBpZiB0aGUgdmFsdWUgYXR0cmlidXRlIGlzIG1pc3NpbmcuXG4gKiBWYWx1ZSBhbmQgdGV4dENvbnRlbnQgY2FuIGJlIGludGVycG9sYXRlZC5cbiAqXG4gKiBUaGUge0BsaW5rIHNlbGVjdC5TZWxlY3RDb250cm9sbGVyIHNlbGVjdCBjb250cm9sbGVyfSBleHBvc2VzIHV0aWxpdHkgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWRcbiAqIHRvIG1hbmlwdWxhdGUgdGhlIHNlbGVjdCdzIGJlaGF2aW9yLlxuICpcbiAqICMjIE1hdGNoaW5nIG1vZGVsIGFuZCBvcHRpb24gdmFsdWVzXG4gKlxuICogSW4gZ2VuZXJhbCwgdGhlIG1hdGNoIGJldHdlZW4gdGhlIG1vZGVsIGFuZCBhbiBvcHRpb24gaXMgZXZhbHVhdGVkIGJ5IHN0cmljdGx5IGNvbXBhcmluZyB0aGUgbW9kZWxcbiAqIHZhbHVlIGFnYWluc3QgdGhlIHZhbHVlIG9mIHRoZSBhdmFpbGFibGUgb3B0aW9ucy5cbiAqXG4gKiBJZiB5b3UgYXJlIHNldHRpbmcgdGhlIG9wdGlvbiB2YWx1ZSB3aXRoIHRoZSBvcHRpb24ncyBgdmFsdWVgIGF0dHJpYnV0ZSwgb3IgdGV4dENvbnRlbnQsIHRoZVxuICogdmFsdWUgd2lsbCBhbHdheXMgYmUgYSBgc3RyaW5nYCB3aGljaCBtZWFucyB0aGF0IHRoZSBtb2RlbCB2YWx1ZSBtdXN0IGFsc28gYmUgYSBzdHJpbmcuXG4gKiBPdGhlcndpc2UgdGhlIGBzZWxlY3RgIGRpcmVjdGl2ZSBjYW5ub3QgbWF0Y2ggdGhlbSBjb3JyZWN0bHkuXG4gKlxuICogVG8gYmluZCB0aGUgbW9kZWwgdG8gYSBub24tc3RyaW5nIHZhbHVlLCB5b3UgY2FuIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBzdHJhdGVnaWVzOlxuICogLSB0aGUge0BsaW5rIG5nLm5nT3B0aW9ucyBgbmdPcHRpb25zYH0gZGlyZWN0aXZlXG4gKiAgICh7QGxpbmsgbmcuc2VsZWN0I3VzaW5nLXNlbGVjdC13aXRoLW5nb3B0aW9ucy1hbmQtc2V0dGluZy1hLWRlZmF1bHQtdmFsdWV9KVxuICogLSB0aGUge0BsaW5rIG5nLm5nVmFsdWUgYG5nVmFsdWVgfSBkaXJlY3RpdmUsIHdoaWNoIGFsbG93cyBhcmJpdHJhcnkgZXhwcmVzc2lvbnMgdG8gYmVcbiAqICAgb3B0aW9uIHZhbHVlcyAoe0BsaW5rIG5nLnNlbGVjdCN1c2luZy1uZ3ZhbHVlLXRvLWJpbmQtdGhlLW1vZGVsLXRvLWFuLWFycmF5LW9mLW9iamVjdHMgRXhhbXBsZX0pXG4gKiAtIG1vZGVsICRwYXJzZXJzIC8gJGZvcm1hdHRlcnMgdG8gY29udmVydCB0aGUgc3RyaW5nIHZhbHVlXG4gKiAgICh7QGxpbmsgbmcuc2VsZWN0I2JpbmRpbmctc2VsZWN0LXRvLWEtbm9uLXN0cmluZy12YWx1ZS12aWEtbmdtb2RlbC1wYXJzaW5nLWZvcm1hdHRpbmcgRXhhbXBsZX0pXG4gKlxuICogSWYgdGhlIHZpZXdWYWx1ZSBvZiBgbmdNb2RlbGAgZG9lcyBub3QgbWF0Y2ggYW55IG9mIHRoZSBvcHRpb25zLCB0aGVuIHRoZSBjb250cm9sXG4gKiB3aWxsIGF1dG9tYXRpY2FsbHkgYWRkIGFuIFwidW5rbm93blwiIG9wdGlvbiwgd2hpY2ggaXQgdGhlbiByZW1vdmVzIHdoZW4gdGhlIG1pc21hdGNoIGlzIHJlc29sdmVkLlxuICpcbiAqIE9wdGlvbmFsbHksIGEgc2luZ2xlIGhhcmQtY29kZWQgYDxvcHRpb24+YCBlbGVtZW50LCB3aXRoIHRoZSB2YWx1ZSBzZXQgdG8gYW4gZW1wdHkgc3RyaW5nLCBjYW5cbiAqIGJlIG5lc3RlZCBpbnRvIHRoZSBgPHNlbGVjdD5gIGVsZW1lbnQuIFRoaXMgZWxlbWVudCB3aWxsIHRoZW4gcmVwcmVzZW50IHRoZSBgbnVsbGAgb3IgXCJub3Qgc2VsZWN0ZWRcIlxuICogb3B0aW9uLiBTZWUgZXhhbXBsZSBiZWxvdyBmb3IgZGVtb25zdHJhdGlvbi5cbiAqXG4gKiAjIyBDaG9vc2luZyBiZXR3ZWVuIGBuZ1JlcGVhdGAgYW5kIGBuZ09wdGlvbnNgXG4gKlxuICogSW4gbWFueSBjYXNlcywgYG5nUmVwZWF0YCBjYW4gYmUgdXNlZCBvbiBgPG9wdGlvbj5gIGVsZW1lbnRzIGluc3RlYWQgb2Yge0BsaW5rIG5nLmRpcmVjdGl2ZTpuZ09wdGlvbnNcbiAqIG5nT3B0aW9uc30gdG8gYWNoaWV2ZSBhIHNpbWlsYXIgcmVzdWx0LiBIb3dldmVyLCBgbmdPcHRpb25zYCBwcm92aWRlcyBzb21lIGJlbmVmaXRzOlxuICogLSBtb3JlIGZsZXhpYmlsaXR5IGluIGhvdyB0aGUgYDxzZWxlY3Q+YCdzIG1vZGVsIGlzIGFzc2lnbmVkIHZpYSB0aGUgYHNlbGVjdGAgKipgYXNgKiogcGFydCBvZiB0aGVcbiAqIGNvbXByZWhlbnNpb24gZXhwcmVzc2lvblxuICogLSByZWR1Y2VkIG1lbW9yeSBjb25zdW1wdGlvbiBieSBub3QgY3JlYXRpbmcgYSBuZXcgc2NvcGUgZm9yIGVhY2ggcmVwZWF0ZWQgaW5zdGFuY2VcbiAqIC0gaW5jcmVhc2VkIHJlbmRlciBzcGVlZCBieSBjcmVhdGluZyB0aGUgb3B0aW9ucyBpbiBhIGRvY3VtZW50RnJhZ21lbnQgaW5zdGVhZCBvZiBpbmRpdmlkdWFsbHlcbiAqXG4gKiBTcGVjaWZpY2FsbHksIHNlbGVjdCB3aXRoIHJlcGVhdGVkIG9wdGlvbnMgc2xvd3MgZG93biBzaWduaWZpY2FudGx5IHN0YXJ0aW5nIGF0IDIwMDAgb3B0aW9ucyBpblxuICogQ2hyb21lIGFuZCBJbnRlcm5ldCBFeHBsb3JlciAvIEVkZ2UuXG4gKlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuZ01vZGVsIEFzc2lnbmFibGUgYW5ndWxhciBleHByZXNzaW9uIHRvIGRhdGEtYmluZCB0by5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmFtZSBQcm9wZXJ0eSBuYW1lIG9mIHRoZSBmb3JtIHVuZGVyIHdoaWNoIHRoZSBjb250cm9sIGlzIHB1Ymxpc2hlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbXVsdGlwbGUgQWxsb3dzIG11bHRpcGxlIG9wdGlvbnMgdG8gYmUgc2VsZWN0ZWQuIFRoZSBzZWxlY3RlZCB2YWx1ZXMgd2lsbCBiZVxuICogICAgIGJvdW5kIHRvIHRoZSBtb2RlbCBhcyBhbiBhcnJheS5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gcmVxdWlyZWQgU2V0cyBgcmVxdWlyZWRgIHZhbGlkYXRpb24gZXJyb3Iga2V5IGlmIHRoZSB2YWx1ZSBpcyBub3QgZW50ZXJlZC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdSZXF1aXJlZCBBZGRzIHJlcXVpcmVkIGF0dHJpYnV0ZSBhbmQgcmVxdWlyZWQgdmFsaWRhdGlvbiBjb25zdHJhaW50IHRvXG4gKiB0aGUgZWxlbWVudCB3aGVuIHRoZSBuZ1JlcXVpcmVkIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIHRydWUuIFVzZSBuZ1JlcXVpcmVkIGluc3RlYWQgb2YgcmVxdWlyZWRcbiAqIHdoZW4geW91IHdhbnQgdG8gZGF0YS1iaW5kIHRvIHRoZSByZXF1aXJlZCBhdHRyaWJ1dGUuXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nQ2hhbmdlIEFuZ3VsYXIgZXhwcmVzc2lvbiB0byBiZSBleGVjdXRlZCB3aGVuIHNlbGVjdGVkIG9wdGlvbihzKSBjaGFuZ2VzIGR1ZSB0byB1c2VyXG4gKiAgICBpbnRlcmFjdGlvbiB3aXRoIHRoZSBzZWxlY3QgZWxlbWVudC5cbiAqIEBwYXJhbSB7c3RyaW5nPX0gbmdPcHRpb25zIHNldHMgdGhlIG9wdGlvbnMgdGhhdCB0aGUgc2VsZWN0IGlzIHBvcHVsYXRlZCB3aXRoIGFuZCBkZWZpbmVzIHdoYXQgaXNcbiAqIHNldCBvbiB0aGUgbW9kZWwgb24gc2VsZWN0aW9uLiBTZWUge0BsaW5rIG5nT3B0aW9ucyBgbmdPcHRpb25zYH0uXG4gKiBAcGFyYW0ge3N0cmluZz19IG5nQXR0clNpemUgc2V0cyB0aGUgc2l6ZSBvZiB0aGUgc2VsZWN0IGVsZW1lbnQgZHluYW1pY2FsbHkuIFVzZXMgdGhlXG4gKiB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiMtbmdhdHRyLWZvci1iaW5kaW5nLXRvLWFyYml0cmFyeS1hdHRyaWJ1dGVzIG5nQXR0cn0gZGlyZWN0aXZlLlxuICpcbiAqXG4gKiBAa25vd25Jc3N1ZVxuICpcbiAqIEluIEZpcmVmb3gsIHRoZSBzZWxlY3QgbW9kZWwgaXMgb25seSB1cGRhdGVkIHdoZW4gdGhlIHNlbGVjdCBlbGVtZW50IGlzIGJsdXJyZWQuIEZvciBleGFtcGxlLFxuICogd2hlbiBzd2l0Y2hpbmcgYmV0d2VlbiBvcHRpb25zIHdpdGggdGhlIGtleWJvYXJkLCB0aGUgc2VsZWN0IG1vZGVsIGlzIG9ubHkgc2V0IHRvIHRoZVxuICogY3VycmVudGx5IHNlbGVjdGVkIG9wdGlvbiB3aGVuIHRoZSBzZWxlY3QgaXMgYmx1cnJlZCwgZS5nIHZpYSB0YWIga2V5IG9yIGNsaWNraW5nIHRoZSBtb3VzZVxuICogb3V0c2lkZSB0aGUgc2VsZWN0LlxuICpcbiAqIFRoaXMgaXMgZHVlIHRvIGFuIGFtYmlndWl0eSBpbiB0aGUgc2VsZWN0IGVsZW1lbnQgc3BlY2lmaWNhdGlvbi4gU2VlIHRoZVxuICogW2lzc3VlIG9uIHRoZSBGaXJlZm94IGJ1ZyB0cmFja2VyXShodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMjYzNzkpXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiwgYW5kIHRoaXNcbiAqIFtHaXRodWIgY29tbWVudCBmb3IgYSB3b3JrYXJvdW5kXShodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyLmpzL2lzc3Vlcy85MTM0I2lzc3VlY29tbWVudC0xMzA4MDA0ODgpXG4gKlxuICogQGV4YW1wbGVcbiAqICMjIyBTaW1wbGUgYHNlbGVjdGAgZWxlbWVudHMgd2l0aCBzdGF0aWMgb3B0aW9uc1xuICpcbiAqIDxleGFtcGxlIG5hbWU9XCJzdGF0aWMtc2VsZWN0XCIgbW9kdWxlPVwic3RhdGljU2VsZWN0XCI+XG4gKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICogICAgIDxsYWJlbCBmb3I9XCJzaW5nbGVTZWxlY3RcIj4gU2luZ2xlIHNlbGVjdDogPC9sYWJlbD48YnI+XG4gKiAgICAgPHNlbGVjdCBuYW1lPVwic2luZ2xlU2VsZWN0XCIgbmctbW9kZWw9XCJkYXRhLnNpbmdsZVNlbGVjdFwiPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0xXCI+T3B0aW9uIDE8L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMlwiPk9wdGlvbiAyPC9vcHRpb24+XG4gKiAgICAgPC9zZWxlY3Q+PGJyPlxuICpcbiAqICAgICA8bGFiZWwgZm9yPVwic2luZ2xlU2VsZWN0XCI+IFNpbmdsZSBzZWxlY3Qgd2l0aCBcIm5vdCBzZWxlY3RlZFwiIG9wdGlvbiBhbmQgZHluYW1pYyBvcHRpb24gdmFsdWVzOiA8L2xhYmVsPjxicj5cbiAqICAgICA8c2VsZWN0IG5hbWU9XCJzaW5nbGVTZWxlY3RcIiBpZD1cInNpbmdsZVNlbGVjdFwiIG5nLW1vZGVsPVwiZGF0YS5zaW5nbGVTZWxlY3RcIj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJcIj4tLS1QbGVhc2Ugc2VsZWN0LS0tPC9vcHRpb24+IDwhLS0gbm90IHNlbGVjdGVkIC8gYmxhbmsgb3B0aW9uIC0tPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cInt7ZGF0YS5vcHRpb24xfX1cIj5PcHRpb24gMTwvb3B0aW9uPiA8IS0tIGludGVycG9sYXRpb24gLS0+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwib3B0aW9uLTJcIj5PcHRpb24gMjwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0Pjxicj5cbiAqICAgICA8YnV0dG9uIG5nLWNsaWNrPVwiZm9yY2VVbmtub3duT3B0aW9uKClcIj5Gb3JjZSB1bmtub3duIG9wdGlvbjwvYnV0dG9uPjxicj5cbiAqICAgICA8dHQ+c2luZ2xlU2VsZWN0ID0ge3tkYXRhLnNpbmdsZVNlbGVjdH19PC90dD5cbiAqXG4gKiAgICAgPGhyPlxuICogICAgIDxsYWJlbCBmb3I9XCJtdWx0aXBsZVNlbGVjdFwiPiBNdWx0aXBsZSBzZWxlY3Q6IDwvbGFiZWw+PGJyPlxuICogICAgIDxzZWxlY3QgbmFtZT1cIm11bHRpcGxlU2VsZWN0XCIgaWQ9XCJtdWx0aXBsZVNlbGVjdFwiIG5nLW1vZGVsPVwiZGF0YS5tdWx0aXBsZVNlbGVjdFwiIG11bHRpcGxlPlxuICogICAgICAgPG9wdGlvbiB2YWx1ZT1cIm9wdGlvbi0xXCI+T3B0aW9uIDE8L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCJvcHRpb24tMlwiPk9wdGlvbiAyPC9vcHRpb24+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwib3B0aW9uLTNcIj5PcHRpb24gMzwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0Pjxicj5cbiAqICAgICA8dHQ+bXVsdGlwbGVTZWxlY3QgPSB7e2RhdGEubXVsdGlwbGVTZWxlY3R9fTwvdHQ+PGJyLz5cbiAqICAgPC9mb3JtPlxuICogPC9kaXY+XG4gKiA8L2ZpbGU+XG4gKiA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgYW5ndWxhci5tb2R1bGUoJ3N0YXRpY1NlbGVjdCcsIFtdKVxuICogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgJHNjb3BlLmRhdGEgPSB7XG4gKiAgICAgICBzaW5nbGVTZWxlY3Q6IG51bGwsXG4gKiAgICAgICBtdWx0aXBsZVNlbGVjdDogW10sXG4gKiAgICAgICBvcHRpb24xOiAnb3B0aW9uLTEnXG4gKiAgICAgIH07XG4gKlxuICogICAgICAkc2NvcGUuZm9yY2VVbmtub3duT3B0aW9uID0gZnVuY3Rpb24oKSB7XG4gKiAgICAgICAgJHNjb3BlLmRhdGEuc2luZ2xlU2VsZWN0ID0gJ25vbnNlbnNlJztcbiAqICAgICAgfTtcbiAqICAgfV0pO1xuICogPC9maWxlPlxuICo8L2V4YW1wbGU+XG4gKlxuICogIyMjIFVzaW5nIGBuZ1JlcGVhdGAgdG8gZ2VuZXJhdGUgYHNlbGVjdGAgb3B0aW9uc1xuICogPGV4YW1wbGUgbmFtZT1cInNlbGVjdC1uZ3JlcGVhdFwiIG1vZHVsZT1cIm5ncmVwZWF0U2VsZWN0XCI+XG4gKiA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgPGZvcm0gbmFtZT1cIm15Rm9ybVwiPlxuICogICAgIDxsYWJlbCBmb3I9XCJyZXBlYXRTZWxlY3RcIj4gUmVwZWF0IHNlbGVjdDogPC9sYWJlbD5cbiAqICAgICA8c2VsZWN0IG5hbWU9XCJyZXBlYXRTZWxlY3RcIiBpZD1cInJlcGVhdFNlbGVjdFwiIG5nLW1vZGVsPVwiZGF0YS5tb2RlbFwiPlxuICogICAgICAgPG9wdGlvbiBuZy1yZXBlYXQ9XCJvcHRpb24gaW4gZGF0YS5hdmFpbGFibGVPcHRpb25zXCIgdmFsdWU9XCJ7e29wdGlvbi5pZH19XCI+e3tvcHRpb24ubmFtZX19PC9vcHRpb24+XG4gKiAgICAgPC9zZWxlY3Q+XG4gKiAgIDwvZm9ybT5cbiAqICAgPGhyPlxuICogICA8dHQ+bW9kZWwgPSB7e2RhdGEubW9kZWx9fTwvdHQ+PGJyLz5cbiAqIDwvZGl2PlxuICogPC9maWxlPlxuICogPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogIGFuZ3VsYXIubW9kdWxlKCduZ3JlcGVhdFNlbGVjdCcsIFtdKVxuICogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgJHNjb3BlLmRhdGEgPSB7XG4gKiAgICAgICBtb2RlbDogbnVsbCxcbiAqICAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcbiAqICAgICAgICAge2lkOiAnMScsIG5hbWU6ICdPcHRpb24gQSd9LFxuICogICAgICAgICB7aWQ6ICcyJywgbmFtZTogJ09wdGlvbiBCJ30sXG4gKiAgICAgICAgIHtpZDogJzMnLCBuYW1lOiAnT3B0aW9uIEMnfVxuICogICAgICAgXVxuICogICAgICB9O1xuICogICB9XSk7XG4gKiA8L2ZpbGU+XG4gKjwvZXhhbXBsZT5cbiAqXG4gKiAjIyMgVXNpbmcgYG5nVmFsdWVgIHRvIGJpbmQgdGhlIG1vZGVsIHRvIGFuIGFycmF5IG9mIG9iamVjdHNcbiAqIDxleGFtcGxlIG5hbWU9XCJzZWxlY3Qtbmd2YWx1ZVwiIG1vZHVsZT1cIm5ndmFsdWVTZWxlY3RcIj5cbiAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gKiAgICAgPGxhYmVsIGZvcj1cIm5ndmFsdWVzZWxlY3RcIj4gbmd2YWx1ZSBzZWxlY3Q6IDwvbGFiZWw+XG4gKiAgICAgPHNlbGVjdCBzaXplPVwiNlwiIG5hbWU9XCJuZ3ZhbHVlc2VsZWN0XCIgbmctbW9kZWw9XCJkYXRhLm1vZGVsXCIgbXVsdGlwbGU+XG4gKiAgICAgICA8b3B0aW9uIG5nLXJlcGVhdD1cIm9wdGlvbiBpbiBkYXRhLmF2YWlsYWJsZU9wdGlvbnNcIiBuZy12YWx1ZT1cIm9wdGlvbi52YWx1ZVwiPnt7b3B0aW9uLm5hbWV9fTwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0PlxuICogICA8L2Zvcm0+XG4gKiAgIDxocj5cbiAqICAgPHByZT5tb2RlbCA9IHt7ZGF0YS5tb2RlbCB8IGpzb259fTwvcHJlPjxici8+XG4gKiA8L2Rpdj5cbiAqIDwvZmlsZT5cbiAqIDxmaWxlIG5hbWU9XCJhcHAuanNcIj5cbiAqICBhbmd1bGFyLm1vZHVsZSgnbmd2YWx1ZVNlbGVjdCcsIFtdKVxuICogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgJHNjb3BlLmRhdGEgPSB7XG4gKiAgICAgICBtb2RlbDogbnVsbCxcbiAqICAgICAgIGF2YWlsYWJsZU9wdGlvbnM6IFtcbiAgICAgICAgICAge3ZhbHVlOiAnbXlTdHJpbmcnLCBuYW1lOiAnc3RyaW5nJ30sXG4gICAgICAgICAgIHt2YWx1ZTogMSwgbmFtZTogJ2ludGVnZXInfSxcbiAgICAgICAgICAge3ZhbHVlOiB0cnVlLCBuYW1lOiAnYm9vbGVhbid9LFxuICAgICAgICAgICB7dmFsdWU6IG51bGwsIG5hbWU6ICdudWxsJ30sXG4gICAgICAgICAgIHt2YWx1ZToge3Byb3A6ICd2YWx1ZSd9LCBuYW1lOiAnb2JqZWN0J30sXG4gICAgICAgICAgIHt2YWx1ZTogWydhJ10sIG5hbWU6ICdhcnJheSd9XG4gKiAgICAgICBdXG4gKiAgICAgIH07XG4gKiAgIH1dKTtcbiAqIDwvZmlsZT5cbiAqPC9leGFtcGxlPlxuICpcbiAqICMjIyBVc2luZyBgc2VsZWN0YCB3aXRoIGBuZ09wdGlvbnNgIGFuZCBzZXR0aW5nIGEgZGVmYXVsdCB2YWx1ZVxuICogU2VlIHRoZSB7QGxpbmsgbmdPcHRpb25zIG5nT3B0aW9ucyBkb2N1bWVudGF0aW9ufSBmb3IgbW9yZSBgbmdPcHRpb25zYCB1c2FnZSBleGFtcGxlcy5cbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwic2VsZWN0LXdpdGgtZGVmYXVsdC12YWx1ZXNcIiBtb2R1bGU9XCJkZWZhdWx0VmFsdWVTZWxlY3RcIj5cbiAqIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICA8Zm9ybSBuYW1lPVwibXlGb3JtXCI+XG4gKiAgICAgPGxhYmVsIGZvcj1cIm15U2VsZWN0XCI+TWFrZSBhIGNob2ljZTo8L2xhYmVsPlxuICogICAgIDxzZWxlY3QgbmFtZT1cIm15U2VsZWN0XCIgaWQ9XCJteVNlbGVjdFwiXG4gKiAgICAgICBuZy1vcHRpb25zPVwib3B0aW9uLm5hbWUgZm9yIG9wdGlvbiBpbiBkYXRhLmF2YWlsYWJsZU9wdGlvbnMgdHJhY2sgYnkgb3B0aW9uLmlkXCJcbiAqICAgICAgIG5nLW1vZGVsPVwiZGF0YS5zZWxlY3RlZE9wdGlvblwiPjwvc2VsZWN0PlxuICogICA8L2Zvcm0+XG4gKiAgIDxocj5cbiAqICAgPHR0Pm9wdGlvbiA9IHt7ZGF0YS5zZWxlY3RlZE9wdGlvbn19PC90dD48YnIvPlxuICogPC9kaXY+XG4gKiA8L2ZpbGU+XG4gKiA8ZmlsZSBuYW1lPVwiYXBwLmpzXCI+XG4gKiAgYW5ndWxhci5tb2R1bGUoJ2RlZmF1bHRWYWx1ZVNlbGVjdCcsIFtdKVxuICogICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgJHNjb3BlLmRhdGEgPSB7XG4gKiAgICAgICBhdmFpbGFibGVPcHRpb25zOiBbXG4gKiAgICAgICAgIHtpZDogJzEnLCBuYW1lOiAnT3B0aW9uIEEnfSxcbiAqICAgICAgICAge2lkOiAnMicsIG5hbWU6ICdPcHRpb24gQid9LFxuICogICAgICAgICB7aWQ6ICczJywgbmFtZTogJ09wdGlvbiBDJ31cbiAqICAgICAgIF0sXG4gKiAgICAgICBzZWxlY3RlZE9wdGlvbjoge2lkOiAnMycsIG5hbWU6ICdPcHRpb24gQyd9IC8vVGhpcyBzZXRzIHRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBzZWxlY3QgaW4gdGhlIHVpXG4gKiAgICAgICB9O1xuICogICB9XSk7XG4gKiA8L2ZpbGU+XG4gKjwvZXhhbXBsZT5cbiAqXG4gKlxuICogIyMjIEJpbmRpbmcgYHNlbGVjdGAgdG8gYSBub24tc3RyaW5nIHZhbHVlIHZpYSBgbmdNb2RlbGAgcGFyc2luZyAvIGZvcm1hdHRpbmdcbiAqXG4gKiA8ZXhhbXBsZSBuYW1lPVwic2VsZWN0LXdpdGgtbm9uLXN0cmluZy1vcHRpb25zXCIgbW9kdWxlPVwibm9uU3RyaW5nU2VsZWN0XCI+XG4gKiAgIDxmaWxlIG5hbWU9XCJpbmRleC5odG1sXCI+XG4gKiAgICAgPHNlbGVjdCBuZy1tb2RlbD1cIm1vZGVsLmlkXCIgY29udmVydC10by1udW1iZXI+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwiMFwiPlplcm88L29wdGlvbj5cbiAqICAgICAgIDxvcHRpb24gdmFsdWU9XCIxXCI+T25lPC9vcHRpb24+XG4gKiAgICAgICA8b3B0aW9uIHZhbHVlPVwiMlwiPlR3bzwvb3B0aW9uPlxuICogICAgIDwvc2VsZWN0PlxuICogICAgIHt7IG1vZGVsIH19XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cImFwcC5qc1wiPlxuICogICAgIGFuZ3VsYXIubW9kdWxlKCdub25TdHJpbmdTZWxlY3QnLCBbXSlcbiAqICAgICAgIC5ydW4oZnVuY3Rpb24oJHJvb3RTY29wZSkge1xuICogICAgICAgICAkcm9vdFNjb3BlLm1vZGVsID0geyBpZDogMiB9O1xuICogICAgICAgfSlcbiAqICAgICAgIC5kaXJlY3RpdmUoJ2NvbnZlcnRUb051bWJlcicsIGZ1bmN0aW9uKCkge1xuICogICAgICAgICByZXR1cm4ge1xuICogICAgICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAqICAgICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMsIG5nTW9kZWwpIHtcbiAqICAgICAgICAgICAgIG5nTW9kZWwuJHBhcnNlcnMucHVzaChmdW5jdGlvbih2YWwpIHtcbiAqICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbCwgMTApO1xuICogICAgICAgICAgICAgfSk7XG4gKiAgICAgICAgICAgICBuZ01vZGVsLiRmb3JtYXR0ZXJzLnB1c2goZnVuY3Rpb24odmFsKSB7XG4gKiAgICAgICAgICAgICAgIHJldHVybiAnJyArIHZhbDtcbiAqICAgICAgICAgICAgIH0pO1xuICogICAgICAgICAgIH1cbiAqICAgICAgICAgfTtcbiAqICAgICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAqICAgICBpdCgnc2hvdWxkIGluaXRpYWxpemUgdG8gbW9kZWwnLCBmdW5jdGlvbigpIHtcbiAqICAgICAgIGV4cGVjdChlbGVtZW50KGJ5Lm1vZGVsKCdtb2RlbC5pZCcpKS4kKCdvcHRpb246Y2hlY2tlZCcpLmdldFRleHQoKSkudG9FcXVhbCgnVHdvJyk7XG4gKiAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqXG4gKi9cbnZhciBzZWxlY3REaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcblxuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnRScsXG4gICAgcmVxdWlyZTogWydzZWxlY3QnLCAnP25nTW9kZWwnXSxcbiAgICBjb250cm9sbGVyOiBTZWxlY3RDb250cm9sbGVyLFxuICAgIHByaW9yaXR5OiAxLFxuICAgIGxpbms6IHtcbiAgICAgIHByZTogc2VsZWN0UHJlTGluayxcbiAgICAgIHBvc3Q6IHNlbGVjdFBvc3RMaW5rXG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHNlbGVjdFByZUxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG5cbiAgICAgIHZhciBzZWxlY3RDdHJsID0gY3RybHNbMF07XG4gICAgICB2YXIgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcblxuICAgICAgLy8gaWYgbmdNb2RlbCBpcyBub3QgZGVmaW5lZCwgd2UgZG9uJ3QgbmVlZCB0byBkbyBhbnl0aGluZyBidXQgc2V0IHRoZSByZWdpc3Rlck9wdGlvblxuICAgICAgLy8gZnVuY3Rpb24gdG8gbm9vcCwgc28gb3B0aW9ucyBkb24ndCBnZXQgYWRkZWQgaW50ZXJuYWxseVxuICAgICAgaWYgKCFuZ01vZGVsQ3RybCkge1xuICAgICAgICBzZWxlY3RDdHJsLnJlZ2lzdGVyT3B0aW9uID0gbm9vcDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG5cbiAgICAgIHNlbGVjdEN0cmwubmdNb2RlbEN0cmwgPSBuZ01vZGVsQ3RybDtcblxuICAgICAgLy8gV2hlbiB0aGUgc2VsZWN0ZWQgaXRlbShzKSBjaGFuZ2VzIHdlIGRlbGVnYXRlIGdldHRpbmcgdGhlIHZhbHVlIG9mIHRoZSBzZWxlY3QgY29udHJvbFxuICAgICAgLy8gdG8gdGhlIGByZWFkVmFsdWVgIG1ldGhvZCwgd2hpY2ggY2FuIGJlIGNoYW5nZWQgaWYgdGhlIHNlbGVjdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICAgICAgLy8gc2VsZWN0ZWQgdmFsdWVzIG9yIGlmIHRoZSBvcHRpb25zIGFyZSBiZWluZyBnZW5lcmF0ZWQgYnkgYG5nT3B0aW9uc2BcbiAgICAgIGVsZW1lbnQub24oJ2NoYW5nZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxlY3RDdHJsLnJlbW92ZVVua25vd25PcHRpb24oKTtcbiAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIG5nTW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUoc2VsZWN0Q3RybC5yZWFkVmFsdWUoKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIElmIHRoZSBzZWxlY3QgYWxsb3dzIG11bHRpcGxlIHZhbHVlcyB0aGVuIHdlIG5lZWQgdG8gbW9kaWZ5IGhvdyB3ZSByZWFkIGFuZCB3cml0ZVxuICAgICAgLy8gdmFsdWVzIGZyb20gYW5kIHRvIHRoZSBjb250cm9sOyBhbHNvIHdoYXQgaXQgbWVhbnMgZm9yIHRoZSB2YWx1ZSB0byBiZSBlbXB0eSBhbmRcbiAgICAgIC8vIHdlIGhhdmUgdG8gYWRkIGFuIGV4dHJhIHdhdGNoIHNpbmNlIG5nTW9kZWwgZG9lc24ndCB3b3JrIHdlbGwgd2l0aCBhcnJheXMgLSBpdFxuICAgICAgLy8gZG9lc24ndCB0cmlnZ2VyIHJlbmRlcmluZyBpZiBvbmx5IGFuIGl0ZW0gaW4gdGhlIGFycmF5IGNoYW5nZXMuXG4gICAgICBpZiAoYXR0ci5tdWx0aXBsZSkge1xuICAgICAgICBzZWxlY3RDdHJsLm11bHRpcGxlID0gdHJ1ZTtcblxuICAgICAgICAvLyBSZWFkIHZhbHVlIG5vdyBuZWVkcyB0byBjaGVjayBlYWNoIG9wdGlvbiB0byBzZWUgaWYgaXQgaXMgc2VsZWN0ZWRcbiAgICAgICAgc2VsZWN0Q3RybC5yZWFkVmFsdWUgPSBmdW5jdGlvbiByZWFkTXVsdGlwbGVWYWx1ZSgpIHtcbiAgICAgICAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICAgICAgICBmb3JFYWNoKGVsZW1lbnQuZmluZCgnb3B0aW9uJyksIGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAmJiAhb3B0aW9uLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgIHZhciB2YWwgPSBvcHRpb24udmFsdWU7XG4gICAgICAgICAgICAgIGFycmF5LnB1c2godmFsIGluIHNlbGVjdEN0cmwuc2VsZWN0VmFsdWVNYXAgPyBzZWxlY3RDdHJsLnNlbGVjdFZhbHVlTWFwW3ZhbF0gOiB2YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBXcml0ZSB2YWx1ZSBub3cgbmVlZHMgdG8gc2V0IHRoZSBzZWxlY3RlZCBwcm9wZXJ0eSBvZiBlYWNoIG1hdGNoaW5nIG9wdGlvblxuICAgICAgICBzZWxlY3RDdHJsLndyaXRlVmFsdWUgPSBmdW5jdGlvbiB3cml0ZU11bHRpcGxlVmFsdWUodmFsdWUpIHtcbiAgICAgICAgICBmb3JFYWNoKGVsZW1lbnQuZmluZCgnb3B0aW9uJyksIGZ1bmN0aW9uKG9wdGlvbikge1xuICAgICAgICAgICAgdmFyIHNob3VsZEJlU2VsZWN0ZWQgPSAhIXZhbHVlICYmIChpbmNsdWRlcyh2YWx1ZSwgb3B0aW9uLnZhbHVlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNsdWRlcyh2YWx1ZSwgc2VsZWN0Q3RybC5zZWxlY3RWYWx1ZU1hcFtvcHRpb24udmFsdWVdKSk7XG4gICAgICAgICAgICB2YXIgY3VycmVudGx5U2VsZWN0ZWQgPSBvcHRpb24uc2VsZWN0ZWQ7XG5cbiAgICAgICAgICAgIC8vIFN1cHBvcnQ6IElFIDktMTEgb25seSwgRWRnZSAxMi0xNStcbiAgICAgICAgICAgIC8vIEluIElFIGFuZCBFZGdlIGFkZGluZyBvcHRpb25zIHRvIHRoZSBzZWxlY3Rpb24gdmlhIHNoaWZ0K2NsaWNrL1VQL0RPV05cbiAgICAgICAgICAgIC8vIHdpbGwgZGUtc2VsZWN0IGFscmVhZHkgc2VsZWN0ZWQgb3B0aW9ucyBpZiBcInNlbGVjdGVkXCIgb24gdGhvc2Ugb3B0aW9ucyB3YXMgc2V0XG4gICAgICAgICAgICAvLyBtb3JlIHRoYW4gb25jZSAoaS5lLiB3aGVuIHRoZSBvcHRpb25zIHdlcmUgYWxyZWFkeSBzZWxlY3RlZClcbiAgICAgICAgICAgIC8vIFNvIHdlIG9ubHkgbW9kaWZ5IHRoZSBzZWxlY3RlZCBwcm9wZXJ0eSBpZiBuZWNlc3NhcnkuXG4gICAgICAgICAgICAvLyBOb3RlOiB0aGlzIGJlaGF2aW9yIGNhbm5vdCBiZSByZXBsaWNhdGVkIHZpYSB1bml0IHRlc3RzIGJlY2F1c2UgaXQgb25seSBzaG93cyBpbiB0aGVcbiAgICAgICAgICAgIC8vIGFjdHVhbCB1c2VyIGludGVyZmFjZS5cbiAgICAgICAgICAgIGlmIChzaG91bGRCZVNlbGVjdGVkICE9PSBjdXJyZW50bHlTZWxlY3RlZCkge1xuICAgICAgICAgICAgICBzZXRPcHRpb25TZWxlY3RlZFN0YXR1cyhqcUxpdGUob3B0aW9uKSwgc2hvdWxkQmVTZWxlY3RlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyB3ZSBoYXZlIHRvIGRvIGl0IG9uIGVhY2ggd2F0Y2ggc2luY2UgbmdNb2RlbCB3YXRjaGVzIHJlZmVyZW5jZSwgYnV0XG4gICAgICAgIC8vIHdlIG5lZWQgdG8gd29yayBvZiBhbiBhcnJheSwgc28gd2UgbmVlZCB0byBzZWUgaWYgYW55dGhpbmcgd2FzIGluc2VydGVkL3JlbW92ZWRcbiAgICAgICAgdmFyIGxhc3RWaWV3LCBsYXN0Vmlld1JlZiA9IE5hTjtcbiAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uIHNlbGVjdE11bHRpcGxlV2F0Y2goKSB7XG4gICAgICAgICAgaWYgKGxhc3RWaWV3UmVmID09PSBuZ01vZGVsQ3RybC4kdmlld1ZhbHVlICYmICFlcXVhbHMobGFzdFZpZXcsIG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpKSB7XG4gICAgICAgICAgICBsYXN0VmlldyA9IHNoYWxsb3dDb3B5KG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpO1xuICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsYXN0Vmlld1JlZiA9IG5nTW9kZWxDdHJsLiR2aWV3VmFsdWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIElmIHdlIGFyZSBhIG11bHRpcGxlIHNlbGVjdCB0aGVuIHZhbHVlIGlzIG5vdyBhIGNvbGxlY3Rpb25cbiAgICAgICAgLy8gc28gdGhlIG1lYW5pbmcgb2YgJGlzRW1wdHkgY2hhbmdlc1xuICAgICAgICBuZ01vZGVsQ3RybC4kaXNFbXB0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuICF2YWx1ZSB8fCB2YWx1ZS5sZW5ndGggPT09IDA7XG4gICAgICAgIH07XG5cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZWxlY3RQb3N0TGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmxzKSB7XG4gICAgICAvLyBpZiBuZ01vZGVsIGlzIG5vdCBkZWZpbmVkLCB3ZSBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nXG4gICAgICB2YXIgbmdNb2RlbEN0cmwgPSBjdHJsc1sxXTtcbiAgICAgIGlmICghbmdNb2RlbEN0cmwpIHJldHVybjtcblxuICAgICAgdmFyIHNlbGVjdEN0cmwgPSBjdHJsc1swXTtcblxuICAgICAgLy8gV2UgZGVsZWdhdGUgcmVuZGVyaW5nIHRvIHRoZSBgd3JpdGVWYWx1ZWAgbWV0aG9kLCB3aGljaCBjYW4gYmUgY2hhbmdlZFxuICAgICAgLy8gaWYgdGhlIHNlbGVjdCBjYW4gaGF2ZSBtdWx0aXBsZSBzZWxlY3RlZCB2YWx1ZXMgb3IgaWYgdGhlIG9wdGlvbnMgYXJlIGJlaW5nXG4gICAgICAvLyBnZW5lcmF0ZWQgYnkgYG5nT3B0aW9uc2AuXG4gICAgICAvLyBUaGlzIG11c3QgYmUgZG9uZSBpbiB0aGUgcG9zdExpbmsgZm4gdG8gcHJldmVudCAkcmVuZGVyIHRvIGJlIGNhbGxlZCBiZWZvcmVcbiAgICAgIC8vIGFsbCBub2RlcyBoYXZlIGJlZW4gbGlua2VkIGNvcnJlY3RseS5cbiAgICAgIG5nTW9kZWxDdHJsLiRyZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZWN0Q3RybC53cml0ZVZhbHVlKG5nTW9kZWxDdHJsLiR2aWV3VmFsdWUpO1xuICAgICAgfTtcbiAgICB9XG59O1xuXG5cbi8vIFRoZSBvcHRpb24gZGlyZWN0aXZlIGlzIHB1cmVseSBkZXNpZ25lZCB0byBjb21tdW5pY2F0ZSB0aGUgZXhpc3RlbmNlIChvciBsYWNrIG9mKVxuLy8gb2YgZHluYW1pY2FsbHkgY3JlYXRlZCAoYW5kIGRlc3Ryb3llZCkgb3B0aW9uIGVsZW1lbnRzIHRvIHRoZWlyIGNvbnRhaW5pbmcgc2VsZWN0XG4vLyBkaXJlY3RpdmUgdmlhIGl0cyBjb250cm9sbGVyLlxudmFyIG9wdGlvbkRpcmVjdGl2ZSA9IFsnJGludGVycG9sYXRlJywgZnVuY3Rpb24oJGludGVycG9sYXRlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdFJyxcbiAgICBwcmlvcml0eTogMTAwLFxuICAgIGNvbXBpbGU6IGZ1bmN0aW9uKGVsZW1lbnQsIGF0dHIpIHtcbiAgICAgIHZhciBpbnRlcnBvbGF0ZVZhbHVlRm4sIGludGVycG9sYXRlVGV4dEZuO1xuXG4gICAgICBpZiAoaXNEZWZpbmVkKGF0dHIubmdWYWx1ZSkpIHtcbiAgICAgICAgLy8gV2lsbCBiZSBoYW5kbGVkIGJ5IHJlZ2lzdGVyT3B0aW9uXG4gICAgICB9IGVsc2UgaWYgKGlzRGVmaW5lZChhdHRyLnZhbHVlKSkge1xuICAgICAgICAvLyBJZiB0aGUgdmFsdWUgYXR0cmlidXRlIGlzIGRlZmluZWQsIGNoZWNrIGlmIGl0IGNvbnRhaW5zIGFuIGludGVycG9sYXRpb25cbiAgICAgICAgaW50ZXJwb2xhdGVWYWx1ZUZuID0gJGludGVycG9sYXRlKGF0dHIudmFsdWUsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGF0dHJpYnV0ZSBpcyBub3QgZGVmaW5lZCB0aGVuIHdlIGZhbGwgYmFjayB0byB0aGVcbiAgICAgICAgLy8gdGV4dCBjb250ZW50IG9mIHRoZSBvcHRpb24gZWxlbWVudCwgd2hpY2ggbWF5IGJlIGludGVycG9sYXRlZFxuICAgICAgICBpbnRlcnBvbGF0ZVRleHRGbiA9ICRpbnRlcnBvbGF0ZShlbGVtZW50LnRleHQoKSwgdHJ1ZSk7XG4gICAgICAgIGlmICghaW50ZXJwb2xhdGVUZXh0Rm4pIHtcbiAgICAgICAgICBhdHRyLiRzZXQoJ3ZhbHVlJywgZWxlbWVudC50ZXh0KCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cikge1xuICAgICAgICAvLyBUaGlzIGlzIGFuIG9wdGltaXphdGlvbiBvdmVyIHVzaW5nIF5eIHNpbmNlIHdlIGRvbid0IHdhbnQgdG8gaGF2ZSB0byBzZWFyY2hcbiAgICAgICAgLy8gYWxsIHRoZSB3YXkgdG8gdGhlIHJvb3Qgb2YgdGhlIERPTSBmb3IgZXZlcnkgc2luZ2xlIG9wdGlvbiBlbGVtZW50XG4gICAgICAgIHZhciBzZWxlY3RDdHJsTmFtZSA9ICckc2VsZWN0Q29udHJvbGxlcicsXG4gICAgICAgICAgICBwYXJlbnQgPSBlbGVtZW50LnBhcmVudCgpLFxuICAgICAgICAgICAgc2VsZWN0Q3RybCA9IHBhcmVudC5kYXRhKHNlbGVjdEN0cmxOYW1lKSB8fFxuICAgICAgICAgICAgICBwYXJlbnQucGFyZW50KCkuZGF0YShzZWxlY3RDdHJsTmFtZSk7IC8vIGluIGNhc2Ugd2UgYXJlIGluIG9wdGdyb3VwXG5cbiAgICAgICAgaWYgKHNlbGVjdEN0cmwpIHtcbiAgICAgICAgICBzZWxlY3RDdHJsLnJlZ2lzdGVyT3B0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBpbnRlcnBvbGF0ZVZhbHVlRm4sIGludGVycG9sYXRlVGV4dEZuKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59XTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1JlcXVpcmVkXG4gKiBAcmVzdHJpY3QgQVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIG5nUmVxdWlyZWQgYWRkcyB0aGUgcmVxdWlyZWQge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZhbGlkYXRvcnMgYHZhbGlkYXRvcmB9IHRvIHtAbGluayBuZ01vZGVsIGBuZ01vZGVsYH0uXG4gKiBJdCBpcyBtb3N0IG9mdGVuIHVzZWQgZm9yIHtAbGluayBpbnB1dCBgaW5wdXRgfSBhbmQge0BsaW5rIHNlbGVjdCBgc2VsZWN0YH0gY29udHJvbHMsIGJ1dCBjYW4gYWxzbyBiZVxuICogYXBwbGllZCB0byBjdXN0b20gY29udHJvbHMuXG4gKlxuICogVGhlIGRpcmVjdGl2ZSBzZXRzIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBvbiB0aGUgZWxlbWVudCBpZiB0aGUgQW5ndWxhciBleHByZXNzaW9uIGluc2lkZVxuICogYG5nUmVxdWlyZWRgIGV2YWx1YXRlcyB0byB0cnVlLiBBIHNwZWNpYWwgZGlyZWN0aXZlIGZvciBzZXR0aW5nIGByZXF1aXJlZGAgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugd2VcbiAqIGNhbm5vdCB1c2UgaW50ZXJwb2xhdGlvbiBpbnNpZGUgYHJlcXVpcmVkYC4gU2VlIHRoZSB7QGxpbmsgZ3VpZGUvaW50ZXJwb2xhdGlvbiBpbnRlcnBvbGF0aW9uIGd1aWRlfVxuICogZm9yIG1vcmUgaW5mby5cbiAqXG4gKiBUaGUgdmFsaWRhdG9yIHdpbGwgc2V0IHRoZSBgcmVxdWlyZWRgIGVycm9yIGtleSB0byB0cnVlIGlmIHRoZSBgcmVxdWlyZWRgIGF0dHJpYnV0ZSBpcyBzZXQgYW5kXG4gKiBjYWxsaW5nIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyRpc0VtcHR5IGBOZ01vZGVsQ29udHJvbGxlci4kaXNFbXB0eWB9IHdpdGggdGhlXG4gKiB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlIGBuZ01vZGVsLiR2aWV3VmFsdWVgfSByZXR1cm5zIGB0cnVlYC4gRm9yIGV4YW1wbGUsIHRoZVxuICogYCRpc0VtcHR5KClgIGltcGxlbWVudGF0aW9uIGZvciBgaW5wdXRbdGV4dF1gIGNoZWNrcyB0aGUgbGVuZ3RoIG9mIHRoZSBgJHZpZXdWYWx1ZWAuIFdoZW4gZGV2ZWxvcGluZ1xuICogY3VzdG9tIGNvbnRyb2xzLCBgJGlzRW1wdHkoKWAgY2FuIGJlIG92ZXJ3cml0dGVuIHRvIGFjY291bnQgZm9yIGEgJHZpZXdWYWx1ZSB0aGF0IGlzIG5vdCBzdHJpbmctYmFzZWQuXG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ1JlcXVpcmVkRGlyZWN0aXZlXCIgbW9kdWxlPVwibmdSZXF1aXJlZEV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8c2NyaXB0PlxuICogICAgICAgYW5ndWxhci5tb2R1bGUoJ25nUmVxdWlyZWRFeGFtcGxlJywgW10pXG4gKiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICAgJHNjb3BlLnJlcXVpcmVkID0gdHJ1ZTtcbiAqICAgICAgICAgfV0pO1xuICogICAgIDwvc2NyaXB0PlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8Zm9ybSBuYW1lPVwiZm9ybVwiPlxuICogICAgICAgICA8bGFiZWwgZm9yPVwicmVxdWlyZWRcIj5Ub2dnbGUgcmVxdWlyZWQ6IDwvbGFiZWw+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuZy1tb2RlbD1cInJlcXVpcmVkXCIgaWQ9XCJyZXF1aXJlZFwiIC8+XG4gKiAgICAgICAgIDxicj5cbiAqICAgICAgICAgPGxhYmVsIGZvcj1cImlucHV0XCI+VGhpcyBpbnB1dCBtdXN0IGJlIGZpbGxlZCBpZiBgcmVxdWlyZWRgIGlzIHRydWU6IDwvbGFiZWw+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibW9kZWxcIiBpZD1cImlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctcmVxdWlyZWQ9XCJyZXF1aXJlZFwiIC8+PGJyPlxuICogICAgICAgICA8aHI+XG4gKiAgICAgICAgIHJlcXVpcmVkIGVycm9yIHNldD8gPSA8Y29kZT57e2Zvcm0uaW5wdXQuJGVycm9yLnJlcXVpcmVkfX08L2NvZGU+PGJyPlxuICogICAgICAgICBtb2RlbCA9IDxjb2RlPnt7bW9kZWx9fTwvY29kZT5cbiAqICAgICAgIDwvZm9ybT5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIHJlcXVpcmVkID0gZWxlbWVudChieS5iaW5kaW5nKCdmb3JtLmlucHV0LiRlcnJvci5yZXF1aXJlZCcpKTtcbiAgICAgICB2YXIgbW9kZWwgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ21vZGVsJykpO1xuICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkuaWQoJ2lucHV0JykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCBzZXQgdGhlIHJlcXVpcmVkIGVycm9yJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBleHBlY3QocmVxdWlyZWQuZ2V0VGV4dCgpKS50b0NvbnRhaW4oJ3RydWUnKTtcblxuICAgICAgICAgaW5wdXQuc2VuZEtleXMoJzEyMycpO1xuICAgICAgICAgZXhwZWN0KHJlcXVpcmVkLmdldFRleHQoKSkubm90LnRvQ29udGFpbigndHJ1ZScpO1xuICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9Db250YWluKCcxMjMnKTtcbiAgICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG52YXIgcmVxdWlyZWREaXJlY3RpdmUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIHJlcXVpcmU6ICc/bmdNb2RlbCcsXG4gICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsbSwgYXR0ciwgY3RybCkge1xuICAgICAgaWYgKCFjdHJsKSByZXR1cm47XG4gICAgICBhdHRyLnJlcXVpcmVkID0gdHJ1ZTsgLy8gZm9yY2UgdHJ1dGh5IGluIGNhc2Ugd2UgYXJlIG9uIG5vbiBpbnB1dCBlbGVtZW50XG5cbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMucmVxdWlyZWQgPSBmdW5jdGlvbihtb2RlbFZhbHVlLCB2aWV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICFhdHRyLnJlcXVpcmVkIHx8ICFjdHJsLiRpc0VtcHR5KHZpZXdWYWx1ZSk7XG4gICAgICB9O1xuXG4gICAgICBhdHRyLiRvYnNlcnZlKCdyZXF1aXJlZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ1BhdHRlcm5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBuZ1BhdHRlcm4gYWRkcyB0aGUgcGF0dGVybiB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdG9ycyBgdmFsaWRhdG9yYH0gdG8ge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfS5cbiAqIEl0IGlzIG1vc3Qgb2Z0ZW4gdXNlZCBmb3IgdGV4dC1iYXNlZCB7QGxpbmsgaW5wdXQgYGlucHV0YH0gY29udHJvbHMsIGJ1dCBjYW4gYWxzbyBiZSBhcHBsaWVkIHRvIGN1c3RvbSB0ZXh0LWJhc2VkIGNvbnRyb2xzLlxuICpcbiAqIFRoZSB2YWxpZGF0b3Igc2V0cyB0aGUgYHBhdHRlcm5gIGVycm9yIGtleSBpZiB0aGUge0BsaW5rIG5nTW9kZWwuTmdNb2RlbENvbnRyb2xsZXIjJHZpZXdWYWx1ZSBgbmdNb2RlbC4kdmlld1ZhbHVlYH1cbiAqIGRvZXMgbm90IG1hdGNoIGEgUmVnRXhwIHdoaWNoIGlzIG9idGFpbmVkIGJ5IGV2YWx1YXRpbmcgdGhlIEFuZ3VsYXIgZXhwcmVzc2lvbiBnaXZlbiBpbiB0aGVcbiAqIGBuZ1BhdHRlcm5gIGF0dHJpYnV0ZSB2YWx1ZTpcbiAqICogSWYgdGhlIGV4cHJlc3Npb24gZXZhbHVhdGVzIHRvIGEgUmVnRXhwIG9iamVjdCwgdGhlbiB0aGlzIGlzIHVzZWQgZGlyZWN0bHkuXG4gKiAqIElmIHRoZSBleHByZXNzaW9uIGV2YWx1YXRlcyB0byBhIHN0cmluZywgdGhlbiBpdCB3aWxsIGJlIGNvbnZlcnRlZCB0byBhIFJlZ0V4cCBhZnRlciB3cmFwcGluZyBpdFxuICogaW4gYF5gIGFuZCBgJGAgY2hhcmFjdGVycy4gRm9yIGluc3RhbmNlLCBgXCJhYmNcImAgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gYG5ldyBSZWdFeHAoJ15hYmMkJylgLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJhbGVydCBhbGVydC1pbmZvXCI+XG4gKiAqKk5vdGU6KiogQXZvaWQgdXNpbmcgdGhlIGBnYCBmbGFnIG9uIHRoZSBSZWdFeHAsIGFzIGl0IHdpbGwgY2F1c2UgZWFjaCBzdWNjZXNzaXZlIHNlYXJjaCB0b1xuICogc3RhcnQgYXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHNlYXJjaCdzIG1hdGNoLCB0aHVzIG5vdCB0YWtpbmcgdGhlIHdob2xlIGlucHV0IHZhbHVlIGludG9cbiAqIGFjY291bnQuXG4gKiA8L2Rpdj5cbiAqXG4gKiA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiPlxuICogKipOb3RlOioqIFRoaXMgZGlyZWN0aXZlIGlzIGFsc28gYWRkZWQgd2hlbiB0aGUgcGxhaW4gYHBhdHRlcm5gIGF0dHJpYnV0ZSBpcyB1c2VkLCB3aXRoIHR3b1xuICogZGlmZmVyZW5jZXM6XG4gKiA8b2w+XG4gKiAgIDxsaT5cbiAqICAgICBgbmdQYXR0ZXJuYCBkb2VzIG5vdCBzZXQgdGhlIGBwYXR0ZXJuYCBhdHRyaWJ1dGUgYW5kIHRoZXJlZm9yZSBIVE1MNSBjb25zdHJhaW50IHZhbGlkYXRpb24gaXNcbiAqICAgICBub3QgYXZhaWxhYmxlLlxuICogICA8L2xpPlxuICogICA8bGk+XG4gKiAgICAgVGhlIGBuZ1BhdHRlcm5gIGF0dHJpYnV0ZSBtdXN0IGJlIGFuIGV4cHJlc3Npb24sIHdoaWxlIHRoZSBgcGF0dGVybmAgdmFsdWUgbXVzdCBiZVxuICogICAgIGludGVycG9sYXRlZC5cbiAqICAgPC9saT5cbiAqIDwvb2w+XG4gKiA8L2Rpdj5cbiAqXG4gKiBAZXhhbXBsZVxuICogPGV4YW1wbGUgbmFtZT1cIm5nUGF0dGVybkRpcmVjdGl2ZVwiIG1vZHVsZT1cIm5nUGF0dGVybkV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8c2NyaXB0PlxuICogICAgICAgYW5ndWxhci5tb2R1bGUoJ25nUGF0dGVybkV4YW1wbGUnLCBbXSlcbiAqICAgICAgICAgLmNvbnRyb2xsZXIoJ0V4YW1wbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCBmdW5jdGlvbigkc2NvcGUpIHtcbiAqICAgICAgICAgICAkc2NvcGUucmVnZXggPSAnXFxcXGQrJztcbiAqICAgICAgICAgfV0pO1xuICogICAgIDwvc2NyaXB0PlxuICogICAgIDxkaXYgbmctY29udHJvbGxlcj1cIkV4YW1wbGVDb250cm9sbGVyXCI+XG4gKiAgICAgICA8Zm9ybSBuYW1lPVwiZm9ybVwiPlxuICogICAgICAgICA8bGFiZWwgZm9yPVwicmVnZXhcIj5TZXQgYSBwYXR0ZXJuIChyZWdleCBzdHJpbmcpOiA8L2xhYmVsPlxuICogICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cInJlZ2V4XCIgaWQ9XCJyZWdleFwiIC8+XG4gKiAgICAgICAgIDxicj5cbiAqICAgICAgICAgPGxhYmVsIGZvcj1cImlucHV0XCI+VGhpcyBpbnB1dCBpcyByZXN0cmljdGVkIGJ5IHRoZSBjdXJyZW50IHBhdHRlcm46IDwvbGFiZWw+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwibW9kZWxcIiBpZD1cImlucHV0XCIgbmFtZT1cImlucHV0XCIgbmctcGF0dGVybj1cInJlZ2V4XCIgLz48YnI+XG4gKiAgICAgICAgIDxocj5cbiAqICAgICAgICAgaW5wdXQgdmFsaWQ/ID0gPGNvZGU+e3tmb3JtLmlucHV0LiR2YWxpZH19PC9jb2RlPjxicj5cbiAqICAgICAgICAgbW9kZWwgPSA8Y29kZT57e21vZGVsfX08L2NvZGU+XG4gKiAgICAgICA8L2Zvcm0+XG4gKiAgICAgPC9kaXY+XG4gKiAgIDwvZmlsZT5cbiAqICAgPGZpbGUgbmFtZT1cInByb3RyYWN0b3IuanNcIiB0eXBlPVwicHJvdHJhY3RvclwiPlxuICAgICAgIHZhciBtb2RlbCA9IGVsZW1lbnQoYnkuYmluZGluZygnbW9kZWwnKSk7XG4gICAgICAgdmFyIGlucHV0ID0gZWxlbWVudChieS5pZCgnaW5wdXQnKSk7XG5cbiAgICAgICBpdCgnc2hvdWxkIHZhbGlkYXRlIHRoZSBpbnB1dCB3aXRoIHRoZSBkZWZhdWx0IHBhdHRlcm4nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdhYWEnKTtcbiAgICAgICAgIGV4cGVjdChtb2RlbC5nZXRUZXh0KCkpLm5vdC50b0NvbnRhaW4oJ2FhYScpO1xuXG4gICAgICAgICBpbnB1dC5jbGVhcigpLnRoZW4oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgIGlucHV0LnNlbmRLZXlzKCcxMjMnKTtcbiAgICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9Db250YWluKCcxMjMnKTtcbiAgICAgICAgIH0pO1xuICAgICAgIH0pO1xuICogICA8L2ZpbGU+XG4gKiA8L2V4YW1wbGU+XG4gKi9cbnZhciBwYXR0ZXJuRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgcmVnZXhwLCBwYXR0ZXJuRXhwID0gYXR0ci5uZ1BhdHRlcm4gfHwgYXR0ci5wYXR0ZXJuO1xuICAgICAgYXR0ci4kb2JzZXJ2ZSgncGF0dGVybicsIGZ1bmN0aW9uKHJlZ2V4KSB7XG4gICAgICAgIGlmIChpc1N0cmluZyhyZWdleCkgJiYgcmVnZXgubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnXicgKyByZWdleCArICckJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVnZXggJiYgIXJlZ2V4LnRlc3QpIHtcbiAgICAgICAgICB0aHJvdyBtaW5FcnIoJ25nUGF0dGVybicpKCdub3JlZ2V4cCcsXG4gICAgICAgICAgICAnRXhwZWN0ZWQgezB9IHRvIGJlIGEgUmVnRXhwIGJ1dCB3YXMgezF9LiBFbGVtZW50OiB7Mn0nLCBwYXR0ZXJuRXhwLFxuICAgICAgICAgICAgcmVnZXgsIHN0YXJ0aW5nVGFnKGVsbSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnZXhwID0gcmVnZXggfHwgdW5kZWZpbmVkO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG5cbiAgICAgIGN0cmwuJHZhbGlkYXRvcnMucGF0dGVybiA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICAvLyBIVE1MNSBwYXR0ZXJuIGNvbnN0cmFpbnQgdmFsaWRhdGVzIHRoZSBpbnB1dCB2YWx1ZSwgc28gd2UgdmFsaWRhdGUgdGhlIHZpZXdWYWx1ZVxuICAgICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpIHx8IGlzVW5kZWZpbmVkKHJlZ2V4cCkgfHwgcmVnZXhwLnRlc3Qodmlld1ZhbHVlKTtcbiAgICAgIH07XG4gICAgfVxuICB9O1xufTtcblxuLyoqXG4gKiBAbmdkb2MgZGlyZWN0aXZlXG4gKiBAbmFtZSBuZ01heGxlbmd0aFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIG5nTWF4bGVuZ3RoIGFkZHMgdGhlIG1heGxlbmd0aCB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmFsaWRhdG9ycyBgdmFsaWRhdG9yYH0gdG8ge0BsaW5rIG5nTW9kZWwgYG5nTW9kZWxgfS5cbiAqIEl0IGlzIG1vc3Qgb2Z0ZW4gdXNlZCBmb3IgdGV4dC1iYXNlZCB7QGxpbmsgaW5wdXQgYGlucHV0YH0gY29udHJvbHMsIGJ1dCBjYW4gYWxzbyBiZSBhcHBsaWVkIHRvIGN1c3RvbSB0ZXh0LWJhc2VkIGNvbnRyb2xzLlxuICpcbiAqIFRoZSB2YWxpZGF0b3Igc2V0cyB0aGUgYG1heGxlbmd0aGAgZXJyb3Iga2V5IGlmIHRoZSB7QGxpbmsgbmdNb2RlbC5OZ01vZGVsQ29udHJvbGxlciMkdmlld1ZhbHVlIGBuZ01vZGVsLiR2aWV3VmFsdWVgfVxuICogaXMgbG9uZ2VyIHRoYW4gdGhlIGludGVnZXIgb2J0YWluZWQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZVxuICogYG5nTWF4bGVuZ3RoYCBhdHRyaWJ1dGUgdmFsdWUuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICoqTm90ZToqKiBUaGlzIGRpcmVjdGl2ZSBpcyBhbHNvIGFkZGVkIHdoZW4gdGhlIHBsYWluIGBtYXhsZW5ndGhgIGF0dHJpYnV0ZSBpcyB1c2VkLCB3aXRoIHR3b1xuICogZGlmZmVyZW5jZXM6XG4gKiA8b2w+XG4gKiAgIDxsaT5cbiAqICAgICBgbmdNYXhsZW5ndGhgIGRvZXMgbm90IHNldCB0aGUgYG1heGxlbmd0aGAgYXR0cmlidXRlIGFuZCB0aGVyZWZvcmUgSFRNTDUgY29uc3RyYWludFxuICogICAgIHZhbGlkYXRpb24gaXMgbm90IGF2YWlsYWJsZS5cbiAqICAgPC9saT5cbiAqICAgPGxpPlxuICogICAgIFRoZSBgbmdNYXhsZW5ndGhgIGF0dHJpYnV0ZSBtdXN0IGJlIGFuIGV4cHJlc3Npb24sIHdoaWxlIHRoZSBgbWF4bGVuZ3RoYCB2YWx1ZSBtdXN0IGJlXG4gKiAgICAgaW50ZXJwb2xhdGVkLlxuICogICA8L2xpPlxuICogPC9vbD5cbiAqIDwvZGl2PlxuICpcbiAqIEBleGFtcGxlXG4gKiA8ZXhhbXBsZSBuYW1lPVwibmdNYXhsZW5ndGhEaXJlY3RpdmVcIiBtb2R1bGU9XCJuZ01heGxlbmd0aEV4YW1wbGVcIj5cbiAqICAgPGZpbGUgbmFtZT1cImluZGV4Lmh0bWxcIj5cbiAqICAgICA8c2NyaXB0PlxuICogICAgICAgYW5ndWxhci5tb2R1bGUoJ25nTWF4bGVuZ3RoRXhhbXBsZScsIFtdKVxuICogICAgICAgICAuY29udHJvbGxlcignRXhhbXBsZUNvbnRyb2xsZXInLCBbJyRzY29wZScsIGZ1bmN0aW9uKCRzY29wZSkge1xuICogICAgICAgICAgICRzY29wZS5tYXhsZW5ndGggPSA1O1xuICogICAgICAgICB9XSk7XG4gKiAgICAgPC9zY3JpcHQ+XG4gKiAgICAgPGRpdiBuZy1jb250cm9sbGVyPVwiRXhhbXBsZUNvbnRyb2xsZXJcIj5cbiAqICAgICAgIDxmb3JtIG5hbWU9XCJmb3JtXCI+XG4gKiAgICAgICAgIDxsYWJlbCBmb3I9XCJtYXhsZW5ndGhcIj5TZXQgYSBtYXhsZW5ndGg6IDwvbGFiZWw+XG4gKiAgICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgbmctbW9kZWw9XCJtYXhsZW5ndGhcIiBpZD1cIm1heGxlbmd0aFwiIC8+XG4gKiAgICAgICAgIDxicj5cbiAqICAgICAgICAgPGxhYmVsIGZvcj1cImlucHV0XCI+VGhpcyBpbnB1dCBpcyByZXN0cmljdGVkIGJ5IHRoZSBjdXJyZW50IG1heGxlbmd0aDogPC9sYWJlbD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJtb2RlbFwiIGlkPVwiaW5wdXRcIiBuYW1lPVwiaW5wdXRcIiBuZy1tYXhsZW5ndGg9XCJtYXhsZW5ndGhcIiAvPjxicj5cbiAqICAgICAgICAgPGhyPlxuICogICAgICAgICBpbnB1dCB2YWxpZD8gPSA8Y29kZT57e2Zvcm0uaW5wdXQuJHZhbGlkfX08L2NvZGU+PGJyPlxuICogICAgICAgICBtb2RlbCA9IDxjb2RlPnt7bW9kZWx9fTwvY29kZT5cbiAqICAgICAgIDwvZm9ybT5cbiAqICAgICA8L2Rpdj5cbiAqICAgPC9maWxlPlxuICogICA8ZmlsZSBuYW1lPVwicHJvdHJhY3Rvci5qc1wiIHR5cGU9XCJwcm90cmFjdG9yXCI+XG4gICAgICAgdmFyIG1vZGVsID0gZWxlbWVudChieS5iaW5kaW5nKCdtb2RlbCcpKTtcbiAgICAgICB2YXIgaW5wdXQgPSBlbGVtZW50KGJ5LmlkKCdpbnB1dCcpKTtcblxuICAgICAgIGl0KCdzaG91bGQgdmFsaWRhdGUgdGhlIGlucHV0IHdpdGggdGhlIGRlZmF1bHQgbWF4bGVuZ3RoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICBpbnB1dC5zZW5kS2V5cygnYWJjZGVmJyk7XG4gICAgICAgICBleHBlY3QobW9kZWwuZ2V0VGV4dCgpKS5ub3QudG9Db250YWluKCdhYmNkZWYnKTtcblxuICAgICAgICAgaW5wdXQuY2xlYXIoKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICBpbnB1dC5zZW5kS2V5cygnYWJjZGUnKTtcbiAgICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9Db250YWluKCdhYmNkZScpO1xuICAgICAgICAgfSk7XG4gICAgICAgfSk7XG4gKiAgIDwvZmlsZT5cbiAqIDwvZXhhbXBsZT5cbiAqL1xudmFyIG1heGxlbmd0aERpcmVjdGl2ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJz9uZ01vZGVsJyxcbiAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRyLCBjdHJsKSB7XG4gICAgICBpZiAoIWN0cmwpIHJldHVybjtcblxuICAgICAgdmFyIG1heGxlbmd0aCA9IC0xO1xuICAgICAgYXR0ci4kb2JzZXJ2ZSgnbWF4bGVuZ3RoJywgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGludFZhbCA9IHRvSW50KHZhbHVlKTtcbiAgICAgICAgbWF4bGVuZ3RoID0gaXNOdW1iZXJOYU4oaW50VmFsKSA/IC0xIDogaW50VmFsO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgICBjdHJsLiR2YWxpZGF0b3JzLm1heGxlbmd0aCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gKG1heGxlbmd0aCA8IDApIHx8IGN0cmwuJGlzRW1wdHkodmlld1ZhbHVlKSB8fCAodmlld1ZhbHVlLmxlbmd0aCA8PSBtYXhsZW5ndGgpO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG4vKipcbiAqIEBuZ2RvYyBkaXJlY3RpdmVcbiAqIEBuYW1lIG5nTWlubGVuZ3RoXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogbmdNaW5sZW5ndGggYWRkcyB0aGUgbWlubGVuZ3RoIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2YWxpZGF0b3JzIGB2YWxpZGF0b3JgfSB0byB7QGxpbmsgbmdNb2RlbCBgbmdNb2RlbGB9LlxuICogSXQgaXMgbW9zdCBvZnRlbiB1c2VkIGZvciB0ZXh0LWJhc2VkIHtAbGluayBpbnB1dCBgaW5wdXRgfSBjb250cm9scywgYnV0IGNhbiBhbHNvIGJlIGFwcGxpZWQgdG8gY3VzdG9tIHRleHQtYmFzZWQgY29udHJvbHMuXG4gKlxuICogVGhlIHZhbGlkYXRvciBzZXRzIHRoZSBgbWlubGVuZ3RoYCBlcnJvciBrZXkgaWYgdGhlIHtAbGluayBuZ01vZGVsLk5nTW9kZWxDb250cm9sbGVyIyR2aWV3VmFsdWUgYG5nTW9kZWwuJHZpZXdWYWx1ZWB9XG4gKiBpcyBzaG9ydGVyIHRoYW4gdGhlIGludGVnZXIgb2J0YWluZWQgYnkgZXZhbHVhdGluZyB0aGUgQW5ndWxhciBleHByZXNzaW9uIGdpdmVuIGluIHRoZVxuICogYG5nTWlubGVuZ3RoYCBhdHRyaWJ1dGUgdmFsdWUuXG4gKlxuICogPGRpdiBjbGFzcz1cImFsZXJ0IGFsZXJ0LWluZm9cIj5cbiAqICoqTm90ZToqKiBUaGlzIGRpcmVjdGl2ZSBpcyBhbHNvIGFkZGVkIHdoZW4gdGhlIHBsYWluIGBtaW5sZW5ndGhgIGF0dHJpYnV0ZSBpcyB1c2VkLCB3aXRoIHR3b1xuICogZGlmZmVyZW5jZXM6XG4gKiA8b2w+XG4gKiAgIDxsaT5cbiAqICAgICBgbmdNaW5sZW5ndGhgIGRvZXMgbm90IHNldCB0aGUgYG1pbmxlbmd0aGAgYXR0cmlidXRlIGFuZCB0aGVyZWZvcmUgSFRNTDUgY29uc3RyYWludFxuICogICAgIHZhbGlkYXRpb24gaXMgbm90IGF2YWlsYWJsZS5cbiAqICAgPC9saT5cbiAqICAgPGxpPlxuICogICAgIFRoZSBgbmdNaW5sZW5ndGhgIHZhbHVlIG11c3QgYmUgYW4gZXhwcmVzc2lvbiwgd2hpbGUgdGhlIGBtaW5sZW5ndGhgIHZhbHVlIG11c3QgYmVcbiAqICAgICBpbnRlcnBvbGF0ZWQuXG4gKiAgIDwvbGk+XG4gKiA8L29sPlxuICogPC9kaXY+XG4gKlxuICogQGV4YW1wbGVcbiAqIDxleGFtcGxlIG5hbWU9XCJuZ01pbmxlbmd0aERpcmVjdGl2ZVwiIG1vZHVsZT1cIm5nTWlubGVuZ3RoRXhhbXBsZVwiPlxuICogICA8ZmlsZSBuYW1lPVwiaW5kZXguaHRtbFwiPlxuICogICAgIDxzY3JpcHQ+XG4gKiAgICAgICBhbmd1bGFyLm1vZHVsZSgnbmdNaW5sZW5ndGhFeGFtcGxlJywgW10pXG4gKiAgICAgICAgIC5jb250cm9sbGVyKCdFeGFtcGxlQ29udHJvbGxlcicsIFsnJHNjb3BlJywgZnVuY3Rpb24oJHNjb3BlKSB7XG4gKiAgICAgICAgICAgJHNjb3BlLm1pbmxlbmd0aCA9IDM7XG4gKiAgICAgICAgIH1dKTtcbiAqICAgICA8L3NjcmlwdD5cbiAqICAgICA8ZGl2IG5nLWNvbnRyb2xsZXI9XCJFeGFtcGxlQ29udHJvbGxlclwiPlxuICogICAgICAgPGZvcm0gbmFtZT1cImZvcm1cIj5cbiAqICAgICAgICAgPGxhYmVsIGZvcj1cIm1pbmxlbmd0aFwiPlNldCBhIG1pbmxlbmd0aDogPC9sYWJlbD5cbiAqICAgICAgICAgPGlucHV0IHR5cGU9XCJudW1iZXJcIiBuZy1tb2RlbD1cIm1pbmxlbmd0aFwiIGlkPVwibWlubGVuZ3RoXCIgLz5cbiAqICAgICAgICAgPGJyPlxuICogICAgICAgICA8bGFiZWwgZm9yPVwiaW5wdXRcIj5UaGlzIGlucHV0IGlzIHJlc3RyaWN0ZWQgYnkgdGhlIGN1cnJlbnQgbWlubGVuZ3RoOiA8L2xhYmVsPlxuICogICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBuZy1tb2RlbD1cIm1vZGVsXCIgaWQ9XCJpbnB1dFwiIG5hbWU9XCJpbnB1dFwiIG5nLW1pbmxlbmd0aD1cIm1pbmxlbmd0aFwiIC8+PGJyPlxuICogICAgICAgICA8aHI+XG4gKiAgICAgICAgIGlucHV0IHZhbGlkPyA9IDxjb2RlPnt7Zm9ybS5pbnB1dC4kdmFsaWR9fTwvY29kZT48YnI+XG4gKiAgICAgICAgIG1vZGVsID0gPGNvZGU+e3ttb2RlbH19PC9jb2RlPlxuICogICAgICAgPC9mb3JtPlxuICogICAgIDwvZGl2PlxuICogICA8L2ZpbGU+XG4gKiAgIDxmaWxlIG5hbWU9XCJwcm90cmFjdG9yLmpzXCIgdHlwZT1cInByb3RyYWN0b3JcIj5cbiAgICAgICB2YXIgbW9kZWwgPSBlbGVtZW50KGJ5LmJpbmRpbmcoJ21vZGVsJykpO1xuICAgICAgIHZhciBpbnB1dCA9IGVsZW1lbnQoYnkuaWQoJ2lucHV0JykpO1xuXG4gICAgICAgaXQoJ3Nob3VsZCB2YWxpZGF0ZSB0aGUgaW5wdXQgd2l0aCB0aGUgZGVmYXVsdCBtaW5sZW5ndGgnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgIGlucHV0LnNlbmRLZXlzKCdhYicpO1xuICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkubm90LnRvQ29udGFpbignYWInKTtcblxuICAgICAgICAgaW5wdXQuc2VuZEtleXMoJ2FiYycpO1xuICAgICAgICAgZXhwZWN0KG1vZGVsLmdldFRleHQoKSkudG9Db250YWluKCdhYmMnKTtcbiAgICAgICB9KTtcbiAqICAgPC9maWxlPlxuICogPC9leGFtcGxlPlxuICovXG52YXIgbWlubGVuZ3RoRGlyZWN0aXZlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAnP25nTW9kZWwnLFxuICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbG0sIGF0dHIsIGN0cmwpIHtcbiAgICAgIGlmICghY3RybCkgcmV0dXJuO1xuXG4gICAgICB2YXIgbWlubGVuZ3RoID0gMDtcbiAgICAgIGF0dHIuJG9ic2VydmUoJ21pbmxlbmd0aCcsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIG1pbmxlbmd0aCA9IHRvSW50KHZhbHVlKSB8fCAwO1xuICAgICAgICBjdHJsLiR2YWxpZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgICBjdHJsLiR2YWxpZGF0b3JzLm1pbmxlbmd0aCA9IGZ1bmN0aW9uKG1vZGVsVmFsdWUsIHZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm4gY3RybC4kaXNFbXB0eSh2aWV3VmFsdWUpIHx8IHZpZXdWYWx1ZS5sZW5ndGggPj0gbWlubGVuZ3RoO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG5pZiAod2luZG93LmFuZ3VsYXIuYm9vdHN0cmFwKSB7XG4gIC8vIEFuZ3VsYXJKUyBpcyBhbHJlYWR5IGxvYWRlZCwgc28gd2UgY2FuIHJldHVybiBoZXJlLi4uXG4gIGlmICh3aW5kb3cuY29uc29sZSkge1xuICAgIGNvbnNvbGUubG9nKCdXQVJOSU5HOiBUcmllZCB0byBsb2FkIGFuZ3VsYXIgbW9yZSB0aGFuIG9uY2UuJyk7XG4gIH1cbiAgcmV0dXJuO1xufVxuXG4vLyB0cnkgdG8gYmluZCB0byBqcXVlcnkgbm93IHNvIHRoYXQgb25lIGNhbiB3cml0ZSBqcUxpdGUoZm4pXG4vLyBidXQgd2Ugd2lsbCByZWJpbmQgb24gYm9vdHN0cmFwIGFnYWluLlxuYmluZEpRdWVyeSgpO1xuXG5wdWJsaXNoRXh0ZXJuYWxBUEkoYW5ndWxhcik7XG5cbmFuZ3VsYXIubW9kdWxlKFwibmdMb2NhbGVcIiwgW10sIFtcIiRwcm92aWRlXCIsIGZ1bmN0aW9uKCRwcm92aWRlKSB7XG52YXIgUExVUkFMX0NBVEVHT1JZID0ge1pFUk86IFwiemVyb1wiLCBPTkU6IFwib25lXCIsIFRXTzogXCJ0d29cIiwgRkVXOiBcImZld1wiLCBNQU5ZOiBcIm1hbnlcIiwgT1RIRVI6IFwib3RoZXJcIn07XG5mdW5jdGlvbiBnZXREZWNpbWFscyhuKSB7XG4gIG4gPSBuICsgJyc7XG4gIHZhciBpID0gbi5pbmRleE9mKCcuJyk7XG4gIHJldHVybiAoaSA9PSAtMSkgPyAwIDogbi5sZW5ndGggLSBpIC0gMTtcbn1cblxuZnVuY3Rpb24gZ2V0VkYobiwgb3B0X3ByZWNpc2lvbikge1xuICB2YXIgdiA9IG9wdF9wcmVjaXNpb247XG5cbiAgaWYgKHVuZGVmaW5lZCA9PT0gdikge1xuICAgIHYgPSBNYXRoLm1pbihnZXREZWNpbWFscyhuKSwgMyk7XG4gIH1cblxuICB2YXIgYmFzZSA9IE1hdGgucG93KDEwLCB2KTtcbiAgdmFyIGYgPSAoKG4gKiBiYXNlKSB8IDApICUgYmFzZTtcbiAgcmV0dXJuIHt2OiB2LCBmOiBmfTtcbn1cblxuJHByb3ZpZGUudmFsdWUoXCIkbG9jYWxlXCIsIHtcbiAgXCJEQVRFVElNRV9GT1JNQVRTXCI6IHtcbiAgICBcIkFNUE1TXCI6IFtcbiAgICAgIFwiQU1cIixcbiAgICAgIFwiUE1cIlxuICAgIF0sXG4gICAgXCJEQVlcIjogW1xuICAgICAgXCJTdW5kYXlcIixcbiAgICAgIFwiTW9uZGF5XCIsXG4gICAgICBcIlR1ZXNkYXlcIixcbiAgICAgIFwiV2VkbmVzZGF5XCIsXG4gICAgICBcIlRodXJzZGF5XCIsXG4gICAgICBcIkZyaWRheVwiLFxuICAgICAgXCJTYXR1cmRheVwiXG4gICAgXSxcbiAgICBcIkVSQU5BTUVTXCI6IFtcbiAgICAgIFwiQmVmb3JlIENocmlzdFwiLFxuICAgICAgXCJBbm5vIERvbWluaVwiXG4gICAgXSxcbiAgICBcIkVSQVNcIjogW1xuICAgICAgXCJCQ1wiLFxuICAgICAgXCJBRFwiXG4gICAgXSxcbiAgICBcIkZJUlNUREFZT0ZXRUVLXCI6IDYsXG4gICAgXCJNT05USFwiOiBbXG4gICAgICBcIkphbnVhcnlcIixcbiAgICAgIFwiRmVicnVhcnlcIixcbiAgICAgIFwiTWFyY2hcIixcbiAgICAgIFwiQXByaWxcIixcbiAgICAgIFwiTWF5XCIsXG4gICAgICBcIkp1bmVcIixcbiAgICAgIFwiSnVseVwiLFxuICAgICAgXCJBdWd1c3RcIixcbiAgICAgIFwiU2VwdGVtYmVyXCIsXG4gICAgICBcIk9jdG9iZXJcIixcbiAgICAgIFwiTm92ZW1iZXJcIixcbiAgICAgIFwiRGVjZW1iZXJcIlxuICAgIF0sXG4gICAgXCJTSE9SVERBWVwiOiBbXG4gICAgICBcIlN1blwiLFxuICAgICAgXCJNb25cIixcbiAgICAgIFwiVHVlXCIsXG4gICAgICBcIldlZFwiLFxuICAgICAgXCJUaHVcIixcbiAgICAgIFwiRnJpXCIsXG4gICAgICBcIlNhdFwiXG4gICAgXSxcbiAgICBcIlNIT1JUTU9OVEhcIjogW1xuICAgICAgXCJKYW5cIixcbiAgICAgIFwiRmViXCIsXG4gICAgICBcIk1hclwiLFxuICAgICAgXCJBcHJcIixcbiAgICAgIFwiTWF5XCIsXG4gICAgICBcIkp1blwiLFxuICAgICAgXCJKdWxcIixcbiAgICAgIFwiQXVnXCIsXG4gICAgICBcIlNlcFwiLFxuICAgICAgXCJPY3RcIixcbiAgICAgIFwiTm92XCIsXG4gICAgICBcIkRlY1wiXG4gICAgXSxcbiAgICBcIlNUQU5EQUxPTkVNT05USFwiOiBbXG4gICAgICBcIkphbnVhcnlcIixcbiAgICAgIFwiRmVicnVhcnlcIixcbiAgICAgIFwiTWFyY2hcIixcbiAgICAgIFwiQXByaWxcIixcbiAgICAgIFwiTWF5XCIsXG4gICAgICBcIkp1bmVcIixcbiAgICAgIFwiSnVseVwiLFxuICAgICAgXCJBdWd1c3RcIixcbiAgICAgIFwiU2VwdGVtYmVyXCIsXG4gICAgICBcIk9jdG9iZXJcIixcbiAgICAgIFwiTm92ZW1iZXJcIixcbiAgICAgIFwiRGVjZW1iZXJcIlxuICAgIF0sXG4gICAgXCJXRUVLRU5EUkFOR0VcIjogW1xuICAgICAgNSxcbiAgICAgIDZcbiAgICBdLFxuICAgIFwiZnVsbERhdGVcIjogXCJFRUVFLCBNTU1NIGQsIHlcIixcbiAgICBcImxvbmdEYXRlXCI6IFwiTU1NTSBkLCB5XCIsXG4gICAgXCJtZWRpdW1cIjogXCJNTU0gZCwgeSBoOm1tOnNzIGFcIixcbiAgICBcIm1lZGl1bURhdGVcIjogXCJNTU0gZCwgeVwiLFxuICAgIFwibWVkaXVtVGltZVwiOiBcImg6bW06c3MgYVwiLFxuICAgIFwic2hvcnRcIjogXCJNL2QveXkgaDptbSBhXCIsXG4gICAgXCJzaG9ydERhdGVcIjogXCJNL2QveXlcIixcbiAgICBcInNob3J0VGltZVwiOiBcImg6bW0gYVwiXG4gIH0sXG4gIFwiTlVNQkVSX0ZPUk1BVFNcIjoge1xuICAgIFwiQ1VSUkVOQ1lfU1lNXCI6IFwiJFwiLFxuICAgIFwiREVDSU1BTF9TRVBcIjogXCIuXCIsXG4gICAgXCJHUk9VUF9TRVBcIjogXCIsXCIsXG4gICAgXCJQQVRURVJOU1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwiZ1NpemVcIjogMyxcbiAgICAgICAgXCJsZ1NpemVcIjogMyxcbiAgICAgICAgXCJtYXhGcmFjXCI6IDMsXG4gICAgICAgIFwibWluRnJhY1wiOiAwLFxuICAgICAgICBcIm1pbkludFwiOiAxLFxuICAgICAgICBcIm5lZ1ByZVwiOiBcIi1cIixcbiAgICAgICAgXCJuZWdTdWZcIjogXCJcIixcbiAgICAgICAgXCJwb3NQcmVcIjogXCJcIixcbiAgICAgICAgXCJwb3NTdWZcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJnU2l6ZVwiOiAzLFxuICAgICAgICBcImxnU2l6ZVwiOiAzLFxuICAgICAgICBcIm1heEZyYWNcIjogMixcbiAgICAgICAgXCJtaW5GcmFjXCI6IDIsXG4gICAgICAgIFwibWluSW50XCI6IDEsXG4gICAgICAgIFwibmVnUHJlXCI6IFwiLVxcdTAwYTRcIixcbiAgICAgICAgXCJuZWdTdWZcIjogXCJcIixcbiAgICAgICAgXCJwb3NQcmVcIjogXCJcXHUwMGE0XCIsXG4gICAgICAgIFwicG9zU3VmXCI6IFwiXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIFwiaWRcIjogXCJlbi11c1wiLFxuICBcImxvY2FsZUlEXCI6IFwiZW5fVVNcIixcbiAgXCJwbHVyYWxDYXRcIjogZnVuY3Rpb24obiwgb3B0X3ByZWNpc2lvbikgeyAgdmFyIGkgPSBuIHwgMDsgIHZhciB2ZiA9IGdldFZGKG4sIG9wdF9wcmVjaXNpb24pOyAgaWYgKGkgPT0gMSAmJiB2Zi52ID09IDApIHsgICAgcmV0dXJuIFBMVVJBTF9DQVRFR09SWS5PTkU7ICB9ICByZXR1cm4gUExVUkFMX0NBVEVHT1JZLk9USEVSO31cbn0pO1xufV0pO1xuXG4gIGpxTGl0ZShmdW5jdGlvbigpIHtcbiAgICBhbmd1bGFySW5pdCh3aW5kb3cuZG9jdW1lbnQsIGJvb3RzdHJhcCk7XG4gIH0pO1xuXG59KSh3aW5kb3cpO1xuXG4hd2luZG93LmFuZ3VsYXIuJCRjc3AoKS5ub0lubGluZVN0eWxlICYmIHdpbmRvdy5hbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuaGVhZCkucHJlcGVuZCgnPHN0eWxlIHR5cGU9XCJ0ZXh0L2Nzc1wiPkBjaGFyc2V0IFwiVVRGLThcIjtbbmdcXFxcOmNsb2FrXSxbbmctY2xvYWtdLFtkYXRhLW5nLWNsb2FrXSxbeC1uZy1jbG9ha10sLm5nLWNsb2FrLC54LW5nLWNsb2FrLC5uZy1oaWRlOm5vdCgubmctaGlkZS1hbmltYXRlKXtkaXNwbGF5Om5vbmUgIWltcG9ydGFudDt9bmdcXFxcOmZvcm17ZGlzcGxheTpibG9jazt9Lm5nLWFuaW1hdGUtc2hpbXt2aXNpYmlsaXR5OmhpZGRlbjt9Lm5nLWFuY2hvcntwb3NpdGlvbjphYnNvbHV0ZTt9PC9zdHlsZT4nKTtcblwidXNlIHN0cmljdFwiOyJdfQ==
